// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.models.AllocationMethod;
import com.azure.resourcemanager.scvmm.models.NetworkInterfaceUpdate;
import org.junit.jupiter.api.Assertions;

public final class NetworkInterfaceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkInterfaceUpdate model = BinaryData.fromString(
            "{\"name\":\"xodpuozmyzydagfu\",\"macAddress\":\"bezy\",\"virtualNetworkId\":\"okktwhrdxw\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Static\",\"nicId\":\"ureximoryocfs\"}")
            .toObject(NetworkInterfaceUpdate.class);
        Assertions.assertEquals("xodpuozmyzydagfu", model.name());
        Assertions.assertEquals("bezy", model.macAddress());
        Assertions.assertEquals("okktwhrdxw", model.virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.DYNAMIC, model.ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.DYNAMIC, model.ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.macAddressType());
        Assertions.assertEquals("ureximoryocfs", model.nicId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkInterfaceUpdate model = new NetworkInterfaceUpdate().withName("xodpuozmyzydagfu")
            .withMacAddress("bezy")
            .withVirtualNetworkId("okktwhrdxw")
            .withIpv4AddressType(AllocationMethod.DYNAMIC)
            .withIpv6AddressType(AllocationMethod.DYNAMIC)
            .withMacAddressType(AllocationMethod.STATIC)
            .withNicId("ureximoryocfs");
        model = BinaryData.fromObject(model).toObject(NetworkInterfaceUpdate.class);
        Assertions.assertEquals("xodpuozmyzydagfu", model.name());
        Assertions.assertEquals("bezy", model.macAddress());
        Assertions.assertEquals("okktwhrdxw", model.virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.DYNAMIC, model.ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.DYNAMIC, model.ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.macAddressType());
        Assertions.assertEquals("ureximoryocfs", model.nicId());
    }
}
