// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.models.AllocationMethod;
import com.azure.resourcemanager.scvmm.models.NetworkInterfaceUpdate;
import org.junit.jupiter.api.Assertions;

public final class NetworkInterfaceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkInterfaceUpdate model =
            BinaryData
                .fromString(
                    "{\"name\":\"hyjsvfycx\",\"macAddress\":\"fvoow\",\"virtualNetworkId\":\"vmtgjqppy\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Dynamic\",\"nicId\":\"yhgfipnsx\"}")
                .toObject(NetworkInterfaceUpdate.class);
        Assertions.assertEquals("hyjsvfycx", model.name());
        Assertions.assertEquals("fvoow", model.macAddress());
        Assertions.assertEquals("vmtgjqppy", model.virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.STATIC, model.ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.DYNAMIC, model.ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.DYNAMIC, model.macAddressType());
        Assertions.assertEquals("yhgfipnsx", model.nicId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkInterfaceUpdate model =
            new NetworkInterfaceUpdate()
                .withName("hyjsvfycx")
                .withMacAddress("fvoow")
                .withVirtualNetworkId("vmtgjqppy")
                .withIpv4AddressType(AllocationMethod.STATIC)
                .withIpv6AddressType(AllocationMethod.DYNAMIC)
                .withMacAddressType(AllocationMethod.DYNAMIC)
                .withNicId("yhgfipnsx");
        model = BinaryData.fromObject(model).toObject(NetworkInterfaceUpdate.class);
        Assertions.assertEquals("hyjsvfycx", model.name());
        Assertions.assertEquals("fvoow", model.macAddress());
        Assertions.assertEquals("vmtgjqppy", model.virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.STATIC, model.ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.DYNAMIC, model.ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.DYNAMIC, model.macAddressType());
        Assertions.assertEquals("yhgfipnsx", model.nicId());
    }
}
