// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.scvmm.ScvmmManager;
import com.azure.resourcemanager.scvmm.models.Cloud;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class CloudsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"inventoryItemId\":\"stgktst\",\"uuid\":\"xeclzedqbcvhzlhp\",\"vmmServerId\":\"dqkdlwwqfbu\",\"cloudName\":\"kxtrq\",\"cloudCapacity\":{\"cpuCount\":7319826162281846697,\"memoryMB\":2316780080896501746,\"vmCount\":8691764890760034239},\"storageQoSPolicies\":[{\"name\":\"srtawcoezbr\",\"id\":\"bskhudygoookkqfq\",\"iopsMaximum\":4114997006993721978,\"iopsMinimum\":746345832353203980,\"bandwidthLimit\":2025762393106298017,\"policyId\":\"iqtqzfavyvnq\"},{\"name\":\"bar\",\"id\":\"uayjkqa\",\"iopsMaximum\":8602241806371177049,\"iopsMinimum\":8896482988718350151,\"bandwidthLimit\":7968063218366486491,\"policyId\":\"hernntiewdjc\"},{\"name\":\"quwrbehwag\",\"id\":\"buffkmrqemvvhm\",\"iopsMaximum\":3657364039140978355,\"iopsMinimum\":6123217665752940930,\"bandwidthLimit\":6646451916229099217,\"policyId\":\"ebjvewzcjzn\"},{\"name\":\"cpmguaadraufact\",\"id\":\"hzovaj\",\"iopsMaximum\":6936371557896321077,\"iopsMinimum\":3216937371702961106,\"bandwidthLimit\":7300270092381343923,\"policyId\":\"e\"}],\"provisioningState\":\"Failed\"},\"extendedLocation\":{\"type\":\"gs\",\"name\":\"ubkwdle\"},\"location\":\"d\",\"tags\":{\"orwmduvwpklv\":\"ujbazpjuohminyfl\",\"ygdxpgpqchis\":\"w\",\"bjcrxgibbdaxco\":\"epn\"},\"id\":\"fozauorsuk\",\"name\":\"kwbqplhlvnuu\",\"type\":\"pzlrphw\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ScvmmManager manager =
            ScvmmManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Cloud> response = manager.clouds().listByResourceGroup("zibt", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("d", response.iterator().next().location());
        Assertions.assertEquals("ujbazpjuohminyfl", response.iterator().next().tags().get("orwmduvwpklv"));
        Assertions.assertEquals("gs", response.iterator().next().extendedLocation().type());
        Assertions.assertEquals("ubkwdle", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals("stgktst", response.iterator().next().inventoryItemId());
        Assertions.assertEquals("xeclzedqbcvhzlhp", response.iterator().next().uuid());
        Assertions.assertEquals("dqkdlwwqfbu", response.iterator().next().vmmServerId());
    }
}
