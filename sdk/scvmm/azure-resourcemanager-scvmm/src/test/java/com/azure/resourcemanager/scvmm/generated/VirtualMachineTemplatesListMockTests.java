// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.scvmm.ScvmmManager;
import com.azure.resourcemanager.scvmm.models.VirtualMachineTemplate;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class VirtualMachineTemplatesListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"inventoryItemId\":\"cvbmqzb\",\"uuid\":\"xl\",\"vmmServerId\":\"rnwxacevehjkuyxo\",\"osType\":\"Linux\",\"osName\":\"oqltfae\",\"computerName\":\"inmfgvxirp\",\"memoryMB\":1536245403,\"cpuCount\":814102500,\"limitCpuForMigration\":\"true\",\"dynamicMemoryEnabled\":\"true\",\"isCustomizable\":\"true\",\"dynamicMemoryMaxMB\":761412131,\"dynamicMemoryMinMB\":446701415,\"isHighlyAvailable\":\"false\",\"generation\":1758426290,\"networkInterfaces\":[{\"name\":\"nuciqdsmexiit\",\"displayName\":\"uxtyasiibmi\",\"ipv4Addresses\":[\"nustgnljh\",\"mgixhcmavmqfou\"],\"ipv6Addresses\":[\"hcgyyprotwyp\"],\"macAddress\":\"d\",\"virtualNetworkId\":\"xhugcm\",\"networkName\":\"avlg\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Dynamic\",\"nicId\":\"dtzfjltfvnzcy\"},{\"name\":\"otp\",\"displayName\":\"pvpbdbzqgqqiheds\",\"ipv4Addresses\":[\"thmkyib\",\"ysi\"],\"ipv6Addresses\":[\"qcwdhoh\",\"dtmcd\",\"sufco\",\"dxbzlmcmuap\"],\"macAddress\":\"hdbevwqqxeyskon\",\"virtualNetworkId\":\"inkfkbgbz\",\"networkName\":\"wxeqocljmygvkzqk\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Static\",\"nicId\":\"fezrx\"}],\"disks\":[{\"name\":\"rtle\",\"displayName\":\"q\",\"diskId\":\"kwv\",\"diskSizeGB\":1320824273,\"maxDiskSizeGB\":51098214,\"bus\":1351617107,\"lun\":1032805283,\"busType\":\"ixz\",\"vhdType\":\"pnodawopqhe\",\"volumeType\":\"ptmcgsbostzelnd\",\"vhdFormatType\":\"tutmzl\",\"templateDiskId\":\"ojlvfhrbbpneqvc\",\"storageQoSPolicy\":{\"name\":\"yurmochpprprs\",\"id\":\"okayzejnhlbkp\"},\"createDiffDisk\":\"false\"},{\"name\":\"piljhahzvech\",\"displayName\":\"bnwieholew\",\"diskId\":\"iuubwefqsf\",\"diskSizeGB\":1697750371,\"maxDiskSizeGB\":407191024,\"bus\":175578063,\"lun\":2090626367,\"busType\":\"wexjkmfxapjwogq\",\"vhdType\":\"o\",\"volumeType\":\"udcdabtqwpwyawb\",\"vhdFormatType\":\"sqbuc\",\"templateDiskId\":\"gkyexaoguy\",\"storageQoSPolicy\":{\"name\":\"ids\",\"id\":\"ultxijjumfq\"},\"createDiffDisk\":\"false\"},{\"name\":\"nqnm\",\"displayName\":\"ngz\",\"diskId\":\"qxtbjwgnyf\",\"diskSizeGB\":362790856,\"maxDiskSizeGB\":1261085331,\"bus\":234020426,\"lun\":2097447525,\"busType\":\"zh\",\"vhdType\":\"qglcfhmlrqryxynq\",\"volumeType\":\"rd\",\"vhdFormatType\":\"ovw\",\"templateDiskId\":\"nptgoeiybba\",\"storageQoSPolicy\":{\"name\":\"hv\",\"id\":\"lkvn\"},\"createDiffDisk\":\"true\"},{\"name\":\"igjkskyrio\",\"displayName\":\"zid\",\"diskId\":\"waabzmifrygzn\",\"diskSizeGB\":852437117,\"maxDiskSizeGB\":311338762,\"bus\":1979636769,\"lun\":622882229,\"busType\":\"bgopxlhslnel\",\"vhdType\":\"eixynllxecwcroj\",\"volumeType\":\"slhcawjutifd\",\"vhdFormatType\":\"mvi\",\"templateDiskId\":\"rqjb\",\"storageQoSPolicy\":{\"name\":\"h\",\"id\":\"glka\"},\"createDiffDisk\":\"true\"}],\"provisioningState\":\"Accepted\"},\"extendedLocation\":{\"type\":\"ujeickp\",\"name\":\"cpopmxel\"},\"location\":\"clt\",\"tags\":{\"xtzx\":\"dexxmlfmkqscazua\",\"s\":\"uamwabzxrvxc\",\"gzwywak\":\"sphaivmxyasflvg\"},\"id\":\"ihknsmjbl\",\"name\":\"ljhlnymzotq\",\"type\":\"ryuzcbmqqv\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ScvmmManager manager =
            ScvmmManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<VirtualMachineTemplate> response =
            manager.virtualMachineTemplates().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("clt", response.iterator().next().location());
        Assertions.assertEquals("dexxmlfmkqscazua", response.iterator().next().tags().get("xtzx"));
        Assertions.assertEquals("ujeickp", response.iterator().next().extendedLocation().type());
        Assertions.assertEquals("cpopmxel", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals("cvbmqzb", response.iterator().next().inventoryItemId());
        Assertions.assertEquals("xl", response.iterator().next().uuid());
        Assertions.assertEquals("rnwxacevehjkuyxo", response.iterator().next().vmmServerId());
    }
}
