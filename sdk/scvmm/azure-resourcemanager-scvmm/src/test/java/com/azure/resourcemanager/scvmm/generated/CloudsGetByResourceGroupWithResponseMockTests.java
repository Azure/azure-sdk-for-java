// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.scvmm.ScvmmManager;
import com.azure.resourcemanager.scvmm.models.Cloud;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class CloudsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"inventoryItemId\":\"umrtwnawjsl\",\"uuid\":\"wkojgcyztsfmzn\",\"vmmServerId\":\"eqphchqnrnr\",\"cloudName\":\"ehuwrykqgaifmvik\",\"cloudCapacity\":{\"cpuCount\":3020386945325813203,\"memoryMB\":8629783382496754434,\"vmCount\":3115979807678511007},\"storageQoSPolicies\":[{\"name\":\"cvdsrhnj\",\"id\":\"olvtnovqfzge\",\"iopsMaximum\":4588468813568796443,\"iopsMinimum\":7570040776903453561,\"bandwidthLimit\":7390049782510101354,\"policyId\":\"ucea\"},{\"name\":\"mczuo\",\"id\":\"jw\",\"iopsMaximum\":4972912184284980492,\"iopsMinimum\":8484446413664727337,\"bandwidthLimit\":9063413586675832676,\"policyId\":\"mojmsvpkjprvkw\"}],\"provisioningState\":\"Deleting\"},\"extendedLocation\":{\"type\":\"ljyxgtczhe\",\"name\":\"bsdshmkxmaehvbbx\"},\"location\":\"iplt\",\"tags\":{\"xywr\":\"tbaxk\"},\"id\":\"kpyklyhp\",\"name\":\"uodpv\",\"type\":\"uudl\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ScvmmManager manager =
            ScvmmManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Cloud response =
            manager
                .clouds()
                .getByResourceGroupWithResponse("rcizjxvyd", "ceacvlhvygdy", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("iplt", response.location());
        Assertions.assertEquals("tbaxk", response.tags().get("xywr"));
        Assertions.assertEquals("ljyxgtczhe", response.extendedLocation().type());
        Assertions.assertEquals("bsdshmkxmaehvbbx", response.extendedLocation().name());
        Assertions.assertEquals("umrtwnawjsl", response.inventoryItemId());
        Assertions.assertEquals("wkojgcyztsfmzn", response.uuid());
        Assertions.assertEquals("eqphchqnrnr", response.vmmServerId());
    }
}
