// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.fluent.models.VirtualMachineTemplateInner;
import com.azure.resourcemanager.scvmm.models.ExtendedLocation;
import com.azure.resourcemanager.scvmm.models.VirtualMachineTemplateProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineTemplateInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineTemplateInner model = BinaryData.fromString(
            "{\"properties\":{\"inventoryItemId\":\"rhneuyowq\",\"uuid\":\"wyt\",\"vmmServerId\":\"ib\",\"osType\":\"Linux\",\"osName\":\"pikpz\",\"computerName\":\"ejzanlfz\",\"memoryMB\":386879497,\"cpuCount\":1297052787,\"limitCpuForMigration\":\"true\",\"dynamicMemoryEnabled\":\"true\",\"isCustomizable\":\"false\",\"dynamicMemoryMaxMB\":185109829,\"dynamicMemoryMinMB\":988966310,\"isHighlyAvailable\":\"true\",\"generation\":1122267125,\"networkInterfaces\":[{\"name\":\"pfrlazsz\",\"displayName\":\"woiindf\",\"ipv4Addresses\":[\"jylwbtlhflsj\"],\"ipv6Addresses\":[\"szfjvfbgofelja\",\"rqmq\"],\"macAddress\":\"dvriiiojnal\",\"virtualNetworkId\":\"fk\",\"networkName\":\"vsexsowuelu\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Static\",\"nicId\":\"rhmzkwpj\"},{\"name\":\"wspughftqsxhqx\",\"displayName\":\"xukndxdigr\",\"ipv4Addresses\":[\"ufzdmsyq\",\"fi\",\"whbotzingamv\",\"phoszqz\"],\"ipv6Addresses\":[\"hqamvdkf\",\"ynwcvtbv\",\"ayhmtnvyqiatkz\",\"pcnp\"],\"macAddress\":\"cjaesgvvs\",\"virtualNetworkId\":\"yajguqfhwygzlv\",\"networkName\":\"kfxu\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Static\",\"nicId\":\"uh\"}],\"disks\":[{\"name\":\"qdpsqxqvpsvu\",\"displayName\":\"mgccelvezrypq\",\"diskId\":\"feo\",\"diskSizeGB\":1208971148,\"maxDiskSizeGB\":1007513685,\"bus\":835251373,\"lun\":137094818,\"busType\":\"bopgxedkowepbqp\",\"vhdType\":\"fkbw\",\"volumeType\":\"snjvcdwxlpqekftn\",\"vhdFormatType\":\"tjsyin\",\"templateDiskId\":\"fq\",\"storageQoSPolicy\":{\"name\":\"tdhtmdvyp\",\"id\":\"kdgszywkbirr\"},\"createDiffDisk\":\"true\"},{\"name\":\"lhkjoqrvqq\",\"displayName\":\"t\",\"diskId\":\"nrvgoupmfiibfgg\",\"diskSizeGB\":615385800,\"maxDiskSizeGB\":364570184,\"bus\":466932926,\"lun\":176109120,\"busType\":\"v\",\"vhdType\":\"k\",\"volumeType\":\"lqwjygvjayvblm\",\"vhdFormatType\":\"k\",\"templateDiskId\":\"hbxvvyhgsopbyrqu\",\"storageQoSPolicy\":{\"name\":\"xuvw\",\"id\":\"bnhlmc\"},\"createDiffDisk\":\"true\"}],\"provisioningState\":\"Created\"},\"extendedLocation\":{\"type\":\"itvgbmhrixkwm\",\"name\":\"jejveg\"},\"location\":\"bpnaixexccbdre\",\"tags\":{\"qkghtpwijnhy\":\"cexdrrvqa\",\"owvrvmtgjqppyos\":\"svfycxzbfv\",\"sxkm\":\"ronzmyhgfip\"},\"id\":\"waekrrjreafxtsgu\",\"name\":\"hjglikk\",\"type\":\"wslolbqp\"}")
            .toObject(VirtualMachineTemplateInner.class);
        Assertions.assertEquals("bpnaixexccbdre", model.location());
        Assertions.assertEquals("cexdrrvqa", model.tags().get("qkghtpwijnhy"));
        Assertions.assertEquals("rhneuyowq", model.properties().inventoryItemId());
        Assertions.assertEquals("wyt", model.properties().uuid());
        Assertions.assertEquals("ib", model.properties().vmmServerId());
        Assertions.assertEquals("itvgbmhrixkwm", model.extendedLocation().type());
        Assertions.assertEquals("jejveg", model.extendedLocation().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineTemplateInner model = new VirtualMachineTemplateInner().withLocation("bpnaixexccbdre")
            .withTags(mapOf("qkghtpwijnhy", "cexdrrvqa", "owvrvmtgjqppyos", "svfycxzbfv", "sxkm", "ronzmyhgfip"))
            .withProperties(new VirtualMachineTemplateProperties().withInventoryItemId("rhneuyowq")
                .withUuid("wyt")
                .withVmmServerId("ib"))
            .withExtendedLocation(new ExtendedLocation().withType("itvgbmhrixkwm").withName("jejveg"));
        model = BinaryData.fromObject(model).toObject(VirtualMachineTemplateInner.class);
        Assertions.assertEquals("bpnaixexccbdre", model.location());
        Assertions.assertEquals("cexdrrvqa", model.tags().get("qkghtpwijnhy"));
        Assertions.assertEquals("rhneuyowq", model.properties().inventoryItemId());
        Assertions.assertEquals("wyt", model.properties().uuid());
        Assertions.assertEquals("ib", model.properties().vmmServerId());
        Assertions.assertEquals("itvgbmhrixkwm", model.extendedLocation().type());
        Assertions.assertEquals("jejveg", model.extendedLocation().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
