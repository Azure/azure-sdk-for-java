// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.fluent.models.VirtualMachineTemplateInner;
import com.azure.resourcemanager.scvmm.models.ExtendedLocation;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineTemplateInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineTemplateInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"inventoryItemId\":\"yhxdeoejzicwi\",\"uuid\":\"jttgzf\",\"vmmServerId\":\"shcbkhajdeyeamdp\",\"osType\":\"Linux\",\"osName\":\"lpbuxwgipwhonowk\",\"computerName\":\"hwankixzbinjepu\",\"memoryMB\":885179399,\"cpuCount\":1846682482,\"limitCpuForMigration\":\"false\",\"dynamicMemoryEnabled\":\"true\",\"isCustomizable\":\"false\",\"dynamicMemoryMaxMB\":591392190,\"dynamicMemoryMinMB\":1184256001,\"isHighlyAvailable\":\"true\",\"generation\":130500015,\"networkInterfaces\":[{\"name\":\"vyxlwhzlsicohoqq\",\"displayName\":\"vlryavwhheunmmq\",\"ipv4Addresses\":[\"xzko\"],\"ipv6Addresses\":[\"uko\",\"lyaxuc\",\"nuqszfkbey\",\"ewrmjmwvvjektc\"],\"macAddress\":\"enhwlrs\",\"virtualNetworkId\":\"rzpwvlqdqgbiq\",\"networkName\":\"ihkaetcktvfc\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Static\",\"nicId\":\"uctqhjfbe\"},{\"name\":\"jcxerfuwu\",\"displayName\":\"txfvjrbirph\",\"ipv4Addresses\":[\"c\",\"vahfn\",\"jky\",\"xjvuujqgidokg\"],\"ipv6Addresses\":[\"yoxgvcltbgsnc\",\"hkjeszzhbi\",\"htxfvgxbfsmxnehm\"],\"macAddress\":\"ec\",\"virtualNetworkId\":\"odebfqkkrbmpu\",\"networkName\":\"riwflzlfb\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Static\",\"nicId\":\"spnqzahmgkb\"},{\"name\":\"yydhibnuqqk\",\"displayName\":\"kadrgvt\",\"ipv4Addresses\":[\"n\",\"uynhijg\"],\"ipv6Addresses\":[\"bfs\"],\"macAddress\":\"rbu\",\"virtualNetworkId\":\"cvpnazzmhjrunmpx\",\"networkName\":\"dbhrbnlankxm\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Static\",\"nicId\":\"btkcxywnytnrsyn\"},{\"name\":\"idybyxczf\",\"displayName\":\"haaxdbabphl\",\"ipv4Addresses\":[\"lfktsths\",\"cocmnyyaztt\",\"twwrqp\"],\"ipv6Addresses\":[\"ckzywbiexzfeyue\",\"xibxujwbhqwalm\",\"zyoxaepdkzjan\"],\"macAddress\":\"xrhdwbavxbniwdjs\",\"virtualNetworkId\":\"tsdbpgn\",\"networkName\":\"txhp\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Static\",\"nicId\":\"b\"}],\"disks\":[{\"name\":\"hxw\",\"displayName\":\"tyq\",\"diskId\":\"lbbovplw\",\"diskSizeGB\":869574502,\"maxDiskSizeGB\":487628587,\"bus\":35212160,\"lun\":1408848677,\"busType\":\"svmkfssxquk\",\"vhdType\":\"plgmgsxnk\",\"volumeType\":\"kde\",\"vhdFormatType\":\"pvlopwiyighxpkd\",\"templateDiskId\":\"baiuebbaumny\",\"storageQoSPolicy\":{\"name\":\"edeojnabc\",\"id\":\"smtxpsieb\"},\"createDiffDisk\":\"true\"}],\"provisioningState\":\"Accepted\"},\"extendedLocation\":{\"type\":\"sapskr\",\"name\":\"mhjjdhtldwkyzx\"},\"location\":\"tkncwsc\",\"tags\":{\"xvnmicykvceov\":\"lxotogtwrupq\",\"fj\":\"ilovnot\",\"kphywpnvjto\":\"cnjbkcnxdhbt\",\"plpho\":\"nermcl\"},\"id\":\"uscrpabgyepsb\",\"name\":\"tazqugxywpmueefj\",\"type\":\"wfqkquj\"}")
                .toObject(VirtualMachineTemplateInner.class);
        Assertions.assertEquals("tkncwsc", model.location());
        Assertions.assertEquals("lxotogtwrupq", model.tags().get("xvnmicykvceov"));
        Assertions.assertEquals("sapskr", model.extendedLocation().type());
        Assertions.assertEquals("mhjjdhtldwkyzx", model.extendedLocation().name());
        Assertions.assertEquals("yhxdeoejzicwi", model.inventoryItemId());
        Assertions.assertEquals("jttgzf", model.uuid());
        Assertions.assertEquals("shcbkhajdeyeamdp", model.vmmServerId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineTemplateInner model =
            new VirtualMachineTemplateInner()
                .withLocation("tkncwsc")
                .withTags(
                    mapOf(
                        "xvnmicykvceov",
                        "lxotogtwrupq",
                        "fj",
                        "ilovnot",
                        "kphywpnvjto",
                        "cnjbkcnxdhbt",
                        "plpho",
                        "nermcl"))
                .withExtendedLocation(new ExtendedLocation().withType("sapskr").withName("mhjjdhtldwkyzx"))
                .withInventoryItemId("yhxdeoejzicwi")
                .withUuid("jttgzf")
                .withVmmServerId("shcbkhajdeyeamdp");
        model = BinaryData.fromObject(model).toObject(VirtualMachineTemplateInner.class);
        Assertions.assertEquals("tkncwsc", model.location());
        Assertions.assertEquals("lxotogtwrupq", model.tags().get("xvnmicykvceov"));
        Assertions.assertEquals("sapskr", model.extendedLocation().type());
        Assertions.assertEquals("mhjjdhtldwkyzx", model.extendedLocation().name());
        Assertions.assertEquals("yhxdeoejzicwi", model.inventoryItemId());
        Assertions.assertEquals("jttgzf", model.uuid());
        Assertions.assertEquals("shcbkhajdeyeamdp", model.vmmServerId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
