// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.models.AllocationMethod;
import com.azure.resourcemanager.scvmm.models.AvailabilitySetListItem;
import com.azure.resourcemanager.scvmm.models.DynamicMemoryEnabled;
import com.azure.resourcemanager.scvmm.models.HardwareProfileUpdate;
import com.azure.resourcemanager.scvmm.models.InfrastructureProfileUpdate;
import com.azure.resourcemanager.scvmm.models.LimitCpuForMigration;
import com.azure.resourcemanager.scvmm.models.NetworkInterfaceUpdate;
import com.azure.resourcemanager.scvmm.models.NetworkProfileUpdate;
import com.azure.resourcemanager.scvmm.models.StorageProfileUpdate;
import com.azure.resourcemanager.scvmm.models.StorageQosPolicyDetails;
import com.azure.resourcemanager.scvmm.models.VirtualDiskUpdate;
import com.azure.resourcemanager.scvmm.models.VirtualMachineInstanceUpdate;
import com.azure.resourcemanager.scvmm.models.VirtualMachineInstanceUpdateProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineInstanceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineInstanceUpdate model = BinaryData.fromString(
            "{\"properties\":{\"availabilitySets\":[{\"id\":\"rlovmclwhijcoej\",\"name\":\"bzaqsqsycbkbfk\"},{\"id\":\"kdkexxp\",\"name\":\"fmxa\"},{\"id\":\"fjpgddtocjjxhvp\",\"name\":\"uexhdzx\"},{\"id\":\"qeojnxqbzvddntw\",\"name\":\"eic\"}],\"hardwareProfile\":{\"memoryMB\":1604770276,\"cpuCount\":537336258,\"limitCpuForMigration\":\"true\",\"dynamicMemoryEnabled\":\"false\",\"dynamicMemoryMaxMB\":2037494020,\"dynamicMemoryMinMB\":2040818894},\"networkProfile\":{\"networkInterfaces\":[{\"name\":\"yd\",\"macAddress\":\"lmjthjq\",\"virtualNetworkId\":\"pyeicxm\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Dynamic\",\"nicId\":\"hix\"},{\"name\":\"gdtopbobjogh\",\"macAddress\":\"w\",\"virtualNetworkId\":\"m\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Static\",\"nicId\":\"vtpgvdfgiotkf\"}]},\"storageProfile\":{\"disks\":[{\"name\":\"ln\",\"diskId\":\"lefgugnxk\",\"diskSizeGB\":1788312026,\"bus\":435751453,\"lun\":423857841,\"busType\":\"thz\",\"vhdType\":\"qdrabhjybigehoqf\",\"storageQoSPolicy\":{\"name\":\"skanyk\",\"id\":\"lcuiywgqywgndr\"}},{\"name\":\"nhzgpphrcgyn\",\"diskId\":\"cpecfvmmcoofs\",\"diskSizeGB\":1165207027,\"bus\":164546469,\"lun\":903903169,\"busType\":\"qjqabcypmivkwl\",\"vhdType\":\"vccfw\",\"storageQoSPolicy\":{\"name\":\"bacfionlebxetq\",\"id\":\"zxdpnqbqqw\"}}]},\"infrastructureProfile\":{\"checkpointType\":\"feallnwsu\"}}}")
            .toObject(VirtualMachineInstanceUpdate.class);
        Assertions.assertEquals("rlovmclwhijcoej", model.properties().availabilitySets().get(0).id());
        Assertions.assertEquals("bzaqsqsycbkbfk", model.properties().availabilitySets().get(0).name());
        Assertions.assertEquals(1604770276, model.properties().hardwareProfile().memoryMB());
        Assertions.assertEquals(537336258, model.properties().hardwareProfile().cpuCount());
        Assertions.assertEquals(LimitCpuForMigration.TRUE, model.properties().hardwareProfile().limitCpuForMigration());
        Assertions.assertEquals(DynamicMemoryEnabled.FALSE,
            model.properties().hardwareProfile().dynamicMemoryEnabled());
        Assertions.assertEquals(2037494020, model.properties().hardwareProfile().dynamicMemoryMaxMB());
        Assertions.assertEquals(2040818894, model.properties().hardwareProfile().dynamicMemoryMinMB());
        Assertions.assertEquals("yd", model.properties().networkProfile().networkInterfaces().get(0).name());
        Assertions.assertEquals("lmjthjq", model.properties().networkProfile().networkInterfaces().get(0).macAddress());
        Assertions.assertEquals("pyeicxm",
            model.properties().networkProfile().networkInterfaces().get(0).virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.DYNAMIC,
            model.properties().networkProfile().networkInterfaces().get(0).ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.DYNAMIC,
            model.properties().networkProfile().networkInterfaces().get(0).ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.DYNAMIC,
            model.properties().networkProfile().networkInterfaces().get(0).macAddressType());
        Assertions.assertEquals("hix", model.properties().networkProfile().networkInterfaces().get(0).nicId());
        Assertions.assertEquals("ln", model.properties().storageProfile().disks().get(0).name());
        Assertions.assertEquals("lefgugnxk", model.properties().storageProfile().disks().get(0).diskId());
        Assertions.assertEquals(1788312026, model.properties().storageProfile().disks().get(0).diskSizeGB());
        Assertions.assertEquals(435751453, model.properties().storageProfile().disks().get(0).bus());
        Assertions.assertEquals(423857841, model.properties().storageProfile().disks().get(0).lun());
        Assertions.assertEquals("thz", model.properties().storageProfile().disks().get(0).busType());
        Assertions.assertEquals("qdrabhjybigehoqf", model.properties().storageProfile().disks().get(0).vhdType());
        Assertions.assertEquals("skanyk", model.properties().storageProfile().disks().get(0).storageQosPolicy().name());
        Assertions.assertEquals("lcuiywgqywgndr",
            model.properties().storageProfile().disks().get(0).storageQosPolicy().id());
        Assertions.assertEquals("feallnwsu", model.properties().infrastructureProfile().checkpointType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineInstanceUpdate model
            = new VirtualMachineInstanceUpdate().withProperties(new VirtualMachineInstanceUpdateProperties()
                .withAvailabilitySets(
                    Arrays.asList(new AvailabilitySetListItem().withId("rlovmclwhijcoej").withName("bzaqsqsycbkbfk"),
                        new AvailabilitySetListItem().withId("kdkexxp").withName("fmxa"),
                        new AvailabilitySetListItem().withId("fjpgddtocjjxhvp").withName("uexhdzx"),
                        new AvailabilitySetListItem().withId("qeojnxqbzvddntw").withName("eic")))
                .withHardwareProfile(new HardwareProfileUpdate().withMemoryMB(1604770276)
                    .withCpuCount(537336258)
                    .withLimitCpuForMigration(LimitCpuForMigration.TRUE)
                    .withDynamicMemoryEnabled(DynamicMemoryEnabled.FALSE)
                    .withDynamicMemoryMaxMB(2037494020)
                    .withDynamicMemoryMinMB(2040818894))
                .withNetworkProfile(new NetworkProfileUpdate().withNetworkInterfaces(Arrays.asList(
                    new NetworkInterfaceUpdate().withName("yd")
                        .withMacAddress("lmjthjq")
                        .withVirtualNetworkId("pyeicxm")
                        .withIpv4AddressType(AllocationMethod.DYNAMIC)
                        .withIpv6AddressType(AllocationMethod.DYNAMIC)
                        .withMacAddressType(AllocationMethod.DYNAMIC)
                        .withNicId("hix"),
                    new NetworkInterfaceUpdate().withName("gdtopbobjogh")
                        .withMacAddress("w")
                        .withVirtualNetworkId("m")
                        .withIpv4AddressType(AllocationMethod.STATIC)
                        .withIpv6AddressType(AllocationMethod.DYNAMIC)
                        .withMacAddressType(AllocationMethod.STATIC)
                        .withNicId("vtpgvdfgiotkf"))))
                .withStorageProfile(
                    new StorageProfileUpdate()
                        .withDisks(
                            Arrays.asList(
                                new VirtualDiskUpdate().withName("ln")
                                    .withDiskId("lefgugnxk")
                                    .withDiskSizeGB(1788312026)
                                    .withBus(435751453)
                                    .withLun(423857841)
                                    .withBusType("thz")
                                    .withVhdType("qdrabhjybigehoqf")
                                    .withStorageQosPolicy(
                                        new StorageQosPolicyDetails().withName("skanyk").withId("lcuiywgqywgndr")),
                                new VirtualDiskUpdate().withName("nhzgpphrcgyn")
                                    .withDiskId("cpecfvmmcoofs")
                                    .withDiskSizeGB(1165207027)
                                    .withBus(164546469)
                                    .withLun(903903169)
                                    .withBusType("qjqabcypmivkwl")
                                    .withVhdType("vccfw")
                                    .withStorageQosPolicy(new StorageQosPolicyDetails().withName("bacfionlebxetq")
                                        .withId("zxdpnqbqqw")))))
                .withInfrastructureProfile(new InfrastructureProfileUpdate().withCheckpointType("feallnwsu")));
        model = BinaryData.fromObject(model).toObject(VirtualMachineInstanceUpdate.class);
        Assertions.assertEquals("rlovmclwhijcoej", model.properties().availabilitySets().get(0).id());
        Assertions.assertEquals("bzaqsqsycbkbfk", model.properties().availabilitySets().get(0).name());
        Assertions.assertEquals(1604770276, model.properties().hardwareProfile().memoryMB());
        Assertions.assertEquals(537336258, model.properties().hardwareProfile().cpuCount());
        Assertions.assertEquals(LimitCpuForMigration.TRUE, model.properties().hardwareProfile().limitCpuForMigration());
        Assertions.assertEquals(DynamicMemoryEnabled.FALSE,
            model.properties().hardwareProfile().dynamicMemoryEnabled());
        Assertions.assertEquals(2037494020, model.properties().hardwareProfile().dynamicMemoryMaxMB());
        Assertions.assertEquals(2040818894, model.properties().hardwareProfile().dynamicMemoryMinMB());
        Assertions.assertEquals("yd", model.properties().networkProfile().networkInterfaces().get(0).name());
        Assertions.assertEquals("lmjthjq", model.properties().networkProfile().networkInterfaces().get(0).macAddress());
        Assertions.assertEquals("pyeicxm",
            model.properties().networkProfile().networkInterfaces().get(0).virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.DYNAMIC,
            model.properties().networkProfile().networkInterfaces().get(0).ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.DYNAMIC,
            model.properties().networkProfile().networkInterfaces().get(0).ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.DYNAMIC,
            model.properties().networkProfile().networkInterfaces().get(0).macAddressType());
        Assertions.assertEquals("hix", model.properties().networkProfile().networkInterfaces().get(0).nicId());
        Assertions.assertEquals("ln", model.properties().storageProfile().disks().get(0).name());
        Assertions.assertEquals("lefgugnxk", model.properties().storageProfile().disks().get(0).diskId());
        Assertions.assertEquals(1788312026, model.properties().storageProfile().disks().get(0).diskSizeGB());
        Assertions.assertEquals(435751453, model.properties().storageProfile().disks().get(0).bus());
        Assertions.assertEquals(423857841, model.properties().storageProfile().disks().get(0).lun());
        Assertions.assertEquals("thz", model.properties().storageProfile().disks().get(0).busType());
        Assertions.assertEquals("qdrabhjybigehoqf", model.properties().storageProfile().disks().get(0).vhdType());
        Assertions.assertEquals("skanyk", model.properties().storageProfile().disks().get(0).storageQosPolicy().name());
        Assertions.assertEquals("lcuiywgqywgndr",
            model.properties().storageProfile().disks().get(0).storageQosPolicy().id());
        Assertions.assertEquals("feallnwsu", model.properties().infrastructureProfile().checkpointType());
    }
}
