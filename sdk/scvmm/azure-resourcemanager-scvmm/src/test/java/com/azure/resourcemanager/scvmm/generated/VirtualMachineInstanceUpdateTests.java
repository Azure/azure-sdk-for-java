// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.models.AllocationMethod;
import com.azure.resourcemanager.scvmm.models.AvailabilitySetListItem;
import com.azure.resourcemanager.scvmm.models.DynamicMemoryEnabled;
import com.azure.resourcemanager.scvmm.models.HardwareProfileUpdate;
import com.azure.resourcemanager.scvmm.models.InfrastructureProfileUpdate;
import com.azure.resourcemanager.scvmm.models.LimitCpuForMigration;
import com.azure.resourcemanager.scvmm.models.NetworkInterfaceUpdate;
import com.azure.resourcemanager.scvmm.models.NetworkProfileUpdate;
import com.azure.resourcemanager.scvmm.models.StorageProfileUpdate;
import com.azure.resourcemanager.scvmm.models.StorageQoSPolicyDetails;
import com.azure.resourcemanager.scvmm.models.VirtualDiskUpdate;
import com.azure.resourcemanager.scvmm.models.VirtualMachineInstanceUpdate;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineInstanceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineInstanceUpdate model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"hardwareProfile\":{\"memoryMB\":1792279483,\"cpuCount\":580732645,\"limitCpuForMigration\":\"false\",\"dynamicMemoryEnabled\":\"false\",\"dynamicMemoryMaxMB\":105326418,\"dynamicMemoryMinMB\":324184633},\"storageProfile\":{\"disks\":[{\"name\":\"hka\",\"diskId\":\"witqscywuggwoluh\",\"diskSizeGB\":219242582,\"bus\":748127164,\"lun\":1174203733,\"busType\":\"i\",\"vhdType\":\"brgz\",\"storageQoSPolicy\":{\"name\":\"swe\",\"id\":\"qwdxggicc\"}}]},\"networkProfile\":{\"networkInterfaces\":[{\"name\":\"uexmkttlst\",\"macAddress\":\"zywemhzrncsdtclu\",\"virtualNetworkId\":\"ypbsfgytguslfead\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Static\",\"nicId\":\"ejhzisxg\"},{\"name\":\"elolppvksrpqvuj\",\"macAddress\":\"aehtwd\",\"virtualNetworkId\":\"ftswibyrcdlbhsh\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Dynamic\",\"nicId\":\"wity\"}]},\"availabilitySets\":[{\"id\":\"xccedcpnmdyodn\",\"name\":\"xltjcvnhltiu\"},{\"id\":\"xnavvwxq\",\"name\":\"y\"},{\"id\":\"nyowxwlmdjrkvfg\",\"name\":\"fvpdbo\"}],\"infrastructureProfile\":{\"checkpointType\":\"izsjqlhkrr\"}}}")
                .toObject(VirtualMachineInstanceUpdate.class);
        Assertions.assertEquals(1792279483, model.hardwareProfile().memoryMB());
        Assertions.assertEquals(580732645, model.hardwareProfile().cpuCount());
        Assertions.assertEquals(LimitCpuForMigration.FALSE, model.hardwareProfile().limitCpuForMigration());
        Assertions.assertEquals(DynamicMemoryEnabled.FALSE, model.hardwareProfile().dynamicMemoryEnabled());
        Assertions.assertEquals(105326418, model.hardwareProfile().dynamicMemoryMaxMB());
        Assertions.assertEquals(324184633, model.hardwareProfile().dynamicMemoryMinMB());
        Assertions.assertEquals("hka", model.storageProfile().disks().get(0).name());
        Assertions.assertEquals("witqscywuggwoluh", model.storageProfile().disks().get(0).diskId());
        Assertions.assertEquals(219242582, model.storageProfile().disks().get(0).diskSizeGB());
        Assertions.assertEquals(748127164, model.storageProfile().disks().get(0).bus());
        Assertions.assertEquals(1174203733, model.storageProfile().disks().get(0).lun());
        Assertions.assertEquals("i", model.storageProfile().disks().get(0).busType());
        Assertions.assertEquals("brgz", model.storageProfile().disks().get(0).vhdType());
        Assertions.assertEquals("swe", model.storageProfile().disks().get(0).storageQoSPolicy().name());
        Assertions.assertEquals("qwdxggicc", model.storageProfile().disks().get(0).storageQoSPolicy().id());
        Assertions.assertEquals("uexmkttlst", model.networkProfile().networkInterfaces().get(0).name());
        Assertions.assertEquals("zywemhzrncsdtclu", model.networkProfile().networkInterfaces().get(0).macAddress());
        Assertions
            .assertEquals("ypbsfgytguslfead", model.networkProfile().networkInterfaces().get(0).virtualNetworkId());
        Assertions
            .assertEquals(
                AllocationMethod.DYNAMIC, model.networkProfile().networkInterfaces().get(0).ipv4AddressType());
        Assertions
            .assertEquals(AllocationMethod.STATIC, model.networkProfile().networkInterfaces().get(0).ipv6AddressType());
        Assertions
            .assertEquals(AllocationMethod.STATIC, model.networkProfile().networkInterfaces().get(0).macAddressType());
        Assertions.assertEquals("ejhzisxg", model.networkProfile().networkInterfaces().get(0).nicId());
        Assertions.assertEquals("xccedcpnmdyodn", model.availabilitySets().get(0).id());
        Assertions.assertEquals("xltjcvnhltiu", model.availabilitySets().get(0).name());
        Assertions.assertEquals("izsjqlhkrr", model.infrastructureProfile().checkpointType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineInstanceUpdate model =
            new VirtualMachineInstanceUpdate()
                .withHardwareProfile(
                    new HardwareProfileUpdate()
                        .withMemoryMB(1792279483)
                        .withCpuCount(580732645)
                        .withLimitCpuForMigration(LimitCpuForMigration.FALSE)
                        .withDynamicMemoryEnabled(DynamicMemoryEnabled.FALSE)
                        .withDynamicMemoryMaxMB(105326418)
                        .withDynamicMemoryMinMB(324184633))
                .withStorageProfile(
                    new StorageProfileUpdate()
                        .withDisks(
                            Arrays
                                .asList(
                                    new VirtualDiskUpdate()
                                        .withName("hka")
                                        .withDiskId("witqscywuggwoluh")
                                        .withDiskSizeGB(219242582)
                                        .withBus(748127164)
                                        .withLun(1174203733)
                                        .withBusType("i")
                                        .withVhdType("brgz")
                                        .withStorageQoSPolicy(
                                            new StorageQoSPolicyDetails().withName("swe").withId("qwdxggicc")))))
                .withNetworkProfile(
                    new NetworkProfileUpdate()
                        .withNetworkInterfaces(
                            Arrays
                                .asList(
                                    new NetworkInterfaceUpdate()
                                        .withName("uexmkttlst")
                                        .withMacAddress("zywemhzrncsdtclu")
                                        .withVirtualNetworkId("ypbsfgytguslfead")
                                        .withIpv4AddressType(AllocationMethod.DYNAMIC)
                                        .withIpv6AddressType(AllocationMethod.STATIC)
                                        .withMacAddressType(AllocationMethod.STATIC)
                                        .withNicId("ejhzisxg"),
                                    new NetworkInterfaceUpdate()
                                        .withName("elolppvksrpqvuj")
                                        .withMacAddress("aehtwd")
                                        .withVirtualNetworkId("ftswibyrcdlbhsh")
                                        .withIpv4AddressType(AllocationMethod.DYNAMIC)
                                        .withIpv6AddressType(AllocationMethod.STATIC)
                                        .withMacAddressType(AllocationMethod.DYNAMIC)
                                        .withNicId("wity"))))
                .withAvailabilitySets(
                    Arrays
                        .asList(
                            new AvailabilitySetListItem().withId("xccedcpnmdyodn").withName("xltjcvnhltiu"),
                            new AvailabilitySetListItem().withId("xnavvwxq").withName("y"),
                            new AvailabilitySetListItem().withId("nyowxwlmdjrkvfg").withName("fvpdbo")))
                .withInfrastructureProfile(new InfrastructureProfileUpdate().withCheckpointType("izsjqlhkrr"));
        model = BinaryData.fromObject(model).toObject(VirtualMachineInstanceUpdate.class);
        Assertions.assertEquals(1792279483, model.hardwareProfile().memoryMB());
        Assertions.assertEquals(580732645, model.hardwareProfile().cpuCount());
        Assertions.assertEquals(LimitCpuForMigration.FALSE, model.hardwareProfile().limitCpuForMigration());
        Assertions.assertEquals(DynamicMemoryEnabled.FALSE, model.hardwareProfile().dynamicMemoryEnabled());
        Assertions.assertEquals(105326418, model.hardwareProfile().dynamicMemoryMaxMB());
        Assertions.assertEquals(324184633, model.hardwareProfile().dynamicMemoryMinMB());
        Assertions.assertEquals("hka", model.storageProfile().disks().get(0).name());
        Assertions.assertEquals("witqscywuggwoluh", model.storageProfile().disks().get(0).diskId());
        Assertions.assertEquals(219242582, model.storageProfile().disks().get(0).diskSizeGB());
        Assertions.assertEquals(748127164, model.storageProfile().disks().get(0).bus());
        Assertions.assertEquals(1174203733, model.storageProfile().disks().get(0).lun());
        Assertions.assertEquals("i", model.storageProfile().disks().get(0).busType());
        Assertions.assertEquals("brgz", model.storageProfile().disks().get(0).vhdType());
        Assertions.assertEquals("swe", model.storageProfile().disks().get(0).storageQoSPolicy().name());
        Assertions.assertEquals("qwdxggicc", model.storageProfile().disks().get(0).storageQoSPolicy().id());
        Assertions.assertEquals("uexmkttlst", model.networkProfile().networkInterfaces().get(0).name());
        Assertions.assertEquals("zywemhzrncsdtclu", model.networkProfile().networkInterfaces().get(0).macAddress());
        Assertions
            .assertEquals("ypbsfgytguslfead", model.networkProfile().networkInterfaces().get(0).virtualNetworkId());
        Assertions
            .assertEquals(
                AllocationMethod.DYNAMIC, model.networkProfile().networkInterfaces().get(0).ipv4AddressType());
        Assertions
            .assertEquals(AllocationMethod.STATIC, model.networkProfile().networkInterfaces().get(0).ipv6AddressType());
        Assertions
            .assertEquals(AllocationMethod.STATIC, model.networkProfile().networkInterfaces().get(0).macAddressType());
        Assertions.assertEquals("ejhzisxg", model.networkProfile().networkInterfaces().get(0).nicId());
        Assertions.assertEquals("xccedcpnmdyodn", model.availabilitySets().get(0).id());
        Assertions.assertEquals("xltjcvnhltiu", model.availabilitySets().get(0).name());
        Assertions.assertEquals("izsjqlhkrr", model.infrastructureProfile().checkpointType());
    }
}
