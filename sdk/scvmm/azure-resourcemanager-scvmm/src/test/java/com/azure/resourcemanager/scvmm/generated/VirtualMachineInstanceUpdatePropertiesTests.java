// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.fluent.models.VirtualMachineInstanceUpdateProperties;
import com.azure.resourcemanager.scvmm.models.AllocationMethod;
import com.azure.resourcemanager.scvmm.models.AvailabilitySetListItem;
import com.azure.resourcemanager.scvmm.models.DynamicMemoryEnabled;
import com.azure.resourcemanager.scvmm.models.HardwareProfileUpdate;
import com.azure.resourcemanager.scvmm.models.InfrastructureProfileUpdate;
import com.azure.resourcemanager.scvmm.models.LimitCpuForMigration;
import com.azure.resourcemanager.scvmm.models.NetworkInterfaceUpdate;
import com.azure.resourcemanager.scvmm.models.NetworkProfileUpdate;
import com.azure.resourcemanager.scvmm.models.StorageProfileUpdate;
import com.azure.resourcemanager.scvmm.models.StorageQoSPolicyDetails;
import com.azure.resourcemanager.scvmm.models.VirtualDiskUpdate;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineInstanceUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineInstanceUpdateProperties model =
            BinaryData
                .fromString(
                    "{\"hardwareProfile\":{\"memoryMB\":991301746,\"cpuCount\":180588113,\"limitCpuForMigration\":\"true\",\"dynamicMemoryEnabled\":\"false\",\"dynamicMemoryMaxMB\":1566726508,\"dynamicMemoryMinMB\":1234217414},\"storageProfile\":{\"disks\":[{\"name\":\"wm\",\"diskId\":\"efajpj\",\"diskSizeGB\":1789165646,\"bus\":1363843436,\"lun\":843042983,\"busType\":\"gbijtjivfx\",\"vhdType\":\"jabibsystawf\",\"storageQoSPolicy\":{\"name\":\"pvkvpbjxbk\",\"id\":\"zkdvncja\"}},{\"name\":\"durgkakmokz\",\"diskId\":\"jk\",\"diskSizeGB\":1622584038,\"bus\":1604322971,\"lun\":863701752,\"busType\":\"qlgzrfzeeye\",\"vhdType\":\"zi\",\"storageQoSPolicy\":{\"name\":\"uhqlbjbsybbqwrvt\",\"id\":\"gmfpgvmp\"}},{\"name\":\"as\",\"diskId\":\"haq\",\"diskSizeGB\":461827334,\"bus\":400254725,\"lun\":236380813,\"busType\":\"wbdsr\",\"vhdType\":\"pdrhne\",\"storageQoSPolicy\":{\"name\":\"wqkdwytisibi\",\"id\":\"gpikpzimejza\"}}]},\"networkProfile\":{\"networkInterfaces\":[{\"name\":\"iavrm\",\"macAddress\":\"onok\",\"virtualNetworkId\":\"rjqc\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Static\",\"nicId\":\"azszrnwoiindfpw\"},{\"name\":\"ylwbtlhflsjcdhsz\",\"macAddress\":\"vfbgofeljagrqmqh\",\"virtualNetworkId\":\"vriiio\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Dynamic\",\"nicId\":\"vtvsexsowueluq\"}]},\"availabilitySets\":[{\"id\":\"hxvrhmzkwpjg\",\"name\":\"spughftqsxhq\"},{\"id\":\"j\",\"name\":\"kndxdigrjgu\"}],\"infrastructureProfile\":{\"checkpointType\":\"dmsyqtfihwhbo\"}}")
                .toObject(VirtualMachineInstanceUpdateProperties.class);
        Assertions.assertEquals(991301746, model.hardwareProfile().memoryMB());
        Assertions.assertEquals(180588113, model.hardwareProfile().cpuCount());
        Assertions.assertEquals(LimitCpuForMigration.TRUE, model.hardwareProfile().limitCpuForMigration());
        Assertions.assertEquals(DynamicMemoryEnabled.FALSE, model.hardwareProfile().dynamicMemoryEnabled());
        Assertions.assertEquals(1566726508, model.hardwareProfile().dynamicMemoryMaxMB());
        Assertions.assertEquals(1234217414, model.hardwareProfile().dynamicMemoryMinMB());
        Assertions.assertEquals("wm", model.storageProfile().disks().get(0).name());
        Assertions.assertEquals("efajpj", model.storageProfile().disks().get(0).diskId());
        Assertions.assertEquals(1789165646, model.storageProfile().disks().get(0).diskSizeGB());
        Assertions.assertEquals(1363843436, model.storageProfile().disks().get(0).bus());
        Assertions.assertEquals(843042983, model.storageProfile().disks().get(0).lun());
        Assertions.assertEquals("gbijtjivfx", model.storageProfile().disks().get(0).busType());
        Assertions.assertEquals("jabibsystawf", model.storageProfile().disks().get(0).vhdType());
        Assertions.assertEquals("pvkvpbjxbk", model.storageProfile().disks().get(0).storageQoSPolicy().name());
        Assertions.assertEquals("zkdvncja", model.storageProfile().disks().get(0).storageQoSPolicy().id());
        Assertions.assertEquals("iavrm", model.networkProfile().networkInterfaces().get(0).name());
        Assertions.assertEquals("onok", model.networkProfile().networkInterfaces().get(0).macAddress());
        Assertions.assertEquals("rjqc", model.networkProfile().networkInterfaces().get(0).virtualNetworkId());
        Assertions
            .assertEquals(
                AllocationMethod.DYNAMIC, model.networkProfile().networkInterfaces().get(0).ipv4AddressType());
        Assertions
            .assertEquals(
                AllocationMethod.DYNAMIC, model.networkProfile().networkInterfaces().get(0).ipv6AddressType());
        Assertions
            .assertEquals(AllocationMethod.STATIC, model.networkProfile().networkInterfaces().get(0).macAddressType());
        Assertions.assertEquals("azszrnwoiindfpw", model.networkProfile().networkInterfaces().get(0).nicId());
        Assertions.assertEquals("hxvrhmzkwpjg", model.availabilitySets().get(0).id());
        Assertions.assertEquals("spughftqsxhq", model.availabilitySets().get(0).name());
        Assertions.assertEquals("dmsyqtfihwhbo", model.infrastructureProfile().checkpointType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineInstanceUpdateProperties model =
            new VirtualMachineInstanceUpdateProperties()
                .withHardwareProfile(
                    new HardwareProfileUpdate()
                        .withMemoryMB(991301746)
                        .withCpuCount(180588113)
                        .withLimitCpuForMigration(LimitCpuForMigration.TRUE)
                        .withDynamicMemoryEnabled(DynamicMemoryEnabled.FALSE)
                        .withDynamicMemoryMaxMB(1566726508)
                        .withDynamicMemoryMinMB(1234217414))
                .withStorageProfile(
                    new StorageProfileUpdate()
                        .withDisks(
                            Arrays
                                .asList(
                                    new VirtualDiskUpdate()
                                        .withName("wm")
                                        .withDiskId("efajpj")
                                        .withDiskSizeGB(1789165646)
                                        .withBus(1363843436)
                                        .withLun(843042983)
                                        .withBusType("gbijtjivfx")
                                        .withVhdType("jabibsystawf")
                                        .withStorageQoSPolicy(
                                            new StorageQoSPolicyDetails().withName("pvkvpbjxbk").withId("zkdvncja")),
                                    new VirtualDiskUpdate()
                                        .withName("durgkakmokz")
                                        .withDiskId("jk")
                                        .withDiskSizeGB(1622584038)
                                        .withBus(1604322971)
                                        .withLun(863701752)
                                        .withBusType("qlgzrfzeeye")
                                        .withVhdType("zi")
                                        .withStorageQoSPolicy(
                                            new StorageQoSPolicyDetails()
                                                .withName("uhqlbjbsybbqwrvt")
                                                .withId("gmfpgvmp")),
                                    new VirtualDiskUpdate()
                                        .withName("as")
                                        .withDiskId("haq")
                                        .withDiskSizeGB(461827334)
                                        .withBus(400254725)
                                        .withLun(236380813)
                                        .withBusType("wbdsr")
                                        .withVhdType("pdrhne")
                                        .withStorageQoSPolicy(
                                            new StorageQoSPolicyDetails()
                                                .withName("wqkdwytisibi")
                                                .withId("gpikpzimejza")))))
                .withNetworkProfile(
                    new NetworkProfileUpdate()
                        .withNetworkInterfaces(
                            Arrays
                                .asList(
                                    new NetworkInterfaceUpdate()
                                        .withName("iavrm")
                                        .withMacAddress("onok")
                                        .withVirtualNetworkId("rjqc")
                                        .withIpv4AddressType(AllocationMethod.DYNAMIC)
                                        .withIpv6AddressType(AllocationMethod.DYNAMIC)
                                        .withMacAddressType(AllocationMethod.STATIC)
                                        .withNicId("azszrnwoiindfpw"),
                                    new NetworkInterfaceUpdate()
                                        .withName("ylwbtlhflsjcdhsz")
                                        .withMacAddress("vfbgofeljagrqmqh")
                                        .withVirtualNetworkId("vriiio")
                                        .withIpv4AddressType(AllocationMethod.DYNAMIC)
                                        .withIpv6AddressType(AllocationMethod.STATIC)
                                        .withMacAddressType(AllocationMethod.DYNAMIC)
                                        .withNicId("vtvsexsowueluq"))))
                .withAvailabilitySets(
                    Arrays
                        .asList(
                            new AvailabilitySetListItem().withId("hxvrhmzkwpjg").withName("spughftqsxhq"),
                            new AvailabilitySetListItem().withId("j").withName("kndxdigrjgu")))
                .withInfrastructureProfile(new InfrastructureProfileUpdate().withCheckpointType("dmsyqtfihwhbo"));
        model = BinaryData.fromObject(model).toObject(VirtualMachineInstanceUpdateProperties.class);
        Assertions.assertEquals(991301746, model.hardwareProfile().memoryMB());
        Assertions.assertEquals(180588113, model.hardwareProfile().cpuCount());
        Assertions.assertEquals(LimitCpuForMigration.TRUE, model.hardwareProfile().limitCpuForMigration());
        Assertions.assertEquals(DynamicMemoryEnabled.FALSE, model.hardwareProfile().dynamicMemoryEnabled());
        Assertions.assertEquals(1566726508, model.hardwareProfile().dynamicMemoryMaxMB());
        Assertions.assertEquals(1234217414, model.hardwareProfile().dynamicMemoryMinMB());
        Assertions.assertEquals("wm", model.storageProfile().disks().get(0).name());
        Assertions.assertEquals("efajpj", model.storageProfile().disks().get(0).diskId());
        Assertions.assertEquals(1789165646, model.storageProfile().disks().get(0).diskSizeGB());
        Assertions.assertEquals(1363843436, model.storageProfile().disks().get(0).bus());
        Assertions.assertEquals(843042983, model.storageProfile().disks().get(0).lun());
        Assertions.assertEquals("gbijtjivfx", model.storageProfile().disks().get(0).busType());
        Assertions.assertEquals("jabibsystawf", model.storageProfile().disks().get(0).vhdType());
        Assertions.assertEquals("pvkvpbjxbk", model.storageProfile().disks().get(0).storageQoSPolicy().name());
        Assertions.assertEquals("zkdvncja", model.storageProfile().disks().get(0).storageQoSPolicy().id());
        Assertions.assertEquals("iavrm", model.networkProfile().networkInterfaces().get(0).name());
        Assertions.assertEquals("onok", model.networkProfile().networkInterfaces().get(0).macAddress());
        Assertions.assertEquals("rjqc", model.networkProfile().networkInterfaces().get(0).virtualNetworkId());
        Assertions
            .assertEquals(
                AllocationMethod.DYNAMIC, model.networkProfile().networkInterfaces().get(0).ipv4AddressType());
        Assertions
            .assertEquals(
                AllocationMethod.DYNAMIC, model.networkProfile().networkInterfaces().get(0).ipv6AddressType());
        Assertions
            .assertEquals(AllocationMethod.STATIC, model.networkProfile().networkInterfaces().get(0).macAddressType());
        Assertions.assertEquals("azszrnwoiindfpw", model.networkProfile().networkInterfaces().get(0).nicId());
        Assertions.assertEquals("hxvrhmzkwpjg", model.availabilitySets().get(0).id());
        Assertions.assertEquals("spughftqsxhq", model.availabilitySets().get(0).name());
        Assertions.assertEquals("dmsyqtfihwhbo", model.infrastructureProfile().checkpointType());
    }
}
