// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.models.AllocationMethod;
import com.azure.resourcemanager.scvmm.models.AvailabilitySetListItem;
import com.azure.resourcemanager.scvmm.models.DynamicMemoryEnabled;
import com.azure.resourcemanager.scvmm.models.HardwareProfileUpdate;
import com.azure.resourcemanager.scvmm.models.InfrastructureProfileUpdate;
import com.azure.resourcemanager.scvmm.models.LimitCpuForMigration;
import com.azure.resourcemanager.scvmm.models.NetworkInterfaceUpdate;
import com.azure.resourcemanager.scvmm.models.NetworkProfileUpdate;
import com.azure.resourcemanager.scvmm.models.StorageProfileUpdate;
import com.azure.resourcemanager.scvmm.models.StorageQosPolicyDetails;
import com.azure.resourcemanager.scvmm.models.VirtualDiskUpdate;
import com.azure.resourcemanager.scvmm.models.VirtualMachineInstanceUpdateProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineInstanceUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineInstanceUpdateProperties model = BinaryData.fromString(
            "{\"availabilitySets\":[{\"id\":\"jampmngnzscxaqw\",\"name\":\"chcbonqvpkvlrxnj\"},{\"id\":\"seiphe\",\"name\":\"lokeyy\"},{\"id\":\"nj\",\"name\":\"lwtgrhpdj\"}],\"hardwareProfile\":{\"memoryMB\":1270874920,\"cpuCount\":1786348929,\"limitCpuForMigration\":\"false\",\"dynamicMemoryEnabled\":\"true\",\"dynamicMemoryMaxMB\":958851014,\"dynamicMemoryMinMB\":184362773},\"networkProfile\":{\"networkInterfaces\":[{\"name\":\"hb\",\"macAddress\":\"hejjz\",\"virtualNetworkId\":\"dudgwdslfhot\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Static\",\"nicId\":\"bjnpg\"},{\"name\":\"ftadehxnltyfs\",\"macAddress\":\"pusuesn\",\"virtualNetworkId\":\"dejbavo\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Static\",\"nicId\":\"tbqvudw\"}]},\"storageProfile\":{\"disks\":[{\"name\":\"vo\",\"diskId\":\"ujjugwdkcglh\",\"diskSizeGB\":1950035591,\"bus\":3147535,\"lun\":24046342,\"busType\":\"gdtjixhbkuofqwey\",\"vhdType\":\"menevfyexfwh\",\"storageQoSPolicy\":{\"name\":\"i\",\"id\":\"yvdcsitynnaa\"}},{\"name\":\"ectehf\",\"diskId\":\"scjeypv\",\"diskSizeGB\":1363658384,\"bus\":902064602,\"lun\":177141497,\"busType\":\"c\",\"vhdType\":\"efovgmk\",\"storageQoSPolicy\":{\"name\":\"eyyvxyqjpkcat\",\"id\":\"ngj\"}}]},\"infrastructureProfile\":{\"checkpointType\":\"czsqpjhvm\"}}")
            .toObject(VirtualMachineInstanceUpdateProperties.class);
        Assertions.assertEquals("jampmngnzscxaqw", model.availabilitySets().get(0).id());
        Assertions.assertEquals("chcbonqvpkvlrxnj", model.availabilitySets().get(0).name());
        Assertions.assertEquals(1270874920, model.hardwareProfile().memoryMB());
        Assertions.assertEquals(1786348929, model.hardwareProfile().cpuCount());
        Assertions.assertEquals(LimitCpuForMigration.FALSE, model.hardwareProfile().limitCpuForMigration());
        Assertions.assertEquals(DynamicMemoryEnabled.TRUE, model.hardwareProfile().dynamicMemoryEnabled());
        Assertions.assertEquals(958851014, model.hardwareProfile().dynamicMemoryMaxMB());
        Assertions.assertEquals(184362773, model.hardwareProfile().dynamicMemoryMinMB());
        Assertions.assertEquals("hb", model.networkProfile().networkInterfaces().get(0).name());
        Assertions.assertEquals("hejjz", model.networkProfile().networkInterfaces().get(0).macAddress());
        Assertions.assertEquals("dudgwdslfhot", model.networkProfile().networkInterfaces().get(0).virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.STATIC,
            model.networkProfile().networkInterfaces().get(0).ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC,
            model.networkProfile().networkInterfaces().get(0).ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC,
            model.networkProfile().networkInterfaces().get(0).macAddressType());
        Assertions.assertEquals("bjnpg", model.networkProfile().networkInterfaces().get(0).nicId());
        Assertions.assertEquals("vo", model.storageProfile().disks().get(0).name());
        Assertions.assertEquals("ujjugwdkcglh", model.storageProfile().disks().get(0).diskId());
        Assertions.assertEquals(1950035591, model.storageProfile().disks().get(0).diskSizeGB());
        Assertions.assertEquals(3147535, model.storageProfile().disks().get(0).bus());
        Assertions.assertEquals(24046342, model.storageProfile().disks().get(0).lun());
        Assertions.assertEquals("gdtjixhbkuofqwey", model.storageProfile().disks().get(0).busType());
        Assertions.assertEquals("menevfyexfwh", model.storageProfile().disks().get(0).vhdType());
        Assertions.assertEquals("i", model.storageProfile().disks().get(0).storageQosPolicy().name());
        Assertions.assertEquals("yvdcsitynnaa", model.storageProfile().disks().get(0).storageQosPolicy().id());
        Assertions.assertEquals("czsqpjhvm", model.infrastructureProfile().checkpointType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineInstanceUpdateProperties model = new VirtualMachineInstanceUpdateProperties()
            .withAvailabilitySets(
                Arrays.asList(new AvailabilitySetListItem().withId("jampmngnzscxaqw").withName("chcbonqvpkvlrxnj"),
                    new AvailabilitySetListItem().withId("seiphe").withName("lokeyy"),
                    new AvailabilitySetListItem().withId("nj").withName("lwtgrhpdj")))
            .withHardwareProfile(new HardwareProfileUpdate().withMemoryMB(1270874920)
                .withCpuCount(1786348929)
                .withLimitCpuForMigration(LimitCpuForMigration.FALSE)
                .withDynamicMemoryEnabled(DynamicMemoryEnabled.TRUE)
                .withDynamicMemoryMaxMB(958851014)
                .withDynamicMemoryMinMB(184362773))
            .withNetworkProfile(new NetworkProfileUpdate().withNetworkInterfaces(Arrays.asList(
                new NetworkInterfaceUpdate().withName("hb")
                    .withMacAddress("hejjz")
                    .withVirtualNetworkId("dudgwdslfhot")
                    .withIpv4AddressType(AllocationMethod.STATIC)
                    .withIpv6AddressType(AllocationMethod.STATIC)
                    .withMacAddressType(AllocationMethod.STATIC)
                    .withNicId("bjnpg"),
                new NetworkInterfaceUpdate().withName("ftadehxnltyfs")
                    .withMacAddress("pusuesn")
                    .withVirtualNetworkId("dejbavo")
                    .withIpv4AddressType(AllocationMethod.STATIC)
                    .withIpv6AddressType(AllocationMethod.DYNAMIC)
                    .withMacAddressType(AllocationMethod.STATIC)
                    .withNicId("tbqvudw"))))
            .withStorageProfile(new StorageProfileUpdate().withDisks(Arrays.asList(
                new VirtualDiskUpdate().withName("vo")
                    .withDiskId("ujjugwdkcglh")
                    .withDiskSizeGB(1950035591)
                    .withBus(3147535)
                    .withLun(24046342)
                    .withBusType("gdtjixhbkuofqwey")
                    .withVhdType("menevfyexfwh")
                    .withStorageQosPolicy(new StorageQosPolicyDetails().withName("i").withId("yvdcsitynnaa")),
                new VirtualDiskUpdate().withName("ectehf")
                    .withDiskId("scjeypv")
                    .withDiskSizeGB(1363658384)
                    .withBus(902064602)
                    .withLun(177141497)
                    .withBusType("c")
                    .withVhdType("efovgmk")
                    .withStorageQosPolicy(new StorageQosPolicyDetails().withName("eyyvxyqjpkcat").withId("ngj")))))
            .withInfrastructureProfile(new InfrastructureProfileUpdate().withCheckpointType("czsqpjhvm"));
        model = BinaryData.fromObject(model).toObject(VirtualMachineInstanceUpdateProperties.class);
        Assertions.assertEquals("jampmngnzscxaqw", model.availabilitySets().get(0).id());
        Assertions.assertEquals("chcbonqvpkvlrxnj", model.availabilitySets().get(0).name());
        Assertions.assertEquals(1270874920, model.hardwareProfile().memoryMB());
        Assertions.assertEquals(1786348929, model.hardwareProfile().cpuCount());
        Assertions.assertEquals(LimitCpuForMigration.FALSE, model.hardwareProfile().limitCpuForMigration());
        Assertions.assertEquals(DynamicMemoryEnabled.TRUE, model.hardwareProfile().dynamicMemoryEnabled());
        Assertions.assertEquals(958851014, model.hardwareProfile().dynamicMemoryMaxMB());
        Assertions.assertEquals(184362773, model.hardwareProfile().dynamicMemoryMinMB());
        Assertions.assertEquals("hb", model.networkProfile().networkInterfaces().get(0).name());
        Assertions.assertEquals("hejjz", model.networkProfile().networkInterfaces().get(0).macAddress());
        Assertions.assertEquals("dudgwdslfhot", model.networkProfile().networkInterfaces().get(0).virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.STATIC,
            model.networkProfile().networkInterfaces().get(0).ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC,
            model.networkProfile().networkInterfaces().get(0).ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC,
            model.networkProfile().networkInterfaces().get(0).macAddressType());
        Assertions.assertEquals("bjnpg", model.networkProfile().networkInterfaces().get(0).nicId());
        Assertions.assertEquals("vo", model.storageProfile().disks().get(0).name());
        Assertions.assertEquals("ujjugwdkcglh", model.storageProfile().disks().get(0).diskId());
        Assertions.assertEquals(1950035591, model.storageProfile().disks().get(0).diskSizeGB());
        Assertions.assertEquals(3147535, model.storageProfile().disks().get(0).bus());
        Assertions.assertEquals(24046342, model.storageProfile().disks().get(0).lun());
        Assertions.assertEquals("gdtjixhbkuofqwey", model.storageProfile().disks().get(0).busType());
        Assertions.assertEquals("menevfyexfwh", model.storageProfile().disks().get(0).vhdType());
        Assertions.assertEquals("i", model.storageProfile().disks().get(0).storageQosPolicy().name());
        Assertions.assertEquals("yvdcsitynnaa", model.storageProfile().disks().get(0).storageQosPolicy().id());
        Assertions.assertEquals("czsqpjhvm", model.infrastructureProfile().checkpointType());
    }
}
