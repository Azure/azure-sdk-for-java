// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
package io.clientcore.core.utils;

import io.clientcore.core.http.models.HttpHeaderName;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.implementation.utils.UriEscapers;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.json.JsonSerializer;
import java.lang.reflect.ParameterizedType;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Utility methods that are used by code generated by the annotation processor.
 */
public final class GeneratedCodeUtils {
    /**
     * Adds a query parameter key-value to the {@link UriBuilder}.
     * <p>
     * If the unencoded {@code value} is null nothing will be added to the {@link UriBuilder}.
     * <p>
     * If the {@code value} is a {@link List}, any null values within the list will be included in the query of the
     * URI.
     *
     * @param uriBuilder The {@link UriBuilder} to add the query parameter.
     * @param name The name of the query parameter.
     * @param escapeName Whether the name needs to be escaped.
     * @param value The value of the query parameter.
     * @param escapeValue Whether the value needs to be escaped.
     */
    public static void addQueryParameter(UriBuilder uriBuilder, String name, boolean escapeName, Object value,
        boolean escapeValue) {
        // The value is null, don't add the query parameter.
        if (value == null) {
            return;
        }

        String nameToAdd = escapeName ? UriEscapers.QUERY_ESCAPER.escape(name) : name;

        // Check if the value object was a List.
        if (value instanceof List<?>) {
            List<?> valueList = (List<?>) value;
            List<String> valuesToAdd = new ArrayList<>(valueList.size());

            // Stringify and encode each element in the List.
            for (Object v : valueList) {
                String valueToAdd
                    = escapeValue ? UriEscapers.QUERY_ESCAPER.escape(String.valueOf(v)) : String.valueOf(v);
                valuesToAdd.add(valueToAdd);
            }

            uriBuilder.addQueryParameterValues(nameToAdd, valuesToAdd);
        } else {
            // Single value object, stringify and encode it.
            String valueToAdd
                = escapeValue ? UriEscapers.QUERY_ESCAPER.escape(String.valueOf(value)) : String.valueOf(value);

            uriBuilder.addQueryParameter(nameToAdd, valueToAdd);
        }
    }

    /**
     * Handles unexpected responses from the network.
     *
     * @param responseCode The network response code.
     * @param networkResponse The network response object containing the response body.
     * @param jsonSerializer The JSON serializer used to deserialize the response body.
     * @param statusToExceptionTypeMap A map of status codes to exception types.
     */
    public static void handleUnexpectedResponse(int responseCode, Response<BinaryData> networkResponse,
        JsonSerializer jsonSerializer, Map<Integer, ParameterizedType> statusToExceptionTypeMap) {
        BinaryData networkResponseValue = networkResponse.getValue();
        StringBuilder exceptionMessage = createExceptionMessage(responseCode);

        if ("application/octet-stream".equalsIgnoreCase(
            networkResponse.getHeaders().getValue(io.clientcore.core.http.models.HttpHeaderName.CONTENT_TYPE))) {
            exceptionMessage.append("(")
                .append(networkResponse.getHeaders().getValue(HttpHeaderName.CONTENT_LENGTH))
                .append("-byte body)");
            throw CoreUtils.instantiateUnexpectedException(exceptionMessage.toString(), networkResponse, null);
        } else if (networkResponseValue == null || networkResponseValue.toBytes().length == 0) {
            exceptionMessage.append("(empty body)");
            throw CoreUtils.instantiateUnexpectedException(exceptionMessage.toString(), networkResponse, null);
        } else {
            Object errorValue;
            ParameterizedType returnType;
            // Use mapping if present
            if (statusToExceptionTypeMap != null && statusToExceptionTypeMap.containsKey(responseCode)) {
                returnType = statusToExceptionTypeMap.get(responseCode);
            } else {
                returnType = CoreUtils.createParameterizedType(Object.class);
            }
            try {
                errorValue = CoreUtils.decodeNetworkResponse(networkResponseValue, jsonSerializer, returnType);
            } catch (Exception ex) {
                errorValue = new String(networkResponseValue.toBytes(), java.nio.charset.StandardCharsets.UTF_8);
            }
            exceptionMessage.append("\"")
                .append(new String(networkResponseValue.toBytes(), java.nio.charset.StandardCharsets.UTF_8))
                .append("\"");
            networkResponse.close();
            throw CoreUtils.instantiateUnexpectedException(exceptionMessage.toString(), networkResponse, errorValue);
        }
    }

    /**
     * Creates an exception message for unexpected responses.
     *
     * @param responseCode The response code.
     * @return The exception message.
     */
    private static StringBuilder createExceptionMessage(int responseCode) {
        return new StringBuilder("Status code ").append(responseCode).append(", ");
    }

    private GeneratedCodeUtils() {
    }
}
