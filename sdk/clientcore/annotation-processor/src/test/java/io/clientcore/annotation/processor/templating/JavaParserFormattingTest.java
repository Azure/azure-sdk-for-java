// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

package io.clientcore.annotation.processor.templating;

import io.clientcore.annotation.processor.mocks.MockFiler;
import io.clientcore.annotation.processor.mocks.MockJavaFileObject;
import io.clientcore.annotation.processor.mocks.MockProcessingEnvironment;
import io.clientcore.annotation.processor.mocks.MockTemplateInput;
import io.clientcore.annotation.processor.models.TemplateInput;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;
import javax.tools.JavaFileObject;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertNotNull;

/**
 * Tests to verify that the JavaParser template processor generates properly formatted code.
 */
public class JavaParserFormattingTest {

    private JavaParserTemplateProcessor processor;
    private TemplateInput templateInput = new MockTemplateInput();
    private ProcessingEnvironment processingEnv;
    private MockJavaFileObject mockFileObject;

    @BeforeEach
    public void setUp() {
        processor = new JavaParserTemplateProcessor();
        mockFileObject = new MockJavaFileObject();
        Filer filer = new MockFiler(mockFileObject);
        processingEnv = new MockProcessingEnvironment(filer, null, null);
    }

    @Test
    public void testGeneratedCodeHasProperFormatting() {
        // Process the template to generate code
        processor.process(templateInput, processingEnv);
        
        // Get the generated code content
        String generatedCode = mockFileObject.getContent();
        assertNotNull(generatedCode, "Generated code should not be null");
        
        // Verify proper copyright header formatting
        assertTrue(generatedCode.contains("// Copyright (c) Microsoft Corporation. All rights reserved."),
            "Generated code should contain proper copyright header");
        assertTrue(generatedCode.contains("// Licensed under the MIT License."),
            "Generated code should contain proper license header");
        
        // Verify proper spacing between sections  
        assertTrue(generatedCode.contains("// Licensed under the MIT License.\n//"),
            "Should have blank line comment after license header");
        
        // Verify proper class JavaDoc formatting
        assertTrue(generatedCode.contains("/**\n * Implementation of "),
            "Generated class should have proper JavaDoc format");
        assertTrue(generatedCode.contains("This class is automatically generated by the annotation processor."),
            "Generated class should mention it's auto-generated");
        
        // Verify consistent indentation (4 spaces)
        String[] lines = generatedCode.split("\n");
        boolean hasProperIndentation = false;
        for (String line : lines) {
            if (line.startsWith("    ") && !line.startsWith("        ")) {
                hasProperIndentation = true;
                break;
            }
        }
        assertTrue(hasProperIndentation, "Generated code should use 4-space indentation");
    }

    @Test
    public void testMethodJavaDocGeneration() {
        // Process the template to generate code
        processor.process(templateInput, processingEnv);
        
        // Get the generated code content
        String generatedCode = mockFileObject.getContent();
        assertNotNull(generatedCode, "Generated code should not be null");
        
        // Verify that methods have JavaDoc comments
        assertTrue(generatedCode.contains("/**\n     * Performs a "),
            "Generated methods should have proper JavaDoc with HTTP verb");
        assertTrue(generatedCode.contains("@param "),
            "Generated method JavaDoc should include parameter documentation");
        assertTrue(generatedCode.contains("@return "),
            "Generated method JavaDoc should include return documentation");
    }

    @Test
    public void testJavaDocFormattingCompliance() {
        // Process the template to generate code
        processor.process(templateInput, processingEnv);
        
        // Get the generated code content
        String generatedCode = mockFileObject.getContent();
        assertNotNull(generatedCode, "Generated code should not be null");
        
        // Verify JavaDoc formatting follows checkstyle rules:
        // 1. Exactly one space after @param parameter name
        // 2. Exactly one space after @return
        // 3. Description on same line as @param/@return
        
        String[] lines = generatedCode.split("\n");
        for (String line : lines) {
            if (line.trim().startsWith("@param ")) {
                // Find parameter name and ensure single space after it
                String trimmed = line.trim();
                String[] parts = trimmed.split("\\s+", 3); // Split into @param, paramName, description
                assertTrue(parts.length >= 3, 
                    "JavaDoc @param should have parameter name and description: " + line);
                assertTrue(trimmed.matches("@param \\S+ .*"),
                    "JavaDoc @param should have exactly one space after parameter name: " + line);
            }
            
            if (line.trim().startsWith("@return ")) {
                // Ensure single space after @return and description on same line
                String trimmed = line.trim();
                assertTrue(trimmed.matches("@return .*"),
                    "JavaDoc @return should have exactly one space before description: " + line);
                assertTrue(trimmed.length() > "@return ".length(),
                    "JavaDoc @return should have description on same line: " + line);
            }
        }
    }

    @Test
    public void testPrettyPrinterConfiguration() {
        // Verify that the processor has a properly configured pretty printer
        assertNotNull(processor, "Processor should be initialized");
        
        // Process and verify output is formatted
        processor.process(templateInput, processingEnv);
        String generatedCode = mockFileObject.getContent();
        
        // Check that imports are properly ordered and formatted
        assertTrue(generatedCode.contains("import "), "Should contain import statements");
        
        // Check for consistent line endings and spacing
        assertNotNull(generatedCode);
        assertTrue(generatedCode.length() > 0, "Generated code should not be empty");
        
        // Verify line length doesn't exceed 120 characters (checkstyle requirement)
        String[] lines = generatedCode.split("\n");
        for (int i = 0; i < lines.length; i++) {
            String line = lines[i];
            assertTrue(line.length() <= 120, 
                "Line " + (i + 1) + " exceeds 120 character limit: " + line.length() + " chars");
        }
    }
}