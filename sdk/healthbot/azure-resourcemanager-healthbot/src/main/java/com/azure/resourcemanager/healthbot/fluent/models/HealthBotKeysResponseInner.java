// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthbot.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Health Bot Keys Response.
 */
@Fluent
public final class HealthBotKeysResponseInner implements JsonSerializable<HealthBotKeysResponseInner> {
    /*
     * Array of Azure Health Bot Secrets.
     */
    private List<HealthBotKeyInner> secrets;

    /**
     * Creates an instance of HealthBotKeysResponseInner class.
     */
    public HealthBotKeysResponseInner() {
    }

    /**
     * Get the secrets property: Array of Azure Health Bot Secrets.
     * 
     * @return the secrets value.
     */
    public List<HealthBotKeyInner> secrets() {
        return this.secrets;
    }

    /**
     * Set the secrets property: Array of Azure Health Bot Secrets.
     * 
     * @param secrets the secrets value to set.
     * @return the HealthBotKeysResponseInner object itself.
     */
    public HealthBotKeysResponseInner withSecrets(List<HealthBotKeyInner> secrets) {
        this.secrets = secrets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (secrets() != null) {
            secrets().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("secrets", this.secrets, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HealthBotKeysResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HealthBotKeysResponseInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HealthBotKeysResponseInner.
     */
    public static HealthBotKeysResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HealthBotKeysResponseInner deserializedHealthBotKeysResponseInner = new HealthBotKeysResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("secrets".equals(fieldName)) {
                    List<HealthBotKeyInner> secrets = reader.readArray(reader1 -> HealthBotKeyInner.fromJson(reader1));
                    deserializedHealthBotKeysResponseInner.secrets = secrets;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHealthBotKeysResponseInner;
        });
    }
}
