// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthbot.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.healthbot.fluent.models.HealthBotInner;
import com.azure.resourcemanager.healthbot.models.HealthBotProperties;
import com.azure.resourcemanager.healthbot.models.Sku;
import com.azure.resourcemanager.healthbot.models.SkuName;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HealthBotInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HealthBotInner model = BinaryData.fromString(
            "{\"sku\":{\"name\":\"C0\"},\"properties\":{\"provisioningState\":\"quvgjxpybczme\",\"botManagementPortalLink\":\"tzopbsphrupidgsy\"},\"location\":\"ejhphoyc\",\"tags\":{\"hdxbmtqio\":\"ao\",\"ufpo\":\"jzehtb\",\"hwlrx\":\"noi\",\"dmbpazlobcufpdz\":\"bqsoqijg\"},\"id\":\"rbt\",\"name\":\"qqjnqgl\",\"type\":\"qgn\"}")
            .toObject(HealthBotInner.class);
        Assertions.assertEquals("ejhphoyc", model.location());
        Assertions.assertEquals("ao", model.tags().get("hdxbmtqio"));
        Assertions.assertEquals(SkuName.C0, model.sku().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HealthBotInner model = new HealthBotInner().withLocation("ejhphoyc")
            .withTags(mapOf("hdxbmtqio", "ao", "ufpo", "jzehtb", "hwlrx", "noi", "dmbpazlobcufpdz", "bqsoqijg"))
            .withSku(new Sku().withName(SkuName.C0))
            .withProperties(new HealthBotProperties());
        model = BinaryData.fromObject(model).toObject(HealthBotInner.class);
        Assertions.assertEquals("ejhphoyc", model.location());
        Assertions.assertEquals("ao", model.tags().get("hdxbmtqio"));
        Assertions.assertEquals(SkuName.C0, model.sku().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
