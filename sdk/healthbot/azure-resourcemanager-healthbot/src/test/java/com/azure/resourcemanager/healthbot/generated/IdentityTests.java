// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthbot.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.healthbot.models.Identity;
import com.azure.resourcemanager.healthbot.models.ResourceIdentityType;
import com.azure.resourcemanager.healthbot.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Identity model = BinaryData.fromString(
            "{\"principalId\":\"jnqglhqgnu\",\"tenantId\":\"oo\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"glzlhjxrifkwmrv\":{\"principalId\":\"qes\",\"clientId\":\"gdf\"},\"uajpsquc\":{\"principalId\":\"siznto\",\"clientId\":\"pa\"},\"knygjofjddeq\":{\"principalId\":\"o\",\"clientId\":\"dkfo\"},\"usarhmofc\":{\"principalId\":\"deupewnwrei\",\"clientId\":\"zyf\"}}}")
            .toObject(Identity.class);
        Assertions.assertEquals(ResourceIdentityType.USER_ASSIGNED, model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Identity model = new Identity().withType(ResourceIdentityType.USER_ASSIGNED)
            .withUserAssignedIdentities(
                mapOf("glzlhjxrifkwmrv", new UserAssignedIdentity(), "uajpsquc", new UserAssignedIdentity(),
                    "knygjofjddeq", new UserAssignedIdentity(), "usarhmofc", new UserAssignedIdentity()));
        model = BinaryData.fromObject(model).toObject(Identity.class);
        Assertions.assertEquals(ResourceIdentityType.USER_ASSIGNED, model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
