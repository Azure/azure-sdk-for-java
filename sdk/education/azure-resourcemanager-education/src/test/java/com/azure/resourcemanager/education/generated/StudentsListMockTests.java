// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.education.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.education.EducationManager;
import com.azure.resourcemanager.education.models.StudentDetails;
import com.azure.resourcemanager.education.models.StudentRole;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class StudentsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"firstName\":\"t\",\"lastName\":\"pngjcrcczsqpjhvm\",\"email\":\"ajvnysounqe\",\"role\":\"Student\",\"budget\":{\"currency\":\"oaeupfhyhltrpmo\",\"value\":87.11093},\"subscriptionId\":\"matuok\",\"expirationDate\":\"2021-09-23T02:42:43Z\",\"status\":\"Deleted\",\"effectiveDate\":\"2021-07-12T12:37:48Z\",\"subscriptionAlias\":\"odsfcpkvxodpuozm\",\"subscriptionInviteLastSentDate\":\"2021-06-16T00:33:51Z\"},\"id\":\"agfuaxbezyiu\",\"name\":\"kktwhrdxw\",\"type\":\"ywqsmbsurexim\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        EducationManager manager =
            EducationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<StudentDetails> response =
            manager.students().list("hcjrefovgmk", "sle", "yvxyqjp", true, Context.NONE);

        Assertions.assertEquals("t", response.iterator().next().firstName());
        Assertions.assertEquals("pngjcrcczsqpjhvm", response.iterator().next().lastName());
        Assertions.assertEquals("ajvnysounqe", response.iterator().next().email());
        Assertions.assertEquals(StudentRole.STUDENT, response.iterator().next().role());
        Assertions.assertEquals("oaeupfhyhltrpmo", response.iterator().next().budget().currency());
        Assertions.assertEquals(87.11093F, response.iterator().next().budget().value());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-09-23T02:42:43Z"), response.iterator().next().expirationDate());
        Assertions.assertEquals("odsfcpkvxodpuozm", response.iterator().next().subscriptionAlias());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-16T00:33:51Z"),
                response.iterator().next().subscriptionInviteLastSentDate());
    }
}
