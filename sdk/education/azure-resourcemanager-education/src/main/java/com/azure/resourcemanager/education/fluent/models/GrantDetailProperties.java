// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.education.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.education.models.GrantStatus;
import com.azure.resourcemanager.education.models.GrantType;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Grant detail properties.
 */
@Immutable
public final class GrantDetailProperties implements JsonSerializable<GrantDetailProperties> {
    /*
     * Offer Cap
     */
    private Amount offerCap;

    /*
     * Grant Effective Date
     */
    private OffsetDateTime effectiveDate;

    /*
     * Grant Offer Type
     */
    private GrantType offerType;

    /*
     * Expiration Date
     */
    private OffsetDateTime expirationDate;

    /*
     * Grant status
     */
    private GrantStatus status;

    /*
     * allocated budget
     */
    private Amount allocatedBudget;

    /**
     * Creates an instance of GrantDetailProperties class.
     */
    public GrantDetailProperties() {
    }

    /**
     * Get the offerCap property: Offer Cap.
     * 
     * @return the offerCap value.
     */
    public Amount offerCap() {
        return this.offerCap;
    }

    /**
     * Get the effectiveDate property: Grant Effective Date.
     * 
     * @return the effectiveDate value.
     */
    public OffsetDateTime effectiveDate() {
        return this.effectiveDate;
    }

    /**
     * Get the offerType property: Grant Offer Type.
     * 
     * @return the offerType value.
     */
    public GrantType offerType() {
        return this.offerType;
    }

    /**
     * Get the expirationDate property: Expiration Date.
     * 
     * @return the expirationDate value.
     */
    public OffsetDateTime expirationDate() {
        return this.expirationDate;
    }

    /**
     * Get the status property: Grant status.
     * 
     * @return the status value.
     */
    public GrantStatus status() {
        return this.status;
    }

    /**
     * Get the allocatedBudget property: allocated budget.
     * 
     * @return the allocatedBudget value.
     */
    public Amount allocatedBudget() {
        return this.allocatedBudget;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (offerCap() != null) {
            offerCap().validate();
        }
        if (allocatedBudget() != null) {
            allocatedBudget().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GrantDetailProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GrantDetailProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GrantDetailProperties.
     */
    public static GrantDetailProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GrantDetailProperties deserializedGrantDetailProperties = new GrantDetailProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("offerCap".equals(fieldName)) {
                    deserializedGrantDetailProperties.offerCap = Amount.fromJson(reader);
                } else if ("effectiveDate".equals(fieldName)) {
                    deserializedGrantDetailProperties.effectiveDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("offerType".equals(fieldName)) {
                    deserializedGrantDetailProperties.offerType = GrantType.fromString(reader.getString());
                } else if ("expirationDate".equals(fieldName)) {
                    deserializedGrantDetailProperties.expirationDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedGrantDetailProperties.status = GrantStatus.fromString(reader.getString());
                } else if ("allocatedBudget".equals(fieldName)) {
                    deserializedGrantDetailProperties.allocatedBudget = Amount.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGrantDetailProperties;
        });
    }
}
