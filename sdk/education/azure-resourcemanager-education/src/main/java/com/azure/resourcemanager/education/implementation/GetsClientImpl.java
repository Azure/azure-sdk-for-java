// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.education.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.education.fluent.GetsClient;
import com.azure.resourcemanager.education.fluent.models.GrantDetailsInner;
import com.azure.resourcemanager.education.fluent.models.LabDetailsInner;
import com.azure.resourcemanager.education.fluent.models.StudentDetailsInner;
import com.azure.resourcemanager.education.fluent.models.StudentLabDetailsInner;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in GetsClient. */
public final class GetsClientImpl implements GetsClient {
    /** The proxy service used to perform REST calls. */
    private final GetsService service;

    /** The service client containing this operation class. */
    private final EducationManagementClientImpl client;

    /**
     * Initializes an instance of GetsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    GetsClientImpl(EducationManagementClientImpl client) {
        this.service = RestProxy.create(GetsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for EducationManagementClientGets to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "EducationManagementC")
    private interface GetsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"
                + "/providers/Microsoft.Education/grants/default")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GrantDetailsInner>> grant(
            @HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingProfileName") String billingProfileName,
            @QueryParam("includeAllocatedBudget") Boolean includeAllocatedBudget,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"
                + "/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<LabDetailsInner>> lab(
            @HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingProfileName") String billingProfileName,
            @PathParam("invoiceSectionName") String invoiceSectionName,
            @QueryParam("includeBudget") Boolean includeBudget,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"
                + "/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default/students"
                + "/{studentAlias}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StudentDetailsInner>> student(
            @HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingProfileName") String billingProfileName,
            @PathParam("invoiceSectionName") String invoiceSectionName,
            @PathParam("studentAlias") String studentAlias,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/providers/Microsoft.Education/studentLabs/{studentLabName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StudentLabDetailsInner>> studentLab(
            @HostParam("$host") String endpoint,
            @PathParam("studentLabName") String studentLabName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get details for a specific grant linked to the provided billing account and billing profile.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param includeAllocatedBudget May be used to include information about budget that has been allocated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details for a specific grant linked to the provided billing account and billing profile along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GrantDetailsInner>> grantWithResponseAsync(
        String billingAccountName, String billingProfileName, Boolean includeAllocatedBudget) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingProfileName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingProfileName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .grant(
                            this.client.getEndpoint(),
                            billingAccountName,
                            billingProfileName,
                            includeAllocatedBudget,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get details for a specific grant linked to the provided billing account and billing profile.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param includeAllocatedBudget May be used to include information about budget that has been allocated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details for a specific grant linked to the provided billing account and billing profile along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GrantDetailsInner>> grantWithResponseAsync(
        String billingAccountName, String billingProfileName, Boolean includeAllocatedBudget, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingProfileName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingProfileName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .grant(
                this.client.getEndpoint(),
                billingAccountName,
                billingProfileName,
                includeAllocatedBudget,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Get details for a specific grant linked to the provided billing account and billing profile.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param includeAllocatedBudget May be used to include information about budget that has been allocated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details for a specific grant linked to the provided billing account and billing profile on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GrantDetailsInner> grantAsync(
        String billingAccountName, String billingProfileName, Boolean includeAllocatedBudget) {
        return grantWithResponseAsync(billingAccountName, billingProfileName, includeAllocatedBudget)
            .flatMap(
                (Response<GrantDetailsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get details for a specific grant linked to the provided billing account and billing profile.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details for a specific grant linked to the provided billing account and billing profile on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GrantDetailsInner> grantAsync(String billingAccountName, String billingProfileName) {
        final Boolean includeAllocatedBudget = null;
        return grantWithResponseAsync(billingAccountName, billingProfileName, includeAllocatedBudget)
            .flatMap(
                (Response<GrantDetailsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get details for a specific grant linked to the provided billing account and billing profile.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details for a specific grant linked to the provided billing account and billing profile.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GrantDetailsInner grant(String billingAccountName, String billingProfileName) {
        final Boolean includeAllocatedBudget = null;
        return grantAsync(billingAccountName, billingProfileName, includeAllocatedBudget).block();
    }

    /**
     * Get details for a specific grant linked to the provided billing account and billing profile.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param includeAllocatedBudget May be used to include information about budget that has been allocated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details for a specific grant linked to the provided billing account and billing profile along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GrantDetailsInner> grantWithResponse(
        String billingAccountName, String billingProfileName, Boolean includeAllocatedBudget, Context context) {
        return grantWithResponseAsync(billingAccountName, billingProfileName, includeAllocatedBudget, context).block();
    }

    /**
     * Get the details for a specific lab associated with the provided billing account name, billing profile name, and
     * invoice section name.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param includeBudget May be used to include budget information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details for a specific lab associated with the provided billing account name, billing profile name,
     *     and invoice section name along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<LabDetailsInner>> labWithResponseAsync(
        String billingAccountName, String billingProfileName, String invoiceSectionName, Boolean includeBudget) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingProfileName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingProfileName is required and cannot be null."));
        }
        if (invoiceSectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .lab(
                            this.client.getEndpoint(),
                            billingAccountName,
                            billingProfileName,
                            invoiceSectionName,
                            includeBudget,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the details for a specific lab associated with the provided billing account name, billing profile name, and
     * invoice section name.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param includeBudget May be used to include budget information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details for a specific lab associated with the provided billing account name, billing profile name,
     *     and invoice section name along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<LabDetailsInner>> labWithResponseAsync(
        String billingAccountName,
        String billingProfileName,
        String invoiceSectionName,
        Boolean includeBudget,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingProfileName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingProfileName is required and cannot be null."));
        }
        if (invoiceSectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .lab(
                this.client.getEndpoint(),
                billingAccountName,
                billingProfileName,
                invoiceSectionName,
                includeBudget,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Get the details for a specific lab associated with the provided billing account name, billing profile name, and
     * invoice section name.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param includeBudget May be used to include budget information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details for a specific lab associated with the provided billing account name, billing profile name,
     *     and invoice section name on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LabDetailsInner> labAsync(
        String billingAccountName, String billingProfileName, String invoiceSectionName, Boolean includeBudget) {
        return labWithResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, includeBudget)
            .flatMap(
                (Response<LabDetailsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get the details for a specific lab associated with the provided billing account name, billing profile name, and
     * invoice section name.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details for a specific lab associated with the provided billing account name, billing profile name,
     *     and invoice section name on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LabDetailsInner> labAsync(
        String billingAccountName, String billingProfileName, String invoiceSectionName) {
        final Boolean includeBudget = null;
        return labWithResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, includeBudget)
            .flatMap(
                (Response<LabDetailsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get the details for a specific lab associated with the provided billing account name, billing profile name, and
     * invoice section name.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details for a specific lab associated with the provided billing account name, billing profile name,
     *     and invoice section name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LabDetailsInner lab(String billingAccountName, String billingProfileName, String invoiceSectionName) {
        final Boolean includeBudget = null;
        return labAsync(billingAccountName, billingProfileName, invoiceSectionName, includeBudget).block();
    }

    /**
     * Get the details for a specific lab associated with the provided billing account name, billing profile name, and
     * invoice section name.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param includeBudget May be used to include budget information.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details for a specific lab associated with the provided billing account name, billing profile name,
     *     and invoice section name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<LabDetailsInner> labWithResponse(
        String billingAccountName,
        String billingProfileName,
        String invoiceSectionName,
        Boolean includeBudget,
        Context context) {
        return labWithResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, includeBudget, context)
            .block();
    }

    /**
     * Get the details for a specific student in the specified lab by student alias.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param studentAlias Student alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details for a specific student in the specified lab by student alias along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StudentDetailsInner>> studentWithResponseAsync(
        String billingAccountName, String billingProfileName, String invoiceSectionName, String studentAlias) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingProfileName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingProfileName is required and cannot be null."));
        }
        if (invoiceSectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null."));
        }
        if (studentAlias == null) {
            return Mono.error(new IllegalArgumentException("Parameter studentAlias is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .student(
                            this.client.getEndpoint(),
                            billingAccountName,
                            billingProfileName,
                            invoiceSectionName,
                            studentAlias,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the details for a specific student in the specified lab by student alias.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param studentAlias Student alias.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details for a specific student in the specified lab by student alias along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StudentDetailsInner>> studentWithResponseAsync(
        String billingAccountName,
        String billingProfileName,
        String invoiceSectionName,
        String studentAlias,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingProfileName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingProfileName is required and cannot be null."));
        }
        if (invoiceSectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null."));
        }
        if (studentAlias == null) {
            return Mono.error(new IllegalArgumentException("Parameter studentAlias is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .student(
                this.client.getEndpoint(),
                billingAccountName,
                billingProfileName,
                invoiceSectionName,
                studentAlias,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Get the details for a specific student in the specified lab by student alias.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param studentAlias Student alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details for a specific student in the specified lab by student alias on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StudentDetailsInner> studentAsync(
        String billingAccountName, String billingProfileName, String invoiceSectionName, String studentAlias) {
        return studentWithResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, studentAlias)
            .flatMap(
                (Response<StudentDetailsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get the details for a specific student in the specified lab by student alias.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param studentAlias Student alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details for a specific student in the specified lab by student alias.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StudentDetailsInner student(
        String billingAccountName, String billingProfileName, String invoiceSectionName, String studentAlias) {
        return studentAsync(billingAccountName, billingProfileName, invoiceSectionName, studentAlias).block();
    }

    /**
     * Get the details for a specific student in the specified lab by student alias.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param studentAlias Student alias.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details for a specific student in the specified lab by student alias along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StudentDetailsInner> studentWithResponse(
        String billingAccountName,
        String billingProfileName,
        String invoiceSectionName,
        String studentAlias,
        Context context) {
        return studentWithResponseAsync(
                billingAccountName, billingProfileName, invoiceSectionName, studentAlias, context)
            .block();
    }

    /**
     * Get the details for a specified lab associated with the student lab.
     *
     * @param studentLabName Student lab name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details for a specified lab associated with the student lab along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StudentLabDetailsInner>> studentLabWithResponseAsync(String studentLabName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (studentLabName == null) {
            return Mono.error(new IllegalArgumentException("Parameter studentLabName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .studentLab(
                            this.client.getEndpoint(), studentLabName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the details for a specified lab associated with the student lab.
     *
     * @param studentLabName Student lab name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details for a specified lab associated with the student lab along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StudentLabDetailsInner>> studentLabWithResponseAsync(String studentLabName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (studentLabName == null) {
            return Mono.error(new IllegalArgumentException("Parameter studentLabName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .studentLab(this.client.getEndpoint(), studentLabName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get the details for a specified lab associated with the student lab.
     *
     * @param studentLabName Student lab name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details for a specified lab associated with the student lab on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StudentLabDetailsInner> studentLabAsync(String studentLabName) {
        return studentLabWithResponseAsync(studentLabName)
            .flatMap(
                (Response<StudentLabDetailsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get the details for a specified lab associated with the student lab.
     *
     * @param studentLabName Student lab name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details for a specified lab associated with the student lab.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StudentLabDetailsInner studentLab(String studentLabName) {
        return studentLabAsync(studentLabName).block();
    }

    /**
     * Get the details for a specified lab associated with the student lab.
     *
     * @param studentLabName Student lab name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details for a specified lab associated with the student lab along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StudentLabDetailsInner> studentLabWithResponse(String studentLabName, Context context) {
        return studentLabWithResponseAsync(studentLabName, context).block();
    }
}
