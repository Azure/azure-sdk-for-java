// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.education.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.education.fluent.models.LabDetailsInner;
import com.azure.resourcemanager.education.fluent.models.StudentDetailsInner;

/** Resource collection API of Creates. */
public interface Creates {
    /**
     * Create a new lab or update a previously created lab.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param parameters Request parameters that are provided to create lab resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lab details.
     */
    LabDetails lab(
        String billingAccountName, String billingProfileName, String invoiceSectionName, LabDetailsInner parameters);

    /**
     * Create a new lab or update a previously created lab.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param parameters Request parameters that are provided to create lab resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lab details along with {@link Response}.
     */
    Response<LabDetails> labWithResponse(
        String billingAccountName,
        String billingProfileName,
        String invoiceSectionName,
        LabDetailsInner parameters,
        Context context);

    /**
     * Create and add a new student to the specified lab or update the details of an existing student in a lab. Note the
     * student must have a valid tenant to accept the lab after they have been added to lab.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param studentAlias Student alias.
     * @param parameters Request parameters that are provided to update student properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return student details.
     */
    StudentDetails student(
        String billingAccountName,
        String billingProfileName,
        String invoiceSectionName,
        String studentAlias,
        StudentDetailsInner parameters);

    /**
     * Create and add a new student to the specified lab or update the details of an existing student in a lab. Note the
     * student must have a valid tenant to accept the lab after they have been added to lab.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param studentAlias Student alias.
     * @param parameters Request parameters that are provided to update student properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return student details along with {@link Response}.
     */
    Response<StudentDetails> studentWithResponse(
        String billingAccountName,
        String billingProfileName,
        String invoiceSectionName,
        String studentAlias,
        StudentDetailsInner parameters,
        Context context);
}
