// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.education.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.education.models.StudentLabStatus;
import com.azure.resourcemanager.education.models.StudentRole;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Student detail properties.
 */
@Fluent
public final class StudentProperties implements JsonSerializable<StudentProperties> {
    /*
     * First Name
     */
    private String firstName;

    /*
     * Last Name
     */
    private String lastName;

    /*
     * Student Email
     */
    private String email;

    /*
     * Student Role
     */
    private StudentRole role;

    /*
     * Student Budget
     */
    private Amount budget;

    /*
     * Subscription Id
     */
    private String subscriptionId;

    /*
     * Date this student is set to expire from the lab.
     */
    private OffsetDateTime expirationDate;

    /*
     * Student Lab Status
     */
    private StudentLabStatus status;

    /*
     * Date student was added to the lab
     */
    private OffsetDateTime effectiveDate;

    /*
     * Subscription alias
     */
    private String subscriptionAlias;

    /*
     * subscription invite last sent date
     */
    private OffsetDateTime subscriptionInviteLastSentDate;

    /**
     * Creates an instance of StudentProperties class.
     */
    public StudentProperties() {
    }

    /**
     * Get the firstName property: First Name.
     * 
     * @return the firstName value.
     */
    public String firstName() {
        return this.firstName;
    }

    /**
     * Set the firstName property: First Name.
     * 
     * @param firstName the firstName value to set.
     * @return the StudentProperties object itself.
     */
    public StudentProperties withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }

    /**
     * Get the lastName property: Last Name.
     * 
     * @return the lastName value.
     */
    public String lastName() {
        return this.lastName;
    }

    /**
     * Set the lastName property: Last Name.
     * 
     * @param lastName the lastName value to set.
     * @return the StudentProperties object itself.
     */
    public StudentProperties withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }

    /**
     * Get the email property: Student Email.
     * 
     * @return the email value.
     */
    public String email() {
        return this.email;
    }

    /**
     * Set the email property: Student Email.
     * 
     * @param email the email value to set.
     * @return the StudentProperties object itself.
     */
    public StudentProperties withEmail(String email) {
        this.email = email;
        return this;
    }

    /**
     * Get the role property: Student Role.
     * 
     * @return the role value.
     */
    public StudentRole role() {
        return this.role;
    }

    /**
     * Set the role property: Student Role.
     * 
     * @param role the role value to set.
     * @return the StudentProperties object itself.
     */
    public StudentProperties withRole(StudentRole role) {
        this.role = role;
        return this;
    }

    /**
     * Get the budget property: Student Budget.
     * 
     * @return the budget value.
     */
    public Amount budget() {
        return this.budget;
    }

    /**
     * Set the budget property: Student Budget.
     * 
     * @param budget the budget value to set.
     * @return the StudentProperties object itself.
     */
    public StudentProperties withBudget(Amount budget) {
        this.budget = budget;
        return this;
    }

    /**
     * Get the subscriptionId property: Subscription Id.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the expirationDate property: Date this student is set to expire from the lab.
     * 
     * @return the expirationDate value.
     */
    public OffsetDateTime expirationDate() {
        return this.expirationDate;
    }

    /**
     * Set the expirationDate property: Date this student is set to expire from the lab.
     * 
     * @param expirationDate the expirationDate value to set.
     * @return the StudentProperties object itself.
     */
    public StudentProperties withExpirationDate(OffsetDateTime expirationDate) {
        this.expirationDate = expirationDate;
        return this;
    }

    /**
     * Get the status property: Student Lab Status.
     * 
     * @return the status value.
     */
    public StudentLabStatus status() {
        return this.status;
    }

    /**
     * Get the effectiveDate property: Date student was added to the lab.
     * 
     * @return the effectiveDate value.
     */
    public OffsetDateTime effectiveDate() {
        return this.effectiveDate;
    }

    /**
     * Get the subscriptionAlias property: Subscription alias.
     * 
     * @return the subscriptionAlias value.
     */
    public String subscriptionAlias() {
        return this.subscriptionAlias;
    }

    /**
     * Set the subscriptionAlias property: Subscription alias.
     * 
     * @param subscriptionAlias the subscriptionAlias value to set.
     * @return the StudentProperties object itself.
     */
    public StudentProperties withSubscriptionAlias(String subscriptionAlias) {
        this.subscriptionAlias = subscriptionAlias;
        return this;
    }

    /**
     * Get the subscriptionInviteLastSentDate property: subscription invite last sent date.
     * 
     * @return the subscriptionInviteLastSentDate value.
     */
    public OffsetDateTime subscriptionInviteLastSentDate() {
        return this.subscriptionInviteLastSentDate;
    }

    /**
     * Set the subscriptionInviteLastSentDate property: subscription invite last sent date.
     * 
     * @param subscriptionInviteLastSentDate the subscriptionInviteLastSentDate value to set.
     * @return the StudentProperties object itself.
     */
    public StudentProperties withSubscriptionInviteLastSentDate(OffsetDateTime subscriptionInviteLastSentDate) {
        this.subscriptionInviteLastSentDate = subscriptionInviteLastSentDate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (firstName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property firstName in model StudentProperties"));
        }
        if (lastName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property lastName in model StudentProperties"));
        }
        if (email() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property email in model StudentProperties"));
        }
        if (role() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property role in model StudentProperties"));
        }
        if (budget() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property budget in model StudentProperties"));
        } else {
            budget().validate();
        }
        if (expirationDate() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property expirationDate in model StudentProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StudentProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("firstName", this.firstName);
        jsonWriter.writeStringField("lastName", this.lastName);
        jsonWriter.writeStringField("email", this.email);
        jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
        jsonWriter.writeJsonField("budget", this.budget);
        jsonWriter.writeStringField("expirationDate",
            this.expirationDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expirationDate));
        jsonWriter.writeStringField("subscriptionAlias", this.subscriptionAlias);
        jsonWriter.writeStringField("subscriptionInviteLastSentDate",
            this.subscriptionInviteLastSentDate == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.subscriptionInviteLastSentDate));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StudentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StudentProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StudentProperties.
     */
    public static StudentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StudentProperties deserializedStudentProperties = new StudentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("firstName".equals(fieldName)) {
                    deserializedStudentProperties.firstName = reader.getString();
                } else if ("lastName".equals(fieldName)) {
                    deserializedStudentProperties.lastName = reader.getString();
                } else if ("email".equals(fieldName)) {
                    deserializedStudentProperties.email = reader.getString();
                } else if ("role".equals(fieldName)) {
                    deserializedStudentProperties.role = StudentRole.fromString(reader.getString());
                } else if ("budget".equals(fieldName)) {
                    deserializedStudentProperties.budget = Amount.fromJson(reader);
                } else if ("expirationDate".equals(fieldName)) {
                    deserializedStudentProperties.expirationDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedStudentProperties.subscriptionId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedStudentProperties.status = StudentLabStatus.fromString(reader.getString());
                } else if ("effectiveDate".equals(fieldName)) {
                    deserializedStudentProperties.effectiveDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("subscriptionAlias".equals(fieldName)) {
                    deserializedStudentProperties.subscriptionAlias = reader.getString();
                } else if ("subscriptionInviteLastSentDate".equals(fieldName)) {
                    deserializedStudentProperties.subscriptionInviteLastSentDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStudentProperties;
        });
    }
}
