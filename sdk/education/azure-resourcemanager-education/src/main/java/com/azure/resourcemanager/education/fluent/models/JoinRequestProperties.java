// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.education.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.education.models.JoinRequestStatus;
import java.io.IOException;

/**
 * Join request properties.
 */
@Fluent
public final class JoinRequestProperties implements JsonSerializable<JoinRequestProperties> {
    /*
     * First Name
     */
    private String firstName;

    /*
     * Last Name
     */
    private String lastName;

    /*
     * join request email
     */
    private String email;

    /*
     * Join request status
     */
    private JoinRequestStatus status;

    /**
     * Creates an instance of JoinRequestProperties class.
     */
    public JoinRequestProperties() {
    }

    /**
     * Get the firstName property: First Name.
     * 
     * @return the firstName value.
     */
    public String firstName() {
        return this.firstName;
    }

    /**
     * Set the firstName property: First Name.
     * 
     * @param firstName the firstName value to set.
     * @return the JoinRequestProperties object itself.
     */
    public JoinRequestProperties withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }

    /**
     * Get the lastName property: Last Name.
     * 
     * @return the lastName value.
     */
    public String lastName() {
        return this.lastName;
    }

    /**
     * Set the lastName property: Last Name.
     * 
     * @param lastName the lastName value to set.
     * @return the JoinRequestProperties object itself.
     */
    public JoinRequestProperties withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }

    /**
     * Get the email property: join request email.
     * 
     * @return the email value.
     */
    public String email() {
        return this.email;
    }

    /**
     * Set the email property: join request email.
     * 
     * @param email the email value to set.
     * @return the JoinRequestProperties object itself.
     */
    public JoinRequestProperties withEmail(String email) {
        this.email = email;
        return this;
    }

    /**
     * Get the status property: Join request status.
     * 
     * @return the status value.
     */
    public JoinRequestStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Join request status.
     * 
     * @param status the status value to set.
     * @return the JoinRequestProperties object itself.
     */
    public JoinRequestProperties withStatus(JoinRequestStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("firstName", this.firstName);
        jsonWriter.writeStringField("lastName", this.lastName);
        jsonWriter.writeStringField("email", this.email);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JoinRequestProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JoinRequestProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the JoinRequestProperties.
     */
    public static JoinRequestProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JoinRequestProperties deserializedJoinRequestProperties = new JoinRequestProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("firstName".equals(fieldName)) {
                    deserializedJoinRequestProperties.firstName = reader.getString();
                } else if ("lastName".equals(fieldName)) {
                    deserializedJoinRequestProperties.lastName = reader.getString();
                } else if ("email".equals(fieldName)) {
                    deserializedJoinRequestProperties.email = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedJoinRequestProperties.status = JoinRequestStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJoinRequestProperties;
        });
    }
}
