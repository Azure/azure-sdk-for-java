// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.education.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.education.models.StudentLabStatus;
import com.azure.resourcemanager.education.models.StudentRole;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Student lab details. */
@Immutable
public final class StudentLabDetailsInner extends ProxyResource {
    /*
     * Student lab properties.
     */
    @JsonProperty(value = "properties")
    private StudentLabProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of StudentLabDetailsInner class. */
    public StudentLabDetailsInner() {
    }

    /**
     * Get the innerProperties property: Student lab properties.
     *
     * @return the innerProperties value.
     */
    private StudentLabProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the displayName property: Student lab Display Name.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Get the description property: Detail description of this lab.
     *
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Get the expirationDate property: Date the lab will expire and by default will be the expiration date for each
     * student in this lab.
     *
     * @return the expirationDate value.
     */
    public OffsetDateTime expirationDate() {
        return this.innerProperties() == null ? null : this.innerProperties().expirationDate();
    }

    /**
     * Get the role property: Student Role.
     *
     * @return the role value.
     */
    public StudentRole role() {
        return this.innerProperties() == null ? null : this.innerProperties().role();
    }

    /**
     * Get the budget property: Student Budget.
     *
     * @return the budget value.
     */
    public Amount budget() {
        return this.innerProperties() == null ? null : this.innerProperties().budget();
    }

    /**
     * Get the subscriptionId property: Subscription Id.
     *
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.innerProperties() == null ? null : this.innerProperties().subscriptionId();
    }

    /**
     * Get the status property: Student Lab Status.
     *
     * @return the status value.
     */
    public StudentLabStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the effectiveDate property: User Added Date.
     *
     * @return the effectiveDate value.
     */
    public OffsetDateTime effectiveDate() {
        return this.innerProperties() == null ? null : this.innerProperties().effectiveDate();
    }

    /**
     * Get the labScope property: Lab Scope.
     * /providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default.
     *
     * @return the labScope value.
     */
    public String labScope() {
        return this.innerProperties() == null ? null : this.innerProperties().labScope();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
