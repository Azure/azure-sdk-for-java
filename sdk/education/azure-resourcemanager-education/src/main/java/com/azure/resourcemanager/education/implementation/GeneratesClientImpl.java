// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.education.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.education.fluent.GeneratesClient;
import com.azure.resourcemanager.education.fluent.models.LabDetailsInner;
import com.azure.resourcemanager.education.models.InviteCodeGenerateRequest;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in GeneratesClient. */
public final class GeneratesClientImpl implements GeneratesClient {
    /** The proxy service used to perform REST calls. */
    private final GeneratesService service;

    /** The service client containing this operation class. */
    private final EducationManagementClientImpl client;

    /**
     * Initializes an instance of GeneratesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    GeneratesClientImpl(EducationManagementClientImpl client) {
        this.service =
            RestProxy.create(GeneratesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for EducationManagementClientGenerates to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "EducationManagementC")
    private interface GeneratesService {
        @Headers({"Content-Type: application/json"})
        @Post(
            "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}"
                + "/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default/generateInviteCode")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<LabDetailsInner>> inviteCode(
            @HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @PathParam("billingProfileName") String billingProfileName,
            @PathParam("invoiceSectionName") String invoiceSectionName,
            @QueryParam("onlyUpdateStudentCountParameter") Boolean onlyUpdateStudentCountParameter,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") InviteCodeGenerateRequest parameters,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Generate invite code for a lab.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param parameters Request parameters that are provided to generate invite code.
     * @param onlyUpdateStudentCountParameter set this flag to true if you want to update student count without
     *     generating a new invite code.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lab details along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<LabDetailsInner>> inviteCodeWithResponseAsync(
        String billingAccountName,
        String billingProfileName,
        String invoiceSectionName,
        InviteCodeGenerateRequest parameters,
        Boolean onlyUpdateStudentCountParameter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingProfileName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingProfileName is required and cannot be null."));
        }
        if (invoiceSectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .inviteCode(
                            this.client.getEndpoint(),
                            billingAccountName,
                            billingProfileName,
                            invoiceSectionName,
                            onlyUpdateStudentCountParameter,
                            this.client.getApiVersion(),
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Generate invite code for a lab.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param parameters Request parameters that are provided to generate invite code.
     * @param onlyUpdateStudentCountParameter set this flag to true if you want to update student count without
     *     generating a new invite code.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lab details along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<LabDetailsInner>> inviteCodeWithResponseAsync(
        String billingAccountName,
        String billingProfileName,
        String invoiceSectionName,
        InviteCodeGenerateRequest parameters,
        Boolean onlyUpdateStudentCountParameter,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (billingProfileName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingProfileName is required and cannot be null."));
        }
        if (invoiceSectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .inviteCode(
                this.client.getEndpoint(),
                billingAccountName,
                billingProfileName,
                invoiceSectionName,
                onlyUpdateStudentCountParameter,
                this.client.getApiVersion(),
                parameters,
                accept,
                context);
    }

    /**
     * Generate invite code for a lab.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param parameters Request parameters that are provided to generate invite code.
     * @param onlyUpdateStudentCountParameter set this flag to true if you want to update student count without
     *     generating a new invite code.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lab details on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LabDetailsInner> inviteCodeAsync(
        String billingAccountName,
        String billingProfileName,
        String invoiceSectionName,
        InviteCodeGenerateRequest parameters,
        Boolean onlyUpdateStudentCountParameter) {
        return inviteCodeWithResponseAsync(
                billingAccountName, billingProfileName, invoiceSectionName, parameters, onlyUpdateStudentCountParameter)
            .flatMap(
                (Response<LabDetailsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Generate invite code for a lab.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param parameters Request parameters that are provided to generate invite code.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lab details on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LabDetailsInner> inviteCodeAsync(
        String billingAccountName,
        String billingProfileName,
        String invoiceSectionName,
        InviteCodeGenerateRequest parameters) {
        final Boolean onlyUpdateStudentCountParameter = null;
        return inviteCodeWithResponseAsync(
                billingAccountName, billingProfileName, invoiceSectionName, parameters, onlyUpdateStudentCountParameter)
            .flatMap(
                (Response<LabDetailsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Generate invite code for a lab.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param parameters Request parameters that are provided to generate invite code.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lab details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LabDetailsInner inviteCode(
        String billingAccountName,
        String billingProfileName,
        String invoiceSectionName,
        InviteCodeGenerateRequest parameters) {
        final Boolean onlyUpdateStudentCountParameter = null;
        return inviteCodeAsync(
                billingAccountName, billingProfileName, invoiceSectionName, parameters, onlyUpdateStudentCountParameter)
            .block();
    }

    /**
     * Generate invite code for a lab.
     *
     * @param billingAccountName Billing account name.
     * @param billingProfileName Billing profile name.
     * @param invoiceSectionName Invoice section name.
     * @param parameters Request parameters that are provided to generate invite code.
     * @param onlyUpdateStudentCountParameter set this flag to true if you want to update student count without
     *     generating a new invite code.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lab details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<LabDetailsInner> inviteCodeWithResponse(
        String billingAccountName,
        String billingProfileName,
        String invoiceSectionName,
        InviteCodeGenerateRequest parameters,
        Boolean onlyUpdateStudentCountParameter,
        Context context) {
        return inviteCodeWithResponseAsync(
                billingAccountName,
                billingProfileName,
                invoiceSectionName,
                parameters,
                onlyUpdateStudentCountParameter,
                context)
            .block();
    }
}
