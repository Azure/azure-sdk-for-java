// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.education.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.education.models.StudentLabStatus;
import com.azure.resourcemanager.education.models.StudentRole;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Student lab detail properties.
 */
@Immutable
public final class StudentLabProperties implements JsonSerializable<StudentLabProperties> {
    /*
     * Student lab Display Name
     */
    private String displayName;

    /*
     * Detail description of this lab
     */
    private String description;

    /*
     * Date the lab will expire and by default will be the expiration date for each student in this lab
     */
    private OffsetDateTime expirationDate;

    /*
     * Student Role
     */
    private StudentRole role;

    /*
     * Student Budget
     */
    private Amount budget;

    /*
     * Subscription Id
     */
    private String subscriptionId;

    /*
     * Student Lab Status
     */
    private StudentLabStatus status;

    /*
     * User Added Date
     */
    private OffsetDateTime effectiveDate;

    /*
     * Lab Scope.
     * /providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/
     * invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default
     */
    private String labScope;

    /**
     * Creates an instance of StudentLabProperties class.
     */
    public StudentLabProperties() {
    }

    /**
     * Get the displayName property: Student lab Display Name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the description property: Detail description of this lab.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the expirationDate property: Date the lab will expire and by default will be the expiration date for each
     * student in this lab.
     * 
     * @return the expirationDate value.
     */
    public OffsetDateTime expirationDate() {
        return this.expirationDate;
    }

    /**
     * Get the role property: Student Role.
     * 
     * @return the role value.
     */
    public StudentRole role() {
        return this.role;
    }

    /**
     * Get the budget property: Student Budget.
     * 
     * @return the budget value.
     */
    public Amount budget() {
        return this.budget;
    }

    /**
     * Get the subscriptionId property: Subscription Id.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the status property: Student Lab Status.
     * 
     * @return the status value.
     */
    public StudentLabStatus status() {
        return this.status;
    }

    /**
     * Get the effectiveDate property: User Added Date.
     * 
     * @return the effectiveDate value.
     */
    public OffsetDateTime effectiveDate() {
        return this.effectiveDate;
    }

    /**
     * Get the labScope property: Lab Scope.
     * /providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default.
     * 
     * @return the labScope value.
     */
    public String labScope() {
        return this.labScope;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (budget() != null) {
            budget().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StudentLabProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StudentLabProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StudentLabProperties.
     */
    public static StudentLabProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StudentLabProperties deserializedStudentLabProperties = new StudentLabProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedStudentLabProperties.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedStudentLabProperties.description = reader.getString();
                } else if ("expirationDate".equals(fieldName)) {
                    deserializedStudentLabProperties.expirationDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("role".equals(fieldName)) {
                    deserializedStudentLabProperties.role = StudentRole.fromString(reader.getString());
                } else if ("budget".equals(fieldName)) {
                    deserializedStudentLabProperties.budget = Amount.fromJson(reader);
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedStudentLabProperties.subscriptionId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedStudentLabProperties.status = StudentLabStatus.fromString(reader.getString());
                } else if ("effectiveDate".equals(fieldName)) {
                    deserializedStudentLabProperties.effectiveDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("labScope".equals(fieldName)) {
                    deserializedStudentLabProperties.labScope = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStudentLabProperties;
        });
    }
}
