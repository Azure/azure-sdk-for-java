// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.education.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.education.models.LabStatus;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Lab detail result properties.
 */
@Fluent
public final class LabProperties implements JsonSerializable<LabProperties> {
    /*
     * Lab Display Name
     */
    private String displayName;

    /*
     * Default monetary cap for each student in this lab
     */
    private Amount budgetPerStudent;

    /*
     * Detail description of this lab
     */
    private String description;

    /*
     * Default expiration date for each student in this lab
     */
    private OffsetDateTime expirationDate;

    /*
     * Lab creation date
     */
    private OffsetDateTime effectiveDate;

    /*
     * The status of this lab
     */
    private LabStatus status;

    /*
     * the total number of students that can be accepted to the lab.
     */
    private Float maxStudentCount;

    /*
     * invitation code for redeemable lab
     */
    private String invitationCode;

    /*
     * Total budget
     */
    private Amount innerTotalBudget;

    /*
     * Total allocated budget
     */
    private Amount innerTotalAllocatedBudget;

    /**
     * Creates an instance of LabProperties class.
     */
    public LabProperties() {
    }

    /**
     * Get the displayName property: Lab Display Name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Lab Display Name.
     * 
     * @param displayName the displayName value to set.
     * @return the LabProperties object itself.
     */
    public LabProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the budgetPerStudent property: Default monetary cap for each student in this lab.
     * 
     * @return the budgetPerStudent value.
     */
    public Amount budgetPerStudent() {
        return this.budgetPerStudent;
    }

    /**
     * Set the budgetPerStudent property: Default monetary cap for each student in this lab.
     * 
     * @param budgetPerStudent the budgetPerStudent value to set.
     * @return the LabProperties object itself.
     */
    public LabProperties withBudgetPerStudent(Amount budgetPerStudent) {
        this.budgetPerStudent = budgetPerStudent;
        return this;
    }

    /**
     * Get the description property: Detail description of this lab.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Detail description of this lab.
     * 
     * @param description the description value to set.
     * @return the LabProperties object itself.
     */
    public LabProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the expirationDate property: Default expiration date for each student in this lab.
     * 
     * @return the expirationDate value.
     */
    public OffsetDateTime expirationDate() {
        return this.expirationDate;
    }

    /**
     * Set the expirationDate property: Default expiration date for each student in this lab.
     * 
     * @param expirationDate the expirationDate value to set.
     * @return the LabProperties object itself.
     */
    public LabProperties withExpirationDate(OffsetDateTime expirationDate) {
        this.expirationDate = expirationDate;
        return this;
    }

    /**
     * Get the effectiveDate property: Lab creation date.
     * 
     * @return the effectiveDate value.
     */
    public OffsetDateTime effectiveDate() {
        return this.effectiveDate;
    }

    /**
     * Get the status property: The status of this lab.
     * 
     * @return the status value.
     */
    public LabStatus status() {
        return this.status;
    }

    /**
     * Get the maxStudentCount property: the total number of students that can be accepted to the lab.
     * 
     * @return the maxStudentCount value.
     */
    public Float maxStudentCount() {
        return this.maxStudentCount;
    }

    /**
     * Get the invitationCode property: invitation code for redeemable lab.
     * 
     * @return the invitationCode value.
     */
    public String invitationCode() {
        return this.invitationCode;
    }

    /**
     * Get the innerTotalBudget property: Total budget.
     * 
     * @return the innerTotalBudget value.
     */
    private Amount innerTotalBudget() {
        return this.innerTotalBudget;
    }

    /**
     * Get the innerTotalAllocatedBudget property: Total allocated budget.
     * 
     * @return the innerTotalAllocatedBudget value.
     */
    private Amount innerTotalAllocatedBudget() {
        return this.innerTotalAllocatedBudget;
    }

    /**
     * Get the currency property: The type of currency being used for the value.
     * 
     * @return the currency value.
     */
    public String currency() {
        return this.innerTotalBudget() == null ? null : this.innerTotalBudget().currency();
    }

    /**
     * Set the currency property: The type of currency being used for the value.
     * 
     * @param currency the currency value to set.
     * @return the LabProperties object itself.
     */
    public LabProperties withCurrency(String currency) {
        if (this.innerTotalBudget() == null) {
            this.innerTotalBudget = new Amount();
        }
        this.innerTotalBudget().withCurrency(currency);
        return this;
    }

    /**
     * Get the value property: Amount value.
     * 
     * @return the value value.
     */
    public Float value() {
        return this.innerTotalBudget() == null ? null : this.innerTotalBudget().value();
    }

    /**
     * Set the value property: Amount value.
     * 
     * @param value the value value to set.
     * @return the LabProperties object itself.
     */
    public LabProperties withValue(Float value) {
        if (this.innerTotalBudget() == null) {
            this.innerTotalBudget = new Amount();
        }
        this.innerTotalBudget().withValue(value);
        return this;
    }

    /**
     * Get the currency property: The type of currency being used for the value.
     * 
     * @return the currency value.
     */
    public String currencyTotalAllocatedBudgetCurrency() {
        return this.innerTotalAllocatedBudget() == null ? null : this.innerTotalAllocatedBudget().currency();
    }

    /**
     * Set the currency property: The type of currency being used for the value.
     * 
     * @param currency the currency value to set.
     * @return the LabProperties object itself.
     */
    public LabProperties withCurrencyTotalAllocatedBudgetCurrency(String currency) {
        if (this.innerTotalAllocatedBudget() == null) {
            this.innerTotalAllocatedBudget = new Amount();
        }
        this.innerTotalAllocatedBudget().withCurrency(currency);
        return this;
    }

    /**
     * Get the value property: Amount value.
     * 
     * @return the value value.
     */
    public Float valueTotalAllocatedBudgetValue() {
        return this.innerTotalAllocatedBudget() == null ? null : this.innerTotalAllocatedBudget().value();
    }

    /**
     * Set the value property: Amount value.
     * 
     * @param value the value value to set.
     * @return the LabProperties object itself.
     */
    public LabProperties withValueTotalAllocatedBudgetValue(Float value) {
        if (this.innerTotalAllocatedBudget() == null) {
            this.innerTotalAllocatedBudget = new Amount();
        }
        this.innerTotalAllocatedBudget().withValue(value);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (displayName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property displayName in model LabProperties"));
        }
        if (budgetPerStudent() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property budgetPerStudent in model LabProperties"));
        } else {
            budgetPerStudent().validate();
        }
        if (description() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property description in model LabProperties"));
        }
        if (expirationDate() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property expirationDate in model LabProperties"));
        }
        if (innerTotalBudget() != null) {
            innerTotalBudget().validate();
        }
        if (innerTotalAllocatedBudget() != null) {
            innerTotalAllocatedBudget().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LabProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeJsonField("budgetPerStudent", this.budgetPerStudent);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("expirationDate",
            this.expirationDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expirationDate));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LabProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LabProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LabProperties.
     */
    public static LabProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LabProperties deserializedLabProperties = new LabProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedLabProperties.displayName = reader.getString();
                } else if ("budgetPerStudent".equals(fieldName)) {
                    deserializedLabProperties.budgetPerStudent = Amount.fromJson(reader);
                } else if ("description".equals(fieldName)) {
                    deserializedLabProperties.description = reader.getString();
                } else if ("expirationDate".equals(fieldName)) {
                    deserializedLabProperties.expirationDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("effectiveDate".equals(fieldName)) {
                    deserializedLabProperties.effectiveDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedLabProperties.status = LabStatus.fromString(reader.getString());
                } else if ("maxStudentCount".equals(fieldName)) {
                    deserializedLabProperties.maxStudentCount = reader.getNullable(JsonReader::getFloat);
                } else if ("invitationCode".equals(fieldName)) {
                    deserializedLabProperties.invitationCode = reader.getString();
                } else if ("totalBudget".equals(fieldName)) {
                    deserializedLabProperties.innerTotalBudget = Amount.fromJson(reader);
                } else if ("totalAllocatedBudget".equals(fieldName)) {
                    deserializedLabProperties.innerTotalAllocatedBudget = Amount.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLabProperties;
        });
    }
}
