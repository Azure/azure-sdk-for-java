// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.education.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.education.models.LabStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Lab details. */
@Fluent
public final class LabDetailsInner extends ProxyResource {
    /*
     * Get lab response properties.
     */
    @JsonProperty(value = "properties")
    private LabProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of LabDetailsInner class. */
    public LabDetailsInner() {
    }

    /**
     * Get the innerProperties property: Get lab response properties.
     *
     * @return the innerProperties value.
     */
    private LabProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the displayName property: Lab Display Name.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Set the displayName property: Lab Display Name.
     *
     * @param displayName the displayName value to set.
     * @return the LabDetailsInner object itself.
     */
    public LabDetailsInner withDisplayName(String displayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LabProperties();
        }
        this.innerProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the budgetPerStudent property: Default monetary cap for each student in this lab.
     *
     * @return the budgetPerStudent value.
     */
    public Amount budgetPerStudent() {
        return this.innerProperties() == null ? null : this.innerProperties().budgetPerStudent();
    }

    /**
     * Set the budgetPerStudent property: Default monetary cap for each student in this lab.
     *
     * @param budgetPerStudent the budgetPerStudent value to set.
     * @return the LabDetailsInner object itself.
     */
    public LabDetailsInner withBudgetPerStudent(Amount budgetPerStudent) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LabProperties();
        }
        this.innerProperties().withBudgetPerStudent(budgetPerStudent);
        return this;
    }

    /**
     * Get the description property: Detail description of this lab.
     *
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: Detail description of this lab.
     *
     * @param description the description value to set.
     * @return the LabDetailsInner object itself.
     */
    public LabDetailsInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LabProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the expirationDate property: Default expiration date for each student in this lab.
     *
     * @return the expirationDate value.
     */
    public OffsetDateTime expirationDate() {
        return this.innerProperties() == null ? null : this.innerProperties().expirationDate();
    }

    /**
     * Set the expirationDate property: Default expiration date for each student in this lab.
     *
     * @param expirationDate the expirationDate value to set.
     * @return the LabDetailsInner object itself.
     */
    public LabDetailsInner withExpirationDate(OffsetDateTime expirationDate) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LabProperties();
        }
        this.innerProperties().withExpirationDate(expirationDate);
        return this;
    }

    /**
     * Get the effectiveDate property: Lab creation date.
     *
     * @return the effectiveDate value.
     */
    public OffsetDateTime effectiveDate() {
        return this.innerProperties() == null ? null : this.innerProperties().effectiveDate();
    }

    /**
     * Get the status property: The status of this lab.
     *
     * @return the status value.
     */
    public LabStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the maxStudentCount property: the total number of students that can be accepted to the lab.
     *
     * @return the maxStudentCount value.
     */
    public Float maxStudentCount() {
        return this.innerProperties() == null ? null : this.innerProperties().maxStudentCount();
    }

    /**
     * Get the invitationCode property: invitation code for redeemable lab.
     *
     * @return the invitationCode value.
     */
    public String invitationCode() {
        return this.innerProperties() == null ? null : this.innerProperties().invitationCode();
    }

    /**
     * Get the currency property: The type of currency being used for the value.
     *
     * @return the currency value.
     */
    public String currency() {
        return this.innerProperties() == null ? null : this.innerProperties().currency();
    }

    /**
     * Get the value property: Amount value.
     *
     * @return the value value.
     */
    public Float value() {
        return this.innerProperties() == null ? null : this.innerProperties().value();
    }

    /**
     * Get the currencyTotalAllocatedBudgetCurrency property: The type of currency being used for the value.
     *
     * @return the currencyTotalAllocatedBudgetCurrency value.
     */
    public String currencyTotalAllocatedBudgetCurrency() {
        return this.innerProperties() == null ? null : this.innerProperties().currencyTotalAllocatedBudgetCurrency();
    }

    /**
     * Get the valueTotalAllocatedBudgetValue property: Amount value.
     *
     * @return the valueTotalAllocatedBudgetValue value.
     */
    public Float valueTotalAllocatedBudgetValue() {
        return this.innerProperties() == null ? null : this.innerProperties().valueTotalAllocatedBudgetValue();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
