// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager;
import com.azure.resourcemanager.containerservicefleet.models.AgentProfile;
import com.azure.resourcemanager.containerservicefleet.models.ApiServerAccessProfile;
import com.azure.resourcemanager.containerservicefleet.models.Fleet;
import com.azure.resourcemanager.containerservicefleet.models.FleetHubProfile;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentity;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.containerservicefleet.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FleetsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"hubProfile\":{\"dnsPrefix\":\"mpew\",\"apiServerAccessProfile\":{\"enablePrivateCluster\":true},\"agentProfile\":{\"subnetId\":\"vrnsvshqjohxc\",\"vmSize\":\"bfovasrruvwbhsq\"},\"fqdn\":\"ubcgjbirxb\",\"kubernetesVersion\":\"bsrfbj\",\"portalFqdn\":\"twss\"}},\"eTag\":\"ftpvjzbexil\",\"identity\":{\"principalId\":\"fqqnvwpmqtaruo\",\"tenantId\":\"mkcjhwqytjrybn\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"thnzd\":{\"clientId\":\"drjervnaenqpehin\",\"principalId\":\"ygmi\"},\"qlkth\":{\"clientId\":\"sl\",\"principalId\":\"ayqigynduhav\"},\"vaolpsslqlf\":{\"clientId\":\"aqolbgycduiertg\",\"principalId\":\"y\"},\"bzmnvdfznud\":{\"clientId\":\"dnbbglzps\",\"principalId\":\"ydmcwyhzdxssa\"}}},\"location\":\"dvxzbncblylpst\",\"tags\":{\"ntnev\":\"hxsrzdzucersc\"},\"id\":\"iwjmygtdssls\",\"name\":\"tmweriofzpyq\",\"type\":\"emwabnet\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerServiceFleetManager manager = ContainerServiceFleetManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Fleet response = manager.fleets()
            .define("exznelixhnr")
            .withRegion("hx")
            .withExistingResourceGroup("yaqcslyjpkiidz")
            .withTags(mapOf("u", "n", "xqzvszjfa", "ivkrtsw"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_AND_USER_ASSIGNED)
                .withUserAssignedIdentities(
                    mapOf("lzdahzxctobgbkdm", new UserAssignedIdentity(), "jy", new UserAssignedIdentity())))
            .withHubProfile(new FleetHubProfile().withDnsPrefix("bnxknalaulppg")
                .withApiServerAccessProfile(new ApiServerAccessProfile().withEnablePrivateCluster(true))
                .withAgentProfile(new AgentProfile().withSubnetId("pnyiropuhp").withVmSize("vpgylgqgitxmed")))
            .withIfMatch("mcbxvwvxysl")
            .withIfNoneMatch("bhsfxob")
            .create();

        Assertions.assertEquals("dvxzbncblylpst", response.location());
        Assertions.assertEquals("hxsrzdzucersc", response.tags().get("ntnev"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("mpew", response.hubProfile().dnsPrefix());
        Assertions.assertEquals(true, response.hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals("vrnsvshqjohxc", response.hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("bfovasrruvwbhsq", response.hubProfile().agentProfile().vmSize());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
