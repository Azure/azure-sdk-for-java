// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentity;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.containerservicefleet.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedServiceIdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedServiceIdentity model = BinaryData.fromString(
            "{\"principalId\":\"c791b804-d65e-4d3d-82aa-f9817ace60db\",\"tenantId\":\"a8a73ab8-deaa-45ef-9f7c-dbc46f739c69\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"dkvwrwjfe\":{\"principalId\":\"cb14f3aa-355e-47d7-8112-e813f7fbfe27\",\"clientId\":\"ed42df83-0116-40f3-8984-9ee87f78f6b4\"},\"hutje\":{\"principalId\":\"42b4d40b-57dc-4890-b74b-b63fa0535646\",\"clientId\":\"fa0661d5-863f-444d-8417-b770f0167a45\"},\"rl\":{\"principalId\":\"5f09f7e3-06f3-4d1b-8355-f9c400505edf\",\"clientId\":\"0cc096bb-7018-4bc3-82ab-bdc301d76784\"}}}")
            .toObject(ManagedServiceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedServiceIdentity model = new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
            .withUserAssignedIdentities(mapOf("dkvwrwjfe", new UserAssignedIdentity(), "hutje",
                new UserAssignedIdentity(), "rl", new UserAssignedIdentity()));
        model = BinaryData.fromObject(model).toObject(ManagedServiceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
