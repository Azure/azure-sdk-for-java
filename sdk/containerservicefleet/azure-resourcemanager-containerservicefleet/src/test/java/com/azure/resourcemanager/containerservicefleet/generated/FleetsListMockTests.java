// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager;
import com.azure.resourcemanager.containerservicefleet.models.Fleet;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class FleetsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Deleting\",\"hubProfile\":{\"dnsPrefix\":\"togt\",\"apiServerAccessProfile\":{\"enablePrivateCluster\":true,\"enableVnetIntegration\":false,\"subnetId\":\"vnm\"},\"agentProfile\":{\"subnetId\":\"kvceoveilovnotyf\",\"vmSize\":\"cnjbkcnxdhbt\"},\"fqdn\":\"phywpnvj\",\"kubernetesVersion\":\"qnermclfplphoxu\",\"portalFqdn\":\"rpabg\"}},\"eTag\":\"psbjta\",\"identity\":{\"principalId\":\"c6054ddf-bbcc-4cb1-8054-f6a71b0c703a\",\"tenantId\":\"c3c2e227-03cf-44be-8685-ebc8b96090ee\",\"type\":\"SystemAssigned,"
                + " UserAssigned\",\"userAssignedIdentities\":{\"ueefjzwfqkqu\":{\"principalId\":\"44c7e2b1-6a91-48a2-b4b0-355aa8885482\",\"clientId\":\"b93837b5-53af-40c9-b28e-3a4f01f39b78\"},\"suyonobglaocq\":{\"principalId\":\"1b79cc6f-ec3f-47f1-88e8-40fef44dea3f\",\"clientId\":\"5eb62a70-39d7-4cbe-a015-f38f0baa5236\"}}},\"location\":\"ccm\",\"tags\":{\"moyrxvwfudwpz\":\"dxyt\",\"rqjbhckfrl\":\"txhdzh\",\"ca\":\"rxsbkyvp\"},\"id\":\"uzbpzkafku\",\"name\":\"b\",\"type\":\"rnwb\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ContainerServiceFleetManager manager =
            ContainerServiceFleetManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Fleet> response = manager.fleets().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ccm", response.iterator().next().location());
        Assertions.assertEquals("dxyt", response.iterator().next().tags().get("moyrxvwfudwpz"));
        Assertions
            .assertEquals(
                ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals("togt", response.iterator().next().hubProfile().dnsPrefix());
        Assertions
            .assertEquals(
                true, response.iterator().next().hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions
            .assertEquals(
                false, response.iterator().next().hubProfile().apiServerAccessProfile().enableVnetIntegration());
        Assertions.assertEquals("vnm", response.iterator().next().hubProfile().apiServerAccessProfile().subnetId());
        Assertions.assertEquals("kvceoveilovnotyf", response.iterator().next().hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("cnjbkcnxdhbt", response.iterator().next().hubProfile().agentProfile().vmSize());
    }
}
