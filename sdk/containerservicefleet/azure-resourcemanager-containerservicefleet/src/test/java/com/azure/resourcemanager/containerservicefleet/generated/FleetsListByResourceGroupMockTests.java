// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager;
import com.azure.resourcemanager.containerservicefleet.models.Fleet;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FleetsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"hubProfile\":{\"dnsPrefix\":\"yvjusrtslhsp\",\"apiServerAccessProfile\":{\"enablePrivateCluster\":true},\"agentProfile\":{\"subnetId\":\"ofmxagkvtmelmqkr\",\"vmSize\":\"hvljuahaquh\"},\"fqdn\":\"hmdua\",\"kubernetesVersion\":\"exq\",\"portalFqdn\":\"fadmws\"}},\"eTag\":\"r\",\"identity\":{\"principalId\":\"pv\",\"tenantId\":\"mzlfmisgwb\",\"type\":\"None\",\"userAssignedIdentities\":{\"hsfwxosowzxcug\":{\"clientId\":\"dawkzbali\",\"principalId\":\"rqhakauha\"}}},\"location\":\"jooxdjebw\",\"tags\":{\"vmeueci\":\"wwfvov\",\"euojgjrwju\":\"yhz\",\"nrjawgqwg\":\"iotwmcdytdxwit\"},\"id\":\"hniskxfbkpyc\",\"name\":\"klwndnhjdauwhv\",\"type\":\"l\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerServiceFleetManager manager = ContainerServiceFleetManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Fleet> response = manager.fleets().listByResourceGroup("rnwb", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("jooxdjebw", response.iterator().next().location());
        Assertions.assertEquals("wwfvov", response.iterator().next().tags().get("vmeueci"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals("yvjusrtslhsp", response.iterator().next().hubProfile().dnsPrefix());
        Assertions.assertEquals(true,
            response.iterator().next().hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals("ofmxagkvtmelmqkr", response.iterator().next().hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("hvljuahaquh", response.iterator().next().hubProfile().agentProfile().vmSize());
    }
}
