// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager;
import com.azure.resourcemanager.containerservicefleet.models.Fleet;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FleetsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"hubProfile\":{\"dnsPrefix\":\"skpbhenbtkcxywn\",\"apiServerAccessProfile\":{\"enablePrivateCluster\":false,\"enableVnetIntegration\":false,\"subnetId\":\"lqidyby\"},\"agentProfile\":{\"subnetId\":\"fclhaaxdbabphlwr\",\"vmSize\":\"fkts\"},\"fqdn\":\"sucocmnyyazttbtw\",\"kubernetesVersion\":\"qpuedckzywbiex\",\"portalFqdn\":\"eyueaxibxujwb\"}},\"eTag\":\"walm\",\"identity\":{\"principalId\":\"37faf1a4-cb99-4356-81c9-392decdeaab8\",\"tenantId\":\"dbe4e03a-d261-417f-8bf2-2a16c27f6aca\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"kzjancuxrhdwbav\":{\"principalId\":\"b4755be6-db49-4363-ba40-78618bc6ec63\",\"clientId\":\"2e8c1b73-e97d-4360-beb4-33e138e8a9cc\"},\"iwdjswztsdbpgn\":{\"principalId\":\"03d7355d-73f1-444a-84b8-0a5a856f8395\",\"clientId\":\"8729ac28-401d-4714-bc40-51e77fb051d8\"}}},\"location\":\"txhp\",\"tags\":{\"hxw\":\"zpfzabglc\",\"bbovplwzbhvgyugu\":\"ctyqik\"},\"id\":\"svmkfssxquk\",\"name\":\"fpl\",\"type\":\"mg\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerServiceFleetManager manager = ContainerServiceFleetManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Fleet> response
            = manager.fleets().listByResourceGroup("ttdbhrbnl", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("txhp", response.iterator().next().location());
        Assertions.assertEquals("zpfzabglc", response.iterator().next().tags().get("hxw"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            response.iterator().next().identity().type());
        Assertions.assertEquals("skpbhenbtkcxywn", response.iterator().next().hubProfile().dnsPrefix());
        Assertions.assertEquals(false,
            response.iterator().next().hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals(false,
            response.iterator().next().hubProfile().apiServerAccessProfile().enableVnetIntegration());
        Assertions.assertEquals("lqidyby", response.iterator().next().hubProfile().apiServerAccessProfile().subnetId());
        Assertions.assertEquals("fclhaaxdbabphlwr", response.iterator().next().hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("fkts", response.iterator().next().hubProfile().agentProfile().vmSize());
    }
}
