// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerservicefleet.fluent.models.UpdateRunInner;
import com.azure.resourcemanager.containerservicefleet.models.ManagedClusterUpdate;
import com.azure.resourcemanager.containerservicefleet.models.ManagedClusterUpgradeSpec;
import com.azure.resourcemanager.containerservicefleet.models.ManagedClusterUpgradeType;
import com.azure.resourcemanager.containerservicefleet.models.NodeImageSelection;
import com.azure.resourcemanager.containerservicefleet.models.NodeImageSelectionType;
import com.azure.resourcemanager.containerservicefleet.models.UpdateGroup;
import com.azure.resourcemanager.containerservicefleet.models.UpdateRunStrategy;
import com.azure.resourcemanager.containerservicefleet.models.UpdateStage;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class UpdateRunInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UpdateRunInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"Succeeded\",\"updateStrategyId\":\"jeiachboosfl\",\"strategy\":{\"stages\":[{\"name\":\"sfqpteehz\",\"groups\":[{\"name\":\"pyqr\"},{\"name\":\"mzinpvswjdk\"},{\"name\":\"rsoodqxhcrmnoh\"}],\"afterStageWaitInSeconds\":1543175438},{\"name\":\"kwh\",\"groups\":[{\"name\":\"ifiyipjxsqwpgrj\"},{\"name\":\"znorcj\"},{\"name\":\"vsnb\"},{\"name\":\"xqabnmocpcysh\"}],\"afterStageWaitInSeconds\":818060655},{\"name\":\"afbljjgpbtoqcjmk\",\"groups\":[{\"name\":\"vbqid\"}],\"afterStageWaitInSeconds\":1381464845}]},\"managedClusterUpdate\":{\"upgrade\":{\"type\":\"Full\",\"kubernetesVersion\":\"yulpkudjkr\"},\"nodeImageSelection\":{\"type\":\"Latest\"}},\"status\":{\"status\":{\"startTime\":\"2021-09-13T05:12:15Z\",\"completedTime\":\"2021-02-23T09:32:58Z\",\"state\":\"Stopped\"},\"stages\":[{\"status\":{\"startTime\":\"2021-08-17T01:01:15Z\",\"completedTime\":\"2021-05-08T18:49:34Z\",\"state\":\"Failed\"},\"name\":\"aierhhb\",\"groups\":[{}],\"afterStageWaitStatus\":{\"status\":{},\"waitDurationInSeconds\":1936652093}}],\"nodeImageSelection\":{\"selectedNodeImageVersions\":[{\"version\":\"aodxo\"},{\"version\":\"bdxkqpxokaj\"},{\"version\":\"npime\"}]}}},\"eTag\":\"stxgc\",\"id\":\"dg\",\"name\":\"aajrm\",\"type\":\"djwzrlov\"}")
                .toObject(UpdateRunInner.class);
        Assertions.assertEquals("jeiachboosfl", model.updateStrategyId());
        Assertions.assertEquals("sfqpteehz", model.strategy().stages().get(0).name());
        Assertions.assertEquals("pyqr", model.strategy().stages().get(0).groups().get(0).name());
        Assertions.assertEquals(1543175438, model.strategy().stages().get(0).afterStageWaitInSeconds());
        Assertions.assertEquals(ManagedClusterUpgradeType.FULL, model.managedClusterUpdate().upgrade().type());
        Assertions.assertEquals("yulpkudjkr", model.managedClusterUpdate().upgrade().kubernetesVersion());
        Assertions
            .assertEquals(NodeImageSelectionType.LATEST, model.managedClusterUpdate().nodeImageSelection().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UpdateRunInner model =
            new UpdateRunInner()
                .withUpdateStrategyId("jeiachboosfl")
                .withStrategy(
                    new UpdateRunStrategy()
                        .withStages(
                            Arrays
                                .asList(
                                    new UpdateStage()
                                        .withName("sfqpteehz")
                                        .withGroups(
                                            Arrays
                                                .asList(
                                                    new UpdateGroup().withName("pyqr"),
                                                    new UpdateGroup().withName("mzinpvswjdk"),
                                                    new UpdateGroup().withName("rsoodqxhcrmnoh")))
                                        .withAfterStageWaitInSeconds(1543175438),
                                    new UpdateStage()
                                        .withName("kwh")
                                        .withGroups(
                                            Arrays
                                                .asList(
                                                    new UpdateGroup().withName("ifiyipjxsqwpgrj"),
                                                    new UpdateGroup().withName("znorcj"),
                                                    new UpdateGroup().withName("vsnb"),
                                                    new UpdateGroup().withName("xqabnmocpcysh")))
                                        .withAfterStageWaitInSeconds(818060655),
                                    new UpdateStage()
                                        .withName("afbljjgpbtoqcjmk")
                                        .withGroups(Arrays.asList(new UpdateGroup().withName("vbqid")))
                                        .withAfterStageWaitInSeconds(1381464845))))
                .withManagedClusterUpdate(
                    new ManagedClusterUpdate()
                        .withUpgrade(
                            new ManagedClusterUpgradeSpec()
                                .withType(ManagedClusterUpgradeType.FULL)
                                .withKubernetesVersion("yulpkudjkr"))
                        .withNodeImageSelection(new NodeImageSelection().withType(NodeImageSelectionType.LATEST)));
        model = BinaryData.fromObject(model).toObject(UpdateRunInner.class);
        Assertions.assertEquals("jeiachboosfl", model.updateStrategyId());
        Assertions.assertEquals("sfqpteehz", model.strategy().stages().get(0).name());
        Assertions.assertEquals("pyqr", model.strategy().stages().get(0).groups().get(0).name());
        Assertions.assertEquals(1543175438, model.strategy().stages().get(0).afterStageWaitInSeconds());
        Assertions.assertEquals(ManagedClusterUpgradeType.FULL, model.managedClusterUpdate().upgrade().type());
        Assertions.assertEquals("yulpkudjkr", model.managedClusterUpdate().upgrade().kubernetesVersion());
        Assertions
            .assertEquals(NodeImageSelectionType.LATEST, model.managedClusterUpdate().nodeImageSelection().type());
    }
}
