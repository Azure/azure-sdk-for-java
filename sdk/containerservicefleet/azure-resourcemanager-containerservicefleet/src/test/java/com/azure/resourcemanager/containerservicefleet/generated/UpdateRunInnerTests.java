// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerservicefleet.fluent.models.UpdateRunInner;
import com.azure.resourcemanager.containerservicefleet.models.ManagedClusterUpdate;
import com.azure.resourcemanager.containerservicefleet.models.ManagedClusterUpgradeSpec;
import com.azure.resourcemanager.containerservicefleet.models.ManagedClusterUpgradeType;
import com.azure.resourcemanager.containerservicefleet.models.NodeImageSelection;
import com.azure.resourcemanager.containerservicefleet.models.NodeImageSelectionType;
import com.azure.resourcemanager.containerservicefleet.models.UpdateGroup;
import com.azure.resourcemanager.containerservicefleet.models.UpdateRunStrategy;
import com.azure.resourcemanager.containerservicefleet.models.UpdateStage;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class UpdateRunInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UpdateRunInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"updateStrategyId\":\"urzafb\",\"strategy\":{\"stages\":[{\"name\":\"gpbtoqcjmklj\",\"groups\":[{\"name\":\"qidtqajzyu\"},{\"name\":\"pku\"}],\"afterStageWaitInSeconds\":963090330}]},\"managedClusterUpdate\":{\"upgrade\":{\"type\":\"NodeImageOnly\",\"kubernetesVersion\":\"khbzhfepgzg\"},\"nodeImageSelection\":{\"type\":\"Consistent\"}},\"status\":{\"status\":{\"startTime\":\"2021-05-08T18:49:34Z\",\"completedTime\":\"2021-06-23T08:05:35Z\",\"state\":\"Stopping\"},\"stages\":[{\"status\":{\"startTime\":\"2021-06-04T19:54:17Z\",\"completedTime\":\"2021-10-14T03:01:25Z\",\"state\":\"Stopping\"},\"name\":\"mmajtjaodx\",\"groups\":[{},{}],\"afterStageWaitStatus\":{\"status\":{},\"waitDurationInSeconds\":64161547}},{\"status\":{\"startTime\":\"2021-06-04T04:36:15Z\",\"completedTime\":\"2021-09-27T22:27:26Z\",\"state\":\"Running\"},\"name\":\"npime\",\"groups\":[{},{}],\"afterStageWaitStatus\":{\"status\":{},\"waitDurationInSeconds\":373468277}},{\"status\":{\"startTime\":\"2021-06-26T04:01:22Z\",\"completedTime\":\"2021-09-06T05:45:20Z\",\"state\":\"Skipped\"},\"name\":\"mvdjwzrlovmc\",\"groups\":[{},{}],\"afterStageWaitStatus\":{\"status\":{},\"waitDurationInSeconds\":1329098817}}],\"nodeImageSelection\":{\"selectedNodeImageVersions\":[{\"version\":\"bzaqsqsycbkbfk\"},{\"version\":\"kdkexxp\"}]}}},\"eTag\":\"fmxa\",\"id\":\"fjpgddtocjjxhvp\",\"name\":\"o\",\"type\":\"exhd\"}")
            .toObject(UpdateRunInner.class);
        Assertions.assertEquals("urzafb", model.updateStrategyId());
        Assertions.assertEquals("gpbtoqcjmklj", model.strategy().stages().get(0).name());
        Assertions.assertEquals("qidtqajzyu", model.strategy().stages().get(0).groups().get(0).name());
        Assertions.assertEquals(963090330, model.strategy().stages().get(0).afterStageWaitInSeconds());
        Assertions.assertEquals(ManagedClusterUpgradeType.NODE_IMAGE_ONLY,
            model.managedClusterUpdate().upgrade().type());
        Assertions.assertEquals("khbzhfepgzg", model.managedClusterUpdate().upgrade().kubernetesVersion());
        Assertions.assertEquals(NodeImageSelectionType.CONSISTENT,
            model.managedClusterUpdate().nodeImageSelection().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UpdateRunInner model = new UpdateRunInner().withUpdateStrategyId("urzafb")
            .withStrategy(new UpdateRunStrategy().withStages(Arrays.asList(new UpdateStage().withName("gpbtoqcjmklj")
                .withGroups(Arrays.asList(new UpdateGroup().withName("qidtqajzyu"), new UpdateGroup().withName("pku")))
                .withAfterStageWaitInSeconds(963090330))))
            .withManagedClusterUpdate(new ManagedClusterUpdate()
                .withUpgrade(new ManagedClusterUpgradeSpec().withType(ManagedClusterUpgradeType.NODE_IMAGE_ONLY)
                    .withKubernetesVersion("khbzhfepgzg"))
                .withNodeImageSelection(new NodeImageSelection().withType(NodeImageSelectionType.CONSISTENT)));
        model = BinaryData.fromObject(model).toObject(UpdateRunInner.class);
        Assertions.assertEquals("urzafb", model.updateStrategyId());
        Assertions.assertEquals("gpbtoqcjmklj", model.strategy().stages().get(0).name());
        Assertions.assertEquals("qidtqajzyu", model.strategy().stages().get(0).groups().get(0).name());
        Assertions.assertEquals(963090330, model.strategy().stages().get(0).afterStageWaitInSeconds());
        Assertions.assertEquals(ManagedClusterUpgradeType.NODE_IMAGE_ONLY,
            model.managedClusterUpdate().upgrade().type());
        Assertions.assertEquals("khbzhfepgzg", model.managedClusterUpdate().upgrade().kubernetesVersion());
        Assertions.assertEquals(NodeImageSelectionType.CONSISTENT,
            model.managedClusterUpdate().nodeImageSelection().type());
    }
}
