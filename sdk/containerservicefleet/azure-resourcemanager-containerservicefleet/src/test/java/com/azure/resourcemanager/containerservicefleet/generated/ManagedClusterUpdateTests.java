// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerservicefleet.models.ManagedClusterUpdate;
import com.azure.resourcemanager.containerservicefleet.models.ManagedClusterUpgradeSpec;
import com.azure.resourcemanager.containerservicefleet.models.ManagedClusterUpgradeType;
import com.azure.resourcemanager.containerservicefleet.models.NodeImageSelection;
import com.azure.resourcemanager.containerservicefleet.models.NodeImageSelectionType;
import com.azure.resourcemanager.containerservicefleet.models.NodeImageVersion;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ManagedClusterUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedClusterUpdate model = BinaryData.fromString(
            "{\"upgrade\":{\"type\":\"Full\",\"kubernetesVersion\":\"u\"},\"nodeImageSelection\":{\"type\":\"Custom\",\"customNodeImageVersions\":[{\"version\":\"z\"},{\"version\":\"vvtpgvdfgio\"},{\"version\":\"ftutqxlngxlefgu\"},{\"version\":\"xkrxdqmi\"}]}}")
            .toObject(ManagedClusterUpdate.class);
        Assertions.assertEquals(ManagedClusterUpgradeType.FULL, model.upgrade().type());
        Assertions.assertEquals("u", model.upgrade().kubernetesVersion());
        Assertions.assertEquals(NodeImageSelectionType.CUSTOM, model.nodeImageSelection().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedClusterUpdate model = new ManagedClusterUpdate()
            .withUpgrade(
                new ManagedClusterUpgradeSpec().withType(ManagedClusterUpgradeType.FULL).withKubernetesVersion("u"))
            .withNodeImageSelection(new NodeImageSelection().withType(NodeImageSelectionType.CUSTOM)
                .withCustomNodeImageVersions(Arrays.asList(new NodeImageVersion(), new NodeImageVersion(),
                    new NodeImageVersion(), new NodeImageVersion())));
        model = BinaryData.fromObject(model).toObject(ManagedClusterUpdate.class);
        Assertions.assertEquals(ManagedClusterUpgradeType.FULL, model.upgrade().type());
        Assertions.assertEquals("u", model.upgrade().kubernetesVersion());
        Assertions.assertEquals(NodeImageSelectionType.CUSTOM, model.nodeImageSelection().type());
    }
}
