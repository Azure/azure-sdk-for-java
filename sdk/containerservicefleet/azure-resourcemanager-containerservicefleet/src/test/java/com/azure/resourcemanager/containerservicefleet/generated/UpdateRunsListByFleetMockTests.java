// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager;
import com.azure.resourcemanager.containerservicefleet.models.ManagedClusterUpgradeType;
import com.azure.resourcemanager.containerservicefleet.models.NodeImageSelectionType;
import com.azure.resourcemanager.containerservicefleet.models.UpdateRun;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class UpdateRunsListByFleetMockTests {
    @Test
    public void testListByFleet() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"updateStrategyId\":\"joxafnndlpi\",\"strategy\":{\"stages\":[{\"name\":\"o\",\"groups\":[{\"name\":\"cdyhbpkkpwdreqn\"},{\"name\":\"vvqfovljxyws\"}],\"afterStageWaitInSeconds\":2009471016},{\"name\":\"yrs\",\"groups\":[{\"name\":\"ytgadgvraeaene\"},{\"name\":\"nzar\"},{\"name\":\"wlquuijfqkace\"}],\"afterStageWaitInSeconds\":2104888829}]},\"managedClusterUpdate\":{\"upgrade\":{\"type\":\"NodeImageOnly\",\"kubernetesVersion\":\"pubjibw\"},\"nodeImageSelection\":{\"type\":\"Latest\"}},\"status\":{\"status\":{\"startTime\":\"2021-03-25T01:29:09Z\",\"completedTime\":\"2021-03-18T06:53:54Z\",\"state\":\"NotStarted\"},\"stages\":[{\"status\":{},\"name\":\"lsa\",\"groups\":[{}],\"afterStageWaitStatus\":{}},{\"status\":{},\"name\":\"ynl\",\"groups\":[{},{},{},{}],\"afterStageWaitStatus\":{}}],\"nodeImageSelection\":{\"selectedNodeImageVersions\":[{},{},{},{}]}}},\"eTag\":\"dlqiyntorzih\",\"id\":\"osjswsr\",\"name\":\"slyzrpzbchckqq\",\"type\":\"qioxi\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        ContainerServiceFleetManager manager = ContainerServiceFleetManager.configure().withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<UpdateRun> response
            = manager.updateRuns().listByFleet("erpqlpqwcciuqg", "dbutauvfbtkuwhh", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("joxafnndlpi", response.iterator().next().updateStrategyId());
        Assertions.assertEquals("o", response.iterator().next().strategy().stages().get(0).name());
        Assertions.assertEquals("cdyhbpkkpwdreqn",
            response.iterator().next().strategy().stages().get(0).groups().get(0).name());
        Assertions.assertEquals(2009471016,
            response.iterator().next().strategy().stages().get(0).afterStageWaitInSeconds());
        Assertions.assertEquals(ManagedClusterUpgradeType.NODE_IMAGE_ONLY,
            response.iterator().next().managedClusterUpdate().upgrade().type());
        Assertions.assertEquals("pubjibw",
            response.iterator().next().managedClusterUpdate().upgrade().kubernetesVersion());
        Assertions.assertEquals(NodeImageSelectionType.LATEST,
            response.iterator().next().managedClusterUpdate().nodeImageSelection().type());
    }
}
