// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager;
import com.azure.resourcemanager.containerservicefleet.models.Fleet;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class FleetsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Creating\",\"hubProfile\":{\"dnsPrefix\":\"nhjdauw\",\"apiServerAccessProfile\":{\"enablePrivateCluster\":false,\"enableVnetIntegration\":false,\"subnetId\":\"tdhxujznbmpowuwp\"},\"agentProfile\":{\"subnetId\":\"lve\",\"vmSize\":\"lupj\"},\"fqdn\":\"hfxobbcswsrtj\",\"kubernetesVersion\":\"plrbpbewtghf\",\"portalFqdn\":\"lcgwxzvlvqh\"}},\"eTag\":\"begibtnmxiebwwa\",\"identity\":{\"principalId\":\"3a9d318d-dfb7-4e59-ba57-36c25a01bd50\",\"tenantId\":\"e185aa80-91ad-429a-a614-ee683da3b241\",\"type\":\"None\",\"userAssignedIdentities\":{\"tzjuzgwyzmhtxo\":{\"principalId\":\"24563c88-d38f-4545-a14f-5ca303fa1a7e\",\"clientId\":\"03e4e334-3eee-49c3-9512-f5e1a0c6c742\"},\"ts\":{\"principalId\":\"d075009a-d886-4ab1-a51d-1fe119e703e8\",\"clientId\":\"c96c5ebb-9e24-4f48-a61c-29c6977d0da3\"}}},\"location\":\"jcbpwxqpsrknft\",\"tags\":{\"yvxqtayriwwroy\":\"riuhprwm\",\"bycnojvkn\":\"bexrmcq\",\"qsgzvahapj\":\"e\",\"zlmwlxkvugfhz\":\"zhpvgqzcjrvxd\"},\"id\":\"vawjvzunlu\",\"name\":\"hnnpr\",\"type\":\"xipeilpjzuaejx\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ContainerServiceFleetManager manager =
            ContainerServiceFleetManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Fleet response =
            manager
                .fleets()
                .getByResourceGroupWithResponse("nrjawgqwg", "hniskxfbkpyc", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("jcbpwxqpsrknft", response.location());
        Assertions.assertEquals("riuhprwm", response.tags().get("yvxqtayriwwroy"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.identity().type());
        Assertions.assertEquals("nhjdauw", response.hubProfile().dnsPrefix());
        Assertions.assertEquals(false, response.hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals(false, response.hubProfile().apiServerAccessProfile().enableVnetIntegration());
        Assertions.assertEquals("tdhxujznbmpowuwp", response.hubProfile().apiServerAccessProfile().subnetId());
        Assertions.assertEquals("lve", response.hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("lupj", response.hubProfile().agentProfile().vmSize());
    }
}
