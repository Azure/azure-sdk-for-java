// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager;
import com.azure.resourcemanager.containerservicefleet.models.Fleet;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FleetsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Updating\",\"hubProfile\":{\"dnsPrefix\":\"cjooxdjebwpucwwf\",\"apiServerAccessProfile\":{\"enablePrivateCluster\":true},\"agentProfile\":{\"subnetId\":\"euecivyhzceuoj\",\"vmSize\":\"rw\"},\"fqdn\":\"eiotwmcdytdx\",\"kubernetesVersion\":\"txnrjaw\",\"portalFqdn\":\"wgxhn\"}},\"eTag\":\"kxfbkpycgklwndn\",\"identity\":{\"principalId\":\"64d071a1-ed72-4d75-985a-ada7a2511617\",\"tenantId\":\"41f838da-ddbf-4765-9a49-05dacfc1eedb\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"l\":{\"principalId\":\"85c20802-6b77-4ae7-b488-a438ed76d315\",\"clientId\":\"bc8e46de-cc49-4b21-a455-1c38b5dab5e7\"},\"tdhxujznbmpowuwp\":{\"principalId\":\"1dd0b519-b2cb-4650-b7c9-6ce18df08cb2\",\"clientId\":\"096688a4-354b-417f-a258-e6060b790f44\"}}},\"location\":\"qlveualupjmkh\",\"tags\":{\"lrbpbewtghfgbl\":\"bbcswsrtjri\"},\"id\":\"gw\",\"name\":\"zvlvqhjkbegib\",\"type\":\"nmxiebwwaloayqc\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerServiceFleetManager manager = ContainerServiceFleetManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Fleet response = manager.fleets()
            .getByResourceGroupWithResponse("urqhaka", "hashsfwxosow", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("qlveualupjmkh", response.location());
        Assertions.assertEquals("bbcswsrtjri", response.tags().get("lrbpbewtghfgbl"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("cjooxdjebwpucwwf", response.hubProfile().dnsPrefix());
        Assertions.assertEquals(true, response.hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals("euecivyhzceuoj", response.hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("rw", response.hubProfile().agentProfile().vmSize());
    }
}
