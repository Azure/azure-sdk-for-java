// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager;
import com.azure.resourcemanager.containerservicefleet.models.ManagedClusterUpdate;
import com.azure.resourcemanager.containerservicefleet.models.ManagedClusterUpgradeSpec;
import com.azure.resourcemanager.containerservicefleet.models.ManagedClusterUpgradeType;
import com.azure.resourcemanager.containerservicefleet.models.NodeImageSelection;
import com.azure.resourcemanager.containerservicefleet.models.NodeImageSelectionType;
import com.azure.resourcemanager.containerservicefleet.models.UpdateGroup;
import com.azure.resourcemanager.containerservicefleet.models.UpdateRun;
import com.azure.resourcemanager.containerservicefleet.models.UpdateRunStrategy;
import com.azure.resourcemanager.containerservicefleet.models.UpdateStage;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class UpdateRunsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"updateStrategyId\":\"erqf\",\"strategy\":{\"stages\":[{\"name\":\"yznkby\",\"groups\":[{\"name\":\"wpfhpagmhrskd\"}],\"afterStageWaitInSeconds\":926747355},{\"name\":\"dsdoakgtdlmkk\",\"groups\":[{\"name\":\"dlhewp\"},{\"name\":\"sdsttwvog\"},{\"name\":\"bbejdcngqqm\"},{\"name\":\"akufgmjz\"}],\"afterStageWaitInSeconds\":1463483261},{\"name\":\"dgrtwaenuuzkopbm\",\"groups\":[{\"name\":\"fdwoyuhh\"},{\"name\":\"iuiefozbhdmsm\"}],\"afterStageWaitInSeconds\":1101350352}]},\"managedClusterUpdate\":{\"upgrade\":{\"type\":\"ControlPlaneOnly\",\"kubernetesVersion\":\"oftrmaequia\"},\"nodeImageSelection\":{\"type\":\"Latest\"}},\"status\":{\"status\":{\"startTime\":\"2021-07-04T19:08:41Z\",\"completedTime\":\"2021-03-06T05:00:38Z\",\"state\":\"Running\"},\"stages\":[{\"status\":{},\"name\":\"halns\",\"groups\":[{},{},{}],\"afterStageWaitStatus\":{}},{\"status\":{},\"name\":\"hka\",\"groups\":[{},{},{},{}],\"afterStageWaitStatus\":{}},{\"status\":{},\"name\":\"scywuggwoluhc\",\"groups\":[{}],\"afterStageWaitStatus\":{}},{\"status\":{},\"name\":\"ai\",\"groups\":[{}],\"afterStageWaitStatus\":{}}],\"nodeImageSelection\":{\"selectedNodeImageVersions\":[{},{},{}]}}},\"eTag\":\"msweypqwdxggicc\",\"id\":\"xqhuexm\",\"name\":\"ttlstvlzywemhz\",\"type\":\"ncsdtclusiyp\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        ContainerServiceFleetManager manager = ContainerServiceFleetManager.configure().withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        UpdateRun response
            = manager.updateRuns().define("aeburuvdmo").withExistingFleet("mkycgra", "wjue")
                .withUpdateStrategyId("xwabmqoe")
                .withStrategy(
                    new UpdateRunStrategy().withStages(Arrays.asList(
                        new UpdateStage().withName("frvtpuqu")
                            .withGroups(Arrays.asList(new UpdateGroup().withName("lgkfbt"),
                                new UpdateGroup().withName("doaon")))
                            .withAfterStageWaitInSeconds(1443237539),
                        new UpdateStage().withName("cn")
                            .withGroups(Arrays.asList(new UpdateGroup().withName("i"), new UpdateGroup().withName("c"),
                                new UpdateGroup().withName("ed"), new UpdateGroup().withName("twwaezkojvdcpzf")))
                            .withAfterStageWaitInSeconds(1481847492))))
                .withManagedClusterUpdate(new ManagedClusterUpdate()
                    .withUpgrade(new ManagedClusterUpgradeSpec().withType(ManagedClusterUpgradeType.CONTROL_PLANE_ONLY)
                        .withKubernetesVersion("cybxa"))
                    .withNodeImageSelection(new NodeImageSelection().withType(NodeImageSelectionType.CONSISTENT)))
                .withIfMatch("lmnguxaw").withIfNoneMatch("aldsy").create();

        Assertions.assertEquals("erqf", response.updateStrategyId());
        Assertions.assertEquals("yznkby", response.strategy().stages().get(0).name());
        Assertions.assertEquals("wpfhpagmhrskd", response.strategy().stages().get(0).groups().get(0).name());
        Assertions.assertEquals(926747355, response.strategy().stages().get(0).afterStageWaitInSeconds());
        Assertions.assertEquals(ManagedClusterUpgradeType.CONTROL_PLANE_ONLY,
            response.managedClusterUpdate().upgrade().type());
        Assertions.assertEquals("oftrmaequia", response.managedClusterUpdate().upgrade().kubernetesVersion());
        Assertions.assertEquals(NodeImageSelectionType.LATEST,
            response.managedClusterUpdate().nodeImageSelection().type());
    }
}
