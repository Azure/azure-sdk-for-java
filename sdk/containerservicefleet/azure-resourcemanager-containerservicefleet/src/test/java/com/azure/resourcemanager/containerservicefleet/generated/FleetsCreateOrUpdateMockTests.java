// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager;
import com.azure.resourcemanager.containerservicefleet.models.AgentProfile;
import com.azure.resourcemanager.containerservicefleet.models.ApiServerAccessProfile;
import com.azure.resourcemanager.containerservicefleet.models.Fleet;
import com.azure.resourcemanager.containerservicefleet.models.FleetHubProfile;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentity;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.containerservicefleet.models.UserAssignedIdentity;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class FleetsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"hubProfile\":{\"dnsPrefix\":\"mpew\",\"apiServerAccessProfile\":{\"enablePrivateCluster\":true,\"enableVnetIntegration\":true,\"subnetId\":\"rn\"},\"agentProfile\":{\"subnetId\":\"hqjohxcrsbfova\",\"vmSize\":\"ruvw\"},\"fqdn\":\"sqfsubcgjbirxb\",\"kubernetesVersion\":\"bsrfbj\",\"portalFqdn\":\"twss\"}},\"eTag\":\"ftpvjzbexil\",\"identity\":{\"principalId\":\"16d66bfc-39a4-4c38-b14a-2541268ad766\",\"tenantId\":\"5e64c591-4eb5-442b-b83b-db5d2eea7229\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"pmqtaru\":{\"principalId\":\"e1be06b3-e91b-4646-adba-cab4abe98a28\",\"clientId\":\"3a7bdcce-5dc3-485d-8b7a-8ee484d04d0b\"},\"mkcjhwqytjrybn\":{\"principalId\":\"17c72af0-e5a4-4236-ba94-47a5af5d9a6c\",\"clientId\":\"c1e6ea3f-902a-4ab6-a4b3-49f012f6efd3\"},\"wgdrjervnaenqp\":{\"principalId\":\"718a66aa-b8d4-4c63-b52b-c0085a30315e\",\"clientId\":\"cb729303-5d89-4241-b04a-48c6043771e1\"},\"ndoygmifthnzdnd\":{\"principalId\":\"d6be28c6-fed8-4d01-b941-bc518d8baa47\",\"clientId\":\"d650aad7-87ae-46fb-b7b6-c378aa4f37e7\"}}},\"location\":\"gnayqigynduh\",\"tags\":{\"maqolbgycduie\":\"qlkth\",\"qlfmmdnbb\":\"tgccymvaolpss\",\"wyhzdx\":\"lzpswiydm\"},\"id\":\"sadbz\",\"name\":\"nvdfznuda\",\"type\":\"dvxzbncblylpst\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ContainerServiceFleetManager manager =
            ContainerServiceFleetManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Fleet response =
            manager
                .fleets()
                .define("wyjsflhhcaalnjix")
                .withRegion("uaopppcqeq")
                .withExistingResourceGroup("mvb")
                .withTags(mapOf("ahzxctobgbk", "z", "mgrcfbu", "moizpos", "mjh", "rmfqjhhkxbpvj", "tswb", "xjyngudivk"))
                .withIdentity(
                    new ManagedServiceIdentity()
                        .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                        .withUserAssignedIdentities(
                            mapOf(
                                "gucnapkte",
                                new UserAssignedIdentity(),
                                "lwptfdy",
                                new UserAssignedIdentity(),
                                "qbuaceopzfqr",
                                new UserAssignedIdentity())))
                .withHubProfile(
                    new FleetHubProfile()
                        .withDnsPrefix("joya")
                        .withApiServerAccessProfile(
                            new ApiServerAccessProfile()
                                .withEnablePrivateCluster(false)
                                .withEnableVnetIntegration(true)
                                .withSubnetId("kiidzyex"))
                        .withAgentProfile(new AgentProfile().withSubnetId("lixhnrztfol").withVmSize("nxknalaulp")))
                .withIfMatch("mcbxvwvxysl")
                .withIfNoneMatch("bhsfxob")
                .create();

        Assertions.assertEquals("gnayqigynduh", response.location());
        Assertions.assertEquals("qlkth", response.tags().get("maqolbgycduie"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals("mpew", response.hubProfile().dnsPrefix());
        Assertions.assertEquals(true, response.hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals(true, response.hubProfile().apiServerAccessProfile().enableVnetIntegration());
        Assertions.assertEquals("rn", response.hubProfile().apiServerAccessProfile().subnetId());
        Assertions.assertEquals("hqjohxcrsbfova", response.hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("ruvw", response.hubProfile().agentProfile().vmSize());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
