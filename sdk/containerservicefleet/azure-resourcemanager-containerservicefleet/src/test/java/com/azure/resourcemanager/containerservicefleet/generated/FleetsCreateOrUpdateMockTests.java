// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager;
import com.azure.resourcemanager.containerservicefleet.models.AgentProfile;
import com.azure.resourcemanager.containerservicefleet.models.ApiServerAccessProfile;
import com.azure.resourcemanager.containerservicefleet.models.Fleet;
import com.azure.resourcemanager.containerservicefleet.models.FleetHubProfile;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentity;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.containerservicefleet.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FleetsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"hubProfile\":{\"dnsPrefix\":\"khfxobbcswsrt\",\"apiServerAccessProfile\":{\"enablePrivateCluster\":true,\"enableVnetIntegration\":true,\"subnetId\":\"pbewtghfgblcgwx\"},\"agentProfile\":{\"subnetId\":\"v\",\"vmSize\":\"jkbegibtnmxiebww\"},\"fqdn\":\"oayqc\",\"kubernetesVersion\":\"rtzju\",\"portalFqdn\":\"wyzmhtxon\"}},\"eTag\":\"ts\",\"identity\":{\"principalId\":\"65620d2e-ee7e-4495-96b8-eae86e5e34dd\",\"tenantId\":\"913b5639-5f19-45ad-8f1b-055e411c8598\",\"type\":\"None\",\"userAssignedIdentities\":{\"p\":{\"principalId\":\"8c8c964c-88f1-4858-a093-8cd04594ff46\",\"clientId\":\"fe03f9f0-c184-4723-8857-f4b4f39e3b6f\"},\"nftguvriuhpr\":{\"principalId\":\"0bffe560-81b8-4b1b-b785-3468e85107cb\",\"clientId\":\"89710c0a-2153-4106-8c8a-d9e7b6764584\"},\"yvxqtayriwwroy\":{\"principalId\":\"63fcb7cc-004e-4898-84f8-935f5d60187f\",\"clientId\":\"9c4cb0d1-0c2d-412c-8dc9-b7b494f09d7f\"},\"xrmcqibycnojvk\":{\"principalId\":\"900dc570-cabd-4dba-b8d4-e8681b3a80a2\",\"clientId\":\"3109917e-ec88-4f77-b488-6ff8b69a1a75\"}}},\"location\":\"e\",\"tags\":{\"apj\":\"gzva\",\"zlmwlxkvugfhz\":\"zhpvgqzcjrvxd\",\"hnnpr\":\"vawjvzunlu\",\"ultskzbbtdz\":\"xipeilpjzuaejx\"},\"id\":\"mv\",\"name\":\"ekg\",\"type\":\"wozuhkf\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerServiceFleetManager manager = ContainerServiceFleetManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Fleet response = manager.fleets()
            .define("mqkrhahvljuahaqu")
            .withRegion("uecivyhz")
            .withExistingResourceGroup("eemaofmxagkvtme")
            .withTags(mapOf("ytdxwit", "ojgjrwjueiotwmc", "hniskxfbkpyc", "nrjawgqwg"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("wpucwwfvovbv", new UserAssignedIdentity())))
            .withHubProfile(new FleetHubProfile().withDnsPrefix("ualaexqpvfadmw")
                .withApiServerAccessProfile(new ApiServerAccessProfile().withEnablePrivateCluster(false)
                    .withEnableVnetIntegration(false)
                    .withSubnetId("pv"))
                .withAgentProfile(new AgentProfile().withSubnetId("zlfmisgwbnbbeld").withVmSize("k")))
            .withIfMatch("xujznbmpowu")
            .withIfNoneMatch("przqlveu")
            .create();

        Assertions.assertEquals("e", response.location());
        Assertions.assertEquals("gzva", response.tags().get("apj"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.identity().type());
        Assertions.assertEquals("khfxobbcswsrt", response.hubProfile().dnsPrefix());
        Assertions.assertEquals(true, response.hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals(true, response.hubProfile().apiServerAccessProfile().enableVnetIntegration());
        Assertions.assertEquals("pbewtghfgblcgwx", response.hubProfile().apiServerAccessProfile().subnetId());
        Assertions.assertEquals("v", response.hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("jkbegibtnmxiebww", response.hubProfile().agentProfile().vmSize());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
