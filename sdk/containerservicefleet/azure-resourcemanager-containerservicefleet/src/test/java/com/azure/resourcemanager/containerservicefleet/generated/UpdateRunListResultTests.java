// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerservicefleet.fluent.models.UpdateRunInner;
import com.azure.resourcemanager.containerservicefleet.models.ManagedClusterUpdate;
import com.azure.resourcemanager.containerservicefleet.models.ManagedClusterUpgradeSpec;
import com.azure.resourcemanager.containerservicefleet.models.ManagedClusterUpgradeType;
import com.azure.resourcemanager.containerservicefleet.models.NodeImageSelection;
import com.azure.resourcemanager.containerservicefleet.models.NodeImageSelectionType;
import com.azure.resourcemanager.containerservicefleet.models.UpdateRunListResult;
import com.azure.resourcemanager.containerservicefleet.models.UpdateRunStrategy;
import com.azure.resourcemanager.containerservicefleet.models.UpdateStage;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class UpdateRunListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UpdateRunListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"updateStrategyId\":\"mdwzjeiachboo\",\"strategy\":{\"stages\":[{\"name\":\"nrosfqpte\"},{\"name\":\"hzzvypyq\"}]},\"managedClusterUpdate\":{\"upgrade\":{\"type\":\"ControlPlaneOnly\",\"kubernetesVersion\":\"z\"},\"nodeImageSelection\":{\"type\":\"Consistent\"}},\"status\":{\"status\":{\"startTime\":\"2021-02-26T16:18Z\",\"completedTime\":\"2021-08-28T07:05:13Z\",\"state\":\"Stopping\"},\"stages\":[{}],\"nodeImageSelection\":{\"selectedNodeImageVersions\":[{}]}}},\"eTag\":\"crmnohjtckwhds\",\"id\":\"fiyipjxsqwpgrj\",\"name\":\"znorcj\",\"type\":\"vsnb\"}],\"nextLink\":\"qabnmoc\"}")
            .toObject(UpdateRunListResult.class);
        Assertions.assertEquals("mdwzjeiachboo", model.value().get(0).updateStrategyId());
        Assertions.assertEquals("nrosfqpte", model.value().get(0).strategy().stages().get(0).name());
        Assertions.assertEquals(ManagedClusterUpgradeType.CONTROL_PLANE_ONLY,
            model.value().get(0).managedClusterUpdate().upgrade().type());
        Assertions.assertEquals("z", model.value().get(0).managedClusterUpdate().upgrade().kubernetesVersion());
        Assertions.assertEquals(NodeImageSelectionType.CONSISTENT,
            model.value().get(0).managedClusterUpdate().nodeImageSelection().type());
        Assertions.assertEquals("qabnmoc", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UpdateRunListResult model = new UpdateRunListResult()
            .withValue(Arrays.asList(new UpdateRunInner().withUpdateStrategyId("mdwzjeiachboo")
                .withStrategy(new UpdateRunStrategy().withStages(
                    Arrays.asList(new UpdateStage().withName("nrosfqpte"), new UpdateStage().withName("hzzvypyq"))))
                .withManagedClusterUpdate(new ManagedClusterUpdate()
                    .withUpgrade(new ManagedClusterUpgradeSpec().withType(ManagedClusterUpgradeType.CONTROL_PLANE_ONLY)
                        .withKubernetesVersion("z"))
                    .withNodeImageSelection(new NodeImageSelection().withType(NodeImageSelectionType.CONSISTENT)))))
            .withNextLink("qabnmoc");
        model = BinaryData.fromObject(model).toObject(UpdateRunListResult.class);
        Assertions.assertEquals("mdwzjeiachboo", model.value().get(0).updateStrategyId());
        Assertions.assertEquals("nrosfqpte", model.value().get(0).strategy().stages().get(0).name());
        Assertions.assertEquals(ManagedClusterUpgradeType.CONTROL_PLANE_ONLY,
            model.value().get(0).managedClusterUpdate().upgrade().type());
        Assertions.assertEquals("z", model.value().get(0).managedClusterUpdate().upgrade().kubernetesVersion());
        Assertions.assertEquals(NodeImageSelectionType.CONSISTENT,
            model.value().get(0).managedClusterUpdate().nodeImageSelection().type());
        Assertions.assertEquals("qabnmoc", model.nextLink());
    }
}
