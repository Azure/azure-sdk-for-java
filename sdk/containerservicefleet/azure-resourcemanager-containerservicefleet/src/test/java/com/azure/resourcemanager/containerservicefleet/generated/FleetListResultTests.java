// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerservicefleet.fluent.models.FleetInner;
import com.azure.resourcemanager.containerservicefleet.models.AgentProfile;
import com.azure.resourcemanager.containerservicefleet.models.ApiServerAccessProfile;
import com.azure.resourcemanager.containerservicefleet.models.FleetHubProfile;
import com.azure.resourcemanager.containerservicefleet.models.FleetListResult;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentity;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.containerservicefleet.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FleetListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FleetListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"hubProfile\":{\"dnsPrefix\":\"xqhabi\",\"apiServerAccessProfile\":{\"enablePrivateCluster\":true},\"agentProfile\":{\"subnetId\":\"czbysc\",\"vmSize\":\"q\"},\"fqdn\":\"hiv\",\"kubernetesVersion\":\"n\",\"portalFqdn\":\"b\"}},\"eTag\":\"rkxvdum\",\"identity\":{\"principalId\":\"5572d0f4-4051-42f9-b466-e6e2d66e4c91\",\"tenantId\":\"f53609ed-09e0-45a9-91ae-6140d199138a\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"xgaudccs\":{\"principalId\":\"4c91f6cd-2119-4c24-9ad1-deb78daec639\",\"clientId\":\"9dadc282-ce7d-4f3f-a264-ffe4bdfbd20b\"},\"jcny\":{\"principalId\":\"e14c2186-4d87-46d0-b968-081016bf7044\",\"clientId\":\"2e2597a2-bc5b-4492-bc64-dd92ad62c5d5\"}}},\"location\":\"hkryhtn\",\"tags\":{\"okjye\":\"zw\",\"jnchgej\":\"kkvnipjox\",\"huxinpmqnj\":\"podmailzydehojwy\"},\"id\":\"qwixjspro\",\"name\":\"vcputegj\",\"type\":\"wmfdatscmdvpjhul\"}],\"nextLink\":\"uvm\"}")
            .toObject(FleetListResult.class);
        Assertions.assertEquals("hkryhtn", model.value().get(0).location());
        Assertions.assertEquals("zw", model.value().get(0).tags().get("okjye"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("xqhabi", model.value().get(0).hubProfile().dnsPrefix());
        Assertions.assertEquals(true,
            model.value().get(0).hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals("czbysc", model.value().get(0).hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("q", model.value().get(0).hubProfile().agentProfile().vmSize());
        Assertions.assertEquals("uvm", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FleetListResult model
            = new FleetListResult()
                .withValue(Arrays.asList(new FleetInner().withLocation("hkryhtn")
                    .withTags(mapOf("okjye", "zw", "jnchgej", "kkvnipjox", "huxinpmqnj", "podmailzydehojwy"))
                    .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                        .withUserAssignedIdentities(
                            mapOf("xgaudccs", new UserAssignedIdentity(), "jcny", new UserAssignedIdentity())))
                    .withHubProfile(new FleetHubProfile().withDnsPrefix("xqhabi")
                        .withApiServerAccessProfile(new ApiServerAccessProfile().withEnablePrivateCluster(true))
                        .withAgentProfile(new AgentProfile().withSubnetId("czbysc").withVmSize("q")))))
                .withNextLink("uvm");
        model = BinaryData.fromObject(model).toObject(FleetListResult.class);
        Assertions.assertEquals("hkryhtn", model.value().get(0).location());
        Assertions.assertEquals("zw", model.value().get(0).tags().get("okjye"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("xqhabi", model.value().get(0).hubProfile().dnsPrefix());
        Assertions.assertEquals(true,
            model.value().get(0).hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals("czbysc", model.value().get(0).hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("q", model.value().get(0).hubProfile().agentProfile().vmSize());
        Assertions.assertEquals("uvm", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
