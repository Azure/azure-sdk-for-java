// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerservicefleet.fluent.models.FleetInner;
import com.azure.resourcemanager.containerservicefleet.models.AgentProfile;
import com.azure.resourcemanager.containerservicefleet.models.ApiServerAccessProfile;
import com.azure.resourcemanager.containerservicefleet.models.FleetHubProfile;
import com.azure.resourcemanager.containerservicefleet.models.FleetListResult;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentity;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.containerservicefleet.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FleetListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FleetListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"hubProfile\":{\"dnsPrefix\":\"xqhabi\",\"apiServerAccessProfile\":{\"enablePrivateCluster\":true,\"enableVnetIntegration\":false,\"subnetId\":\"zb\"},\"agentProfile\":{\"subnetId\":\"npqxuh\",\"vmSize\":\"y\"},\"fqdn\":\"iwbybrkxvdumjg\",\"kubernetesVersion\":\"fwvuk\",\"portalFqdn\":\"audccsnhs\"}},\"eTag\":\"nyejhkryhtnap\",\"identity\":{\"principalId\":\"9129709b-b1c6-4d07-8aed-9118fbbd221e\",\"tenantId\":\"f900dab4-8d8c-4265-8181-bde62eb3e9c1\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"mkkvnip\":{\"principalId\":\"8d8d28f4-cb24-4154-910a-e49e8c25945a\",\"clientId\":\"13a0dec1-d80d-4237-b503-5ffc5f429ee2\"}}},\"location\":\"xzjnchgejs\",\"tags\":{\"ahuxinpm\":\"mailzydehojw\",\"vcputegj\":\"njaqwixjspro\",\"uuvmkjozkrwfnd\":\"wmfdatscmdvpjhul\",\"vwryoqpso\":\"odjpslwejd\"},\"id\":\"cctazakljlahbc\",\"name\":\"yffdfdos\",\"type\":\"gexpaojakhmsbz\"}],\"nextLink\":\"crzevdphlx\"}")
            .toObject(FleetListResult.class);
        Assertions.assertEquals("xzjnchgejs", model.value().get(0).location());
        Assertions.assertEquals("mailzydehojw", model.value().get(0).tags().get("ahuxinpm"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("xqhabi", model.value().get(0).hubProfile().dnsPrefix());
        Assertions.assertEquals(true,
            model.value().get(0).hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals(false,
            model.value().get(0).hubProfile().apiServerAccessProfile().enableVnetIntegration());
        Assertions.assertEquals("zb", model.value().get(0).hubProfile().apiServerAccessProfile().subnetId());
        Assertions.assertEquals("npqxuh", model.value().get(0).hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("y", model.value().get(0).hubProfile().agentProfile().vmSize());
        Assertions.assertEquals("crzevdphlx", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FleetListResult model = new FleetListResult()
            .withValue(Arrays.asList(new FleetInner().withLocation("xzjnchgejs")
                .withTags(mapOf("ahuxinpm", "mailzydehojw", "vcputegj", "njaqwixjspro", "uuvmkjozkrwfnd",
                    "wmfdatscmdvpjhul", "vwryoqpso", "odjpslwejd"))
                .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("mkkvnip", new UserAssignedIdentity())))
                .withHubProfile(new FleetHubProfile().withDnsPrefix("xqhabi")
                    .withApiServerAccessProfile(new ApiServerAccessProfile().withEnablePrivateCluster(true)
                        .withEnableVnetIntegration(false)
                        .withSubnetId("zb"))
                    .withAgentProfile(new AgentProfile().withSubnetId("npqxuh").withVmSize("y")))))
            .withNextLink("crzevdphlx");
        model = BinaryData.fromObject(model).toObject(FleetListResult.class);
        Assertions.assertEquals("xzjnchgejs", model.value().get(0).location());
        Assertions.assertEquals("mailzydehojw", model.value().get(0).tags().get("ahuxinpm"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("xqhabi", model.value().get(0).hubProfile().dnsPrefix());
        Assertions.assertEquals(true,
            model.value().get(0).hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals(false,
            model.value().get(0).hubProfile().apiServerAccessProfile().enableVnetIntegration());
        Assertions.assertEquals("zb", model.value().get(0).hubProfile().apiServerAccessProfile().subnetId());
        Assertions.assertEquals("npqxuh", model.value().get(0).hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("y", model.value().get(0).hubProfile().agentProfile().vmSize());
        Assertions.assertEquals("crzevdphlx", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
