// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerservicefleet.fluent.models.FleetInner;
import com.azure.resourcemanager.containerservicefleet.models.AgentProfile;
import com.azure.resourcemanager.containerservicefleet.models.ApiServerAccessProfile;
import com.azure.resourcemanager.containerservicefleet.models.FleetHubProfile;
import com.azure.resourcemanager.containerservicefleet.models.FleetListResult;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentity;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.containerservicefleet.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FleetListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FleetListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"hubProfile\":{\"dnsPrefix\":\"xqhabi\",\"apiServerAccessProfile\":{\"enablePrivateCluster\":true,\"enableVnetIntegration\":false,\"subnetId\":\"zb\"},\"agentProfile\":{\"subnetId\":\"npqxuh\"},\"fqdn\":\"y\",\"kubernetesVersion\":\"iwbybrkxvdumjg\"}},\"eTag\":\"fwvuk\",\"identity\":{\"principalId\":\"471847e0-2afe-45af-aa02-e1021d2bbaae\",\"tenantId\":\"1d8e2610-6dbb-47db-a3f8-88ccfe000d8d\",\"type\":\"None\",\"userAssignedIdentities\":{\"h\":{\"principalId\":\"586f0898-b491-44c0-83ca-871c104bbe31\",\"clientId\":\"1e10f5d7-b503-4d5b-b0cd-8953571b34ff\"}}},\"location\":\"cnyejhkryhtnapcz\",\"tags\":{\"ni\":\"kjyemkk\",\"ilzyd\":\"joxzjnchgejspodm\"},\"id\":\"h\",\"name\":\"jwyahuxinpmqnja\",\"type\":\"wixjsprozvcp\"}],\"nextLink\":\"eg\"}")
                .toObject(FleetListResult.class);
        Assertions.assertEquals("cnyejhkryhtnapcz", model.value().get(0).location());
        Assertions.assertEquals("kjyemkk", model.value().get(0).tags().get("ni"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("xqhabi", model.value().get(0).hubProfile().dnsPrefix());
        Assertions
            .assertEquals(true, model.value().get(0).hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions
            .assertEquals(false, model.value().get(0).hubProfile().apiServerAccessProfile().enableVnetIntegration());
        Assertions.assertEquals("zb", model.value().get(0).hubProfile().apiServerAccessProfile().subnetId());
        Assertions.assertEquals("npqxuh", model.value().get(0).hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("eg", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FleetListResult model =
            new FleetListResult()
                .withValue(
                    Arrays
                        .asList(
                            new FleetInner()
                                .withLocation("cnyejhkryhtnapcz")
                                .withTags(mapOf("ni", "kjyemkk", "ilzyd", "joxzjnchgejspodm"))
                                .withIdentity(
                                    new ManagedServiceIdentity()
                                        .withType(ManagedServiceIdentityType.NONE)
                                        .withUserAssignedIdentities(mapOf("h", new UserAssignedIdentity())))
                                .withHubProfile(
                                    new FleetHubProfile()
                                        .withDnsPrefix("xqhabi")
                                        .withApiServerAccessProfile(
                                            new ApiServerAccessProfile()
                                                .withEnablePrivateCluster(true)
                                                .withEnableVnetIntegration(false)
                                                .withSubnetId("zb"))
                                        .withAgentProfile(new AgentProfile().withSubnetId("npqxuh")))))
                .withNextLink("eg");
        model = BinaryData.fromObject(model).toObject(FleetListResult.class);
        Assertions.assertEquals("cnyejhkryhtnapcz", model.value().get(0).location());
        Assertions.assertEquals("kjyemkk", model.value().get(0).tags().get("ni"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("xqhabi", model.value().get(0).hubProfile().dnsPrefix());
        Assertions
            .assertEquals(true, model.value().get(0).hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions
            .assertEquals(false, model.value().get(0).hubProfile().apiServerAccessProfile().enableVnetIntegration());
        Assertions.assertEquals("zb", model.value().get(0).hubProfile().apiServerAccessProfile().subnetId());
        Assertions.assertEquals("npqxuh", model.value().get(0).hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("eg", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
