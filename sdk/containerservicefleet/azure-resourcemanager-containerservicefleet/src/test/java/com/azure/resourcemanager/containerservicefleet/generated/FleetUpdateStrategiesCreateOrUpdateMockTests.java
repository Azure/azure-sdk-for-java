// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager;
import com.azure.resourcemanager.containerservicefleet.models.FleetUpdateStrategy;
import com.azure.resourcemanager.containerservicefleet.models.UpdateGroup;
import com.azure.resourcemanager.containerservicefleet.models.UpdateRunStrategy;
import com.azure.resourcemanager.containerservicefleet.models.UpdateStage;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class FleetUpdateStrategiesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"strategy\":{\"stages\":[{\"name\":\"y\",\"groups\":[{\"name\":\"wlmdjrkv\"},{\"name\":\"g\"}],\"afterStageWaitInSeconds\":1410181750},{\"name\":\"vpdbodaciz\",\"groups\":[{\"name\":\"lhkrribdeibqipqk\"}],\"afterStageWaitInSeconds\":1234217414},{\"name\":\"xndzwm\",\"groups\":[{\"name\":\"fajpjorwk\"},{\"name\":\"nyhgbijtji\"}],\"afterStageWaitInSeconds\":2036493170},{\"name\":\"zs\",\"groups\":[{\"name\":\"ibsystawf\"},{\"name\":\"djpvkvpbjxbkz\"},{\"name\":\"zkdvncja\"},{\"name\":\"udurgkakmokz\"}],\"afterStageWaitInSeconds\":523614486}]}},\"eTag\":\"lffhmouwqlg\",\"id\":\"fzeeyebizik\",\"name\":\"yuhqlbjbsybbqwrv\",\"type\":\"ldgmfpgvmpip\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ContainerServiceFleetManager manager =
            ContainerServiceFleetManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        FleetUpdateStrategy response =
            manager
                .fleetUpdateStrategies()
                .define("bwemhairs")
                .withExistingFleet("kaivwit", "scywuggwoluhc")
                .withStrategy(
                    new UpdateRunStrategy()
                        .withStages(
                            Arrays
                                .asList(
                                    new UpdateStage()
                                        .withName("wmsweypqwd")
                                        .withGroups(
                                            Arrays
                                                .asList(
                                                    new UpdateGroup().withName("icccn"),
                                                    new UpdateGroup().withName("qhuexm"),
                                                    new UpdateGroup().withName("ttlstvlzywemhz")))
                                        .withAfterStageWaitInSeconds(1311146203),
                                    new UpdateStage()
                                        .withName("sdtclusiypbs")
                                        .withGroups(
                                            Arrays
                                                .asList(
                                                    new UpdateGroup().withName("tg"), new UpdateGroup().withName("sl")))
                                        .withAfterStageWaitInSeconds(1007983036),
                                    new UpdateStage()
                                        .withName("dcygqukyhejhz")
                                        .withGroups(
                                            Arrays
                                                .asList(
                                                    new UpdateGroup().withName("gfpelolppvksrpqv"),
                                                    new UpdateGroup().withName("jzraehtwdwrf"),
                                                    new UpdateGroup().withName("swibyr")))
                                        .withAfterStageWaitInSeconds(66676019))))
                .withIfMatch("cxnavv")
                .withIfNoneMatch("xqi")
                .create();

        Assertions.assertEquals("y", response.strategy().stages().get(0).name());
        Assertions.assertEquals("wlmdjrkv", response.strategy().stages().get(0).groups().get(0).name());
        Assertions.assertEquals(1410181750, response.strategy().stages().get(0).afterStageWaitInSeconds());
    }
}
