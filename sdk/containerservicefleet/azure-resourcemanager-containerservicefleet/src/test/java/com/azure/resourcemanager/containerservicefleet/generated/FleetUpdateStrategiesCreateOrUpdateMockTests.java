// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager;
import com.azure.resourcemanager.containerservicefleet.models.FleetUpdateStrategy;
import com.azure.resourcemanager.containerservicefleet.models.UpdateGroup;
import com.azure.resourcemanager.containerservicefleet.models.UpdateRunStrategy;
import com.azure.resourcemanager.containerservicefleet.models.UpdateStage;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class FleetUpdateStrategiesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"strategy\":{\"stages\":[{\"name\":\"wzrmuh\",\"groups\":[{\"name\":\"cqdpsqxqvpsvuoym\"},{\"name\":\"ccelve\"}],\"afterStageWaitInSeconds\":808786975},{\"name\":\"pqlmfe\",\"groups\":[{\"name\":\"rqwky\"},{\"name\":\"kobopgxed\"},{\"name\":\"owepbqpcrfkb\"},{\"name\":\"ccsnjvcdwxlpq\"}],\"afterStageWaitInSeconds\":1838635209}]}},\"eTag\":\"nkhtjsyingw\",\"id\":\"atmtdhtmdvy\",\"name\":\"gikdgsz\",\"type\":\"w\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        ContainerServiceFleetManager manager = ContainerServiceFleetManager.configure().withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        FleetUpdateStrategy response
            = manager.fleetUpdateStrategies().define("jnalghf").withExistingFleet("bgofeljag", "qmqhldvriii")
                .withStrategy(new UpdateRunStrategy().withStages(Arrays.asList(
                    new UpdateStage().withName("ex")
                        .withGroups(Arrays.asList(new UpdateGroup().withName("ueluqhhahhxvrhmz"),
                            new UpdateGroup().withName("wpjgwws"), new UpdateGroup().withName("ughftqsx"),
                            new UpdateGroup().withName("qxujxukndxd")))
                        .withAfterStageWaitInSeconds(1490533084),
                    new UpdateStage().withName("jguufzdm")
                        .withGroups(Arrays.asList(new UpdateGroup().withName("tfih"),
                            new UpdateGroup().withName("hbotzingamvppho"), new UpdateGroup().withName("zqzudph"),
                            new UpdateGroup().withName("amvdkfwynwcvtbv")))
                        .withAfterStageWaitInSeconds(550696096))))
                .withIfMatch("hwyg").withIfNoneMatch("lvdnkfx").create();

        Assertions.assertEquals("wzrmuh", response.strategy().stages().get(0).name());
        Assertions.assertEquals("cqdpsqxqvpsvuoym", response.strategy().stages().get(0).groups().get(0).name());
        Assertions.assertEquals(808786975, response.strategy().stages().get(0).afterStageWaitInSeconds());
    }
}
