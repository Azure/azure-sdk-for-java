// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerservicefleet.fluent.models.UpdateRunProperties;
import com.azure.resourcemanager.containerservicefleet.models.ManagedClusterUpdate;
import com.azure.resourcemanager.containerservicefleet.models.ManagedClusterUpgradeSpec;
import com.azure.resourcemanager.containerservicefleet.models.ManagedClusterUpgradeType;
import com.azure.resourcemanager.containerservicefleet.models.NodeImageSelection;
import com.azure.resourcemanager.containerservicefleet.models.NodeImageSelectionType;
import com.azure.resourcemanager.containerservicefleet.models.UpdateGroup;
import com.azure.resourcemanager.containerservicefleet.models.UpdateRunStrategy;
import com.azure.resourcemanager.containerservicefleet.models.UpdateStage;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class UpdateRunPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UpdateRunProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Canceled\",\"updateStrategyId\":\"qeojnxqbzvddntw\",\"strategy\":{\"stages\":[{\"name\":\"icbtwnpzao\",\"groups\":[{\"name\":\"hrhcffcyddglmjth\"},{\"name\":\"qkwpyeicxmqc\"},{\"name\":\"wqvhkhixuigdt\"},{\"name\":\"pbobjo\"}],\"afterStageWaitInSeconds\":10300487}]},\"managedClusterUpdate\":{\"upgrade\":{\"type\":\"Full\",\"kubernetesVersion\":\"u\"},\"nodeImageSelection\":{\"type\":\"Latest\"}},\"status\":{\"status\":{\"startTime\":\"2020-12-30T21:59:13Z\",\"completedTime\":\"2021-02-11T14:54:06Z\",\"state\":\"Stopping\"},\"stages\":[{\"status\":{\"startTime\":\"2021-04-16T13:10:39Z\",\"completedTime\":\"2021-08-13T02:24:54Z\",\"state\":\"Skipped\"},\"name\":\"tutqxlngxlefgug\",\"groups\":[{\"status\":{},\"name\":\"dqmidtt\",\"members\":[{},{}]}],\"afterStageWaitStatus\":{\"status\":{\"startTime\":\"2021-06-26T08:11:35Z\",\"completedTime\":\"2021-12-03T05:38:56Z\",\"state\":\"Stopped\"},\"waitDurationInSeconds\":1338183758}},{\"status\":{\"startTime\":\"2021-05-29T13:44:30Z\",\"completedTime\":\"2021-09-28T08:30:32Z\",\"state\":\"Running\"},\"name\":\"skanyk\",\"groups\":[{\"status\":{},\"name\":\"iywgqywgndrvynh\",\"members\":[{},{},{}]},{\"status\":{},\"name\":\"rcgyn\",\"members\":[{},{},{},{}]},{\"status\":{},\"name\":\"cfvmmco\",\"members\":[{},{},{}]},{\"status\":{},\"name\":\"zevgb\",\"members\":[{},{},{},{}]}],\"afterStageWaitStatus\":{\"status\":{\"startTime\":\"2021-06-25T22:17:23Z\",\"completedTime\":\"2021-02-17T22:01:44Z\",\"state\":\"Stopping\"},\"waitDurationInSeconds\":61418624}},{\"status\":{\"startTime\":\"2021-08-01T19:05:37Z\",\"completedTime\":\"2021-08-04T02:49:11Z\",\"state\":\"Completed\"},\"name\":\"fnba\",\"groups\":[{\"status\":{},\"name\":\"l\",\"members\":[{}]},{\"status\":{},\"name\":\"qgtz\",\"members\":[{},{},{}]}],\"afterStageWaitStatus\":{\"status\":{\"startTime\":\"2021-09-22T23:33:27Z\",\"completedTime\":\"2021-03-31T09:09:52Z\",\"state\":\"Running\"},\"waitDurationInSeconds\":1251275830}},{\"status\":{\"startTime\":\"2021-11-06T05:18:11Z\",\"completedTime\":\"2021-01-01T22:31:01Z\",\"state\":\"Skipped\"},\"name\":\"snjampmng\",\"groups\":[{\"status\":{},\"name\":\"aqw\",\"members\":[{},{},{},{}]},{\"status\":{},\"name\":\"bonqvpkvlrxnjeas\",\"members\":[{},{},{}]}],\"afterStageWaitStatus\":{\"status\":{\"startTime\":\"2021-02-19T14:56:30Z\",\"completedTime\":\"2021-11-21T02:07:23Z\",\"state\":\"Running\"},\"waitDurationInSeconds\":674171704}}],\"nodeImageSelection\":{\"selectedNodeImageVersions\":[{\"version\":\"dlwtgrhpdj\"},{\"version\":\"umasxazjpq\"},{\"version\":\"gual\"},{\"version\":\"xxhejjzzvd\"}]}}}")
            .toObject(UpdateRunProperties.class);
        Assertions.assertEquals("qeojnxqbzvddntw", model.updateStrategyId());
        Assertions.assertEquals("icbtwnpzao", model.strategy().stages().get(0).name());
        Assertions.assertEquals("hrhcffcyddglmjth", model.strategy().stages().get(0).groups().get(0).name());
        Assertions.assertEquals(10300487, model.strategy().stages().get(0).afterStageWaitInSeconds());
        Assertions.assertEquals(ManagedClusterUpgradeType.FULL, model.managedClusterUpdate().upgrade().type());
        Assertions.assertEquals("u", model.managedClusterUpdate().upgrade().kubernetesVersion());
        Assertions.assertEquals(NodeImageSelectionType.LATEST,
            model.managedClusterUpdate().nodeImageSelection().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UpdateRunProperties model = new UpdateRunProperties().withUpdateStrategyId("qeojnxqbzvddntw")
            .withStrategy(new UpdateRunStrategy().withStages(Arrays.asList(new UpdateStage().withName("icbtwnpzao")
                .withGroups(Arrays.asList(new UpdateGroup().withName("hrhcffcyddglmjth"),
                    new UpdateGroup().withName("qkwpyeicxmqc"), new UpdateGroup().withName("wqvhkhixuigdt"),
                    new UpdateGroup().withName("pbobjo")))
                .withAfterStageWaitInSeconds(10300487))))
            .withManagedClusterUpdate(new ManagedClusterUpdate()
                .withUpgrade(
                    new ManagedClusterUpgradeSpec().withType(ManagedClusterUpgradeType.FULL).withKubernetesVersion("u"))
                .withNodeImageSelection(new NodeImageSelection().withType(NodeImageSelectionType.LATEST)));
        model = BinaryData.fromObject(model).toObject(UpdateRunProperties.class);
        Assertions.assertEquals("qeojnxqbzvddntw", model.updateStrategyId());
        Assertions.assertEquals("icbtwnpzao", model.strategy().stages().get(0).name());
        Assertions.assertEquals("hrhcffcyddglmjth", model.strategy().stages().get(0).groups().get(0).name());
        Assertions.assertEquals(10300487, model.strategy().stages().get(0).afterStageWaitInSeconds());
        Assertions.assertEquals(ManagedClusterUpgradeType.FULL, model.managedClusterUpdate().upgrade().type());
        Assertions.assertEquals("u", model.managedClusterUpdate().upgrade().kubernetesVersion());
        Assertions.assertEquals(NodeImageSelectionType.LATEST,
            model.managedClusterUpdate().nodeImageSelection().type());
    }
}
