// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerservicefleet.models.FleetPatch;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentity;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.containerservicefleet.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FleetPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FleetPatch model = BinaryData.fromString(
            "{\"tags\":{\"tqxhocdgeab\":\"zzd\"},\"identity\":{\"principalId\":\"ce9d0d6a-bac0-4957-a4d3-28baf1614f20\",\"tenantId\":\"bf3a9a51-d18b-43d4-90b3-d38c845f67d1\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"dvkaozw\":{\"principalId\":\"35710f40-3154-4491-963b-44eb59c44673\",\"clientId\":\"df43951a-7a24-40c6-92d4-e81fcb7c4a8c\"},\"tyhxhurokft\":{\"principalId\":\"18adfa61-d3e0-4aae-9ef4-2bf3188df3d3\",\"clientId\":\"ac68bd6e-9ce2-4777-a101-1597b87eeb3c\"},\"lniwpwcukjfkgiaw\":{\"principalId\":\"b1c96eeb-dde6-45d9-b7f4-5d324907242d\",\"clientId\":\"d57115cf-0d3a-44f5-ada6-23dad4d5d098\"},\"ryplwckbasyypn\":{\"principalId\":\"5270268f-36e6-4860-acc5-9502d5209318\",\"clientId\":\"8c8989e9-f56d-48ab-a785-68471f11cb65\"}}}}")
            .toObject(FleetPatch.class);
        Assertions.assertEquals("zzd", model.tags().get("tqxhocdgeab"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FleetPatch model = new FleetPatch().withTags(mapOf("tqxhocdgeab", "zzd"))
            .withIdentity(
                new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("dvkaozw", new UserAssignedIdentity(), "tyhxhurokft",
                        new UserAssignedIdentity(), "lniwpwcukjfkgiaw", new UserAssignedIdentity(), "ryplwckbasyypn",
                        new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(FleetPatch.class);
        Assertions.assertEquals("zzd", model.tags().get("tqxhocdgeab"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
