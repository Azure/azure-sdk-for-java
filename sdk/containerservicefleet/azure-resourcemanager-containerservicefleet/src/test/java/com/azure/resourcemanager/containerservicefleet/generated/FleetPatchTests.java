// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerservicefleet.models.FleetPatch;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentity;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.containerservicefleet.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FleetPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FleetPatch model = BinaryData.fromString(
            "{\"tags\":{\"tqxhocdgeab\":\"zzd\"},\"identity\":{\"principalId\":\"089da385-1127-4d04-89ec-3573dd83632e\",\"tenantId\":\"3b8ce1c7-f7d6-44f1-bd4f-b40333d2ca6b\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"dvkaozw\":{\"principalId\":\"80570e0c-a0e5-4cbd-afcb-f448c6b0d9a5\",\"clientId\":\"334e6874-bac7-4ba1-95e9-ca05472bb669\"},\"tyhxhurokft\":{\"principalId\":\"bd2e7d56-f5fa-4169-8306-383b47c138c6\",\"clientId\":\"abe06637-aa3f-4e18-8e25-d754bc41462a\"},\"lniwpwcukjfkgiaw\":{\"principalId\":\"50b617b5-f9e7-4466-9b12-64276b4876c6\",\"clientId\":\"db27e9c2-688e-4ab3-ad52-b3473129e2e6\"},\"ryplwckbasyypn\":{\"principalId\":\"fd7e524e-eeb7-4edf-96ae-7439ce56e137\",\"clientId\":\"1cd7b1a5-783f-4dce-acca-fb57871b6fd5\"}}}}")
            .toObject(FleetPatch.class);
        Assertions.assertEquals("zzd", model.tags().get("tqxhocdgeab"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FleetPatch model = new FleetPatch().withTags(mapOf("tqxhocdgeab", "zzd"))
            .withIdentity(
                new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("dvkaozw", new UserAssignedIdentity(), "tyhxhurokft",
                        new UserAssignedIdentity(), "lniwpwcukjfkgiaw", new UserAssignedIdentity(), "ryplwckbasyypn",
                        new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(FleetPatch.class);
        Assertions.assertEquals("zzd", model.tags().get("tqxhocdgeab"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
