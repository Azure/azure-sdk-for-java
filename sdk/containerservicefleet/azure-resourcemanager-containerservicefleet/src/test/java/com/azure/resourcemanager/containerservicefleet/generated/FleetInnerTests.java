// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerservicefleet.fluent.models.FleetInner;
import com.azure.resourcemanager.containerservicefleet.models.AgentProfile;
import com.azure.resourcemanager.containerservicefleet.models.ApiServerAccessProfile;
import com.azure.resourcemanager.containerservicefleet.models.FleetHubProfile;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentity;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.containerservicefleet.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FleetInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FleetInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"hubProfile\":{\"dnsPrefix\":\"zvgnwzs\",\"apiServerAccessProfile\":{\"enablePrivateCluster\":true},\"agentProfile\":{\"subnetId\":\"fcyzkohdbihanufh\",\"vmSize\":\"bj\"},\"fqdn\":\"a\",\"kubernetesVersion\":\"th\",\"portalFqdn\":\"hab\"}},\"eTag\":\"pikxwczbyscnpqxu\",\"identity\":{\"principalId\":\"y\",\"tenantId\":\"iwbybrkxvdumjg\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"napczwlokjy\":{\"clientId\":\"ukxgaud\",\"principalId\":\"snhsjcnyejhkryh\"},\"podmailzydehojwy\":{\"clientId\":\"kkvnipjox\",\"principalId\":\"nchgej\"}}},\"location\":\"uxinpmqnjaq\",\"tags\":{\"jvwmfda\":\"jsprozvcpute\"},\"id\":\"scmdvpjhulsuu\",\"name\":\"mkjozkrwf\",\"type\":\"dio\"}")
            .toObject(FleetInner.class);
        Assertions.assertEquals("uxinpmqnjaq", model.location());
        Assertions.assertEquals("jsprozvcpute", model.tags().get("jvwmfda"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("zvgnwzs", model.hubProfile().dnsPrefix());
        Assertions.assertEquals(true, model.hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals("fcyzkohdbihanufh", model.hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("bj", model.hubProfile().agentProfile().vmSize());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FleetInner model
            = new FleetInner().withLocation("uxinpmqnjaq")
                .withTags(mapOf("jvwmfda", "jsprozvcpute"))
                .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("napczwlokjy", new UserAssignedIdentity(), "podmailzydehojwy",
                        new UserAssignedIdentity())))
                .withHubProfile(new FleetHubProfile().withDnsPrefix("zvgnwzs")
                    .withApiServerAccessProfile(new ApiServerAccessProfile().withEnablePrivateCluster(true))
                    .withAgentProfile(new AgentProfile().withSubnetId("fcyzkohdbihanufh").withVmSize("bj")));
        model = BinaryData.fromObject(model).toObject(FleetInner.class);
        Assertions.assertEquals("uxinpmqnjaq", model.location());
        Assertions.assertEquals("jsprozvcpute", model.tags().get("jvwmfda"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("zvgnwzs", model.hubProfile().dnsPrefix());
        Assertions.assertEquals(true, model.hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals("fcyzkohdbihanufh", model.hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("bj", model.hubProfile().agentProfile().vmSize());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
