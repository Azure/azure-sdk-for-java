// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerservicefleet.fluent.models.FleetInner;
import com.azure.resourcemanager.containerservicefleet.models.AgentProfile;
import com.azure.resourcemanager.containerservicefleet.models.ApiServerAccessProfile;
import com.azure.resourcemanager.containerservicefleet.models.FleetHubProfile;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentity;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.containerservicefleet.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FleetInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FleetInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Deleting\",\"hubProfile\":{\"dnsPrefix\":\"trg\",\"apiServerAccessProfile\":{\"enablePrivateCluster\":true,\"enableVnetIntegration\":true,\"subnetId\":\"s\"},\"agentProfile\":{\"subnetId\":\"gvfcj\",\"vmSize\":\"zoxxjtf\"},\"fqdn\":\"luwfzitonpeqfpjk\",\"kubernetesVersion\":\"xofpdvhpfxxypi\",\"portalFqdn\":\"nmayhuybb\"}},\"eTag\":\"odepoogin\",\"identity\":{\"principalId\":\"dd619599-50b1-4599-9951-135b85637760\",\"tenantId\":\"1ada13d8-7087-4da7-886b-db9c2b31c446\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"narxzxtheotus\":{\"principalId\":\"32ba097b-28a1-456d-8920-8674622b1e70\",\"clientId\":\"e8d5c93a-eed5-4eb4-ad37-622bee64954c\"},\"evcciqihnhun\":{\"principalId\":\"8f1202b9-2a23-45de-99c7-6381a5cb66b6\",\"clientId\":\"dfbd6b86-be67-4b6f-bf4c-e0d33456b735\"},\"jzrnf\":{\"principalId\":\"2ad2cb6c-ce59-4a30-a4a8-a2260b32dd52\",\"clientId\":\"d8b2105e-60f1-42cc-9a18-844e946dc375\"},\"gispemvtzfkufubl\":{\"principalId\":\"f2714a3a-be33-4444-aba4-f6ef1e4aa7fb\",\"clientId\":\"be34a905-9022-450d-85aa-063e722e68ab\"}}},\"location\":\"fxqeof\",\"tags\":{\"msmjqulngsntn\":\"qjhqjbas\"},\"id\":\"ybkzgcwr\",\"name\":\"clxxwrljdo\",\"type\":\"skcqvkocrcjd\"}")
            .toObject(FleetInner.class);
        Assertions.assertEquals("fxqeof", model.location());
        Assertions.assertEquals("qjhqjbas", model.tags().get("msmjqulngsntn"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("trg", model.hubProfile().dnsPrefix());
        Assertions.assertEquals(true, model.hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals(true, model.hubProfile().apiServerAccessProfile().enableVnetIntegration());
        Assertions.assertEquals("s", model.hubProfile().apiServerAccessProfile().subnetId());
        Assertions.assertEquals("gvfcj", model.hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("zoxxjtf", model.hubProfile().agentProfile().vmSize());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FleetInner model
            = new FleetInner().withLocation("fxqeof").withTags(mapOf("msmjqulngsntn", "qjhqjbas"))
                .withIdentity(
                    new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                        .withUserAssignedIdentities(mapOf("narxzxtheotus", new UserAssignedIdentity(), "evcciqihnhun",
                            new UserAssignedIdentity(), "jzrnf", new UserAssignedIdentity(), "gispemvtzfkufubl",
                            new UserAssignedIdentity())))
                .withHubProfile(new FleetHubProfile().withDnsPrefix("trg")
                    .withApiServerAccessProfile(new ApiServerAccessProfile().withEnablePrivateCluster(true)
                        .withEnableVnetIntegration(true).withSubnetId("s"))
                    .withAgentProfile(new AgentProfile().withSubnetId("gvfcj").withVmSize("zoxxjtf")));
        model = BinaryData.fromObject(model).toObject(FleetInner.class);
        Assertions.assertEquals("fxqeof", model.location());
        Assertions.assertEquals("qjhqjbas", model.tags().get("msmjqulngsntn"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("trg", model.hubProfile().dnsPrefix());
        Assertions.assertEquals(true, model.hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals(true, model.hubProfile().apiServerAccessProfile().enableVnetIntegration());
        Assertions.assertEquals("s", model.hubProfile().apiServerAccessProfile().subnetId());
        Assertions.assertEquals("gvfcj", model.hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("zoxxjtf", model.hubProfile().agentProfile().vmSize());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
