// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerservicefleet.fluent.models.FleetInner;
import com.azure.resourcemanager.containerservicefleet.models.AgentProfile;
import com.azure.resourcemanager.containerservicefleet.models.ApiServerAccessProfile;
import com.azure.resourcemanager.containerservicefleet.models.FleetHubProfile;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentity;
import com.azure.resourcemanager.containerservicefleet.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.containerservicefleet.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FleetInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FleetInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Updating\",\"hubProfile\":{\"dnsPrefix\":\"wfndiodjpsl\",\"apiServerAccessProfile\":{\"enablePrivateCluster\":true},\"agentProfile\":{\"subnetId\":\"wryoqpsoacc\",\"vmSize\":\"zakljlahbc\"},\"fqdn\":\"ffdfdosygexpa\",\"kubernetesVersion\":\"akhmsbzjhcrz\",\"portalFqdn\":\"dphlxaolt\"}},\"eTag\":\"trg\",\"identity\":{\"principalId\":\"2713760c-5203-4dec-8fa6-a9e2e7a66569\",\"tenantId\":\"5fab710c-e167-4643-975b-429ed1aab776\",\"type\":\"None\",\"userAssignedIdentities\":{\"n\":{\"principalId\":\"32770469-62cb-4d09-b42d-56be22f1b631\",\"clientId\":\"54d21ac3-f0a9-44be-b0c2-2724707ca9da\"},\"f\":{\"principalId\":\"cd194e96-35d2-4934-ac40-9d939f79557a\",\"clientId\":\"633d4a7d-c356-4ba9-8249-ec2cd52fe0f6\"},\"wzo\":{\"principalId\":\"f96606b7-5e25-448a-907d-7d6d6253f31d\",\"clientId\":\"2d666a30-77ee-44af-86c0-13bed1d5cd10\"},\"tfell\":{\"principalId\":\"1a413611-a18f-4b79-a748-438f8c86c184\",\"clientId\":\"77608e5b-4531-43f3-9021-4c2628199a7b\"}}},\"location\":\"fziton\",\"tags\":{\"vhpfxxypininmay\":\"fpjkjlxofp\",\"oginuvamiheognar\":\"uybbkpodep\"},\"id\":\"zxtheotusivyevcc\",\"name\":\"qi\",\"type\":\"nhungbw\"}")
            .toObject(FleetInner.class);
        Assertions.assertEquals("fziton", model.location());
        Assertions.assertEquals("fpjkjlxofp", model.tags().get("vhpfxxypininmay"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("wfndiodjpsl", model.hubProfile().dnsPrefix());
        Assertions.assertEquals(true, model.hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals("wryoqpsoacc", model.hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("zakljlahbc", model.hubProfile().agentProfile().vmSize());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FleetInner model = new FleetInner().withLocation("fziton")
            .withTags(mapOf("vhpfxxypininmay", "fpjkjlxofp", "oginuvamiheognar", "uybbkpodep"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("n", new UserAssignedIdentity(), "f", new UserAssignedIdentity(),
                    "wzo", new UserAssignedIdentity(), "tfell", new UserAssignedIdentity())))
            .withHubProfile(new FleetHubProfile().withDnsPrefix("wfndiodjpsl")
                .withApiServerAccessProfile(new ApiServerAccessProfile().withEnablePrivateCluster(true))
                .withAgentProfile(new AgentProfile().withSubnetId("wryoqpsoacc").withVmSize("zakljlahbc")));
        model = BinaryData.fromObject(model).toObject(FleetInner.class);
        Assertions.assertEquals("fziton", model.location());
        Assertions.assertEquals("fpjkjlxofp", model.tags().get("vhpfxxypininmay"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("wfndiodjpsl", model.hubProfile().dnsPrefix());
        Assertions.assertEquals(true, model.hubProfile().apiServerAccessProfile().enablePrivateCluster());
        Assertions.assertEquals("wryoqpsoacc", model.hubProfile().agentProfile().subnetId());
        Assertions.assertEquals("zakljlahbc", model.hubProfile().agentProfile().vmSize());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
