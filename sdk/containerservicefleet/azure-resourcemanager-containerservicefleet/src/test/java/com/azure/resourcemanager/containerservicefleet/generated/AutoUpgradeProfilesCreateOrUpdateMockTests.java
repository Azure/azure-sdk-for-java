// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager;
import com.azure.resourcemanager.containerservicefleet.models.AutoUpgradeNodeImageSelection;
import com.azure.resourcemanager.containerservicefleet.models.AutoUpgradeNodeImageSelectionType;
import com.azure.resourcemanager.containerservicefleet.models.AutoUpgradeProfile;
import com.azure.resourcemanager.containerservicefleet.models.UpgradeChannel;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AutoUpgradeProfilesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"updateStrategyId\":\"oqmcbxvwvxyslq\",\"channel\":\"Rapid\",\"nodeImageSelection\":{\"type\":\"Consistent\"},\"disabled\":false},\"eTag\":\"lyt\",\"id\":\"lmpewwwfbkr\",\"name\":\"rn\",\"type\":\"vshqjohxcr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerServiceFleetManager manager = ContainerServiceFleetManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AutoUpgradeProfile response = manager.autoUpgradeProfiles()
            .define("izpost")
            .withExistingFleet("rhhuaopppcqeqx", "lzdahzxctobgbkdm")
            .withUpdateStrategyId("bunrmfqjhhk")
            .withChannel(UpgradeChannel.STABLE)
            .withNodeImageSelection(
                new AutoUpgradeNodeImageSelection().withType(AutoUpgradeNodeImageSelectionType.CONSISTENT))
            .withDisabled(true)
            .withIfMatch("dxxiv")
            .withIfNoneMatch("tvtc")
            .create();

        Assertions.assertEquals("oqmcbxvwvxyslq", response.updateStrategyId());
        Assertions.assertEquals(UpgradeChannel.RAPID, response.channel());
        Assertions.assertEquals(AutoUpgradeNodeImageSelectionType.CONSISTENT, response.nodeImageSelection().type());
        Assertions.assertEquals(false, response.disabled());
    }
}
