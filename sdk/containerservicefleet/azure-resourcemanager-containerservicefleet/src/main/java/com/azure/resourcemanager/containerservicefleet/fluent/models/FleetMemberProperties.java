// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerservicefleet.models.FleetMemberProvisioningState;
import java.io.IOException;

/**
 * A member of the Fleet. It contains a reference to an existing Kubernetes cluster on Azure.
 */
@Fluent
public final class FleetMemberProperties implements JsonSerializable<FleetMemberProperties> {
    /*
     * The ARM resource id of the cluster that joins the Fleet. Must be a valid Azure resource id. e.g.:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/
     * managedClusters/{clusterName}'.
     */
    private String clusterResourceId;

    /*
     * The group this member belongs to for multi-cluster update management.
     */
    private String group;

    /*
     * The status of the last operation.
     */
    private FleetMemberProvisioningState provisioningState;

    /**
     * Creates an instance of FleetMemberProperties class.
     */
    public FleetMemberProperties() {
    }

    /**
     * Get the clusterResourceId property: The ARM resource id of the cluster that joins the Fleet. Must be a valid
     * Azure resource id. e.g.:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{clusterName}'.
     * 
     * @return the clusterResourceId value.
     */
    public String clusterResourceId() {
        return this.clusterResourceId;
    }

    /**
     * Set the clusterResourceId property: The ARM resource id of the cluster that joins the Fleet. Must be a valid
     * Azure resource id. e.g.:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{clusterName}'.
     * 
     * @param clusterResourceId the clusterResourceId value to set.
     * @return the FleetMemberProperties object itself.
     */
    public FleetMemberProperties withClusterResourceId(String clusterResourceId) {
        this.clusterResourceId = clusterResourceId;
        return this;
    }

    /**
     * Get the group property: The group this member belongs to for multi-cluster update management.
     * 
     * @return the group value.
     */
    public String group() {
        return this.group;
    }

    /**
     * Set the group property: The group this member belongs to for multi-cluster update management.
     * 
     * @param group the group value to set.
     * @return the FleetMemberProperties object itself.
     */
    public FleetMemberProperties withGroup(String group) {
        this.group = group;
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public FleetMemberProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (clusterResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property clusterResourceId in model FleetMemberProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FleetMemberProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clusterResourceId", this.clusterResourceId);
        jsonWriter.writeStringField("group", this.group);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FleetMemberProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FleetMemberProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FleetMemberProperties.
     */
    public static FleetMemberProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FleetMemberProperties deserializedFleetMemberProperties = new FleetMemberProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clusterResourceId".equals(fieldName)) {
                    deserializedFleetMemberProperties.clusterResourceId = reader.getString();
                } else if ("group".equals(fieldName)) {
                    deserializedFleetMemberProperties.group = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedFleetMemberProperties.provisioningState
                        = FleetMemberProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFleetMemberProperties;
        });
    }
}
