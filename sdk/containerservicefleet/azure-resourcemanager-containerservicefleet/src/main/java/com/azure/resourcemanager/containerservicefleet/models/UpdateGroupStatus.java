// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The status of a UpdateGroup.
 */
@Immutable
public final class UpdateGroupStatus implements JsonSerializable<UpdateGroupStatus> {
    /*
     * The status of the UpdateGroup.
     */
    private UpdateStatus status;

    /*
     * The name of the UpdateGroup.
     */
    private String name;

    /*
     * The list of member this UpdateGroup updates.
     */
    private List<MemberUpdateStatus> members;

    /**
     * Creates an instance of UpdateGroupStatus class.
     */
    public UpdateGroupStatus() {
    }

    /**
     * Get the status property: The status of the UpdateGroup.
     * 
     * @return the status value.
     */
    public UpdateStatus status() {
        return this.status;
    }

    /**
     * Get the name property: The name of the UpdateGroup.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the members property: The list of member this UpdateGroup updates.
     * 
     * @return the members value.
     */
    public List<MemberUpdateStatus> members() {
        return this.members;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (status() != null) {
            status().validate();
        }
        if (members() != null) {
            members().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateGroupStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateGroupStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateGroupStatus.
     */
    public static UpdateGroupStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateGroupStatus deserializedUpdateGroupStatus = new UpdateGroupStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedUpdateGroupStatus.status = UpdateStatus.fromJson(reader);
                } else if ("name".equals(fieldName)) {
                    deserializedUpdateGroupStatus.name = reader.getString();
                } else if ("members".equals(fieldName)) {
                    List<MemberUpdateStatus> members
                        = reader.readArray(reader1 -> MemberUpdateStatus.fromJson(reader1));
                    deserializedUpdateGroupStatus.members = members;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateGroupStatus;
        });
    }
}
