// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The status for an operation or group of operations.
 */
@Immutable
public final class UpdateStatus implements JsonSerializable<UpdateStatus> {
    /*
     * The time the operation or group was started.
     */
    private OffsetDateTime startTime;

    /*
     * The time the operation or group was completed.
     */
    private OffsetDateTime completedTime;

    /*
     * The State of the operation or group.
     */
    private UpdateState state;

    /*
     * The error details when a failure is encountered.
     */
    private ManagementError error;

    /**
     * Creates an instance of UpdateStatus class.
     */
    public UpdateStatus() {
    }

    /**
     * Get the startTime property: The time the operation or group was started.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the completedTime property: The time the operation or group was completed.
     * 
     * @return the completedTime value.
     */
    public OffsetDateTime completedTime() {
        return this.completedTime;
    }

    /**
     * Get the state property: The State of the operation or group.
     * 
     * @return the state value.
     */
    public UpdateState state() {
        return this.state;
    }

    /**
     * Get the error property: The error details when a failure is encountered.
     * 
     * @return the error value.
     */
    public ManagementError error() {
        return this.error;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateStatus.
     */
    public static UpdateStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateStatus deserializedUpdateStatus = new UpdateStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startTime".equals(fieldName)) {
                    deserializedUpdateStatus.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("completedTime".equals(fieldName)) {
                    deserializedUpdateStatus.completedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("state".equals(fieldName)) {
                    deserializedUpdateStatus.state = UpdateState.fromString(reader.getString());
                } else if ("error".equals(fieldName)) {
                    deserializedUpdateStatus.error = ManagementError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateStatus;
        });
    }
}
