// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The status of the Gate, as represented in the Update Run.
 */
@Immutable
public final class UpdateRunGateStatus implements JsonSerializable<UpdateRunGateStatus> {
    /*
     * The human-readable display name of the Gate.
     */
    private String displayName;

    /*
     * The resource id of the Gate.
     */
    private String gateId;

    /*
     * The status of the Gate.
     */
    private UpdateStatus status;

    /**
     * Creates an instance of UpdateRunGateStatus class.
     */
    private UpdateRunGateStatus() {
    }

    /**
     * Get the displayName property: The human-readable display name of the Gate.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the gateId property: The resource id of the Gate.
     * 
     * @return the gateId value.
     */
    public String gateId() {
        return this.gateId;
    }

    /**
     * Get the status property: The status of the Gate.
     * 
     * @return the status value.
     */
    public UpdateStatus status() {
        return this.status;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (status() != null) {
            status().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateRunGateStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateRunGateStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateRunGateStatus.
     */
    public static UpdateRunGateStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateRunGateStatus deserializedUpdateRunGateStatus = new UpdateRunGateStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedUpdateRunGateStatus.displayName = reader.getString();
                } else if ("gateId".equals(fieldName)) {
                    deserializedUpdateRunGateStatus.gateId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedUpdateRunGateStatus.status = UpdateStatus.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateRunGateStatus;
        });
    }
}
