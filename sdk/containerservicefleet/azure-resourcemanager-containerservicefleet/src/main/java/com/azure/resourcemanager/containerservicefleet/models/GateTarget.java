// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The target that the Gate is controlling, e.g. an Update Run. Exactly one of the properties objects will be set.
 */
@Immutable
public final class GateTarget implements JsonSerializable<GateTarget> {
    /*
     * The resource id that the Gate is controlling the rollout of.
     */
    private String id;

    /*
     * The properties of the Update Run that the Gate is targeting.
     */
    private UpdateRunGateTargetProperties updateRunProperties;

    /**
     * Creates an instance of GateTarget class.
     */
    private GateTarget() {
    }

    /**
     * Get the id property: The resource id that the Gate is controlling the rollout of.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the updateRunProperties property: The properties of the Update Run that the Gate is targeting.
     * 
     * @return the updateRunProperties value.
     */
    public UpdateRunGateTargetProperties updateRunProperties() {
        return this.updateRunProperties;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (id() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property id in model GateTarget"));
        }
        if (updateRunProperties() != null) {
            updateRunProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GateTarget.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeJsonField("updateRunProperties", this.updateRunProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GateTarget from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GateTarget if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GateTarget.
     */
    public static GateTarget fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GateTarget deserializedGateTarget = new GateTarget();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedGateTarget.id = reader.getString();
                } else if ("updateRunProperties".equals(fieldName)) {
                    deserializedGateTarget.updateRunProperties = UpdateRunGateTargetProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGateTarget;
        });
    }
}
