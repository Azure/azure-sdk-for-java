// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerservicefleet.models.AutoUpgradeNodeImageSelection;
import com.azure.resourcemanager.containerservicefleet.models.AutoUpgradeProfileProvisioningState;
import com.azure.resourcemanager.containerservicefleet.models.AutoUpgradeProfileStatus;
import com.azure.resourcemanager.containerservicefleet.models.UpgradeChannel;
import java.io.IOException;

/**
 * The properties of the AutoUpgradeProfile.
 */
@Fluent
public final class AutoUpgradeProfileProperties implements JsonSerializable<AutoUpgradeProfileProperties> {
    /*
     * The provisioning state of the AutoUpgradeProfile resource.
     */
    private AutoUpgradeProfileProvisioningState provisioningState;

    /*
     * The resource id of the UpdateStrategy resource to reference. If not specified, the auto upgrade will run on all
     * clusters which are members of the fleet.
     */
    private String updateStrategyId;

    /*
     * Configures how auto-upgrade will be run.
     */
    private UpgradeChannel channel;

    /*
     * The node image upgrade to be applied to the target clusters in auto upgrade.
     */
    private AutoUpgradeNodeImageSelection nodeImageSelection;

    /*
     * If set to False: the auto upgrade has effect - target managed clusters will be upgraded on schedule.
     * If set to True: the auto upgrade has no effect - no upgrade will be run on the target managed clusters.
     * This is a boolean and not an enum because enabled/disabled are all available states of the auto upgrade profile.
     * By default, this is set to False.
     */
    private Boolean disabled;

    /*
     * The status of the auto upgrade profile.
     */
    private AutoUpgradeProfileStatus autoUpgradeProfileStatus;

    /*
     * This is the target Kubernetes version for auto-upgrade. The format must be `{major version}.{minor version}`. For
     * example, "1.30".
     * By default, this is empty.
     * If upgrade channel is set to TargetKubernetesVersion, this field must not be empty.
     * If upgrade channel is Rapid, Stable or NodeImage, this field must be empty.
     */
    private String targetKubernetesVersion;

    /*
     * If upgrade channel is not TargetKubernetesVersion, this field must be False.
     * If set to True: Fleet auto upgrade will continue generate update runs for patches of minor versions earlier than
     * N-2
     * (where N is the latest supported minor version) if those minor versions support Long-Term Support (LTS).
     * By default, this is set to False.
     * For more information on AKS LTS, please see https://learn.microsoft.com/en-us/azure/aks/long-term-support
     */
    private Boolean longTermSupport;

    /**
     * Creates an instance of AutoUpgradeProfileProperties class.
     */
    public AutoUpgradeProfileProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the AutoUpgradeProfile resource.
     * 
     * @return the provisioningState value.
     */
    public AutoUpgradeProfileProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the updateStrategyId property: The resource id of the UpdateStrategy resource to reference. If not specified,
     * the auto upgrade will run on all clusters which are members of the fleet.
     * 
     * @return the updateStrategyId value.
     */
    public String updateStrategyId() {
        return this.updateStrategyId;
    }

    /**
     * Set the updateStrategyId property: The resource id of the UpdateStrategy resource to reference. If not specified,
     * the auto upgrade will run on all clusters which are members of the fleet.
     * 
     * @param updateStrategyId the updateStrategyId value to set.
     * @return the AutoUpgradeProfileProperties object itself.
     */
    public AutoUpgradeProfileProperties withUpdateStrategyId(String updateStrategyId) {
        this.updateStrategyId = updateStrategyId;
        return this;
    }

    /**
     * Get the channel property: Configures how auto-upgrade will be run.
     * 
     * @return the channel value.
     */
    public UpgradeChannel channel() {
        return this.channel;
    }

    /**
     * Set the channel property: Configures how auto-upgrade will be run.
     * 
     * @param channel the channel value to set.
     * @return the AutoUpgradeProfileProperties object itself.
     */
    public AutoUpgradeProfileProperties withChannel(UpgradeChannel channel) {
        this.channel = channel;
        return this;
    }

    /**
     * Get the nodeImageSelection property: The node image upgrade to be applied to the target clusters in auto upgrade.
     * 
     * @return the nodeImageSelection value.
     */
    public AutoUpgradeNodeImageSelection nodeImageSelection() {
        return this.nodeImageSelection;
    }

    /**
     * Set the nodeImageSelection property: The node image upgrade to be applied to the target clusters in auto upgrade.
     * 
     * @param nodeImageSelection the nodeImageSelection value to set.
     * @return the AutoUpgradeProfileProperties object itself.
     */
    public AutoUpgradeProfileProperties withNodeImageSelection(AutoUpgradeNodeImageSelection nodeImageSelection) {
        this.nodeImageSelection = nodeImageSelection;
        return this;
    }

    /**
     * Get the disabled property: If set to False: the auto upgrade has effect - target managed clusters will be
     * upgraded on schedule.
     * If set to True: the auto upgrade has no effect - no upgrade will be run on the target managed clusters.
     * This is a boolean and not an enum because enabled/disabled are all available states of the auto upgrade profile.
     * By default, this is set to False.
     * 
     * @return the disabled value.
     */
    public Boolean disabled() {
        return this.disabled;
    }

    /**
     * Set the disabled property: If set to False: the auto upgrade has effect - target managed clusters will be
     * upgraded on schedule.
     * If set to True: the auto upgrade has no effect - no upgrade will be run on the target managed clusters.
     * This is a boolean and not an enum because enabled/disabled are all available states of the auto upgrade profile.
     * By default, this is set to False.
     * 
     * @param disabled the disabled value to set.
     * @return the AutoUpgradeProfileProperties object itself.
     */
    public AutoUpgradeProfileProperties withDisabled(Boolean disabled) {
        this.disabled = disabled;
        return this;
    }

    /**
     * Get the autoUpgradeProfileStatus property: The status of the auto upgrade profile.
     * 
     * @return the autoUpgradeProfileStatus value.
     */
    public AutoUpgradeProfileStatus autoUpgradeProfileStatus() {
        return this.autoUpgradeProfileStatus;
    }

    /**
     * Set the autoUpgradeProfileStatus property: The status of the auto upgrade profile.
     * 
     * @param autoUpgradeProfileStatus the autoUpgradeProfileStatus value to set.
     * @return the AutoUpgradeProfileProperties object itself.
     */
    public AutoUpgradeProfileProperties
        withAutoUpgradeProfileStatus(AutoUpgradeProfileStatus autoUpgradeProfileStatus) {
        this.autoUpgradeProfileStatus = autoUpgradeProfileStatus;
        return this;
    }

    /**
     * Get the targetKubernetesVersion property: This is the target Kubernetes version for auto-upgrade. The format must
     * be `{major version}.{minor version}`. For example, "1.30".
     * By default, this is empty.
     * If upgrade channel is set to TargetKubernetesVersion, this field must not be empty.
     * If upgrade channel is Rapid, Stable or NodeImage, this field must be empty.
     * 
     * @return the targetKubernetesVersion value.
     */
    public String targetKubernetesVersion() {
        return this.targetKubernetesVersion;
    }

    /**
     * Set the targetKubernetesVersion property: This is the target Kubernetes version for auto-upgrade. The format must
     * be `{major version}.{minor version}`. For example, "1.30".
     * By default, this is empty.
     * If upgrade channel is set to TargetKubernetesVersion, this field must not be empty.
     * If upgrade channel is Rapid, Stable or NodeImage, this field must be empty.
     * 
     * @param targetKubernetesVersion the targetKubernetesVersion value to set.
     * @return the AutoUpgradeProfileProperties object itself.
     */
    public AutoUpgradeProfileProperties withTargetKubernetesVersion(String targetKubernetesVersion) {
        this.targetKubernetesVersion = targetKubernetesVersion;
        return this;
    }

    /**
     * Get the longTermSupport property: If upgrade channel is not TargetKubernetesVersion, this field must be False.
     * If set to True: Fleet auto upgrade will continue generate update runs for patches of minor versions earlier than
     * N-2
     * (where N is the latest supported minor version) if those minor versions support Long-Term Support (LTS).
     * By default, this is set to False.
     * For more information on AKS LTS, please see https://learn.microsoft.com/en-us/azure/aks/long-term-support.
     * 
     * @return the longTermSupport value.
     */
    public Boolean longTermSupport() {
        return this.longTermSupport;
    }

    /**
     * Set the longTermSupport property: If upgrade channel is not TargetKubernetesVersion, this field must be False.
     * If set to True: Fleet auto upgrade will continue generate update runs for patches of minor versions earlier than
     * N-2
     * (where N is the latest supported minor version) if those minor versions support Long-Term Support (LTS).
     * By default, this is set to False.
     * For more information on AKS LTS, please see https://learn.microsoft.com/en-us/azure/aks/long-term-support.
     * 
     * @param longTermSupport the longTermSupport value to set.
     * @return the AutoUpgradeProfileProperties object itself.
     */
    public AutoUpgradeProfileProperties withLongTermSupport(Boolean longTermSupport) {
        this.longTermSupport = longTermSupport;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (channel() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property channel in model AutoUpgradeProfileProperties"));
        }
        if (nodeImageSelection() != null) {
            nodeImageSelection().validate();
        }
        if (autoUpgradeProfileStatus() != null) {
            autoUpgradeProfileStatus().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AutoUpgradeProfileProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("channel", this.channel == null ? null : this.channel.toString());
        jsonWriter.writeStringField("updateStrategyId", this.updateStrategyId);
        jsonWriter.writeJsonField("nodeImageSelection", this.nodeImageSelection);
        jsonWriter.writeBooleanField("disabled", this.disabled);
        jsonWriter.writeJsonField("autoUpgradeProfileStatus", this.autoUpgradeProfileStatus);
        jsonWriter.writeStringField("targetKubernetesVersion", this.targetKubernetesVersion);
        jsonWriter.writeBooleanField("longTermSupport", this.longTermSupport);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutoUpgradeProfileProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutoUpgradeProfileProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AutoUpgradeProfileProperties.
     */
    public static AutoUpgradeProfileProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutoUpgradeProfileProperties deserializedAutoUpgradeProfileProperties = new AutoUpgradeProfileProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("channel".equals(fieldName)) {
                    deserializedAutoUpgradeProfileProperties.channel = UpgradeChannel.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAutoUpgradeProfileProperties.provisioningState
                        = AutoUpgradeProfileProvisioningState.fromString(reader.getString());
                } else if ("updateStrategyId".equals(fieldName)) {
                    deserializedAutoUpgradeProfileProperties.updateStrategyId = reader.getString();
                } else if ("nodeImageSelection".equals(fieldName)) {
                    deserializedAutoUpgradeProfileProperties.nodeImageSelection
                        = AutoUpgradeNodeImageSelection.fromJson(reader);
                } else if ("disabled".equals(fieldName)) {
                    deserializedAutoUpgradeProfileProperties.disabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("autoUpgradeProfileStatus".equals(fieldName)) {
                    deserializedAutoUpgradeProfileProperties.autoUpgradeProfileStatus
                        = AutoUpgradeProfileStatus.fromJson(reader);
                } else if ("targetKubernetesVersion".equals(fieldName)) {
                    deserializedAutoUpgradeProfileProperties.targetKubernetesVersion = reader.getString();
                } else if ("longTermSupport".equals(fieldName)) {
                    deserializedAutoUpgradeProfileProperties.longTermSupport
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutoUpgradeProfileProperties;
        });
    }
}
