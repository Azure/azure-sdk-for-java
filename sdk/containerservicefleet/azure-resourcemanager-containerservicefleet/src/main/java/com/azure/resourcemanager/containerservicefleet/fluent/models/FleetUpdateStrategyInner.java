// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerservicefleet.models.FleetUpdateStrategyProvisioningState;
import com.azure.resourcemanager.containerservicefleet.models.UpdateRunStrategy;
import java.io.IOException;

/**
 * Defines a multi-stage process to perform update operations across members of a Fleet.
 */
@Fluent
public final class FleetUpdateStrategyInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    private FleetUpdateStrategyProperties innerProperties;

    /*
     * If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.
     * Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity
     * tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section
     * 14.27) header fields.
     */
    private String etag;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of FleetUpdateStrategyInner class.
     */
    public FleetUpdateStrategyInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private FleetUpdateStrategyProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the etag property: If eTag is provided in the response body, it may also be provided as a header per the
     * normal etag convention. Entity tags are used for comparing two or more entities from the same requested resource.
     * HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26),
     * and If-Range (section 14.27) header fields.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the provisioningState property: The provisioning state of the UpdateStrategy resource.
     * 
     * @return the provisioningState value.
     */
    public FleetUpdateStrategyProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the strategy property: Defines the update sequence of the clusters.
     * 
     * @return the strategy value.
     */
    public UpdateRunStrategy strategy() {
        return this.innerProperties() == null ? null : this.innerProperties().strategy();
    }

    /**
     * Set the strategy property: Defines the update sequence of the clusters.
     * 
     * @param strategy the strategy value to set.
     * @return the FleetUpdateStrategyInner object itself.
     */
    public FleetUpdateStrategyInner withStrategy(UpdateRunStrategy strategy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FleetUpdateStrategyProperties();
        }
        this.innerProperties().withStrategy(strategy);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FleetUpdateStrategyInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FleetUpdateStrategyInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FleetUpdateStrategyInner.
     */
    public static FleetUpdateStrategyInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FleetUpdateStrategyInner deserializedFleetUpdateStrategyInner = new FleetUpdateStrategyInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedFleetUpdateStrategyInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedFleetUpdateStrategyInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedFleetUpdateStrategyInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedFleetUpdateStrategyInner.innerProperties
                        = FleetUpdateStrategyProperties.fromJson(reader);
                } else if ("eTag".equals(fieldName)) {
                    deserializedFleetUpdateStrategyInner.etag = reader.getString();
                } else if ("systemData".equals(fieldName)) {
                    deserializedFleetUpdateStrategyInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFleetUpdateStrategyInner;
        });
    }
}
