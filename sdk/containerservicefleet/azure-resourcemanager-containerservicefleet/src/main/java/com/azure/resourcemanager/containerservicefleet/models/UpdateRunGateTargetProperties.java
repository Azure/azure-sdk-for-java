// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of the Update Run that the Gate is targeting.
 */
@Immutable
public final class UpdateRunGateTargetProperties implements JsonSerializable<UpdateRunGateTargetProperties> {
    /*
     * The name of the Update Run.
     */
    private String name;

    /*
     * The Update Stage of the Update Run.
     */
    private String stage;

    /*
     * The Update Group of the Update Run.
     */
    private String group;

    /*
     * Whether the Gate is placed before or after the update itself.
     */
    private Timing timing;

    /**
     * Creates an instance of UpdateRunGateTargetProperties class.
     */
    private UpdateRunGateTargetProperties() {
    }

    /**
     * Get the name property: The name of the Update Run.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the stage property: The Update Stage of the Update Run.
     * 
     * @return the stage value.
     */
    public String stage() {
        return this.stage;
    }

    /**
     * Get the group property: The Update Group of the Update Run.
     * 
     * @return the group value.
     */
    public String group() {
        return this.group;
    }

    /**
     * Get the timing property: Whether the Gate is placed before or after the update itself.
     * 
     * @return the timing value.
     */
    public Timing timing() {
        return this.timing;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (timing() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property timing in model UpdateRunGateTargetProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UpdateRunGateTargetProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("timing", this.timing == null ? null : this.timing.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateRunGateTargetProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateRunGateTargetProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UpdateRunGateTargetProperties.
     */
    public static UpdateRunGateTargetProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateRunGateTargetProperties deserializedUpdateRunGateTargetProperties
                = new UpdateRunGateTargetProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedUpdateRunGateTargetProperties.name = reader.getString();
                } else if ("timing".equals(fieldName)) {
                    deserializedUpdateRunGateTargetProperties.timing = Timing.fromString(reader.getString());
                } else if ("stage".equals(fieldName)) {
                    deserializedUpdateRunGateTargetProperties.stage = reader.getString();
                } else if ("group".equals(fieldName)) {
                    deserializedUpdateRunGateTargetProperties.group = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateRunGateTargetProperties;
        });
    }
}
