// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerservicefleet.fluent.GatesClient;
import com.azure.resourcemanager.containerservicefleet.fluent.models.GateInner;
import com.azure.resourcemanager.containerservicefleet.models.Gate;
import com.azure.resourcemanager.containerservicefleet.models.GatePatch;
import com.azure.resourcemanager.containerservicefleet.models.Gates;

public final class GatesImpl implements Gates {
    private static final ClientLogger LOGGER = new ClientLogger(GatesImpl.class);

    private final GatesClient innerClient;

    private final com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager serviceManager;

    public GatesImpl(GatesClient innerClient,
        com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<Gate> getWithResponse(String resourceGroupName, String fleetName, String gateName,
        Context context) {
        Response<GateInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, fleetName, gateName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new GateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Gate get(String resourceGroupName, String fleetName, String gateName) {
        GateInner inner = this.serviceClient().get(resourceGroupName, fleetName, gateName);
        if (inner != null) {
            return new GateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Gate update(String resourceGroupName, String fleetName, String gateName, GatePatch properties) {
        GateInner inner = this.serviceClient().update(resourceGroupName, fleetName, gateName, properties);
        if (inner != null) {
            return new GateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Gate update(String resourceGroupName, String fleetName, String gateName, GatePatch properties,
        String ifMatch, String ifNoneMatch, Context context) {
        GateInner inner = this.serviceClient()
            .update(resourceGroupName, fleetName, gateName, properties, ifMatch, ifNoneMatch, context);
        if (inner != null) {
            return new GateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<Gate> listByFleet(String resourceGroupName, String fleetName) {
        PagedIterable<GateInner> inner = this.serviceClient().listByFleet(resourceGroupName, fleetName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new GateImpl(inner1, this.manager()));
    }

    public PagedIterable<Gate> listByFleet(String resourceGroupName, String fleetName, Context context) {
        PagedIterable<GateInner> inner = this.serviceClient().listByFleet(resourceGroupName, fleetName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new GateImpl(inner1, this.manager()));
    }

    private GatesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager manager() {
        return this.serviceManager;
    }
}
