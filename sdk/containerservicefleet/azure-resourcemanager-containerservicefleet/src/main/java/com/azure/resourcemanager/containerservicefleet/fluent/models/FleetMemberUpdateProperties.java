// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The updatable properties of the FleetMember.
 */
@Fluent
public final class FleetMemberUpdateProperties implements JsonSerializable<FleetMemberUpdateProperties> {
    /*
     * The group this member belongs to for multi-cluster update management.
     */
    private String group;

    /*
     * The labels for the fleet member.
     */
    private Map<String, String> labels;

    /**
     * Creates an instance of FleetMemberUpdateProperties class.
     */
    public FleetMemberUpdateProperties() {
    }

    /**
     * Get the group property: The group this member belongs to for multi-cluster update management.
     * 
     * @return the group value.
     */
    public String group() {
        return this.group;
    }

    /**
     * Set the group property: The group this member belongs to for multi-cluster update management.
     * 
     * @param group the group value to set.
     * @return the FleetMemberUpdateProperties object itself.
     */
    public FleetMemberUpdateProperties withGroup(String group) {
        this.group = group;
        return this;
    }

    /**
     * Get the labels property: The labels for the fleet member.
     * 
     * @return the labels value.
     */
    public Map<String, String> labels() {
        return this.labels;
    }

    /**
     * Set the labels property: The labels for the fleet member.
     * 
     * @param labels the labels value to set.
     * @return the FleetMemberUpdateProperties object itself.
     */
    public FleetMemberUpdateProperties withLabels(Map<String, String> labels) {
        this.labels = labels;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("group", this.group);
        jsonWriter.writeMapField("labels", this.labels, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FleetMemberUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FleetMemberUpdateProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FleetMemberUpdateProperties.
     */
    public static FleetMemberUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FleetMemberUpdateProperties deserializedFleetMemberUpdateProperties = new FleetMemberUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("group".equals(fieldName)) {
                    deserializedFleetMemberUpdateProperties.group = reader.getString();
                } else if ("labels".equals(fieldName)) {
                    Map<String, String> labels = reader.readMap(reader1 -> reader1.getString());
                    deserializedFleetMemberUpdateProperties.labels = labels;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFleetMemberUpdateProperties;
        });
    }
}
