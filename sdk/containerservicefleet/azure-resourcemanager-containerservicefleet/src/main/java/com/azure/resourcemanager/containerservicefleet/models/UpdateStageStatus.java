// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The status of a UpdateStage.
 */
@Immutable
public final class UpdateStageStatus implements JsonSerializable<UpdateStageStatus> {
    /*
     * The status of the UpdateStage.
     */
    private UpdateStatus status;

    /*
     * The name of the UpdateStage.
     */
    private String name;

    /*
     * The list of groups to be updated as part of this UpdateStage.
     */
    private List<UpdateGroupStatus> groups;

    /*
     * The status of the wait period configured on the UpdateStage.
     */
    private WaitStatus afterStageWaitStatus;

    /**
     * Creates an instance of UpdateStageStatus class.
     */
    public UpdateStageStatus() {
    }

    /**
     * Get the status property: The status of the UpdateStage.
     * 
     * @return the status value.
     */
    public UpdateStatus status() {
        return this.status;
    }

    /**
     * Get the name property: The name of the UpdateStage.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the groups property: The list of groups to be updated as part of this UpdateStage.
     * 
     * @return the groups value.
     */
    public List<UpdateGroupStatus> groups() {
        return this.groups;
    }

    /**
     * Get the afterStageWaitStatus property: The status of the wait period configured on the UpdateStage.
     * 
     * @return the afterStageWaitStatus value.
     */
    public WaitStatus afterStageWaitStatus() {
        return this.afterStageWaitStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (status() != null) {
            status().validate();
        }
        if (groups() != null) {
            groups().forEach(e -> e.validate());
        }
        if (afterStageWaitStatus() != null) {
            afterStageWaitStatus().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateStageStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateStageStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateStageStatus.
     */
    public static UpdateStageStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateStageStatus deserializedUpdateStageStatus = new UpdateStageStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedUpdateStageStatus.status = UpdateStatus.fromJson(reader);
                } else if ("name".equals(fieldName)) {
                    deserializedUpdateStageStatus.name = reader.getString();
                } else if ("groups".equals(fieldName)) {
                    List<UpdateGroupStatus> groups = reader.readArray(reader1 -> UpdateGroupStatus.fromJson(reader1));
                    deserializedUpdateStageStatus.groups = groups;
                } else if ("afterStageWaitStatus".equals(fieldName)) {
                    deserializedUpdateStageStatus.afterStageWaitStatus = WaitStatus.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateStageStatus;
        });
    }
}
