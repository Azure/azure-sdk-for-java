// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A group to be updated.
 */
@Fluent
public final class UpdateGroup implements JsonSerializable<UpdateGroup> {
    /*
     * Name of the group.
     * It must match a group name of an existing fleet member.
     */
    private String name;

    /*
     * A list of Gates that will be created before this Group is executed.
     */
    private List<GateConfiguration> beforeGates;

    /*
     * A list of Gates that will be created after this Group is executed.
     */
    private List<GateConfiguration> afterGates;

    /**
     * Creates an instance of UpdateGroup class.
     */
    public UpdateGroup() {
    }

    /**
     * Get the name property: Name of the group.
     * It must match a group name of an existing fleet member.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the group.
     * It must match a group name of an existing fleet member.
     * 
     * @param name the name value to set.
     * @return the UpdateGroup object itself.
     */
    public UpdateGroup withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the beforeGates property: A list of Gates that will be created before this Group is executed.
     * 
     * @return the beforeGates value.
     */
    public List<GateConfiguration> beforeGates() {
        return this.beforeGates;
    }

    /**
     * Set the beforeGates property: A list of Gates that will be created before this Group is executed.
     * 
     * @param beforeGates the beforeGates value to set.
     * @return the UpdateGroup object itself.
     */
    public UpdateGroup withBeforeGates(List<GateConfiguration> beforeGates) {
        this.beforeGates = beforeGates;
        return this;
    }

    /**
     * Get the afterGates property: A list of Gates that will be created after this Group is executed.
     * 
     * @return the afterGates value.
     */
    public List<GateConfiguration> afterGates() {
        return this.afterGates;
    }

    /**
     * Set the afterGates property: A list of Gates that will be created after this Group is executed.
     * 
     * @param afterGates the afterGates value to set.
     * @return the UpdateGroup object itself.
     */
    public UpdateGroup withAfterGates(List<GateConfiguration> afterGates) {
        this.afterGates = afterGates;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model UpdateGroup"));
        }
        if (beforeGates() != null) {
            beforeGates().forEach(e -> e.validate());
        }
        if (afterGates() != null) {
            afterGates().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UpdateGroup.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("beforeGates", this.beforeGates, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("afterGates", this.afterGates, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateGroup from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateGroup if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UpdateGroup.
     */
    public static UpdateGroup fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateGroup deserializedUpdateGroup = new UpdateGroup();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedUpdateGroup.name = reader.getString();
                } else if ("beforeGates".equals(fieldName)) {
                    List<GateConfiguration> beforeGates
                        = reader.readArray(reader1 -> GateConfiguration.fromJson(reader1));
                    deserializedUpdateGroup.beforeGates = beforeGates;
                } else if ("afterGates".equals(fieldName)) {
                    List<GateConfiguration> afterGates
                        = reader.readArray(reader1 -> GateConfiguration.fromJson(reader1));
                    deserializedUpdateGroup.afterGates = afterGates;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateGroup;
        });
    }
}
