// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerservicefleet.models.FleetHubProfile;
import com.azure.resourcemanager.containerservicefleet.models.FleetProvisioningState;
import java.io.IOException;

/**
 * Fleet properties.
 */
@Fluent
public final class FleetProperties implements JsonSerializable<FleetProperties> {
    /*
     * The status of the last operation.
     */
    private FleetProvisioningState provisioningState;

    /*
     * The FleetHubProfile configures the Fleet's hub.
     */
    private FleetHubProfile hubProfile;

    /**
     * Creates an instance of FleetProperties class.
     */
    public FleetProperties() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public FleetProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the hubProfile property: The FleetHubProfile configures the Fleet's hub.
     * 
     * @return the hubProfile value.
     */
    public FleetHubProfile hubProfile() {
        return this.hubProfile;
    }

    /**
     * Set the hubProfile property: The FleetHubProfile configures the Fleet's hub.
     * 
     * @param hubProfile the hubProfile value to set.
     * @return the FleetProperties object itself.
     */
    public FleetProperties withHubProfile(FleetHubProfile hubProfile) {
        this.hubProfile = hubProfile;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hubProfile() != null) {
            hubProfile().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("hubProfile", this.hubProfile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FleetProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FleetProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FleetProperties.
     */
    public static FleetProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FleetProperties deserializedFleetProperties = new FleetProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedFleetProperties.provisioningState
                        = FleetProvisioningState.fromString(reader.getString());
                } else if ("hubProfile".equals(fieldName)) {
                    deserializedFleetProperties.hubProfile = FleetHubProfile.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFleetProperties;
        });
    }
}
