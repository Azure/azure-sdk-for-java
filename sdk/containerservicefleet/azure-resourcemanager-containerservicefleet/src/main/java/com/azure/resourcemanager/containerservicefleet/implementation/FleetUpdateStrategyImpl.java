// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerservicefleet.fluent.models.FleetUpdateStrategyInner;
import com.azure.resourcemanager.containerservicefleet.models.FleetUpdateStrategy;
import com.azure.resourcemanager.containerservicefleet.models.FleetUpdateStrategyProvisioningState;
import com.azure.resourcemanager.containerservicefleet.models.UpdateRunStrategy;

public final class FleetUpdateStrategyImpl
    implements FleetUpdateStrategy, FleetUpdateStrategy.Definition, FleetUpdateStrategy.Update {
    private FleetUpdateStrategyInner innerObject;

    private final com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public FleetUpdateStrategyProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public UpdateRunStrategy strategy() {
        return this.innerModel().strategy();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public FleetUpdateStrategyInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String fleetName;

    private String updateStrategyName;

    private String createIfMatch;

    private String createIfNoneMatch;

    private String updateIfMatch;

    private String updateIfNoneMatch;

    public FleetUpdateStrategyImpl withExistingFleet(String resourceGroupName, String fleetName) {
        this.resourceGroupName = resourceGroupName;
        this.fleetName = fleetName;
        return this;
    }

    public FleetUpdateStrategy create() {
        this.innerObject = serviceManager.serviceClient()
            .getFleetUpdateStrategies()
            .createOrUpdate(resourceGroupName, fleetName, updateStrategyName, this.innerModel(), createIfMatch,
                createIfNoneMatch, Context.NONE);
        return this;
    }

    public FleetUpdateStrategy create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getFleetUpdateStrategies()
            .createOrUpdate(resourceGroupName, fleetName, updateStrategyName, this.innerModel(), createIfMatch,
                createIfNoneMatch, context);
        return this;
    }

    FleetUpdateStrategyImpl(String name,
        com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager serviceManager) {
        this.innerObject = new FleetUpdateStrategyInner();
        this.serviceManager = serviceManager;
        this.updateStrategyName = name;
        this.createIfMatch = null;
        this.createIfNoneMatch = null;
    }

    public FleetUpdateStrategyImpl update() {
        this.updateIfMatch = null;
        this.updateIfNoneMatch = null;
        return this;
    }

    public FleetUpdateStrategy apply() {
        this.innerObject = serviceManager.serviceClient()
            .getFleetUpdateStrategies()
            .createOrUpdate(resourceGroupName, fleetName, updateStrategyName, this.innerModel(), updateIfMatch,
                updateIfNoneMatch, Context.NONE);
        return this;
    }

    public FleetUpdateStrategy apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getFleetUpdateStrategies()
            .createOrUpdate(resourceGroupName, fleetName, updateStrategyName, this.innerModel(), updateIfMatch,
                updateIfNoneMatch, context);
        return this;
    }

    FleetUpdateStrategyImpl(FleetUpdateStrategyInner innerObject,
        com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.fleetName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "fleets");
        this.updateStrategyName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "updateStrategies");
    }

    public FleetUpdateStrategy refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getFleetUpdateStrategies()
            .getWithResponse(resourceGroupName, fleetName, updateStrategyName, Context.NONE)
            .getValue();
        return this;
    }

    public FleetUpdateStrategy refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getFleetUpdateStrategies()
            .getWithResponse(resourceGroupName, fleetName, updateStrategyName, context)
            .getValue();
        return this;
    }

    public FleetUpdateStrategyImpl withStrategy(UpdateRunStrategy strategy) {
        this.innerModel().withStrategy(strategy);
        return this;
    }

    public FleetUpdateStrategyImpl withIfMatch(String ifMatch) {
        if (isInCreateMode()) {
            this.createIfMatch = ifMatch;
            return this;
        } else {
            this.updateIfMatch = ifMatch;
            return this;
        }
    }

    public FleetUpdateStrategyImpl withIfNoneMatch(String ifNoneMatch) {
        if (isInCreateMode()) {
            this.createIfNoneMatch = ifNoneMatch;
            return this;
        } else {
            this.updateIfNoneMatch = ifNoneMatch;
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
