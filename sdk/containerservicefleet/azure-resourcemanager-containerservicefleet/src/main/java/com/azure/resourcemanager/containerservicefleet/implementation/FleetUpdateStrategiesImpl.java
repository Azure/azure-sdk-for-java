// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerservicefleet.fluent.FleetUpdateStrategiesClient;
import com.azure.resourcemanager.containerservicefleet.fluent.models.FleetUpdateStrategyInner;
import com.azure.resourcemanager.containerservicefleet.models.FleetUpdateStrategies;
import com.azure.resourcemanager.containerservicefleet.models.FleetUpdateStrategy;

public final class FleetUpdateStrategiesImpl implements FleetUpdateStrategies {
    private static final ClientLogger LOGGER = new ClientLogger(FleetUpdateStrategiesImpl.class);

    private final FleetUpdateStrategiesClient innerClient;

    private final com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager serviceManager;

    public FleetUpdateStrategiesImpl(FleetUpdateStrategiesClient innerClient,
        com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<FleetUpdateStrategy> listByFleet(String resourceGroupName, String fleetName) {
        PagedIterable<FleetUpdateStrategyInner> inner = this.serviceClient().listByFleet(resourceGroupName, fleetName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FleetUpdateStrategyImpl(inner1, this.manager()));
    }

    public PagedIterable<FleetUpdateStrategy> listByFleet(String resourceGroupName, String fleetName, Context context) {
        PagedIterable<FleetUpdateStrategyInner> inner
            = this.serviceClient().listByFleet(resourceGroupName, fleetName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FleetUpdateStrategyImpl(inner1, this.manager()));
    }

    public Response<FleetUpdateStrategy> getWithResponse(String resourceGroupName, String fleetName,
        String updateStrategyName, Context context) {
        Response<FleetUpdateStrategyInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, fleetName, updateStrategyName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new FleetUpdateStrategyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public FleetUpdateStrategy get(String resourceGroupName, String fleetName, String updateStrategyName) {
        FleetUpdateStrategyInner inner = this.serviceClient().get(resourceGroupName, fleetName, updateStrategyName);
        if (inner != null) {
            return new FleetUpdateStrategyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String fleetName, String updateStrategyName) {
        this.serviceClient().delete(resourceGroupName, fleetName, updateStrategyName);
    }

    public void delete(String resourceGroupName, String fleetName, String updateStrategyName, String ifMatch,
        Context context) {
        this.serviceClient().delete(resourceGroupName, fleetName, updateStrategyName, ifMatch, context);
    }

    public FleetUpdateStrategy getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fleetName = ResourceManagerUtils.getValueFromIdByName(id, "fleets");
        if (fleetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleets'.", id)));
        }
        String updateStrategyName = ResourceManagerUtils.getValueFromIdByName(id, "updateStrategies");
        if (updateStrategyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'updateStrategies'.", id)));
        }
        return this.getWithResponse(resourceGroupName, fleetName, updateStrategyName, Context.NONE).getValue();
    }

    public Response<FleetUpdateStrategy> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fleetName = ResourceManagerUtils.getValueFromIdByName(id, "fleets");
        if (fleetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleets'.", id)));
        }
        String updateStrategyName = ResourceManagerUtils.getValueFromIdByName(id, "updateStrategies");
        if (updateStrategyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'updateStrategies'.", id)));
        }
        return this.getWithResponse(resourceGroupName, fleetName, updateStrategyName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fleetName = ResourceManagerUtils.getValueFromIdByName(id, "fleets");
        if (fleetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleets'.", id)));
        }
        String updateStrategyName = ResourceManagerUtils.getValueFromIdByName(id, "updateStrategies");
        if (updateStrategyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'updateStrategies'.", id)));
        }
        String localIfMatch = null;
        this.delete(resourceGroupName, fleetName, updateStrategyName, localIfMatch, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, String ifMatch, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fleetName = ResourceManagerUtils.getValueFromIdByName(id, "fleets");
        if (fleetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fleets'.", id)));
        }
        String updateStrategyName = ResourceManagerUtils.getValueFromIdByName(id, "updateStrategies");
        if (updateStrategyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'updateStrategies'.", id)));
        }
        this.delete(resourceGroupName, fleetName, updateStrategyName, ifMatch, context);
    }

    private FleetUpdateStrategiesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.containerservicefleet.ContainerServiceFleetManager manager() {
        return this.serviceManager;
    }

    public FleetUpdateStrategyImpl define(String name) {
        return new FleetUpdateStrategyImpl(name, this.manager());
    }
}
