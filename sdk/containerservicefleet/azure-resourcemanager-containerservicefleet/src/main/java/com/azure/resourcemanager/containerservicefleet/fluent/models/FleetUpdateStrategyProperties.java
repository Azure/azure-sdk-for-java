// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerservicefleet.models.FleetUpdateStrategyProvisioningState;
import com.azure.resourcemanager.containerservicefleet.models.UpdateRunStrategy;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The properties of the UpdateStrategy.
 */
@Fluent
public final class FleetUpdateStrategyProperties {
    /*
     * The provisioning state of the UpdateStrategy resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private FleetUpdateStrategyProvisioningState provisioningState;

    /*
     * Defines the update sequence of the clusters.
     */
    @JsonProperty(value = "strategy", required = true)
    private UpdateRunStrategy strategy;

    /**
     * Creates an instance of FleetUpdateStrategyProperties class.
     */
    public FleetUpdateStrategyProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the UpdateStrategy resource.
     * 
     * @return the provisioningState value.
     */
    public FleetUpdateStrategyProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the strategy property: Defines the update sequence of the clusters.
     * 
     * @return the strategy value.
     */
    public UpdateRunStrategy strategy() {
        return this.strategy;
    }

    /**
     * Set the strategy property: Defines the update sequence of the clusters.
     * 
     * @param strategy the strategy value to set.
     * @return the FleetUpdateStrategyProperties object itself.
     */
    public FleetUpdateStrategyProperties withStrategy(UpdateRunStrategy strategy) {
        this.strategy = strategy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (strategy() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property strategy in model FleetUpdateStrategyProperties"));
        } else {
            strategy().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FleetUpdateStrategyProperties.class);
}
