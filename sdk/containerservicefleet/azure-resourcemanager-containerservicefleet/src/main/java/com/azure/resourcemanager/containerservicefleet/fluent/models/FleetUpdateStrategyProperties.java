// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerservicefleet.models.FleetUpdateStrategyProvisioningState;
import com.azure.resourcemanager.containerservicefleet.models.UpdateRunStrategy;
import java.io.IOException;

/**
 * The properties of the UpdateStrategy.
 */
@Fluent
public final class FleetUpdateStrategyProperties implements JsonSerializable<FleetUpdateStrategyProperties> {
    /*
     * The provisioning state of the UpdateStrategy resource.
     */
    private FleetUpdateStrategyProvisioningState provisioningState;

    /*
     * Defines the update sequence of the clusters.
     */
    private UpdateRunStrategy strategy;

    /**
     * Creates an instance of FleetUpdateStrategyProperties class.
     */
    public FleetUpdateStrategyProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the UpdateStrategy resource.
     * 
     * @return the provisioningState value.
     */
    public FleetUpdateStrategyProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the strategy property: Defines the update sequence of the clusters.
     * 
     * @return the strategy value.
     */
    public UpdateRunStrategy strategy() {
        return this.strategy;
    }

    /**
     * Set the strategy property: Defines the update sequence of the clusters.
     * 
     * @param strategy the strategy value to set.
     * @return the FleetUpdateStrategyProperties object itself.
     */
    public FleetUpdateStrategyProperties withStrategy(UpdateRunStrategy strategy) {
        this.strategy = strategy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (strategy() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property strategy in model FleetUpdateStrategyProperties"));
        } else {
            strategy().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FleetUpdateStrategyProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("strategy", this.strategy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FleetUpdateStrategyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FleetUpdateStrategyProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FleetUpdateStrategyProperties.
     */
    public static FleetUpdateStrategyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FleetUpdateStrategyProperties deserializedFleetUpdateStrategyProperties
                = new FleetUpdateStrategyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("strategy".equals(fieldName)) {
                    deserializedFleetUpdateStrategyProperties.strategy = UpdateRunStrategy.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedFleetUpdateStrategyProperties.provisioningState
                        = FleetUpdateStrategyProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFleetUpdateStrategyProperties;
        });
    }
}
