// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Agent profile for the Fleet hub.
 */
@Fluent
public final class AgentProfile implements JsonSerializable<AgentProfile> {
    /*
     * The ID of the subnet which the Fleet hub node will join on startup. If this is not specified, a vnet and subnet
     * will be generated and used.
     */
    private String subnetId;

    /*
     * The virtual machine size of the Fleet hub.
     */
    private String vmSize;

    /**
     * Creates an instance of AgentProfile class.
     */
    public AgentProfile() {
    }

    /**
     * Get the subnetId property: The ID of the subnet which the Fleet hub node will join on startup. If this is not
     * specified, a vnet and subnet will be generated and used.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: The ID of the subnet which the Fleet hub node will join on startup. If this is not
     * specified, a vnet and subnet will be generated and used.
     * 
     * @param subnetId the subnetId value to set.
     * @return the AgentProfile object itself.
     */
    public AgentProfile withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the vmSize property: The virtual machine size of the Fleet hub.
     * 
     * @return the vmSize value.
     */
    public String vmSize() {
        return this.vmSize;
    }

    /**
     * Set the vmSize property: The virtual machine size of the Fleet hub.
     * 
     * @param vmSize the vmSize value to set.
     * @return the AgentProfile object itself.
     */
    public AgentProfile withVmSize(String vmSize) {
        this.vmSize = vmSize;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subnetId", this.subnetId);
        jsonWriter.writeStringField("vmSize", this.vmSize);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgentProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgentProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AgentProfile.
     */
    public static AgentProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AgentProfile deserializedAgentProfile = new AgentProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subnetId".equals(fieldName)) {
                    deserializedAgentProfile.subnetId = reader.getString();
                } else if ("vmSize".equals(fieldName)) {
                    deserializedAgentProfile.vmSize = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAgentProfile;
        });
    }
}
