// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * GateConfiguration is used to define where Gates should be placed within the Update Run.
 */
@Fluent
public final class GateConfiguration implements JsonSerializable<GateConfiguration> {
    /*
     * The human-readable display name of the Gate.
     */
    private String displayName;

    /*
     * The type of the Gate determines how it is completed.
     */
    private GateType type;

    /**
     * Creates an instance of GateConfiguration class.
     */
    public GateConfiguration() {
    }

    /**
     * Get the displayName property: The human-readable display name of the Gate.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The human-readable display name of the Gate.
     * 
     * @param displayName the displayName value to set.
     * @return the GateConfiguration object itself.
     */
    public GateConfiguration withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the type property: The type of the Gate determines how it is completed.
     * 
     * @return the type value.
     */
    public GateType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of the Gate determines how it is completed.
     * 
     * @param type the type value to set.
     * @return the GateConfiguration object itself.
     */
    public GateConfiguration withType(GateType type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model GateConfiguration"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GateConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("displayName", this.displayName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GateConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GateConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GateConfiguration.
     */
    public static GateConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GateConfiguration deserializedGateConfiguration = new GateConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedGateConfiguration.type = GateType.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedGateConfiguration.displayName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGateConfiguration;
        });
    }
}
