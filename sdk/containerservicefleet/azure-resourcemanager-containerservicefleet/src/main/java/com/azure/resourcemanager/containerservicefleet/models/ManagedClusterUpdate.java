// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The update to be applied to the ManagedClusters.
 */
@Fluent
public final class ManagedClusterUpdate implements JsonSerializable<ManagedClusterUpdate> {
    /*
     * The upgrade to apply to the ManagedClusters.
     */
    private ManagedClusterUpgradeSpec upgrade;

    /*
     * The node image upgrade to be applied to the target nodes in update run.
     */
    private NodeImageSelection nodeImageSelection;

    /**
     * Creates an instance of ManagedClusterUpdate class.
     */
    public ManagedClusterUpdate() {
    }

    /**
     * Get the upgrade property: The upgrade to apply to the ManagedClusters.
     * 
     * @return the upgrade value.
     */
    public ManagedClusterUpgradeSpec upgrade() {
        return this.upgrade;
    }

    /**
     * Set the upgrade property: The upgrade to apply to the ManagedClusters.
     * 
     * @param upgrade the upgrade value to set.
     * @return the ManagedClusterUpdate object itself.
     */
    public ManagedClusterUpdate withUpgrade(ManagedClusterUpgradeSpec upgrade) {
        this.upgrade = upgrade;
        return this;
    }

    /**
     * Get the nodeImageSelection property: The node image upgrade to be applied to the target nodes in update run.
     * 
     * @return the nodeImageSelection value.
     */
    public NodeImageSelection nodeImageSelection() {
        return this.nodeImageSelection;
    }

    /**
     * Set the nodeImageSelection property: The node image upgrade to be applied to the target nodes in update run.
     * 
     * @param nodeImageSelection the nodeImageSelection value to set.
     * @return the ManagedClusterUpdate object itself.
     */
    public ManagedClusterUpdate withNodeImageSelection(NodeImageSelection nodeImageSelection) {
        this.nodeImageSelection = nodeImageSelection;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("upgrade", this.upgrade);
        jsonWriter.writeJsonField("nodeImageSelection", this.nodeImageSelection);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedClusterUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedClusterUpdate if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ManagedClusterUpdate.
     */
    public static ManagedClusterUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedClusterUpdate deserializedManagedClusterUpdate = new ManagedClusterUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("upgrade".equals(fieldName)) {
                    deserializedManagedClusterUpdate.upgrade = ManagedClusterUpgradeSpec.fromJson(reader);
                } else if ("nodeImageSelection".equals(fieldName)) {
                    deserializedManagedClusterUpdate.nodeImageSelection = NodeImageSelection.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedClusterUpdate;
        });
    }
}
