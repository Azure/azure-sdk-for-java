// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.containerservicefleet.fluent.AutoUpgradeProfileOperationsClient;
import com.azure.resourcemanager.containerservicefleet.fluent.models.GenerateResponseInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in AutoUpgradeProfileOperationsClient.
 */
public final class AutoUpgradeProfileOperationsClientImpl implements AutoUpgradeProfileOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AutoUpgradeProfileOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final ContainerServiceFleetManagementClientImpl client;

    /**
     * Initializes an instance of AutoUpgradeProfileOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    AutoUpgradeProfileOperationsClientImpl(ContainerServiceFleetManagementClientImpl client) {
        this.service = RestProxy.create(AutoUpgradeProfileOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ContainerServiceFleetManagementClientAutoUpgradeProfileOperations to
     * be used by the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "ContainerServiceFleetManagementClientAutoUpgradeProfileOperations")
    public interface AutoUpgradeProfileOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/autoUpgradeProfiles/{autoUpgradeProfileName}/generateUpdateRun")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> generateUpdateRun(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("fleetName") String fleetName,
            @PathParam("autoUpgradeProfileName") String autoUpgradeProfileName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/autoUpgradeProfiles/{autoUpgradeProfileName}/generateUpdateRun")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> generateUpdateRunSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("fleetName") String fleetName,
            @PathParam("autoUpgradeProfileName") String autoUpgradeProfileName, @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Generates an update run for a given auto upgrade profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName The name of the Fleet resource.
     * @param autoUpgradeProfileName The name of the AutoUpgradeProfile resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> generateUpdateRunWithResponseAsync(String resourceGroupName,
        String fleetName, String autoUpgradeProfileName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (fleetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fleetName is required and cannot be null."));
        }
        if (autoUpgradeProfileName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter autoUpgradeProfileName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.generateUpdateRun(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, fleetName, autoUpgradeProfileName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Generates an update run for a given auto upgrade profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName The name of the Fleet resource.
     * @param autoUpgradeProfileName The name of the AutoUpgradeProfile resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> generateUpdateRunWithResponse(String resourceGroupName, String fleetName,
        String autoUpgradeProfileName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (fleetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter fleetName is required and cannot be null."));
        }
        if (autoUpgradeProfileName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter autoUpgradeProfileName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.generateUpdateRunSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, fleetName, autoUpgradeProfileName, accept,
            Context.NONE);
    }

    /**
     * Generates an update run for a given auto upgrade profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName The name of the Fleet resource.
     * @param autoUpgradeProfileName The name of the AutoUpgradeProfile resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> generateUpdateRunWithResponse(String resourceGroupName, String fleetName,
        String autoUpgradeProfileName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (fleetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter fleetName is required and cannot be null."));
        }
        if (autoUpgradeProfileName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter autoUpgradeProfileName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.generateUpdateRunSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, fleetName, autoUpgradeProfileName, accept, context);
    }

    /**
     * Generates an update run for a given auto upgrade profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName The name of the Fleet resource.
     * @param autoUpgradeProfileName The name of the AutoUpgradeProfile resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GenerateResponseInner>, GenerateResponseInner>
        beginGenerateUpdateRunAsync(String resourceGroupName, String fleetName, String autoUpgradeProfileName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = generateUpdateRunWithResponseAsync(resourceGroupName, fleetName, autoUpgradeProfileName);
        return this.client.<GenerateResponseInner, GenerateResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), GenerateResponseInner.class, GenerateResponseInner.class,
            this.client.getContext());
    }

    /**
     * Generates an update run for a given auto upgrade profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName The name of the Fleet resource.
     * @param autoUpgradeProfileName The name of the AutoUpgradeProfile resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GenerateResponseInner>, GenerateResponseInner>
        beginGenerateUpdateRun(String resourceGroupName, String fleetName, String autoUpgradeProfileName) {
        Response<BinaryData> response
            = generateUpdateRunWithResponse(resourceGroupName, fleetName, autoUpgradeProfileName);
        return this.client.<GenerateResponseInner, GenerateResponseInner>getLroResult(response,
            GenerateResponseInner.class, GenerateResponseInner.class, Context.NONE);
    }

    /**
     * Generates an update run for a given auto upgrade profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName The name of the Fleet resource.
     * @param autoUpgradeProfileName The name of the AutoUpgradeProfile resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GenerateResponseInner>, GenerateResponseInner> beginGenerateUpdateRun(
        String resourceGroupName, String fleetName, String autoUpgradeProfileName, Context context) {
        Response<BinaryData> response
            = generateUpdateRunWithResponse(resourceGroupName, fleetName, autoUpgradeProfileName, context);
        return this.client.<GenerateResponseInner, GenerateResponseInner>getLroResult(response,
            GenerateResponseInner.class, GenerateResponseInner.class, context);
    }

    /**
     * Generates an update run for a given auto upgrade profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName The name of the Fleet resource.
     * @param autoUpgradeProfileName The name of the AutoUpgradeProfile resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GenerateResponseInner> generateUpdateRunAsync(String resourceGroupName, String fleetName,
        String autoUpgradeProfileName) {
        return beginGenerateUpdateRunAsync(resourceGroupName, fleetName, autoUpgradeProfileName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Generates an update run for a given auto upgrade profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName The name of the Fleet resource.
     * @param autoUpgradeProfileName The name of the AutoUpgradeProfile resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GenerateResponseInner generateUpdateRun(String resourceGroupName, String fleetName,
        String autoUpgradeProfileName) {
        return beginGenerateUpdateRun(resourceGroupName, fleetName, autoUpgradeProfileName).getFinalResult();
    }

    /**
     * Generates an update run for a given auto upgrade profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fleetName The name of the Fleet resource.
     * @param autoUpgradeProfileName The name of the AutoUpgradeProfile resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GenerateResponseInner generateUpdateRun(String resourceGroupName, String fleetName,
        String autoUpgradeProfileName, Context context) {
        return beginGenerateUpdateRun(resourceGroupName, fleetName, autoUpgradeProfileName, context).getFinalResult();
    }

    private static final ClientLogger LOGGER = new ClientLogger(AutoUpgradeProfileOperationsClientImpl.class);
}
