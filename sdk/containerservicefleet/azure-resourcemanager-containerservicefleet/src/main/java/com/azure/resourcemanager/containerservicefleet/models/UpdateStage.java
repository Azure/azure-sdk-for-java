// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines a stage which contains the groups to update and the steps to take (e.g., wait for a time period) before
 * starting the next stage.
 */
@Fluent
public final class UpdateStage implements JsonSerializable<UpdateStage> {
    /*
     * The name of the stage. Must be unique within the UpdateRun.
     */
    private String name;

    /*
     * Defines the groups to be executed in parallel in this stage. Duplicate groups are not allowed. Min size: 1.
     */
    private List<UpdateGroup> groups;

    /*
     * The time in seconds to wait at the end of this stage before starting the next one. Defaults to 0 seconds if
     * unspecified.
     */
    private Integer afterStageWaitInSeconds;

    /**
     * Creates an instance of UpdateStage class.
     */
    public UpdateStage() {
    }

    /**
     * Get the name property: The name of the stage. Must be unique within the UpdateRun.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the stage. Must be unique within the UpdateRun.
     * 
     * @param name the name value to set.
     * @return the UpdateStage object itself.
     */
    public UpdateStage withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the groups property: Defines the groups to be executed in parallel in this stage. Duplicate groups are not
     * allowed. Min size: 1.
     * 
     * @return the groups value.
     */
    public List<UpdateGroup> groups() {
        return this.groups;
    }

    /**
     * Set the groups property: Defines the groups to be executed in parallel in this stage. Duplicate groups are not
     * allowed. Min size: 1.
     * 
     * @param groups the groups value to set.
     * @return the UpdateStage object itself.
     */
    public UpdateStage withGroups(List<UpdateGroup> groups) {
        this.groups = groups;
        return this;
    }

    /**
     * Get the afterStageWaitInSeconds property: The time in seconds to wait at the end of this stage before starting
     * the next one. Defaults to 0 seconds if unspecified.
     * 
     * @return the afterStageWaitInSeconds value.
     */
    public Integer afterStageWaitInSeconds() {
        return this.afterStageWaitInSeconds;
    }

    /**
     * Set the afterStageWaitInSeconds property: The time in seconds to wait at the end of this stage before starting
     * the next one. Defaults to 0 seconds if unspecified.
     * 
     * @param afterStageWaitInSeconds the afterStageWaitInSeconds value to set.
     * @return the UpdateStage object itself.
     */
    public UpdateStage withAfterStageWaitInSeconds(Integer afterStageWaitInSeconds) {
        this.afterStageWaitInSeconds = afterStageWaitInSeconds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model UpdateStage"));
        }
        if (groups() != null) {
            groups().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UpdateStage.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("groups", this.groups, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("afterStageWaitInSeconds", this.afterStageWaitInSeconds);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateStage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateStage if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UpdateStage.
     */
    public static UpdateStage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateStage deserializedUpdateStage = new UpdateStage();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedUpdateStage.name = reader.getString();
                } else if ("groups".equals(fieldName)) {
                    List<UpdateGroup> groups = reader.readArray(reader1 -> UpdateGroup.fromJson(reader1));
                    deserializedUpdateStage.groups = groups;
                } else if ("afterStageWaitInSeconds".equals(fieldName)) {
                    deserializedUpdateStage.afterStageWaitInSeconds = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateStage;
        });
    }
}
