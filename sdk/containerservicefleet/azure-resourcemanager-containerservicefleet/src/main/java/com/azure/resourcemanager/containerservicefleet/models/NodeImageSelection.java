// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicefleet.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The node image upgrade to be applied to the target nodes in update run.
 */
@Fluent
public final class NodeImageSelection implements JsonSerializable<NodeImageSelection> {
    /*
     * The node image upgrade type.
     */
    private NodeImageSelectionType type;

    /*
     * Custom node image versions to upgrade the nodes to. This field is required if node image selection type is
     * Custom. Otherwise, it must be empty. For each node image family (e.g., 'AKSUbuntu-1804gen2containerd'), this
     * field can contain at most one version (e.g., only one of 'AKSUbuntu-1804gen2containerd-2023.01.12' or
     * 'AKSUbuntu-1804gen2containerd-2023.02.12', not both). If the nodes belong to a family without a matching image
     * version in this field, they are not upgraded.
     */
    private List<NodeImageVersion> customNodeImageVersions;

    /**
     * Creates an instance of NodeImageSelection class.
     */
    public NodeImageSelection() {
    }

    /**
     * Get the type property: The node image upgrade type.
     * 
     * @return the type value.
     */
    public NodeImageSelectionType type() {
        return this.type;
    }

    /**
     * Set the type property: The node image upgrade type.
     * 
     * @param type the type value to set.
     * @return the NodeImageSelection object itself.
     */
    public NodeImageSelection withType(NodeImageSelectionType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the customNodeImageVersions property: Custom node image versions to upgrade the nodes to. This field is
     * required if node image selection type is Custom. Otherwise, it must be empty. For each node image family (e.g.,
     * 'AKSUbuntu-1804gen2containerd'), this field can contain at most one version (e.g., only one of
     * 'AKSUbuntu-1804gen2containerd-2023.01.12' or 'AKSUbuntu-1804gen2containerd-2023.02.12', not both). If the nodes
     * belong to a family without a matching image version in this field, they are not upgraded.
     * 
     * @return the customNodeImageVersions value.
     */
    public List<NodeImageVersion> customNodeImageVersions() {
        return this.customNodeImageVersions;
    }

    /**
     * Set the customNodeImageVersions property: Custom node image versions to upgrade the nodes to. This field is
     * required if node image selection type is Custom. Otherwise, it must be empty. For each node image family (e.g.,
     * 'AKSUbuntu-1804gen2containerd'), this field can contain at most one version (e.g., only one of
     * 'AKSUbuntu-1804gen2containerd-2023.01.12' or 'AKSUbuntu-1804gen2containerd-2023.02.12', not both). If the nodes
     * belong to a family without a matching image version in this field, they are not upgraded.
     * 
     * @param customNodeImageVersions the customNodeImageVersions value to set.
     * @return the NodeImageSelection object itself.
     */
    public NodeImageSelection withCustomNodeImageVersions(List<NodeImageVersion> customNodeImageVersions) {
        this.customNodeImageVersions = customNodeImageVersions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model NodeImageSelection"));
        }
        if (customNodeImageVersions() != null) {
            customNodeImageVersions().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NodeImageSelection.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeArrayField("customNodeImageVersions", this.customNodeImageVersions,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NodeImageSelection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NodeImageSelection if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NodeImageSelection.
     */
    public static NodeImageSelection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NodeImageSelection deserializedNodeImageSelection = new NodeImageSelection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedNodeImageSelection.type = NodeImageSelectionType.fromString(reader.getString());
                } else if ("customNodeImageVersions".equals(fieldName)) {
                    List<NodeImageVersion> customNodeImageVersions
                        = reader.readArray(reader1 -> NodeImageVersion.fromJson(reader1));
                    deserializedNodeImageSelection.customNodeImageVersions = customNodeImageVersions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNodeImageSelection;
        });
    }
}
