// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservicefleet.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerservicefleet.models.GateProvisioningState;
import com.azure.resourcemanager.containerservicefleet.models.GateState;
import com.azure.resourcemanager.containerservicefleet.models.GateTarget;
import com.azure.resourcemanager.containerservicefleet.models.GateType;
import java.io.IOException;

/**
 * A Gate controls the progression during a staged rollout, e.g. in an Update Run.
 */
@Immutable
public final class GateProperties implements JsonSerializable<GateProperties> {
    /*
     * The provisioning state of the Gate resource.
     */
    private GateProvisioningState provisioningState;

    /*
     * The human-readable display name of the Gate.
     */
    private String displayName;

    /*
     * The type of the Gate determines how it is completed.
     */
    private GateType gateType;

    /*
     * The target that the Gate is controlling, e.g. an Update Run.
     */
    private GateTarget target;

    /*
     * The state of the Gate.
     */
    private GateState state;

    /**
     * Creates an instance of GateProperties class.
     */
    private GateProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the Gate resource.
     * 
     * @return the provisioningState value.
     */
    public GateProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the displayName property: The human-readable display name of the Gate.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the gateType property: The type of the Gate determines how it is completed.
     * 
     * @return the gateType value.
     */
    public GateType gateType() {
        return this.gateType;
    }

    /**
     * Get the target property: The target that the Gate is controlling, e.g. an Update Run.
     * 
     * @return the target value.
     */
    public GateTarget target() {
        return this.target;
    }

    /**
     * Get the state property: The state of the Gate.
     * 
     * @return the state value.
     */
    public GateState state() {
        return this.state;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (gateType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property gateType in model GateProperties"));
        }
        if (target() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property target in model GateProperties"));
        } else {
            target().validate();
        }
        if (state() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property state in model GateProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GateProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("gateType", this.gateType == null ? null : this.gateType.toString());
        jsonWriter.writeJsonField("target", this.target);
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeStringField("displayName", this.displayName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GateProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GateProperties.
     */
    public static GateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GateProperties deserializedGateProperties = new GateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("gateType".equals(fieldName)) {
                    deserializedGateProperties.gateType = GateType.fromString(reader.getString());
                } else if ("target".equals(fieldName)) {
                    deserializedGateProperties.target = GateTarget.fromJson(reader);
                } else if ("state".equals(fieldName)) {
                    deserializedGateProperties.state = GateState.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedGateProperties.provisioningState = GateProvisioningState.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedGateProperties.displayName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGateProperties;
        });
    }
}
