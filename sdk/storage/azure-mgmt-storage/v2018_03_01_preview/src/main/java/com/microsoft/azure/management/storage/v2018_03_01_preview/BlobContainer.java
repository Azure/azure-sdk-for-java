/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storage.v2018_03_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.storage.v2018_03_01_preview.implementation.BlobContainerInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.storage.v2018_03_01_preview.implementation.StorageManager;
import org.joda.time.DateTime;
import java.util.Map;

/**
 * Type representing BlobContainer.
 */
public interface BlobContainer extends HasInner<BlobContainerInner>, Indexable, Updatable<BlobContainer.Update>, HasManager<StorageManager> {
    /**
     * @return the etag value.
     */
    String etag();

    /**
     * @return the hasImmutabilityPolicy value.
     */
    Boolean hasImmutabilityPolicy();

    /**
     * @return the hasLegalHold value.
     */
    Boolean hasLegalHold();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the immutabilityPolicy value.
     */
    ImmutabilityPolicyProperties immutabilityPolicy();

    /**
     * @return the lastModifiedTime value.
     */
    DateTime lastModifiedTime();

    /**
     * @return the leaseDuration value.
     */
    LeaseDuration leaseDuration();

    /**
     * @return the leaseState value.
     */
    LeaseState leaseState();

    /**
     * @return the leaseStatus value.
     */
    LeaseStatus leaseStatus();

    /**
     * @return the legalHold value.
     */
    LegalHoldProperties legalHold();

    /**
     * @return the metadata value.
     */
    Map<String, String> metadata();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the publicAccess value.
     */
    PublicAccess publicAccess();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the BlobContainer definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithBlobService, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of BlobContainer definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a BlobContainer definition.
         */
        interface Blank extends WithBlobService {
        }

        /**
         * The stage of the blobcontainer definition allowing to specify BlobService.
         */
        interface WithBlobService {
           /**
            * Specifies resourceGroupName, accountName.
            */
            WithCreate withExistingBlobService(String resourceGroupName, String accountName);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<BlobContainer> {
        }
    }
    /**
     * The template for a BlobContainer update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<BlobContainer> {
    }

    /**
     * Grouping of BlobContainer update stages.
     */
    interface UpdateStages {
    }
}
