{{- include "stress-test-addons.deploy-job-template.from-pod" (list . "stress.deploy-example") -}}
{{- define "stress.deploy-example" -}}
metadata:
  labels:
    chaos: "{{ default false .Stress.chaos }}"
    testInstance: "{{.Stress.Scenario}}-{{ .Release.Name }}-{{ .Release.Revision }}"
spec:
  containers:
    - name: fault-injector
      image:  {{ .Stress.imageTag }}
      command: ['sh', '-c']
      args:
        - set -ex && http-fault-injector
      imagePullPolicy: Always
    - name: main
      # az acr list -g rg-stress-cluster-test --subscription "Azure SDK Developer Playground" --query "[0].loginServer"
      image:  {{ .Stress.imageTag }}
      command: ['sh', '-c']
      args:
        - |
          set -exa;
          mkdir -p "$DEBUG_SHARE";
          . /mnt/outputs/.env &&
          java -jar ./target/Icm387357955-1.0-SNAPSHOT-jar-with-dependencies.jar {{ .Stress.testTarget }} -async {{ .Stress.async }} -size {{ .Stress.blobSizeBytes }} -parallel {{ .Stress.parallel }} 2>&1 | tee -a "${DEBUG_SHARE}/{{ .Stress.Scenario }}-`date +%s`.log";
      # Pulls the image on pod start, always. We tend to push to the same image and tag over and over again
      # when iterating, so this is a must.
      imagePullPolicy: Always
      # More about this section here:
      # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
      #
      # Note that I'm only setting 'limits' and not 'requests'. If 'requests' is missing it
      # just uses 'limits' for both.
      resources:
        limits:
          memory: 500Mi
          cpu: "0.5"
      {{- include "stress-test-addons.container-env" . | nindent 6 }}
{{- end -}}
