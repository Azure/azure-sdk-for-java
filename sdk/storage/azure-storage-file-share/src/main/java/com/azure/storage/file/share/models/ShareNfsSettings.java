// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.storage.file.share.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.xml.XmlReader;
import com.azure.xml.XmlSerializable;
import com.azure.xml.XmlToken;
import com.azure.xml.XmlWriter;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;

/**
 * Settings for SMB protocol.
 */
@Fluent
public final class ShareNfsSettings implements XmlSerializable<ShareNfsSettings> {
    /*
     * Enable or disable encryption in transit.
     */
    @Generated
    private ShareNfsSettingsEncryptionInTransit encryptionInTransit;

    /**
     * Creates an instance of ShareNfsSettings class.
     */
    @Generated
    public ShareNfsSettings() {
    }

    /**
     * Get the encryptionInTransit property: Enable or disable encryption in transit.
     * 
     * @return the encryptionInTransit value.
     */
    @Generated
    public ShareNfsSettingsEncryptionInTransit getEncryptionInTransit() {
        return this.encryptionInTransit;
    }

    /**
     * Set the encryptionInTransit property: Enable or disable encryption in transit.
     * 
     * @param encryptionInTransit the encryptionInTransit value to set.
     * @return the ShareNfsSettings object itself.
     */
    @Generated
    public ShareNfsSettings setEncryptionInTransit(ShareNfsSettingsEncryptionInTransit encryptionInTransit) {
        this.encryptionInTransit = encryptionInTransit;
        return this;
    }

    @Generated
    @Override
    public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {
        return toXml(xmlWriter, null);
    }

    @Generated
    @Override
    public XmlWriter toXml(XmlWriter xmlWriter, String rootElementName) throws XMLStreamException {
        rootElementName = rootElementName == null || rootElementName.isEmpty() ? "NFS" : rootElementName;
        xmlWriter.writeStartElement(rootElementName);
        xmlWriter.writeXml(this.encryptionInTransit, "EncryptionInTransit");
        return xmlWriter.writeEndElement();
    }

    /**
     * Reads an instance of ShareNfsSettings from the XmlReader.
     * 
     * @param xmlReader The XmlReader being read.
     * @return An instance of ShareNfsSettings if the XmlReader was pointing to an instance of it, or null if it was
     * pointing to XML null.
     * @throws XMLStreamException If an error occurs while reading the ShareNfsSettings.
     */
    @Generated
    public static ShareNfsSettings fromXml(XmlReader xmlReader) throws XMLStreamException {
        return fromXml(xmlReader, null);
    }

    /**
     * Reads an instance of ShareNfsSettings from the XmlReader.
     * 
     * @param xmlReader The XmlReader being read.
     * @param rootElementName Optional root element name to override the default defined by the model. Used to support
     * cases where the model can deserialize from different root element names.
     * @return An instance of ShareNfsSettings if the XmlReader was pointing to an instance of it, or null if it was
     * pointing to XML null.
     * @throws XMLStreamException If an error occurs while reading the ShareNfsSettings.
     */
    @Generated
    public static ShareNfsSettings fromXml(XmlReader xmlReader, String rootElementName) throws XMLStreamException {
        String finalRootElementName = rootElementName == null || rootElementName.isEmpty() ? "NFS" : rootElementName;
        return xmlReader.readObject(finalRootElementName, reader -> {
            ShareNfsSettings deserializedShareNfsSettings = new ShareNfsSettings();
            while (reader.nextElement() != XmlToken.END_ELEMENT) {
                QName elementName = reader.getElementName();

                if ("EncryptionInTransit".equals(elementName.getLocalPart())) {
                    deserializedShareNfsSettings.encryptionInTransit
                        = ShareNfsSettingsEncryptionInTransit.fromXml(reader, "EncryptionInTransit");
                } else {
                    reader.skipElement();
                }
            }

            return deserializedShareNfsSettings;
        });
    }
}
