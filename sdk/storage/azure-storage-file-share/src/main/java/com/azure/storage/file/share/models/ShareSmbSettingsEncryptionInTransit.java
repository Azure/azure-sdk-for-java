// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.storage.file.share.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.xml.XmlReader;
import com.azure.xml.XmlSerializable;
import com.azure.xml.XmlToken;
import com.azure.xml.XmlWriter;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;

/**
 * Enable or disable encryption in transit.
 */
@Fluent
public final class ShareSmbSettingsEncryptionInTransit implements XmlSerializable<ShareSmbSettingsEncryptionInTransit> {
    /*
     * If encryption in transit is required
     */
    @Generated
    private Boolean required;

    /**
     * Creates an instance of ShareSmbSettingsEncryptionInTransit class.
     */
    @Generated
    public ShareSmbSettingsEncryptionInTransit() {
    }

    /**
     * Get the required property: If encryption in transit is required.
     *
     * @return the required value.
     */
    @Generated
    public Boolean isRequired() {
        return this.required;
    }

    /**
     * Set the required property: If encryption in transit is required.
     *
     * @param required the required value to set.
     * @return the ShareSmbSettingsEncryptionInTransit object itself.
     */
    @Generated
    public ShareSmbSettingsEncryptionInTransit setRequired(Boolean required) {
        this.required = required;
        return this;
    }

    @Generated
    @Override
    public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {
        return toXml(xmlWriter, null);
    }

    @Generated
    @Override
    public XmlWriter toXml(XmlWriter xmlWriter, String rootElementName) throws XMLStreamException {
        rootElementName = rootElementName == null || rootElementName.isEmpty()
            ? "ShareSmbSettingsEncryptionInTransit"
            : rootElementName;
        xmlWriter.writeStartElement(rootElementName);
        xmlWriter.writeBooleanElement("Required", this.required);
        return xmlWriter.writeEndElement();
    }

    /**
     * Reads an instance of ShareSmbSettingsEncryptionInTransit from the XmlReader.
     *
     * @param xmlReader The XmlReader being read.
     * @return An instance of ShareSmbSettingsEncryptionInTransit if the XmlReader was pointing to an instance of it, or
     * null if it was pointing to XML null.
     * @throws XMLStreamException If an error occurs while reading the ShareSmbSettingsEncryptionInTransit.
     */
    @Generated
    public static ShareSmbSettingsEncryptionInTransit fromXml(XmlReader xmlReader) throws XMLStreamException {
        return fromXml(xmlReader, null);
    }

    /**
     * Reads an instance of ShareSmbSettingsEncryptionInTransit from the XmlReader.
     *
     * @param xmlReader The XmlReader being read.
     * @param rootElementName Optional root element name to override the default defined by the model. Used to support
     * cases where the model can deserialize from different root element names.
     * @return An instance of ShareSmbSettingsEncryptionInTransit if the XmlReader was pointing to an instance of it, or
     * null if it was pointing to XML null.
     * @throws XMLStreamException If an error occurs while reading the ShareSmbSettingsEncryptionInTransit.
     */
    @Generated
    public static ShareSmbSettingsEncryptionInTransit fromXml(XmlReader xmlReader, String rootElementName)
        throws XMLStreamException {
        String finalRootElementName = rootElementName == null || rootElementName.isEmpty()
            ? "ShareSmbSettingsEncryptionInTransit"
            : rootElementName;
        return xmlReader.readObject(finalRootElementName, reader -> {
            ShareSmbSettingsEncryptionInTransit deserializedShareSmbSettingsEncryptionInTransit
                = new ShareSmbSettingsEncryptionInTransit();
            while (reader.nextElement() != XmlToken.END_ELEMENT) {
                QName elementName = reader.getElementName();

                if ("Required".equals(elementName.getLocalPart())) {
                    deserializedShareSmbSettingsEncryptionInTransit.required
                        = reader.getNullableElement(Boolean::parseBoolean);
                } else {
                    reader.skipElement();
                }
            }

            return deserializedShareSmbSettingsEncryptionInTransit;
        });
    }
}
