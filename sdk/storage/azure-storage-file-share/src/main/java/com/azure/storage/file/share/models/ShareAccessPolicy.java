// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.storage.file.share.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.xml.XmlReader;
import com.azure.xml.XmlSerializable;
import com.azure.xml.XmlToken;
import com.azure.xml.XmlWriter;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;

/**
 * An Access policy.
 */
@Fluent
public final class ShareAccessPolicy implements XmlSerializable<ShareAccessPolicy> {
    /*
     * The date-time the policy is active.
     */
    private OffsetDateTime startsOn;

    /*
     * The date-time the policy expires.
     */
    private OffsetDateTime expiresOn;

    /*
     * The permissions for the ACL policy.
     */
    private String permissions;

    /**
     * Creates an instance of ShareAccessPolicy class.
     */
    public ShareAccessPolicy() {
    }

    /**
     * Get the startsOn property: The date-time the policy is active.
     * 
     * @return the startsOn value.
     */
    public OffsetDateTime getStartsOn() {
        return this.startsOn;
    }

    /**
     * Set the startsOn property: The date-time the policy is active.
     * 
     * @param startsOn the startsOn value to set.
     * @return the ShareAccessPolicy object itself.
     */
    public ShareAccessPolicy setStartsOn(OffsetDateTime startsOn) {
        this.startsOn = startsOn;
        return this;
    }

    /**
     * Get the expiresOn property: The date-time the policy expires.
     * 
     * @return the expiresOn value.
     */
    public OffsetDateTime getExpiresOn() {
        return this.expiresOn;
    }

    /**
     * Set the expiresOn property: The date-time the policy expires.
     * 
     * @param expiresOn the expiresOn value to set.
     * @return the ShareAccessPolicy object itself.
     */
    public ShareAccessPolicy setExpiresOn(OffsetDateTime expiresOn) {
        this.expiresOn = expiresOn;
        return this;
    }

    /**
     * Get the permissions property: The permissions for the ACL policy.
     * 
     * @return the permissions value.
     */
    public String getPermissions() {
        return this.permissions;
    }

    /**
     * Set the permissions property: The permissions for the ACL policy.
     * 
     * @param permissions the permissions value to set.
     * @return the ShareAccessPolicy object itself.
     */
    public ShareAccessPolicy setPermissions(String permissions) {
        this.permissions = permissions;
        return this;
    }

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {
        return toXml(xmlWriter, null);
    }

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter, String rootElementName) throws XMLStreamException {
        rootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "ShareAccessPolicy" : rootElementName;
        xmlWriter.writeStartElement(rootElementName);
        xmlWriter.writeStringElement("Start",
            this.startsOn == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startsOn));
        xmlWriter.writeStringElement("Expiry",
            this.expiresOn == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expiresOn));
        xmlWriter.writeStringElement("Permission", this.permissions);
        return xmlWriter.writeEndElement();
    }

    /**
     * Reads an instance of ShareAccessPolicy from the XmlReader.
     * 
     * @param xmlReader The XmlReader being read.
     * @return An instance of ShareAccessPolicy if the XmlReader was pointing to an instance of it, or null if it was
     * pointing to XML null.
     * @throws XMLStreamException If an error occurs while reading the ShareAccessPolicy.
     */
    public static ShareAccessPolicy fromXml(XmlReader xmlReader) throws XMLStreamException {
        return fromXml(xmlReader, null);
    }

    /**
     * Reads an instance of ShareAccessPolicy from the XmlReader.
     * 
     * @param xmlReader The XmlReader being read.
     * @param rootElementName Optional root element name to override the default defined by the model. Used to support
     * cases where the model can deserialize from different root element names.
     * @return An instance of ShareAccessPolicy if the XmlReader was pointing to an instance of it, or null if it was
     * pointing to XML null.
     * @throws XMLStreamException If an error occurs while reading the ShareAccessPolicy.
     */
    public static ShareAccessPolicy fromXml(XmlReader xmlReader, String rootElementName) throws XMLStreamException {
        String finalRootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "ShareAccessPolicy" : rootElementName;
        return xmlReader.readObject(finalRootElementName, reader -> {
            ShareAccessPolicy deserializedShareAccessPolicy = new ShareAccessPolicy();
            while (reader.nextElement() != XmlToken.END_ELEMENT) {
                QName elementName = reader.getElementName();

                if ("Start".equals(elementName.getLocalPart())) {
                    deserializedShareAccessPolicy.startsOn
                        = reader.getNullableElement(dateString -> OffsetDateTime.parse(dateString));
                } else if ("Expiry".equals(elementName.getLocalPart())) {
                    deserializedShareAccessPolicy.expiresOn
                        = reader.getNullableElement(dateString -> OffsetDateTime.parse(dateString));
                } else if ("Permission".equals(elementName.getLocalPart())) {
                    deserializedShareAccessPolicy.permissions = reader.getStringElement();
                } else {
                    reader.skipElement();
                }
            }

            return deserializedShareAccessPolicy;
        });
    }
}
