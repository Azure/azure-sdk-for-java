/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storage.v2018_03_01_preview.implementation;

import com.microsoft.azure.management.storage.v2018_03_01_preview.StorageAccountManagementPolicies;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import org.joda.time.DateTime;

class StorageAccountManagementPoliciesImpl extends CreatableUpdatableImpl<StorageAccountManagementPolicies, StorageAccountManagementPoliciesInner, StorageAccountManagementPoliciesImpl> implements StorageAccountManagementPolicies, StorageAccountManagementPolicies.Definition, StorageAccountManagementPolicies.Update {
    private final StorageManager manager;
    private String resourceGroupName;
    private String accountName;
    private Object cpolicy;
    private Object upolicy;

    StorageAccountManagementPoliciesImpl(String name, StorageManager manager) {
        super(name, new StorageAccountManagementPoliciesInner());
        this.manager = manager;
        // Set resource name
        this.accountName = name;
        //
    }

    StorageAccountManagementPoliciesImpl(StorageAccountManagementPoliciesInner inner, StorageManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.accountName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.accountName = IdParsingUtils.getValueFromIdByName(inner.id(), "storageAccounts");
        //
    }

    @Override
    public StorageManager manager() {
        return this.manager;
    }

    @Override
    public Observable<StorageAccountManagementPolicies> createResourceAsync() {
        StorageAccountsInner client = this.manager().inner().storageAccounts();
        return client.createOrUpdateManagementPoliciesAsync(this.resourceGroupName, this.accountName, this.cpolicy)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<StorageAccountManagementPolicies> updateResourceAsync() {
        StorageAccountsInner client = this.manager().inner().storageAccounts();
        return client.createOrUpdateManagementPoliciesAsync(this.resourceGroupName, this.accountName, this.upolicy)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<StorageAccountManagementPoliciesInner> getInnerAsync() {
        StorageAccountsInner client = this.manager().inner().storageAccounts();
        return client.getManagementPoliciesAsync(this.resourceGroupName, this.accountName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public DateTime lastModifiedTime() {
        return this.inner().lastModifiedTime();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Object policy() {
        return this.inner().policy();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public StorageAccountManagementPoliciesImpl withExistingStorageAccount(String resourceGroupName, String accountName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        return this;
    }

    @Override
    public StorageAccountManagementPoliciesImpl withPolicy(Object policy) {
        if (isInCreateMode()) {
            this.cpolicy = policy;
        } else {
            this.upolicy = policy;
        }
        return this;
    }

}
