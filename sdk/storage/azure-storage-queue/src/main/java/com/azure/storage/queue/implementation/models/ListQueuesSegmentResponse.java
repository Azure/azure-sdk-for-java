// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.storage.queue.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.storage.queue.models.QueueItem;
import com.azure.xml.XmlReader;
import com.azure.xml.XmlSerializable;
import com.azure.xml.XmlToken;
import com.azure.xml.XmlWriter;
import java.util.ArrayList;
import java.util.List;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;

/** The object returned when calling List Queues on a Queue Service. */
@Fluent
public final class ListQueuesSegmentResponse implements XmlSerializable<ListQueuesSegmentResponse> {
    /*
     * The ServiceEndpoint property.
     */
    private String serviceEndpoint;

    /*
     * The Prefix property.
     */
    private String prefix;

    /*
     * The Marker property.
     */
    private String marker;

    /*
     * The MaxResults property.
     */
    private int maxResults;

    static final class QueuesWrapper implements XmlSerializable<QueuesWrapper> {
        private final List<QueueItem> items;

        private QueuesWrapper(List<QueueItem> items) {
            this.items = items;
        }

        @Override
        public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {
            return toXml(xmlWriter, null);
        }

        @Override
        public XmlWriter toXml(XmlWriter xmlWriter, String rootElementName) throws XMLStreamException {
            rootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "Queues" : rootElementName;
            xmlWriter.writeStartElement(rootElementName);
            if (items != null) {
                for (QueueItem element : items) {
                    xmlWriter.writeXml(element, "Queue");
                }
            }
            return xmlWriter.writeEndElement();
        }

        public static QueuesWrapper fromXml(XmlReader xmlReader) throws XMLStreamException {
            return fromXml(xmlReader, null);
        }

        public static QueuesWrapper fromXml(XmlReader xmlReader, String rootElementName) throws XMLStreamException {
            rootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "Queues" : rootElementName;
            return xmlReader.readObject(
                    rootElementName,
                    reader -> {
                        List<QueueItem> items = null;

                        while (reader.nextElement() != XmlToken.END_ELEMENT) {
                            String elementName = reader.getElementName().getLocalPart();

                            if ("Queue".equals(elementName)) {
                                if (items == null) {
                                    items = new ArrayList<>();
                                }

                                items.add(QueueItem.fromXml(reader));
                            } else {
                                reader.nextElement();
                            }
                        }
                        return new QueuesWrapper(items);
                    });
        }
    }

    /*
     * The QueueItems property.
     */
    private QueuesWrapper queueItems;

    /*
     * The NextMarker property.
     */
    private String nextMarker;

    /** Creates an instance of ListQueuesSegmentResponse class. */
    public ListQueuesSegmentResponse() {}

    /**
     * Get the serviceEndpoint property: The ServiceEndpoint property.
     *
     * @return the serviceEndpoint value.
     */
    public String getServiceEndpoint() {
        return this.serviceEndpoint;
    }

    /**
     * Set the serviceEndpoint property: The ServiceEndpoint property.
     *
     * @param serviceEndpoint the serviceEndpoint value to set.
     * @return the ListQueuesSegmentResponse object itself.
     */
    public ListQueuesSegmentResponse setServiceEndpoint(String serviceEndpoint) {
        this.serviceEndpoint = serviceEndpoint;
        return this;
    }

    /**
     * Get the prefix property: The Prefix property.
     *
     * @return the prefix value.
     */
    public String getPrefix() {
        return this.prefix;
    }

    /**
     * Set the prefix property: The Prefix property.
     *
     * @param prefix the prefix value to set.
     * @return the ListQueuesSegmentResponse object itself.
     */
    public ListQueuesSegmentResponse setPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * Get the marker property: The Marker property.
     *
     * @return the marker value.
     */
    public String getMarker() {
        return this.marker;
    }

    /**
     * Set the marker property: The Marker property.
     *
     * @param marker the marker value to set.
     * @return the ListQueuesSegmentResponse object itself.
     */
    public ListQueuesSegmentResponse setMarker(String marker) {
        this.marker = marker;
        return this;
    }

    /**
     * Get the maxResults property: The MaxResults property.
     *
     * @return the maxResults value.
     */
    public int getMaxResults() {
        return this.maxResults;
    }

    /**
     * Set the maxResults property: The MaxResults property.
     *
     * @param maxResults the maxResults value to set.
     * @return the ListQueuesSegmentResponse object itself.
     */
    public ListQueuesSegmentResponse setMaxResults(int maxResults) {
        this.maxResults = maxResults;
        return this;
    }

    /**
     * Get the queueItems property: The QueueItems property.
     *
     * @return the queueItems value.
     */
    public List<QueueItem> getQueueItems() {
        if (this.queueItems == null) {
            this.queueItems = new QueuesWrapper(new ArrayList<QueueItem>());
        }
        return this.queueItems.items;
    }

    /**
     * Set the queueItems property: The QueueItems property.
     *
     * @param queueItems the queueItems value to set.
     * @return the ListQueuesSegmentResponse object itself.
     */
    public ListQueuesSegmentResponse setQueueItems(List<QueueItem> queueItems) {
        this.queueItems = new QueuesWrapper(queueItems);
        return this;
    }

    /**
     * Get the nextMarker property: The NextMarker property.
     *
     * @return the nextMarker value.
     */
    public String getNextMarker() {
        return this.nextMarker;
    }

    /**
     * Set the nextMarker property: The NextMarker property.
     *
     * @param nextMarker the nextMarker value to set.
     * @return the ListQueuesSegmentResponse object itself.
     */
    public ListQueuesSegmentResponse setNextMarker(String nextMarker) {
        this.nextMarker = nextMarker;
        return this;
    }

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {
        return toXml(xmlWriter, null);
    }

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter, String rootElementName) throws XMLStreamException {
        rootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "EnumerationResults" : rootElementName;
        xmlWriter.writeStartElement(rootElementName);
        xmlWriter.writeStringAttribute("ServiceEndpoint", this.serviceEndpoint);
        xmlWriter.writeStringElement("Prefix", this.prefix);
        xmlWriter.writeStringElement("Marker", this.marker);
        xmlWriter.writeIntElement("MaxResults", this.maxResults);
        xmlWriter.writeXml(this.queueItems);
        xmlWriter.writeStringElement("NextMarker", this.nextMarker);
        return xmlWriter.writeEndElement();
    }

    /**
     * Reads an instance of ListQueuesSegmentResponse from the XmlReader.
     *
     * @param xmlReader The XmlReader being read.
     * @return An instance of ListQueuesSegmentResponse if the XmlReader was pointing to an instance of it, or null if
     *     it was pointing to XML null.
     * @throws IllegalStateException If the deserialized XML object was missing any required properties.
     * @throws XMLStreamException If an error occurs while reading the ListQueuesSegmentResponse.
     */
    public static ListQueuesSegmentResponse fromXml(XmlReader xmlReader) throws XMLStreamException {
        return fromXml(xmlReader, null);
    }

    /**
     * Reads an instance of ListQueuesSegmentResponse from the XmlReader.
     *
     * @param xmlReader The XmlReader being read.
     * @param rootElementName Optional root element name to override the default defined by the model. Used to support
     *     cases where the model can deserialize from different root element names.
     * @return An instance of ListQueuesSegmentResponse if the XmlReader was pointing to an instance of it, or null if
     *     it was pointing to XML null.
     * @throws IllegalStateException If the deserialized XML object was missing any required properties.
     * @throws XMLStreamException If an error occurs while reading the ListQueuesSegmentResponse.
     */
    public static ListQueuesSegmentResponse fromXml(XmlReader xmlReader, String rootElementName)
            throws XMLStreamException {
        String finalRootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "EnumerationResults" : rootElementName;
        return xmlReader.readObject(
                finalRootElementName,
                reader -> {
                    String serviceEndpoint = reader.getStringAttribute(null, "ServiceEndpoint");
                    String prefix = null;
                    String marker = null;
                    int maxResults = 0;
                    QueuesWrapper queueItems = null;
                    String nextMarker = null;
                    while (reader.nextElement() != XmlToken.END_ELEMENT) {
                        QName elementName = reader.getElementName();

                        if ("Prefix".equals(elementName.getLocalPart())) {
                            prefix = reader.getStringElement();
                        } else if ("Marker".equals(elementName.getLocalPart())) {
                            marker = reader.getStringElement();
                        } else if ("MaxResults".equals(elementName.getLocalPart())) {
                            maxResults = reader.getIntElement();
                        } else if ("Queues".equals(elementName.getLocalPart())) {
                            queueItems = QueuesWrapper.fromXml(reader);
                        } else if ("NextMarker".equals(elementName.getLocalPart())) {
                            nextMarker = reader.getStringElement();
                        } else {
                            reader.skipElement();
                        }
                    }
                    ListQueuesSegmentResponse deserializedListQueuesSegmentResponse = new ListQueuesSegmentResponse();
                    deserializedListQueuesSegmentResponse.serviceEndpoint = serviceEndpoint;
                    deserializedListQueuesSegmentResponse.prefix = prefix;
                    deserializedListQueuesSegmentResponse.maxResults = maxResults;
                    deserializedListQueuesSegmentResponse.nextMarker = nextMarker;
                    deserializedListQueuesSegmentResponse.marker = marker;
                    deserializedListQueuesSegmentResponse.queueItems = queueItems;

                    return deserializedListQueuesSegmentResponse;
                });
    }
}
