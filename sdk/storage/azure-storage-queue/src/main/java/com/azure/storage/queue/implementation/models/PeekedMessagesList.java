// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.storage.queue.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.xml.XmlReader;
import com.azure.xml.XmlSerializable;
import com.azure.xml.XmlToken;
import com.azure.xml.XmlWriter;
import java.util.LinkedList;
import java.util.List;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;

/** */
@Fluent
public final class PeekedMessagesList implements XmlSerializable<PeekedMessagesList> {
    /*
     * The object returned in the QueueMessageList array when calling Peek Messages on a Queue
     */
    private List<PeekedMessageItemInternal> peekedMessageItemInternal = new LinkedList<>();

    /** Creates an instance of PeekedMessagesList class. */
    public PeekedMessagesList() {}

    /**
     * Get the peekedMessageItemInternal property: The object returned in the QueueMessageList array when calling Peek
     * Messages on a Queue.
     *
     * @return the peekedMessageItemInternal value.
     */
    public List<PeekedMessageItemInternal> getPeekedMessageItemInternal() {
        if (this.peekedMessageItemInternal == null) {
            this.peekedMessageItemInternal = new LinkedList<>();
        }
        return this.peekedMessageItemInternal;
    }

    /**
     * Set the peekedMessageItemInternal property: The object returned in the QueueMessageList array when calling Peek
     * Messages on a Queue.
     *
     * @param peekedMessageItemInternal the peekedMessageItemInternal value to set.
     * @return the PeekedMessagesList object itself.
     */
    public PeekedMessagesList setPeekedMessageItemInternal(List<PeekedMessageItemInternal> peekedMessageItemInternal) {
        this.peekedMessageItemInternal = peekedMessageItemInternal;
        return this;
    }

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {
        return toXml(xmlWriter, null);
    }

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter, String rootElementName) throws XMLStreamException {
        rootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "QueueMessagesList" : rootElementName;
        xmlWriter.writeStartElement(rootElementName);
        if (this.peekedMessageItemInternal != null) {
            for (PeekedMessageItemInternal element : this.peekedMessageItemInternal) {
                xmlWriter.writeXml(element, "QueueMessage");
            }
        }
        return xmlWriter.writeEndElement();
    }

    /**
     * Reads an instance of PeekedMessagesList from the XmlReader.
     *
     * @param xmlReader The XmlReader being read.
     * @return An instance of PeekedMessagesList if the XmlReader was pointing to an instance of it, or null if it was
     *     pointing to XML null.
     * @throws XMLStreamException If an error occurs while reading the PeekedMessagesList.
     */
    public static PeekedMessagesList fromXml(XmlReader xmlReader) throws XMLStreamException {
        return fromXml(xmlReader, null);
    }

    /**
     * Reads an instance of PeekedMessagesList from the XmlReader.
     *
     * @param xmlReader The XmlReader being read.
     * @param rootElementName Optional root element name to override the default defined by the model. Used to support
     *     cases where the model can deserialize from different root element names.
     * @return An instance of PeekedMessagesList if the XmlReader was pointing to an instance of it, or null if it was
     *     pointing to XML null.
     * @throws XMLStreamException If an error occurs while reading the PeekedMessagesList.
     */
    public static PeekedMessagesList fromXml(XmlReader xmlReader, String rootElementName) throws XMLStreamException {
        String finalRootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "QueueMessagesList" : rootElementName;
        return xmlReader.readObject(
                finalRootElementName,
                reader -> {
                    PeekedMessagesList deserializedPeekedMessagesList = new PeekedMessagesList();
                    while (reader.nextElement() != XmlToken.END_ELEMENT) {
                        QName elementName = reader.getElementName();

                        if ("QueueMessage".equals(elementName.getLocalPart())) {
                            if (deserializedPeekedMessagesList.peekedMessageItemInternal == null) {
                                deserializedPeekedMessagesList.peekedMessageItemInternal = new LinkedList<>();
                            }
                            deserializedPeekedMessagesList.peekedMessageItemInternal.add(
                                    PeekedMessageItemInternal.fromXml(reader, "QueueMessage"));
                        } else {
                            reader.skipElement();
                        }
                    }

                    return deserializedPeekedMessagesList;
                });
    }
}
