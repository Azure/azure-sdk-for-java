/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.storage.v2019_06_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.storage.v2019_06_01.QueueServices;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.storage.v2019_06_01.ListQueueServices;
import com.microsoft.azure.management.storage.v2019_06_01.QueueServiceProperties;

class QueueServicesImpl extends WrapperImpl<QueueServicesInner> implements QueueServices {
    private final StorageManager manager;

    QueueServicesImpl(StorageManager manager) {
        super(manager.inner().queueServices());
        this.manager = manager;
    }

    public StorageManager manager() {
        return this.manager;
    }

    @Override
    public QueueServicePropertiesImpl define(String name) {
        return wrapModel(name);
    }

    private QueueServicePropertiesImpl wrapModel(QueueServicePropertiesInner inner) {
        return  new QueueServicePropertiesImpl(inner, manager());
    }

    private QueueServicePropertiesImpl wrapModel(String name) {
        return new QueueServicePropertiesImpl(name, this.manager());
    }

    @Override
    public Observable<ListQueueServices> listAsync(String resourceGroupName, String accountName) {
        QueueServicesInner client = this.inner();
        return client.listAsync(resourceGroupName, accountName)
        .map(new Func1<ListQueueServicesInner, ListQueueServices>() {
            @Override
            public ListQueueServices call(ListQueueServicesInner inner) {
                return new ListQueueServicesImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<QueueServiceProperties> getServicePropertiesAsync(String resourceGroupName, String accountName) {
        QueueServicesInner client = this.inner();
        return client.getServicePropertiesAsync(resourceGroupName, accountName)
        .flatMap(new Func1<QueueServicePropertiesInner, Observable<QueueServiceProperties>>() {
            @Override
            public Observable<QueueServiceProperties> call(QueueServicePropertiesInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((QueueServiceProperties)wrapModel(inner));
                }
            }
       });
    }

}
