/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storage.v2019_06_01.implementation;

import com.microsoft.azure.management.storage.v2019_06_01.ObjectReplicationPolicy;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import org.joda.time.DateTime;
import java.util.List;
import com.microsoft.azure.management.storage.v2019_06_01.ObjectReplicationPolicyRule;

class ObjectReplicationPolicyImpl extends CreatableUpdatableImpl<ObjectReplicationPolicy, ObjectReplicationPolicyInner, ObjectReplicationPolicyImpl> implements ObjectReplicationPolicy, ObjectReplicationPolicy.Definition, ObjectReplicationPolicy.Update {
    private final StorageManager manager;
    private String resourceGroupName;
    private String accountName;
    private String objectReplicationPolicyId;

    ObjectReplicationPolicyImpl(String name, StorageManager manager) {
        super(name, new ObjectReplicationPolicyInner());
        this.manager = manager;
        // Set resource name
        this.objectReplicationPolicyId = name;
        //
    }

    ObjectReplicationPolicyImpl(ObjectReplicationPolicyInner inner, StorageManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.objectReplicationPolicyId = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.accountName = IdParsingUtils.getValueFromIdByName(inner.id(), "storageAccounts");
        this.objectReplicationPolicyId = IdParsingUtils.getValueFromIdByName(inner.id(), "objectReplicationPolicies");
        //
    }

    @Override
    public StorageManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ObjectReplicationPolicy> createResourceAsync() {
        ObjectReplicationPoliciesInner client = this.manager().inner().objectReplicationPolicies();
        return client.createOrUpdateAsync(this.resourceGroupName, this.accountName, this.objectReplicationPolicyId, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ObjectReplicationPolicy> updateResourceAsync() {
        ObjectReplicationPoliciesInner client = this.manager().inner().objectReplicationPolicies();
        return client.createOrUpdateAsync(this.resourceGroupName, this.accountName, this.objectReplicationPolicyId, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ObjectReplicationPolicyInner> getInnerAsync() {
        ObjectReplicationPoliciesInner client = this.manager().inner().objectReplicationPolicies();
        return client.getAsync(this.resourceGroupName, this.accountName, this.objectReplicationPolicyId);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String destinationAccount() {
        return this.inner().destinationAccount();
    }

    @Override
    public DateTime enabledTime() {
        return this.inner().enabledTime();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String policyId() {
        return this.inner().policyId();
    }

    @Override
    public List<ObjectReplicationPolicyRule> rules() {
        return this.inner().rules();
    }

    @Override
    public String sourceAccount() {
        return this.inner().sourceAccount();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ObjectReplicationPolicyImpl withExistingStorageAccount(String resourceGroupName, String accountName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        return this;
    }

    @Override
    public ObjectReplicationPolicyImpl withDestinationAccount(String destinationAccount) {
        this.inner().withDestinationAccount(destinationAccount);
        return this;
    }

    @Override
    public ObjectReplicationPolicyImpl withSourceAccount(String sourceAccount) {
        this.inner().withSourceAccount(sourceAccount);
        return this;
    }

    @Override
    public ObjectReplicationPolicyImpl withRules(List<ObjectReplicationPolicyRule> rules) {
        this.inner().withRules(rules);
        return this;
    }

}
