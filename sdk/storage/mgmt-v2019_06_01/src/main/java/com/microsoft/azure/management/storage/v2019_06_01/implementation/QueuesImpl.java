/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.storage.v2019_06_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.storage.v2019_06_01.Queues;
import rx.Completable;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.storage.v2019_06_01.StorageQueue;
import com.microsoft.azure.management.storage.v2019_06_01.ListQueue;

class QueuesImpl extends WrapperImpl<QueuesInner> implements Queues {
    private final StorageManager manager;

    QueuesImpl(StorageManager manager) {
        super(manager.inner().queues());
        this.manager = manager;
    }

    public StorageManager manager() {
        return this.manager;
    }

    @Override
    public StorageQueueImpl define(String name) {
        return wrapModel(name);
    }

    private StorageQueueImpl wrapModel(StorageQueueInner inner) {
        return  new StorageQueueImpl(inner, manager());
    }

    private StorageQueueImpl wrapModel(String name) {
        return new StorageQueueImpl(name, this.manager());
    }

    @Override
    public Observable<StorageQueue> getAsync(String resourceGroupName, String accountName, String queueName) {
        QueuesInner client = this.inner();
        return client.getAsync(resourceGroupName, accountName, queueName)
        .map(new Func1<StorageQueueInner, StorageQueue>() {
            @Override
            public StorageQueue call(StorageQueueInner inner) {
                return new StorageQueueImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String accountName, String queueName) {
        QueuesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, accountName, queueName).toCompletable();
    }

    @Override
    public Observable<ListQueue> listAsync(final String resourceGroupName, final String accountName) {
        QueuesInner client = this.inner();
        return client.listAsync(resourceGroupName, accountName)
        .flatMapIterable(new Func1<Page<ListQueueInner>, Iterable<ListQueueInner>>() {
            @Override
            public Iterable<ListQueueInner> call(Page<ListQueueInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ListQueueInner, ListQueue>() {
            @Override
            public ListQueue call(ListQueueInner inner) {
                return new ListQueueImpl(inner, manager());
            }
        });
    }

}
