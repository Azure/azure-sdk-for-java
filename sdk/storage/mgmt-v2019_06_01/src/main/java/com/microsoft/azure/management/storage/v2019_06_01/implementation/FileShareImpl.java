/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storage.v2019_06_01.implementation;

import com.microsoft.azure.management.storage.v2019_06_01.FileShare;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import org.joda.time.DateTime;
import java.util.Map;
import com.microsoft.azure.management.storage.v2019_06_01.EnabledProtocols;
import com.microsoft.azure.management.storage.v2019_06_01.RootSquashType;
import com.microsoft.azure.management.storage.v2019_06_01.ShareAccessTier;

class FileShareImpl extends CreatableUpdatableImpl<FileShare, FileShareInner, FileShareImpl> implements FileShare, FileShare.Definition, FileShare.Update {
    private final StorageManager manager;
    private String resourceGroupName;
    private String accountName;
    private String shareName;

    FileShareImpl(String name, StorageManager manager) {
        super(name, new FileShareInner());
        this.manager = manager;
        // Set resource name
        this.shareName = name;
        //
    }

    FileShareImpl(FileShareInner inner, StorageManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.shareName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.accountName = IdParsingUtils.getValueFromIdByName(inner.id(), "storageAccounts");
        this.shareName = IdParsingUtils.getValueFromIdByName(inner.id(), "shares");
        //
    }

    @Override
    public StorageManager manager() {
        return this.manager;
    }

    @Override
    public Observable<FileShare> createResourceAsync() {
        FileSharesInner client = this.manager().inner().fileShares();
        return client.createAsync(this.resourceGroupName, this.accountName, this.shareName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<FileShare> updateResourceAsync() {
        FileSharesInner client = this.manager().inner().fileShares();
        return client.updateAsync(this.resourceGroupName, this.accountName, this.shareName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<FileShareInner> getInnerAsync() {
        FileSharesInner client = this.manager().inner().fileShares();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public ShareAccessTier accessTier() {
        return this.inner().accessTier();
    }

    @Override
    public DateTime accessTierChangeTime() {
        return this.inner().accessTierChangeTime();
    }

    @Override
    public String accessTierStatus() {
        return this.inner().accessTierStatus();
    }

    @Override
    public Boolean deleted() {
        return this.inner().deleted();
    }

    @Override
    public DateTime deletedTime() {
        return this.inner().deletedTime();
    }

    @Override
    public EnabledProtocols enabledProtocols() {
        return this.inner().enabledProtocols();
    }

    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public DateTime lastModifiedTime() {
        return this.inner().lastModifiedTime();
    }

    @Override
    public Map<String, String> metadata() {
        return this.inner().metadata();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Integer remainingRetentionDays() {
        return this.inner().remainingRetentionDays();
    }

    @Override
    public RootSquashType rootSquash() {
        return this.inner().rootSquash();
    }

    @Override
    public Integer shareQuota() {
        return this.inner().shareQuota();
    }

    @Override
    public Long shareUsageBytes() {
        return this.inner().shareUsageBytes();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String version() {
        return this.inner().version();
    }

    @Override
    public FileShareImpl withExistingFileService(String resourceGroupName, String accountName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        return this;
    }

    @Override
    public FileShareImpl withAccessTier(ShareAccessTier accessTier) {
        this.inner().withAccessTier(accessTier);
        return this;
    }

    @Override
    public FileShareImpl withEnabledProtocols(EnabledProtocols enabledProtocols) {
        this.inner().withEnabledProtocols(enabledProtocols);
        return this;
    }

    @Override
    public FileShareImpl withMetadata(Map<String, String> metadata) {
        this.inner().withMetadata(metadata);
        return this;
    }

    @Override
    public FileShareImpl withRootSquash(RootSquashType rootSquash) {
        this.inner().withRootSquash(rootSquash);
        return this;
    }

    @Override
    public FileShareImpl withShareQuota(Integer shareQuota) {
        this.inner().withShareQuota(shareQuota);
        return this;
    }

}
