/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.storage.v2019_06_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.storage.v2019_06_01.FileShares;
import rx.Completable;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.storage.v2019_06_01.FileShareItem;
import com.microsoft.azure.management.storage.v2019_06_01.FileShare;

class FileSharesImpl extends WrapperImpl<FileSharesInner> implements FileShares {
    private final StorageManager manager;

    FileSharesImpl(StorageManager manager) {
        super(manager.inner().fileShares());
        this.manager = manager;
    }

    public StorageManager manager() {
        return this.manager;
    }

    @Override
    public FileShareImpl define(String name) {
        return wrapModel(name);
    }

    private FileShareImpl wrapModel(FileShareInner inner) {
        return  new FileShareImpl(inner, manager());
    }

    private FileShareImpl wrapModel(String name) {
        return new FileShareImpl(name, this.manager());
    }

    @Override
    public Observable<FileShareItem> listAsync(final String resourceGroupName, final String accountName) {
        FileSharesInner client = this.inner();
        return client.listAsync(resourceGroupName, accountName)
        .flatMapIterable(new Func1<Page<FileShareItemInner>, Iterable<FileShareItemInner>>() {
            @Override
            public Iterable<FileShareItemInner> call(Page<FileShareItemInner> page) {
                return page.items();
            }
        })
        .map(new Func1<FileShareItemInner, FileShareItem>() {
            @Override
            public FileShareItem call(FileShareItemInner inner) {
                return new FileShareItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<FileShare> getAsync(String resourceGroupName, String accountName, String shareName) {
        FileSharesInner client = this.inner();
        return client.getAsync(resourceGroupName, accountName, shareName)
        .map(new Func1<FileShareInner, FileShare>() {
            @Override
            public FileShare call(FileShareInner inner) {
                return new FileShareImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String accountName, String shareName) {
        FileSharesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, accountName, shareName).toCompletable();
    }

    @Override
    public Completable restoreAsync(String resourceGroupName, String accountName, String shareName, String deletedShareName, String deletedShareVersion) {
        FileSharesInner client = this.inner();
        return client.restoreAsync(resourceGroupName, accountName, shareName, deletedShareName, deletedShareVersion).toCompletable();
    }

}
