/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storage.v2019_06_01.implementation;

import com.microsoft.azure.management.storage.v2019_06_01.Table;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;

class TableImpl extends CreatableUpdatableImpl<Table, TableInner, TableImpl> implements Table, Table.Definition, Table.Update {
    private final StorageManager manager;
    private String resourceGroupName;
    private String accountName;
    private String tableName;

    TableImpl(String name, StorageManager manager) {
        super(name, new TableInner());
        this.manager = manager;
        // Set resource name
        this.tableName = name;
        //
    }

    TableImpl(TableInner inner, StorageManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.tableName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.accountName = IdParsingUtils.getValueFromIdByName(inner.id(), "storageAccounts");
        this.tableName = IdParsingUtils.getValueFromIdByName(inner.id(), "tables");
        //
    }

    @Override
    public StorageManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Table> createResourceAsync() {
        TablesInner client = this.manager().inner().tables();
        return client.createAsync(this.resourceGroupName, this.accountName, this.tableName)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Table> updateResourceAsync() {
        TablesInner client = this.manager().inner().tables();
        return client.updateAsync(this.resourceGroupName, this.accountName, this.tableName)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<TableInner> getInnerAsync() {
        TablesInner client = this.manager().inner().tables();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String tableName() {
        return this.inner().tableName();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public TableImpl withExistingTableService(String resourceGroupName, String accountName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        return this;
    }

}
