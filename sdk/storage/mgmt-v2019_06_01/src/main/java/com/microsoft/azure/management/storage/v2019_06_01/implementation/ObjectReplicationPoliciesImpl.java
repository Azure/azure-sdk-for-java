/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.storage.v2019_06_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.storage.v2019_06_01.ObjectReplicationPolicies;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.storage.v2019_06_01.ObjectReplicationPolicy;

class ObjectReplicationPoliciesImpl extends WrapperImpl<ObjectReplicationPoliciesInner> implements ObjectReplicationPolicies {
    private final StorageManager manager;

    ObjectReplicationPoliciesImpl(StorageManager manager) {
        super(manager.inner().objectReplicationPolicies());
        this.manager = manager;
    }

    public StorageManager manager() {
        return this.manager;
    }

    @Override
    public ObjectReplicationPolicyImpl define(String name) {
        return wrapModel(name);
    }

    private ObjectReplicationPolicyImpl wrapModel(ObjectReplicationPolicyInner inner) {
        return  new ObjectReplicationPolicyImpl(inner, manager());
    }

    private ObjectReplicationPolicyImpl wrapModel(String name) {
        return new ObjectReplicationPolicyImpl(name, this.manager());
    }

    @Override
    public Observable<ObjectReplicationPolicy> listAsync(String resourceGroupName, String accountName) {
        ObjectReplicationPoliciesInner client = this.inner();
        return client.listAsync(resourceGroupName, accountName)
        .flatMap(new Func1<List<ObjectReplicationPolicyInner>, Observable<ObjectReplicationPolicyInner>>() {
            @Override
            public Observable<ObjectReplicationPolicyInner> call(List<ObjectReplicationPolicyInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<ObjectReplicationPolicyInner, ObjectReplicationPolicy>() {
            @Override
            public ObjectReplicationPolicy call(ObjectReplicationPolicyInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<ObjectReplicationPolicy> getAsync(String resourceGroupName, String accountName, String objectReplicationPolicyId) {
        ObjectReplicationPoliciesInner client = this.inner();
        return client.getAsync(resourceGroupName, accountName, objectReplicationPolicyId)
        .flatMap(new Func1<ObjectReplicationPolicyInner, Observable<ObjectReplicationPolicy>>() {
            @Override
            public Observable<ObjectReplicationPolicy> call(ObjectReplicationPolicyInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((ObjectReplicationPolicy)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String accountName, String objectReplicationPolicyId) {
        ObjectReplicationPoliciesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, accountName, objectReplicationPolicyId).toCompletable();
    }

}
