// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storage.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storage.models.AccessTier;
import com.azure.resourcemanager.storage.models.AllowedCopyScope;
import com.azure.resourcemanager.storage.models.AzureFilesIdentityBasedAuthentication;
import com.azure.resourcemanager.storage.models.CustomDomain;
import com.azure.resourcemanager.storage.models.DnsEndpointType;
import com.azure.resourcemanager.storage.models.Encryption;
import com.azure.resourcemanager.storage.models.ImmutableStorageAccount;
import com.azure.resourcemanager.storage.models.KeyPolicy;
import com.azure.resourcemanager.storage.models.LargeFileSharesState;
import com.azure.resourcemanager.storage.models.MinimumTlsVersion;
import com.azure.resourcemanager.storage.models.NetworkRuleSet;
import com.azure.resourcemanager.storage.models.PublicNetworkAccess;
import com.azure.resourcemanager.storage.models.RoutingPreference;
import com.azure.resourcemanager.storage.models.SasPolicy;
import java.io.IOException;

/**
 * The parameters used when updating a storage account.
 */
@Fluent
public final class StorageAccountPropertiesUpdateParameters
    implements JsonSerializable<StorageAccountPropertiesUpdateParameters> {
    /*
     * Custom domain assigned to the storage account by the user. Name is the CNAME source. Only one custom domain is
     * supported per storage account at this time. To clear the existing custom domain, use an empty string for the
     * custom domain name property.
     */
    private CustomDomain customDomain;

    /*
     * Not applicable. Azure Storage encryption at rest is enabled by default for all storage accounts and cannot be
     * disabled.
     */
    private Encryption encryption;

    /*
     * SasPolicy assigned to the storage account.
     */
    private SasPolicy sasPolicy;

    /*
     * KeyPolicy assigned to the storage account.
     */
    private KeyPolicy keyPolicy;

    /*
     * Required for storage accounts where kind = BlobStorage. The access tier is used for billing. The 'Premium' access
     * tier is the default value for premium block blobs storage account type and it cannot be changed for the premium
     * block blobs storage account type.
     */
    private AccessTier accessTier;

    /*
     * Provides the identity based authentication settings for Azure Files.
     */
    private AzureFilesIdentityBasedAuthentication azureFilesIdentityBasedAuthentication;

    /*
     * Allows https traffic only to storage service if sets to true.
     */
    private Boolean enableHttpsTrafficOnly;

    /*
     * Enables Secure File Transfer Protocol, if set to true
     */
    private Boolean isSftpEnabled;

    /*
     * Enables local users feature, if set to true
     */
    private Boolean isLocalUserEnabled;

    /*
     * Enables extended group support with local users feature, if set to true
     */
    private Boolean enableExtendedGroups;

    /*
     * Network rule set
     */
    private NetworkRuleSet networkRuleSet;

    /*
     * Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
     */
    private LargeFileSharesState largeFileSharesState;

    /*
     * Maintains information about the network routing choice opted by the user for data transfer
     */
    private RoutingPreference routingPreference;

    /*
     * Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is
     * false for this property.
     */
    private Boolean allowBlobPublicAccess;

    /*
     * Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for
     * this property.
     */
    private MinimumTlsVersion minimumTlsVersion;

    /*
     * Indicates whether the storage account permits requests to be authorized with the account access key via Shared
     * Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active
     * Directory (Azure AD). The default value is null, which is equivalent to true.
     */
    private Boolean allowSharedKeyAccess;

    /*
     * Allow or disallow cross AAD tenant object replication. Set this property to true for new or existing accounts
     * only if object replication policies will involve storage accounts in different AAD tenants. The default
     * interpretation is false for new accounts to follow best security practices by default.
     */
    private Boolean allowCrossTenantReplication;

    /*
     * A boolean flag which indicates whether the default authentication is OAuth or not. The default interpretation is
     * false for this property.
     */
    private Boolean defaultToOAuthAuthentication;

    /*
     * Allow, disallow, or let Network Security Perimeter configuration to evaluate public network access to Storage
     * Account. Value is optional but if passed in, must be 'Enabled', 'Disabled' or 'SecuredByPerimeter'.
     */
    private PublicNetworkAccess publicNetworkAccess;

    /*
     * The property is immutable and can only be set to true at the account creation time. When set to true, it enables
     * object level immutability for all the containers in the account by default.
     */
    private ImmutableStorageAccount immutableStorageWithVersioning;

    /*
     * Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet.
     */
    private AllowedCopyScope allowedCopyScope;

    /*
     * Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a
     * single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric
     * DNS Zone identifier.
     */
    private DnsEndpointType dnsEndpointType;

    /**
     * Creates an instance of StorageAccountPropertiesUpdateParameters class.
     */
    public StorageAccountPropertiesUpdateParameters() {
    }

    /**
     * Get the customDomain property: Custom domain assigned to the storage account by the user. Name is the CNAME
     * source. Only one custom domain is supported per storage account at this time. To clear the existing custom
     * domain, use an empty string for the custom domain name property.
     * 
     * @return the customDomain value.
     */
    public CustomDomain customDomain() {
        return this.customDomain;
    }

    /**
     * Set the customDomain property: Custom domain assigned to the storage account by the user. Name is the CNAME
     * source. Only one custom domain is supported per storage account at this time. To clear the existing custom
     * domain, use an empty string for the custom domain name property.
     * 
     * @param customDomain the customDomain value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters withCustomDomain(CustomDomain customDomain) {
        this.customDomain = customDomain;
        return this;
    }

    /**
     * Get the encryption property: Not applicable. Azure Storage encryption at rest is enabled by default for all
     * storage accounts and cannot be disabled.
     * 
     * @return the encryption value.
     */
    public Encryption encryption() {
        return this.encryption;
    }

    /**
     * Set the encryption property: Not applicable. Azure Storage encryption at rest is enabled by default for all
     * storage accounts and cannot be disabled.
     * 
     * @param encryption the encryption value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters withEncryption(Encryption encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Get the sasPolicy property: SasPolicy assigned to the storage account.
     * 
     * @return the sasPolicy value.
     */
    public SasPolicy sasPolicy() {
        return this.sasPolicy;
    }

    /**
     * Set the sasPolicy property: SasPolicy assigned to the storage account.
     * 
     * @param sasPolicy the sasPolicy value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters withSasPolicy(SasPolicy sasPolicy) {
        this.sasPolicy = sasPolicy;
        return this;
    }

    /**
     * Get the keyPolicy property: KeyPolicy assigned to the storage account.
     * 
     * @return the keyPolicy value.
     */
    public KeyPolicy keyPolicy() {
        return this.keyPolicy;
    }

    /**
     * Set the keyPolicy property: KeyPolicy assigned to the storage account.
     * 
     * @param keyPolicy the keyPolicy value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters withKeyPolicy(KeyPolicy keyPolicy) {
        this.keyPolicy = keyPolicy;
        return this;
    }

    /**
     * Get the accessTier property: Required for storage accounts where kind = BlobStorage. The access tier is used for
     * billing. The 'Premium' access tier is the default value for premium block blobs storage account type and it
     * cannot be changed for the premium block blobs storage account type.
     * 
     * @return the accessTier value.
     */
    public AccessTier accessTier() {
        return this.accessTier;
    }

    /**
     * Set the accessTier property: Required for storage accounts where kind = BlobStorage. The access tier is used for
     * billing. The 'Premium' access tier is the default value for premium block blobs storage account type and it
     * cannot be changed for the premium block blobs storage account type.
     * 
     * @param accessTier the accessTier value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters withAccessTier(AccessTier accessTier) {
        this.accessTier = accessTier;
        return this;
    }

    /**
     * Get the azureFilesIdentityBasedAuthentication property: Provides the identity based authentication settings for
     * Azure Files.
     * 
     * @return the azureFilesIdentityBasedAuthentication value.
     */
    public AzureFilesIdentityBasedAuthentication azureFilesIdentityBasedAuthentication() {
        return this.azureFilesIdentityBasedAuthentication;
    }

    /**
     * Set the azureFilesIdentityBasedAuthentication property: Provides the identity based authentication settings for
     * Azure Files.
     * 
     * @param azureFilesIdentityBasedAuthentication the azureFilesIdentityBasedAuthentication value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters withAzureFilesIdentityBasedAuthentication(
        AzureFilesIdentityBasedAuthentication azureFilesIdentityBasedAuthentication) {
        this.azureFilesIdentityBasedAuthentication = azureFilesIdentityBasedAuthentication;
        return this;
    }

    /**
     * Get the enableHttpsTrafficOnly property: Allows https traffic only to storage service if sets to true.
     * 
     * @return the enableHttpsTrafficOnly value.
     */
    public Boolean enableHttpsTrafficOnly() {
        return this.enableHttpsTrafficOnly;
    }

    /**
     * Set the enableHttpsTrafficOnly property: Allows https traffic only to storage service if sets to true.
     * 
     * @param enableHttpsTrafficOnly the enableHttpsTrafficOnly value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters withEnableHttpsTrafficOnly(Boolean enableHttpsTrafficOnly) {
        this.enableHttpsTrafficOnly = enableHttpsTrafficOnly;
        return this;
    }

    /**
     * Get the isSftpEnabled property: Enables Secure File Transfer Protocol, if set to true.
     * 
     * @return the isSftpEnabled value.
     */
    public Boolean isSftpEnabled() {
        return this.isSftpEnabled;
    }

    /**
     * Set the isSftpEnabled property: Enables Secure File Transfer Protocol, if set to true.
     * 
     * @param isSftpEnabled the isSftpEnabled value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters withIsSftpEnabled(Boolean isSftpEnabled) {
        this.isSftpEnabled = isSftpEnabled;
        return this;
    }

    /**
     * Get the isLocalUserEnabled property: Enables local users feature, if set to true.
     * 
     * @return the isLocalUserEnabled value.
     */
    public Boolean isLocalUserEnabled() {
        return this.isLocalUserEnabled;
    }

    /**
     * Set the isLocalUserEnabled property: Enables local users feature, if set to true.
     * 
     * @param isLocalUserEnabled the isLocalUserEnabled value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters withIsLocalUserEnabled(Boolean isLocalUserEnabled) {
        this.isLocalUserEnabled = isLocalUserEnabled;
        return this;
    }

    /**
     * Get the enableExtendedGroups property: Enables extended group support with local users feature, if set to true.
     * 
     * @return the enableExtendedGroups value.
     */
    public Boolean enableExtendedGroups() {
        return this.enableExtendedGroups;
    }

    /**
     * Set the enableExtendedGroups property: Enables extended group support with local users feature, if set to true.
     * 
     * @param enableExtendedGroups the enableExtendedGroups value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters withEnableExtendedGroups(Boolean enableExtendedGroups) {
        this.enableExtendedGroups = enableExtendedGroups;
        return this;
    }

    /**
     * Get the networkRuleSet property: Network rule set.
     * 
     * @return the networkRuleSet value.
     */
    public NetworkRuleSet networkRuleSet() {
        return this.networkRuleSet;
    }

    /**
     * Set the networkRuleSet property: Network rule set.
     * 
     * @param networkRuleSet the networkRuleSet value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters withNetworkRuleSet(NetworkRuleSet networkRuleSet) {
        this.networkRuleSet = networkRuleSet;
        return this;
    }

    /**
     * Get the largeFileSharesState property: Allow large file shares if sets to Enabled. It cannot be disabled once it
     * is enabled.
     * 
     * @return the largeFileSharesState value.
     */
    public LargeFileSharesState largeFileSharesState() {
        return this.largeFileSharesState;
    }

    /**
     * Set the largeFileSharesState property: Allow large file shares if sets to Enabled. It cannot be disabled once it
     * is enabled.
     * 
     * @param largeFileSharesState the largeFileSharesState value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters
        withLargeFileSharesState(LargeFileSharesState largeFileSharesState) {
        this.largeFileSharesState = largeFileSharesState;
        return this;
    }

    /**
     * Get the routingPreference property: Maintains information about the network routing choice opted by the user for
     * data transfer.
     * 
     * @return the routingPreference value.
     */
    public RoutingPreference routingPreference() {
        return this.routingPreference;
    }

    /**
     * Set the routingPreference property: Maintains information about the network routing choice opted by the user for
     * data transfer.
     * 
     * @param routingPreference the routingPreference value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters withRoutingPreference(RoutingPreference routingPreference) {
        this.routingPreference = routingPreference;
        return this;
    }

    /**
     * Get the allowBlobPublicAccess property: Allow or disallow public access to all blobs or containers in the storage
     * account. The default interpretation is false for this property.
     * 
     * @return the allowBlobPublicAccess value.
     */
    public Boolean allowBlobPublicAccess() {
        return this.allowBlobPublicAccess;
    }

    /**
     * Set the allowBlobPublicAccess property: Allow or disallow public access to all blobs or containers in the storage
     * account. The default interpretation is false for this property.
     * 
     * @param allowBlobPublicAccess the allowBlobPublicAccess value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters withAllowBlobPublicAccess(Boolean allowBlobPublicAccess) {
        this.allowBlobPublicAccess = allowBlobPublicAccess;
        return this;
    }

    /**
     * Get the minimumTlsVersion property: Set the minimum TLS version to be permitted on requests to storage. The
     * default interpretation is TLS 1.0 for this property.
     * 
     * @return the minimumTlsVersion value.
     */
    public MinimumTlsVersion minimumTlsVersion() {
        return this.minimumTlsVersion;
    }

    /**
     * Set the minimumTlsVersion property: Set the minimum TLS version to be permitted on requests to storage. The
     * default interpretation is TLS 1.0 for this property.
     * 
     * @param minimumTlsVersion the minimumTlsVersion value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters withMinimumTlsVersion(MinimumTlsVersion minimumTlsVersion) {
        this.minimumTlsVersion = minimumTlsVersion;
        return this;
    }

    /**
     * Get the allowSharedKeyAccess property: Indicates whether the storage account permits requests to be authorized
     * with the account access key via Shared Key. If false, then all requests, including shared access signatures, must
     * be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true.
     * 
     * @return the allowSharedKeyAccess value.
     */
    public Boolean allowSharedKeyAccess() {
        return this.allowSharedKeyAccess;
    }

    /**
     * Set the allowSharedKeyAccess property: Indicates whether the storage account permits requests to be authorized
     * with the account access key via Shared Key. If false, then all requests, including shared access signatures, must
     * be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true.
     * 
     * @param allowSharedKeyAccess the allowSharedKeyAccess value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters withAllowSharedKeyAccess(Boolean allowSharedKeyAccess) {
        this.allowSharedKeyAccess = allowSharedKeyAccess;
        return this;
    }

    /**
     * Get the allowCrossTenantReplication property: Allow or disallow cross AAD tenant object replication. Set this
     * property to true for new or existing accounts only if object replication policies will involve storage accounts
     * in different AAD tenants. The default interpretation is false for new accounts to follow best security practices
     * by default.
     * 
     * @return the allowCrossTenantReplication value.
     */
    public Boolean allowCrossTenantReplication() {
        return this.allowCrossTenantReplication;
    }

    /**
     * Set the allowCrossTenantReplication property: Allow or disallow cross AAD tenant object replication. Set this
     * property to true for new or existing accounts only if object replication policies will involve storage accounts
     * in different AAD tenants. The default interpretation is false for new accounts to follow best security practices
     * by default.
     * 
     * @param allowCrossTenantReplication the allowCrossTenantReplication value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters
        withAllowCrossTenantReplication(Boolean allowCrossTenantReplication) {
        this.allowCrossTenantReplication = allowCrossTenantReplication;
        return this;
    }

    /**
     * Get the defaultToOAuthAuthentication property: A boolean flag which indicates whether the default authentication
     * is OAuth or not. The default interpretation is false for this property.
     * 
     * @return the defaultToOAuthAuthentication value.
     */
    public Boolean defaultToOAuthAuthentication() {
        return this.defaultToOAuthAuthentication;
    }

    /**
     * Set the defaultToOAuthAuthentication property: A boolean flag which indicates whether the default authentication
     * is OAuth or not. The default interpretation is false for this property.
     * 
     * @param defaultToOAuthAuthentication the defaultToOAuthAuthentication value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters
        withDefaultToOAuthAuthentication(Boolean defaultToOAuthAuthentication) {
        this.defaultToOAuthAuthentication = defaultToOAuthAuthentication;
        return this;
    }

    /**
     * Get the publicNetworkAccess property: Allow, disallow, or let Network Security Perimeter configuration to
     * evaluate public network access to Storage Account. Value is optional but if passed in, must be 'Enabled',
     * 'Disabled' or 'SecuredByPerimeter'.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Allow, disallow, or let Network Security Perimeter configuration to
     * evaluate public network access to Storage Account. Value is optional but if passed in, must be 'Enabled',
     * 'Disabled' or 'SecuredByPerimeter'.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Get the immutableStorageWithVersioning property: The property is immutable and can only be set to true at the
     * account creation time. When set to true, it enables object level immutability for all the containers in the
     * account by default.
     * 
     * @return the immutableStorageWithVersioning value.
     */
    public ImmutableStorageAccount immutableStorageWithVersioning() {
        return this.immutableStorageWithVersioning;
    }

    /**
     * Set the immutableStorageWithVersioning property: The property is immutable and can only be set to true at the
     * account creation time. When set to true, it enables object level immutability for all the containers in the
     * account by default.
     * 
     * @param immutableStorageWithVersioning the immutableStorageWithVersioning value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters
        withImmutableStorageWithVersioning(ImmutableStorageAccount immutableStorageWithVersioning) {
        this.immutableStorageWithVersioning = immutableStorageWithVersioning;
        return this;
    }

    /**
     * Get the allowedCopyScope property: Restrict copy to and from Storage Accounts within an AAD tenant or with
     * Private Links to the same VNet.
     * 
     * @return the allowedCopyScope value.
     */
    public AllowedCopyScope allowedCopyScope() {
        return this.allowedCopyScope;
    }

    /**
     * Set the allowedCopyScope property: Restrict copy to and from Storage Accounts within an AAD tenant or with
     * Private Links to the same VNet.
     * 
     * @param allowedCopyScope the allowedCopyScope value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters withAllowedCopyScope(AllowedCopyScope allowedCopyScope) {
        this.allowedCopyScope = allowedCopyScope;
        return this;
    }

    /**
     * Get the dnsEndpointType property: Allows you to specify the type of endpoint. Set this to AzureDNSZone to create
     * a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint
     * URL will have an alphanumeric DNS Zone identifier.
     * 
     * @return the dnsEndpointType value.
     */
    public DnsEndpointType dnsEndpointType() {
        return this.dnsEndpointType;
    }

    /**
     * Set the dnsEndpointType property: Allows you to specify the type of endpoint. Set this to AzureDNSZone to create
     * a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint
     * URL will have an alphanumeric DNS Zone identifier.
     * 
     * @param dnsEndpointType the dnsEndpointType value to set.
     * @return the StorageAccountPropertiesUpdateParameters object itself.
     */
    public StorageAccountPropertiesUpdateParameters withDnsEndpointType(DnsEndpointType dnsEndpointType) {
        this.dnsEndpointType = dnsEndpointType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (customDomain() != null) {
            customDomain().validate();
        }
        if (encryption() != null) {
            encryption().validate();
        }
        if (sasPolicy() != null) {
            sasPolicy().validate();
        }
        if (keyPolicy() != null) {
            keyPolicy().validate();
        }
        if (azureFilesIdentityBasedAuthentication() != null) {
            azureFilesIdentityBasedAuthentication().validate();
        }
        if (networkRuleSet() != null) {
            networkRuleSet().validate();
        }
        if (routingPreference() != null) {
            routingPreference().validate();
        }
        if (immutableStorageWithVersioning() != null) {
            immutableStorageWithVersioning().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("customDomain", this.customDomain);
        jsonWriter.writeJsonField("encryption", this.encryption);
        jsonWriter.writeJsonField("sasPolicy", this.sasPolicy);
        jsonWriter.writeJsonField("keyPolicy", this.keyPolicy);
        jsonWriter.writeStringField("accessTier", this.accessTier == null ? null : this.accessTier.toString());
        jsonWriter.writeJsonField("azureFilesIdentityBasedAuthentication", this.azureFilesIdentityBasedAuthentication);
        jsonWriter.writeBooleanField("supportsHttpsTrafficOnly", this.enableHttpsTrafficOnly);
        jsonWriter.writeBooleanField("isSftpEnabled", this.isSftpEnabled);
        jsonWriter.writeBooleanField("isLocalUserEnabled", this.isLocalUserEnabled);
        jsonWriter.writeBooleanField("enableExtendedGroups", this.enableExtendedGroups);
        jsonWriter.writeJsonField("networkAcls", this.networkRuleSet);
        jsonWriter.writeStringField("largeFileSharesState",
            this.largeFileSharesState == null ? null : this.largeFileSharesState.toString());
        jsonWriter.writeJsonField("routingPreference", this.routingPreference);
        jsonWriter.writeBooleanField("allowBlobPublicAccess", this.allowBlobPublicAccess);
        jsonWriter.writeStringField("minimumTlsVersion",
            this.minimumTlsVersion == null ? null : this.minimumTlsVersion.toString());
        jsonWriter.writeBooleanField("allowSharedKeyAccess", this.allowSharedKeyAccess);
        jsonWriter.writeBooleanField("allowCrossTenantReplication", this.allowCrossTenantReplication);
        jsonWriter.writeBooleanField("defaultToOAuthAuthentication", this.defaultToOAuthAuthentication);
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        jsonWriter.writeJsonField("immutableStorageWithVersioning", this.immutableStorageWithVersioning);
        jsonWriter.writeStringField("allowedCopyScope",
            this.allowedCopyScope == null ? null : this.allowedCopyScope.toString());
        jsonWriter.writeStringField("dnsEndpointType",
            this.dnsEndpointType == null ? null : this.dnsEndpointType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageAccountPropertiesUpdateParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageAccountPropertiesUpdateParameters if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageAccountPropertiesUpdateParameters.
     */
    public static StorageAccountPropertiesUpdateParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageAccountPropertiesUpdateParameters deserializedStorageAccountPropertiesUpdateParameters
                = new StorageAccountPropertiesUpdateParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("customDomain".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.customDomain = CustomDomain.fromJson(reader);
                } else if ("encryption".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.encryption = Encryption.fromJson(reader);
                } else if ("sasPolicy".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.sasPolicy = SasPolicy.fromJson(reader);
                } else if ("keyPolicy".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.keyPolicy = KeyPolicy.fromJson(reader);
                } else if ("accessTier".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.accessTier
                        = AccessTier.fromString(reader.getString());
                } else if ("azureFilesIdentityBasedAuthentication".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.azureFilesIdentityBasedAuthentication
                        = AzureFilesIdentityBasedAuthentication.fromJson(reader);
                } else if ("supportsHttpsTrafficOnly".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.enableHttpsTrafficOnly
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isSftpEnabled".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.isSftpEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isLocalUserEnabled".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.isLocalUserEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("enableExtendedGroups".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.enableExtendedGroups
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("networkAcls".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.networkRuleSet
                        = NetworkRuleSet.fromJson(reader);
                } else if ("largeFileSharesState".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.largeFileSharesState
                        = LargeFileSharesState.fromString(reader.getString());
                } else if ("routingPreference".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.routingPreference
                        = RoutingPreference.fromJson(reader);
                } else if ("allowBlobPublicAccess".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.allowBlobPublicAccess
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("minimumTlsVersion".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.minimumTlsVersion
                        = MinimumTlsVersion.fromString(reader.getString());
                } else if ("allowSharedKeyAccess".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.allowSharedKeyAccess
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("allowCrossTenantReplication".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.allowCrossTenantReplication
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("defaultToOAuthAuthentication".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.defaultToOAuthAuthentication
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.publicNetworkAccess
                        = PublicNetworkAccess.fromString(reader.getString());
                } else if ("immutableStorageWithVersioning".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.immutableStorageWithVersioning
                        = ImmutableStorageAccount.fromJson(reader);
                } else if ("allowedCopyScope".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.allowedCopyScope
                        = AllowedCopyScope.fromString(reader.getString());
                } else if ("dnsEndpointType".equals(fieldName)) {
                    deserializedStorageAccountPropertiesUpdateParameters.dnsEndpointType
                        = DnsEndpointType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageAccountPropertiesUpdateParameters;
        });
    }
}
