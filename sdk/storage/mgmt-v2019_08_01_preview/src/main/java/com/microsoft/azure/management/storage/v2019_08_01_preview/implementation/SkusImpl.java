/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.storage.v2019_08_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.storage.v2019_08_01_preview.Skus;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.arm.utils.PagedListConverter;
import com.microsoft.azure.management.storage.v2019_08_01_preview.SkuInformation;

class SkusImpl extends WrapperImpl<SkusInner> implements Skus {
    private PagedListConverter<SkuInformationInner, SkuInformation> converter;
    private final StorageManager manager;

    SkusImpl(StorageManager manager) {
        super(manager.inner().skus());
        this.manager = manager;
        this.converter = new PagedListConverter<SkuInformationInner, SkuInformation>() {
            @Override
            public Observable<SkuInformation> typeConvertAsync(SkuInformationInner inner) {
                return Observable.just((SkuInformation) wrapModel(inner));
            }
        };
    }

    public StorageManager manager() {
        return this.manager;
    }

    private SkuInformationImpl wrapModel(SkuInformationInner inner) {
        return  new SkuInformationImpl(inner, manager());
    }

    @Override
    public PagedList<SkuInformation> list() {
        SkusInner client = this.inner();
        return converter.convert(client.list());
    }

    @Override
    public Observable<SkuInformation> listAsync() {
        SkusInner client = this.inner();
        return client.listAsync()
        .flatMap(new Func1<Page<SkuInformationInner>, Observable<SkuInformationInner>>() {
            @Override
            public Observable<SkuInformationInner> call(Page<SkuInformationInner> innerPage) {
                return Observable.from(innerPage.items());
            }
        })
        .map(new Func1<SkuInformationInner, SkuInformation>() {
            @Override
            public SkuInformation call(SkuInformationInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
