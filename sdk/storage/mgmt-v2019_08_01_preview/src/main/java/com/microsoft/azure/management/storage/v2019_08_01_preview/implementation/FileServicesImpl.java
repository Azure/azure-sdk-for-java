/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.storage.v2019_08_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.storage.v2019_08_01_preview.FileServices;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.storage.v2019_08_01_preview.FileServiceItems;
import com.microsoft.azure.management.storage.v2019_08_01_preview.FileServiceProperties;

class FileServicesImpl extends WrapperImpl<FileServicesInner> implements FileServices {
    private final StorageManager manager;

    FileServicesImpl(StorageManager manager) {
        super(manager.inner().fileServices());
        this.manager = manager;
    }

    public StorageManager manager() {
        return this.manager;
    }

    @Override
    public FileServicePropertiesImpl define(String name) {
        return wrapModel(name);
    }

    private FileServicePropertiesImpl wrapModel(FileServicePropertiesInner inner) {
        return  new FileServicePropertiesImpl(inner, manager());
    }

    private FileServicePropertiesImpl wrapModel(String name) {
        return new FileServicePropertiesImpl(name, this.manager());
    }

    @Override
    public Observable<FileServiceItems> listAsync(String resourceGroupName, String accountName) {
        FileServicesInner client = this.inner();
        return client.listAsync(resourceGroupName, accountName)
        .map(new Func1<FileServiceItemsInner, FileServiceItems>() {
            @Override
            public FileServiceItems call(FileServiceItemsInner inner) {
                return new FileServiceItemsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<FileServiceProperties> getServicePropertiesAsync(String resourceGroupName, String accountName) {
        FileServicesInner client = this.inner();
        return client.getServicePropertiesAsync(resourceGroupName, accountName)
        .flatMap(new Func1<FileServicePropertiesInner, Observable<FileServiceProperties>>() {
            @Override
            public Observable<FileServiceProperties> call(FileServicePropertiesInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((FileServiceProperties)wrapModel(inner));
                }
            }
       });
    }

}
