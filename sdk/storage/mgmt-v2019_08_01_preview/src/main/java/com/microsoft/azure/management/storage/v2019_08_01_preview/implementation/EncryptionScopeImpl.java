/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storage.v2019_08_01_preview.implementation;

import com.microsoft.azure.management.storage.v2019_08_01_preview.EncryptionScope;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.storage.v2019_08_01_preview.EncryptionScopeSource;
import com.microsoft.azure.management.storage.v2019_08_01_preview.EncryptionScopeState;
import org.joda.time.DateTime;
import com.microsoft.azure.management.storage.v2019_08_01_preview.EncryptionScopeKeyVaultProperties;

class EncryptionScopeImpl extends CreatableUpdatableImpl<EncryptionScope, EncryptionScopeInner, EncryptionScopeImpl> implements EncryptionScope, EncryptionScope.Definition, EncryptionScope.Update {
    private final StorageManager manager;
    private String resourceGroupName;
    private String accountName;
    private String encryptionScopeName;

    EncryptionScopeImpl(String name, StorageManager manager) {
        super(name, new EncryptionScopeInner());
        this.manager = manager;
        // Set resource name
        this.encryptionScopeName = name;
        //
    }

    EncryptionScopeImpl(EncryptionScopeInner inner, StorageManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.encryptionScopeName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.accountName = IdParsingUtils.getValueFromIdByName(inner.id(), "storageAccounts");
        this.encryptionScopeName = IdParsingUtils.getValueFromIdByName(inner.id(), "encryptionScopes");
        //
    }

    @Override
    public StorageManager manager() {
        return this.manager;
    }

    @Override
    public Observable<EncryptionScope> createResourceAsync() {
        EncryptionScopesInner client = this.manager().inner().encryptionScopes();
        return client.putAsync(this.resourceGroupName, this.accountName, this.encryptionScopeName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<EncryptionScope> updateResourceAsync() {
        EncryptionScopesInner client = this.manager().inner().encryptionScopes();
        return client.patchAsync(this.resourceGroupName, this.accountName, this.encryptionScopeName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<EncryptionScopeInner> getInnerAsync() {
        EncryptionScopesInner client = this.manager().inner().encryptionScopes();
        return client.getAsync(this.resourceGroupName, this.accountName, this.encryptionScopeName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public DateTime creationTime() {
        return this.inner().creationTime();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public EncryptionScopeKeyVaultProperties keyVaultProperties() {
        return this.inner().keyVaultProperties();
    }

    @Override
    public DateTime lastModifiedTime() {
        return this.inner().lastModifiedTime();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public EncryptionScopeSource source() {
        return this.inner().source();
    }

    @Override
    public EncryptionScopeState state() {
        return this.inner().state();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public EncryptionScopeImpl withExistingStorageAccount(String resourceGroupName, String accountName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        return this;
    }

    @Override
    public EncryptionScopeImpl withKeyVaultProperties(EncryptionScopeKeyVaultProperties keyVaultProperties) {
        this.inner().withKeyVaultProperties(keyVaultProperties);
        return this;
    }

    @Override
    public EncryptionScopeImpl withSource(EncryptionScopeSource source) {
        this.inner().withSource(source);
        return this;
    }

    @Override
    public EncryptionScopeImpl withState(EncryptionScopeState state) {
        this.inner().withState(state);
        return this;
    }

}
