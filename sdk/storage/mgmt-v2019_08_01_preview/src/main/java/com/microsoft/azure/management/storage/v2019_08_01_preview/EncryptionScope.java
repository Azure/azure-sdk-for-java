/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storage.v2019_08_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.storage.v2019_08_01_preview.implementation.EncryptionScopeInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.storage.v2019_08_01_preview.implementation.StorageManager;
import org.joda.time.DateTime;

/**
 * Type representing EncryptionScope.
 */
public interface EncryptionScope extends HasInner<EncryptionScopeInner>, Indexable, Refreshable<EncryptionScope>, Updatable<EncryptionScope.Update>, HasManager<StorageManager> {
    /**
     * @return the creationTime value.
     */
    DateTime creationTime();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the keyVaultProperties value.
     */
    EncryptionScopeKeyVaultProperties keyVaultProperties();

    /**
     * @return the lastModifiedTime value.
     */
    DateTime lastModifiedTime();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the source value.
     */
    EncryptionScopeSource source();

    /**
     * @return the state value.
     */
    EncryptionScopeState state();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the EncryptionScope definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithStorageAccount, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of EncryptionScope definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a EncryptionScope definition.
         */
        interface Blank extends WithStorageAccount {
        }

        /**
         * The stage of the encryptionscope definition allowing to specify StorageAccount.
         */
        interface WithStorageAccount {
           /**
            * Specifies resourceGroupName, accountName.
            * @param resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive
            * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only
            * @return the next definition stage
            */
            WithCreate withExistingStorageAccount(String resourceGroupName, String accountName);
        }

        /**
         * The stage of the encryptionscope definition allowing to specify KeyVaultProperties.
         */
        interface WithKeyVaultProperties {
            /**
             * Specifies keyVaultProperties.
             * @param keyVaultProperties The key vault properties for the encryption scope. This is a required field if encryption scope 'source' attribute is set to 'Microsoft.KeyVault'
             * @return the next definition stage
             */
            WithCreate withKeyVaultProperties(EncryptionScopeKeyVaultProperties keyVaultProperties);
        }

        /**
         * The stage of the encryptionscope definition allowing to specify Source.
         */
        interface WithSource {
            /**
             * Specifies source.
             * @param source The provider for the encryption scope. Possible values (case-insensitive):  Microsoft.Storage, Microsoft.KeyVault. Possible values include: 'Microsoft.Storage', 'Microsoft.KeyVault'
             * @return the next definition stage
             */
            WithCreate withSource(EncryptionScopeSource source);
        }

        /**
         * The stage of the encryptionscope definition allowing to specify State.
         */
        interface WithState {
            /**
             * Specifies state.
             * @param state The state of the encryption scope. Possible values (case-insensitive):  Enabled, Disabled. Possible values include: 'Enabled', 'Disabled'
             * @return the next definition stage
             */
            WithCreate withState(EncryptionScopeState state);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<EncryptionScope>, DefinitionStages.WithKeyVaultProperties, DefinitionStages.WithSource, DefinitionStages.WithState {
        }
    }
    /**
     * The template for a EncryptionScope update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<EncryptionScope>, UpdateStages.WithKeyVaultProperties, UpdateStages.WithSource, UpdateStages.WithState {
    }

    /**
     * Grouping of EncryptionScope update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the encryptionscope update allowing to specify KeyVaultProperties.
         */
        interface WithKeyVaultProperties {
            /**
             * Specifies keyVaultProperties.
             * @param keyVaultProperties The key vault properties for the encryption scope. This is a required field if encryption scope 'source' attribute is set to 'Microsoft.KeyVault'
             * @return the next update stage
             */
            Update withKeyVaultProperties(EncryptionScopeKeyVaultProperties keyVaultProperties);
        }

        /**
         * The stage of the encryptionscope update allowing to specify Source.
         */
        interface WithSource {
            /**
             * Specifies source.
             * @param source The provider for the encryption scope. Possible values (case-insensitive):  Microsoft.Storage, Microsoft.KeyVault. Possible values include: 'Microsoft.Storage', 'Microsoft.KeyVault'
             * @return the next update stage
             */
            Update withSource(EncryptionScopeSource source);
        }

        /**
         * The stage of the encryptionscope update allowing to specify State.
         */
        interface WithState {
            /**
             * Specifies state.
             * @param state The state of the encryption scope. Possible values (case-insensitive):  Enabled, Disabled. Possible values include: 'Enabled', 'Disabled'
             * @return the next update stage
             */
            Update withState(EncryptionScopeState state);
        }

    }
}
