/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.storage.v2018_07_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.storage.v2018_07_01.BlobServices;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.storage.v2018_07_01.BlobServiceProperties;

class BlobServicesImpl extends WrapperImpl<BlobServicesInner> implements BlobServices {
    private final StorageManager manager;

    BlobServicesImpl(StorageManager manager) {
        super(manager.inner().blobServices());
        this.manager = manager;
    }

    public StorageManager manager() {
        return this.manager;
    }

    @Override
    public BlobServicePropertiesImpl define(String name) {
        return wrapModel(name);
    }

    private BlobServicePropertiesImpl wrapModel(BlobServicePropertiesInner inner) {
        return  new BlobServicePropertiesImpl(inner, manager());
    }

    private BlobServicePropertiesImpl wrapModel(String name) {
        return new BlobServicePropertiesImpl(name, this.manager());
    }

    @Override
    public Observable<BlobServiceProperties> getServicePropertiesAsync(String resourceGroupName, String accountName) {
        BlobServicesInner client = this.inner();
        return client.getServicePropertiesAsync(resourceGroupName, accountName)
        .flatMap(new Func1<BlobServicePropertiesInner, Observable<BlobServiceProperties>>() {
            @Override
            public Observable<BlobServiceProperties> call(BlobServicePropertiesInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((BlobServiceProperties)wrapModel(inner));
                }
            }
       });
    }

}
