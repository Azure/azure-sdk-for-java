/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storage.v2016_01_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.storage.v2016_01_01.StorageAccount;
import rx.Observable;
import com.microsoft.azure.management.storage.v2016_01_01.StorageAccountUpdateParameters;
import com.microsoft.azure.management.storage.v2016_01_01.StorageAccountCreateParameters;
import com.microsoft.azure.management.storage.v2016_01_01.AccessTier;
import org.joda.time.DateTime;
import com.microsoft.azure.management.storage.v2016_01_01.CustomDomain;
import com.microsoft.azure.management.storage.v2016_01_01.Encryption;
import com.microsoft.azure.management.storage.v2016_01_01.Kind;
import com.microsoft.azure.management.storage.v2016_01_01.Endpoints;
import com.microsoft.azure.management.storage.v2016_01_01.ProvisioningState;
import com.microsoft.azure.management.storage.v2016_01_01.Sku;
import com.microsoft.azure.management.storage.v2016_01_01.AccountStatus;
import rx.functions.Func1;

class StorageAccountImpl extends GroupableResourceCoreImpl<StorageAccount, StorageAccountInner, StorageAccountImpl, StorageManager> implements StorageAccount, StorageAccount.Definition, StorageAccount.Update {
    private StorageAccountCreateParameters createParameter;
    private StorageAccountUpdateParameters updateParameter;
    StorageAccountImpl(String name, StorageAccountInner inner, StorageManager manager) {
        super(name, inner, manager);
        this.createParameter = new StorageAccountCreateParameters();
        this.updateParameter = new StorageAccountUpdateParameters();
    }

    @Override
    public Observable<StorageAccount> createResourceAsync() {
        StorageAccountsInner client = this.manager().inner().storageAccounts();
        this.createParameter.withLocation(inner().location());
        this.createParameter.withTags(inner().getTags());
        return client.createAsync(this.resourceGroupName(), this.name(), this.createParameter)
            .map(new Func1<StorageAccountInner, StorageAccountInner>() {
               @Override
               public StorageAccountInner call(StorageAccountInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<StorageAccount> updateResourceAsync() {
        StorageAccountsInner client = this.manager().inner().storageAccounts();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.updateParameter)
            .map(new Func1<StorageAccountInner, StorageAccountInner>() {
               @Override
               public StorageAccountInner call(StorageAccountInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<StorageAccountInner> getInnerAsync() {
        StorageAccountsInner client = this.manager().inner().storageAccounts();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createParameter = new StorageAccountCreateParameters();
        this.updateParameter = new StorageAccountUpdateParameters();
    }

    @Override
    public AccessTier accessTier() {
        return this.inner().accessTier();
    }

    @Override
    public DateTime creationTime() {
        return this.inner().creationTime();
    }

    @Override
    public CustomDomain customDomain() {
        return this.inner().customDomain();
    }

    @Override
    public Encryption encryption() {
        return this.inner().encryption();
    }

    @Override
    public Kind kind() {
        return this.inner().kind();
    }

    @Override
    public DateTime lastGeoFailoverTime() {
        return this.inner().lastGeoFailoverTime();
    }

    @Override
    public Endpoints primaryEndpoints() {
        return this.inner().primaryEndpoints();
    }

    @Override
    public String primaryLocation() {
        return this.inner().primaryLocation();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public Endpoints secondaryEndpoints() {
        return this.inner().secondaryEndpoints();
    }

    @Override
    public String secondaryLocation() {
        return this.inner().secondaryLocation();
    }

    @Override
    public Sku sku() {
        return this.inner().sku();
    }

    @Override
    public AccountStatus statusOfPrimary() {
        return this.inner().statusOfPrimary();
    }

    @Override
    public AccountStatus statusOfSecondary() {
        return this.inner().statusOfSecondary();
    }

    @Override
    public StorageAccountImpl withKind(Kind kind) {
        this.createParameter.withKind(kind);
        return this;
    }

    @Override
    public StorageAccountImpl withSku(Sku sku) {
        if (isInCreateMode()) {
            this.createParameter.withSku(sku);
        } else {
            this.updateParameter.withSku(sku);
        }
        return this;
    }

    @Override
    public StorageAccountImpl withAccessTier(AccessTier accessTier) {
        if (isInCreateMode()) {
            this.createParameter.withAccessTier(accessTier);
        } else {
            this.updateParameter.withAccessTier(accessTier);
        }
        return this;
    }

    @Override
    public StorageAccountImpl withCustomDomain(CustomDomain customDomain) {
        if (isInCreateMode()) {
            this.createParameter.withCustomDomain(customDomain);
        } else {
            this.updateParameter.withCustomDomain(customDomain);
        }
        return this;
    }

    @Override
    public StorageAccountImpl withEncryption(Encryption encryption) {
        if (isInCreateMode()) {
            this.createParameter.withEncryption(encryption);
        } else {
            this.updateParameter.withEncryption(encryption);
        }
        return this;
    }

}
