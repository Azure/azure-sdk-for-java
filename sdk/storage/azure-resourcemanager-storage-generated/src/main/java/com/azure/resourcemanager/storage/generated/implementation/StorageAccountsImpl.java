// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storage.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.storage.generated.fluent.StorageAccountsClient;
import com.azure.resourcemanager.storage.generated.fluent.models.BlobRestoreStatusInner;
import com.azure.resourcemanager.storage.generated.fluent.models.CheckNameAvailabilityResultInner;
import com.azure.resourcemanager.storage.generated.fluent.models.ListAccountSasResponseInner;
import com.azure.resourcemanager.storage.generated.fluent.models.ListServiceSasResponseInner;
import com.azure.resourcemanager.storage.generated.fluent.models.StorageAccountInner;
import com.azure.resourcemanager.storage.generated.fluent.models.StorageAccountListKeysResultInner;
import com.azure.resourcemanager.storage.generated.models.AccountSasParameters;
import com.azure.resourcemanager.storage.generated.models.BlobRestoreParameters;
import com.azure.resourcemanager.storage.generated.models.BlobRestoreStatus;
import com.azure.resourcemanager.storage.generated.models.CheckNameAvailabilityResult;
import com.azure.resourcemanager.storage.generated.models.ListAccountSasResponse;
import com.azure.resourcemanager.storage.generated.models.ListKeyExpand;
import com.azure.resourcemanager.storage.generated.models.ListServiceSasResponse;
import com.azure.resourcemanager.storage.generated.models.ServiceSasParameters;
import com.azure.resourcemanager.storage.generated.models.StorageAccount;
import com.azure.resourcemanager.storage.generated.models.StorageAccountCheckNameAvailabilityParameters;
import com.azure.resourcemanager.storage.generated.models.StorageAccountExpand;
import com.azure.resourcemanager.storage.generated.models.StorageAccountListKeysResult;
import com.azure.resourcemanager.storage.generated.models.StorageAccountRegenerateKeyParameters;
import com.azure.resourcemanager.storage.generated.models.StorageAccounts;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class StorageAccountsImpl implements StorageAccounts {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(StorageAccountsImpl.class);

    private final StorageAccountsClient innerClient;

    private final com.azure.resourcemanager.storage.generated.StorageManager serviceManager;

    public StorageAccountsImpl(
        StorageAccountsClient innerClient, com.azure.resourcemanager.storage.generated.StorageManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public CheckNameAvailabilityResult checkNameAvailability(
        StorageAccountCheckNameAvailabilityParameters accountName) {
        CheckNameAvailabilityResultInner inner = this.serviceClient().checkNameAvailability(accountName);
        if (inner != null) {
            return new CheckNameAvailabilityResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CheckNameAvailabilityResult> checkNameAvailabilityWithResponse(
        StorageAccountCheckNameAvailabilityParameters accountName, Context context) {
        Response<CheckNameAvailabilityResultInner> inner =
            this.serviceClient().checkNameAvailabilityWithResponse(accountName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CheckNameAvailabilityResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String accountName) {
        this.serviceClient().delete(resourceGroupName, accountName);
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String accountName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, accountName, context);
    }

    public StorageAccount getByResourceGroup(String resourceGroupName, String accountName) {
        StorageAccountInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, accountName);
        if (inner != null) {
            return new StorageAccountImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StorageAccount> getByResourceGroupWithResponse(
        String resourceGroupName, String accountName, StorageAccountExpand expand, Context context) {
        Response<StorageAccountInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, accountName, expand, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StorageAccountImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<StorageAccount> list() {
        PagedIterable<StorageAccountInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new StorageAccountImpl(inner1, this.manager()));
    }

    public PagedIterable<StorageAccount> list(Context context) {
        PagedIterable<StorageAccountInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new StorageAccountImpl(inner1, this.manager()));
    }

    public PagedIterable<StorageAccount> listByResourceGroup(String resourceGroupName) {
        PagedIterable<StorageAccountInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new StorageAccountImpl(inner1, this.manager()));
    }

    public PagedIterable<StorageAccount> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<StorageAccountInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new StorageAccountImpl(inner1, this.manager()));
    }

    public StorageAccountListKeysResult listKeys(String resourceGroupName, String accountName) {
        StorageAccountListKeysResultInner inner = this.serviceClient().listKeys(resourceGroupName, accountName);
        if (inner != null) {
            return new StorageAccountListKeysResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StorageAccountListKeysResult> listKeysWithResponse(
        String resourceGroupName, String accountName, ListKeyExpand expand, Context context) {
        Response<StorageAccountListKeysResultInner> inner =
            this.serviceClient().listKeysWithResponse(resourceGroupName, accountName, expand, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StorageAccountListKeysResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StorageAccountListKeysResult regenerateKey(
        String resourceGroupName, String accountName, StorageAccountRegenerateKeyParameters regenerateKey) {
        StorageAccountListKeysResultInner inner =
            this.serviceClient().regenerateKey(resourceGroupName, accountName, regenerateKey);
        if (inner != null) {
            return new StorageAccountListKeysResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StorageAccountListKeysResult> regenerateKeyWithResponse(
        String resourceGroupName,
        String accountName,
        StorageAccountRegenerateKeyParameters regenerateKey,
        Context context) {
        Response<StorageAccountListKeysResultInner> inner =
            this.serviceClient().regenerateKeyWithResponse(resourceGroupName, accountName, regenerateKey, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StorageAccountListKeysResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ListAccountSasResponse listAccountSas(
        String resourceGroupName, String accountName, AccountSasParameters parameters) {
        ListAccountSasResponseInner inner =
            this.serviceClient().listAccountSas(resourceGroupName, accountName, parameters);
        if (inner != null) {
            return new ListAccountSasResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ListAccountSasResponse> listAccountSasWithResponse(
        String resourceGroupName, String accountName, AccountSasParameters parameters, Context context) {
        Response<ListAccountSasResponseInner> inner =
            this.serviceClient().listAccountSasWithResponse(resourceGroupName, accountName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ListAccountSasResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ListServiceSasResponse listServiceSas(
        String resourceGroupName, String accountName, ServiceSasParameters parameters) {
        ListServiceSasResponseInner inner =
            this.serviceClient().listServiceSas(resourceGroupName, accountName, parameters);
        if (inner != null) {
            return new ListServiceSasResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ListServiceSasResponse> listServiceSasWithResponse(
        String resourceGroupName, String accountName, ServiceSasParameters parameters, Context context) {
        Response<ListServiceSasResponseInner> inner =
            this.serviceClient().listServiceSasWithResponse(resourceGroupName, accountName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ListServiceSasResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void failover(String resourceGroupName, String accountName) {
        this.serviceClient().failover(resourceGroupName, accountName);
    }

    public void failover(String resourceGroupName, String accountName, Context context) {
        this.serviceClient().failover(resourceGroupName, accountName, context);
    }

    public BlobRestoreStatus restoreBlobRanges(
        String resourceGroupName, String accountName, BlobRestoreParameters parameters) {
        BlobRestoreStatusInner inner =
            this.serviceClient().restoreBlobRanges(resourceGroupName, accountName, parameters);
        if (inner != null) {
            return new BlobRestoreStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public BlobRestoreStatus restoreBlobRanges(
        String resourceGroupName, String accountName, BlobRestoreParameters parameters, Context context) {
        BlobRestoreStatusInner inner =
            this.serviceClient().restoreBlobRanges(resourceGroupName, accountName, parameters, context);
        if (inner != null) {
            return new BlobRestoreStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void revokeUserDelegationKeys(String resourceGroupName, String accountName) {
        this.serviceClient().revokeUserDelegationKeys(resourceGroupName, accountName);
    }

    public Response<Void> revokeUserDelegationKeysWithResponse(
        String resourceGroupName, String accountName, Context context) {
        return this.serviceClient().revokeUserDelegationKeysWithResponse(resourceGroupName, accountName, context);
    }

    public StorageAccount getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "storageAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'storageAccounts'.", id)));
        }
        StorageAccountExpand localExpand = null;
        return this
            .getByResourceGroupWithResponse(resourceGroupName, accountName, localExpand, Context.NONE)
            .getValue();
    }

    public Response<StorageAccount> getByIdWithResponse(String id, StorageAccountExpand expand, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "storageAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'storageAccounts'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, accountName, expand, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "storageAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'storageAccounts'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, accountName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "storageAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'storageAccounts'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, accountName, context);
    }

    private StorageAccountsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.storage.generated.StorageManager manager() {
        return this.serviceManager;
    }

    public StorageAccountImpl define(String name) {
        return new StorageAccountImpl(name, this.manager());
    }
}
