// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storage.generated.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.storage.generated.fluent.models.ImmutabilityPolicyInner;

/** An immutable client-side representation of ImmutabilityPolicy. */
public interface ImmutabilityPolicy {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the etag property: Resource Etag.
     *
     * @return the etag value.
     */
    String etag();

    /**
     * Gets the immutabilityPeriodSinceCreationInDays property: The immutability period for the blobs in the container
     * since the policy creation, in days.
     *
     * @return the immutabilityPeriodSinceCreationInDays value.
     */
    Integer immutabilityPeriodSinceCreationInDays();

    /**
     * Gets the state property: The ImmutabilityPolicy state of a blob container, possible values include: Locked and
     * Unlocked.
     *
     * @return the state value.
     */
    ImmutabilityPolicyState state();

    /**
     * Gets the allowProtectedAppendWrites property: This property can only be changed for unlocked time-based retention
     * policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and
     * compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property
     * cannot be changed with ExtendImmutabilityPolicy API.
     *
     * @return the allowProtectedAppendWrites value.
     */
    Boolean allowProtectedAppendWrites();

    /**
     * Gets the inner com.azure.resourcemanager.storage.generated.fluent.models.ImmutabilityPolicyInner object.
     *
     * @return the inner object.
     */
    ImmutabilityPolicyInner innerModel();

    /** The entirety of the ImmutabilityPolicy definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The ImmutabilityPolicy definition stages. */
    interface DefinitionStages {
        /** The first stage of the ImmutabilityPolicy definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the ImmutabilityPolicy definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, accountName.
             *
             * @param resourceGroupName The name of the resource group within the user's subscription. The name is case
             *     insensitive.
             * @param accountName The name of the storage account within the specified resource group. Storage account
             *     names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
             * @return the next definition stage.
             */
            WithCreate withExistingStorageAccount(String resourceGroupName, String accountName);
        }
        /**
         * The stage of the ImmutabilityPolicy definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithImmutabilityPeriodSinceCreationInDays,
                DefinitionStages.WithAllowProtectedAppendWrites,
                DefinitionStages.WithIfMatch {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            ImmutabilityPolicy create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ImmutabilityPolicy create(Context context);
        }
        /** The stage of the ImmutabilityPolicy definition allowing to specify immutabilityPeriodSinceCreationInDays. */
        interface WithImmutabilityPeriodSinceCreationInDays {
            /**
             * Specifies the immutabilityPeriodSinceCreationInDays property: The immutability period for the blobs in
             * the container since the policy creation, in days..
             *
             * @param immutabilityPeriodSinceCreationInDays The immutability period for the blobs in the container since
             *     the policy creation, in days.
             * @return the next definition stage.
             */
            WithCreate withImmutabilityPeriodSinceCreationInDays(Integer immutabilityPeriodSinceCreationInDays);
        }
        /** The stage of the ImmutabilityPolicy definition allowing to specify allowProtectedAppendWrites. */
        interface WithAllowProtectedAppendWrites {
            /**
             * Specifies the allowProtectedAppendWrites property: This property can only be changed for unlocked
             * time-based retention policies. When enabled, new blocks can be written to an append blob while
             * maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks
             * cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
             *
             * @param allowProtectedAppendWrites This property can only be changed for unlocked time-based retention
             *     policies. When enabled, new blocks can be written to an append blob while maintaining immutability
             *     protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or
             *     deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
             * @return the next definition stage.
             */
            WithCreate withAllowProtectedAppendWrites(Boolean allowProtectedAppendWrites);
        }
        /** The stage of the ImmutabilityPolicy definition allowing to specify ifMatch. */
        interface WithIfMatch {
            /**
             * Specifies the ifMatch property: The entity state (ETag) version of the immutability policy to update. A
             * value of "*" can be used to apply the operation only if the immutability policy already exists. If
             * omitted, this operation will always be applied..
             *
             * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of "*" can
             *     be used to apply the operation only if the immutability policy already exists. If omitted, this
             *     operation will always be applied.
             * @return the next definition stage.
             */
            WithCreate withIfMatch(String ifMatch);
        }
    }
    /**
     * Begins update for the ImmutabilityPolicy resource.
     *
     * @return the stage of resource update.
     */
    ImmutabilityPolicy.Update update();

    /** The template for ImmutabilityPolicy update. */
    interface Update
        extends UpdateStages.WithImmutabilityPeriodSinceCreationInDays,
            UpdateStages.WithAllowProtectedAppendWrites,
            UpdateStages.WithIfMatch {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        ImmutabilityPolicy apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ImmutabilityPolicy apply(Context context);
    }
    /** The ImmutabilityPolicy update stages. */
    interface UpdateStages {
        /** The stage of the ImmutabilityPolicy update allowing to specify immutabilityPeriodSinceCreationInDays. */
        interface WithImmutabilityPeriodSinceCreationInDays {
            /**
             * Specifies the immutabilityPeriodSinceCreationInDays property: The immutability period for the blobs in
             * the container since the policy creation, in days..
             *
             * @param immutabilityPeriodSinceCreationInDays The immutability period for the blobs in the container since
             *     the policy creation, in days.
             * @return the next definition stage.
             */
            Update withImmutabilityPeriodSinceCreationInDays(Integer immutabilityPeriodSinceCreationInDays);
        }
        /** The stage of the ImmutabilityPolicy update allowing to specify allowProtectedAppendWrites. */
        interface WithAllowProtectedAppendWrites {
            /**
             * Specifies the allowProtectedAppendWrites property: This property can only be changed for unlocked
             * time-based retention policies. When enabled, new blocks can be written to an append blob while
             * maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks
             * cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
             *
             * @param allowProtectedAppendWrites This property can only be changed for unlocked time-based retention
             *     policies. When enabled, new blocks can be written to an append blob while maintaining immutability
             *     protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or
             *     deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
             * @return the next definition stage.
             */
            Update withAllowProtectedAppendWrites(Boolean allowProtectedAppendWrites);
        }
        /** The stage of the ImmutabilityPolicy update allowing to specify ifMatch. */
        interface WithIfMatch {
            /**
             * Specifies the ifMatch property: The entity state (ETag) version of the immutability policy to update. A
             * value of "*" can be used to apply the operation only if the immutability policy already exists. If
             * omitted, this operation will always be applied..
             *
             * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of "*" can
             *     be used to apply the operation only if the immutability policy already exists. If omitted, this
             *     operation will always be applied.
             * @return the next definition stage.
             */
            Update withIfMatch(String ifMatch);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    ImmutabilityPolicy refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ImmutabilityPolicy refresh(Context context);
}
