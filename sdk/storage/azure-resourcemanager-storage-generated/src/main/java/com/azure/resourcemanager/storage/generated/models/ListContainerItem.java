// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storage.generated.models;

import com.azure.resourcemanager.storage.generated.fluent.models.ListContainerItemInner;
import java.time.OffsetDateTime;
import java.util.Map;

/** An immutable client-side representation of ListContainerItem. */
public interface ListContainerItem {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the etag property: Resource Etag.
     *
     * @return the etag value.
     */
    String etag();

    /**
     * Gets the version property: The version of the deleted blob container.
     *
     * @return the version value.
     */
    String version();

    /**
     * Gets the deleted property: Indicates whether the blob container was deleted.
     *
     * @return the deleted value.
     */
    Boolean deleted();

    /**
     * Gets the deletedTime property: Blob container deletion time.
     *
     * @return the deletedTime value.
     */
    OffsetDateTime deletedTime();

    /**
     * Gets the remainingRetentionDays property: Remaining retention days for soft deleted blob container.
     *
     * @return the remainingRetentionDays value.
     */
    Integer remainingRetentionDays();

    /**
     * Gets the defaultEncryptionScope property: Default the container to use specified encryption scope for all writes.
     *
     * @return the defaultEncryptionScope value.
     */
    String defaultEncryptionScope();

    /**
     * Gets the denyEncryptionScopeOverride property: Block override of encryption scope from the container default.
     *
     * @return the denyEncryptionScopeOverride value.
     */
    Boolean denyEncryptionScopeOverride();

    /**
     * Gets the publicAccess property: Specifies whether data in the container may be accessed publicly and the level of
     * access.
     *
     * @return the publicAccess value.
     */
    PublicAccess publicAccess();

    /**
     * Gets the lastModifiedTime property: Returns the date and time the container was last modified.
     *
     * @return the lastModifiedTime value.
     */
    OffsetDateTime lastModifiedTime();

    /**
     * Gets the leaseStatus property: The lease status of the container.
     *
     * @return the leaseStatus value.
     */
    LeaseStatus leaseStatus();

    /**
     * Gets the leaseState property: Lease state of the container.
     *
     * @return the leaseState value.
     */
    LeaseState leaseState();

    /**
     * Gets the leaseDuration property: Specifies whether the lease on a container is of infinite or fixed duration,
     * only when the container is leased.
     *
     * @return the leaseDuration value.
     */
    LeaseDuration leaseDuration();

    /**
     * Gets the metadata property: A name-value pair to associate with the container as metadata.
     *
     * @return the metadata value.
     */
    Map<String, String> metadata();

    /**
     * Gets the immutabilityPolicy property: The ImmutabilityPolicy property of the container.
     *
     * @return the immutabilityPolicy value.
     */
    ImmutabilityPolicyProperties immutabilityPolicy();

    /**
     * Gets the legalHold property: The LegalHold property of the container.
     *
     * @return the legalHold value.
     */
    LegalHoldProperties legalHold();

    /**
     * Gets the hasLegalHold property: The hasLegalHold public property is set to true by SRP if there are at least one
     * existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared
     * out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.
     *
     * @return the hasLegalHold value.
     */
    Boolean hasLegalHold();

    /**
     * Gets the hasImmutabilityPolicy property: The hasImmutabilityPolicy public property is set to true by SRP if
     * ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public property is set to false
     * by SRP if ImmutabilityPolicy has not been created for this container.
     *
     * @return the hasImmutabilityPolicy value.
     */
    Boolean hasImmutabilityPolicy();

    /**
     * Gets the inner com.azure.resourcemanager.storage.generated.fluent.models.ListContainerItemInner object.
     *
     * @return the inner object.
     */
    ListContainerItemInner innerModel();
}
