// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storage.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.storage.generated.fluent.FileServicesClient;
import com.azure.resourcemanager.storage.generated.fluent.models.FileServiceItemsInner;
import com.azure.resourcemanager.storage.generated.fluent.models.FileServicePropertiesInner;
import com.azure.resourcemanager.storage.generated.models.FileServiceItems;
import com.azure.resourcemanager.storage.generated.models.FileServiceProperties;
import com.azure.resourcemanager.storage.generated.models.FileServices;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class FileServicesImpl implements FileServices {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(FileServicesImpl.class);

    private final FileServicesClient innerClient;

    private final com.azure.resourcemanager.storage.generated.StorageManager serviceManager;

    public FileServicesImpl(
        FileServicesClient innerClient, com.azure.resourcemanager.storage.generated.StorageManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public FileServiceItems list(String resourceGroupName, String accountName) {
        FileServiceItemsInner inner = this.serviceClient().list(resourceGroupName, accountName);
        if (inner != null) {
            return new FileServiceItemsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<FileServiceItems> listWithResponse(String resourceGroupName, String accountName, Context context) {
        Response<FileServiceItemsInner> inner =
            this.serviceClient().listWithResponse(resourceGroupName, accountName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new FileServiceItemsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public FileServiceProperties getServiceProperties(String resourceGroupName, String accountName) {
        FileServicePropertiesInner inner = this.serviceClient().getServiceProperties(resourceGroupName, accountName);
        if (inner != null) {
            return new FileServicePropertiesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<FileServiceProperties> getServicePropertiesWithResponse(
        String resourceGroupName, String accountName, Context context) {
        Response<FileServicePropertiesInner> inner =
            this.serviceClient().getServicePropertiesWithResponse(resourceGroupName, accountName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new FileServicePropertiesImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public FileServiceProperties getServicePropertiesById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "storageAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'storageAccounts'.", id)));
        }
        return this.getServicePropertiesWithResponse(resourceGroupName, accountName, Context.NONE).getValue();
    }

    public Response<FileServiceProperties> getServicePropertiesByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "storageAccounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'storageAccounts'.", id)));
        }
        return this.getServicePropertiesWithResponse(resourceGroupName, accountName, context);
    }

    private FileServicesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.storage.generated.StorageManager manager() {
        return this.serviceManager;
    }

    public FileServicePropertiesImpl define() {
        return new FileServicePropertiesImpl(this.manager());
    }
}
