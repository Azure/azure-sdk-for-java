// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storage.generated.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.storage.generated.fluent.models.FileShareInner;
import java.time.OffsetDateTime;
import java.util.Map;

/** An immutable client-side representation of FileShare. */
public interface FileShare {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the etag property: Resource Etag.
     *
     * @return the etag value.
     */
    String etag();

    /**
     * Gets the lastModifiedTime property: Returns the date and time the share was last modified.
     *
     * @return the lastModifiedTime value.
     */
    OffsetDateTime lastModifiedTime();

    /**
     * Gets the metadata property: A name-value pair to associate with the share as metadata.
     *
     * @return the metadata value.
     */
    Map<String, String> metadata();

    /**
     * Gets the shareQuota property: The maximum size of the share, in gigabytes. Must be greater than 0, and less than
     * or equal to 5TB (5120). For Large File Shares, the maximum size is 102400.
     *
     * @return the shareQuota value.
     */
    Integer shareQuota();

    /**
     * Gets the enabledProtocols property: The authentication protocol that is used for the file share. Can only be
     * specified when creating a share.
     *
     * @return the enabledProtocols value.
     */
    EnabledProtocols enabledProtocols();

    /**
     * Gets the rootSquash property: The property is for NFS share only. The default is NoRootSquash.
     *
     * @return the rootSquash value.
     */
    RootSquashType rootSquash();

    /**
     * Gets the version property: The version of the share.
     *
     * @return the version value.
     */
    String version();

    /**
     * Gets the deleted property: Indicates whether the share was deleted.
     *
     * @return the deleted value.
     */
    Boolean deleted();

    /**
     * Gets the deletedTime property: The deleted time if the share was deleted.
     *
     * @return the deletedTime value.
     */
    OffsetDateTime deletedTime();

    /**
     * Gets the remainingRetentionDays property: Remaining retention days for share that was soft deleted.
     *
     * @return the remainingRetentionDays value.
     */
    Integer remainingRetentionDays();

    /**
     * Gets the accessTier property: Access tier for specific share. GpV2 account can choose between
     * TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium.
     *
     * @return the accessTier value.
     */
    ShareAccessTier accessTier();

    /**
     * Gets the accessTierChangeTime property: Indicates the last modification time for share access tier.
     *
     * @return the accessTierChangeTime value.
     */
    OffsetDateTime accessTierChangeTime();

    /**
     * Gets the accessTierStatus property: Indicates if there is a pending transition for access tier.
     *
     * @return the accessTierStatus value.
     */
    String accessTierStatus();

    /**
     * Gets the shareUsageBytes property: The approximate size of the data stored on the share. Note that this value may
     * not include all recently created or recently resized files.
     *
     * @return the shareUsageBytes value.
     */
    Long shareUsageBytes();

    /**
     * Gets the inner com.azure.resourcemanager.storage.generated.fluent.models.FileShareInner object.
     *
     * @return the inner object.
     */
    FileShareInner innerModel();

    /** The entirety of the FileShare definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The FileShare definition stages. */
    interface DefinitionStages {
        /** The first stage of the FileShare definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the FileShare definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, accountName.
             *
             * @param resourceGroupName The name of the resource group within the user's subscription. The name is case
             *     insensitive.
             * @param accountName The name of the storage account within the specified resource group. Storage account
             *     names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
             * @return the next definition stage.
             */
            WithCreate withExistingStorageAccount(String resourceGroupName, String accountName);
        }
        /**
         * The stage of the FileShare definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithMetadata,
                DefinitionStages.WithShareQuota,
                DefinitionStages.WithEnabledProtocols,
                DefinitionStages.WithRootSquash,
                DefinitionStages.WithAccessTier {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            FileShare create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            FileShare create(Context context);
        }
        /** The stage of the FileShare definition allowing to specify metadata. */
        interface WithMetadata {
            /**
             * Specifies the metadata property: A name-value pair to associate with the share as metadata..
             *
             * @param metadata A name-value pair to associate with the share as metadata.
             * @return the next definition stage.
             */
            WithCreate withMetadata(Map<String, String> metadata);
        }
        /** The stage of the FileShare definition allowing to specify shareQuota. */
        interface WithShareQuota {
            /**
             * Specifies the shareQuota property: The maximum size of the share, in gigabytes. Must be greater than 0,
             * and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400..
             *
             * @param shareQuota The maximum size of the share, in gigabytes. Must be greater than 0, and less than or
             *     equal to 5TB (5120). For Large File Shares, the maximum size is 102400.
             * @return the next definition stage.
             */
            WithCreate withShareQuota(Integer shareQuota);
        }
        /** The stage of the FileShare definition allowing to specify enabledProtocols. */
        interface WithEnabledProtocols {
            /**
             * Specifies the enabledProtocols property: The authentication protocol that is used for the file share. Can
             * only be specified when creating a share..
             *
             * @param enabledProtocols The authentication protocol that is used for the file share. Can only be
             *     specified when creating a share.
             * @return the next definition stage.
             */
            WithCreate withEnabledProtocols(EnabledProtocols enabledProtocols);
        }
        /** The stage of the FileShare definition allowing to specify rootSquash. */
        interface WithRootSquash {
            /**
             * Specifies the rootSquash property: The property is for NFS share only. The default is NoRootSquash..
             *
             * @param rootSquash The property is for NFS share only. The default is NoRootSquash.
             * @return the next definition stage.
             */
            WithCreate withRootSquash(RootSquashType rootSquash);
        }
        /** The stage of the FileShare definition allowing to specify accessTier. */
        interface WithAccessTier {
            /**
             * Specifies the accessTier property: Access tier for specific share. GpV2 account can choose between
             * TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium..
             *
             * @param accessTier Access tier for specific share. GpV2 account can choose between TransactionOptimized
             *     (default), Hot, and Cool. FileStorage account can choose Premium.
             * @return the next definition stage.
             */
            WithCreate withAccessTier(ShareAccessTier accessTier);
        }
    }
    /**
     * Begins update for the FileShare resource.
     *
     * @return the stage of resource update.
     */
    FileShare.Update update();

    /** The template for FileShare update. */
    interface Update
        extends UpdateStages.WithMetadata,
            UpdateStages.WithShareQuota,
            UpdateStages.WithEnabledProtocols,
            UpdateStages.WithRootSquash,
            UpdateStages.WithAccessTier {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        FileShare apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        FileShare apply(Context context);
    }
    /** The FileShare update stages. */
    interface UpdateStages {
        /** The stage of the FileShare update allowing to specify metadata. */
        interface WithMetadata {
            /**
             * Specifies the metadata property: A name-value pair to associate with the share as metadata..
             *
             * @param metadata A name-value pair to associate with the share as metadata.
             * @return the next definition stage.
             */
            Update withMetadata(Map<String, String> metadata);
        }
        /** The stage of the FileShare update allowing to specify shareQuota. */
        interface WithShareQuota {
            /**
             * Specifies the shareQuota property: The maximum size of the share, in gigabytes. Must be greater than 0,
             * and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400..
             *
             * @param shareQuota The maximum size of the share, in gigabytes. Must be greater than 0, and less than or
             *     equal to 5TB (5120). For Large File Shares, the maximum size is 102400.
             * @return the next definition stage.
             */
            Update withShareQuota(Integer shareQuota);
        }
        /** The stage of the FileShare update allowing to specify enabledProtocols. */
        interface WithEnabledProtocols {
            /**
             * Specifies the enabledProtocols property: The authentication protocol that is used for the file share. Can
             * only be specified when creating a share..
             *
             * @param enabledProtocols The authentication protocol that is used for the file share. Can only be
             *     specified when creating a share.
             * @return the next definition stage.
             */
            Update withEnabledProtocols(EnabledProtocols enabledProtocols);
        }
        /** The stage of the FileShare update allowing to specify rootSquash. */
        interface WithRootSquash {
            /**
             * Specifies the rootSquash property: The property is for NFS share only. The default is NoRootSquash..
             *
             * @param rootSquash The property is for NFS share only. The default is NoRootSquash.
             * @return the next definition stage.
             */
            Update withRootSquash(RootSquashType rootSquash);
        }
        /** The stage of the FileShare update allowing to specify accessTier. */
        interface WithAccessTier {
            /**
             * Specifies the accessTier property: Access tier for specific share. GpV2 account can choose between
             * TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium..
             *
             * @param accessTier Access tier for specific share. GpV2 account can choose between TransactionOptimized
             *     (default), Hot, and Cool. FileStorage account can choose Premium.
             * @return the next definition stage.
             */
            Update withAccessTier(ShareAccessTier accessTier);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    FileShare refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    FileShare refresh(Context context);
}
