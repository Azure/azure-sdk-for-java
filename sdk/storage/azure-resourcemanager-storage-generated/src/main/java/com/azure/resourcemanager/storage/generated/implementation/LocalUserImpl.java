// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storage.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.storage.generated.fluent.models.LocalUserInner;
import com.azure.resourcemanager.storage.generated.models.LocalUser;
import com.azure.resourcemanager.storage.generated.models.LocalUserKeys;
import com.azure.resourcemanager.storage.generated.models.LocalUserRegeneratePasswordResult;
import com.azure.resourcemanager.storage.generated.models.PermissionScope;
import com.azure.resourcemanager.storage.generated.models.SshPublicKey;
import java.util.Collections;
import java.util.List;

public final class LocalUserImpl implements LocalUser, LocalUser.Definition, LocalUser.Update {
    private LocalUserInner innerObject;

    private final com.azure.resourcemanager.storage.generated.StorageManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public List<PermissionScope> permissionScopes() {
        List<PermissionScope> inner = this.innerModel().permissionScopes();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String homeDirectory() {
        return this.innerModel().homeDirectory();
    }

    public List<SshPublicKey> sshAuthorizedKeys() {
        List<SshPublicKey> inner = this.innerModel().sshAuthorizedKeys();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String sid() {
        return this.innerModel().sid();
    }

    public Boolean hasSharedKey() {
        return this.innerModel().hasSharedKey();
    }

    public Boolean hasSshKey() {
        return this.innerModel().hasSshKey();
    }

    public Boolean hasSshPassword() {
        return this.innerModel().hasSshPassword();
    }

    public LocalUserInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.storage.generated.StorageManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String accountName;

    private String username;

    public LocalUserImpl withExistingStorageAccount(String resourceGroupName, String accountName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        return this;
    }

    public LocalUser create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLocalUsersOperations()
                .createOrUpdateWithResponse(resourceGroupName, accountName, username, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public LocalUser create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLocalUsersOperations()
                .createOrUpdateWithResponse(resourceGroupName, accountName, username, this.innerModel(), context)
                .getValue();
        return this;
    }

    LocalUserImpl(String name, com.azure.resourcemanager.storage.generated.StorageManager serviceManager) {
        this.innerObject = new LocalUserInner();
        this.serviceManager = serviceManager;
        this.username = name;
    }

    public LocalUserImpl update() {
        return this;
    }

    public LocalUser apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLocalUsersOperations()
                .createOrUpdateWithResponse(resourceGroupName, accountName, username, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public LocalUser apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLocalUsersOperations()
                .createOrUpdateWithResponse(resourceGroupName, accountName, username, this.innerModel(), context)
                .getValue();
        return this;
    }

    LocalUserImpl(
        LocalUserInner innerObject, com.azure.resourcemanager.storage.generated.StorageManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.accountName = Utils.getValueFromIdByName(innerObject.id(), "storageAccounts");
        this.username = Utils.getValueFromIdByName(innerObject.id(), "localUsers");
    }

    public LocalUser refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLocalUsersOperations()
                .getWithResponse(resourceGroupName, accountName, username, Context.NONE)
                .getValue();
        return this;
    }

    public LocalUser refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLocalUsersOperations()
                .getWithResponse(resourceGroupName, accountName, username, context)
                .getValue();
        return this;
    }

    public LocalUserKeys listKeys() {
        return serviceManager.localUsersOperations().listKeys(resourceGroupName, accountName, username);
    }

    public Response<LocalUserKeys> listKeysWithResponse(Context context) {
        return serviceManager
            .localUsersOperations()
            .listKeysWithResponse(resourceGroupName, accountName, username, context);
    }

    public LocalUserRegeneratePasswordResult regeneratePassword() {
        return serviceManager.localUsersOperations().regeneratePassword(resourceGroupName, accountName, username);
    }

    public Response<LocalUserRegeneratePasswordResult> regeneratePasswordWithResponse(Context context) {
        return serviceManager
            .localUsersOperations()
            .regeneratePasswordWithResponse(resourceGroupName, accountName, username, context);
    }

    public LocalUserImpl withPermissionScopes(List<PermissionScope> permissionScopes) {
        this.innerModel().withPermissionScopes(permissionScopes);
        return this;
    }

    public LocalUserImpl withHomeDirectory(String homeDirectory) {
        this.innerModel().withHomeDirectory(homeDirectory);
        return this;
    }

    public LocalUserImpl withSshAuthorizedKeys(List<SshPublicKey> sshAuthorizedKeys) {
        this.innerModel().withSshAuthorizedKeys(sshAuthorizedKeys);
        return this;
    }

    public LocalUserImpl withHasSharedKey(Boolean hasSharedKey) {
        this.innerModel().withHasSharedKey(hasSharedKey);
        return this;
    }

    public LocalUserImpl withHasSshKey(Boolean hasSshKey) {
        this.innerModel().withHasSshKey(hasSshKey);
        return this;
    }

    public LocalUserImpl withHasSshPassword(Boolean hasSshPassword) {
        this.innerModel().withHasSshPassword(hasSshPassword);
        return this;
    }
}
