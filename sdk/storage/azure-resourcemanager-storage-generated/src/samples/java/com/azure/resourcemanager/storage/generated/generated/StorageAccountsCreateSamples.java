// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storage.generated.generated;

import com.azure.resourcemanager.storage.generated.models.AccountImmutabilityPolicyProperties;
import com.azure.resourcemanager.storage.generated.models.AccountImmutabilityPolicyState;
import com.azure.resourcemanager.storage.generated.models.AllowedCopyScope;
import com.azure.resourcemanager.storage.generated.models.Bypass;
import com.azure.resourcemanager.storage.generated.models.DefaultAction;
import com.azure.resourcemanager.storage.generated.models.DnsEndpointType;
import com.azure.resourcemanager.storage.generated.models.Encryption;
import com.azure.resourcemanager.storage.generated.models.EncryptionIdentity;
import com.azure.resourcemanager.storage.generated.models.EncryptionService;
import com.azure.resourcemanager.storage.generated.models.EncryptionServices;
import com.azure.resourcemanager.storage.generated.models.ExpirationAction;
import com.azure.resourcemanager.storage.generated.models.ExtendedLocation;
import com.azure.resourcemanager.storage.generated.models.ExtendedLocationTypes;
import com.azure.resourcemanager.storage.generated.models.Identity;
import com.azure.resourcemanager.storage.generated.models.IdentityType;
import com.azure.resourcemanager.storage.generated.models.ImmutableStorageAccount;
import com.azure.resourcemanager.storage.generated.models.KeyPolicy;
import com.azure.resourcemanager.storage.generated.models.KeySource;
import com.azure.resourcemanager.storage.generated.models.KeyType;
import com.azure.resourcemanager.storage.generated.models.KeyVaultProperties;
import com.azure.resourcemanager.storage.generated.models.Kind;
import com.azure.resourcemanager.storage.generated.models.MinimumTlsVersion;
import com.azure.resourcemanager.storage.generated.models.NetworkRuleSet;
import com.azure.resourcemanager.storage.generated.models.PublicNetworkAccess;
import com.azure.resourcemanager.storage.generated.models.RoutingChoice;
import com.azure.resourcemanager.storage.generated.models.RoutingPreference;
import com.azure.resourcemanager.storage.generated.models.SasPolicy;
import com.azure.resourcemanager.storage.generated.models.Sku;
import com.azure.resourcemanager.storage.generated.models.SkuName;
import com.azure.resourcemanager.storage.generated.models.UserAssignedIdentity;
import com.azure.resourcemanager.storage.generated.models.VirtualNetworkRule;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for StorageAccounts Create. */
public final class StorageAccountsCreateSamples {
    /*
     * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/NfsV3AccountCreate.json
     */
    /**
     * Sample code: NfsV3AccountCreate.
     *
     * @param manager Entry point to StorageManager.
     */
    public static void nfsV3AccountCreate(com.azure.resourcemanager.storage.generated.StorageManager manager) {
        manager
            .storageAccounts()
            .define("sto4445")
            .withRegion("eastus")
            .withExistingResourceGroup("res9101")
            .withSku(new Sku().withName(SkuName.PREMIUM_LRS))
            .withKind(Kind.BLOCK_BLOB_STORAGE)
            .withNetworkRuleSet(
                new NetworkRuleSet()
                    .withBypass(Bypass.AZURE_SERVICES)
                    .withVirtualNetworkRules(
                        Arrays
                            .asList(
                                new VirtualNetworkRule()
                                    .withVirtualNetworkResourceId(
                                        "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Network/virtualNetworks/net123/subnets/subnet12")))
                    .withIpRules(Arrays.asList())
                    .withDefaultAction(DefaultAction.ALLOW))
            .withEnableHttpsTrafficOnly(false)
            .withIsHnsEnabled(true)
            .withEnableNfsV3(true)
            .create();
    }

    /*
     * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreatePremiumBlockBlobStorage.json
     */
    /**
     * Sample code: StorageAccountCreatePremiumBlockBlobStorage.
     *
     * @param manager Entry point to StorageManager.
     */
    public static void storageAccountCreatePremiumBlockBlobStorage(
        com.azure.resourcemanager.storage.generated.StorageManager manager) {
        manager
            .storageAccounts()
            .define("sto4445")
            .withRegion("eastus")
            .withExistingResourceGroup("res9101")
            .withSku(new Sku().withName(SkuName.PREMIUM_LRS))
            .withKind(Kind.BLOCK_BLOB_STORAGE)
            .withTags(mapOf("key1", "value1", "key2", "value2"))
            .withEncryption(
                new Encryption()
                    .withServices(
                        new EncryptionServices()
                            .withBlob(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT))
                            .withFile(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT)))
                    .withKeySource(KeySource.MICROSOFT_STORAGE)
                    .withRequireInfrastructureEncryption(false))
            .withMinimumTlsVersion(MinimumTlsVersion.TLS1_2)
            .withAllowSharedKeyAccess(true)
            .create();
    }

    /*
     * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateWithImmutabilityPolicy.json
     */
    /**
     * Sample code: StorageAccountCreateWithImmutabilityPolicy.
     *
     * @param manager Entry point to StorageManager.
     */
    public static void storageAccountCreateWithImmutabilityPolicy(
        com.azure.resourcemanager.storage.generated.StorageManager manager) {
        manager
            .storageAccounts()
            .define("sto4445")
            .withRegion("eastus")
            .withExistingResourceGroup("res9101")
            .withSku(new Sku().withName(SkuName.STANDARD_GRS))
            .withKind(Kind.STORAGE)
            .withExtendedLocation(
                new ExtendedLocation().withName("losangeles001").withType(ExtendedLocationTypes.EDGE_ZONE))
            .withImmutableStorageWithVersioning(
                new ImmutableStorageAccount()
                    .withEnabled(true)
                    .withImmutabilityPolicy(
                        new AccountImmutabilityPolicyProperties()
                            .withImmutabilityPeriodSinceCreationInDays(15)
                            .withState(AccountImmutabilityPolicyState.UNLOCKED)
                            .withAllowProtectedAppendWrites(true)))
            .create();
    }

    /*
     * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateAllowedCopyScopeToPrivateLink.json
     */
    /**
     * Sample code: StorageAccountCreateAllowedCopyScopeToPrivateLink.
     *
     * @param manager Entry point to StorageManager.
     */
    public static void storageAccountCreateAllowedCopyScopeToPrivateLink(
        com.azure.resourcemanager.storage.generated.StorageManager manager) {
        manager
            .storageAccounts()
            .define("sto4445")
            .withRegion("eastus")
            .withExistingResourceGroup("res9101")
            .withSku(new Sku().withName(SkuName.STANDARD_GRS))
            .withKind(Kind.STORAGE)
            .withTags(mapOf("key1", "value1", "key2", "value2"))
            .withAllowedCopyScope(AllowedCopyScope.PRIVATE_LINK)
            .withSasPolicy(
                new SasPolicy().withSasExpirationPeriod("1.15:59:59").withExpirationAction(ExpirationAction.LOG))
            .withKeyPolicy(new KeyPolicy().withKeyExpirationPeriodInDays(20))
            .withEncryption(
                new Encryption()
                    .withServices(
                        new EncryptionServices()
                            .withBlob(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT))
                            .withFile(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT)))
                    .withKeySource(KeySource.MICROSOFT_STORAGE)
                    .withRequireInfrastructureEncryption(false))
            .withIsHnsEnabled(true)
            .withRoutingPreference(
                new RoutingPreference()
                    .withRoutingChoice(RoutingChoice.MICROSOFT_ROUTING)
                    .withPublishMicrosoftEndpoints(true)
                    .withPublishInternetEndpoints(true))
            .withAllowBlobPublicAccess(false)
            .withMinimumTlsVersion(MinimumTlsVersion.TLS1_2)
            .withAllowSharedKeyAccess(true)
            .create();
    }

    /*
     * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreate.json
     */
    /**
     * Sample code: StorageAccountCreate.
     *
     * @param manager Entry point to StorageManager.
     */
    public static void storageAccountCreate(com.azure.resourcemanager.storage.generated.StorageManager manager) {
        manager
            .storageAccounts()
            .define("sto4445")
            .withRegion("eastus")
            .withExistingResourceGroup("res9101")
            .withSku(new Sku().withName(SkuName.STANDARD_GRS))
            .withKind(Kind.STORAGE)
            .withTags(mapOf("key1", "value1", "key2", "value2"))
            .withExtendedLocation(
                new ExtendedLocation().withName("losangeles001").withType(ExtendedLocationTypes.EDGE_ZONE))
            .withSasPolicy(
                new SasPolicy().withSasExpirationPeriod("1.15:59:59").withExpirationAction(ExpirationAction.LOG))
            .withKeyPolicy(new KeyPolicy().withKeyExpirationPeriodInDays(20))
            .withEncryption(
                new Encryption()
                    .withServices(
                        new EncryptionServices()
                            .withBlob(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT))
                            .withFile(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT)))
                    .withKeySource(KeySource.MICROSOFT_STORAGE)
                    .withRequireInfrastructureEncryption(false))
            .withIsSftpEnabled(true)
            .withIsHnsEnabled(true)
            .withRoutingPreference(
                new RoutingPreference()
                    .withRoutingChoice(RoutingChoice.MICROSOFT_ROUTING)
                    .withPublishMicrosoftEndpoints(true)
                    .withPublishInternetEndpoints(true))
            .withAllowBlobPublicAccess(false)
            .withMinimumTlsVersion(MinimumTlsVersion.TLS1_2)
            .withAllowSharedKeyAccess(true)
            .withDefaultToOAuthAuthentication(false)
            .create();
    }

    /*
     * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateEnablePublicNetworkAccess.json
     */
    /**
     * Sample code: StorageAccountCreateEnablePublicNetworkAccess.
     *
     * @param manager Entry point to StorageManager.
     */
    public static void storageAccountCreateEnablePublicNetworkAccess(
        com.azure.resourcemanager.storage.generated.StorageManager manager) {
        manager
            .storageAccounts()
            .define("sto4445")
            .withRegion("eastus")
            .withExistingResourceGroup("res9101")
            .withSku(new Sku().withName(SkuName.STANDARD_GRS))
            .withKind(Kind.STORAGE)
            .withTags(mapOf("key1", "value1", "key2", "value2"))
            .withExtendedLocation(
                new ExtendedLocation().withName("losangeles001").withType(ExtendedLocationTypes.EDGE_ZONE))
            .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
            .withSasPolicy(
                new SasPolicy().withSasExpirationPeriod("1.15:59:59").withExpirationAction(ExpirationAction.LOG))
            .withKeyPolicy(new KeyPolicy().withKeyExpirationPeriodInDays(20))
            .withEncryption(
                new Encryption()
                    .withServices(
                        new EncryptionServices()
                            .withBlob(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT))
                            .withFile(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT)))
                    .withKeySource(KeySource.MICROSOFT_STORAGE)
                    .withRequireInfrastructureEncryption(false))
            .withIsHnsEnabled(true)
            .withRoutingPreference(
                new RoutingPreference()
                    .withRoutingChoice(RoutingChoice.MICROSOFT_ROUTING)
                    .withPublishMicrosoftEndpoints(true)
                    .withPublishInternetEndpoints(true))
            .withAllowBlobPublicAccess(false)
            .withMinimumTlsVersion(MinimumTlsVersion.TLS1_2)
            .withAllowSharedKeyAccess(true)
            .create();
    }

    /*
     * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateAllowedCopyScopeToAAD.json
     */
    /**
     * Sample code: StorageAccountCreateAllowedCopyScopeToAAD.
     *
     * @param manager Entry point to StorageManager.
     */
    public static void storageAccountCreateAllowedCopyScopeToAAD(
        com.azure.resourcemanager.storage.generated.StorageManager manager) {
        manager
            .storageAccounts()
            .define("sto4445")
            .withRegion("eastus")
            .withExistingResourceGroup("res9101")
            .withSku(new Sku().withName(SkuName.STANDARD_GRS))
            .withKind(Kind.STORAGE)
            .withTags(mapOf("key1", "value1", "key2", "value2"))
            .withAllowedCopyScope(AllowedCopyScope.AAD)
            .withSasPolicy(
                new SasPolicy().withSasExpirationPeriod("1.15:59:59").withExpirationAction(ExpirationAction.LOG))
            .withKeyPolicy(new KeyPolicy().withKeyExpirationPeriodInDays(20))
            .withEncryption(
                new Encryption()
                    .withServices(
                        new EncryptionServices()
                            .withBlob(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT))
                            .withFile(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT)))
                    .withKeySource(KeySource.MICROSOFT_STORAGE)
                    .withRequireInfrastructureEncryption(false))
            .withIsHnsEnabled(true)
            .withRoutingPreference(
                new RoutingPreference()
                    .withRoutingChoice(RoutingChoice.MICROSOFT_ROUTING)
                    .withPublishMicrosoftEndpoints(true)
                    .withPublishInternetEndpoints(true))
            .withAllowBlobPublicAccess(false)
            .withMinimumTlsVersion(MinimumTlsVersion.TLS1_2)
            .withAllowSharedKeyAccess(true)
            .create();
    }

    /*
     * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateUserAssignedIdentityWithFederatedIdentityClientId.json
     */
    /**
     * Sample code: StorageAccountCreateUserAssignedIdentityWithFederatedIdentityClientId.
     *
     * @param manager Entry point to StorageManager.
     */
    public static void storageAccountCreateUserAssignedIdentityWithFederatedIdentityClientId(
        com.azure.resourcemanager.storage.generated.StorageManager manager) {
        manager
            .storageAccounts()
            .define("sto131918")
            .withRegion("eastus")
            .withExistingResourceGroup("res131918")
            .withSku(new Sku().withName(SkuName.STANDARD_LRS))
            .withKind(Kind.STORAGE)
            .withIdentity(
                new Identity()
                    .withType(IdentityType.USER_ASSIGNED)
                    .withUserAssignedIdentities(
                        mapOf(
                            "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}",
                            new UserAssignedIdentity())))
            .withEncryption(
                new Encryption()
                    .withServices(
                        new EncryptionServices()
                            .withBlob(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT))
                            .withFile(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT)))
                    .withKeySource(KeySource.MICROSOFT_KEYVAULT)
                    .withKeyVaultProperties(
                        new KeyVaultProperties()
                            .withKeyName("wrappingKey")
                            .withKeyVersion("")
                            .withKeyVaultUri("https://myvault8569.vault.azure.net"))
                    .withEncryptionIdentity(
                        new EncryptionIdentity()
                            .withEncryptionUserAssignedIdentity(
                                "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}")
                            .withEncryptionFederatedIdentityClientId("f83c6b1b-4d34-47e4-bb34-9d83df58b540")))
            .create();
    }

    /*
     * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateDisallowPublicNetworkAccess.json
     */
    /**
     * Sample code: StorageAccountCreateDisallowPublicNetworkAccess.
     *
     * @param manager Entry point to StorageManager.
     */
    public static void storageAccountCreateDisallowPublicNetworkAccess(
        com.azure.resourcemanager.storage.generated.StorageManager manager) {
        manager
            .storageAccounts()
            .define("sto4445")
            .withRegion("eastus")
            .withExistingResourceGroup("res9101")
            .withSku(new Sku().withName(SkuName.STANDARD_GRS))
            .withKind(Kind.STORAGE)
            .withTags(mapOf("key1", "value1", "key2", "value2"))
            .withExtendedLocation(
                new ExtendedLocation().withName("losangeles001").withType(ExtendedLocationTypes.EDGE_ZONE))
            .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
            .withSasPolicy(
                new SasPolicy().withSasExpirationPeriod("1.15:59:59").withExpirationAction(ExpirationAction.LOG))
            .withKeyPolicy(new KeyPolicy().withKeyExpirationPeriodInDays(20))
            .withEncryption(
                new Encryption()
                    .withServices(
                        new EncryptionServices()
                            .withBlob(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT))
                            .withFile(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT)))
                    .withKeySource(KeySource.MICROSOFT_STORAGE)
                    .withRequireInfrastructureEncryption(false))
            .withIsHnsEnabled(true)
            .withRoutingPreference(
                new RoutingPreference()
                    .withRoutingChoice(RoutingChoice.MICROSOFT_ROUTING)
                    .withPublishMicrosoftEndpoints(true)
                    .withPublishInternetEndpoints(true))
            .withAllowBlobPublicAccess(false)
            .withMinimumTlsVersion(MinimumTlsVersion.TLS1_2)
            .withAllowSharedKeyAccess(true)
            .create();
    }

    /*
     * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateDnsEndpointTypeToStandard.json
     */
    /**
     * Sample code: StorageAccountCreateDnsEndpointTypeToStandard.
     *
     * @param manager Entry point to StorageManager.
     */
    public static void storageAccountCreateDnsEndpointTypeToStandard(
        com.azure.resourcemanager.storage.generated.StorageManager manager) {
        manager
            .storageAccounts()
            .define("sto4445")
            .withRegion("eastus")
            .withExistingResourceGroup("res9101")
            .withSku(new Sku().withName(SkuName.STANDARD_GRS))
            .withKind(Kind.STORAGE)
            .withTags(mapOf("key1", "value1", "key2", "value2"))
            .withExtendedLocation(
                new ExtendedLocation().withName("losangeles001").withType(ExtendedLocationTypes.EDGE_ZONE))
            .withSasPolicy(
                new SasPolicy().withSasExpirationPeriod("1.15:59:59").withExpirationAction(ExpirationAction.LOG))
            .withKeyPolicy(new KeyPolicy().withKeyExpirationPeriodInDays(20))
            .withEncryption(
                new Encryption()
                    .withServices(
                        new EncryptionServices()
                            .withBlob(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT))
                            .withFile(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT)))
                    .withKeySource(KeySource.MICROSOFT_STORAGE)
                    .withRequireInfrastructureEncryption(false))
            .withIsSftpEnabled(true)
            .withIsHnsEnabled(true)
            .withRoutingPreference(
                new RoutingPreference()
                    .withRoutingChoice(RoutingChoice.MICROSOFT_ROUTING)
                    .withPublishMicrosoftEndpoints(true)
                    .withPublishInternetEndpoints(true))
            .withAllowBlobPublicAccess(false)
            .withMinimumTlsVersion(MinimumTlsVersion.TLS1_2)
            .withAllowSharedKeyAccess(true)
            .withDefaultToOAuthAuthentication(false)
            .withDnsEndpointType(DnsEndpointType.STANDARD)
            .create();
    }

    /*
     * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateDnsEndpointTypeToAzureDnsZone.json
     */
    /**
     * Sample code: StorageAccountCreateDnsEndpointTypeToAzureDnsZone.
     *
     * @param manager Entry point to StorageManager.
     */
    public static void storageAccountCreateDnsEndpointTypeToAzureDnsZone(
        com.azure.resourcemanager.storage.generated.StorageManager manager) {
        manager
            .storageAccounts()
            .define("sto4445")
            .withRegion("eastus")
            .withExistingResourceGroup("res9101")
            .withSku(new Sku().withName(SkuName.STANDARD_GRS))
            .withKind(Kind.STORAGE)
            .withTags(mapOf("key1", "value1", "key2", "value2"))
            .withExtendedLocation(
                new ExtendedLocation().withName("losangeles001").withType(ExtendedLocationTypes.EDGE_ZONE))
            .withSasPolicy(
                new SasPolicy().withSasExpirationPeriod("1.15:59:59").withExpirationAction(ExpirationAction.LOG))
            .withKeyPolicy(new KeyPolicy().withKeyExpirationPeriodInDays(20))
            .withEncryption(
                new Encryption()
                    .withServices(
                        new EncryptionServices()
                            .withBlob(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT))
                            .withFile(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT)))
                    .withKeySource(KeySource.MICROSOFT_STORAGE)
                    .withRequireInfrastructureEncryption(false))
            .withIsSftpEnabled(true)
            .withIsHnsEnabled(true)
            .withRoutingPreference(
                new RoutingPreference()
                    .withRoutingChoice(RoutingChoice.MICROSOFT_ROUTING)
                    .withPublishMicrosoftEndpoints(true)
                    .withPublishInternetEndpoints(true))
            .withAllowBlobPublicAccess(false)
            .withMinimumTlsVersion(MinimumTlsVersion.TLS1_2)
            .withAllowSharedKeyAccess(true)
            .withDefaultToOAuthAuthentication(false)
            .withDnsEndpointType(DnsEndpointType.AZURE_DNS_ZONE)
            .create();
    }

    /*
     * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateUserAssignedEncryptionIdentityWithCMK.json
     */
    /**
     * Sample code: StorageAccountCreateUserAssignedEncryptionIdentityWithCMK.
     *
     * @param manager Entry point to StorageManager.
     */
    public static void storageAccountCreateUserAssignedEncryptionIdentityWithCMK(
        com.azure.resourcemanager.storage.generated.StorageManager manager) {
        manager
            .storageAccounts()
            .define("sto4445")
            .withRegion("eastus")
            .withExistingResourceGroup("res9101")
            .withSku(new Sku().withName(SkuName.STANDARD_LRS))
            .withKind(Kind.STORAGE)
            .withIdentity(
                new Identity()
                    .withType(IdentityType.USER_ASSIGNED)
                    .withUserAssignedIdentities(
                        mapOf(
                            "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}",
                            new UserAssignedIdentity())))
            .withEncryption(
                new Encryption()
                    .withServices(
                        new EncryptionServices()
                            .withBlob(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT))
                            .withFile(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT)))
                    .withKeySource(KeySource.MICROSOFT_KEYVAULT)
                    .withKeyVaultProperties(
                        new KeyVaultProperties()
                            .withKeyName("wrappingKey")
                            .withKeyVersion("")
                            .withKeyVaultUri("https://myvault8569.vault.azure.net"))
                    .withEncryptionIdentity(
                        new EncryptionIdentity()
                            .withEncryptionUserAssignedIdentity(
                                "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}")))
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
