/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.containerregistry.v2019_12_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.containerregistry.v2019_12_01_preview.implementation.ScopeMapInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.containerregistry.v2019_12_01_preview.implementation.ContainerRegistryManager;
import java.util.List;
import org.joda.time.DateTime;

/**
 * Type representing ScopeMap.
 */
public interface ScopeMap extends HasInner<ScopeMapInner>, Indexable, Refreshable<ScopeMap>, Updatable<ScopeMap.Update>, HasManager<ContainerRegistryManager> {
    /**
     * @return the actions value.
     */
    List<String> actions();

    /**
     * @return the creationDate value.
     */
    DateTime creationDate();

    /**
     * @return the description value.
     */
    String description();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * @return the scopeMapType value.
     */
    String scopeMapType();

    /**
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the ScopeMap definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithRegistry, DefinitionStages.WithActions, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of ScopeMap definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a ScopeMap definition.
         */
        interface Blank extends WithRegistry {
        }

        /**
         * The stage of the scopemap definition allowing to specify Registry.
         */
        interface WithRegistry {
           /**
            * Specifies resourceGroupName, registryName.
            * @param resourceGroupName The name of the resource group to which the container registry belongs
            * @param registryName The name of the container registry
            * @return the next definition stage
            */
            WithActions withExistingRegistry(String resourceGroupName, String registryName);
        }

        /**
         * The stage of the scopemap definition allowing to specify Actions.
         */
        interface WithActions {
           /**
            * Specifies actions.
            * @param actions The list of scoped permissions for registry artifacts.
 E.g. repositories/repository-name/content/read,
 repositories/repository-name/metadata/write
            * @return the next definition stage
            */
            WithCreate withActions(List<String> actions);
        }

        /**
         * The stage of the scopemap definition allowing to specify Description.
         */
        interface WithDescription {
            /**
             * Specifies description.
             * @param description The user friendly description of the scope map
             * @return the next definition stage
             */
            WithCreate withDescription(String description);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<ScopeMap>, DefinitionStages.WithDescription {
        }
    }
    /**
     * The template for a ScopeMap update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<ScopeMap>, UpdateStages.WithActions, UpdateStages.WithDescription {
    }

    /**
     * Grouping of ScopeMap update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the scopemap update allowing to specify Actions.
         */
        interface WithActions {
            /**
             * Specifies actions.
             * @param actions The list of scope permissions for registry artifacts.
 E.g. repositories/repository-name/pull,
 repositories/repository-name/delete
             * @return the next update stage
             */
            Update withActions(List<String> actions);
        }

        /**
         * The stage of the scopemap update allowing to specify Description.
         */
        interface WithDescription {
            /**
             * Specifies description.
             * @param description The user friendly description of the scope map
             * @return the next update stage
             */
            Update withDescription(String description);
        }

    }
}
