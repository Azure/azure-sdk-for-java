// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerregistry.generated.fluent.models.TokenInner;
import java.time.OffsetDateTime;

/** An immutable client-side representation of Token. */
public interface Token {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the creationDate property: The creation date of scope map.
     *
     * @return the creationDate value.
     */
    OffsetDateTime creationDate();

    /**
     * Gets the provisioningState property: Provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the scopeMapId property: The resource ID of the scope map to which the token will be associated with.
     *
     * @return the scopeMapId value.
     */
    String scopeMapId();

    /**
     * Gets the credentials property: The credentials that can be used for authenticating the token.
     *
     * @return the credentials value.
     */
    TokenCredentialsProperties credentials();

    /**
     * Gets the status property: The status of the token example enabled or disabled.
     *
     * @return the status value.
     */
    TokenStatus status();

    /**
     * Gets the systemData property: Metadata pertaining to creation and last modification of the resource.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the inner com.azure.resourcemanager.containerregistry.generated.fluent.models.TokenInner object.
     *
     * @return the inner object.
     */
    TokenInner innerModel();

    /** The entirety of the Token definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The Token definition stages. */
    interface DefinitionStages {
        /** The first stage of the Token definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the Token definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, registryName.
             *
             * @param resourceGroupName The name of the resource group to which the container registry belongs.
             * @param registryName The name of the container registry.
             * @return the next definition stage.
             */
            WithCreate withExistingRegistry(String resourceGroupName, String registryName);
        }
        /**
         * The stage of the Token definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithScopeMapId, DefinitionStages.WithCredentials, DefinitionStages.WithStatus {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Token create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Token create(Context context);
        }
        /** The stage of the Token definition allowing to specify scopeMapId. */
        interface WithScopeMapId {
            /**
             * Specifies the scopeMapId property: The resource ID of the scope map to which the token will be associated
             * with..
             *
             * @param scopeMapId The resource ID of the scope map to which the token will be associated with.
             * @return the next definition stage.
             */
            WithCreate withScopeMapId(String scopeMapId);
        }
        /** The stage of the Token definition allowing to specify credentials. */
        interface WithCredentials {
            /**
             * Specifies the credentials property: The credentials that can be used for authenticating the token..
             *
             * @param credentials The credentials that can be used for authenticating the token.
             * @return the next definition stage.
             */
            WithCreate withCredentials(TokenCredentialsProperties credentials);
        }
        /** The stage of the Token definition allowing to specify status. */
        interface WithStatus {
            /**
             * Specifies the status property: The status of the token example enabled or disabled..
             *
             * @param status The status of the token example enabled or disabled.
             * @return the next definition stage.
             */
            WithCreate withStatus(TokenStatus status);
        }
    }
    /**
     * Begins update for the Token resource.
     *
     * @return the stage of resource update.
     */
    Token.Update update();

    /** The template for Token update. */
    interface Update extends UpdateStages.WithScopeMapId, UpdateStages.WithStatus, UpdateStages.WithCredentials {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Token apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Token apply(Context context);
    }
    /** The Token update stages. */
    interface UpdateStages {
        /** The stage of the Token update allowing to specify scopeMapId. */
        interface WithScopeMapId {
            /**
             * Specifies the scopeMapId property: The resource ID of the scope map to which the token will be associated
             * with..
             *
             * @param scopeMapId The resource ID of the scope map to which the token will be associated with.
             * @return the next definition stage.
             */
            Update withScopeMapId(String scopeMapId);
        }
        /** The stage of the Token update allowing to specify status. */
        interface WithStatus {
            /**
             * Specifies the status property: The status of the token example enabled or disabled..
             *
             * @param status The status of the token example enabled or disabled.
             * @return the next definition stage.
             */
            Update withStatus(TokenStatus status);
        }
        /** The stage of the Token update allowing to specify credentials. */
        interface WithCredentials {
            /**
             * Specifies the credentials property: The credentials that can be used for authenticating the token..
             *
             * @param credentials The credentials that can be used for authenticating the token.
             * @return the next definition stage.
             */
            Update withCredentials(TokenCredentialsProperties credentials);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Token refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Token refresh(Context context);
}
