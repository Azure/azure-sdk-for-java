// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerregistry.generated.fluent.ContainerRegistryManagementClient;
import com.azure.resourcemanager.containerregistry.generated.implementation.AgentPoolsImpl;
import com.azure.resourcemanager.containerregistry.generated.implementation.ConnectedRegistriesImpl;
import com.azure.resourcemanager.containerregistry.generated.implementation.ContainerRegistryManagementClientBuilder;
import com.azure.resourcemanager.containerregistry.generated.implementation.ExportPipelinesImpl;
import com.azure.resourcemanager.containerregistry.generated.implementation.ImportPipelinesImpl;
import com.azure.resourcemanager.containerregistry.generated.implementation.OperationsImpl;
import com.azure.resourcemanager.containerregistry.generated.implementation.PipelineRunsImpl;
import com.azure.resourcemanager.containerregistry.generated.implementation.PrivateEndpointConnectionsImpl;
import com.azure.resourcemanager.containerregistry.generated.implementation.RegistriesImpl;
import com.azure.resourcemanager.containerregistry.generated.implementation.ReplicationsImpl;
import com.azure.resourcemanager.containerregistry.generated.implementation.RunsImpl;
import com.azure.resourcemanager.containerregistry.generated.implementation.ScopeMapsImpl;
import com.azure.resourcemanager.containerregistry.generated.implementation.TaskRunsImpl;
import com.azure.resourcemanager.containerregistry.generated.implementation.TasksImpl;
import com.azure.resourcemanager.containerregistry.generated.implementation.TokensImpl;
import com.azure.resourcemanager.containerregistry.generated.implementation.WebhooksImpl;
import com.azure.resourcemanager.containerregistry.generated.models.AgentPools;
import com.azure.resourcemanager.containerregistry.generated.models.ConnectedRegistries;
import com.azure.resourcemanager.containerregistry.generated.models.ExportPipelines;
import com.azure.resourcemanager.containerregistry.generated.models.ImportPipelines;
import com.azure.resourcemanager.containerregistry.generated.models.Operations;
import com.azure.resourcemanager.containerregistry.generated.models.PipelineRuns;
import com.azure.resourcemanager.containerregistry.generated.models.PrivateEndpointConnections;
import com.azure.resourcemanager.containerregistry.generated.models.Registries;
import com.azure.resourcemanager.containerregistry.generated.models.Replications;
import com.azure.resourcemanager.containerregistry.generated.models.Runs;
import com.azure.resourcemanager.containerregistry.generated.models.ScopeMaps;
import com.azure.resourcemanager.containerregistry.generated.models.TaskRuns;
import com.azure.resourcemanager.containerregistry.generated.models.Tasks;
import com.azure.resourcemanager.containerregistry.generated.models.Tokens;
import com.azure.resourcemanager.containerregistry.generated.models.Webhooks;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** Entry point to ContainerRegistryManager. */
public final class ContainerRegistryManager {
    private ConnectedRegistries connectedRegistries;

    private ExportPipelines exportPipelines;

    private Registries registries;

    private ImportPipelines importPipelines;

    private Operations operations;

    private PipelineRuns pipelineRuns;

    private PrivateEndpointConnections privateEndpointConnections;

    private Replications replications;

    private ScopeMaps scopeMaps;

    private Tokens tokens;

    private Webhooks webhooks;

    private AgentPools agentPools;

    private Runs runs;

    private TaskRuns taskRuns;

    private Tasks tasks;

    private final ContainerRegistryManagementClient clientObject;

    private ContainerRegistryManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject =
            new ContainerRegistryManagementClientBuilder()
                .pipeline(httpPipeline)
                .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
                .subscriptionId(profile.getSubscriptionId())
                .defaultPollInterval(defaultPollInterval)
                .buildClient();
    }

    /**
     * Creates an instance of ContainerRegistry service API entry point.
     *
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the ContainerRegistry service API instance.
     */
    public static ContainerRegistryManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Gets a Configurable instance that can be used to create ContainerRegistryManager with optional configuration.
     *
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new ContainerRegistryManager.Configurable();
    }

    /** The Configurable allowing configurations to be set. */
    public static final class Configurable {
        private final ClientLogger logger = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval = Objects.requireNonNull(defaultPollInterval, "'retryPolicy' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw logger.logExceptionAsError(new IllegalArgumentException("'httpPipeline' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of ContainerRegistry service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the ContainerRegistry service API instance.
         */
        public ContainerRegistryManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder
                .append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.containerregistry.generated")
                .append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder
                    .append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new RequestIdPolicy());
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new ArmChallengeAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies.addAll(this.policies);
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                    .httpClient(httpClient)
                    .policies(policies.toArray(new HttpPipelinePolicy[0]))
                    .build();
            return new ContainerRegistryManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /** @return Resource collection API of ConnectedRegistries. */
    public ConnectedRegistries connectedRegistries() {
        if (this.connectedRegistries == null) {
            this.connectedRegistries = new ConnectedRegistriesImpl(clientObject.getConnectedRegistries(), this);
        }
        return connectedRegistries;
    }

    /** @return Resource collection API of ExportPipelines. */
    public ExportPipelines exportPipelines() {
        if (this.exportPipelines == null) {
            this.exportPipelines = new ExportPipelinesImpl(clientObject.getExportPipelines(), this);
        }
        return exportPipelines;
    }

    /** @return Resource collection API of Registries. */
    public Registries registries() {
        if (this.registries == null) {
            this.registries = new RegistriesImpl(clientObject.getRegistries(), this);
        }
        return registries;
    }

    /** @return Resource collection API of ImportPipelines. */
    public ImportPipelines importPipelines() {
        if (this.importPipelines == null) {
            this.importPipelines = new ImportPipelinesImpl(clientObject.getImportPipelines(), this);
        }
        return importPipelines;
    }

    /** @return Resource collection API of Operations. */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /** @return Resource collection API of PipelineRuns. */
    public PipelineRuns pipelineRuns() {
        if (this.pipelineRuns == null) {
            this.pipelineRuns = new PipelineRunsImpl(clientObject.getPipelineRuns(), this);
        }
        return pipelineRuns;
    }

    /** @return Resource collection API of PrivateEndpointConnections. */
    public PrivateEndpointConnections privateEndpointConnections() {
        if (this.privateEndpointConnections == null) {
            this.privateEndpointConnections =
                new PrivateEndpointConnectionsImpl(clientObject.getPrivateEndpointConnections(), this);
        }
        return privateEndpointConnections;
    }

    /** @return Resource collection API of Replications. */
    public Replications replications() {
        if (this.replications == null) {
            this.replications = new ReplicationsImpl(clientObject.getReplications(), this);
        }
        return replications;
    }

    /** @return Resource collection API of ScopeMaps. */
    public ScopeMaps scopeMaps() {
        if (this.scopeMaps == null) {
            this.scopeMaps = new ScopeMapsImpl(clientObject.getScopeMaps(), this);
        }
        return scopeMaps;
    }

    /** @return Resource collection API of Tokens. */
    public Tokens tokens() {
        if (this.tokens == null) {
            this.tokens = new TokensImpl(clientObject.getTokens(), this);
        }
        return tokens;
    }

    /** @return Resource collection API of Webhooks. */
    public Webhooks webhooks() {
        if (this.webhooks == null) {
            this.webhooks = new WebhooksImpl(clientObject.getWebhooks(), this);
        }
        return webhooks;
    }

    /** @return Resource collection API of AgentPools. */
    public AgentPools agentPools() {
        if (this.agentPools == null) {
            this.agentPools = new AgentPoolsImpl(clientObject.getAgentPools(), this);
        }
        return agentPools;
    }

    /** @return Resource collection API of Runs. */
    public Runs runs() {
        if (this.runs == null) {
            this.runs = new RunsImpl(clientObject.getRuns(), this);
        }
        return runs;
    }

    /** @return Resource collection API of TaskRuns. */
    public TaskRuns taskRuns() {
        if (this.taskRuns == null) {
            this.taskRuns = new TaskRunsImpl(clientObject.getTaskRuns(), this);
        }
        return taskRuns;
    }

    /** @return Resource collection API of Tasks. */
    public Tasks tasks() {
        if (this.tasks == null) {
            this.tasks = new TasksImpl(clientObject.getTasks(), this);
        }
        return tasks;
    }

    /**
     * @return Wrapped service client ContainerRegistryManagementClient providing direct access to the underlying
     *     auto-generated API implementation, based on Azure REST API.
     */
    public ContainerRegistryManagementClient serviceClient() {
        return this.clientObject;
    }
}
