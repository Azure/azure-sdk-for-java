// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager;
import com.azure.resourcemanager.containerregistry.generated.fluent.RunsClient;
import com.azure.resourcemanager.containerregistry.generated.fluent.models.RunGetLogResultInner;
import com.azure.resourcemanager.containerregistry.generated.fluent.models.RunInner;
import com.azure.resourcemanager.containerregistry.generated.models.Run;
import com.azure.resourcemanager.containerregistry.generated.models.RunGetLogResult;
import com.azure.resourcemanager.containerregistry.generated.models.RunUpdateParameters;
import com.azure.resourcemanager.containerregistry.generated.models.Runs;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class RunsImpl implements Runs {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RunsImpl.class);

    private final RunsClient innerClient;

    private final ContainerRegistryManager serviceManager;

    public RunsImpl(RunsClient innerClient, ContainerRegistryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Run> list(String resourceGroupName, String registryName) {
        PagedIterable<RunInner> inner = this.serviceClient().list(resourceGroupName, registryName);
        return inner.mapPage(inner1 -> new RunImpl(inner1, this.manager()));
    }

    public PagedIterable<Run> list(
        String resourceGroupName, String registryName, String filter, Integer top, Context context) {
        PagedIterable<RunInner> inner =
            this.serviceClient().list(resourceGroupName, registryName, filter, top, context);
        return inner.mapPage(inner1 -> new RunImpl(inner1, this.manager()));
    }

    public Run get(String resourceGroupName, String registryName, String runId) {
        RunInner inner = this.serviceClient().get(resourceGroupName, registryName, runId);
        if (inner != null) {
            return new RunImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Run> getWithResponse(String resourceGroupName, String registryName, String runId, Context context) {
        Response<RunInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, registryName, runId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RunImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Run update(
        String resourceGroupName, String registryName, String runId, RunUpdateParameters runUpdateParameters) {
        RunInner inner = this.serviceClient().update(resourceGroupName, registryName, runId, runUpdateParameters);
        if (inner != null) {
            return new RunImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Run update(
        String resourceGroupName,
        String registryName,
        String runId,
        RunUpdateParameters runUpdateParameters,
        Context context) {
        RunInner inner =
            this.serviceClient().update(resourceGroupName, registryName, runId, runUpdateParameters, context);
        if (inner != null) {
            return new RunImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RunGetLogResult getLogSasUrl(String resourceGroupName, String registryName, String runId) {
        RunGetLogResultInner inner = this.serviceClient().getLogSasUrl(resourceGroupName, registryName, runId);
        if (inner != null) {
            return new RunGetLogResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RunGetLogResult> getLogSasUrlWithResponse(
        String resourceGroupName, String registryName, String runId, Context context) {
        Response<RunGetLogResultInner> inner =
            this.serviceClient().getLogSasUrlWithResponse(resourceGroupName, registryName, runId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RunGetLogResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void cancel(String resourceGroupName, String registryName, String runId) {
        this.serviceClient().cancel(resourceGroupName, registryName, runId);
    }

    public void cancel(String resourceGroupName, String registryName, String runId, Context context) {
        this.serviceClient().cancel(resourceGroupName, registryName, runId, context);
    }

    private RunsClient serviceClient() {
        return this.innerClient;
    }

    private ContainerRegistryManager manager() {
        return this.serviceManager;
    }
}
