// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager;
import com.azure.resourcemanager.containerregistry.generated.fluent.models.ScopeMapInner;
import com.azure.resourcemanager.containerregistry.generated.models.ProvisioningState;
import com.azure.resourcemanager.containerregistry.generated.models.ScopeMap;
import com.azure.resourcemanager.containerregistry.generated.models.ScopeMapUpdateParameters;
import com.azure.resourcemanager.containerregistry.generated.models.SystemData;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;

public final class ScopeMapImpl implements ScopeMap, ScopeMap.Definition, ScopeMap.Update {
    private ScopeMapInner innerObject;

    private final ContainerRegistryManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String description() {
        return this.innerModel().description();
    }

    public String typePropertiesType() {
        return this.innerModel().typePropertiesType();
    }

    public OffsetDateTime creationDate() {
        return this.innerModel().creationDate();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public List<String> actions() {
        List<String> inner = this.innerModel().actions();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ScopeMapInner innerModel() {
        return this.innerObject;
    }

    private ContainerRegistryManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String registryName;

    private String scopeMapName;

    private ScopeMapUpdateParameters updateScopeMapUpdateParameters;

    public ScopeMapImpl withExistingRegistry(String resourceGroupName, String registryName) {
        this.resourceGroupName = resourceGroupName;
        this.registryName = registryName;
        return this;
    }

    public ScopeMap create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getScopeMaps()
                .create(resourceGroupName, registryName, scopeMapName, this.innerModel(), Context.NONE);
        return this;
    }

    public ScopeMap create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getScopeMaps()
                .create(resourceGroupName, registryName, scopeMapName, this.innerModel(), context);
        return this;
    }

    ScopeMapImpl(String name, ContainerRegistryManager serviceManager) {
        this.innerObject = new ScopeMapInner();
        this.serviceManager = serviceManager;
        this.scopeMapName = name;
    }

    public ScopeMapImpl update() {
        this.updateScopeMapUpdateParameters = new ScopeMapUpdateParameters();
        return this;
    }

    public ScopeMap apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getScopeMaps()
                .update(resourceGroupName, registryName, scopeMapName, updateScopeMapUpdateParameters, Context.NONE);
        return this;
    }

    public ScopeMap apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getScopeMaps()
                .update(resourceGroupName, registryName, scopeMapName, updateScopeMapUpdateParameters, context);
        return this;
    }

    ScopeMapImpl(ScopeMapInner innerObject, ContainerRegistryManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.registryName = Utils.getValueFromIdByName(innerObject.id(), "registries");
        this.scopeMapName = Utils.getValueFromIdByName(innerObject.id(), "scopeMaps");
    }

    public ScopeMap refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getScopeMaps()
                .getWithResponse(resourceGroupName, registryName, scopeMapName, Context.NONE)
                .getValue();
        return this;
    }

    public ScopeMap refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getScopeMaps()
                .getWithResponse(resourceGroupName, registryName, scopeMapName, context)
                .getValue();
        return this;
    }

    public ScopeMapImpl withDescription(String description) {
        if (isInCreateMode()) {
            this.innerModel().withDescription(description);
            return this;
        } else {
            this.updateScopeMapUpdateParameters.withDescription(description);
            return this;
        }
    }

    public ScopeMapImpl withActions(List<String> actions) {
        if (isInCreateMode()) {
            this.innerModel().withActions(actions);
            return this;
        } else {
            this.updateScopeMapUpdateParameters.withActions(actions);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
