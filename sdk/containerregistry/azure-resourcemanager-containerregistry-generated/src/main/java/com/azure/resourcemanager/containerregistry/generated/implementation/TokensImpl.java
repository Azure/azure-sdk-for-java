// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager;
import com.azure.resourcemanager.containerregistry.generated.fluent.TokensClient;
import com.azure.resourcemanager.containerregistry.generated.fluent.models.TokenInner;
import com.azure.resourcemanager.containerregistry.generated.models.Token;
import com.azure.resourcemanager.containerregistry.generated.models.Tokens;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class TokensImpl implements Tokens {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TokensImpl.class);

    private final TokensClient innerClient;

    private final ContainerRegistryManager serviceManager;

    public TokensImpl(TokensClient innerClient, ContainerRegistryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Token get(String resourceGroupName, String registryName, String tokenName) {
        TokenInner inner = this.serviceClient().get(resourceGroupName, registryName, tokenName);
        if (inner != null) {
            return new TokenImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Token> getWithResponse(
        String resourceGroupName, String registryName, String tokenName, Context context) {
        Response<TokenInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, registryName, tokenName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TokenImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String registryName, String tokenName) {
        this.serviceClient().delete(resourceGroupName, registryName, tokenName);
    }

    public void delete(String resourceGroupName, String registryName, String tokenName, Context context) {
        this.serviceClient().delete(resourceGroupName, registryName, tokenName, context);
    }

    public PagedIterable<Token> list(String resourceGroupName, String registryName) {
        PagedIterable<TokenInner> inner = this.serviceClient().list(resourceGroupName, registryName);
        return inner.mapPage(inner1 -> new TokenImpl(inner1, this.manager()));
    }

    public PagedIterable<Token> list(String resourceGroupName, String registryName, Context context) {
        PagedIterable<TokenInner> inner = this.serviceClient().list(resourceGroupName, registryName, context);
        return inner.mapPage(inner1 -> new TokenImpl(inner1, this.manager()));
    }

    public Token getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = Utils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String tokenName = Utils.getValueFromIdByName(id, "tokens");
        if (tokenName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'tokens'.", id)));
        }
        return this.getWithResponse(resourceGroupName, registryName, tokenName, Context.NONE).getValue();
    }

    public Response<Token> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = Utils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String tokenName = Utils.getValueFromIdByName(id, "tokens");
        if (tokenName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'tokens'.", id)));
        }
        return this.getWithResponse(resourceGroupName, registryName, tokenName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = Utils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String tokenName = Utils.getValueFromIdByName(id, "tokens");
        if (tokenName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'tokens'.", id)));
        }
        this.delete(resourceGroupName, registryName, tokenName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = Utils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String tokenName = Utils.getValueFromIdByName(id, "tokens");
        if (tokenName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'tokens'.", id)));
        }
        this.delete(resourceGroupName, registryName, tokenName, context);
    }

    private TokensClient serviceClient() {
        return this.innerClient;
    }

    private ContainerRegistryManager manager() {
        return this.serviceManager;
    }

    public TokenImpl define(String name) {
        return new TokenImpl(name, this.manager());
    }
}
