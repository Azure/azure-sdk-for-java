// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerregistry.generated.fluent.models.ReplicationInner;
import java.util.Map;

/** An immutable client-side representation of Replication. */
public interface Replication {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the provisioningState property: The provisioning state of the replication at the time the operation was
     * called.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the status property: The status of the replication at the time the operation was called.
     *
     * @return the status value.
     */
    Status status();

    /**
     * Gets the regionEndpointEnabled property: Specifies whether the replication's regional endpoint is enabled.
     * Requests will not be routed to a replication whose regional endpoint is disabled, however its data will continue
     * to be synced with other replications.
     *
     * @return the regionEndpointEnabled value.
     */
    Boolean regionEndpointEnabled();

    /**
     * Gets the zoneRedundancy property: Whether or not zone redundancy is enabled for this container registry
     * replication.
     *
     * @return the zoneRedundancy value.
     */
    ZoneRedundancy zoneRedundancy();

    /**
     * Gets the systemData property: Metadata pertaining to creation and last modification of the resource.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.containerregistry.generated.fluent.models.ReplicationInner object.
     *
     * @return the inner object.
     */
    ReplicationInner innerModel();

    /** The entirety of the Replication definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }
    /** The Replication definition stages. */
    interface DefinitionStages {
        /** The first stage of the Replication definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the Replication definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }
        /** The stage of the Replication definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, registryName.
             *
             * @param resourceGroupName The name of the resource group to which the container registry belongs.
             * @param registryName The name of the container registry.
             * @return the next definition stage.
             */
            WithCreate withExistingRegistry(String resourceGroupName, String registryName);
        }
        /**
         * The stage of the Replication definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithRegionEndpointEnabled,
                DefinitionStages.WithZoneRedundancy {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Replication create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Replication create(Context context);
        }
        /** The stage of the Replication definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the Replication definition allowing to specify regionEndpointEnabled. */
        interface WithRegionEndpointEnabled {
            /**
             * Specifies the regionEndpointEnabled property: Specifies whether the replication's regional endpoint is
             * enabled. Requests will not be routed to a replication whose regional endpoint is disabled, however its
             * data will continue to be synced with other replications..
             *
             * @param regionEndpointEnabled Specifies whether the replication's regional endpoint is enabled. Requests
             *     will not be routed to a replication whose regional endpoint is disabled, however its data will
             *     continue to be synced with other replications.
             * @return the next definition stage.
             */
            WithCreate withRegionEndpointEnabled(Boolean regionEndpointEnabled);
        }
        /** The stage of the Replication definition allowing to specify zoneRedundancy. */
        interface WithZoneRedundancy {
            /**
             * Specifies the zoneRedundancy property: Whether or not zone redundancy is enabled for this container
             * registry replication.
             *
             * @param zoneRedundancy Whether or not zone redundancy is enabled for this container registry replication.
             * @return the next definition stage.
             */
            WithCreate withZoneRedundancy(ZoneRedundancy zoneRedundancy);
        }
    }
    /**
     * Begins update for the Replication resource.
     *
     * @return the stage of resource update.
     */
    Replication.Update update();

    /** The template for Replication update. */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithRegionEndpointEnabled {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Replication apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Replication apply(Context context);
    }
    /** The Replication update stages. */
    interface UpdateStages {
        /** The stage of the Replication update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: The tags for the replication..
             *
             * @param tags The tags for the replication.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the Replication update allowing to specify regionEndpointEnabled. */
        interface WithRegionEndpointEnabled {
            /**
             * Specifies the regionEndpointEnabled property: Specifies whether the replication's regional endpoint is
             * enabled. Requests will not be routed to a replication whose regional endpoint is disabled, however its
             * data will continue to be synced with other replications..
             *
             * @param regionEndpointEnabled Specifies whether the replication's regional endpoint is enabled. Requests
             *     will not be routed to a replication whose regional endpoint is disabled, however its data will
             *     continue to be synced with other replications.
             * @return the next definition stage.
             */
            Update withRegionEndpointEnabled(Boolean regionEndpointEnabled);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Replication refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Replication refresh(Context context);
}
