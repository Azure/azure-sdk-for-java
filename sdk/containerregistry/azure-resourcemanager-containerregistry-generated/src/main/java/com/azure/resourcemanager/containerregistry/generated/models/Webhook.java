// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerregistry.generated.fluent.models.WebhookInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of Webhook. */
public interface Webhook {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the status property: The status of the webhook at the time the operation was called.
     *
     * @return the status value.
     */
    WebhookStatus status();

    /**
     * Gets the scope property: The scope of repositories where the event can be triggered. For example, 'foo:*' means
     * events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to
     * 'foo:latest'. Empty means all events.
     *
     * @return the scope value.
     */
    String scope();

    /**
     * Gets the actions property: The list of actions that trigger the webhook to post notifications.
     *
     * @return the actions value.
     */
    List<WebhookAction> actions();

    /**
     * Gets the provisioningState property: The provisioning state of the webhook at the time the operation was called.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the systemData property: Metadata pertaining to creation and last modification of the resource.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.containerregistry.generated.fluent.models.WebhookInner object.
     *
     * @return the inner object.
     */
    WebhookInner innerModel();

    /** The entirety of the Webhook definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }
    /** The Webhook definition stages. */
    interface DefinitionStages {
        /** The first stage of the Webhook definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the Webhook definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The location of the webhook. This cannot be changed after the resource is created.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The location of the webhook. This cannot be changed after the resource is created.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }
        /** The stage of the Webhook definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, registryName.
             *
             * @param resourceGroupName The name of the resource group to which the container registry belongs.
             * @param registryName The name of the container registry.
             * @return the next definition stage.
             */
            WithCreate withExistingRegistry(String resourceGroupName, String registryName);
        }
        /**
         * The stage of the Webhook definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithServiceUri,
                DefinitionStages.WithCustomHeaders,
                DefinitionStages.WithStatus,
                DefinitionStages.WithScope,
                DefinitionStages.WithActions {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Webhook create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Webhook create(Context context);
        }
        /** The stage of the Webhook definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: The tags for the webhook..
             *
             * @param tags The tags for the webhook.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the Webhook definition allowing to specify serviceUri. */
        interface WithServiceUri {
            /**
             * Specifies the serviceUri property: The service URI for the webhook to post notifications..
             *
             * @param serviceUri The service URI for the webhook to post notifications.
             * @return the next definition stage.
             */
            WithCreate withServiceUri(String serviceUri);
        }
        /** The stage of the Webhook definition allowing to specify customHeaders. */
        interface WithCustomHeaders {
            /**
             * Specifies the customHeaders property: Custom headers that will be added to the webhook notifications..
             *
             * @param customHeaders Custom headers that will be added to the webhook notifications.
             * @return the next definition stage.
             */
            WithCreate withCustomHeaders(Map<String, String> customHeaders);
        }
        /** The stage of the Webhook definition allowing to specify status. */
        interface WithStatus {
            /**
             * Specifies the status property: The status of the webhook at the time the operation was called..
             *
             * @param status The status of the webhook at the time the operation was called.
             * @return the next definition stage.
             */
            WithCreate withStatus(WebhookStatus status);
        }
        /** The stage of the Webhook definition allowing to specify scope. */
        interface WithScope {
            /**
             * Specifies the scope property: The scope of repositories where the event can be triggered. For example,
             * 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only.
             * 'foo' is equivalent to 'foo:latest'. Empty means all events..
             *
             * @param scope The scope of repositories where the event can be triggered. For example, 'foo:*' means
             *     events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is
             *     equivalent to 'foo:latest'. Empty means all events.
             * @return the next definition stage.
             */
            WithCreate withScope(String scope);
        }
        /** The stage of the Webhook definition allowing to specify actions. */
        interface WithActions {
            /**
             * Specifies the actions property: The list of actions that trigger the webhook to post notifications..
             *
             * @param actions The list of actions that trigger the webhook to post notifications.
             * @return the next definition stage.
             */
            WithCreate withActions(List<WebhookAction> actions);
        }
    }
    /**
     * Begins update for the Webhook resource.
     *
     * @return the stage of resource update.
     */
    Webhook.Update update();

    /** The template for Webhook update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithServiceUri,
            UpdateStages.WithCustomHeaders,
            UpdateStages.WithStatus,
            UpdateStages.WithScope,
            UpdateStages.WithActions {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Webhook apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Webhook apply(Context context);
    }
    /** The Webhook update stages. */
    interface UpdateStages {
        /** The stage of the Webhook update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: The tags for the webhook..
             *
             * @param tags The tags for the webhook.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the Webhook update allowing to specify serviceUri. */
        interface WithServiceUri {
            /**
             * Specifies the serviceUri property: The service URI for the webhook to post notifications..
             *
             * @param serviceUri The service URI for the webhook to post notifications.
             * @return the next definition stage.
             */
            Update withServiceUri(String serviceUri);
        }
        /** The stage of the Webhook update allowing to specify customHeaders. */
        interface WithCustomHeaders {
            /**
             * Specifies the customHeaders property: Custom headers that will be added to the webhook notifications..
             *
             * @param customHeaders Custom headers that will be added to the webhook notifications.
             * @return the next definition stage.
             */
            Update withCustomHeaders(Map<String, String> customHeaders);
        }
        /** The stage of the Webhook update allowing to specify status. */
        interface WithStatus {
            /**
             * Specifies the status property: The status of the webhook at the time the operation was called..
             *
             * @param status The status of the webhook at the time the operation was called.
             * @return the next definition stage.
             */
            Update withStatus(WebhookStatus status);
        }
        /** The stage of the Webhook update allowing to specify scope. */
        interface WithScope {
            /**
             * Specifies the scope property: The scope of repositories where the event can be triggered. For example,
             * 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only.
             * 'foo' is equivalent to 'foo:latest'. Empty means all events..
             *
             * @param scope The scope of repositories where the event can be triggered. For example, 'foo:*' means
             *     events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is
             *     equivalent to 'foo:latest'. Empty means all events.
             * @return the next definition stage.
             */
            Update withScope(String scope);
        }
        /** The stage of the Webhook update allowing to specify actions. */
        interface WithActions {
            /**
             * Specifies the actions property: The list of actions that trigger the webhook to post notifications..
             *
             * @param actions The list of actions that trigger the webhook to post notifications.
             * @return the next definition stage.
             */
            Update withActions(List<WebhookAction> actions);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Webhook refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Webhook refresh(Context context);

    /**
     * Triggers a ping event to be sent to the webhook.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the basic information of an event.
     */
    EventInfo ping();

    /**
     * Triggers a ping event to be sent to the webhook.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the basic information of an event.
     */
    Response<EventInfo> pingWithResponse(Context context);

    /**
     * Gets the configuration of service URI and custom headers for the webhook.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration of service URI and custom headers for the webhook.
     */
    CallbackConfig getCallbackConfig();

    /**
     * Gets the configuration of service URI and custom headers for the webhook.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration of service URI and custom headers for the webhook.
     */
    Response<CallbackConfig> getCallbackConfigWithResponse(Context context);

    /**
     * Lists recent events for the specified webhook.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a request to list events for a webhook.
     */
    PagedIterable<Event> listEvents();

    /**
     * Lists recent events for the specified webhook.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a request to list events for a webhook.
     */
    PagedIterable<Event> listEvents(Context context);
}
