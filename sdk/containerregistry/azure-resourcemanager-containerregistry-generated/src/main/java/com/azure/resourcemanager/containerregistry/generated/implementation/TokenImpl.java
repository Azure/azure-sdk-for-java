// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerregistry.generated.fluent.models.TokenInner;
import com.azure.resourcemanager.containerregistry.generated.models.ProvisioningState;
import com.azure.resourcemanager.containerregistry.generated.models.Token;
import com.azure.resourcemanager.containerregistry.generated.models.TokenCredentialsProperties;
import com.azure.resourcemanager.containerregistry.generated.models.TokenStatus;
import com.azure.resourcemanager.containerregistry.generated.models.TokenUpdateParameters;
import java.time.OffsetDateTime;

public final class TokenImpl implements Token, Token.Definition, Token.Update {
    private TokenInner innerObject;

    private final com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public OffsetDateTime creationDate() {
        return this.innerModel().creationDate();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String scopeMapId() {
        return this.innerModel().scopeMapId();
    }

    public TokenCredentialsProperties credentials() {
        return this.innerModel().credentials();
    }

    public TokenStatus status() {
        return this.innerModel().status();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public TokenInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String registryName;

    private String tokenName;

    private TokenUpdateParameters updateTokenUpdateParameters;

    public TokenImpl withExistingRegistry(String resourceGroupName, String registryName) {
        this.resourceGroupName = resourceGroupName;
        this.registryName = registryName;
        return this;
    }

    public Token create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTokens()
                .create(resourceGroupName, registryName, tokenName, this.innerModel(), Context.NONE);
        return this;
    }

    public Token create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTokens()
                .create(resourceGroupName, registryName, tokenName, this.innerModel(), context);
        return this;
    }

    TokenImpl(
        String name, com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager) {
        this.innerObject = new TokenInner();
        this.serviceManager = serviceManager;
        this.tokenName = name;
    }

    public TokenImpl update() {
        this.updateTokenUpdateParameters = new TokenUpdateParameters();
        return this;
    }

    public Token apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTokens()
                .update(resourceGroupName, registryName, tokenName, updateTokenUpdateParameters, Context.NONE);
        return this;
    }

    public Token apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTokens()
                .update(resourceGroupName, registryName, tokenName, updateTokenUpdateParameters, context);
        return this;
    }

    TokenImpl(
        TokenInner innerObject,
        com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.registryName = Utils.getValueFromIdByName(innerObject.id(), "registries");
        this.tokenName = Utils.getValueFromIdByName(innerObject.id(), "tokens");
    }

    public Token refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTokens()
                .getWithResponse(resourceGroupName, registryName, tokenName, Context.NONE)
                .getValue();
        return this;
    }

    public Token refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTokens()
                .getWithResponse(resourceGroupName, registryName, tokenName, context)
                .getValue();
        return this;
    }

    public TokenImpl withScopeMapId(String scopeMapId) {
        if (isInCreateMode()) {
            this.innerModel().withScopeMapId(scopeMapId);
            return this;
        } else {
            this.updateTokenUpdateParameters.withScopeMapId(scopeMapId);
            return this;
        }
    }

    public TokenImpl withCredentials(TokenCredentialsProperties credentials) {
        if (isInCreateMode()) {
            this.innerModel().withCredentials(credentials);
            return this;
        } else {
            this.updateTokenUpdateParameters.withCredentials(credentials);
            return this;
        }
    }

    public TokenImpl withStatus(TokenStatus status) {
        if (isInCreateMode()) {
            this.innerModel().withStatus(status);
            return this;
        } else {
            this.updateTokenUpdateParameters.withStatus(status);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
