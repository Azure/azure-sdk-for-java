// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerregistry.generated.fluent.ReplicationsClient;
import com.azure.resourcemanager.containerregistry.generated.fluent.models.ReplicationInner;
import com.azure.resourcemanager.containerregistry.generated.models.Replication;
import com.azure.resourcemanager.containerregistry.generated.models.Replications;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ReplicationsImpl implements Replications {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ReplicationsImpl.class);

    private final ReplicationsClient innerClient;

    private final com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager;

    public ReplicationsImpl(
        ReplicationsClient innerClient,
        com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Replication get(String resourceGroupName, String registryName, String replicationName) {
        ReplicationInner inner = this.serviceClient().get(resourceGroupName, registryName, replicationName);
        if (inner != null) {
            return new ReplicationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Replication> getWithResponse(
        String resourceGroupName, String registryName, String replicationName, Context context) {
        Response<ReplicationInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, registryName, replicationName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ReplicationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String registryName, String replicationName) {
        this.serviceClient().delete(resourceGroupName, registryName, replicationName);
    }

    public void delete(String resourceGroupName, String registryName, String replicationName, Context context) {
        this.serviceClient().delete(resourceGroupName, registryName, replicationName, context);
    }

    public PagedIterable<Replication> list(String resourceGroupName, String registryName) {
        PagedIterable<ReplicationInner> inner = this.serviceClient().list(resourceGroupName, registryName);
        return Utils.mapPage(inner, inner1 -> new ReplicationImpl(inner1, this.manager()));
    }

    public PagedIterable<Replication> list(String resourceGroupName, String registryName, Context context) {
        PagedIterable<ReplicationInner> inner = this.serviceClient().list(resourceGroupName, registryName, context);
        return Utils.mapPage(inner, inner1 -> new ReplicationImpl(inner1, this.manager()));
    }

    public Replication getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = Utils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String replicationName = Utils.getValueFromIdByName(id, "replications");
        if (replicationName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'replications'.", id)));
        }
        return this.getWithResponse(resourceGroupName, registryName, replicationName, Context.NONE).getValue();
    }

    public Response<Replication> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = Utils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String replicationName = Utils.getValueFromIdByName(id, "replications");
        if (replicationName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'replications'.", id)));
        }
        return this.getWithResponse(resourceGroupName, registryName, replicationName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = Utils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String replicationName = Utils.getValueFromIdByName(id, "replications");
        if (replicationName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'replications'.", id)));
        }
        this.delete(resourceGroupName, registryName, replicationName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = Utils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String replicationName = Utils.getValueFromIdByName(id, "replications");
        if (replicationName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'replications'.", id)));
        }
        this.delete(resourceGroupName, registryName, replicationName, context);
    }

    private ReplicationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager manager() {
        return this.serviceManager;
    }

    public ReplicationImpl define(String name) {
        return new ReplicationImpl(name, this.manager());
    }
}
