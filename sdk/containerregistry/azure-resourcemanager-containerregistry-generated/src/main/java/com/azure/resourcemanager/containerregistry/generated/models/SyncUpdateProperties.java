// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.Duration;

/** The parameters for updating the sync properties of the connected registry with its parent. */
@Fluent
public final class SyncUpdateProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SyncUpdateProperties.class);

    /*
     * The cron expression indicating the schedule that the connected registry
     * will sync with its parent.
     */
    @JsonProperty(value = "schedule")
    private String schedule;

    /*
     * The time window during which sync is enabled for each schedule
     * occurrence. Specify the duration using the format
     * P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
     */
    @JsonProperty(value = "syncWindow")
    private Duration syncWindow;

    /*
     * The period of time for which a message is available to sync before it is
     * expired. Specify the duration using the format
     * P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
     */
    @JsonProperty(value = "messageTtl")
    private Duration messageTtl;

    /**
     * Get the schedule property: The cron expression indicating the schedule that the connected registry will sync with
     * its parent.
     *
     * @return the schedule value.
     */
    public String schedule() {
        return this.schedule;
    }

    /**
     * Set the schedule property: The cron expression indicating the schedule that the connected registry will sync with
     * its parent.
     *
     * @param schedule the schedule value to set.
     * @return the SyncUpdateProperties object itself.
     */
    public SyncUpdateProperties withSchedule(String schedule) {
        this.schedule = schedule;
        return this;
    }

    /**
     * Get the syncWindow property: The time window during which sync is enabled for each schedule occurrence. Specify
     * the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
     *
     * @return the syncWindow value.
     */
    public Duration syncWindow() {
        return this.syncWindow;
    }

    /**
     * Set the syncWindow property: The time window during which sync is enabled for each schedule occurrence. Specify
     * the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
     *
     * @param syncWindow the syncWindow value to set.
     * @return the SyncUpdateProperties object itself.
     */
    public SyncUpdateProperties withSyncWindow(Duration syncWindow) {
        this.syncWindow = syncWindow;
        return this;
    }

    /**
     * Get the messageTtl property: The period of time for which a message is available to sync before it is expired.
     * Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
     *
     * @return the messageTtl value.
     */
    public Duration messageTtl() {
        return this.messageTtl;
    }

    /**
     * Set the messageTtl property: The period of time for which a message is available to sync before it is expired.
     * Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
     *
     * @param messageTtl the messageTtl value to set.
     * @return the SyncUpdateProperties object itself.
     */
    public SyncUpdateProperties withMessageTtl(Duration messageTtl) {
        this.messageTtl = messageTtl;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
