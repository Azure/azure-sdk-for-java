// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerregistry.generated.fluent.models.ConnectedRegistryInner;
import com.azure.resourcemanager.containerregistry.generated.models.ActivationProperties;
import com.azure.resourcemanager.containerregistry.generated.models.ConnectedRegistry;
import com.azure.resourcemanager.containerregistry.generated.models.ConnectedRegistryMode;
import com.azure.resourcemanager.containerregistry.generated.models.ConnectedRegistryUpdateParameters;
import com.azure.resourcemanager.containerregistry.generated.models.ConnectionState;
import com.azure.resourcemanager.containerregistry.generated.models.LoggingProperties;
import com.azure.resourcemanager.containerregistry.generated.models.LoginServerProperties;
import com.azure.resourcemanager.containerregistry.generated.models.ParentProperties;
import com.azure.resourcemanager.containerregistry.generated.models.ProvisioningState;
import com.azure.resourcemanager.containerregistry.generated.models.StatusDetailProperties;
import com.azure.resourcemanager.containerregistry.generated.models.SyncUpdateProperties;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;

public final class ConnectedRegistryImpl
    implements ConnectedRegistry, ConnectedRegistry.Definition, ConnectedRegistry.Update {
    private ConnectedRegistryInner innerObject;

    private final com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public ConnectedRegistryMode mode() {
        return this.innerModel().mode();
    }

    public String version() {
        return this.innerModel().version();
    }

    public ConnectionState connectionState() {
        return this.innerModel().connectionState();
    }

    public OffsetDateTime lastActivityTime() {
        return this.innerModel().lastActivityTime();
    }

    public ActivationProperties activation() {
        return this.innerModel().activation();
    }

    public ParentProperties parent() {
        return this.innerModel().parent();
    }

    public List<String> clientTokenIds() {
        List<String> inner = this.innerModel().clientTokenIds();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public LoginServerProperties loginServer() {
        return this.innerModel().loginServer();
    }

    public LoggingProperties logging() {
        return this.innerModel().logging();
    }

    public List<StatusDetailProperties> statusDetails() {
        List<StatusDetailProperties> inner = this.innerModel().statusDetails();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ConnectedRegistryInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String registryName;

    private String connectedRegistryName;

    private ConnectedRegistryUpdateParameters updateConnectedRegistryUpdateParameters;

    public ConnectedRegistryImpl withExistingRegistry(String resourceGroupName, String registryName) {
        this.resourceGroupName = resourceGroupName;
        this.registryName = registryName;
        return this;
    }

    public ConnectedRegistry create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectedRegistries()
                .create(resourceGroupName, registryName, connectedRegistryName, this.innerModel(), Context.NONE);
        return this;
    }

    public ConnectedRegistry create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectedRegistries()
                .create(resourceGroupName, registryName, connectedRegistryName, this.innerModel(), context);
        return this;
    }

    ConnectedRegistryImpl(
        String name, com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager) {
        this.innerObject = new ConnectedRegistryInner();
        this.serviceManager = serviceManager;
        this.connectedRegistryName = name;
    }

    public ConnectedRegistryImpl update() {
        this.updateConnectedRegistryUpdateParameters = new ConnectedRegistryUpdateParameters();
        return this;
    }

    public ConnectedRegistry apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectedRegistries()
                .update(
                    resourceGroupName,
                    registryName,
                    connectedRegistryName,
                    updateConnectedRegistryUpdateParameters,
                    Context.NONE);
        return this;
    }

    public ConnectedRegistry apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectedRegistries()
                .update(
                    resourceGroupName,
                    registryName,
                    connectedRegistryName,
                    updateConnectedRegistryUpdateParameters,
                    context);
        return this;
    }

    ConnectedRegistryImpl(
        ConnectedRegistryInner innerObject,
        com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.registryName = Utils.getValueFromIdByName(innerObject.id(), "registries");
        this.connectedRegistryName = Utils.getValueFromIdByName(innerObject.id(), "connectedRegistries");
    }

    public ConnectedRegistry refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectedRegistries()
                .getWithResponse(resourceGroupName, registryName, connectedRegistryName, Context.NONE)
                .getValue();
        return this;
    }

    public ConnectedRegistry refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectedRegistries()
                .getWithResponse(resourceGroupName, registryName, connectedRegistryName, context)
                .getValue();
        return this;
    }

    public void deactivate() {
        serviceManager.connectedRegistries().deactivate(resourceGroupName, registryName, connectedRegistryName);
    }

    public void deactivate(Context context) {
        serviceManager
            .connectedRegistries()
            .deactivate(resourceGroupName, registryName, connectedRegistryName, context);
    }

    public ConnectedRegistryImpl withMode(ConnectedRegistryMode mode) {
        this.innerModel().withMode(mode);
        return this;
    }

    public ConnectedRegistryImpl withParent(ParentProperties parent) {
        this.innerModel().withParent(parent);
        return this;
    }

    public ConnectedRegistryImpl withClientTokenIds(List<String> clientTokenIds) {
        if (isInCreateMode()) {
            this.innerModel().withClientTokenIds(clientTokenIds);
            return this;
        } else {
            this.updateConnectedRegistryUpdateParameters.withClientTokenIds(clientTokenIds);
            return this;
        }
    }

    public ConnectedRegistryImpl withLoginServer(LoginServerProperties loginServer) {
        this.innerModel().withLoginServer(loginServer);
        return this;
    }

    public ConnectedRegistryImpl withLogging(LoggingProperties logging) {
        if (isInCreateMode()) {
            this.innerModel().withLogging(logging);
            return this;
        } else {
            this.updateConnectedRegistryUpdateParameters.withLogging(logging);
            return this;
        }
    }

    public ConnectedRegistryImpl withSyncProperties(SyncUpdateProperties syncProperties) {
        this.updateConnectedRegistryUpdateParameters.withSyncProperties(syncProperties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
