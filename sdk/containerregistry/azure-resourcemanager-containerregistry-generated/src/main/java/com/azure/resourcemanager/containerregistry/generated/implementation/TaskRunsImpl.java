// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerregistry.generated.fluent.TaskRunsClient;
import com.azure.resourcemanager.containerregistry.generated.fluent.models.TaskRunInner;
import com.azure.resourcemanager.containerregistry.generated.models.TaskRun;
import com.azure.resourcemanager.containerregistry.generated.models.TaskRuns;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class TaskRunsImpl implements TaskRuns {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TaskRunsImpl.class);

    private final TaskRunsClient innerClient;

    private final com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager;

    public TaskRunsImpl(
        TaskRunsClient innerClient,
        com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public TaskRun get(String resourceGroupName, String registryName, String taskRunName) {
        TaskRunInner inner = this.serviceClient().get(resourceGroupName, registryName, taskRunName);
        if (inner != null) {
            return new TaskRunImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TaskRun> getWithResponse(
        String resourceGroupName, String registryName, String taskRunName, Context context) {
        Response<TaskRunInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, registryName, taskRunName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TaskRunImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String registryName, String taskRunName) {
        this.serviceClient().delete(resourceGroupName, registryName, taskRunName);
    }

    public void delete(String resourceGroupName, String registryName, String taskRunName, Context context) {
        this.serviceClient().delete(resourceGroupName, registryName, taskRunName, context);
    }

    public TaskRun getDetails(String resourceGroupName, String registryName, String taskRunName) {
        TaskRunInner inner = this.serviceClient().getDetails(resourceGroupName, registryName, taskRunName);
        if (inner != null) {
            return new TaskRunImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TaskRun> getDetailsWithResponse(
        String resourceGroupName, String registryName, String taskRunName, Context context) {
        Response<TaskRunInner> inner =
            this.serviceClient().getDetailsWithResponse(resourceGroupName, registryName, taskRunName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TaskRunImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<TaskRun> list(String resourceGroupName, String registryName) {
        PagedIterable<TaskRunInner> inner = this.serviceClient().list(resourceGroupName, registryName);
        return Utils.mapPage(inner, inner1 -> new TaskRunImpl(inner1, this.manager()));
    }

    public PagedIterable<TaskRun> list(String resourceGroupName, String registryName, Context context) {
        PagedIterable<TaskRunInner> inner = this.serviceClient().list(resourceGroupName, registryName, context);
        return Utils.mapPage(inner, inner1 -> new TaskRunImpl(inner1, this.manager()));
    }

    public TaskRun getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = Utils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String taskRunName = Utils.getValueFromIdByName(id, "taskRuns");
        if (taskRunName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'taskRuns'.", id)));
        }
        return this.getWithResponse(resourceGroupName, registryName, taskRunName, Context.NONE).getValue();
    }

    public Response<TaskRun> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = Utils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String taskRunName = Utils.getValueFromIdByName(id, "taskRuns");
        if (taskRunName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'taskRuns'.", id)));
        }
        return this.getWithResponse(resourceGroupName, registryName, taskRunName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = Utils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String taskRunName = Utils.getValueFromIdByName(id, "taskRuns");
        if (taskRunName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'taskRuns'.", id)));
        }
        this.delete(resourceGroupName, registryName, taskRunName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registryName = Utils.getValueFromIdByName(id, "registries");
        if (registryName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'registries'.", id)));
        }
        String taskRunName = Utils.getValueFromIdByName(id, "taskRuns");
        if (taskRunName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'taskRuns'.", id)));
        }
        this.delete(resourceGroupName, registryName, taskRunName, context);
    }

    private TaskRunsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager manager() {
        return this.serviceManager;
    }

    public TaskRunImpl define(String name) {
        return new TaskRunImpl(name, this.manager());
    }
}
