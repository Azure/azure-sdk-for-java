// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The parameters for updating a token. */
@JsonFlatten
@Fluent
public class TokenUpdateParameters {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TokenUpdateParameters.class);

    /*
     * The resource ID of the scope map to which the token will be associated
     * with.
     */
    @JsonProperty(value = "properties.scopeMapId")
    private String scopeMapId;

    /*
     * The status of the token example enabled or disabled.
     */
    @JsonProperty(value = "properties.status")
    private TokenStatus status;

    /*
     * The credentials that can be used for authenticating the token.
     */
    @JsonProperty(value = "properties.credentials")
    private TokenCredentialsProperties credentials;

    /**
     * Get the scopeMapId property: The resource ID of the scope map to which the token will be associated with.
     *
     * @return the scopeMapId value.
     */
    public String scopeMapId() {
        return this.scopeMapId;
    }

    /**
     * Set the scopeMapId property: The resource ID of the scope map to which the token will be associated with.
     *
     * @param scopeMapId the scopeMapId value to set.
     * @return the TokenUpdateParameters object itself.
     */
    public TokenUpdateParameters withScopeMapId(String scopeMapId) {
        this.scopeMapId = scopeMapId;
        return this;
    }

    /**
     * Get the status property: The status of the token example enabled or disabled.
     *
     * @return the status value.
     */
    public TokenStatus status() {
        return this.status;
    }

    /**
     * Set the status property: The status of the token example enabled or disabled.
     *
     * @param status the status value to set.
     * @return the TokenUpdateParameters object itself.
     */
    public TokenUpdateParameters withStatus(TokenStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the credentials property: The credentials that can be used for authenticating the token.
     *
     * @return the credentials value.
     */
    public TokenCredentialsProperties credentials() {
        return this.credentials;
    }

    /**
     * Set the credentials property: The credentials that can be used for authenticating the token.
     *
     * @param credentials the credentials value to set.
     * @return the TokenUpdateParameters object itself.
     */
    public TokenUpdateParameters withCredentials(TokenCredentialsProperties credentials) {
        this.credentials = credentials;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (credentials() != null) {
            credentials().validate();
        }
    }
}
