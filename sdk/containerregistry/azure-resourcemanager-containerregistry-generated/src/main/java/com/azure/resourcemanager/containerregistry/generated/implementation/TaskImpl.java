// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerregistry.generated.fluent.models.TaskInner;
import com.azure.resourcemanager.containerregistry.generated.models.AgentProperties;
import com.azure.resourcemanager.containerregistry.generated.models.Credentials;
import com.azure.resourcemanager.containerregistry.generated.models.IdentityProperties;
import com.azure.resourcemanager.containerregistry.generated.models.PlatformProperties;
import com.azure.resourcemanager.containerregistry.generated.models.PlatformUpdateParameters;
import com.azure.resourcemanager.containerregistry.generated.models.ProvisioningState;
import com.azure.resourcemanager.containerregistry.generated.models.Task;
import com.azure.resourcemanager.containerregistry.generated.models.TaskStatus;
import com.azure.resourcemanager.containerregistry.generated.models.TaskStepProperties;
import com.azure.resourcemanager.containerregistry.generated.models.TaskStepUpdateParameters;
import com.azure.resourcemanager.containerregistry.generated.models.TaskUpdateParameters;
import com.azure.resourcemanager.containerregistry.generated.models.TriggerProperties;
import com.azure.resourcemanager.containerregistry.generated.models.TriggerUpdateParameters;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.Map;

public final class TaskImpl implements Task, Task.Definition, Task.Update {
    private TaskInner innerObject;

    private final com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public IdentityProperties identity() {
        return this.innerModel().identity();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public OffsetDateTime creationDate() {
        return this.innerModel().creationDate();
    }

    public TaskStatus status() {
        return this.innerModel().status();
    }

    public PlatformProperties platform() {
        return this.innerModel().platform();
    }

    public AgentProperties agentConfiguration() {
        return this.innerModel().agentConfiguration();
    }

    public String agentPoolName() {
        return this.innerModel().agentPoolName();
    }

    public Integer timeout() {
        return this.innerModel().timeout();
    }

    public TaskStepProperties step() {
        return this.innerModel().step();
    }

    public TriggerProperties trigger() {
        return this.innerModel().trigger();
    }

    public Credentials credentials() {
        return this.innerModel().credentials();
    }

    public String logTemplate() {
        return this.innerModel().logTemplate();
    }

    public Boolean isSystemTask() {
        return this.innerModel().isSystemTask();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public TaskInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String registryName;

    private String taskName;

    private TaskUpdateParameters updateTaskUpdateParameters;

    public TaskImpl withExistingRegistry(String resourceGroupName, String registryName) {
        this.resourceGroupName = resourceGroupName;
        this.registryName = registryName;
        return this;
    }

    public Task create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTasks()
                .create(resourceGroupName, registryName, taskName, this.innerModel(), Context.NONE);
        return this;
    }

    public Task create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTasks()
                .create(resourceGroupName, registryName, taskName, this.innerModel(), context);
        return this;
    }

    TaskImpl(
        String name, com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager) {
        this.innerObject = new TaskInner();
        this.serviceManager = serviceManager;
        this.taskName = name;
    }

    public TaskImpl update() {
        this.updateTaskUpdateParameters = new TaskUpdateParameters();
        return this;
    }

    public Task apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTasks()
                .update(resourceGroupName, registryName, taskName, updateTaskUpdateParameters, Context.NONE);
        return this;
    }

    public Task apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTasks()
                .update(resourceGroupName, registryName, taskName, updateTaskUpdateParameters, context);
        return this;
    }

    TaskImpl(
        TaskInner innerObject,
        com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.registryName = Utils.getValueFromIdByName(innerObject.id(), "registries");
        this.taskName = Utils.getValueFromIdByName(innerObject.id(), "tasks");
    }

    public Task refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTasks()
                .getWithResponse(resourceGroupName, registryName, taskName, Context.NONE)
                .getValue();
        return this;
    }

    public Task refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTasks()
                .getWithResponse(resourceGroupName, registryName, taskName, context)
                .getValue();
        return this;
    }

    public Task getDetails() {
        return serviceManager.tasks().getDetails(resourceGroupName, registryName, taskName);
    }

    public Response<Task> getDetailsWithResponse(Context context) {
        return serviceManager.tasks().getDetailsWithResponse(resourceGroupName, registryName, taskName, context);
    }

    public TaskImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public TaskImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public TaskImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateTaskUpdateParameters.withTags(tags);
            return this;
        }
    }

    public TaskImpl withIdentity(IdentityProperties identity) {
        if (isInCreateMode()) {
            this.innerModel().withIdentity(identity);
            return this;
        } else {
            this.updateTaskUpdateParameters.withIdentity(identity);
            return this;
        }
    }

    public TaskImpl withStatus(TaskStatus status) {
        if (isInCreateMode()) {
            this.innerModel().withStatus(status);
            return this;
        } else {
            this.updateTaskUpdateParameters.withStatus(status);
            return this;
        }
    }

    public TaskImpl withPlatform(PlatformProperties platform) {
        this.innerModel().withPlatform(platform);
        return this;
    }

    public TaskImpl withAgentConfiguration(AgentProperties agentConfiguration) {
        if (isInCreateMode()) {
            this.innerModel().withAgentConfiguration(agentConfiguration);
            return this;
        } else {
            this.updateTaskUpdateParameters.withAgentConfiguration(agentConfiguration);
            return this;
        }
    }

    public TaskImpl withAgentPoolName(String agentPoolName) {
        if (isInCreateMode()) {
            this.innerModel().withAgentPoolName(agentPoolName);
            return this;
        } else {
            this.updateTaskUpdateParameters.withAgentPoolName(agentPoolName);
            return this;
        }
    }

    public TaskImpl withTimeout(Integer timeout) {
        if (isInCreateMode()) {
            this.innerModel().withTimeout(timeout);
            return this;
        } else {
            this.updateTaskUpdateParameters.withTimeout(timeout);
            return this;
        }
    }

    public TaskImpl withStep(TaskStepProperties step) {
        this.innerModel().withStep(step);
        return this;
    }

    public TaskImpl withTrigger(TriggerProperties trigger) {
        this.innerModel().withTrigger(trigger);
        return this;
    }

    public TaskImpl withCredentials(Credentials credentials) {
        if (isInCreateMode()) {
            this.innerModel().withCredentials(credentials);
            return this;
        } else {
            this.updateTaskUpdateParameters.withCredentials(credentials);
            return this;
        }
    }

    public TaskImpl withLogTemplate(String logTemplate) {
        if (isInCreateMode()) {
            this.innerModel().withLogTemplate(logTemplate);
            return this;
        } else {
            this.updateTaskUpdateParameters.withLogTemplate(logTemplate);
            return this;
        }
    }

    public TaskImpl withIsSystemTask(Boolean isSystemTask) {
        this.innerModel().withIsSystemTask(isSystemTask);
        return this;
    }

    public TaskImpl withPlatform(PlatformUpdateParameters platform) {
        this.updateTaskUpdateParameters.withPlatform(platform);
        return this;
    }

    public TaskImpl withStep(TaskStepUpdateParameters step) {
        this.updateTaskUpdateParameters.withStep(step);
        return this;
    }

    public TaskImpl withTrigger(TriggerUpdateParameters trigger) {
        this.updateTaskUpdateParameters.withTrigger(trigger);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
