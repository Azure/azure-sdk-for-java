// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerregistry.generated.fluent.models.AgentPoolInner;
import java.util.Map;

/** An immutable client-side representation of AgentPool. */
public interface AgentPool {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the count property: The count of agent machine.
     *
     * @return the count value.
     */
    Integer count();

    /**
     * Gets the tier property: The Tier of agent machine.
     *
     * @return the tier value.
     */
    String tier();

    /**
     * Gets the os property: The OS of agent machine.
     *
     * @return the os value.
     */
    OS os();

    /**
     * Gets the virtualNetworkSubnetResourceId property: The Virtual Network Subnet Resource Id of the agent machine.
     *
     * @return the virtualNetworkSubnetResourceId value.
     */
    String virtualNetworkSubnetResourceId();

    /**
     * Gets the provisioningState property: The provisioning state of this agent pool.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the systemData property: Metadata pertaining to creation and last modification of the resource.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.containerregistry.generated.fluent.models.AgentPoolInner object.
     *
     * @return the inner object.
     */
    AgentPoolInner innerModel();

    /** The entirety of the AgentPool definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }
    /** The AgentPool definition stages. */
    interface DefinitionStages {
        /** The first stage of the AgentPool definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the AgentPool definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }
        /** The stage of the AgentPool definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, registryName.
             *
             * @param resourceGroupName The name of the resource group to which the container registry belongs.
             * @param registryName The name of the container registry.
             * @return the next definition stage.
             */
            WithCreate withExistingRegistry(String resourceGroupName, String registryName);
        }
        /**
         * The stage of the AgentPool definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithCount,
                DefinitionStages.WithTier,
                DefinitionStages.WithOs,
                DefinitionStages.WithVirtualNetworkSubnetResourceId {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            AgentPool create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            AgentPool create(Context context);
        }
        /** The stage of the AgentPool definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the AgentPool definition allowing to specify count. */
        interface WithCount {
            /**
             * Specifies the count property: The count of agent machine.
             *
             * @param count The count of agent machine.
             * @return the next definition stage.
             */
            WithCreate withCount(Integer count);
        }
        /** The stage of the AgentPool definition allowing to specify tier. */
        interface WithTier {
            /**
             * Specifies the tier property: The Tier of agent machine.
             *
             * @param tier The Tier of agent machine.
             * @return the next definition stage.
             */
            WithCreate withTier(String tier);
        }
        /** The stage of the AgentPool definition allowing to specify os. */
        interface WithOs {
            /**
             * Specifies the os property: The OS of agent machine.
             *
             * @param os The OS of agent machine.
             * @return the next definition stage.
             */
            WithCreate withOs(OS os);
        }
        /** The stage of the AgentPool definition allowing to specify virtualNetworkSubnetResourceId. */
        interface WithVirtualNetworkSubnetResourceId {
            /**
             * Specifies the virtualNetworkSubnetResourceId property: The Virtual Network Subnet Resource Id of the
             * agent machine.
             *
             * @param virtualNetworkSubnetResourceId The Virtual Network Subnet Resource Id of the agent machine.
             * @return the next definition stage.
             */
            WithCreate withVirtualNetworkSubnetResourceId(String virtualNetworkSubnetResourceId);
        }
    }
    /**
     * Begins update for the AgentPool resource.
     *
     * @return the stage of resource update.
     */
    AgentPool.Update update();

    /** The template for AgentPool update. */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithCount {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        AgentPool apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        AgentPool apply(Context context);
    }
    /** The AgentPool update stages. */
    interface UpdateStages {
        /** The stage of the AgentPool update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: The ARM resource tags..
             *
             * @param tags The ARM resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the AgentPool update allowing to specify count. */
        interface WithCount {
            /**
             * Specifies the count property: The count of agent machine.
             *
             * @param count The count of agent machine.
             * @return the next definition stage.
             */
            Update withCount(Integer count);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    AgentPool refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    AgentPool refresh(Context context);

    /**
     * Gets the count of queued runs for a given agent pool.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the count of queued runs for a given agent pool.
     */
    AgentPoolQueueStatus getQueueStatus();

    /**
     * Gets the count of queued runs for a given agent pool.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the count of queued runs for a given agent pool.
     */
    Response<AgentPoolQueueStatus> getQueueStatusWithResponse(Context context);
}
