// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerregistry.generated.models.IdentityProperties;
import com.azure.resourcemanager.containerregistry.generated.models.ImportPipelineSourceProperties;
import com.azure.resourcemanager.containerregistry.generated.models.PipelineOptions;
import com.azure.resourcemanager.containerregistry.generated.models.PipelineTriggerProperties;
import com.azure.resourcemanager.containerregistry.generated.models.ProvisioningState;
import com.azure.resourcemanager.containerregistry.generated.models.SystemData;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** An object that represents an import pipeline for a container registry. */
@JsonFlatten
@Fluent
public class ImportPipelineInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ImportPipelineInner.class);

    /*
     * The location of the import pipeline.
     */
    @JsonProperty(value = "location")
    private String location;

    /*
     * The identity of the import pipeline.
     */
    @JsonProperty(value = "identity")
    private IdentityProperties identity;

    /*
     * The source properties of the import pipeline.
     */
    @JsonProperty(value = "properties.source")
    private ImportPipelineSourceProperties source;

    /*
     * The properties that describe the trigger of the import pipeline.
     */
    @JsonProperty(value = "properties.trigger")
    private PipelineTriggerProperties trigger;

    /*
     * The list of all options configured for the pipeline.
     */
    @JsonProperty(value = "properties.options")
    private List<PipelineOptions> options;

    /*
     * The provisioning state of the pipeline at the time the operation was
     * called.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Get the location property: The location of the import pipeline.
     *
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: The location of the import pipeline.
     *
     * @param location the location value to set.
     * @return the ImportPipelineInner object itself.
     */
    public ImportPipelineInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the identity property: The identity of the import pipeline.
     *
     * @return the identity value.
     */
    public IdentityProperties identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The identity of the import pipeline.
     *
     * @param identity the identity value to set.
     * @return the ImportPipelineInner object itself.
     */
    public ImportPipelineInner withIdentity(IdentityProperties identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the source property: The source properties of the import pipeline.
     *
     * @return the source value.
     */
    public ImportPipelineSourceProperties source() {
        return this.source;
    }

    /**
     * Set the source property: The source properties of the import pipeline.
     *
     * @param source the source value to set.
     * @return the ImportPipelineInner object itself.
     */
    public ImportPipelineInner withSource(ImportPipelineSourceProperties source) {
        this.source = source;
        return this;
    }

    /**
     * Get the trigger property: The properties that describe the trigger of the import pipeline.
     *
     * @return the trigger value.
     */
    public PipelineTriggerProperties trigger() {
        return this.trigger;
    }

    /**
     * Set the trigger property: The properties that describe the trigger of the import pipeline.
     *
     * @param trigger the trigger value to set.
     * @return the ImportPipelineInner object itself.
     */
    public ImportPipelineInner withTrigger(PipelineTriggerProperties trigger) {
        this.trigger = trigger;
        return this;
    }

    /**
     * Get the options property: The list of all options configured for the pipeline.
     *
     * @return the options value.
     */
    public List<PipelineOptions> options() {
        return this.options;
    }

    /**
     * Set the options property: The list of all options configured for the pipeline.
     *
     * @param options the options value to set.
     * @return the ImportPipelineInner object itself.
     */
    public ImportPipelineInner withOptions(List<PipelineOptions> options) {
        this.options = options;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the pipeline at the time the operation was called.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
        if (source() != null) {
            source().validate();
        }
        if (trigger() != null) {
            trigger().validate();
        }
        if (systemData() != null) {
            systemData().validate();
        }
    }
}
