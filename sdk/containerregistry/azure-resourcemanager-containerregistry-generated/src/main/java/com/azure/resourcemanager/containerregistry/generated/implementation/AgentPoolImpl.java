// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerregistry.generated.fluent.models.AgentPoolInner;
import com.azure.resourcemanager.containerregistry.generated.models.AgentPool;
import com.azure.resourcemanager.containerregistry.generated.models.AgentPoolQueueStatus;
import com.azure.resourcemanager.containerregistry.generated.models.AgentPoolUpdateParameters;
import com.azure.resourcemanager.containerregistry.generated.models.OS;
import com.azure.resourcemanager.containerregistry.generated.models.ProvisioningState;
import java.util.Collections;
import java.util.Map;

public final class AgentPoolImpl implements AgentPool, AgentPool.Definition, AgentPool.Update {
    private AgentPoolInner innerObject;

    private final com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Integer count() {
        return this.innerModel().count();
    }

    public String tier() {
        return this.innerModel().tier();
    }

    public OS os() {
        return this.innerModel().os();
    }

    public String virtualNetworkSubnetResourceId() {
        return this.innerModel().virtualNetworkSubnetResourceId();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public AgentPoolInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String registryName;

    private String agentPoolName;

    private AgentPoolUpdateParameters updateUpdateParameters;

    public AgentPoolImpl withExistingRegistry(String resourceGroupName, String registryName) {
        this.resourceGroupName = resourceGroupName;
        this.registryName = registryName;
        return this;
    }

    public AgentPool create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAgentPools()
                .create(resourceGroupName, registryName, agentPoolName, this.innerModel(), Context.NONE);
        return this;
    }

    public AgentPool create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAgentPools()
                .create(resourceGroupName, registryName, agentPoolName, this.innerModel(), context);
        return this;
    }

    AgentPoolImpl(
        String name, com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager) {
        this.innerObject = new AgentPoolInner();
        this.serviceManager = serviceManager;
        this.agentPoolName = name;
    }

    public AgentPoolImpl update() {
        this.updateUpdateParameters = new AgentPoolUpdateParameters();
        return this;
    }

    public AgentPool apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAgentPools()
                .update(resourceGroupName, registryName, agentPoolName, updateUpdateParameters, Context.NONE);
        return this;
    }

    public AgentPool apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAgentPools()
                .update(resourceGroupName, registryName, agentPoolName, updateUpdateParameters, context);
        return this;
    }

    AgentPoolImpl(
        AgentPoolInner innerObject,
        com.azure.resourcemanager.containerregistry.generated.ContainerRegistryManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.registryName = Utils.getValueFromIdByName(innerObject.id(), "registries");
        this.agentPoolName = Utils.getValueFromIdByName(innerObject.id(), "agentPools");
    }

    public AgentPool refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAgentPools()
                .getWithResponse(resourceGroupName, registryName, agentPoolName, Context.NONE)
                .getValue();
        return this;
    }

    public AgentPool refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAgentPools()
                .getWithResponse(resourceGroupName, registryName, agentPoolName, context)
                .getValue();
        return this;
    }

    public AgentPoolQueueStatus getQueueStatus() {
        return serviceManager.agentPools().getQueueStatus(resourceGroupName, registryName, agentPoolName);
    }

    public Response<AgentPoolQueueStatus> getQueueStatusWithResponse(Context context) {
        return serviceManager
            .agentPools()
            .getQueueStatusWithResponse(resourceGroupName, registryName, agentPoolName, context);
    }

    public AgentPoolImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public AgentPoolImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public AgentPoolImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateUpdateParameters.withTags(tags);
            return this;
        }
    }

    public AgentPoolImpl withCount(Integer count) {
        if (isInCreateMode()) {
            this.innerModel().withCount(count);
            return this;
        } else {
            this.updateUpdateParameters.withCount(count);
            return this;
        }
    }

    public AgentPoolImpl withTier(String tier) {
        this.innerModel().withTier(tier);
        return this;
    }

    public AgentPoolImpl withOs(OS os) {
        this.innerModel().withOs(os);
        return this;
    }

    public AgentPoolImpl withVirtualNetworkSubnetResourceId(String virtualNetworkSubnetResourceId) {
        this.innerModel().withVirtualNetworkSubnetResourceId(virtualNetworkSubnetResourceId);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
