/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.containerregistry.v2019_06_01_preview.implementation;

import com.microsoft.azure.management.containerregistry.v2019_06_01_preview.OS;
import com.microsoft.azure.management.containerregistry.v2019_06_01_preview.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.Resource;

/**
 * The agentpool that has the ARM resource and properties.
 * The agentpool will have all information to create an agent pool.
 */
@JsonFlatten
public class AgentPoolInner extends Resource {
    /**
     * The count of agent machine.
     */
    @JsonProperty(value = "properties.count")
    private Integer count;

    /**
     * The Tier of agent machine.
     */
    @JsonProperty(value = "properties.tier")
    private String tier;

    /**
     * The OS of agent machine. Possible values include: 'Windows', 'Linux'.
     */
    @JsonProperty(value = "properties.os")
    private OS os;

    /**
     * The Virtual Network Subnet Resource Id of the agent machine.
     */
    @JsonProperty(value = "properties.virtualNetworkSubnetResourceId")
    private String virtualNetworkSubnetResourceId;

    /**
     * The provisioning state of this agent pool. Possible values include:
     * 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled'.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * Get the count of agent machine.
     *
     * @return the count value
     */
    public Integer count() {
        return this.count;
    }

    /**
     * Set the count of agent machine.
     *
     * @param count the count value to set
     * @return the AgentPoolInner object itself.
     */
    public AgentPoolInner withCount(Integer count) {
        this.count = count;
        return this;
    }

    /**
     * Get the Tier of agent machine.
     *
     * @return the tier value
     */
    public String tier() {
        return this.tier;
    }

    /**
     * Set the Tier of agent machine.
     *
     * @param tier the tier value to set
     * @return the AgentPoolInner object itself.
     */
    public AgentPoolInner withTier(String tier) {
        this.tier = tier;
        return this;
    }

    /**
     * Get the OS of agent machine. Possible values include: 'Windows', 'Linux'.
     *
     * @return the os value
     */
    public OS os() {
        return this.os;
    }

    /**
     * Set the OS of agent machine. Possible values include: 'Windows', 'Linux'.
     *
     * @param os the os value to set
     * @return the AgentPoolInner object itself.
     */
    public AgentPoolInner withOs(OS os) {
        this.os = os;
        return this;
    }

    /**
     * Get the Virtual Network Subnet Resource Id of the agent machine.
     *
     * @return the virtualNetworkSubnetResourceId value
     */
    public String virtualNetworkSubnetResourceId() {
        return this.virtualNetworkSubnetResourceId;
    }

    /**
     * Set the Virtual Network Subnet Resource Id of the agent machine.
     *
     * @param virtualNetworkSubnetResourceId the virtualNetworkSubnetResourceId value to set
     * @return the AgentPoolInner object itself.
     */
    public AgentPoolInner withVirtualNetworkSubnetResourceId(String virtualNetworkSubnetResourceId) {
        this.virtualNetworkSubnetResourceId = virtualNetworkSubnetResourceId;
        return this;
    }

    /**
     * Get the provisioning state of this agent pool. Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled'.
     *
     * @return the provisioningState value
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

}
