/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.containerregistry.v2019_06_01_preview;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The OverrideTaskStepProperties model.
 */
public class OverrideTaskStepProperties {
    /**
     * The source context against which run has to be queued.
     */
    @JsonProperty(value = "contextPath")
    private String contextPath;

    /**
     * The file against which run has to be queued.
     */
    @JsonProperty(value = "file")
    private String file;

    /**
     * Gets or sets the collection of override arguments to be used when
     * executing a build step.
     */
    @JsonProperty(value = "arguments")
    private List<Argument> arguments;

    /**
     * The name of the target build stage for the docker build.
     */
    @JsonProperty(value = "target")
    private String target;

    /**
     * The collection of overridable values that can be passed when running a
     * Task.
     */
    @JsonProperty(value = "values")
    private List<SetValue> values;

    /**
     * Base64 encoded update trigger token that will be attached with the base
     * image trigger webhook.
     */
    @JsonProperty(value = "updateTriggerToken")
    private String updateTriggerToken;

    /**
     * Get the source context against which run has to be queued.
     *
     * @return the contextPath value
     */
    public String contextPath() {
        return this.contextPath;
    }

    /**
     * Set the source context against which run has to be queued.
     *
     * @param contextPath the contextPath value to set
     * @return the OverrideTaskStepProperties object itself.
     */
    public OverrideTaskStepProperties withContextPath(String contextPath) {
        this.contextPath = contextPath;
        return this;
    }

    /**
     * Get the file against which run has to be queued.
     *
     * @return the file value
     */
    public String file() {
        return this.file;
    }

    /**
     * Set the file against which run has to be queued.
     *
     * @param file the file value to set
     * @return the OverrideTaskStepProperties object itself.
     */
    public OverrideTaskStepProperties withFile(String file) {
        this.file = file;
        return this;
    }

    /**
     * Get gets or sets the collection of override arguments to be used when
     executing a build step.
     *
     * @return the arguments value
     */
    public List<Argument> arguments() {
        return this.arguments;
    }

    /**
     * Set gets or sets the collection of override arguments to be used when
     executing a build step.
     *
     * @param arguments the arguments value to set
     * @return the OverrideTaskStepProperties object itself.
     */
    public OverrideTaskStepProperties withArguments(List<Argument> arguments) {
        this.arguments = arguments;
        return this;
    }

    /**
     * Get the name of the target build stage for the docker build.
     *
     * @return the target value
     */
    public String target() {
        return this.target;
    }

    /**
     * Set the name of the target build stage for the docker build.
     *
     * @param target the target value to set
     * @return the OverrideTaskStepProperties object itself.
     */
    public OverrideTaskStepProperties withTarget(String target) {
        this.target = target;
        return this;
    }

    /**
     * Get the collection of overridable values that can be passed when running a Task.
     *
     * @return the values value
     */
    public List<SetValue> values() {
        return this.values;
    }

    /**
     * Set the collection of overridable values that can be passed when running a Task.
     *
     * @param values the values value to set
     * @return the OverrideTaskStepProperties object itself.
     */
    public OverrideTaskStepProperties withValues(List<SetValue> values) {
        this.values = values;
        return this;
    }

    /**
     * Get base64 encoded update trigger token that will be attached with the base image trigger webhook.
     *
     * @return the updateTriggerToken value
     */
    public String updateTriggerToken() {
        return this.updateTriggerToken;
    }

    /**
     * Set base64 encoded update trigger token that will be attached with the base image trigger webhook.
     *
     * @param updateTriggerToken the updateTriggerToken value to set
     * @return the OverrideTaskStepProperties object itself.
     */
    public OverrideTaskStepProperties withUpdateTriggerToken(String updateTriggerToken) {
        this.updateTriggerToken = updateTriggerToken;
        return this;
    }

}
