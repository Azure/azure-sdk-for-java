/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.containerregistry.v2020_11_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.containerregistry.v2020_11_01_preview.ConnectedRegistries;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.containerregistry.v2020_11_01_preview.ConnectedRegistry;

class ConnectedRegistriesImpl extends WrapperImpl<ConnectedRegistriesInner> implements ConnectedRegistries {
    private final ContainerRegistryManager manager;

    ConnectedRegistriesImpl(ContainerRegistryManager manager) {
        super(manager.inner().connectedRegistries());
        this.manager = manager;
    }

    public ContainerRegistryManager manager() {
        return this.manager;
    }

    @Override
    public ConnectedRegistryImpl define(String name) {
        return wrapModel(name);
    }

    private ConnectedRegistryImpl wrapModel(ConnectedRegistryInner inner) {
        return  new ConnectedRegistryImpl(inner, manager());
    }

    private ConnectedRegistryImpl wrapModel(String name) {
        return new ConnectedRegistryImpl(name, this.manager());
    }

    @Override
    public Completable deactivateAsync(String resourceGroupName, String registryName, String connectedRegistryName) {
        ConnectedRegistriesInner client = this.inner();
        return client.deactivateAsync(resourceGroupName, registryName, connectedRegistryName).toCompletable();
    }

    @Override
    public Observable<ConnectedRegistry> listAsync(final String resourceGroupName, final String registryName) {
        ConnectedRegistriesInner client = this.inner();
        return client.listAsync(resourceGroupName, registryName)
        .flatMapIterable(new Func1<Page<ConnectedRegistryInner>, Iterable<ConnectedRegistryInner>>() {
            @Override
            public Iterable<ConnectedRegistryInner> call(Page<ConnectedRegistryInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ConnectedRegistryInner, ConnectedRegistry>() {
            @Override
            public ConnectedRegistry call(ConnectedRegistryInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<ConnectedRegistry> getAsync(String resourceGroupName, String registryName, String connectedRegistryName) {
        ConnectedRegistriesInner client = this.inner();
        return client.getAsync(resourceGroupName, registryName, connectedRegistryName)
        .flatMap(new Func1<ConnectedRegistryInner, Observable<ConnectedRegistry>>() {
            @Override
            public Observable<ConnectedRegistry> call(ConnectedRegistryInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((ConnectedRegistry)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String registryName, String connectedRegistryName) {
        ConnectedRegistriesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, registryName, connectedRegistryName).toCompletable();
    }

}
