/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.containerregistry.v2020_11_01_preview;

import org.joda.time.Period;
import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The sync properties of the connected registry with its parent.
 */
public class SyncProperties {
    /**
     * The resource ID of the ACR token used to authenticate the connected
     * registry to its parent during sync.
     */
    @JsonProperty(value = "tokenId", required = true)
    private String tokenId;

    /**
     * The cron expression indicating the schedule that the connected registry
     * will sync with its parent.
     */
    @JsonProperty(value = "schedule")
    private String schedule;

    /**
     * The time window during which sync is enabled for each schedule
     * occurrence. Specify the duration using the format
     * P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
     */
    @JsonProperty(value = "syncWindow")
    private Period syncWindow;

    /**
     * The period of time for which a message is available to sync before it is
     * expired. Specify the duration using the format
     * P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
     */
    @JsonProperty(value = "messageTtl", required = true)
    private Period messageTtl;

    /**
     * The last time a sync occurred between the connected registry and its
     * parent.
     */
    @JsonProperty(value = "lastSyncTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime lastSyncTime;

    /**
     * The gateway endpoint used by the connected registry to communicate with
     * its parent.
     */
    @JsonProperty(value = "gatewayEndpoint", access = JsonProperty.Access.WRITE_ONLY)
    private String gatewayEndpoint;

    /**
     * Get the resource ID of the ACR token used to authenticate the connected registry to its parent during sync.
     *
     * @return the tokenId value
     */
    public String tokenId() {
        return this.tokenId;
    }

    /**
     * Set the resource ID of the ACR token used to authenticate the connected registry to its parent during sync.
     *
     * @param tokenId the tokenId value to set
     * @return the SyncProperties object itself.
     */
    public SyncProperties withTokenId(String tokenId) {
        this.tokenId = tokenId;
        return this;
    }

    /**
     * Get the cron expression indicating the schedule that the connected registry will sync with its parent.
     *
     * @return the schedule value
     */
    public String schedule() {
        return this.schedule;
    }

    /**
     * Set the cron expression indicating the schedule that the connected registry will sync with its parent.
     *
     * @param schedule the schedule value to set
     * @return the SyncProperties object itself.
     */
    public SyncProperties withSchedule(String schedule) {
        this.schedule = schedule;
        return this;
    }

    /**
     * Get the time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
     *
     * @return the syncWindow value
     */
    public Period syncWindow() {
        return this.syncWindow;
    }

    /**
     * Set the time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
     *
     * @param syncWindow the syncWindow value to set
     * @return the SyncProperties object itself.
     */
    public SyncProperties withSyncWindow(Period syncWindow) {
        this.syncWindow = syncWindow;
        return this;
    }

    /**
     * Get the period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
     *
     * @return the messageTtl value
     */
    public Period messageTtl() {
        return this.messageTtl;
    }

    /**
     * Set the period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.
     *
     * @param messageTtl the messageTtl value to set
     * @return the SyncProperties object itself.
     */
    public SyncProperties withMessageTtl(Period messageTtl) {
        this.messageTtl = messageTtl;
        return this;
    }

    /**
     * Get the last time a sync occurred between the connected registry and its parent.
     *
     * @return the lastSyncTime value
     */
    public DateTime lastSyncTime() {
        return this.lastSyncTime;
    }

    /**
     * Get the gateway endpoint used by the connected registry to communicate with its parent.
     *
     * @return the gatewayEndpoint value
     */
    public String gatewayEndpoint() {
        return this.gatewayEndpoint;
    }

}
