/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.containerregistry.v2020_11_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.containerregistry.v2020_11_01_preview.ConnectedRegistryUpdateParameters;
import com.microsoft.azure.management.containerregistry.v2020_11_01_preview.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ConnectedRegistries.
 */
public class ConnectedRegistriesInner {
    /** The Retrofit service to perform REST calls. */
    private ConnectedRegistriesService service;
    /** The service client containing this operation class. */
    private ContainerRegistryManagementClientImpl client;

    /**
     * Initializes an instance of ConnectedRegistriesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ConnectedRegistriesInner(Retrofit retrofit, ContainerRegistryManagementClientImpl client) {
        this.service = retrofit.create(ConnectedRegistriesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ConnectedRegistries to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ConnectedRegistriesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.containerregistry.v2020_11_01_preview.ConnectedRegistries get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("registryName") String registryName, @Path("connectedRegistryName") String connectedRegistryName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.containerregistry.v2020_11_01_preview.ConnectedRegistries create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("registryName") String registryName, @Path("connectedRegistryName") String connectedRegistryName, @Query("api-version") String apiVersion, @Body ConnectedRegistryInner connectedRegistryCreateParameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.containerregistry.v2020_11_01_preview.ConnectedRegistries beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("registryName") String registryName, @Path("connectedRegistryName") String connectedRegistryName, @Query("api-version") String apiVersion, @Body ConnectedRegistryInner connectedRegistryCreateParameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.containerregistry.v2020_11_01_preview.ConnectedRegistries delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("registryName") String registryName, @Path("connectedRegistryName") String connectedRegistryName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.containerregistry.v2020_11_01_preview.ConnectedRegistries beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("registryName") String registryName, @Path("connectedRegistryName") String connectedRegistryName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.containerregistry.v2020_11_01_preview.ConnectedRegistries update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("registryName") String registryName, @Path("connectedRegistryName") String connectedRegistryName, @Query("api-version") String apiVersion, @Body ConnectedRegistryUpdateParameters connectedRegistryUpdateParameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.containerregistry.v2020_11_01_preview.ConnectedRegistries beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("registryName") String registryName, @Path("connectedRegistryName") String connectedRegistryName, @Query("api-version") String apiVersion, @Body ConnectedRegistryUpdateParameters connectedRegistryUpdateParameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.containerregistry.v2020_11_01_preview.ConnectedRegistries list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("registryName") String registryName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.containerregistry.v2020_11_01_preview.ConnectedRegistries deactivate" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}/deactivate")
        Observable<Response<ResponseBody>> deactivate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("registryName") String registryName, @Path("connectedRegistryName") String connectedRegistryName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.containerregistry.v2020_11_01_preview.ConnectedRegistries beginDeactivate" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}/deactivate")
        Observable<Response<ResponseBody>> beginDeactivate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("registryName") String registryName, @Path("connectedRegistryName") String connectedRegistryName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.containerregistry.v2020_11_01_preview.ConnectedRegistries listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the properties of the connected registry.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConnectedRegistryInner object if successful.
     */
    public ConnectedRegistryInner get(String resourceGroupName, String registryName, String connectedRegistryName) {
        return getWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName).toBlocking().single().body();
    }

    /**
     * Gets the properties of the connected registry.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConnectedRegistryInner> getAsync(String resourceGroupName, String registryName, String connectedRegistryName, final ServiceCallback<ConnectedRegistryInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName), serviceCallback);
    }

    /**
     * Gets the properties of the connected registry.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectedRegistryInner object
     */
    public Observable<ConnectedRegistryInner> getAsync(String resourceGroupName, String registryName, String connectedRegistryName) {
        return getWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName).map(new Func1<ServiceResponse<ConnectedRegistryInner>, ConnectedRegistryInner>() {
            @Override
            public ConnectedRegistryInner call(ServiceResponse<ConnectedRegistryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the properties of the connected registry.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectedRegistryInner object
     */
    public Observable<ServiceResponse<ConnectedRegistryInner>> getWithServiceResponseAsync(String resourceGroupName, String registryName, String connectedRegistryName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (registryName == null) {
            throw new IllegalArgumentException("Parameter registryName is required and cannot be null.");
        }
        if (connectedRegistryName == null) {
            throw new IllegalArgumentException("Parameter connectedRegistryName is required and cannot be null.");
        }
        final String apiVersion = "2020-11-01-preview";
        return service.get(this.client.subscriptionId(), resourceGroupName, registryName, connectedRegistryName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ConnectedRegistryInner>>>() {
                @Override
                public Observable<ServiceResponse<ConnectedRegistryInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ConnectedRegistryInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ConnectedRegistryInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ConnectedRegistryInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ConnectedRegistryInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates a connected registry for a container registry with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @param connectedRegistryCreateParameters The parameters for creating a connectedRegistry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConnectedRegistryInner object if successful.
     */
    public ConnectedRegistryInner create(String resourceGroupName, String registryName, String connectedRegistryName, ConnectedRegistryInner connectedRegistryCreateParameters) {
        return createWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName, connectedRegistryCreateParameters).toBlocking().last().body();
    }

    /**
     * Creates a connected registry for a container registry with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @param connectedRegistryCreateParameters The parameters for creating a connectedRegistry.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConnectedRegistryInner> createAsync(String resourceGroupName, String registryName, String connectedRegistryName, ConnectedRegistryInner connectedRegistryCreateParameters, final ServiceCallback<ConnectedRegistryInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName, connectedRegistryCreateParameters), serviceCallback);
    }

    /**
     * Creates a connected registry for a container registry with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @param connectedRegistryCreateParameters The parameters for creating a connectedRegistry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ConnectedRegistryInner> createAsync(String resourceGroupName, String registryName, String connectedRegistryName, ConnectedRegistryInner connectedRegistryCreateParameters) {
        return createWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName, connectedRegistryCreateParameters).map(new Func1<ServiceResponse<ConnectedRegistryInner>, ConnectedRegistryInner>() {
            @Override
            public ConnectedRegistryInner call(ServiceResponse<ConnectedRegistryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a connected registry for a container registry with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @param connectedRegistryCreateParameters The parameters for creating a connectedRegistry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ConnectedRegistryInner>> createWithServiceResponseAsync(String resourceGroupName, String registryName, String connectedRegistryName, ConnectedRegistryInner connectedRegistryCreateParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (registryName == null) {
            throw new IllegalArgumentException("Parameter registryName is required and cannot be null.");
        }
        if (connectedRegistryName == null) {
            throw new IllegalArgumentException("Parameter connectedRegistryName is required and cannot be null.");
        }
        if (connectedRegistryCreateParameters == null) {
            throw new IllegalArgumentException("Parameter connectedRegistryCreateParameters is required and cannot be null.");
        }
        Validator.validate(connectedRegistryCreateParameters);
        final String apiVersion = "2020-11-01-preview";
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, registryName, connectedRegistryName, apiVersion, connectedRegistryCreateParameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ConnectedRegistryInner>() { }.getType());
    }

    /**
     * Creates a connected registry for a container registry with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @param connectedRegistryCreateParameters The parameters for creating a connectedRegistry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConnectedRegistryInner object if successful.
     */
    public ConnectedRegistryInner beginCreate(String resourceGroupName, String registryName, String connectedRegistryName, ConnectedRegistryInner connectedRegistryCreateParameters) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName, connectedRegistryCreateParameters).toBlocking().single().body();
    }

    /**
     * Creates a connected registry for a container registry with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @param connectedRegistryCreateParameters The parameters for creating a connectedRegistry.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConnectedRegistryInner> beginCreateAsync(String resourceGroupName, String registryName, String connectedRegistryName, ConnectedRegistryInner connectedRegistryCreateParameters, final ServiceCallback<ConnectedRegistryInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName, connectedRegistryCreateParameters), serviceCallback);
    }

    /**
     * Creates a connected registry for a container registry with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @param connectedRegistryCreateParameters The parameters for creating a connectedRegistry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectedRegistryInner object
     */
    public Observable<ConnectedRegistryInner> beginCreateAsync(String resourceGroupName, String registryName, String connectedRegistryName, ConnectedRegistryInner connectedRegistryCreateParameters) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName, connectedRegistryCreateParameters).map(new Func1<ServiceResponse<ConnectedRegistryInner>, ConnectedRegistryInner>() {
            @Override
            public ConnectedRegistryInner call(ServiceResponse<ConnectedRegistryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a connected registry for a container registry with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @param connectedRegistryCreateParameters The parameters for creating a connectedRegistry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectedRegistryInner object
     */
    public Observable<ServiceResponse<ConnectedRegistryInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String registryName, String connectedRegistryName, ConnectedRegistryInner connectedRegistryCreateParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (registryName == null) {
            throw new IllegalArgumentException("Parameter registryName is required and cannot be null.");
        }
        if (connectedRegistryName == null) {
            throw new IllegalArgumentException("Parameter connectedRegistryName is required and cannot be null.");
        }
        if (connectedRegistryCreateParameters == null) {
            throw new IllegalArgumentException("Parameter connectedRegistryCreateParameters is required and cannot be null.");
        }
        Validator.validate(connectedRegistryCreateParameters);
        final String apiVersion = "2020-11-01-preview";
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, registryName, connectedRegistryName, apiVersion, connectedRegistryCreateParameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ConnectedRegistryInner>>>() {
                @Override
                public Observable<ServiceResponse<ConnectedRegistryInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ConnectedRegistryInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ConnectedRegistryInner> beginCreateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ConnectedRegistryInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ConnectedRegistryInner>() { }.getType())
                .register(201, new TypeToken<ConnectedRegistryInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes a connected registry from a container registry.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String registryName, String connectedRegistryName) {
        deleteWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName).toBlocking().last().body();
    }

    /**
     * Deletes a connected registry from a container registry.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String registryName, String connectedRegistryName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName), serviceCallback);
    }

    /**
     * Deletes a connected registry from a container registry.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String registryName, String connectedRegistryName) {
        return deleteWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a connected registry from a container registry.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String registryName, String connectedRegistryName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (registryName == null) {
            throw new IllegalArgumentException("Parameter registryName is required and cannot be null.");
        }
        if (connectedRegistryName == null) {
            throw new IllegalArgumentException("Parameter connectedRegistryName is required and cannot be null.");
        }
        final String apiVersion = "2020-11-01-preview";
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, registryName, connectedRegistryName, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes a connected registry from a container registry.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String registryName, String connectedRegistryName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName).toBlocking().single().body();
    }

    /**
     * Deletes a connected registry from a container registry.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String registryName, String connectedRegistryName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName), serviceCallback);
    }

    /**
     * Deletes a connected registry from a container registry.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String registryName, String connectedRegistryName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a connected registry from a container registry.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String registryName, String connectedRegistryName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (registryName == null) {
            throw new IllegalArgumentException("Parameter registryName is required and cannot be null.");
        }
        if (connectedRegistryName == null) {
            throw new IllegalArgumentException("Parameter connectedRegistryName is required and cannot be null.");
        }
        final String apiVersion = "2020-11-01-preview";
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, registryName, connectedRegistryName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Updates a connected registry with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @param connectedRegistryUpdateParameters The parameters for updating a connectedRegistry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConnectedRegistryInner object if successful.
     */
    public ConnectedRegistryInner update(String resourceGroupName, String registryName, String connectedRegistryName, ConnectedRegistryUpdateParameters connectedRegistryUpdateParameters) {
        return updateWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName, connectedRegistryUpdateParameters).toBlocking().last().body();
    }

    /**
     * Updates a connected registry with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @param connectedRegistryUpdateParameters The parameters for updating a connectedRegistry.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConnectedRegistryInner> updateAsync(String resourceGroupName, String registryName, String connectedRegistryName, ConnectedRegistryUpdateParameters connectedRegistryUpdateParameters, final ServiceCallback<ConnectedRegistryInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName, connectedRegistryUpdateParameters), serviceCallback);
    }

    /**
     * Updates a connected registry with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @param connectedRegistryUpdateParameters The parameters for updating a connectedRegistry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ConnectedRegistryInner> updateAsync(String resourceGroupName, String registryName, String connectedRegistryName, ConnectedRegistryUpdateParameters connectedRegistryUpdateParameters) {
        return updateWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName, connectedRegistryUpdateParameters).map(new Func1<ServiceResponse<ConnectedRegistryInner>, ConnectedRegistryInner>() {
            @Override
            public ConnectedRegistryInner call(ServiceResponse<ConnectedRegistryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a connected registry with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @param connectedRegistryUpdateParameters The parameters for updating a connectedRegistry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ConnectedRegistryInner>> updateWithServiceResponseAsync(String resourceGroupName, String registryName, String connectedRegistryName, ConnectedRegistryUpdateParameters connectedRegistryUpdateParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (registryName == null) {
            throw new IllegalArgumentException("Parameter registryName is required and cannot be null.");
        }
        if (connectedRegistryName == null) {
            throw new IllegalArgumentException("Parameter connectedRegistryName is required and cannot be null.");
        }
        if (connectedRegistryUpdateParameters == null) {
            throw new IllegalArgumentException("Parameter connectedRegistryUpdateParameters is required and cannot be null.");
        }
        Validator.validate(connectedRegistryUpdateParameters);
        final String apiVersion = "2020-11-01-preview";
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, registryName, connectedRegistryName, apiVersion, connectedRegistryUpdateParameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ConnectedRegistryInner>() { }.getType());
    }

    /**
     * Updates a connected registry with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @param connectedRegistryUpdateParameters The parameters for updating a connectedRegistry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConnectedRegistryInner object if successful.
     */
    public ConnectedRegistryInner beginUpdate(String resourceGroupName, String registryName, String connectedRegistryName, ConnectedRegistryUpdateParameters connectedRegistryUpdateParameters) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName, connectedRegistryUpdateParameters).toBlocking().single().body();
    }

    /**
     * Updates a connected registry with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @param connectedRegistryUpdateParameters The parameters for updating a connectedRegistry.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConnectedRegistryInner> beginUpdateAsync(String resourceGroupName, String registryName, String connectedRegistryName, ConnectedRegistryUpdateParameters connectedRegistryUpdateParameters, final ServiceCallback<ConnectedRegistryInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName, connectedRegistryUpdateParameters), serviceCallback);
    }

    /**
     * Updates a connected registry with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @param connectedRegistryUpdateParameters The parameters for updating a connectedRegistry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectedRegistryInner object
     */
    public Observable<ConnectedRegistryInner> beginUpdateAsync(String resourceGroupName, String registryName, String connectedRegistryName, ConnectedRegistryUpdateParameters connectedRegistryUpdateParameters) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName, connectedRegistryUpdateParameters).map(new Func1<ServiceResponse<ConnectedRegistryInner>, ConnectedRegistryInner>() {
            @Override
            public ConnectedRegistryInner call(ServiceResponse<ConnectedRegistryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a connected registry with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @param connectedRegistryUpdateParameters The parameters for updating a connectedRegistry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectedRegistryInner object
     */
    public Observable<ServiceResponse<ConnectedRegistryInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String connectedRegistryName, ConnectedRegistryUpdateParameters connectedRegistryUpdateParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (registryName == null) {
            throw new IllegalArgumentException("Parameter registryName is required and cannot be null.");
        }
        if (connectedRegistryName == null) {
            throw new IllegalArgumentException("Parameter connectedRegistryName is required and cannot be null.");
        }
        if (connectedRegistryUpdateParameters == null) {
            throw new IllegalArgumentException("Parameter connectedRegistryUpdateParameters is required and cannot be null.");
        }
        Validator.validate(connectedRegistryUpdateParameters);
        final String apiVersion = "2020-11-01-preview";
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, registryName, connectedRegistryName, apiVersion, connectedRegistryUpdateParameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ConnectedRegistryInner>>>() {
                @Override
                public Observable<ServiceResponse<ConnectedRegistryInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ConnectedRegistryInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ConnectedRegistryInner> beginUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ConnectedRegistryInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ConnectedRegistryInner>() { }.getType())
                .register(201, new TypeToken<ConnectedRegistryInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all connected registries for the specified container registry.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ConnectedRegistryInner&gt; object if successful.
     */
    public PagedList<ConnectedRegistryInner> list(final String resourceGroupName, final String registryName) {
        ServiceResponse<Page<ConnectedRegistryInner>> response = listSinglePageAsync(resourceGroupName, registryName).toBlocking().single();
        return new PagedList<ConnectedRegistryInner>(response.body()) {
            @Override
            public Page<ConnectedRegistryInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all connected registries for the specified container registry.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ConnectedRegistryInner>> listAsync(final String resourceGroupName, final String registryName, final ListOperationCallback<ConnectedRegistryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, registryName),
            new Func1<String, Observable<ServiceResponse<Page<ConnectedRegistryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectedRegistryInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all connected registries for the specified container registry.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectedRegistryInner&gt; object
     */
    public Observable<Page<ConnectedRegistryInner>> listAsync(final String resourceGroupName, final String registryName) {
        return listWithServiceResponseAsync(resourceGroupName, registryName)
            .map(new Func1<ServiceResponse<Page<ConnectedRegistryInner>>, Page<ConnectedRegistryInner>>() {
                @Override
                public Page<ConnectedRegistryInner> call(ServiceResponse<Page<ConnectedRegistryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all connected registries for the specified container registry.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectedRegistryInner&gt; object
     */
    public Observable<ServiceResponse<Page<ConnectedRegistryInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String registryName) {
        return listSinglePageAsync(resourceGroupName, registryName)
            .concatMap(new Func1<ServiceResponse<Page<ConnectedRegistryInner>>, Observable<ServiceResponse<Page<ConnectedRegistryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectedRegistryInner>>> call(ServiceResponse<Page<ConnectedRegistryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all connected registries for the specified container registry.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ConnectedRegistryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ConnectedRegistryInner>>> listSinglePageAsync(final String resourceGroupName, final String registryName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (registryName == null) {
            throw new IllegalArgumentException("Parameter registryName is required and cannot be null.");
        }
        final String apiVersion = "2020-11-01-preview";
        final String filter = null;
        return service.list(this.client.subscriptionId(), resourceGroupName, registryName, apiVersion, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ConnectedRegistryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectedRegistryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ConnectedRegistryInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ConnectedRegistryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists all connected registries for the specified container registry.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param filter An OData filter expression that describes a subset of connectedRegistries to return. The parameters that can be filtered are parent.id (the resource id of the connectedRegistry parent), mode, and connectionState. The supported operator is eq.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ConnectedRegistryInner&gt; object if successful.
     */
    public PagedList<ConnectedRegistryInner> list(final String resourceGroupName, final String registryName, final String filter) {
        ServiceResponse<Page<ConnectedRegistryInner>> response = listSinglePageAsync(resourceGroupName, registryName, filter).toBlocking().single();
        return new PagedList<ConnectedRegistryInner>(response.body()) {
            @Override
            public Page<ConnectedRegistryInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all connected registries for the specified container registry.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param filter An OData filter expression that describes a subset of connectedRegistries to return. The parameters that can be filtered are parent.id (the resource id of the connectedRegistry parent), mode, and connectionState. The supported operator is eq.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ConnectedRegistryInner>> listAsync(final String resourceGroupName, final String registryName, final String filter, final ListOperationCallback<ConnectedRegistryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, registryName, filter),
            new Func1<String, Observable<ServiceResponse<Page<ConnectedRegistryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectedRegistryInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all connected registries for the specified container registry.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param filter An OData filter expression that describes a subset of connectedRegistries to return. The parameters that can be filtered are parent.id (the resource id of the connectedRegistry parent), mode, and connectionState. The supported operator is eq.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectedRegistryInner&gt; object
     */
    public Observable<Page<ConnectedRegistryInner>> listAsync(final String resourceGroupName, final String registryName, final String filter) {
        return listWithServiceResponseAsync(resourceGroupName, registryName, filter)
            .map(new Func1<ServiceResponse<Page<ConnectedRegistryInner>>, Page<ConnectedRegistryInner>>() {
                @Override
                public Page<ConnectedRegistryInner> call(ServiceResponse<Page<ConnectedRegistryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all connected registries for the specified container registry.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param filter An OData filter expression that describes a subset of connectedRegistries to return. The parameters that can be filtered are parent.id (the resource id of the connectedRegistry parent), mode, and connectionState. The supported operator is eq.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectedRegistryInner&gt; object
     */
    public Observable<ServiceResponse<Page<ConnectedRegistryInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String registryName, final String filter) {
        return listSinglePageAsync(resourceGroupName, registryName, filter)
            .concatMap(new Func1<ServiceResponse<Page<ConnectedRegistryInner>>, Observable<ServiceResponse<Page<ConnectedRegistryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectedRegistryInner>>> call(ServiceResponse<Page<ConnectedRegistryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all connected registries for the specified container registry.
     *
    ServiceResponse<PageImpl<ConnectedRegistryInner>> * @param resourceGroupName The name of the resource group to which the container registry belongs.
    ServiceResponse<PageImpl<ConnectedRegistryInner>> * @param registryName The name of the container registry.
    ServiceResponse<PageImpl<ConnectedRegistryInner>> * @param filter An OData filter expression that describes a subset of connectedRegistries to return. The parameters that can be filtered are parent.id (the resource id of the connectedRegistry parent), mode, and connectionState. The supported operator is eq.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ConnectedRegistryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ConnectedRegistryInner>>> listSinglePageAsync(final String resourceGroupName, final String registryName, final String filter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (registryName == null) {
            throw new IllegalArgumentException("Parameter registryName is required and cannot be null.");
        }
        final String apiVersion = "2020-11-01-preview";
        return service.list(this.client.subscriptionId(), resourceGroupName, registryName, apiVersion, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ConnectedRegistryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectedRegistryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ConnectedRegistryInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ConnectedRegistryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ConnectedRegistryInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ConnectedRegistryInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ConnectedRegistryInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deactivates the connected registry instance.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deactivate(String resourceGroupName, String registryName, String connectedRegistryName) {
        deactivateWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName).toBlocking().last().body();
    }

    /**
     * Deactivates the connected registry instance.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deactivateAsync(String resourceGroupName, String registryName, String connectedRegistryName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deactivateWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName), serviceCallback);
    }

    /**
     * Deactivates the connected registry instance.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deactivateAsync(String resourceGroupName, String registryName, String connectedRegistryName) {
        return deactivateWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deactivates the connected registry instance.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deactivateWithServiceResponseAsync(String resourceGroupName, String registryName, String connectedRegistryName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (registryName == null) {
            throw new IllegalArgumentException("Parameter registryName is required and cannot be null.");
        }
        if (connectedRegistryName == null) {
            throw new IllegalArgumentException("Parameter connectedRegistryName is required and cannot be null.");
        }
        final String apiVersion = "2020-11-01-preview";
        Observable<Response<ResponseBody>> observable = service.deactivate(this.client.subscriptionId(), resourceGroupName, registryName, connectedRegistryName, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deactivates the connected registry instance.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDeactivate(String resourceGroupName, String registryName, String connectedRegistryName) {
        beginDeactivateWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName).toBlocking().single().body();
    }

    /**
     * Deactivates the connected registry instance.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeactivateAsync(String resourceGroupName, String registryName, String connectedRegistryName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeactivateWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName), serviceCallback);
    }

    /**
     * Deactivates the connected registry instance.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeactivateAsync(String resourceGroupName, String registryName, String connectedRegistryName) {
        return beginDeactivateWithServiceResponseAsync(resourceGroupName, registryName, connectedRegistryName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deactivates the connected registry instance.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param connectedRegistryName The name of the connected registry.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeactivateWithServiceResponseAsync(String resourceGroupName, String registryName, String connectedRegistryName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (registryName == null) {
            throw new IllegalArgumentException("Parameter registryName is required and cannot be null.");
        }
        if (connectedRegistryName == null) {
            throw new IllegalArgumentException("Parameter connectedRegistryName is required and cannot be null.");
        }
        final String apiVersion = "2020-11-01-preview";
        return service.beginDeactivate(this.client.subscriptionId(), resourceGroupName, registryName, connectedRegistryName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeactivateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeactivateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all connected registries for the specified container registry.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ConnectedRegistryInner&gt; object if successful.
     */
    public PagedList<ConnectedRegistryInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<ConnectedRegistryInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ConnectedRegistryInner>(response.body()) {
            @Override
            public Page<ConnectedRegistryInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all connected registries for the specified container registry.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ConnectedRegistryInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ConnectedRegistryInner>> serviceFuture, final ListOperationCallback<ConnectedRegistryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ConnectedRegistryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectedRegistryInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all connected registries for the specified container registry.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectedRegistryInner&gt; object
     */
    public Observable<Page<ConnectedRegistryInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ConnectedRegistryInner>>, Page<ConnectedRegistryInner>>() {
                @Override
                public Page<ConnectedRegistryInner> call(ServiceResponse<Page<ConnectedRegistryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all connected registries for the specified container registry.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectedRegistryInner&gt; object
     */
    public Observable<ServiceResponse<Page<ConnectedRegistryInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ConnectedRegistryInner>>, Observable<ServiceResponse<Page<ConnectedRegistryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectedRegistryInner>>> call(ServiceResponse<Page<ConnectedRegistryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all connected registries for the specified container registry.
     *
    ServiceResponse<PageImpl<ConnectedRegistryInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ConnectedRegistryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ConnectedRegistryInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ConnectedRegistryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectedRegistryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ConnectedRegistryInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ConnectedRegistryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ConnectedRegistryInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ConnectedRegistryInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ConnectedRegistryInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
