/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.containerregistry.v2020_11_01_preview.implementation;

import com.microsoft.azure.management.containerregistry.v2020_11_01_preview.Token;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.containerregistry.v2020_11_01_preview.TokenUpdateParameters;
import com.microsoft.azure.management.containerregistry.v2020_11_01_preview.SystemData;
import org.joda.time.DateTime;
import com.microsoft.azure.management.containerregistry.v2020_11_01_preview.ProvisioningState;
import com.microsoft.azure.management.containerregistry.v2020_11_01_preview.TokenCredentialsProperties;
import com.microsoft.azure.management.containerregistry.v2020_11_01_preview.TokenStatus;
import rx.functions.Func1;

class TokenImpl extends CreatableUpdatableImpl<Token, TokenInner, TokenImpl> implements Token, Token.Definition, Token.Update {
    private final ContainerRegistryManager manager;
    private String resourceGroupName;
    private String registryName;
    private String tokenName;
    private TokenUpdateParameters updateParameter;

    TokenImpl(String name, ContainerRegistryManager manager) {
        super(name, new TokenInner());
        this.manager = manager;
        // Set resource name
        this.tokenName = name;
        //
        this.updateParameter = new TokenUpdateParameters();
    }

    TokenImpl(TokenInner inner, ContainerRegistryManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.tokenName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.registryName = IdParsingUtils.getValueFromIdByName(inner.id(), "registries");
        this.tokenName = IdParsingUtils.getValueFromIdByName(inner.id(), "tokens");
        //
        this.updateParameter = new TokenUpdateParameters();
    }

    @Override
    public ContainerRegistryManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Token> createResourceAsync() {
        TokensInner client = this.manager().inner().tokens();
        return client.createAsync(this.resourceGroupName, this.registryName, this.tokenName, this.inner())
            .map(new Func1<TokenInner, TokenInner>() {
               @Override
               public TokenInner call(TokenInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Token> updateResourceAsync() {
        TokensInner client = this.manager().inner().tokens();
        return client.updateAsync(this.resourceGroupName, this.registryName, this.tokenName, this.updateParameter)
            .map(new Func1<TokenInner, TokenInner>() {
               @Override
               public TokenInner call(TokenInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<TokenInner> getInnerAsync() {
        TokensInner client = this.manager().inner().tokens();
        return client.getAsync(this.resourceGroupName, this.registryName, this.tokenName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new TokenUpdateParameters();
    }

    @Override
    public DateTime creationDate() {
        return this.inner().creationDate();
    }

    @Override
    public TokenCredentialsProperties credentials() {
        return this.inner().credentials();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String scopeMapId() {
        return this.inner().scopeMapId();
    }

    @Override
    public TokenStatus status() {
        return this.inner().status();
    }

    @Override
    public SystemData systemData() {
        return this.inner().systemData();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public TokenImpl withExistingRegistry(String resourceGroupName, String registryName) {
        this.resourceGroupName = resourceGroupName;
        this.registryName = registryName;
        return this;
    }

    @Override
    public TokenImpl withCredentials(TokenCredentialsProperties credentials) {
        if (isInCreateMode()) {
            this.inner().withCredentials(credentials);
        } else {
            this.updateParameter.withCredentials(credentials);
        }
        return this;
    }

    @Override
    public TokenImpl withScopeMapId(String scopeMapId) {
        if (isInCreateMode()) {
            this.inner().withScopeMapId(scopeMapId);
        } else {
            this.updateParameter.withScopeMapId(scopeMapId);
        }
        return this;
    }

    @Override
    public TokenImpl withStatus(TokenStatus status) {
        if (isInCreateMode()) {
            this.inner().withStatus(status);
        } else {
            this.updateParameter.withStatus(status);
        }
        return this;
    }

}
