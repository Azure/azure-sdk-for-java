/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.containerregistry.v2018_02_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.containerregistry.v2018_02_01_preview.Builds;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import rx.Completable;
import com.microsoft.azure.management.containerregistry.v2018_02_01_preview.BuildGetLogResult;
import com.microsoft.azure.management.containerregistry.v2018_02_01_preview.Build;

class BuildsImpl extends WrapperImpl<BuildsInner> implements Builds {
    private final ContainerRegistryManager manager;

    BuildsImpl(ContainerRegistryManager manager) {
        super(manager.inner().builds());
        this.manager = manager;
    }

    public ContainerRegistryManager manager() {
        return this.manager;
    }

    private BuildImpl wrapModel(BuildInner inner) {
        return  new BuildImpl(inner, manager());
    }

    @Override
    public Observable<BuildGetLogResult> getLogLinkAsync(String resourceGroupName, String registryName, String buildId) {
        BuildsInner client = this.inner();
        return client.getLogLinkAsync(resourceGroupName, registryName, buildId)
        .map(new Func1<BuildGetLogResultInner, BuildGetLogResult>() {
            @Override
            public BuildGetLogResult call(BuildGetLogResultInner inner) {
                return new BuildGetLogResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable cancelAsync(String resourceGroupName, String registryName, String buildId) {
        BuildsInner client = this.inner();
        return client.cancelAsync(resourceGroupName, registryName, buildId).toCompletable();
    }

    @Override
    public Observable<Build> listAsync(final String resourceGroupName, final String registryName) {
        BuildsInner client = this.inner();
        return client.listAsync(resourceGroupName, registryName)
        .flatMapIterable(new Func1<Page<BuildInner>, Iterable<BuildInner>>() {
            @Override
            public Iterable<BuildInner> call(Page<BuildInner> page) {
                return page.items();
            }
        })
        .map(new Func1<BuildInner, Build>() {
            @Override
            public Build call(BuildInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<Build> getAsync(String resourceGroupName, String registryName, String buildId) {
        BuildsInner client = this.inner();
        return client.getAsync(resourceGroupName, registryName, buildId)
        .map(new Func1<BuildInner, Build>() {
            @Override
            public Build call(BuildInner inner) {
                return wrapModel(inner);
            }
       });
    }

}
