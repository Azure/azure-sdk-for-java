/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.containerregistry.v2018_02_01_preview.implementation;

import com.microsoft.azure.management.containerregistry.v2018_02_01_preview.BuildStatus;
import org.joda.time.DateTime;
import com.microsoft.azure.management.containerregistry.v2018_02_01_preview.BuildType;
import java.util.List;
import com.microsoft.azure.management.containerregistry.v2018_02_01_preview.ImageDescriptor;
import com.microsoft.azure.management.containerregistry.v2018_02_01_preview.ImageUpdateTrigger;
import com.microsoft.azure.management.containerregistry.v2018_02_01_preview.GitCommitTrigger;
import com.microsoft.azure.management.containerregistry.v2018_02_01_preview.PlatformProperties;
import com.microsoft.azure.management.containerregistry.v2018_02_01_preview.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.ProxyResource;

/**
 * Build resource properties.
 */
@JsonFlatten
public class BuildInner extends ProxyResource {
    /**
     * The unique identifier for the build.
     */
    @JsonProperty(value = "properties.buildId")
    private String buildId;

    /**
     * The current status of the build. Possible values include: 'Queued',
     * 'Started', 'Running', 'Succeeded', 'Failed', 'Canceled', 'Error',
     * 'Timeout'.
     */
    @JsonProperty(value = "properties.status")
    private BuildStatus status;

    /**
     * The last updated time for the build.
     */
    @JsonProperty(value = "properties.lastUpdatedTime")
    private DateTime lastUpdatedTime;

    /**
     * The type of build. Possible values include: 'AutoBuild', 'QuickBuild'.
     */
    @JsonProperty(value = "properties.buildType")
    private BuildType buildType;

    /**
     * The time the build was created.
     */
    @JsonProperty(value = "properties.createTime")
    private DateTime createTime;

    /**
     * The time the build started.
     */
    @JsonProperty(value = "properties.startTime")
    private DateTime startTime;

    /**
     * The time the build finished.
     */
    @JsonProperty(value = "properties.finishTime")
    private DateTime finishTime;

    /**
     * The list of all images that were generated from the build.
     */
    @JsonProperty(value = "properties.outputImages")
    private List<ImageDescriptor> outputImages;

    /**
     * The build task with which the build was started.
     */
    @JsonProperty(value = "properties.buildTask")
    private String buildTask;

    /**
     * The image update trigger that caused the build.
     */
    @JsonProperty(value = "properties.imageUpdateTrigger")
    private ImageUpdateTrigger imageUpdateTrigger;

    /**
     * The git commit trigger that caused the build.
     */
    @JsonProperty(value = "properties.gitCommitTrigger")
    private GitCommitTrigger gitCommitTrigger;

    /**
     * The value that indicates whether archiving is enabled or not.
     */
    @JsonProperty(value = "properties.isArchiveEnabled")
    private Boolean isArchiveEnabled;

    /**
     * The platform properties against which the build will happen.
     */
    @JsonProperty(value = "properties.platform")
    private PlatformProperties platform;

    /**
     * The provisioning state of a build. Possible values include: 'Creating',
     * 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled'.
     */
    @JsonProperty(value = "properties.provisioningState")
    private ProvisioningState provisioningState;

    /**
     * Get the unique identifier for the build.
     *
     * @return the buildId value
     */
    public String buildId() {
        return this.buildId;
    }

    /**
     * Set the unique identifier for the build.
     *
     * @param buildId the buildId value to set
     * @return the BuildInner object itself.
     */
    public BuildInner withBuildId(String buildId) {
        this.buildId = buildId;
        return this;
    }

    /**
     * Get the current status of the build. Possible values include: 'Queued', 'Started', 'Running', 'Succeeded', 'Failed', 'Canceled', 'Error', 'Timeout'.
     *
     * @return the status value
     */
    public BuildStatus status() {
        return this.status;
    }

    /**
     * Set the current status of the build. Possible values include: 'Queued', 'Started', 'Running', 'Succeeded', 'Failed', 'Canceled', 'Error', 'Timeout'.
     *
     * @param status the status value to set
     * @return the BuildInner object itself.
     */
    public BuildInner withStatus(BuildStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the last updated time for the build.
     *
     * @return the lastUpdatedTime value
     */
    public DateTime lastUpdatedTime() {
        return this.lastUpdatedTime;
    }

    /**
     * Set the last updated time for the build.
     *
     * @param lastUpdatedTime the lastUpdatedTime value to set
     * @return the BuildInner object itself.
     */
    public BuildInner withLastUpdatedTime(DateTime lastUpdatedTime) {
        this.lastUpdatedTime = lastUpdatedTime;
        return this;
    }

    /**
     * Get the type of build. Possible values include: 'AutoBuild', 'QuickBuild'.
     *
     * @return the buildType value
     */
    public BuildType buildType() {
        return this.buildType;
    }

    /**
     * Set the type of build. Possible values include: 'AutoBuild', 'QuickBuild'.
     *
     * @param buildType the buildType value to set
     * @return the BuildInner object itself.
     */
    public BuildInner withBuildType(BuildType buildType) {
        this.buildType = buildType;
        return this;
    }

    /**
     * Get the time the build was created.
     *
     * @return the createTime value
     */
    public DateTime createTime() {
        return this.createTime;
    }

    /**
     * Set the time the build was created.
     *
     * @param createTime the createTime value to set
     * @return the BuildInner object itself.
     */
    public BuildInner withCreateTime(DateTime createTime) {
        this.createTime = createTime;
        return this;
    }

    /**
     * Get the time the build started.
     *
     * @return the startTime value
     */
    public DateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the time the build started.
     *
     * @param startTime the startTime value to set
     * @return the BuildInner object itself.
     */
    public BuildInner withStartTime(DateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the time the build finished.
     *
     * @return the finishTime value
     */
    public DateTime finishTime() {
        return this.finishTime;
    }

    /**
     * Set the time the build finished.
     *
     * @param finishTime the finishTime value to set
     * @return the BuildInner object itself.
     */
    public BuildInner withFinishTime(DateTime finishTime) {
        this.finishTime = finishTime;
        return this;
    }

    /**
     * Get the list of all images that were generated from the build.
     *
     * @return the outputImages value
     */
    public List<ImageDescriptor> outputImages() {
        return this.outputImages;
    }

    /**
     * Set the list of all images that were generated from the build.
     *
     * @param outputImages the outputImages value to set
     * @return the BuildInner object itself.
     */
    public BuildInner withOutputImages(List<ImageDescriptor> outputImages) {
        this.outputImages = outputImages;
        return this;
    }

    /**
     * Get the build task with which the build was started.
     *
     * @return the buildTask value
     */
    public String buildTask() {
        return this.buildTask;
    }

    /**
     * Set the build task with which the build was started.
     *
     * @param buildTask the buildTask value to set
     * @return the BuildInner object itself.
     */
    public BuildInner withBuildTask(String buildTask) {
        this.buildTask = buildTask;
        return this;
    }

    /**
     * Get the image update trigger that caused the build.
     *
     * @return the imageUpdateTrigger value
     */
    public ImageUpdateTrigger imageUpdateTrigger() {
        return this.imageUpdateTrigger;
    }

    /**
     * Set the image update trigger that caused the build.
     *
     * @param imageUpdateTrigger the imageUpdateTrigger value to set
     * @return the BuildInner object itself.
     */
    public BuildInner withImageUpdateTrigger(ImageUpdateTrigger imageUpdateTrigger) {
        this.imageUpdateTrigger = imageUpdateTrigger;
        return this;
    }

    /**
     * Get the git commit trigger that caused the build.
     *
     * @return the gitCommitTrigger value
     */
    public GitCommitTrigger gitCommitTrigger() {
        return this.gitCommitTrigger;
    }

    /**
     * Set the git commit trigger that caused the build.
     *
     * @param gitCommitTrigger the gitCommitTrigger value to set
     * @return the BuildInner object itself.
     */
    public BuildInner withGitCommitTrigger(GitCommitTrigger gitCommitTrigger) {
        this.gitCommitTrigger = gitCommitTrigger;
        return this;
    }

    /**
     * Get the value that indicates whether archiving is enabled or not.
     *
     * @return the isArchiveEnabled value
     */
    public Boolean isArchiveEnabled() {
        return this.isArchiveEnabled;
    }

    /**
     * Set the value that indicates whether archiving is enabled or not.
     *
     * @param isArchiveEnabled the isArchiveEnabled value to set
     * @return the BuildInner object itself.
     */
    public BuildInner withIsArchiveEnabled(Boolean isArchiveEnabled) {
        this.isArchiveEnabled = isArchiveEnabled;
        return this;
    }

    /**
     * Get the platform properties against which the build will happen.
     *
     * @return the platform value
     */
    public PlatformProperties platform() {
        return this.platform;
    }

    /**
     * Set the platform properties against which the build will happen.
     *
     * @param platform the platform value to set
     * @return the BuildInner object itself.
     */
    public BuildInner withPlatform(PlatformProperties platform) {
        this.platform = platform;
        return this;
    }

    /**
     * Get the provisioning state of a build. Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled'.
     *
     * @return the provisioningState value
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioning state of a build. Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled'.
     *
     * @param provisioningState the provisioningState value to set
     * @return the BuildInner object itself.
     */
    public BuildInner withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

}
