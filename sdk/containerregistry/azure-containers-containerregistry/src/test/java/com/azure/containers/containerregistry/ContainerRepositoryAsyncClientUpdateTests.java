// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.models.RegistryArtifactProperties;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpClient;
import com.azure.core.http.netty.NettyAsyncHttpClientBuilder;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.test.TestMode;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.parallel.Execution;
import org.junit.jupiter.api.parallel.ExecutionMode;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.time.Duration;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import static com.azure.containers.containerregistry.TestUtils.DISPLAY_NAME_WITH_ARGUMENTS;
import static com.azure.containers.containerregistry.TestUtils.HELLO_WORLD_SEATTLE_REPOSITORY_NAME;
import static com.azure.containers.containerregistry.TestUtils.TAG_TO_DELETE;
import static com.azure.containers.containerregistry.TestUtils.TAG_TO_UPDATE;

@Execution(ExecutionMode.SAME_THREAD)
public class ContainerRepositoryAsyncClientUpdateTests extends ContainerRegistryClientsTestBase {

    private ContainerRepositoryAsyncClient getContainerRepositoryAsyncClient(HttpClient httpClient) {
        return getContainerRepositoryBuilder(HELLO_WORLD_SEATTLE_REPOSITORY_NAME, httpClient).buildAsyncClient();
    }

    private ContainerRegistryAsyncClient getContainerRegistryClient(HttpClient httpClient) {
        return getContainerRegistryBuilder(httpClient).buildAsyncClient();
    }

    private boolean resetTag;
    private boolean resetRepository;
    private String digest;

    @BeforeAll
    static void beforeAll() {
        StepVerifier.setDefaultTimeout(Duration.ofMinutes(30));
    }

    @AfterAll
    static void afterAll() {
        StepVerifier.resetDefaultTimeout();
    }

    @BeforeEach
    public void setup() {
        resetTag = false;
        digest = null;
        importImage(HELLO_WORLD_SEATTLE_REPOSITORY_NAME, Arrays.asList(TAG_TO_UPDATE, TAG_TO_DELETE));
    }

    @AfterEach
    public void cleanup() {
        ContainerRepositoryAsyncClient client = getContainerRepositoryAsyncClient(new NettyAsyncHttpClientBuilder().build());

        if (getTestMode() != TestMode.PLAYBACK) {
            if (digest != null) {
                client.setManifestProperties(digest, defaultProperties).block();
            }

            if (resetTag) {
                client.setTagProperties(TAG_TO_UPDATE, defaultProperties).block();
            }

            if (resetRepository) {
                client.setProperties(defaultProperties).block();
            }
        }
    }


    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void setRepositoryProperties(HttpClient httpClient) {
        ContainerRepositoryAsyncClient client = getContainerRepositoryAsyncClient(httpClient);

        resetRepository = true;
        StepVerifier.create(client.setProperties(writeableProperties).then(monoDelay().flatMap(res -> client.getProperties())))
            .assertNext(res -> validateContentProperties(res.getWriteableProperties()))
            .verifyComplete();
    }

//    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
//    @MethodSource("getHttpClients")
//    public void setRepositoryPropertiesWithResponse(HttpClient httpClient) {
//        ContainerRepositoryAsyncClient client = getContainerRepositoryAsyncClient(httpClient);
//
//        resetRepository = true;
//        StepVerifier.create(client.setPropertiesWithResponse(writeableProperties).then(monoDelay().flatMap(res -> client.getProperties())))
//            .assertNext(res -> validateContentProperties(res.getWriteableProperties()))
//            .verifyComplete();
//    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void setManifestProperties(HttpClient httpClient) {
        ContainerRepositoryAsyncClient client = getContainerRepositoryAsyncClient(httpClient);

        PagedIterable<RegistryArtifactProperties> props = new PagedIterable<>(client.listRegistryArtifacts());
        List<RegistryArtifactProperties> repositories = props.stream().collect(Collectors.toList());
        digest = getChildArtifactDigest(repositories);

        StepVerifier.create(client.setManifestProperties(digest, writeableProperties).then(monoDelay().flatMap(res -> client.getRegistryArtifactProperties(digest))))
            .assertNext(res -> validateContentProperties(res.getWriteableProperties()))
            .verifyComplete();
    }

//    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
//    @MethodSource("getHttpClients")
//    public void setManifestPropertiesWithResponse(HttpClient httpClient) {
//        ContainerRepositoryAsyncClient client = getContainerRepositoryAsyncClient(httpClient);
//        digest = digests.get(1);
//
//        StepVerifier.create(client.setManifestPropertiesWithResponse(digest, writeableProperties).then(monoDelay().flatMap(res -> client.getRegistryArtifactProperties(digest))))
//            .assertNext(res -> validateContentProperties(res.getWriteableProperties()))
//            .verifyComplete();
//    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void deleteRegistryArtifact(HttpClient httpClient) {
        ContainerRepositoryAsyncClient client = getContainerRepositoryAsyncClient(httpClient);
        PagedIterable<RegistryArtifactProperties> props = new PagedIterable<>(client.listRegistryArtifacts());
        List<RegistryArtifactProperties> repositories = props.stream().collect(Collectors.toList());
        digest = getChildArtifactDigest(repositories);

        StepVerifier.create(client.deleteRegistryArtifact(digest).then(Mono.defer(() -> monoDelay().flatMap(res -> client.getRegistryArtifactProperties(digest)))))
            .expectError(ResourceNotFoundException.class);
    }

//    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
//    @MethodSource("getHttpClients")
//    public void deleteRegistryArtifactWithResponse(HttpClient httpClient) {
//        ContainerRepositoryAsyncClient client = getContainerRepositoryAsyncClient(httpClient);
//        digest = digests.get(3);
//
//        StepVerifier.create(client.deleteRegistryArtifactWithResponse(digest).then(Mono.defer(() -> monoDelay().flatMap(res -> client.getRegistryArtifactProperties(digest)))))
//            .expectError(ResourceNotFoundException.class);
//    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void setTagProperties(HttpClient httpClient) {
        ContainerRepositoryAsyncClient client = getContainerRepositoryAsyncClient(httpClient);
        resetTag = true;

        StepVerifier.create(client.setTagProperties(TAG_TO_UPDATE, writeableProperties).then(monoDelay().flatMap(res -> client.getTagProperties(TAG_TO_UPDATE))))
            .assertNext(res -> validateContentProperties(res.getWriteableProperties()))
            .verifyComplete();
    }

//    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
//    @MethodSource("getHttpClients")
//    public void setTagPropertiesWithResponse(HttpClient httpClient) {
//        ContainerRepositoryAsyncClient client = getContainerRepositoryAsyncClient(httpClient);
//        resetTag = true;
//
//        StepVerifier.create(client.setTagPropertiesWithResponse(TAG_TO_UPDATE, writeableProperties).then(monoDelay().flatMap(res -> client.getTagProperties(TAG_TO_UPDATE))))
//            .assertNext(res -> validateContentProperties(res.getWriteableProperties()))
//            .verifyComplete();
//    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void deleteTag(HttpClient httpClient) {
        ContainerRepositoryAsyncClient client = getContainerRepositoryAsyncClient(httpClient);
        StepVerifier.create(client.deleteTag(TAG_TO_DELETE).then(monoDelay().flatMap(res -> client.getTagProperties(TAG_TO_DELETE))))
            .expectError(ResourceNotFoundException.class);
    }

//    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
//    @MethodSource("getHttpClients")
//    public void deleteTagWithResponse(HttpClient httpClient) {
//        ContainerRepositoryAsyncClient client = getContainerRepositoryAsyncClient(httpClient);
//
//        StepVerifier.create(client.deleteTagWithResponse(TAG_TO_DELETE).then(monoDelay().flatMap(res -> client.getTagProperties(TAG_TO_DELETE))))
//            .expectError(ResourceNotFoundException.class);
//    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void deleteRepositoryWithResponse(HttpClient httpClient) {
        ContainerRepositoryAsyncClient client = getContainerRepositoryAsyncClient(httpClient);

        StepVerifier.create(client.deleteWithResponse())
            .assertNext(res -> {
                validateDeletedRepositoryResponse(res.getValue());
            })
            .verifyComplete();
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void deleteRepositoriesViaParent(HttpClient httpClient) {
        ContainerRegistryAsyncClient client = getContainerRegistryClient(httpClient);
        ContainerRepositoryAsyncClient repoClient = client.getRepositoryClient(HELLO_WORLD_SEATTLE_REPOSITORY_NAME);

        StepVerifier.create(client.deleteRepository(HELLO_WORLD_SEATTLE_REPOSITORY_NAME))
            .assertNext(res -> {
                validateDeletedRepositoryResponse(res);
            })
            .verifyComplete();
    }
}
