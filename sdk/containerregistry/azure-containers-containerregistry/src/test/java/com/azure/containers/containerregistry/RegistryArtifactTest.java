// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.models.ContentProperties;
import com.azure.core.http.HttpClient;
import com.azure.core.test.implementation.ImplUtils;
import com.azure.core.util.Context;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.util.Arrays;

import static com.azure.containers.containerregistry.TestUtils.DISPLAY_NAME_WITH_ARGUMENTS;
import static com.azure.containers.containerregistry.TestUtils.HELLO_WORLD_REPOSITORY_NAME;
import static com.azure.containers.containerregistry.TestUtils.LATEST_TAG_NAME;
import static com.azure.containers.containerregistry.TestUtils.V1_TAG_NAME;
import static com.azure.containers.containerregistry.TestUtils.V2_TAG_NAME;
import static com.azure.containers.containerregistry.TestUtils.V3_TAG_NAME;
import static com.azure.containers.containerregistry.TestUtils.V4_TAG_NAME;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class RegistryArtifactTest extends ContainerRegistryClientsTestBase {
    private String recordFileName;

    private RegistryArtifactAsync asyncClient;
    private RegistryArtifact client;

    @BeforeEach
    void beforeEach() {
        TestUtils.importImage(
            ImplUtils.getTestMode(),
            HELLO_WORLD_REPOSITORY_NAME,
            Arrays.asList(
                LATEST_TAG_NAME,
                V1_TAG_NAME,
                V2_TAG_NAME,
                V3_TAG_NAME,
                V4_TAG_NAME));
    }

    private RegistryArtifactAsync getRegistryArtifactAsyncClient(HttpClient httpClient, String tagOrDigest) {
        return getContainerRegistryBuilder(httpClient)
            .buildAsyncClient()
            .getArtifact(HELLO_WORLD_REPOSITORY_NAME, tagOrDigest);
    }

    private RegistryArtifactAsync getRegistryArtifactAsyncClient(String tagOrDigest) {
        return getRegistryArtifactAsyncClient(new LocalHttpClient(recordFileName), tagOrDigest);
    }

    private RegistryArtifact getRegistryArtifactClient(HttpClient httpClient, String tagOrDigest) {
        return getContainerRegistryBuilder(httpClient)
            .buildClient()
            .getArtifact(HELLO_WORLD_REPOSITORY_NAME, tagOrDigest);
    }

    private RegistryArtifact getRegistryArtifactClient(String tagOrDigest) {
        return getRegistryArtifactClient(new LocalHttpClient(recordFileName), tagOrDigest);
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void delete(HttpClient httpClient) {
        client = getRegistryArtifactClient(httpClient, V4_TAG_NAME);
        String digest = getChildArtifactDigest(client.getManifestProperties().getManifests());

        asyncClient = getRegistryArtifactAsyncClient(httpClient, digest);

        Mono<Boolean> delete = asyncClient.delete()
            .then(asyncClient.getManifestProperties()
                .flatMap(res -> Mono.just(false))
                .onErrorResume(res -> Mono.just(true)));

        StepVerifier.create(delete)
            .assertNext(res -> assertTrue(res))
            .verifyComplete();
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void deleteTag(HttpClient httpClient) {
        client = getRegistryArtifactClient(httpClient, LATEST_TAG_NAME);
        asyncClient = getRegistryArtifactAsyncClient(httpClient, LATEST_TAG_NAME);

        Mono<Boolean> delete = asyncClient.deleteTag(V3_TAG_NAME)
            .then(asyncClient.getTagProperties(V3_TAG_NAME)
                .flatMap(res -> Mono.just(false))
                .onErrorResume(res -> Mono.just(true)));

        StepVerifier.create(delete)
            .assertNext(res -> assertTrue(res))
            .verifyComplete();
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void updateManifestProperties(HttpClient httpClient) {
        client = getRegistryArtifactClient(httpClient, V1_TAG_NAME);
        asyncClient = getRegistryArtifactAsyncClient(httpClient, V1_TAG_NAME);

        StepVerifier.create(asyncClient.updateManifestProperties(writeableProperties))
            .assertNext(res -> validateContentProperties(res.getWriteableProperties()))
            .verifyComplete();

        StepVerifier.create(asyncClient.updateManifestPropertiesWithResponse(writeableProperties))
            .assertNext(res -> validateContentProperties(res.getValue().getWriteableProperties()))
            .verifyComplete();

        validateContentProperties(client.updateManifestProperties(writeableProperties)
            .getWriteableProperties());

        validateContentProperties(client.updateManifestPropertiesWithResponse(writeableProperties, Context.NONE)
            .getValue()
            .getWriteableProperties());
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void updateTagProperties(HttpClient httpClient) {
        client = getRegistryArtifactClient(httpClient, V2_TAG_NAME);
        asyncClient = getRegistryArtifactAsyncClient(httpClient, V2_TAG_NAME);

        ContentProperties properties = writeableProperties;

        StepVerifier.create(asyncClient.updateTagProperties(V2_TAG_NAME, writeableProperties))
            .assertNext(res -> validateContentProperties(res.getWriteableProperties()))
            .verifyComplete();

        StepVerifier.create(asyncClient.updateTagPropertiesWithResponse(V2_TAG_NAME, writeableProperties))
            .assertNext(res -> validateContentProperties(res.getValue().getWriteableProperties()))
            .verifyComplete();

        validateContentProperties(client.updateTagProperties(V2_TAG_NAME, writeableProperties)
            .getWriteableProperties());

        validateContentProperties(client.updateTagPropertiesWithResponse(V2_TAG_NAME, writeableProperties, Context.NONE)
            .getValue()
            .getWriteableProperties());
    }

    @Test
    public void deleteFromRecordFile() {
        recordFileName = "RegistryArtifactTest.delete[1].json";
        client = getRegistryArtifactClient(V4_TAG_NAME);
        String digest = getChildArtifactDigest(client.getManifestProperties().getManifests());

        asyncClient = getRegistryArtifactAsyncClient(digest);
        client = getRegistryArtifactClient(digest);

        StepVerifier.create(asyncClient.delete())
            .verifyComplete();

        StepVerifier.create(asyncClient.deleteWithResponse())
            .assertNext(res -> assertNull(res.getValue()))
            .verifyComplete();

        client.delete();
        assertNull(client.deleteWithResponse(Context.NONE).getValue());
    }

    @Test
    public void deleteTagFromRecordFile() {
        recordFileName = "RegistryArtifactTest.deleteTag[1].json";
        client = getRegistryArtifactClient(LATEST_TAG_NAME);
        asyncClient = getRegistryArtifactAsyncClient(LATEST_TAG_NAME);

        StepVerifier.create(asyncClient.deleteTag(V3_TAG_NAME))
            .verifyComplete();

        StepVerifier.create(asyncClient.deleteTagWithResponse(V3_TAG_NAME))
            .assertNext(res -> assertNull(res.getValue()))
            .verifyComplete();

        client.deleteTag(V3_TAG_NAME);
        assertNull(client.deleteTagWithResponse(V3_TAG_NAME, Context.NONE).getValue());
    }
}
