// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.models.RegistryArtifactProperties;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpClient;
import com.azure.core.http.netty.NettyAsyncHttpClientBuilder;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.test.TestMode;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.parallel.Execution;
import org.junit.jupiter.api.parallel.ExecutionMode;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.time.Duration;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import static com.azure.containers.containerregistry.TestUtils.DIGEST_UNKNOWN;
import static com.azure.containers.containerregistry.TestUtils.DISPLAY_NAME_WITH_ARGUMENTS;
import static com.azure.containers.containerregistry.TestUtils.HELLO_WORLD_SEATTLE_REPOSITORY_NAME;
import static com.azure.containers.containerregistry.TestUtils.TAG_TO_DELETE;
import static com.azure.containers.containerregistry.TestUtils.TAG_TO_UPDATE;
import static com.azure.containers.containerregistry.TestUtils.TAG_UNKNOWN;

@Execution(ExecutionMode.SAME_THREAD)
public class ContainerRepositoryAsyncClientUpdateIntegrationTests extends ContainerRegistryClientsTestBase {

    private ContainerRepositoryAsyncClient client;
    private String digest;
    private boolean resetTag;
    private boolean resetRepository;

    private ContainerRepositoryAsyncClient getContainerRepositoryAsyncClient(HttpClient httpClient) {
        return getContainerRepositoryBuilder(HELLO_WORLD_SEATTLE_REPOSITORY_NAME, httpClient).buildAsyncClient();
    }

    private ContainerRepositoryAsyncClient getUnknownContainerRepositoryAsyncClient(HttpClient httpClient) {
        return getContainerRepositoryBuilder(TAG_UNKNOWN, httpClient).buildAsyncClient();
    }

    private ContainerRegistryAsyncClient getContainerRegistryAsyncClient(HttpClient httpClient) {
        return getContainerRegistryBuilder(httpClient).buildAsyncClient();
    }


    @BeforeAll
    static void beforeAll() {
        StepVerifier.setDefaultTimeout(Duration.ofMinutes(30));
    }

    @BeforeEach
    public void setup() {
        resetTag = false;
        digest = null;
        importImage(HELLO_WORLD_SEATTLE_REPOSITORY_NAME, Arrays.asList(TAG_TO_UPDATE, TAG_TO_DELETE));

    }

    @AfterEach
    public void cleanup() {
        if (getTestMode() == TestMode.PLAYBACK) {
            return;
        }

        ContainerRepositoryAsyncClient client = getContainerRepositoryAsyncClient(new NettyAsyncHttpClientBuilder().build());

        if (digest != null) {
            client.updateManifestProperties(digest, defaultProperties).block();
        }

        if (resetTag) {
            client.updateTagProperties(TAG_TO_UPDATE, defaultProperties).block();
        }

        if (resetRepository) {
            client.updateProperties(defaultProperties).block();
        }
    }

    @AfterAll
    static void afterAll() {
        StepVerifier.resetDefaultTimeout();
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void setRepositoryPropertiesWithResponse(HttpClient httpClient) {
        client = getContainerRepositoryAsyncClient(httpClient);
        resetRepository = true;

        StepVerifier.create(client.updatePropertiesWithResponse(writeableProperties).then(monoDelay().flatMap(res -> client.getProperties())))
            .assertNext(res -> validateContentProperties(res.getWriteableProperties()))
            .verifyComplete();
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void setRepositoryPropertiesThrowsWithResponse(HttpClient httpClient) {
        client = getUnknownContainerRepositoryAsyncClient(httpClient);

        StepVerifier.create(client.updatePropertiesWithResponse(writeableProperties).then(monoDelay().flatMap(res -> client.getProperties())))
            .expectError(ResourceNotFoundException.class)
            .verify();
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void setManifestPropertiesWithResponse(HttpClient httpClient) {
        client = getContainerRepositoryAsyncClient(httpClient);

        PagedIterable<RegistryArtifactProperties> props = new PagedIterable<>(client.listRegistryArtifacts());
        List<RegistryArtifactProperties> repositories = props.stream().collect(Collectors.toList());
        digest = getChildArtifactDigest(repositories);

        StepVerifier.create(client.updateManifestPropertiesWithResponse(digest, writeableProperties).then(monoDelay().flatMap(res -> client.getRegistryArtifactProperties(digest))))
            .assertNext(res -> validateContentProperties(res.getWriteableProperties()))
            .verifyComplete();
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void setManifestPropertiesThrowsWithResponse(HttpClient httpClient) {
        client = getContainerRepositoryAsyncClient(httpClient);

        StepVerifier.create(client.updateManifestPropertiesWithResponse(DIGEST_UNKNOWN, writeableProperties).then(monoDelay().flatMap(res -> client.getRegistryArtifactProperties(digest))))
            .expectError(ResourceNotFoundException.class)
            .verify();
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void deleteRegistryArtifactWithResponse(HttpClient httpClient) {
        client = getContainerRepositoryAsyncClient(httpClient);
        PagedIterable<RegistryArtifactProperties> props = new PagedIterable<>(client.listRegistryArtifacts());
        List<RegistryArtifactProperties> repositories = props.stream().collect(Collectors.toList());
        String digest = getChildArtifactDigest(repositories);

        Mono<RegistryArtifactProperties> testDeleteRegistry = client.deleteRegistryArtifactWithResponse(digest)
            .then(Mono.defer(() -> monoDelay().flatMap(res -> client.getRegistryArtifactProperties(digest).onErrorMap(err -> err))));

        StepVerifier.create(testDeleteRegistry)
            .expectError(ResourceNotFoundException.class)
            .verify();
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void deleteRegistryArtifactThrowsWithResponse(HttpClient httpClient) {
        client = getContainerRepositoryAsyncClient(httpClient);

        StepVerifier.create(client.deleteRegistryArtifactWithResponse(DIGEST_UNKNOWN))
            .expectError(ResourceNotFoundException.class)
            .verify();
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void setTagPropertiesWithResponse(HttpClient httpClient) {
        ContainerRepositoryAsyncClient client = getContainerRepositoryAsyncClient(httpClient);
        resetTag = true;

        StepVerifier.create(client.updateTagPropertiesWithResponse(TAG_TO_UPDATE, writeableProperties).then(monoDelay().flatMap(res -> client.getTagProperties(TAG_TO_UPDATE))))
            .assertNext(res -> validateContentProperties(res.getWriteableProperties()))
            .verifyComplete();
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void setTagPropertiesThrowsWithResponse(HttpClient httpClient) {
        ContainerRepositoryAsyncClient client = getContainerRepositoryAsyncClient(httpClient);

        StepVerifier.create(client.updateTagPropertiesWithResponse(TAG_UNKNOWN, writeableProperties))
            .expectError(ResourceNotFoundException.class)
            .verify();
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void deleteTagWithResponse(HttpClient httpClient) {
        ContainerRepositoryAsyncClient client = getContainerRepositoryAsyncClient(httpClient);
        StepVerifier.create(client.deleteTagWithResponse(TAG_TO_DELETE).then(monoDelay().flatMap(res -> client.getTagProperties(TAG_TO_DELETE))))
            .expectError(ResourceNotFoundException.class)
            .verify();
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void deleteTagThrowsWithResponse(HttpClient httpClient) {
        ContainerRepositoryAsyncClient client = getContainerRepositoryAsyncClient(httpClient);

        StepVerifier.create(client.deleteTagWithResponse(TAG_UNKNOWN))
            .expectError(ResourceNotFoundException.class)
            .verify();
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void deleteRepositoryWithResponse(HttpClient httpClient) {
        ContainerRepositoryAsyncClient client = getContainerRepositoryAsyncClient(httpClient);

        StepVerifier.create(client.deleteWithResponse())
            .assertNext(res -> {
                validateDeletedRepositoryResponse(res.getValue());
            })
            .verifyComplete();
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void deleteRepositoryThrowsWithResponse(HttpClient httpClient) {
        ContainerRepositoryAsyncClient client = getUnknownContainerRepositoryAsyncClient(httpClient);

        StepVerifier.create(client.deleteWithResponse())
            .expectError(ResourceNotFoundException.class)
            .verify();
    }

//    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
//    @MethodSource("getHttpClients")
//    public void deleteRepositoryViaParentWithResponse(HttpClient httpClient) {
//        testDelay();
//        ContainerRegistryAsyncClient registryClient = getContainerRegistryAsyncClient(httpClient);
//
//
//        StepVerifier.create(registryClient.deleteRepositoryWithResponse(HELLO_WORLD_SEATTLE_REPOSITORY_NAME))
//            .assertNext(res -> validateDeletedRepositoryResponse(res))
//            .verifyComplete();
//    }
}

