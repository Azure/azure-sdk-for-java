// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.models.ListRegistryArtifactOptions;
import com.azure.containers.containerregistry.models.ListTagsOptions;
import com.azure.containers.containerregistry.models.RegistryArtifactOrderBy;
import com.azure.containers.containerregistry.models.RegistryArtifactProperties;
import com.azure.containers.containerregistry.models.RepositoryProperties;
import com.azure.containers.containerregistry.models.TagOrderBy;
import com.azure.containers.containerregistry.models.TagProperties;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import static com.azure.containers.containerregistry.TestUtils.DIGEST_UNKNOWN;
import static com.azure.containers.containerregistry.TestUtils.DISPLAY_NAME_WITH_ARGUMENTS;
import static com.azure.containers.containerregistry.TestUtils.HELLO_WORLD_REPOSITORY_NAME;
import static com.azure.containers.containerregistry.TestUtils.LATEST_TAG_NAME;
import static com.azure.containers.containerregistry.TestUtils.PAGESIZE_2;
import static com.azure.containers.containerregistry.TestUtils.isSorted;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class ContainerRepositoryClientTest extends ContainerRegistryClientsTestBase {
    private String recordFileName;
    private static final String PARENT_FILENAME = "ContainerRepositoryClientAsyncIntegrationTests";
    private ContainerRepositoryClient client;

    private ContainerRepositoryClient getContainerRepositoryClient() {
        return getContainerRepositoryBuilder(HELLO_WORLD_REPOSITORY_NAME, new LocalHttpClient(recordFileName)).buildClient();
    }

    private ContainerRepositoryClient getContainerRepositoryClientUnknownRepo() {
        return getContainerRepositoryBuilder("Unknown", new LocalHttpClient(recordFileName)).buildClient();
    }

    @Test
    public void getRepositoryProperties() {
        recordFileName = PARENT_FILENAME + "." + "getRepositoryPropertiesWithResponse[1].json";
        client = getContainerRepositoryClient();

        RepositoryProperties props = client.getProperties();
        validateProperties(props);
    }

    @Test
    public void getRepositoryPropertiesWithResponse() {
        recordFileName = PARENT_FILENAME + "." + "getRepositoryPropertiesWithResponse[1].json";
        client = getContainerRepositoryClient();

        Response<RepositoryProperties> response = client.getPropertiesWithResponse(Context.NONE);
        validateProperties(response);
    }

    @Test
    public void getUnknownRepositoryPropertiesWithResponse() {
        recordFileName = "ContainerRepositoryClientAsyncIntegrationTests.getUnknownRepositoryPropertiesWithResponse[1].json";        client = getContainerRepositoryClientUnknownRepo();
        client = getContainerRepositoryClientUnknownRepo();

        assertThrows(ResourceNotFoundException.class, () -> client.getProperties());
        assertThrows(ResourceNotFoundException.class, () -> client.getPropertiesWithResponse(Context.NONE));
    }

    @Test
    public void getMultiArchitectureImageProperties() {
        recordFileName = PARENT_FILENAME + "." + "getMultiArchitectureImagePropertiesWithResponse[1].json";
        client = getContainerRepositoryClient();

        // 1. Getting manifest properties from a tag works.
        RegistryArtifactProperties props = client.getRegistryArtifactProperties(LATEST_TAG_NAME);
        validateArtifactProperties(props, true, false);

        String digest = props.getDigest();
        props = client.getRegistryArtifactProperties(digest);
        validateArtifactProperties(props, true, false);
    }

    @Test
    public void getMultiArchitectureImagePropertiesWithResponse() {
        recordFileName = "ContainerRepositoryClientAsyncIntegrationTests.getMultiArchitectureImagePropertiesWithResponse[1].json";
        client = getContainerRepositoryClient();

        // 1. Getting manifest properties from a tag works.
        Response<RegistryArtifactProperties> props = client.getRegistryArtifactPropertiesWithResponse(LATEST_TAG_NAME, Context.NONE);
        validateArtifactProperties(props, true, false);

        String digest = props.getValue().getDigest();
        props = client.getRegistryArtifactPropertiesWithResponse(digest, Context.NONE);
        validateArtifactProperties(props, true, false);
    }

    @Test
    public void getRegistryArtifactPropertiesThrows() {
        recordFileName = PARENT_FILENAME + "." + "getMultiArchitectureImagePropertiesWithResponseThrows[1].json";
        client = getContainerRepositoryClient();

        assertThrows(NullPointerException.class, () -> client.getRegistryArtifactProperties(null));
        assertThrows(NullPointerException.class, () -> client.getRegistryArtifactPropertiesWithResponse(null, Context.NONE));

        assertThrows(ResourceNotFoundException.class, () -> client.getRegistryArtifactProperties(DIGEST_UNKNOWN));
        assertThrows(ResourceNotFoundException.class, () -> client.getRegistryArtifactPropertiesWithResponse(DIGEST_UNKNOWN, Context.NONE));
    }

    @Test
    public void listArtifacts() {
        recordFileName = PARENT_FILENAME + "." + "listArtifacts[1].json";
        client = getContainerRepositoryClient();

        List<RegistryArtifactProperties> artifacts = client.listRegistryArtifacts().stream().collect(Collectors.toList());
        validateListArtifacts(artifacts);
    }

    @Test
    public void listArtifactsWithPageSize() {
        recordFileName = PARENT_FILENAME + "." + "listArtifactsWithPageSize[1].json";
        client = getContainerRepositoryClient();

        ArrayList<RegistryArtifactProperties> artifacts = new ArrayList<>();
        client.listRegistryArtifacts().iterableByPage(PAGESIZE_2).forEach(res -> res.getValue().forEach(repo -> artifacts.add(repo)));
        validateListArtifacts(artifacts);
    }

    @Test
    public void listArtifactsWithPageSizeAndOrderBy() {
        recordFileName = PARENT_FILENAME + "." + "listArtifactsWithPageSizeAndOrderBy[1].json";
        client = getContainerRepositoryClient();

        ListRegistryArtifactOptions options = new ListRegistryArtifactOptions().setRegistryArtifactOrderBy(RegistryArtifactOrderBy.LAST_UPDATED_ON_ASCENDING);

        ArrayList<RegistryArtifactProperties> artifacts = new ArrayList<>();
        client.listRegistryArtifacts(options).iterableByPage(PAGESIZE_2).forEach(res -> {
            assertEquals(PAGESIZE_2, res.getValue().size());
            res.getValue().forEach(repo -> artifacts.add(repo));
        });

        validateListArtifacts(artifacts);

        // Validate that the datetime is in ascending order.
        List<OffsetDateTime> lastUpdatedOn = artifacts.stream().map(artifact -> artifact.getLastUpdatedOn()).collect(Collectors.toList());
        assertTrue(isSorted(lastUpdatedOn));
    }

    @Test
    public void listArtifactsWithPageSizeNoOrderBy() {
        recordFileName = PARENT_FILENAME + "." + "listArtifactsWithPageSizeNoOrderBy[1].json";
        client = getContainerRepositoryClient();

        ListRegistryArtifactOptions options = new ListRegistryArtifactOptions();

        ArrayList<RegistryArtifactProperties> artifacts = new ArrayList<>();
        client.listRegistryArtifacts(options).iterableByPage(PAGESIZE_2).forEach(res -> {
            assertEquals(PAGESIZE_2, res.getValue().size());
            res.getValue().forEach(repo -> artifacts.add(repo));
        });

        validateListArtifacts(artifacts);
    }

    @Test
    public void listTags() {
        recordFileName = PARENT_FILENAME + "." + "listTags[1].json";
        client = getContainerRepositoryClient();

        List<TagProperties> tags = client.listTags().stream().collect(Collectors.toList());
        validateListTags(tags);
    }

    @Test
    public void listTagsWithPageSize() {
        recordFileName = PARENT_FILENAME + "." + "listTagsWithPageSize[1].json";
        client = getContainerRepositoryClient();

        ArrayList<TagProperties> tags = new ArrayList<>();
        client.listTags().iterableByPage(PAGESIZE_2).forEach(res -> res.getValue().forEach(repo -> tags.add(repo)));
        validateListTags(tags);
    }


    @Test
    public void listTagsWithPageSizeAndOrderBy() {
        recordFileName = PARENT_FILENAME + "." + "listTagsWithPageSizeAndOrderBy[1].json";
        client = getContainerRepositoryClient();

        ListTagsOptions options = new ListTagsOptions().setTagOrderBy(TagOrderBy.LAST_UPDATED_ON_ASCENDING);
        ArrayList<TagProperties> tags = new ArrayList<>();
        client.listTags(options).iterableByPage(PAGESIZE_2).forEach(res -> {
            assertTrue(res.getValue().size() <= 2);
            res.getValue().forEach(repo -> tags.add(repo));
        });

        validateListTags(tags);

        // Validate that the datetime is in ascending order.
        List<OffsetDateTime> lastUpdatedOn = tags.stream().map(tag -> tag.getLastUpdatedOn()).collect(Collectors.toList());
        assertTrue(isSorted(lastUpdatedOn));
    }

    @Test
    public void listTagsWithPageSizeNoOrderBy() {
        recordFileName = PARENT_FILENAME + "." + "listTagsWithPageSizeNoOrderBy[1].json";
        client = getContainerRepositoryClient();

        ListTagsOptions options = new ListTagsOptions();

        ArrayList<TagProperties> tags = new ArrayList<>();
        client.listTags(options).iterableByPage(PAGESIZE_2).forEach(res -> {
            assertTrue(res.getValue().size() <= 2);
            res.getValue().forEach(repo -> tags.add(repo));
        });

        validateListTags(tags);
    }

    @Test
    public void getTagProperties() {
        recordFileName = PARENT_FILENAME + "." + "getTagPropertiesWithResponse[1].json";
        client = getContainerRepositoryClient();

        TagProperties tagProps = client.getTagProperties(LATEST_TAG_NAME);
        validateTagProperties(tagProps, LATEST_TAG_NAME);
    }

    @Test
    public void getTagPropertiesWithResponse() {
        recordFileName = PARENT_FILENAME + "." + "getTagPropertiesWithResponse[1].json";
        client = getContainerRepositoryClient();

        Response<TagProperties> tagProps = client.getTagPropertiesWithResponse(LATEST_TAG_NAME, Context.NONE);
        validateTagProperties(tagProps, LATEST_TAG_NAME);
    }


    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void getTagPropertiesThrows() {
        recordFileName = PARENT_FILENAME + "." + "getTagPropertiesWithResponseThrows[1].json";
        client = getContainerRepositoryClient();

        assertThrows(NullPointerException.class, () -> client.getTagProperties(null));

        assertThrows(ResourceNotFoundException.class, () -> client.getTagProperties("unknown"));
        assertThrows(ResourceNotFoundException.class, () -> client.getTagPropertiesWithResponse("unknown", Context.NONE));
    }

//    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
//    @MethodSource("getHttpClients")
//    public void setTagPropertiesThrows() {
//        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
//
//        assertThrows(NullPointerException.class, () -> client.updateTagProperties(null, writeableProperties));
//
//        assertThrows(NullPointerException.class, () -> client.updateTagPropertiesWithResponse(null, writeableProperties, Context.NONE));
//
//        assertThrows(NullPointerException.class, () -> client.updateTagProperties(LATEST_TAG_NAME,  null));
//        assertThrows(NullPointerException.class, () -> client.updateTagPropertiesWithResponse(LATEST_TAG_NAME,  null, Context.NONE));
//
//        assertThrows(ResourceNotFoundException.class, () -> client.updateTagProperties("unknown", writeableProperties));
//        assertThrows(ResourceNotFoundException.class, () -> client.updateTagPropertiesWithResponse("unknown", writeableProperties, Context.NONE));
//    }
}
