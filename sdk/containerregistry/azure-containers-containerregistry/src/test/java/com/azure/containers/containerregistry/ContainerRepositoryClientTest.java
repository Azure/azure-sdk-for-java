// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.models.ContentProperties;
import com.azure.containers.containerregistry.models.ListRegistryArtifactOptions;
import com.azure.containers.containerregistry.models.ListTagsOptions;
import com.azure.containers.containerregistry.models.RegistryArtifactOrderBy;
import com.azure.containers.containerregistry.models.RegistryArtifactProperties;
import com.azure.containers.containerregistry.models.RepositoryProperties;
import com.azure.containers.containerregistry.models.TagOrderBy;
import com.azure.containers.containerregistry.models.TagProperties;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import org.junit.jupiter.api.parallel.Execution;
import org.junit.jupiter.api.parallel.ExecutionMode;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import static com.azure.containers.containerregistry.TestUtils.AMD64_ARCHITECTURE;
import static com.azure.containers.containerregistry.TestUtils.ARM64_ARCHITECTURE;
import static com.azure.containers.containerregistry.TestUtils.DISPLAY_NAME_WITH_ARGUMENTS;
import static com.azure.containers.containerregistry.TestUtils.HELLOWORLD_REPOSITORY_MANIFEST_REFERENCES_COUNT;
import static com.azure.containers.containerregistry.TestUtils.HELLO_WORLD_REPOSITORY_NAME;
import static com.azure.containers.containerregistry.TestUtils.LATEST_TAG_NAME;
import static com.azure.containers.containerregistry.TestUtils.LINUX_OPERATING_SYSTEM;
import static com.azure.containers.containerregistry.TestUtils.PAGESIZE_2;
import static com.azure.containers.containerregistry.TestUtils.V1_TAG_NAME;
import static com.azure.containers.containerregistry.TestUtils.WINDOWS_OPERATING_SYSTEM;
import static com.azure.containers.containerregistry.TestUtils.isSorted;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class ContainerRepositoryClientTest extends ContainerRegistryClientsTestBase {
    private static final String UNKNOWN_REPOSITORY_NAME = "unknownrepo";

    private ContainerRepositoryClient getContainerRepositoryClient(HttpClient httpClient) {
        return getContainerRepositoryBuilder(HELLO_WORLD_REPOSITORY_NAME, httpClient).buildClient();
    }

    private ContainerRepositoryClient getContainerRepositoryClientUnknownRepo(HttpClient httpClient) {
        return getContainerRepositoryBuilder(UNKNOWN_REPOSITORY_NAME, httpClient).buildClient();
    }


    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void getRepositoryProperties(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        RepositoryProperties properties = client.getProperties();
        assertNotNull(properties);
        assertEquals(HELLO_WORLD_REPOSITORY_NAME, properties.getName());
        assertNotNull(properties.getCreatedOn());
        assertNotNull(properties.getLastUpdatedOn());
        assertNotNull(properties.getTagCount());
        assertNotNull(properties.getRegistryArtifactCount());
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void getRepositoryPropertiesWithResponse(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        Response<RepositoryProperties> response = client.getPropertiesWithResponse(Context.NONE);
        assertNotNull(response);
        assertNotNull(response.getStatusCode());
        assertNotNull(response.getRequest());

        RepositoryProperties properties = response.getValue();
        assertNotNull(properties);
        assertEquals(HELLO_WORLD_REPOSITORY_NAME, properties.getName());
        assertNotNull(properties.getCreatedOn());
        assertNotNull(properties.getLastUpdatedOn());
        assertNotNull(properties.getTagCount());
        assertNotNull(properties.getRegistryArtifactCount());
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void getRepositoryPropertiesThrows(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClientUnknownRepo(httpClient);
        assertThrows(ResourceNotFoundException.class, () -> client.getProperties());
        assertThrows(ResourceNotFoundException.class, () -> client.getPropertiesWithResponse(Context.NONE));
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    @Execution(ExecutionMode.SAME_THREAD)
    public void setRepositoryProperties(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        ContentProperties originalProps = null;
        try {
            RepositoryProperties props = client.getProperties();
            assertNotNull(props);
            originalProps = props.getWriteableProperties();

            client.setProperties(
                new ContentProperties()
                    .setCanWrite(true)
                    .setCanRead(true)
                    .setCanList(true)
                    .setCanDelete(false));

            testDelay();

            RepositoryProperties newProps = client.getProperties();
            assertNotNull(newProps);

            ContentProperties properties = newProps.getWriteableProperties();
            assertEquals(false, properties.hasCanDelete());
            assertEquals(true, properties.hasCanList());
            assertEquals(true, properties.hasCanRead());
            assertEquals(true, properties.hasCanWrite());
        } finally {
            if (originalProps != null) {
                client.setProperties(originalProps);
            }
        }
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    @Execution(ExecutionMode.SAME_THREAD)
    public void setRepositoryPropertiesWithResponse(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        ContentProperties originalProps = null;
        try {
            RepositoryProperties props = client.getProperties();
            assertNotNull(props);
            originalProps = props.getWriteableProperties();

            client.setPropertiesWithResponse(
                new ContentProperties()
                    .setCanWrite(true)
                    .setCanRead(true)
                    .setCanList(true)
                    .setCanDelete(false),
                Context.NONE);

            testDelay();

            RepositoryProperties newProps = client.getProperties();
            assertNotNull(newProps);

            ContentProperties properties = newProps.getWriteableProperties();
            assertEquals(false, properties.hasCanDelete());
            assertEquals(true, properties.hasCanList());
            assertEquals(true, properties.hasCanRead());
            assertEquals(true, properties.hasCanWrite());
        } finally {
            if (originalProps != null) {
                client.setProperties(originalProps);
            }
        }
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void setRepositoryPropertiesThrows(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClientUnknownRepo(httpClient);

        assertThrows(ResourceNotFoundException.class, () ->  client.setProperties(
            new ContentProperties()
                .setCanWrite(true)
                .setCanRead(true)
                .setCanList(true)
                .setCanDelete(false)));

        assertThrows(ResourceNotFoundException.class, () ->  client.setPropertiesWithResponse(
            new ContentProperties()
                .setCanList(false)
                .setCanDelete(false)
                .setCanRead(false)
                .setCanWrite(false),
            Context.NONE));
    }

    void validateImageProperties(RegistryArtifactProperties props, String expectedDigest) {
        assertNotNull(props);
        assertTrue(props.getRegistryArtifacts().size() >= HELLOWORLD_REPOSITORY_MANIFEST_REFERENCES_COUNT);
        assertTrue(props.getRegistryArtifacts().stream().anyMatch(a -> ARM64_ARCHITECTURE.equals(a.getCpuArchitecture())
            && LINUX_OPERATING_SYSTEM.equals(a.getOperatingSystem())));
        assertTrue(props.getRegistryArtifacts().stream().anyMatch(a -> AMD64_ARCHITECTURE.equals(a.getCpuArchitecture())
            && WINDOWS_OPERATING_SYSTEM.equals(a.getOperatingSystem())));
        assertNotNull(expectedDigest);
        assertEquals(expectedDigest, props.getDigest());
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void getMultiArchitectureImageProperties(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        RegistryArtifactProperties props = client.getRegistryArtifactProperties(LATEST_TAG_NAME);
        assertNotNull(props);
        validateImageProperties(props, props.getDigest());

        String exDigest = props.getDigest();
        props = client.getRegistryArtifactProperties(exDigest);
        validateImageProperties(props, exDigest);
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void getMultiArchitectureImagePropertiesWithResponse(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        Response<RegistryArtifactProperties> response = client.getRegistryArtifactPropertiesWithResponse(LATEST_TAG_NAME, Context.NONE);
        assertNotNull(response);
        assertNotNull(response.getStatusCode());
        assertNotNull(response.getHeaders());
        assertNotNull(response.getRequest());

        RegistryArtifactProperties props = response.getValue();
        validateImageProperties(props, props.getDigest());

        String exDigest = props.getDigest();
        response = client.getRegistryArtifactPropertiesWithResponse(exDigest, Context.NONE);
        assertNotNull(response);
        assertNotNull(response.getStatusCode());
        assertNotNull(response.getHeaders());
        assertNotNull(response.getRequest());
        validateImageProperties(props, exDigest);
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void getRegistryArtifactPropertiesThrows(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
        assertThrows(NullPointerException.class, () -> client.getRegistryArtifactProperties(null));
        assertThrows(NullPointerException.class, () -> client.getRegistryArtifactPropertiesWithResponse(null, Context.NONE));
        assertThrows(NullPointerException.class, () -> client.getRegistryArtifactPropertiesWithResponse(LATEST_TAG_NAME, null));
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    @Execution(ExecutionMode.SAME_THREAD)
    public void setManifestProperties(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        RegistryArtifactProperties orProps = null;
        String digest = null;

        try {
            TagProperties tagProps = client.getTagProperties(LATEST_TAG_NAME);
            digest = tagProps.getDigest();
            assertNotNull(digest);
            orProps = client.getRegistryArtifactProperties(digest);
            assertNotNull(orProps);

            client.setManifestProperties(
                digest,
                new ContentProperties()
                    .setCanWrite(true)
                    .setCanRead(true)
                    .setCanList(true)
                    .setCanDelete(false));

            testDelay();

            RegistryArtifactProperties acProps = client.getRegistryArtifactProperties(digest);
            assertNotNull(acProps);
            ContentProperties manifestProperties = acProps.getWriteableProperties();
            assertNotNull(manifestProperties);
            assertFalse(manifestProperties.hasCanDelete());
            assertTrue(manifestProperties.hasCanRead());
            assertTrue(manifestProperties.hasCanWrite());
            assertTrue(manifestProperties.hasCanList());
        } finally {
            if (orProps != null) {
                client.setManifestProperties(digest, orProps.getWriteableProperties());
            }
        }
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    @Execution(ExecutionMode.SAME_THREAD)
    public void setManifestPropertiesWithResponse(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        RegistryArtifactProperties orProps = null;
        String digest = null;

        try {
            TagProperties tagProps = client.getTagProperties(LATEST_TAG_NAME);
            digest = tagProps.getDigest();
            assertNotNull(digest);
            orProps = client.getRegistryArtifactProperties(digest);
            assertNotNull(orProps);

            client.setManifestPropertiesWithResponse(
                digest,
                new ContentProperties()
                    .setCanWrite(true)
                    .setCanRead(true)
                    .setCanList(true)
                    .setCanDelete(false),
                Context.NONE);

            testDelay();

            RegistryArtifactProperties acProps = client.getRegistryArtifactProperties(digest);
            assertNotNull(acProps);
            ContentProperties manifestProperties = acProps.getWriteableProperties();
            assertNotNull(manifestProperties);
            assertFalse(manifestProperties.hasCanDelete());
            assertTrue(manifestProperties.hasCanRead());
            assertTrue(manifestProperties.hasCanWrite());
            assertTrue(manifestProperties.hasCanList());
        } finally {
            if (orProps != null) {
                client.setManifestProperties(digest, orProps.getWriteableProperties());
            }
        }
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void deleteRegistryArtifactThrows(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
        assertThrows(NullPointerException.class, () -> client.deleteRegistryArtifact(null));

        TagProperties tagProps = client.getTagProperties(LATEST_TAG_NAME);
        assertThrows(NullPointerException.class, () -> client.deleteRegistryArtifactWithResponse(null, Context.NONE));
        assertThrows(NullPointerException.class, () -> client.deleteRegistryArtifactWithResponse(tagProps.getDigest(), null));

        assertThrows(HttpResponseException.class, () -> client.deleteRegistryArtifact("unknownDigest"));
        assertThrows(HttpResponseException.class, () -> client.deleteRegistryArtifactWithResponse("someValue", Context.NONE));
    }

//    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
//    @MethodSource("getHttpClients")
//    public void deleteRegistryArtifact(HttpClient httpClient) {
//        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
//
//        TagProperties tagProperties = client.getTagProperties(TAG_TO_DELETE);
//
//        Mono<RegistryArtifactProperties> testDeleteRepositoryMono = client.getTagProperties(TAG_TO_DELETE)
//            .flatMap(res -> {
//                return client.deleteRegistryArtifact(res.getDigest());
//            }).delayUntil(res -> {
//                    if (getTestMode() != TestMode.PLAYBACK) {
//                        Mono.delay(DEFAULT_MONO_DELAY);
//                    }
//
//                    return Mono.just(res);
//                }
//            ).flatMap(res -> client.getRegistryArtifactProperties(TAG_TO_DELETE));
//
//        StepVerifier.create(testDeleteRepositoryMono)
//            .expectErrorMatches(res -> {
//                return res instanceof ResourceNotFoundException;
//            }).verify();
//    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listArtifacts(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        List<RegistryArtifactProperties> artifacts = client.listRegistryArtifacts().stream().collect(Collectors.toList());
        artifacts.forEach(props -> {
            assertNotNull(props.getDigest());
        });
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listArtifactsWithPageSize(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        ArrayList<RegistryArtifactProperties> artifacts = new ArrayList<>();
        client.listRegistryArtifacts().iterableByPage(PAGESIZE_2).forEach(res -> res.getValue().forEach(repo -> artifacts.add(repo)));
        artifacts.forEach(props -> {
            assertNotNull(props.getDigest());
        });
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listArtifactsWithInvalidPageSize(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
        assertThrows(IllegalArgumentException.class, () -> client.listRegistryArtifacts().iterableByPage(-1).forEach(res -> res.getValue()));
    }


    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listArtifactsWithPageSizeAndOrderBy(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
        ListRegistryArtifactOptions options = new ListRegistryArtifactOptions().setRegistryArtifactOrderBy(RegistryArtifactOrderBy.LAST_UPDATED_ON_ASCENDING);

        ArrayList<RegistryArtifactProperties> artifacts = new ArrayList<>();
        client.listRegistryArtifacts(options).iterableByPage(PAGESIZE_2).forEach(res -> {
            assertEquals(PAGESIZE_2, res.getValue().size());
            res.getValue().forEach(repo -> artifacts.add(repo));
        });

        // Validate that the datetime is in ascending order.
        List<OffsetDateTime> lastUpdatedOn = artifacts.stream().map(artifact -> artifact.getLastUpdatedOn()).collect(Collectors.toList());
        assertTrue(isSorted(lastUpdatedOn));
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listArtifactsWithPageSizeNoOrderBy(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
        ListRegistryArtifactOptions options = new ListRegistryArtifactOptions();

        ArrayList<RegistryArtifactProperties> artifacts = new ArrayList<>();
        client.listRegistryArtifacts(options).iterableByPage(PAGESIZE_2).forEach(res -> {
            assertEquals(PAGESIZE_2, res.getValue().size());
            res.getValue().forEach(repo -> artifacts.add(repo));
        });
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listTags(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        List<TagProperties> tags = client.listTags().stream().collect(Collectors.toList());
        tags.forEach(props -> {
            assertEquals(HELLO_WORLD_REPOSITORY_NAME, props.getRepository());
        });

        tags.stream().anyMatch(tag -> V1_TAG_NAME.equals(tag.getName()));
        tags.stream().anyMatch(tag -> LATEST_TAG_NAME.equals(tag.getName()));
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listTagsWithPageSize(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        ArrayList<TagProperties> tags = new ArrayList<>();
        client.listTags().iterableByPage(PAGESIZE_2).forEach(res -> res.getValue().forEach(repo -> tags.add(repo)));
        tags.forEach(props -> {
            assertEquals(HELLO_WORLD_REPOSITORY_NAME, props.getRepository());
        });

        tags.stream().anyMatch(tag -> V1_TAG_NAME.equals(tag.getName()));
        tags.stream().anyMatch(tag -> LATEST_TAG_NAME.equals(tag.getName()));
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listTagsWithInvalidPageSize(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
        assertThrows(IllegalArgumentException.class, () -> client.listRegistryArtifacts().iterableByPage(-1).forEach(res -> res.getValue()));
    }


    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listTagsWithPageSizeAndOrderBy(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
        ListTagsOptions options = new ListTagsOptions().setTagOrderBy(TagOrderBy.LAST_UPDATED_ON_ASCENDING);

        ArrayList<TagProperties> tags = new ArrayList<>();
        client.listTags(options).iterableByPage(PAGESIZE_2).forEach(res -> {
            assertTrue(res.getValue().size() <= 2);
            res.getValue().forEach(repo -> tags.add(repo));
        });

        // Validate that the datetime is in ascending order.
        List<OffsetDateTime> lastUpdatedOn = tags.stream().map(tag -> tag.getLastUpdatedOn()).collect(Collectors.toList());
        assertTrue(isSorted(lastUpdatedOn));
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listTagsWithPageSizeNoOrderBy(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
        ListTagsOptions options = new ListTagsOptions();

        ArrayList<TagProperties> tags = new ArrayList<>();
        client.listTags(options).iterableByPage(PAGESIZE_2).forEach(res -> {
            assertTrue(res.getValue().size() <= 2);
            res.getValue().forEach(repo -> tags.add(repo));
        });

        tags.stream().anyMatch(tag -> V1_TAG_NAME.equals(tag.getName()));
        tags.stream().anyMatch(tag -> LATEST_TAG_NAME.equals(tag.getName()));
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void getTagProperties(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        TagProperties tagProps = client.getTagProperties(LATEST_TAG_NAME);
        assertNotNull(tagProps);
        assertEquals(HELLO_WORLD_REPOSITORY_NAME, tagProps.getRepository());
        assertEquals(LATEST_TAG_NAME, tagProps.getName());
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void getTagPropertiesWithResponse(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        Response<TagProperties> response = client.getTagPropertiesWithResponse(LATEST_TAG_NAME, Context.NONE);
        assertNotNull(response);
        assertNotNull(response.getStatusCode());
        assertNotNull(response.getHeaders());
        assertNotNull(response.getRequest());
        assertNotNull(response.getValue());

        TagProperties props = response.getValue();
        assertEquals(HELLO_WORLD_REPOSITORY_NAME, props.getRepository());
        assertEquals(LATEST_TAG_NAME, props.getName());
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void getTagPropertiesThrows(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        assertThrows(NullPointerException.class, () -> client.getTagProperties(null));
        assertThrows(NullPointerException.class, () -> client.getTagPropertiesWithResponse(LATEST_TAG_NAME, null));

        assertThrows(ResourceNotFoundException.class, () -> client.getTagProperties("unknown"));
        assertThrows(ResourceNotFoundException.class, () -> client.getTagPropertiesWithResponse("unknown", Context.NONE));
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    @Execution(ExecutionMode.SAME_THREAD)
    public void setTagProperties(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        ContentProperties orProps = null;
        try {

            TagProperties props = client.getTagProperties(LATEST_TAG_NAME);
            assertNotNull(props);
            orProps = props.getWriteableProperties();

            client.setTagProperties(
                LATEST_TAG_NAME,
                new ContentProperties()
                    .setCanWrite(true)
                    .setCanRead(true)
                    .setCanList(true)
                    .setCanDelete(false));

            testDelay();

            TagProperties acProps = client.getTagProperties(LATEST_TAG_NAME);
            ContentProperties properties = acProps.getWriteableProperties();
            assertNotNull(properties);
            assertFalse(properties.hasCanDelete());
            assertTrue(properties.hasCanRead());
            assertTrue(properties.hasCanWrite());
            assertTrue(properties.hasCanList());

        } finally {
            if (orProps != null) {
                client.setTagProperties(LATEST_TAG_NAME, orProps);
            }
        }
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    @Execution(ExecutionMode.SAME_THREAD)
    public void setTagPropertiesWithResponse(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        ContentProperties orProps = null;
        try {

            TagProperties props = client.getTagProperties(LATEST_TAG_NAME);
            assertNotNull(props);
            orProps = props.getWriteableProperties();

            client.setTagPropertiesWithResponse(
                LATEST_TAG_NAME,
                new ContentProperties()
                    .setCanWrite(true)
                    .setCanRead(true)
                    .setCanList(true)
                    .setCanDelete(false),
                Context.NONE);
            testDelay();

            TagProperties acProps = client.getTagProperties(LATEST_TAG_NAME);

            ContentProperties properties = acProps.getWriteableProperties();
            assertNotNull(properties);
            assertFalse(properties.hasCanDelete());
            assertTrue(properties.hasCanRead());
            assertTrue(properties.hasCanWrite());
            assertTrue(properties.hasCanList());

        } finally {
            if (orProps != null) {
                client.setTagProperties(LATEST_TAG_NAME, orProps);
            }
        }
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void setTagPropertiesThrows(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        assertThrows(NullPointerException.class, () -> client.setTagProperties(null,  new ContentProperties()
            .setCanWrite(false)
            .setCanRead(false)
            .setCanList(false)
            .setCanDelete(false)));

        assertThrows(NullPointerException.class, () -> client.setTagPropertiesWithResponse(null,  new ContentProperties()
            .setCanWrite(false)
            .setCanRead(false)
            .setCanList(false)
            .setCanDelete(false),
            Context.NONE));

        assertThrows(NullPointerException.class, () -> client.setTagProperties(LATEST_TAG_NAME,  null));
        assertThrows(NullPointerException.class, () -> client.setTagPropertiesWithResponse(LATEST_TAG_NAME,  null, Context.NONE));

        assertThrows(ResourceNotFoundException.class, () -> client.setTagProperties("unknown",  new ContentProperties()
            .setCanWrite(false)
            .setCanRead(false)
            .setCanList(false)
            .setCanDelete(false)));

        assertThrows(ResourceNotFoundException.class, () -> client.setTagPropertiesWithResponse("unknown",  new ContentProperties()
                .setCanWrite(false)
                .setCanRead(false)
                .setCanList(false)
                .setCanDelete(false),
            Context.NONE));
    }
}
