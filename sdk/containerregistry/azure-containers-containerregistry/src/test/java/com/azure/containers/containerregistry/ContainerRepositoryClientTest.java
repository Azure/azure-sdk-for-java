// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.models.ListRegistryArtifactOptions;
import com.azure.containers.containerregistry.models.ListTagsOptions;
import com.azure.containers.containerregistry.models.RegistryArtifactOrderBy;
import com.azure.containers.containerregistry.models.RegistryArtifactProperties;
import com.azure.containers.containerregistry.models.RepositoryProperties;
import com.azure.containers.containerregistry.models.TagOrderBy;
import com.azure.containers.containerregistry.models.TagProperties;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import static com.azure.containers.containerregistry.TestUtils.DISPLAY_NAME_WITH_ARGUMENTS;
import static com.azure.containers.containerregistry.TestUtils.HELLO_WORLD_REPOSITORY_NAME;
import static com.azure.containers.containerregistry.TestUtils.LATEST_TAG_NAME;
import static com.azure.containers.containerregistry.TestUtils.LIBRARY_BUSYBOX_NAME;
import static com.azure.containers.containerregistry.TestUtils.PAGESIZE_2;
import static com.azure.containers.containerregistry.TestUtils.isSorted;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class ContainerRepositoryClientTest extends ContainerRegistryClientsTestBase {
    private static final String UNKNOWN_REPOSITORY_NAME = "unknownrepo";

    private ContainerRepositoryClient getContainerRepositoryClient(HttpClient httpClient) {
        return getContainerRepositoryBuilder(HELLO_WORLD_REPOSITORY_NAME, httpClient).buildClient();
    }

    private ContainerRepositoryClient getContainerRepositoryWritableClient(HttpClient httpClient) {
        return getContainerRepositoryBuilder(LIBRARY_BUSYBOX_NAME, httpClient).buildClient();
    }

    private ContainerRepositoryClient getContainerRepositoryClientUnknownRepo(HttpClient httpClient) {
        return getContainerRepositoryBuilder(UNKNOWN_REPOSITORY_NAME, httpClient).buildClient();
    }


    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void getRepositoryProperties(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
        RepositoryProperties properties = client.getProperties();
        validateProperties(properties);
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void getRepositoryPropertiesWithResponse(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        Response<RepositoryProperties> response = client.getPropertiesWithResponse(Context.NONE);
        validateResponse(response);
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void getRepositoryPropertiesThrows(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClientUnknownRepo(httpClient);
        assertThrows(ResourceNotFoundException.class, () -> client.getProperties());
        assertThrows(ResourceNotFoundException.class, () -> client.getPropertiesWithResponse(Context.NONE));
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void setRepositoryPropertiesThrows(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClientUnknownRepo(httpClient);

        assertThrows(ResourceNotFoundException.class, () ->  client.setProperties(writeableProperties));
        assertThrows(ResourceNotFoundException.class, () ->  client.setPropertiesWithResponse(writeableProperties, Context.NONE));
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void getMultiArchitectureImageProperties(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        // 1. Getting manifest properties from a tag works.
        RegistryArtifactProperties props = client.getRegistryArtifactProperties(LATEST_TAG_NAME);
        validateArtifactProperties(props, true, false);

        String digest = props.getDigest();
        props = client.getRegistryArtifactProperties(digest);
        validateArtifactProperties(props, true, false);

        //2. Try to get the child manifest.
        List<RegistryArtifactProperties> repositories = client.listRegistryArtifacts().stream().collect(Collectors.toList());
        String childDigest = getChildArtifactDigest(repositories);
        props = client.getRegistryArtifactProperties(childDigest);
        validateArtifactProperties(props, false, true);
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void getMultiArchitectureImagePropertiesWithResponse(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        // 1. Getting manifest properties from a tag works.
        Response<RegistryArtifactProperties> response = client.getRegistryArtifactPropertiesWithResponse(LATEST_TAG_NAME, Context.NONE);
        validateArtifactProperties(response, true, false);

        String digest = response.getValue().getDigest();
        response = client.getRegistryArtifactPropertiesWithResponse(digest, Context.NONE);
        validateArtifactProperties(response, true, false);

        //2. Try to get the child manifest.
        List<RegistryArtifactProperties> repositories = client.listRegistryArtifacts().stream().collect(Collectors.toList());
        String childDigest = getChildArtifactDigest(repositories);
        response = client.getRegistryArtifactPropertiesWithResponse(childDigest, Context.NONE);
        validateArtifactProperties(response, false, true);
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void getRegistryArtifactPropertiesThrows(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
        assertThrows(NullPointerException.class, () -> client.getRegistryArtifactProperties(null));
        assertThrows(NullPointerException.class, () -> client.getRegistryArtifactPropertiesWithResponse(null, Context.NONE));
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void deleteRegistryArtifactThrows(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
        assertThrows(NullPointerException.class, () -> client.deleteRegistryArtifact(null));

        String digest = "some:digest";
        assertThrows(NullPointerException.class, () -> client.deleteRegistryArtifactWithResponse(null, Context.NONE));

        assertThrows(HttpResponseException.class, () -> client.deleteRegistryArtifact("unknownDigest"));
        assertThrows(HttpResponseException.class, () -> client.deleteRegistryArtifactWithResponse("someValue", Context.NONE));
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void setManifestPropertiesThrows(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
        assertThrows(NullPointerException.class, () -> client.setManifestProperties(null, writeableProperties));
        assertThrows(NullPointerException.class, () -> client.setManifestProperties("unknownTag", null));
        assertThrows(ResourceNotFoundException.class, () -> client.setManifestProperties("unknownTag", writeableProperties));
    }


    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listArtifacts(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        RepositoryProperties registryProps = client.getProperties();

        List<RegistryArtifactProperties> artifacts = client.listRegistryArtifacts().stream().collect(Collectors.toList());
        validateListArtifacts(artifacts);
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listArtifactsWithPageSize(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        ArrayList<RegistryArtifactProperties> artifacts = new ArrayList<>();
        client.listRegistryArtifacts().iterableByPage(PAGESIZE_2).forEach(res -> res.getValue().forEach(repo -> artifacts.add(repo)));
        validateListArtifacts(artifacts);
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listArtifactsWithPageSizeAndOrderBy(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
        ListRegistryArtifactOptions options = new ListRegistryArtifactOptions().setRegistryArtifactOrderBy(RegistryArtifactOrderBy.LAST_UPDATED_ON_ASCENDING);

        ArrayList<RegistryArtifactProperties> artifacts = new ArrayList<>();
        client.listRegistryArtifacts(options).iterableByPage(PAGESIZE_2).forEach(res -> {
            assertEquals(PAGESIZE_2, res.getValue().size());
            res.getValue().forEach(repo -> artifacts.add(repo));
        });

        validateListArtifacts(artifacts);

        // Validate that the datetime is in ascending order.
        List<OffsetDateTime> lastUpdatedOn = artifacts.stream().map(artifact -> artifact.getLastUpdatedOn()).collect(Collectors.toList());
        assertTrue(isSorted(lastUpdatedOn));
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listArtifactsWithPageSizeNoOrderBy(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
        ListRegistryArtifactOptions options = new ListRegistryArtifactOptions();

        ArrayList<RegistryArtifactProperties> artifacts = new ArrayList<>();
        client.listRegistryArtifacts(options).iterableByPage(PAGESIZE_2).forEach(res -> {
            assertEquals(PAGESIZE_2, res.getValue().size());
            res.getValue().forEach(repo -> artifacts.add(repo));
        });

        validateListArtifacts(artifacts);
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listTags(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        List<TagProperties> tags = client.listTags().stream().collect(Collectors.toList());
        validateListTags(tags);
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listTagsWithPageSize(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        ArrayList<TagProperties> tags = new ArrayList<>();
        client.listTags().iterableByPage(PAGESIZE_2).forEach(res -> res.getValue().forEach(repo -> tags.add(repo)));
        validateListTags(tags);
    }


    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listTagsWithPageSizeAndOrderBy(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
        ListTagsOptions options = new ListTagsOptions().setTagOrderBy(TagOrderBy.LAST_UPDATED_ON_ASCENDING);

        ArrayList<TagProperties> tags = new ArrayList<>();
        client.listTags(options).iterableByPage(PAGESIZE_2).forEach(res -> {
            assertTrue(res.getValue().size() <= 2);
            res.getValue().forEach(repo -> tags.add(repo));
        });

        validateListTags(tags);

        // Validate that the datetime is in ascending order.
        List<OffsetDateTime> lastUpdatedOn = tags.stream().map(tag -> tag.getLastUpdatedOn()).collect(Collectors.toList());
        assertTrue(isSorted(lastUpdatedOn));
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listTagsWithPageSizeNoOrderBy(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
        ListTagsOptions options = new ListTagsOptions();

        ArrayList<TagProperties> tags = new ArrayList<>();
        client.listTags(options).iterableByPage(PAGESIZE_2).forEach(res -> {
            assertTrue(res.getValue().size() <= 2);
            res.getValue().forEach(repo -> tags.add(repo));
        });

        validateListTags(tags);
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void getTagProperties(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        TagProperties tagProps = client.getTagProperties(LATEST_TAG_NAME);
        validateTagProperties(tagProps, LATEST_TAG_NAME);
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void getTagPropertiesWithResponse(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        Response<TagProperties> response = client.getTagPropertiesWithResponse(LATEST_TAG_NAME, Context.NONE);
        validateTagProperties(response, LATEST_TAG_NAME);
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void getTagPropertiesThrows(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        assertThrows(NullPointerException.class, () -> client.getTagProperties(null));

        assertThrows(ResourceNotFoundException.class, () -> client.getTagProperties("unknown"));
        assertThrows(ResourceNotFoundException.class, () -> client.getTagPropertiesWithResponse("unknown", Context.NONE));
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void setTagPropertiesThrows(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        assertThrows(NullPointerException.class, () -> client.setTagProperties(null, writeableProperties));

        assertThrows(NullPointerException.class, () -> client.setTagPropertiesWithResponse(null, writeableProperties, Context.NONE));

        assertThrows(NullPointerException.class, () -> client.setTagProperties(LATEST_TAG_NAME,  null));
        assertThrows(NullPointerException.class, () -> client.setTagPropertiesWithResponse(LATEST_TAG_NAME,  null, Context.NONE));

        assertThrows(ResourceNotFoundException.class, () -> client.setTagProperties("unknown", writeableProperties));
        assertThrows(ResourceNotFoundException.class, () -> client.setTagPropertiesWithResponse("unknown", writeableProperties, Context.NONE));
    }
}
