// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.models.DeleteRepositoryResult;
import com.azure.containers.containerregistry.models.RegistryArtifactProperties;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import org.junit.jupiter.api.Test;

import java.util.List;
import java.util.stream.Collectors;

import static com.azure.containers.containerregistry.TestUtils.DIGEST_UNKNOWN;
import static com.azure.containers.containerregistry.TestUtils.HELLO_WORLD_SEATTLE_REPOSITORY_NAME;
import static com.azure.containers.containerregistry.TestUtils.TAG_TO_DELETE;
import static com.azure.containers.containerregistry.TestUtils.TAG_TO_UPDATE;
import static com.azure.containers.containerregistry.TestUtils.TAG_UNKNOWN;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class ContainerRepositoryUpdateTests extends ContainerRegistryClientsTestBase {
    private String recordFileName;
    private static final String PARENT_FILENAME = "ContainerRepositoryAsyncClientUpdateIntegrationTests.";
    private ContainerRepositoryClient client;

    private ContainerRepositoryClient getContainerRepositoryClient() {
        return getContainerRepositoryBuilder(HELLO_WORLD_SEATTLE_REPOSITORY_NAME, new LocalHttpClient(recordFileName)).buildClient();
    }

    private ContainerRepositoryClient getUnknownContainerRepositoryClient() {
        return getContainerRepositoryBuilder(TAG_UNKNOWN, new LocalHttpClient(recordFileName)).buildClient();
    }

    private ContainerRegistryClient getContainerRegistryClient() {
        return getContainerRegistryBuilder(new LocalHttpClient(recordFileName)).buildClient();
    }

    @Test
    public void setRepositoryProperties() {
        recordFileName = PARENT_FILENAME + "setRepositoryPropertiesWithResponse[1].json";
        ContainerRepositoryClient client = getContainerRepositoryClient();

        client.updateProperties(writeableProperties);
        testDelay();
        validateContentProperties(client.getProperties().getWriteableProperties());
    }

    @Test
    public void setRepositoryPropertiesWithResponse() {
        recordFileName = PARENT_FILENAME + "setRepositoryPropertiesWithResponse[1].json";
        ContainerRepositoryClient client = getContainerRepositoryClient();

        client.updatePropertiesWithResponse(writeableProperties, Context.NONE);
        validateContentProperties(client.getProperties().getWriteableProperties());
    }

    @Test
    public void setRepositoryPropertiesThrows() {
        recordFileName = PARENT_FILENAME + "setRepositoryPropertiesThrowsWithResponse[1].json";
        client = getUnknownContainerRepositoryClient();

        assertThrows(NullPointerException.class, () -> client.updateProperties(null));
        assertThrows(NullPointerException.class, () -> client.updatePropertiesWithResponse(null, Context.NONE));
        assertThrows(ResourceNotFoundException.class, () -> client.updatePropertiesWithResponse(defaultProperties, Context.NONE));
    }


    @Test
    public void setManifestProperties() {
        recordFileName = PARENT_FILENAME + "setManifestPropertiesWithResponse[1].json";
        ContainerRepositoryClient client = getContainerRepositoryClient();

        List<RegistryArtifactProperties> repositories = client.listRegistryArtifacts().stream().collect(Collectors.toList());
        String digest = getChildArtifactDigest(repositories);
        client.updateManifestProperties(digest, writeableProperties);
        RegistryArtifactProperties acProps = client.getRegistryArtifactProperties(digest);
        assertNotNull(acProps);
        validateContentProperties(acProps.getWriteableProperties());
    }

    @Test
    public void setManifestPropertiesWithResponse() {
        recordFileName = PARENT_FILENAME + "setManifestPropertiesWithResponse[1].json";
        ContainerRepositoryClient client = getContainerRepositoryClient();

        List<RegistryArtifactProperties> repositories = client.listRegistryArtifacts().stream().collect(Collectors.toList());
        String digest = getChildArtifactDigest(repositories);
        client.updateManifestPropertiesWithResponse(digest, writeableProperties, Context.NONE);
        RegistryArtifactProperties acProps = client.getRegistryArtifactProperties(digest);
        assertNotNull(acProps);
        validateContentProperties(acProps.getWriteableProperties());
    }

    @Test
    public void setManifestPropertiesThrows() {
        recordFileName = PARENT_FILENAME + "setManifestPropertiesThrowsWithResponse[1].json";
        client = getContainerRepositoryClient();

        assertThrows(NullPointerException.class, () -> client.updateManifestProperties(null, writeableProperties));
        assertThrows(NullPointerException.class, () -> client.updateManifestProperties(DIGEST_UNKNOWN, null));
        assertThrows(NullPointerException.class, () -> client.updateManifestPropertiesWithResponse(null, writeableProperties, Context.NONE));
        assertThrows(NullPointerException.class, () -> client.updateManifestPropertiesWithResponse(DIGEST_UNKNOWN, null, Context.NONE));

        assertThrows(ResourceNotFoundException.class, () -> client.updateManifestProperties(DIGEST_UNKNOWN, writeableProperties));
        assertThrows(ResourceNotFoundException.class, () -> client.updateManifestPropertiesWithResponse(DIGEST_UNKNOWN, writeableProperties, Context.NONE));
    }

    @Test
    public void deleteRegistryArtifact() {
        recordFileName = PARENT_FILENAME + "deleteRegistryArtifactWithResponse[1].json";
        client = getContainerRepositoryClient();

        PagedIterable<RegistryArtifactProperties> props = client.listRegistryArtifacts();
        List<RegistryArtifactProperties> repositories = props.stream().collect(Collectors.toList());
        String digest = getChildArtifactDigest(repositories);
        client.deleteRegistryArtifact(digest);
        assertThrows(ResourceNotFoundException.class, () -> client.getRegistryArtifactProperties(digest));
    }

    @Test
    public void deleteRegistryArtifactWithResponse() {
        recordFileName = "ContainerRepositoryAsyncClientUpdateIntegrationTests.deleteRegistryArtifactWithResponse[1].json";
        client = getContainerRepositoryClient();

        PagedIterable<RegistryArtifactProperties> props = client.listRegistryArtifacts();
        List<RegistryArtifactProperties> repositories = props.stream().collect(Collectors.toList());
        String digest = getChildArtifactDigest(repositories);
        client.deleteRegistryArtifactWithResponse(digest, Context.NONE);
        assertThrows(ResourceNotFoundException.class, () -> client.getRegistryArtifactProperties(digest));
    }

    @Test
    public void deleteRegistryArtifactThrows() {
        recordFileName = PARENT_FILENAME + "deleteRegistryArtifactThrowsWithResponse[1].json";
        client = getContainerRepositoryClient();

        assertThrows(NullPointerException.class, () -> client.deleteRegistryArtifact(null));
        assertThrows(NullPointerException.class, () -> client.deleteRegistryArtifactWithResponse(null, Context.NONE));
        assertThrows(ResourceNotFoundException.class, () -> client.deleteRegistryArtifact(DIGEST_UNKNOWN));
        assertThrows(ResourceNotFoundException.class, () -> client.deleteRegistryArtifactWithResponse(DIGEST_UNKNOWN, Context.NONE));
    }

    @Test
    public void setTagProperties() {
        recordFileName = PARENT_FILENAME + "setTagPropertiesWithResponse[1].json";
        client = getContainerRepositoryClient();

        client.updateTagProperties(TAG_TO_UPDATE, writeableProperties);
        validateContentProperties(client.getTagProperties(TAG_TO_UPDATE).getWriteableProperties());
    }

    @Test
    public void setTagPropertiesWithResponse() {
        recordFileName = PARENT_FILENAME + "setTagPropertiesWithResponse[1].json";
        client = getContainerRepositoryClient();

        client.updateTagPropertiesWithResponse(TAG_TO_UPDATE, writeableProperties, Context.NONE);
        validateContentProperties(client.getTagProperties(TAG_TO_UPDATE).getWriteableProperties());
    }

    @Test
    public void setTagPropertiesThrows() {
        recordFileName = PARENT_FILENAME + "setTagPropertiesThrowsWithResponse[1].json";
        client = getContainerRepositoryClient();

        assertThrows(NullPointerException.class, () -> client.updateTagProperties(null, defaultProperties));
        assertThrows(NullPointerException.class, () -> client.updateTagPropertiesWithResponse(null, defaultProperties, Context.NONE));
        assertThrows(ResourceNotFoundException.class, () -> client.updateTagProperties(TAG_UNKNOWN, defaultProperties));
        assertThrows(ResourceNotFoundException.class, () -> client.updateTagPropertiesWithResponse(TAG_UNKNOWN, defaultProperties, Context.NONE));
    }

    @Test
    public void deleteTag() {
        recordFileName = PARENT_FILENAME + "deleteTagWithResponse[1].json";
        client = getContainerRepositoryClient();

        client.deleteTag(TAG_TO_DELETE);
        assertThrows(ResourceNotFoundException.class, () -> client.getTagProperties(TAG_TO_DELETE));
    }

    @Test
    public void deleteTagWithResponse() {
        recordFileName = PARENT_FILENAME + "deleteTagWithResponse[1].json";
        client = getContainerRepositoryClient();

        client.deleteTagWithResponse(TAG_TO_DELETE, Context.NONE);
        assertThrows(ResourceNotFoundException.class, () -> client.getTagProperties(TAG_TO_DELETE));
    }

    @Test
    public void deleteTagThrows() {
        recordFileName = PARENT_FILENAME + "deleteTagThrowsWithResponse[1].json";
        client = getContainerRepositoryClient();

        assertThrows(NullPointerException.class, () -> client.deleteTag(null));
        assertThrows(NullPointerException.class, () -> client.deleteTagWithResponse(null, Context.NONE));
        assertThrows(ResourceNotFoundException.class, () -> client.deleteTag(TAG_UNKNOWN));
        assertThrows(ResourceNotFoundException.class, () -> client.deleteTagWithResponse(TAG_UNKNOWN, Context.NONE));
    }

    @Test
    public void deleteRepository() {
        recordFileName = PARENT_FILENAME + "deleteRepositoryWithResponse[1].json";
        client = getContainerRepositoryClient();

        DeleteRepositoryResult deletedRepo = client.delete();
        validateDeletedRepositoryResponse(deletedRepo);
    }

    @Test
    public void deleteRepositoryWithResponse() {
        recordFileName = PARENT_FILENAME + "deleteRepositoryWithResponse[1].json";
        client = getContainerRepositoryClient();

        Response<DeleteRepositoryResult> deletedRepo = client.deleteWithResponse(Context.NONE);
        validateDeletedRepositoryResponse(deletedRepo);
    }

    @Test
    public void deleteRepositoryThrows() {
        recordFileName = PARENT_FILENAME + "deleteRepositoryThrowsWithResponse[1].json";
        client = getUnknownContainerRepositoryClient();

        assertThrows(ResourceNotFoundException.class, () -> client.delete());
        assertThrows(ResourceNotFoundException.class, () -> client.deleteWithResponse(Context.NONE));
    }
}
