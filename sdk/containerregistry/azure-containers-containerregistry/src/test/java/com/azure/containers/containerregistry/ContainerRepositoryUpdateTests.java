// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.models.DeleteRepositoryResult;
import com.azure.containers.containerregistry.models.RegistryArtifactProperties;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpClient;
import com.azure.core.http.netty.NettyAsyncHttpClientBuilder;
import com.azure.core.test.TestMode;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.parallel.Execution;
import org.junit.jupiter.api.parallel.ExecutionMode;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import static com.azure.containers.containerregistry.TestUtils.DISPLAY_NAME_WITH_ARGUMENTS;
import static com.azure.containers.containerregistry.TestUtils.LIBRARY_BUSYBOX_NAME;
import static com.azure.containers.containerregistry.TestUtils.TAG_TO_DELETE;
import static com.azure.containers.containerregistry.TestUtils.TAG_TO_UPDATE;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

@Execution(ExecutionMode.SAME_THREAD)
public class ContainerRepositoryUpdateTests extends ContainerRegistryClientsTestBase {

    private ContainerRepositoryClient getContainerRepositoryClient(HttpClient httpClient) {
        return getContainerRepositoryBuilder(LIBRARY_BUSYBOX_NAME, httpClient).buildClient();
    }

    private ContainerRegistryClient getContainerRegistryClient(HttpClient httpClient) {
        return getContainerRegistryBuilder(httpClient).buildClient();
    }

    private boolean resetTag;
    private boolean resetRepository;
    private String digest;

    @BeforeEach
    public void setup() {
        resetTag = false;
        digest = null;
        importImage(LIBRARY_BUSYBOX_NAME, Arrays.asList(TAG_TO_UPDATE, TAG_TO_DELETE));
    }

    @AfterEach
    public void cleanup() {
        ContainerRepositoryClient client = getContainerRepositoryClient(new NettyAsyncHttpClientBuilder().build());

        if (getTestMode() != TestMode.PLAYBACK) {

            if (digest != null) {
                client.setManifestProperties(digest, defaultProperties);
            }

            if (resetTag) {
                client.setTagProperties(TAG_TO_UPDATE, defaultProperties);
            }

            if (resetRepository) {
                client.setProperties(defaultProperties);
            }
        }
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void setRepositoryProperties(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
        resetRepository = true;

        client.setProperties(writeableProperties);
        testDelay();
        validateContentProperties(client.getProperties().getWriteableProperties());
    }

//    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
//    @MethodSource("getHttpClients")
//    public void setRepositoryPropertiesWithResponse(HttpClient httpClient) {
//        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
//        resetRepository = true;
//        client.setPropertiesWithResponse(writeableProperties, Context.NONE);
//        testDelay();
//        validateContentProperties(client.getProperties().getWriteableProperties());
//    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void setManifestProperties(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);

        List<RegistryArtifactProperties> repositories = client.listRegistryArtifacts().stream().collect(Collectors.toList());
        digest = getChildArtifactDigest(repositories);
        client.setManifestProperties(digest, writeableProperties);
        testDelay();
        RegistryArtifactProperties acProps = client.getRegistryArtifactProperties(digest);
        assertNotNull(acProps);
        validateContentProperties(acProps.getWriteableProperties());
    }

//    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
//    @MethodSource("getHttpClients")
//    public void setManifestPropertiesWithResponse(HttpClient httpClient) {
//        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
//
//        digest = digests.get(1);
//        client.setManifestPropertiesWithResponse(digest, writeableProperties, Context.NONE);
//        testDelay();
//        RegistryArtifactProperties acProps = client.getRegistryArtifactProperties(digest);
//        assertNotNull(acProps);
//        validateContentProperties(acProps.getWriteableProperties());
//    }

//    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
//    @MethodSource("getHttpClients")
//    public void deleteRegistryArtifact(HttpClient httpClient) {
//        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
//
//        TagProperties props = client.getTagProperties(TAG_TO_UPDATE);
//        props.getDigest()
//        //1. Delete the child artifact.
//        List<RegistryArtifactProperties> repositories = client.listRegistryArtifacts().stream().collect(Collectors.toList());
//        digest = getChildArtifactDigest(repositories);
//        client.deleteRegistryArtifact(digest);
//
//        testDelay();
//        assertThrows(ResourceNotFoundException.class, () -> client.getRegistryArtifactProperties(digest));
//    }

//    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
//    @MethodSource("getHttpClients")
//    public void deleteRegistryArtifactWithResponse(HttpClient httpClient) {
//        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
//
//        //1. Delete the child artifact.
//        String digest = digests.get(2);
//        client.deleteRegistryArtifactWithResponse(digest, Context.NONE);
//
//        testDelay();
//        assertThrows(ResourceNotFoundException.class, () -> client.getRegistryArtifactProperties(digest));
//    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void setTagProperties(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
        resetTag = true;
        client.setTagProperties(TAG_TO_UPDATE, writeableProperties);
        testDelay();
        validateContentProperties(client.getTagProperties(TAG_TO_UPDATE).getWriteableProperties());
    }

//    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
//    @MethodSource("getHttpClients")
//    public void setTagPropertiesWithResponse(HttpClient httpClient) {
//        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
//        resetTag = true;
//
//        client.setTagPropertiesWithResponse(TAG_TO_UPDATE, writeableProperties, Context.NONE);
//        testDelay();
//        validateContentProperties(client.getTagProperties(TAG_TO_UPDATE).getWriteableProperties());
//    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void deleteTag(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
        client.deleteTag(TAG_TO_DELETE);
        testDelay();
        assertThrows(ResourceNotFoundException.class, () -> client.getTagProperties(TAG_TO_DELETE));
    }

//    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
//    @MethodSource("getHttpClients")
//    public void deleteTagWithResponse(HttpClient httpClient) {
//        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
//        client.deleteTagWithResponse(TAG_TO_DELETE, Context.NONE);
//        testDelay();
//        assertThrows(ResourceNotFoundException.class, () -> client.getTagProperties(TAG_TO_DELETE));
//    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void deleteRepository(HttpClient httpClient) {
        ContainerRepositoryClient client = getContainerRepositoryClient(httpClient);
        DeleteRepositoryResult deletedRepo = client.delete();
        validateDeletedRepositoryResponse(deletedRepo);
        testDelay();
        assertThrows(ResourceNotFoundException.class, () -> client.getProperties());
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void deleteRepositoriesViaParent(HttpClient httpClient) {
        ContainerRegistryClient client = getContainerRegistryClient(httpClient);
        ContainerRepositoryClient repoClient = client.getRepositoryClient(LIBRARY_BUSYBOX_NAME);

        DeleteRepositoryResult deletedRepo = client.deleteRepository(LIBRARY_BUSYBOX_NAME);
        validateDeletedRepositoryResponse(deletedRepo);
        testDelay();

        assertThrows(ResourceNotFoundException.class, () -> repoClient.getProperties());
    }

    // What is the prescribed way of running delete test scenarios.
//    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
//    @MethodSource("getHttpClients")
//    public void deleteRepositoriesWithResponseViaParent(HttpClient httpClient) {
//        ContainerRegistryClient client = getContainerRegistryClient(httpClient);
//        ContainerRepositoryClient repoClient = client.getRepositoryClient(LIBRARY_BUSYBOX_NAME);
//        RepositoryProperties props = repoClient.getProperties();
//
//        Response<DeleteRepositoryResult> deletedRepo = client.deleteRepositoryWithResponse(LIBRARY_BUSYBOX_NAME, Context.NONE);
//        validateDeletedRepositoryResponse(deletedRepo.getValue(), props.getRegistryArtifactCount(), props.getTagCount());
//        testDelay();
//
//        assertThrows(ResourceNotFoundException.class, () -> repoClient.getProperties());
//    }
}
