// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.core.credential.AccessToken;
import com.azure.core.credential.TokenCredential;
import com.azure.core.credential.TokenRequestContext;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.TestMode;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.resourcemanager.containerregistry.ContainerRegistryManager;
import com.azure.resourcemanager.containerregistry.models.ImportImageParameters;
import com.azure.resourcemanager.containerregistry.models.ImportMode;
import com.azure.resourcemanager.containerregistry.models.ImportSource;
import reactor.core.publisher.Mono;

import java.time.OffsetDateTime;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;

public class TestUtils {
    public static final String DISPLAY_NAME_WITH_ARGUMENTS = "{displayName} with [{arguments}]";
    private static final Configuration CONFIGURATION;
    public static final String ALPINE_REPOSITORY_NAME;
    public static final String HELLO_WORLD_REPOSITORY_NAME;
    public static final String HELLO_WORLD_SEATTLE_REPOSITORY_NAME;
    public static final String LATEST_TAG_NAME;
    public static final String V1_TAG_NAME;
    public static final String V2_TAG_NAME;
    public static final String V4_TAG_NAME;
    public static final String V3_TAG_NAME;
    public static final String TAG_TO_DELETE;
    public static final String TAG_TO_UPDATE;
    public static final String TAG_UNKNOWN;
    public static final String DIGEST_UNKNOWN;
    public static final int  PAGESIZE_2;
    public static final int  PAGESIZE_1;
    public static final String ARM64_ARCHITECTURE;
    public static final String LINUX_OPERATING_SYSTEM;
    public static final String AMD64_ARCHITECTURE;
    public static final String WINDOWS_OPERATING_SYSTEM;
    public static final String REGISTRY_NAME;
    public static final String RESOURCE_GROUP;
    public static final String SUBSCRIPTION_ID;
    public static final String REGISTRY_URI;
    public static final String REGISTRY_ENDPOINT;
    public static final String ANONYMOUS_REGISTRY_ENDPOINT;
    public static final long SLEEP_TIME_IN_MILLISECONDS;
    public static final String ANONYMOUS_REGISTRY_NAME;
    public static final String LOGIN_SERVER_SUFFIX;
    public static final String REGISTRY_ENDPOINT_PLAYBACK;

    static {
        CONFIGURATION = Configuration.getGlobalConfiguration().clone();
        ALPINE_REPOSITORY_NAME = "library/alpine";
        HELLO_WORLD_REPOSITORY_NAME = "library/hello-world";
        HELLO_WORLD_SEATTLE_REPOSITORY_NAME = "library/hello-seattle";
        LATEST_TAG_NAME = "latest";
        V1_TAG_NAME = "v1";
        V2_TAG_NAME = "v2";
        V4_TAG_NAME = "v4";
        V3_TAG_NAME = "v3";
        TAG_TO_DELETE = "v4";
        TAG_TO_UPDATE = "test-update-properties";
        TAG_UNKNOWN = "unknowntag";
        DIGEST_UNKNOWN = "unknown:digest";
        PAGESIZE_2 = 2;
        PAGESIZE_1 = 1;
        ARM64_ARCHITECTURE = "arm64";
        LINUX_OPERATING_SYSTEM = "linux";
        AMD64_ARCHITECTURE = "amd64";
        WINDOWS_OPERATING_SYSTEM = "windows";
        RESOURCE_GROUP = CONFIGURATION.get("CONTAINERREGISTRY_RESOURCE_GROUP");
        SUBSCRIPTION_ID = CONFIGURATION.get("CONTAINERREGISTRY_SUBSCRIPTION_ID");
        REGISTRY_NAME = CONFIGURATION.get("CONTAINERREGISTRY_REGISTRY_NAME");
        REGISTRY_ENDPOINT = CONFIGURATION.get("CONTAINERREGISTRY_ENDPOINT");
        REGISTRY_URI = "registry.hub.docker.com";
        SLEEP_TIME_IN_MILLISECONDS = 5000;
        ANONYMOUS_REGISTRY_NAME = CONFIGURATION.get("CONTAINERREGISTRY_ANONREGISTRY_NAME");
        ANONYMOUS_REGISTRY_ENDPOINT = CONFIGURATION.get("CONTAINERREGISTRY_ANONREGISTRY_ENDPOINT");
        LOGIN_SERVER_SUFFIX = "azurecr.io";
        REGISTRY_ENDPOINT_PLAYBACK = "https://playbackregistry.azurecr.io";
    }

    static class FakeCredentials implements TokenCredential {
        @Override
        public Mono<AccessToken> getToken(TokenRequestContext tokenRequestContext) {
            return Mono.just(new AccessToken("someFakeToken", OffsetDateTime.MAX));
        }
    }

    static <T extends Comparable<? super T>> boolean isSorted(Iterable<T> iterable) {
        Iterator<T> iter = iterable.iterator();
        if (!iter.hasNext()) {
            return true;
        }
        T t = iter.next();
        while (iter.hasNext()) {
            T t2 = iter.next();
            if (t.compareTo(t2) > 0) {
                return false;
            }
            t = t2;
        }
        return true;
    }

    static TokenCredential getCredential(TestMode testMode) {
        if (testMode == TestMode.PLAYBACK) {
            return new FakeCredentials();
        }

        return new DefaultAzureCredentialBuilder().build();
    }

    static void importImage(TestMode mode, String repository, List<String> tags) {
        if (mode == TestMode.PLAYBACK) {
            return;
        }

        importImageAsync(mode, repository, tags).block();
        try {
            Thread.sleep(SLEEP_TIME_IN_MILLISECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    static Mono<Void> importImageAsync(TestMode mode, String repository, List<String> tags) {
        return importImageAsync(mode, REGISTRY_NAME, repository, tags);
    }

    static Mono<Void> importImageAsync(TestMode mode, String registryName, String repository, List<String> tags) {
        if (mode == TestMode.PLAYBACK) {
            return Mono.empty();
        }

        TokenCredential credential = getCredential(mode);

        tags = tags.stream().map(tag -> String.format("%1$s:%2$s", repository, tag)).collect(Collectors.toList());

        ContainerRegistryManager manager = ContainerRegistryManager.authenticate(credential, new AzureProfile(AzureEnvironment.AZURE));

        return manager.serviceClient().getRegistries().importImageAsync(
            RESOURCE_GROUP,
            registryName,
            new ImportImageParameters()
                .withMode(ImportMode.FORCE)
                .withSource(new ImportSource().withSourceImage(repository)
                    .withRegistryUri(REGISTRY_URI))
                .withTargetTags(tags));
    }
}
