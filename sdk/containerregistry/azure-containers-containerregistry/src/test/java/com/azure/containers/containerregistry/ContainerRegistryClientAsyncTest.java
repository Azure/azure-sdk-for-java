// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.models.AcrErrorsException;
import com.azure.containers.containerregistry.models.ListRepositoriesOptions;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedResponse;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import reactor.test.StepVerifier;

import java.time.Duration;
import java.util.List;

import static com.azure.containers.containerregistry.TestUtils.DISPLAY_NAME_WITH_ARGUMENTS;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class ContainerRegistryClientAsyncTest extends ContainerRegistryClientTestBase {

    private ContainerRegistryAsyncClient client;
    static final int DEFAULTPAGESIZE = 1;

    @BeforeAll
    static void beforeAll() {
        StepVerifier.setDefaultTimeout(Duration.ofMinutes(30));
    }

    @AfterAll
    static void afterAll() {
        StepVerifier.resetDefaultTimeout();
    }

    private ContainerRegistryAsyncClient getContainerRegistryAsyncClient(HttpClient httpClient) {
        return getContainerRegistryBuilder(httpClient).buildContainerRegistryAsyncClient();
    }

    private void validateListResponse(PagedResponse<String> pagedResponse) {
        assertNotNull(pagedResponse);
        List<String> repositories = pagedResponse.getValue();
        assertEquals(3, repositories.size());
        assertEquals(repositories.get(0), "dockercloud/hello-world");
        assertEquals(repositories.get(1), "library/hello-seattle");
        assertEquals(repositories.get(2), "library/hello-world");
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listRepositories(HttpClient httpClient) {
        client = getContainerRegistryAsyncClient(httpClient);
        StepVerifier.create(client.listRepositories().byPage())
            .assertNext(res -> validateListResponse(res))
            .verifyComplete();
    }
    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listRepositoriesWithNullOptions(HttpClient httpClient) {
        client = getContainerRegistryAsyncClient(httpClient);
        assertThrows(NullPointerException.class, () -> client.listRepositories(null));
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listRepositoriesWithOptions(HttpClient httpClient) {
        client = getContainerRegistryAsyncClient(httpClient);
        ListRepositoriesOptions options = new ListRepositoriesOptions();
        StepVerifier.create(client.listRepositories(options).byPage())
            .assertNext(res -> validateListResponse(res))
            .verifyComplete();
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listRepositoriesWithPageSize(HttpClient httpClient) {
        client = getContainerRegistryAsyncClient(httpClient);
        ListRepositoriesOptions options = new ListRepositoriesOptions().setMaxPageSize(DEFAULTPAGESIZE);
        StepVerifier.create(client.listRepositories(options).byPage())
            .assertNext(res -> {
                List<String> repositories = res.getValue();
                assertEquals(1, repositories.size());
                assertEquals(repositories.get(0), "dockercloud/hello-world");
            })
            .assertNext(res -> {
                List<String> repositories = res.getValue();
                assertEquals(1, repositories.size());
                assertEquals(repositories.get(0), "library/hello-seattle");
            })
            .assertNext(res -> {
                List<String> repositories = res.getValue();
                assertEquals(1, repositories.size());
                assertEquals(repositories.get(0), "library/hello-world");
            })
            .verifyComplete();
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void deleteRepositoriesWithNull(HttpClient httpClient) {
        client = getContainerRegistryAsyncClient(httpClient);
        StepVerifier.create(client.deleteRepository(null))
            .expectError(NullPointerException.class)
            .verify();
    }


    // What is the prescribed way of running delete test scenarios.
/*    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void deleteRepositories(HttpClient httpClient) {
        client = getContainerRegistryAsyncClient(httpClient);
        StepVerifier.create(client.deleteRepository("library/hello-world"))
            .assertNext(res -> {
                assertEquals(10, res.getDeletedRegistryArtifactDigests().size());
                assertEquals("latest", res.getDeletedTags());
            })
            .verifyComplete();
    }*/

    // What is the prescribed way of running delete test scenarios.
    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void deleteRepositories(HttpClient httpClient) {
        client = getContainerRegistryAsyncClient(httpClient);

        client = getContainerRegistryAsyncClient(httpClient);
        StepVerifier.create(client.deleteRepository("missingRepo"))
            .expectErrorMatches(exception -> {
                return exception instanceof AcrErrorsException;
            }).verify();
    }
}
