// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.util.Context;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import static com.azure.containers.containerregistry.TestUtils.PAGESIZE_2;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class ContainerRegistryClientTest extends ContainerRegistryClientsTestBase {
    private ContainerRegistryClient client;
    private String recordFileName;

    private ContainerRegistryClient getContainerRegistryClient() {
        return getContainerRegistryBuilder(new LocalHttpClient(recordFileName)).buildClient();
    }

    @Test
    public void listRepositoriesSyncAndAsync() {
        recordFileName = "ContainerRegistryClientAsyncIntegrationTests.listRepositories[1].json";
        client = getContainerRegistryClient();

        List<String> repositories = client.listRepositories().stream().collect(Collectors.toList());
        repositories.containsAll(Arrays.asList(TestUtils.HELLO_WORLD_REPOSITORY_NAME, TestUtils.ALPINE_REPOSITORY_NAME));
    }

    @Test
    public void listRepositoriesWithPageSize() {
        recordFileName = "ContainerRegistryClientAsyncIntegrationTests.listRepositoriesWithPageSize[1].json";
        client = getContainerRegistryClient();

        ArrayList<String> repositories = new ArrayList<>();
        client.listRepositories().iterableByPage(PAGESIZE_2).forEach(res -> res.getValue().forEach(repo -> repositories.add(repo)));
        repositories.containsAll(Arrays.asList(TestUtils.HELLO_WORLD_REPOSITORY_NAME, TestUtils.ALPINE_REPOSITORY_NAME));
    }

    @Test
    public void listRepositoriesWithInvalidPageSize() {
        client = getContainerRegistryClient();

        ArrayList<String> repositories = new ArrayList<>();
        assertThrows(IllegalArgumentException.class, () -> client.listRepositories().iterableByPage(-1).forEach(res -> res.getValue().forEach(repo -> repositories.add(repo))));
    }

    @Test
    public void deleteRepositoryThrows() {
        recordFileName = "ContainerRegistryClientAsyncIntegrationTests.deleteRepositoryWithResponseThrows[1].json";
        client = getContainerRegistryClient();

        assertThrows(NullPointerException.class, () -> client.deleteRepository(null));
        assertThrows(ResourceNotFoundException.class, () -> client.deleteRepository("missingRepo"));
        assertThrows(NullPointerException.class, () -> client.deleteRepositoryWithResponse(null, Context.NONE));
        assertThrows(ResourceNotFoundException.class, () -> client.deleteRepositoryWithResponse("missingRepo", Context.NONE));
    }
}
