// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.models.DeleteRepositoryResult;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.Response;
import com.azure.core.test.implementation.ImplUtils;
import com.azure.core.util.Context;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.parallel.Execution;
import org.junit.jupiter.api.parallel.ExecutionMode;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import reactor.test.StepVerifier;

import java.util.Arrays;

import static com.azure.containers.containerregistry.TestUtils.ALPINE_REPOSITORY_NAME;
import static com.azure.containers.containerregistry.TestUtils.DISPLAY_NAME_WITH_ARGUMENTS;

@Execution(ExecutionMode.SAME_THREAD)
public class ContainerRegistryClientTest extends ContainerRegistryClientsTestBase {
    private String recordFileName;
    private ContainerRegistryAsyncClient registryAsyncClient;
    private ContainerRegistryClient registryClient;

    private ContainerRepositoryAsync asyncClient;
    private ContainerRepository client;

    private ContainerRepositoryAsync getContainerRepositoryAsync() {
        return getContainerRegistryBuilder(new LocalHttpClient(recordFileName))
            .buildAsyncClient()
            .getRepository(ALPINE_REPOSITORY_NAME);
    }

    private ContainerRepository getContainerRepository() {
        return getContainerRegistryBuilder(new LocalHttpClient(recordFileName))
            .buildClient()
            .getRepository(ALPINE_REPOSITORY_NAME);
    }

    private ContainerRegistryAsyncClient getContainerRegistryAsyncClient() {
        HttpClient client = new LocalHttpClient(recordFileName);
        return getContainerRegistryBuilder(client).buildAsyncClient();
    }

    private ContainerRegistryAsyncClient getContainerRegistryAsyncClient(HttpClient client) {
        return getContainerRegistryBuilder(client).buildAsyncClient();
    }

    private ContainerRegistryClient getContainerRegistryClient() {
        HttpClient client = new LocalHttpClient(recordFileName);
        return getContainerRegistryBuilder(client).buildClient();
    }

    @BeforeEach
    void beforeEach() {
        TestUtils.importImage(ImplUtils.getTestMode(), ALPINE_REPOSITORY_NAME, Arrays.asList("latest"));
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void deleteRepository(HttpClient httpClient) {
        registryAsyncClient = getContainerRegistryAsyncClient(httpClient);

        StepVerifier.create(registryAsyncClient.deleteRepository(ALPINE_REPOSITORY_NAME))
            .assertNext(res -> validateDeletedRepositoryResponse(res))
            .verifyComplete();
    }

    @Test
    public void deleteRepositoryFromMethod() {
        recordFileName = "ContainerRegistryClientTest.deleteRepository[1].json";
        registryAsyncClient = getContainerRegistryAsyncClient();
        registryClient = getContainerRegistryClient();

        StepVerifier.create(registryAsyncClient.deleteRepository(ALPINE_REPOSITORY_NAME))
            .assertNext(res -> validateDeletedRepositoryResponse(res))
            .verifyComplete();

        DeleteRepositoryResult result = registryClient.deleteRepository(ALPINE_REPOSITORY_NAME);
        validateDeletedRepositoryResponse(result);

        Response<DeleteRepositoryResult> response = registryClient.deleteRepositoryWithResponse(ALPINE_REPOSITORY_NAME, Context.NONE);
        validateDeletedRepositoryResponse(response);

        asyncClient = getContainerRepositoryAsync();
        client = getContainerRepository();
        StepVerifier.create(asyncClient.deleteWithResponse())
            .assertNext(res -> validateDeletedRepositoryResponse(res))
            .verifyComplete();

        StepVerifier.create(asyncClient.delete())
            .assertNext(res -> validateDeletedRepositoryResponse(res))
            .verifyComplete();

        result = client.delete();
        validateDeletedRepositoryResponse(result);

        response = client.deleteWithResponse(Context.NONE);
        validateDeletedRepositoryResponse(response);
    }
}
