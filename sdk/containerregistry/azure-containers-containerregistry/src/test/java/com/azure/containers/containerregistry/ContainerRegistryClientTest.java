// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.Response;
import com.azure.core.test.http.AssertingHttpClientBuilder;
import com.azure.core.util.Context;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.parallel.Execution;
import org.junit.jupiter.api.parallel.ExecutionMode;
import reactor.test.StepVerifier;

import java.util.Collections;

import static com.azure.containers.containerregistry.TestUtils.HELLO_WORLD_REPOSITORY_NAME;
import static com.azure.containers.containerregistry.TestUtils.HELLO_WORLD_SEATTLE_REPOSITORY_NAME;
import static com.azure.containers.containerregistry.TestUtils.HTTP_STATUS_CODE_202;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

@Execution(ExecutionMode.SAME_THREAD)
public class ContainerRegistryClientTest extends ContainerRegistryClientsTestBase {

    private final String repositoryName = HELLO_WORLD_SEATTLE_REPOSITORY_NAME;

    private HttpClient buildSyncAssertingClient(HttpClient httpClient) {
        return new AssertingHttpClientBuilder(httpClient)
            .assertSync()
            .build();
    }

    private HttpClient buildAsyncAssertingClient(HttpClient httpClient) {
        return new AssertingHttpClientBuilder(httpClient)
            .assertAsync()
            .build();
    }
    private ContainerRegistryClient getContainerRegistryClient(HttpClient client) {
        return getContainerRegistryBuilder(buildSyncAssertingClient(interceptorManager.isPlaybackMode() ? interceptorManager.getPlaybackClient() : client)).buildClient();
    }

    private ContainerRegistryAsyncClient getContainerRegistryAsyncClient(HttpClient client) {
        return getContainerRegistryBuilder(buildAsyncAssertingClient(interceptorManager.isPlaybackMode() ? interceptorManager.getPlaybackClient() : client)).buildAsyncClient();
    }

    @BeforeEach
    void beforeEach() {
        TestUtils.importImage(getTestMode(), repositoryName, Collections.singletonList("latest"));
    }


    @Test
    public void deleteRepositoryByRegistryWithResponseAsyncClient() {
        ContainerRegistryAsyncClient registryAsyncClient = getContainerRegistryAsyncClient(getHttpClient());
        StepVerifier.create(registryAsyncClient.deleteRepositoryWithResponse(repositoryName))
            .assertNext(res -> assertEquals(res.getStatusCode(), HTTP_STATUS_CODE_202))
            .verifyComplete();

        StepVerifier.create(registryAsyncClient.deleteRepositoryWithResponse(repositoryName))
            .assertNext(res -> assertEquals(res.getStatusCode(), HTTP_STATUS_CODE_202))
            .verifyComplete();
    }

    @Test
    public void deleteRepositoryByRegistryAsyncClient() {
        ContainerRegistryAsyncClient registryAsyncClient = getContainerRegistryAsyncClient(getHttpClient());
        StepVerifier.create(registryAsyncClient.deleteRepository(repositoryName))
            .verifyComplete();

        StepVerifier.create(registryAsyncClient.deleteRepository(repositoryName))
            .verifyComplete();
    }

    @Test
    public void deleteRepositoryWithResponseAsyncClient() {
        ContainerRegistryAsyncClient registryAsyncClient = getContainerRegistryAsyncClient(getHttpClient());
        ContainerRepositoryAsync asyncClient = registryAsyncClient.getRepository(repositoryName);

        StepVerifier.create(asyncClient.deleteWithResponse())
            .assertNext(res -> assertEquals(res.getStatusCode(), HTTP_STATUS_CODE_202))
            .verifyComplete();

        StepVerifier.create(asyncClient.deleteWithResponse())
            .assertNext(res -> assertEquals(res.getStatusCode(), HTTP_STATUS_CODE_202))
            .verifyComplete();
    }

    @Test
    public void deleteRepositoryAsyncClient() {
        ContainerRegistryAsyncClient registryAsyncClient = getContainerRegistryAsyncClient(getHttpClient());
        ContainerRepositoryAsync asyncClient = registryAsyncClient.getRepository(repositoryName);

        StepVerifier.create(asyncClient.delete())
            .verifyComplete();
        StepVerifier.create(asyncClient.delete())
            .verifyComplete();
    }

    @Test
    public void deleteRepositoryWithResponseByRegistryClient() {
        ContainerRegistryClient registryClient = getContainerRegistryClient(getHttpClient());
        Response<Void> response = registryClient.deleteRepositoryWithResponse(HELLO_WORLD_SEATTLE_REPOSITORY_NAME, Context.NONE);
        assertEquals(HTTP_STATUS_CODE_202, response.getStatusCode());
    }

    @Test
    public void deleteRepositoryByRegistryClient() {
        ContainerRegistryClient registryClient = getContainerRegistryClient(getHttpClient());
        // This should not throw.
        registryClient.deleteRepository(HELLO_WORLD_SEATTLE_REPOSITORY_NAME);
    }

    @Test
    public void deleteRepositoryWithResponseClient() {
        ContainerRegistryClient registryClient = getContainerRegistryClient(getHttpClient());
        ContainerRepository client = registryClient.getRepository(repositoryName);
        client.deleteWithResponse(Context.NONE);
    }

    @Test
    public void deleteRepositoryClient() {
        ContainerRegistryClient registryClient = getContainerRegistryClient(getHttpClient());
        ContainerRepository client = registryClient.getRepository(repositoryName);
        client.delete();
    }

    @Test
    public void getRepositoryTestThrows() {
        ContainerRegistryAsyncClient registryAsyncClient = getContainerRegistryAsyncClient(getHttpClient());
        ContainerRegistryClient registryClient = getContainerRegistryClient(getHttpClient());
        assertThrows(NullPointerException.class, () -> registryClient.getRepository(null));
        assertThrows(IllegalArgumentException.class, () -> registryClient.getRepository(""));
        assertThrows(NullPointerException.class, () -> registryAsyncClient.getRepository(null));
        assertThrows(IllegalArgumentException.class, () -> registryAsyncClient.getRepository(""));
    }

    @Test
    public void getArtifactTestThrows() {
        ContainerRegistryClient registryClient = getContainerRegistryClient(getHttpClient());
        ContainerRegistryAsyncClient registryAsyncClient = getContainerRegistryAsyncClient(getHttpClient());
        assertThrows(NullPointerException.class, () -> registryClient.getArtifact(HELLO_WORLD_REPOSITORY_NAME, null));
        assertThrows(IllegalArgumentException.class, () -> registryClient.getArtifact(HELLO_WORLD_REPOSITORY_NAME, ""));
        assertThrows(NullPointerException.class, () -> registryClient.getArtifact(null, "digest"));
        assertThrows(IllegalArgumentException.class, () -> registryClient.getArtifact("", "digest"));
        assertThrows(NullPointerException.class, () -> registryAsyncClient.getArtifact(HELLO_WORLD_REPOSITORY_NAME, null));
        assertThrows(IllegalArgumentException.class, () -> registryAsyncClient.getArtifact(HELLO_WORLD_REPOSITORY_NAME, ""));
        assertThrows(NullPointerException.class, () -> registryAsyncClient.getArtifact(null, "digest"));
        assertThrows(IllegalArgumentException.class, () -> registryAsyncClient.getArtifact("", "digest"));
    }
}
