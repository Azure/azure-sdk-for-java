// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpClient;
import com.azure.core.util.Context;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import static com.azure.containers.containerregistry.TestUtils.DISPLAY_NAME_WITH_ARGUMENTS;
import static com.azure.containers.containerregistry.TestUtils.PAGESIZE_2;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class ContainerRegistryClientTest extends ContainerRegistryClientsTestBase {
    private ContainerRegistryClient client;

    private ContainerRegistryClient getContainerRegistryClient(HttpClient httpClient) {
        return getContainerRegistryBuilder(httpClient).buildClient();
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listRepositories(HttpClient httpClient) {
        client = getContainerRegistryClient(httpClient);

        List<String> repositories = client.listRepositories().stream().collect(Collectors.toList());
        repositories.containsAll(Arrays.asList(TestUtils.HELLO_WORLD_REPOSITORY_NAME, TestUtils.ALPINE_REPOSITORY_NAME));
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listRepositoriesWithPageSize(HttpClient httpClient) {
        client = getContainerRegistryClient(httpClient);

        ArrayList<String> repositories = new ArrayList<>();
        client.listRepositories().iterableByPage(PAGESIZE_2).forEach(res -> res.getValue().forEach(repo -> repositories.add(repo)));
        repositories.containsAll(Arrays.asList(TestUtils.HELLO_WORLD_REPOSITORY_NAME, TestUtils.ALPINE_REPOSITORY_NAME));
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void listRepositoriesWithInvalidPageSize(HttpClient httpClient) {
        client = getContainerRegistryClient(httpClient);

        assertThrows(IllegalArgumentException.class, () -> client.listRepositories().iterableByPage(-1).forEach(a -> a.getValue()));
    }

    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
    @MethodSource("getHttpClients")
    public void deleteRepositoryThrows(HttpClient httpClient) {
        client = getContainerRegistryClient(httpClient);
        assertThrows(NullPointerException.class, () -> client.deleteRepository(null));
        assertThrows(ResourceNotFoundException.class, () -> client.deleteRepository("missingRepo"));
        assertThrows(NullPointerException.class, () -> client.deleteRepositoryWithResponse(null, Context.NONE));
        assertThrows(ResourceNotFoundException.class, () -> client.deleteRepositoryWithResponse("missingRepo", Context.NONE));
    }

//    // What is the prescribed way of running delete test scenarios.
//    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
//    @MethodSource("getHttpClients")
//    public void deleteRepositories(HttpClient httpClient) {
//        client = getContainerRegistryClient(httpClient);
//
//        DeleteRepositoryResult deletedRepo = client.deleteRepository(TestUtils.BUSYBOX_REPOSITORY_NAME);
//        assertTrue(deletedRepo.getDeletedTags().stream().anyMatch(tag -> TestUtils.LATEST_TAG_NAME.equals(tag)));
//        assertFalse(deletedRepo.getDeletedRegistryArtifactDigests().isEmpty());
//    }

    // What is the prescribed way of running delete test scenarios.
//    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)
//    @MethodSource("getHttpClients")
//    public void deleteRepositoriesWithResponse(HttpClient httpClient) {
//        client = getContainerRegistryClient(httpClient);
//
//        Response<DeleteRepositoryResult> deletedRepoRes = client.deleteRepositoryWithResponse(TestUtils.BUSYBOX_REPOSITORY_NAME, Context.NONE);
//        assertNotNull(deletedRepoRes.getHeaders());
//        assertNotNull(deletedRepoRes.getRequest());
//        assertNotNull(deletedRepoRes.getStatusCode());
//        assertTrue(deletedRepoRes.getValue().getDeletedTags().stream().anyMatch(tag -> TestUtils.LATEST_TAG_NAME.equals(tag)));
//        assertFalse(deletedRepoRes.getValue().getDeletedRegistryArtifactDigests().isEmpty());
//    }
}
