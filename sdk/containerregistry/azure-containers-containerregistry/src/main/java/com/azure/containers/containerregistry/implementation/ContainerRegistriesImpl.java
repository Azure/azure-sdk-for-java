// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry.implementation;

import com.azure.containers.containerregistry.implementation.models.AcrErrorsException;
import com.azure.containers.containerregistry.implementation.models.ArtifactManifestProperties;
import com.azure.containers.containerregistry.models.ArtifactTagProperties;
import com.azure.containers.containerregistry.implementation.models.ContainerRegistriesCreateManifestResponse;
import com.azure.containers.containerregistry.implementation.models.ContainerRegistriesGetManifestsNextResponse;
import com.azure.containers.containerregistry.implementation.models.ContainerRegistriesGetManifestsResponse;
import com.azure.containers.containerregistry.implementation.models.ContainerRegistriesGetRepositoriesNextResponse;
import com.azure.containers.containerregistry.implementation.models.ContainerRegistriesGetRepositoriesResponse;
import com.azure.containers.containerregistry.implementation.models.ContainerRegistriesGetTagsNextResponse;
import com.azure.containers.containerregistry.implementation.models.ContainerRegistriesGetTagsResponse;
import com.azure.containers.containerregistry.implementation.models.Manifest;
import com.azure.containers.containerregistry.implementation.models.ManifestAttributesBase;
import com.azure.containers.containerregistry.implementation.models.TagAttributesBase;
import com.azure.containers.containerregistry.models.ContentProperties;
import com.azure.containers.containerregistry.models.DeleteRepositoryResult;
import com.azure.containers.containerregistry.models.RepositoryProperties;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ContainerRegistries. */
public final class ContainerRegistriesImpl {
    /** The proxy service used to perform REST calls. */
    private final ContainerRegistriesService service;

    /** The service client containing this operation class. */
    private final ContainerRegistryImpl client;

    /**
     * Initializes an instance of ContainerRegistriesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ContainerRegistriesImpl(ContainerRegistryImpl client) {
        this.service =
                RestProxy.create(
                        ContainerRegistriesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ContainerRegistryContainerRegistries to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{url}")
    @ServiceInterface(name = "ContainerRegistryCon")
    public interface ContainerRegistriesService {
        @Get("/v2/")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<Void>> checkDockerV2Support(
                @HostParam("url") String url, @HeaderParam("Accept") String accept, Context context);

        @Get("/v2/{name}/manifests/{reference}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<Manifest>> getManifest(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @PathParam("reference") String reference,
                @HeaderParam("accept") String accept,
                @HeaderParam("Accept") String acceptParam,
                Context context);

        @Put("/v2/{name}/manifests/{reference}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<ContainerRegistriesCreateManifestResponse> createManifest(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @PathParam("reference") String reference,
                @BodyParam("application/vnd.docker.distribution.manifest.v2+json") Manifest payload,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/v2/{name}/manifests/{reference}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<Void>> deleteManifest(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @PathParam("reference") String reference,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/acr/v1/_catalog")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<ContainerRegistriesGetRepositoriesResponse> getRepositories(
                @HostParam("url") String url,
                @QueryParam("last") String last,
                @QueryParam("n") Integer n,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/acr/v1/{name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<RepositoryProperties>> getProperties(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/acr/v1/{name}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<DeleteRepositoryResult>> deleteRepository(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @HeaderParam("Accept") String accept,
                Context context);

        @Patch("/acr/v1/{name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<RepositoryProperties>> setProperties(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @BodyParam("application/json") ContentProperties value,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/acr/v1/{name}/_tags")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<ContainerRegistriesGetTagsResponse> getTags(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @QueryParam("last") String last,
                @QueryParam("n") Integer n,
                @QueryParam("orderby") String orderby,
                @QueryParam("digest") String digest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/acr/v1/{name}/_tags/{reference}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<ArtifactTagProperties>> getTagProperties(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @PathParam("reference") String reference,
                @HeaderParam("Accept") String accept,
                Context context);

        @Patch("/acr/v1/{name}/_tags/{reference}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<ArtifactTagProperties>> updateTagAttributes(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @PathParam("reference") String reference,
                @BodyParam("application/json") ContentProperties value,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/acr/v1/{name}/_tags/{reference}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<Void>> deleteTag(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @PathParam("reference") String reference,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/acr/v1/{name}/_manifests")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<ContainerRegistriesGetManifestsResponse> getManifests(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @QueryParam("last") String last,
                @QueryParam("n") Integer n,
                @QueryParam("orderby") String orderby,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/acr/v1/{name}/_manifests/{digest}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<ArtifactManifestProperties>> getManifestProperties(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @PathParam("digest") String digest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Patch("/acr/v1/{name}/_manifests/{digest}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<ArtifactManifestProperties>> updateManifestProperties(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @PathParam("digest") String digest,
                @BodyParam("application/json") ContentProperties value,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<ContainerRegistriesGetRepositoriesNextResponse> getRepositoriesNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("url") String url,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<ContainerRegistriesGetTagsNextResponse> getTagsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("url") String url,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<ContainerRegistriesGetManifestsNextResponse> getManifestsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("url") String url,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * Tells whether this Docker Registry instance supports Docker Registry HTTP API v2.
     *
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> checkDockerV2SupportWithResponseAsync() {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.checkDockerV2Support(this.client.getUrl(), accept, context));
    }

    /**
     * Tells whether this Docker Registry instance supports Docker Registry HTTP API v2.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> checkDockerV2SupportWithResponseAsync(Context context) {
        final String accept = "application/json";
        return service.checkDockerV2Support(this.client.getUrl(), accept, context);
    }

    /**
     * Tells whether this Docker Registry instance supports Docker Registry HTTP API v2.
     *
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> checkDockerV2SupportAsync() {
        return checkDockerV2SupportWithResponseAsync().flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Tells whether this Docker Registry instance supports Docker Registry HTTP API v2.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> checkDockerV2SupportAsync(Context context) {
        return checkDockerV2SupportWithResponseAsync(context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param accept Accept header string delimited by comma. For example,
     *     application/vnd.docker.distribution.manifest.v2+json.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Manifest>> getManifestWithResponseAsync(String name, String reference, String accept) {
        final String acceptHeader = "application/json";
        return FluxUtil.withContext(
                context -> service.getManifest(this.client.getUrl(), name, reference, accept, acceptHeader, context));
    }

    /**
     * Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param accept Accept header string delimited by comma. For example,
     *     application/vnd.docker.distribution.manifest.v2+json.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Manifest>> getManifestWithResponseAsync(
            String name, String reference, String accept, Context context) {
        final String acceptHeader = "application/json";
        return service.getManifest(this.client.getUrl(), name, reference, accept, acceptHeader, context);
    }

    /**
     * Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param accept Accept header string delimited by comma. For example,
     *     application/vnd.docker.distribution.manifest.v2+json.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Manifest> getManifestAsync(String name, String reference, String accept) {
        return getManifestWithResponseAsync(name, reference, accept)
                .flatMap(
                        (Response<Manifest> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param accept Accept header string delimited by comma. For example,
     *     application/vnd.docker.distribution.manifest.v2+json.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Manifest> getManifestAsync(String name, String reference, String accept, Context context) {
        return getManifestWithResponseAsync(name, reference, accept, context)
                .flatMap(
                        (Response<Manifest> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param payload Manifest body, can take v1 or v2 values depending on accept header.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ContainerRegistriesCreateManifestResponse> createManifestWithResponseAsync(
            String name, String reference, Manifest payload) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.createManifest(this.client.getUrl(), name, reference, payload, accept, context));
    }

    /**
     * Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param payload Manifest body, can take v1 or v2 values depending on accept header.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ContainerRegistriesCreateManifestResponse> createManifestWithResponseAsync(
            String name, String reference, Manifest payload, Context context) {
        final String accept = "application/json";
        return service.createManifest(this.client.getUrl(), name, reference, payload, accept, context);
    }

    /**
     * Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param payload Manifest body, can take v1 or v2 values depending on accept header.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Object> createManifestAsync(String name, String reference, Manifest payload) {
        return createManifestWithResponseAsync(name, reference, payload)
                .flatMap(
                        (ContainerRegistriesCreateManifestResponse res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
     *
     * @param name Name of the image (including the namespace).
     * @param reference A tag or a digest, pointing to a specific image.
     * @param payload Manifest body, can take v1 or v2 values depending on accept header.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Object> createManifestAsync(String name, String reference, Manifest payload, Context context) {
        return createManifestWithResponseAsync(name, reference, payload, context)
                .flatMap(
                        (ContainerRegistriesCreateManifestResponse res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted by `digest`.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Digest of a BLOB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteManifestWithResponseAsync(String name, String reference) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.deleteManifest(this.client.getUrl(), name, reference, accept, context));
    }

    /**
     * Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted by `digest`.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Digest of a BLOB.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteManifestWithResponseAsync(String name, String reference, Context context) {
        final String accept = "application/json";
        return service.deleteManifest(this.client.getUrl(), name, reference, accept, context);
    }

    /**
     * Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted by `digest`.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Digest of a BLOB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteManifestAsync(String name, String reference) {
        return deleteManifestWithResponseAsync(name, reference).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted by `digest`.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Digest of a BLOB.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteManifestAsync(String name, String reference, Context context) {
        return deleteManifestWithResponseAsync(name, reference, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * List repositories.
     *
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of repositories.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getRepositoriesSinglePageAsync(String last, Integer n) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getRepositories(this.client.getUrl(), last, n, accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getRepositories(),
                                        res.getValue().getLink(),
                                        res.getDeserializedHeaders()));
    }

    /**
     * List repositories.
     *
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of repositories.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getRepositoriesSinglePageAsync(String last, Integer n, Context context) {
        final String accept = "application/json";
        return service.getRepositories(this.client.getUrl(), last, n, accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getRepositories(),
                                        res.getValue().getLink(),
                                        res.getDeserializedHeaders()));
    }

    /**
     * List repositories.
     *
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of repositories.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<String> getRepositoriesAsync(String last, Integer n) {
        return new PagedFlux<>(
                () -> getRepositoriesSinglePageAsync(last, n),
                nextLink -> getRepositoriesNextSinglePageAsync(nextLink));
    }

    /**
     * List repositories.
     *
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of repositories.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<String> getRepositoriesAsync(String last, Integer n, Context context) {
        return new PagedFlux<>(
                () -> getRepositoriesSinglePageAsync(last, n, context),
                nextLink -> getRepositoriesNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get repository attributes.
     *
     * @param name Name of the image (including the namespace).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return repository attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RepositoryProperties>> getPropertiesWithResponseAsync(String name) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getProperties(this.client.getUrl(), name, accept, context));
    }

    /**
     * Get repository attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return repository attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RepositoryProperties>> getPropertiesWithResponseAsync(String name, Context context) {
        final String accept = "application/json";
        return service.getProperties(this.client.getUrl(), name, accept, context);
    }

    /**
     * Get repository attributes.
     *
     * @param name Name of the image (including the namespace).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return repository attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RepositoryProperties> getPropertiesAsync(String name) {
        return getPropertiesWithResponseAsync(name)
                .flatMap(
                        (Response<RepositoryProperties> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get repository attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return repository attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RepositoryProperties> getPropertiesAsync(String name, Context context) {
        return getPropertiesWithResponseAsync(name, context)
                .flatMap(
                        (Response<RepositoryProperties> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Delete the repository identified by `name`.
     *
     * @param name Name of the image (including the namespace).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deleted repository.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeleteRepositoryResult>> deleteRepositoryWithResponseAsync(String name) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteRepository(this.client.getUrl(), name, accept, context));
    }

    /**
     * Delete the repository identified by `name`.
     *
     * @param name Name of the image (including the namespace).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deleted repository.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeleteRepositoryResult>> deleteRepositoryWithResponseAsync(String name, Context context) {
        final String accept = "application/json";
        return service.deleteRepository(this.client.getUrl(), name, accept, context);
    }

    /**
     * Delete the repository identified by `name`.
     *
     * @param name Name of the image (including the namespace).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deleted repository.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeleteRepositoryResult> deleteRepositoryAsync(String name) {
        return deleteRepositoryWithResponseAsync(name)
                .flatMap(
                        (Response<DeleteRepositoryResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Delete the repository identified by `name`.
     *
     * @param name Name of the image (including the namespace).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deleted repository.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeleteRepositoryResult> deleteRepositoryAsync(String name, Context context) {
        return deleteRepositoryWithResponseAsync(name, context)
                .flatMap(
                        (Response<DeleteRepositoryResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Update the attribute identified by `name` where `reference` is the name of the repository.
     *
     * @param name Name of the image (including the namespace).
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return repository attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RepositoryProperties>> setPropertiesWithResponseAsync(String name, ContentProperties value) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.setProperties(this.client.getUrl(), name, value, accept, context));
    }

    /**
     * Update the attribute identified by `name` where `reference` is the name of the repository.
     *
     * @param name Name of the image (including the namespace).
     * @param value Repository attribute value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return repository attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RepositoryProperties>> setPropertiesWithResponseAsync(
            String name, ContentProperties value, Context context) {
        final String accept = "application/json";
        return service.setProperties(this.client.getUrl(), name, value, accept, context);
    }

    /**
     * Update the attribute identified by `name` where `reference` is the name of the repository.
     *
     * @param name Name of the image (including the namespace).
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return repository attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RepositoryProperties> setPropertiesAsync(String name, ContentProperties value) {
        return setPropertiesWithResponseAsync(name, value)
                .flatMap(
                        (Response<RepositoryProperties> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Update the attribute identified by `name` where `reference` is the name of the repository.
     *
     * @param name Name of the image (including the namespace).
     * @param value Repository attribute value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return repository attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RepositoryProperties> setPropertiesAsync(String name, ContentProperties value, Context context) {
        return setPropertiesWithResponseAsync(name, value, context)
                .flatMap(
                        (Response<RepositoryProperties> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * List tags of a repository.
     *
     * @param name Name of the image (including the namespace).
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @param digest filter by digest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of tag details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<TagAttributesBase>> getTagsSinglePageAsync(
            String name, String last, Integer n, String orderby, String digest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.getTags(this.client.getUrl(), name, last, n, orderby, digest, accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getTagAttributeBases(),
                                        res.getValue().getLink(),
                                        res.getDeserializedHeaders()));
    }

    /**
     * List tags of a repository.
     *
     * @param name Name of the image (including the namespace).
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @param digest filter by digest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of tag details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<TagAttributesBase>> getTagsSinglePageAsync(
            String name, String last, Integer n, String orderby, String digest, Context context) {
        final String accept = "application/json";
        return service.getTags(this.client.getUrl(), name, last, n, orderby, digest, accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getTagAttributeBases(),
                                        res.getValue().getLink(),
                                        res.getDeserializedHeaders()));
    }

    /**
     * List tags of a repository.
     *
     * @param name Name of the image (including the namespace).
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @param digest filter by digest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of tag details.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<TagAttributesBase> getTagsAsync(
            String name, String last, Integer n, String orderby, String digest) {
        return new PagedFlux<>(
                () -> getTagsSinglePageAsync(name, last, n, orderby, digest),
                nextLink -> getTagsNextSinglePageAsync(nextLink));
    }

    /**
     * List tags of a repository.
     *
     * @param name Name of the image (including the namespace).
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @param digest filter by digest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of tag details.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<TagAttributesBase> getTagsAsync(
            String name, String last, Integer n, String orderby, String digest, Context context) {
        return new PagedFlux<>(
                () -> getTagsSinglePageAsync(name, last, n, orderby, digest, context),
                nextLink -> getTagsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get tag attributes by tag.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag attributes by tag.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ArtifactTagProperties>> getTagPropertiesWithResponseAsync(String name, String reference) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.getTagProperties(this.client.getUrl(), name, reference, accept, context));
    }

    /**
     * Get tag attributes by tag.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag attributes by tag.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ArtifactTagProperties>> getTagPropertiesWithResponseAsync(
            String name, String reference, Context context) {
        final String accept = "application/json";
        return service.getTagProperties(this.client.getUrl(), name, reference, accept, context);
    }

    /**
     * Get tag attributes by tag.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag attributes by tag.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ArtifactTagProperties> getTagPropertiesAsync(String name, String reference) {
        return getTagPropertiesWithResponseAsync(name, reference)
                .flatMap(
                        (Response<ArtifactTagProperties> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get tag attributes by tag.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag attributes by tag.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ArtifactTagProperties> getTagPropertiesAsync(String name, String reference, Context context) {
        return getTagPropertiesWithResponseAsync(name, reference, context)
                .flatMap(
                        (Response<ArtifactTagProperties> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Update tag attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ArtifactTagProperties>> updateTagAttributesWithResponseAsync(
            String name, String reference, ContentProperties value) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.updateTagAttributes(this.client.getUrl(), name, reference, value, accept, context));
    }

    /**
     * Update tag attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @param value Repository attribute value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ArtifactTagProperties>> updateTagAttributesWithResponseAsync(
            String name, String reference, ContentProperties value, Context context) {
        final String accept = "application/json";
        return service.updateTagAttributes(this.client.getUrl(), name, reference, value, accept, context);
    }

    /**
     * Update tag attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ArtifactTagProperties> updateTagAttributesAsync(
            String name, String reference, ContentProperties value) {
        return updateTagAttributesWithResponseAsync(name, reference, value)
                .flatMap(
                        (Response<ArtifactTagProperties> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Update tag attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @param value Repository attribute value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ArtifactTagProperties> updateTagAttributesAsync(
            String name, String reference, ContentProperties value, Context context) {
        return updateTagAttributesWithResponseAsync(name, reference, value, context)
                .flatMap(
                        (Response<ArtifactTagProperties> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Delete tag.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTagWithResponseAsync(String name, String reference) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.deleteTag(this.client.getUrl(), name, reference, accept, context));
    }

    /**
     * Delete tag.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTagWithResponseAsync(String name, String reference, Context context) {
        final String accept = "application/json";
        return service.deleteTag(this.client.getUrl(), name, reference, accept, context);
    }

    /**
     * Delete tag.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteTagAsync(String name, String reference) {
        return deleteTagWithResponseAsync(name, reference).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete tag.
     *
     * @param name Name of the image (including the namespace).
     * @param reference Tag name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteTagAsync(String name, String reference, Context context) {
        return deleteTagWithResponseAsync(name, reference, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * List manifests of a repository.
     *
     * @param name Name of the image (including the namespace).
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ManifestAttributesBase>> getManifestsSinglePageAsync(
            String name, String last, Integer n, String orderby) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context -> service.getManifests(this.client.getUrl(), name, last, n, orderby, accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getManifests(),
                                        res.getValue().getLink(),
                                        res.getDeserializedHeaders()));
    }

    /**
     * List manifests of a repository.
     *
     * @param name Name of the image (including the namespace).
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ManifestAttributesBase>> getManifestsSinglePageAsync(
            String name, String last, Integer n, String orderby, Context context) {
        final String accept = "application/json";
        return service.getManifests(this.client.getUrl(), name, last, n, orderby, accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getManifests(),
                                        res.getValue().getLink(),
                                        res.getDeserializedHeaders()));
    }

    /**
     * List manifests of a repository.
     *
     * @param name Name of the image (including the namespace).
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ManifestAttributesBase> getManifestsAsync(String name, String last, Integer n, String orderby) {
        return new PagedFlux<>(
                () -> getManifestsSinglePageAsync(name, last, n, orderby),
                nextLink -> getManifestsNextSinglePageAsync(nextLink));
    }

    /**
     * List manifests of a repository.
     *
     * @param name Name of the image (including the namespace).
     * @param last Query parameter for the last item in previous query. Result set will include values lexically after
     *     last.
     * @param n query parameter for max number of items.
     * @param orderby orderby query parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ManifestAttributesBase> getManifestsAsync(
            String name, String last, Integer n, String orderby, Context context) {
        return new PagedFlux<>(
                () -> getManifestsSinglePageAsync(name, last, n, orderby, context),
                nextLink -> getManifestsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get manifest attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ArtifactManifestProperties>> getManifestPropertiesWithResponseAsync(
            String name, String digest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.getManifestProperties(this.client.getUrl(), name, digest, accept, context));
    }

    /**
     * Get manifest attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ArtifactManifestProperties>> getManifestPropertiesWithResponseAsync(
            String name, String digest, Context context) {
        final String accept = "application/json";
        return service.getManifestProperties(this.client.getUrl(), name, digest, accept, context);
    }

    /**
     * Get manifest attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ArtifactManifestProperties> getManifestPropertiesAsync(String name, String digest) {
        return getManifestPropertiesWithResponseAsync(name, digest)
                .flatMap(
                        (Response<ArtifactManifestProperties> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get manifest attributes.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ArtifactManifestProperties> getManifestPropertiesAsync(String name, String digest, Context context) {
        return getManifestPropertiesWithResponseAsync(name, digest, context)
                .flatMap(
                        (Response<ArtifactManifestProperties> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Update properties of a manifest.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ArtifactManifestProperties>> updateManifestPropertiesWithResponseAsync(
            String name, String digest, ContentProperties value) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.updateManifestProperties(this.client.getUrl(), name, digest, value, accept, context));
    }

    /**
     * Update properties of a manifest.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @param value Repository attribute value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ArtifactManifestProperties>> updateManifestPropertiesWithResponseAsync(
            String name, String digest, ContentProperties value, Context context) {
        final String accept = "application/json";
        return service.updateManifestProperties(this.client.getUrl(), name, digest, value, accept, context);
    }

    /**
     * Update properties of a manifest.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @param value Repository attribute value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ArtifactManifestProperties> updateManifestPropertiesAsync(
            String name, String digest, ContentProperties value) {
        return updateManifestPropertiesWithResponseAsync(name, digest, value)
                .flatMap(
                        (Response<ArtifactManifestProperties> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Update properties of a manifest.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @param value Repository attribute value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ArtifactManifestProperties> updateManifestPropertiesAsync(
            String name, String digest, ContentProperties value, Context context) {
        return updateManifestPropertiesWithResponseAsync(name, digest, value, context)
                .flatMap(
                        (Response<ArtifactManifestProperties> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of repositories.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getRepositoriesNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context -> service.getRepositoriesNext(nextLink, this.client.getUrl(), accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getRepositories(),
                                        res.getValue().getLink(),
                                        res.getDeserializedHeaders()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of repositories.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getRepositoriesNextSinglePageAsync(String nextLink, Context context) {
        final String accept = "application/json";
        return service.getRepositoriesNext(nextLink, this.client.getUrl(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getRepositories(),
                                        res.getValue().getLink(),
                                        res.getDeserializedHeaders()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of tag details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<TagAttributesBase>> getTagsNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getTagsNext(nextLink, this.client.getUrl(), accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getTagAttributeBases(),
                                        res.getValue().getLink(),
                                        res.getDeserializedHeaders()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of tag details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<TagAttributesBase>> getTagsNextSinglePageAsync(String nextLink, Context context) {
        final String accept = "application/json";
        return service.getTagsNext(nextLink, this.client.getUrl(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getTagAttributeBases(),
                                        res.getValue().getLink(),
                                        res.getDeserializedHeaders()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ManifestAttributesBase>> getManifestsNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context -> service.getManifestsNext(nextLink, this.client.getUrl(), accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getManifests(),
                                        res.getValue().getLink(),
                                        res.getDeserializedHeaders()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return manifest attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ManifestAttributesBase>> getManifestsNextSinglePageAsync(
            String nextLink, Context context) {
        final String accept = "application/json";
        return service.getManifestsNext(nextLink, this.client.getUrl(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getManifests(),
                                        res.getValue().getLink(),
                                        res.getDeserializedHeaders()));
    }
}
