// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.models.ContentProperties;
import com.azure.containers.containerregistry.models.DeleteRepositoryResult;
import com.azure.containers.containerregistry.models.ListRegistryArtifactOptions;
import com.azure.containers.containerregistry.models.ListTagsOptions;
import com.azure.containers.containerregistry.models.RegistryArtifactProperties;
import com.azure.containers.containerregistry.models.RepositoryProperties;
import com.azure.containers.containerregistry.models.TagProperties;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Initializes a new instance of the synchronous ContainerRegistry type. */
@ServiceClient(builder = ContainerRegistryClientBuilder.class)
public final class ContainerRepositoryClient {
    private final ContainerRepositoryAsyncClient serviceClient;

    /**
     * Initializes an instance of ContainerRegistryRepositories client.
     *
     * @param serviceClient the service client implementation.
     */
    ContainerRepositoryClient(ContainerRepositoryAsyncClient serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get endpoint associated with the class.
     * @return the endpoint associated with the client.
     * */
    public String getEndpoint() {
        return this.serviceClient.getEndpoint();
    }

    /**
     * Get registry associated with the class.
     * @return registry associated with the client.
     * */
    public String getRegistry() {
        return this.serviceClient.getRegistry();
    }

    /**
     * Get repository associated with the class.
     * @return repository associated with the client.
     * */
    public String getRepository() {
        return this.serviceClient.getRepository();
    }

    /**
     * Delete repository.
     * @param context Context associated with the operation.
     *
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     * @return Artifacts deleted as part of the delete operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeleteRepositoryResult> deleteWithResponse(Context context) {
        return this.serviceClient.deleteWithResponse(context).block();
    }

    /**
     * Delete repository.
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     * @return Artifacts deleted as part of the delete operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeleteRepositoryResult delete() {
        return this.deleteWithResponse(Context.NONE).getValue();
    }

    /**
     * Delete artifact.
     *
     * @param digest Digest name.
     * @param context Context associated with the operation.
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRegistryArtifactWithResponse(String digest, Context context) {
        return this.serviceClient.deleteRegistryArtifactWithResponse(digest, context).block();
    }

    /**
     * Delete registry artifact.
     *
     * @param digest digest to delete.
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteRegistryArtifact(String digest) {
        this.deleteRegistryArtifactWithResponse(digest, Context.NONE).getValue();
    }

    /**
     * Delete tag.
     *
     * @param tag Tag name.
     * @param context associated with the operation.
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTagWithResponse(String tag, Context context) {
        return this.serviceClient.deleteTagWithResponse(tag, context).block();
    }

    /**
     * Delete tag.
     *
     * @param tag Tag name.
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTag(String tag) {
        this.deleteTagWithResponse(tag, Context.NONE).getValue();
    }

    /**
     * Get repository attributes.
     *
     * @param context Context associated with the operation.
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     * @return repository attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RepositoryProperties> getPropertiesWithResponse(Context context) {
        return this.serviceClient.getPropertiesWithResponse(context).block();
    }

    /**
     * Get repository attributes.
     *
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     * @return repository attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RepositoryProperties getProperties() {
        return this.getPropertiesWithResponse(Context.NONE).getValue();
    }

    /**
     * <p>Get registry artifact properties.</p>
     *
     * <p>This method can take in both a digest as well as a tag.<br>
     * In case a tag is provided it calls the service to get the digest associated with it.</p>
     *
     * @param digest Digest of a BLOB.
     * @param context Context associated with the operation.
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     * @return registry attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RegistryArtifactProperties> getRegistryArtifactPropertiesWithResponse(String digest, Context context) {
        return this.serviceClient.getRegistryArtifactPropertiesWithResponse(digest, context).block();
    }

    /**
     * <p>Get registry artifact properties.</p>
     *
     * <p>This method can take in both a digest as well as a tag.<br>
     * In case a tag is provided it calls the service to get the digest associated with it.</p>
     *
     * @param digest Digest of a BLOB.
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     * @return registry attributes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistryArtifactProperties getRegistryArtifactProperties(String digest) {
        return this.getRegistryArtifactPropertiesWithResponse(digest, Context.NONE).getValue();
    }

    /**
     * List registry artifacts of a repository.
     *
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     * @return registry artifact properties.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RegistryArtifactProperties> listRegistryArtifacts() {
        return this.listRegistryArtifacts(null);
    }

    /**
     * List registry artifacts of a repository.
     *
     * @param options options associated with the list registry artifacts operation.
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     * @return registry artifact properties.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RegistryArtifactProperties> listRegistryArtifacts(ListRegistryArtifactOptions options) {
        return new PagedIterable<>(this.serviceClient.listRegistryArtifacts(options));
    }

    /**
     * Get tag attributes by tag.
     *
     * @param tag Tag name.
     * @param context Context associated with the operation.
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag attributes by tag.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)

    public Response<TagProperties> getTagPropertiesWithResponse(String tag, Context context) {
        return this.serviceClient.getTagPropertiesWithResponse(tag, context).block();
    }

    /**
     * Get tag attributes by tag.
     *
     * @param tag Tag name.
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag attributes by tag.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TagProperties getTagProperties(String tag) {
        return getTagPropertiesWithResponse(tag, Context.NONE).getValue();
    }

    /**
     * List tags of a repository.
     *
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of tag details.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TagProperties> listTags() {
        return listTags(null);
    }

    /**
     * List tags of a repository.
     *
     * @param options options associated with the operation.
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of tag details.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TagProperties> listTags(ListTagsOptions options) {
        return new PagedIterable<TagProperties>(serviceClient.listTags(options));
    }

    /**
     * Update the content properties of the repository.
     *
     * @param value Repository attribute value.
     * @param context Context associated with the operation.
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> setPropertiesWithResponse(ContentProperties value, Context context) {
        return this.serviceClient.setPropertiesWithResponse(value, context).block();
    }

    /**
     * Update the content properties of the repository.
     *
     * @param value Repository attribute value.
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setProperties(ContentProperties value) {
        this.setPropertiesWithResponse(value, Context.NONE).getValue();
    }

    /**
     * Update tag properties.
     *
     * @param tag Tag name.
     * @param value Repository attribute value.
     * @param context Context associated with the operation.
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setTagPropertiesWithResponse(String tag, ContentProperties value, Context context) {
        return this.serviceClient.setTagPropertiesWithResponse(tag, value, context).block();
    }

    /**
     * Update tag properties.
     *
     * @param tag Tag name.
     * @param value Repository attribute value.
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setTagProperties(String tag, ContentProperties value) {
        this.setTagPropertiesWithResponse(tag, value, Context.NONE).getValue();
    }

    /**
     * Update properties of a manifest.
     *
     * @param digest Digest of a BLOB.
     * @param value Repository attribute value.
     * @param context Context associated with the operation.
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    public Response<Void> setManifestPropertiesWithResponse(String digest, ContentProperties value, Context context) {
        return this.serviceClient.setManifestPropertiesWithResponse(digest, value, context).block();
    }

    /**
     * Update properties of a manifest.
     *
     * @param digest Digest of a BLOB.
     * @param value Repository attribute value.
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void setManifestProperties(String digest, ContentProperties value) {
        this.setManifestPropertiesWithResponse(digest, value, Context.NONE).getValue();
    }
}
