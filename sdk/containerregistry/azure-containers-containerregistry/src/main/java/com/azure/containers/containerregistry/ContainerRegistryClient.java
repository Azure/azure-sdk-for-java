// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.models.DeleteRepositoryResult;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Initializes a new instance of the synchronous ContainerRegistry type. */
@ServiceClient(builder = ContainerRegistryClientBuilder.class)
public final class ContainerRegistryClient {
    private final ContainerRegistryAsyncClient asyncClient;

    ContainerRegistryClient(ContainerRegistryAsyncClient asyncClient) {
        this.asyncClient = asyncClient;
    }

    /**
     * List all the repository names in this registry.
     *
     * @return list of repositories.
     * @throws ClientAuthenticationException thrown if the client credentials do not have access to perform this operation.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> listRepositories() {
        return new PagedIterable<String>(asyncClient.listRepositories());
    }

    /**
     * Delete the repository identified by 'name'.
     *
     * @param name Name of the repository (including the namespace).
     * @return deleted repository properties.
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException thrown if the repository to be deleted does not exist.
     * @throws NullPointerException thrown if the name is null.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeleteRepositoryResult deleteRepository(String name) {
        return this.deleteRepositoryWithResponse(name, Context.NONE).getValue();
    }

    /**
     * Delete the repository identified by 'name'.
     *
     * @param name Name of the repository (including the namespace).
     * @param context The context to associate with this operation.
     * @return deleted repository properties.
     * @throws ClientAuthenticationException thrown if the client's credentials do not have access to modify the namespace.
     * @throws ResourceNotFoundException thrown if the repository to be deleted does not exist.
     * @throws NullPointerException thrown if the name is null.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeleteRepositoryResult> deleteRepositoryWithResponse(String name, Context context) {
        return this.asyncClient.deleteRepositoryWithResponse(name, context).block();
    }

    /**
     * Get an instance of repository client from the registry client.
     *
     * @param repository Name of the repository (including the namespace).
     * @return repository client.
     */
    public ContainerRepositoryClient getRepositoryClient(String repository) {
        return new ContainerRepositoryClient(this.asyncClient.getRepositoryClient(repository));
    }
}
