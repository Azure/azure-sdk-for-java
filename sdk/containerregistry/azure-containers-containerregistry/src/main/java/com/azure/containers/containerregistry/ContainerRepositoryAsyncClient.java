// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry;

import com.azure.containers.containerregistry.implementation.ContainerRegistriesImpl;
import com.azure.containers.containerregistry.implementation.ContainerRegistryImpl;
import com.azure.containers.containerregistry.implementation.ContainerRegistryImplBuilder;
import com.azure.containers.containerregistry.implementation.ContainerRegistryRepositoriesImpl;
import com.azure.containers.containerregistry.implementation.models.ManifestAttributesBase;
import com.azure.containers.containerregistry.implementation.models.ManifestAttributesManifestReferences;
import com.azure.containers.containerregistry.implementation.models.TagAttributesBase;
import com.azure.containers.containerregistry.models.ContainerRegistryServiceVersion;
import com.azure.containers.containerregistry.models.ContentProperties;
import com.azure.containers.containerregistry.models.DeleteRepositoryResult;
import com.azure.containers.containerregistry.models.ListRegistryArtifactOptions;
import com.azure.containers.containerregistry.models.ListTagsOptions;
import com.azure.containers.containerregistry.models.RegistryArtifactProperties;
import com.azure.containers.containerregistry.models.RepositoryProperties;
import com.azure.containers.containerregistry.models.TagProperties;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import reactor.core.publisher.Mono;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import static com.azure.core.util.FluxUtil.monoError;
import static com.azure.core.util.FluxUtil.withContext;

/**
 * This class provides a client that contains all the operations for repositories in Azure Container Registry.
 * Operations allowed by the client are listing, retrieving, deleting, setting writeable properties.
 * These operations are supported on the repository and the respective tags and manifests in it.
 *
 * <p><strong>Instantiating an asynchronous Container Repository Client</strong></p>
 *
 * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.instantiation}
 *
 * <p>View {@link ContainerRepositoryClientBuilder this} for additional ways to construct the client.</p>
 *
 * @see ContainerRepositoryClientBuilder
 */
@ServiceClient(builder = ContainerRepositoryClientBuilder.class, isAsync = true)
public final class ContainerRepositoryAsyncClient {
    private final ContainerRegistryRepositoriesImpl serviceClient;
    private final ContainerRegistriesImpl registriesImplClient;
    private final String repositoryName;
    private final String endpoint;
    private final String apiVersion;

    private final ClientLogger logger = new ClientLogger(ContainerRepositoryAsyncClient.class);

    /**
     * Creates a ContainerRepositoryAsyncClient that sends requests to the given repository in the container registry service at {@code endpoint}.
     * Each service call goes through the {@code pipeline}.
     * @param repositoryName The name of the repository on which the service operations are performed.
     * @param endpoint The URL string for the Azure Container Registry service.
     * @param httpPipeline HttpPipeline that the HTTP requests and responses flow through.
     * @param version {@link ContainerRegistryServiceVersion} of the service to be used when making requests.
     */
    ContainerRepositoryAsyncClient(String repositoryName, HttpPipeline httpPipeline, String endpoint, String version) {
        if (repositoryName == null) {
            throw logger.logExceptionAsError(new NullPointerException("'repositoryName' can't be null"));
        }

        ContainerRegistryImpl registryImpl = new ContainerRegistryImplBuilder()
            .pipeline(httpPipeline)
            .url(endpoint).buildClient();

        this.endpoint = endpoint;
        this.repositoryName = repositoryName;
        this.registriesImplClient = registryImpl.getContainerRegistries();
        this.serviceClient = registryImpl.getContainerRegistryRepositories();
        this.apiVersion = version;
    }

    /**
     * Gets the Azure Container Registry service endpoint for the current instance.
     * @return The service endpoint for the current instance.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Gets the Azure Container Registry name for the current instance.
     * @return Return the registry name.
     */
    public String getRegistry() {
        return this.endpoint;
    }

    /**
     * Gets the repository name for the current instance.
     * @return Name of the repository for the current instance.
     * */
    public String getRepository() {
        return this.repositoryName;
    }

    /**
     * Delete the repository in the Azure Container Registry for the given {@link #getRepository() repository}.
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Delete the repository.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.deleteRepositoryWithResponse}
     *
     * @return A REST response containing the result of the repository delete operation. It returns the count of the tags and
     * artifacts that are deleted as part of the repository delete.
     * @throws ClientAuthenticationException thrown if the client does not have access to the repository.
     * @throws ResourceNotFoundException thrown if the repository with the given name was not found.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeleteRepositoryResult>> deleteWithResponse() {
        return withContext(context -> deleteWithResponse(context));
    }

    Mono<Response<DeleteRepositoryResult>> deleteWithResponse(Context context) {
        try {
            return this.registriesImplClient.deleteRepositoryWithResponseAsync(repositoryName, context)
                .onErrorMap(Utils::mapException);
        } catch (RuntimeException ex) {
            return monoError(logger, ex);
        }
    }

    /**
     * Delete the repository in the Azure Container Registry for the given {@link #getRepository() repository}.
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Delete the repository.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.deleteRepository}
     *
     * @return It returns the count of the tags and artifacts that are deleted as part of the repository delete.
     * @throws ClientAuthenticationException thrown if the client does not have access to the repository.
     * @throws ResourceNotFoundException thrown if the repository with the given name was not found.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeleteRepositoryResult> delete() {
        return this.deleteWithResponse().flatMap(FluxUtil::toMono);
    }

    /**
     * Deletes the registry artifact with the matching digest in the given {@link #getRepository() respository.}
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Delete the registry artifact.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.deleteRegistryArtifactWithResponse}
     *
     * @param digest The digest that uniquely identifies the artifact to be deleted.
     * @return A REST response with completion signal.
     * @throws ClientAuthenticationException thrown if the client does not have access to the repository.
     * @throws ResourceNotFoundException thrown if the given digest was not found.
     * @throws NullPointerException thrown if digest is null.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRegistryArtifactWithResponse(String digest) {
        return withContext(context -> this.deleteRegistryArtifactWithResponse(digest, context));
    }

    Mono<Response<Void>> deleteRegistryArtifactWithResponse(String digest, Context context) {
        try {
            if (digest == null) {
                return monoError(logger, new NullPointerException("'digest' cannot be null"));
            }

            return this.serviceClient.deleteManifestWithResponseAsync(repositoryName, digest, context)
                .onErrorMap(Utils::mapException);
        } catch (RuntimeException ex) {
            return monoError(logger, ex);
        }
    }

    /**
     * Deletes the registry artifact with the matching digest in the given {@link #getRepository() respository.}
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Delete the registry artifact.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.deleteRegistryArtifact}
     *
     * @param digest The digest that uniquely identifies the artifact to be deleted.
     * @return the completion.
     * @throws ClientAuthenticationException thrown if the client does not have access to the repository.
     * @throws ResourceNotFoundException thrown if the given digest was not found.
     * @throws NullPointerException thrown if digest is null.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteRegistryArtifact(String digest) {
        return this.deleteRegistryArtifactWithResponse(digest).flatMap(FluxUtil::toMono);
    }

    /**
     * Deletes the tag with the matching tag name for the given {@link #getRepository() repository}.
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Delete the tag for the given repository.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.deleteTagWithResponse}
     *
     * @param tag The name of the tag that uniquely identifies the tag that needs to be deleted.
     * @return A REST response with completion signal.
     * @throws ClientAuthenticationException thrown if the client does not have access to the repository.
     * @throws ResourceNotFoundException thrown if the given tag was not found.
     * @throws NullPointerException thrown if tag is null.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTagWithResponse(String tag) {
        return withContext(context -> this.deleteTagWithResponse(tag, context));
    }

    Mono<Response<Void>> deleteTagWithResponse(String tag, Context context) {
        try {
            if (tag == null) {
                return monoError(logger, new NullPointerException("'digest' cannot be null"));
            }

            return this.serviceClient.deleteTagWithResponseAsync(repositoryName, tag, context)
                .onErrorMap(Utils::mapException);
        } catch (RuntimeException ex) {
            return monoError(logger, ex);
        }
    }

    /**
     * Deletes the tag with the matching tag name for the given {@link #getRepository() repository}.
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Delete the tag for the given repository.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.deleteTag}
     *
     * @param tag The name of the tag that uniquely identifies the tag that needs to be deleted.
     * @return The completion.
     * @throws ClientAuthenticationException thrown if the client does not have access to the repository.
     * @throws ResourceNotFoundException thrown if the given tag was not found.
     * @throws NullPointerException thrown if tag is null.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteTag(String tag) {
        return this.deleteTagWithResponse(tag).flatMap(FluxUtil::toMono);
    }

    /**
     * Gets the {@link RepositoryProperties properties} associated with the given {@link #getRepository() repository}.
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Get the properties for the given repository.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.getPropertiesWithResponse}
     *
     * @return A REST response with the {@link RepositoryProperties properties} associated with the given {@link #getRepository() repository}.
     * @throws ClientAuthenticationException thrown if the client have access to the repository.
     * @throws ResourceNotFoundException thrown if the repository with the given name was not found.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RepositoryProperties>> getPropertiesWithResponse() {
        return withContext(context -> this.getPropertiesWithResponse(context));
    }

    Mono<Response<RepositoryProperties>> getPropertiesWithResponse(Context context) {
        try {
            if (context == null) {
                return monoError(logger, new NullPointerException("'context' cannot be null."));
            }
            return this.serviceClient.getPropertiesWithResponseAsync(repositoryName, context)
                .onErrorMap(Utils::mapException);
        } catch (RuntimeException ex) {
            return monoError(logger, ex);
        }
    }

    /**
     * Gets the {@link RepositoryProperties properties} associated with the given {@link #getRepository() repository}.
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Get the properties for the given repository.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.getProperties}
     *
     * @return The {@link RepositoryProperties properties} associated with the given {@link #getRepository() repository}.
     * @throws ClientAuthenticationException thrown if the client does not have access to the repository.
     * @throws ResourceNotFoundException thrown if the repository with the given name was not found.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RepositoryProperties> getProperties() {
        return this.getPropertiesWithResponse().flatMap(FluxUtil::toMono);
    }

    /**
     * Gets the {@link RegistryArtifactProperties properties} associated with an artifact in given {@link #getRepository() repository}.
     *
     * <p>This method can take in both a digest as well as a tag.<br>
     * In case a tag is provided it calls the service to get the digest associated with the given tag.</p>
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Get the properties for the given repository.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.getRegistryArtifactPropertiesWithResponse}
     *
     * @param tagOrDigest name of a tag or a digest that uniquely identifies an artifact.
     * @return A REST response containing {@link RegistryArtifactProperties properties} associated with the given {@code tagOrDigest}.
     * @throws ClientAuthenticationException thrown if the client does not have access to the repository.
     * @throws ResourceNotFoundException thrown if the given digest was not found.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RegistryArtifactProperties>> getRegistryArtifactPropertiesWithResponse(String tagOrDigest) {
        return withContext(context -> this.getRegistryArtifactPropertiesWithResponse(tagOrDigest, context));
    }

    Mono<Response<RegistryArtifactProperties>> getRegistryArtifactPropertiesWithResponse(String tagOrDigest, Context context) {
        try {
            Mono<String> getTagMono = tagOrDigest.contains(":")
                ? Mono.just(tagOrDigest)
                : this.getTagProperties(tagOrDigest).map(a -> a.getDigest());

            return getTagMono
                .flatMap(digest -> this.serviceClient.getRegistryArtifactPropertiesWithResponseAsync(repositoryName, digest))
                .map(res -> Utils.mapResponse(res, this::mapArtifactProperties))
                .onErrorMap(Utils::mapException);
        } catch (RuntimeException ex) {
            return monoError(logger, ex);
        }
    }

    /**
     * We want both the list artifacts call and the get artifact call share the same model.
     * which the swagger does not.
     * As a result we need to ensure that the we can map one implementation to the other.
     * Also, we want to customize the type of one of the fields to ensure minimum models are exposed.
     * @param propsImpl implementation model for this type.
     * @return public model for propsImpl
     */
    public RegistryArtifactProperties mapArtifactProperties(com.azure.containers.containerregistry.implementation.models.RegistryArtifactProperties propsImpl) {
        if (propsImpl == null) {
            return null;
        }

        List<RegistryArtifactProperties> registryArtifacts = getRegistryArtifacts(propsImpl.getReferences());

        return new RegistryArtifactProperties(
            propsImpl.getRepository(),
            propsImpl.getDigest(),
            propsImpl.getWriteableProperties(),
            registryArtifacts,
            propsImpl.getCpuArchitecture(),
            propsImpl.getOperatingSystem(),
            propsImpl.getCreatedOn(),
            propsImpl.getLastUpdatedOn(),
            propsImpl.getTags(),
            propsImpl.getSize());
    }

    /**
     * Gets the {@link RegistryArtifactProperties properties} associated with an artifact in given {@link #getRepository() repository}.
     *
     * <p>This method can take in both a digest as well as a tag.<br>
     * In case a tag is provided it calls the service to get the digest associated with the given tag.</p>
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Get the properties for the given repository.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.getRegistryArtifactProperties}.
     *
     * @param tagOrDigest name of the tag or digest that uniquely identifies an artifact in the repository.
     * @return The {@link RegistryArtifactProperties properties} associated with the given {@code tagOrDigest}.
     * @throws ClientAuthenticationException thrown if the client does not have access to the repository.
     * @throws ResourceNotFoundException thrown if the given digest was not found.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RegistryArtifactProperties> getRegistryArtifactProperties(String tagOrDigest) {
        return this.getRegistryArtifactPropertiesWithResponse(tagOrDigest).flatMap(FluxUtil::toMono);
    }

    /**
     * Fetches all the artifacts associated with the given {@link #getRepository() repository}.
     *
     * <p> If you would like to specify the order in which the tags are returned please
     * use the overload that takes in the options parameter {@link #listTags(ListTagsOptions) listTags}
     * No assumptions on the order can be made if no options are provided to the service.
     * </p>
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Retrieve all artifacts associated with the given repository.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.listRegistryArtifacts}.
     *
     * @return {@link PagedFlux} of RegistryArtifactProperties for all the artifacts in the given repository.
     * @throws ClientAuthenticationException thrown if the client does not have access to the repository.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RegistryArtifactProperties> listRegistryArtifacts() {
        return listRegistryArtifacts(null);
    }

    /**
     * Fetches all the artifacts associated with the given {@link #getRepository() repository}.
     *
     * <p> The method supports options to select the order in which the artifacts are returned by the service.
     * Currently the service supports an ascending or descending order based on the last updated time for the artifacts.
     * No assumptions on the order can be made if no options are provided to the service. </p>
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Retrieve all artifacts associated with the given repository from the most recently updated to the last.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.listRegistryArtifactsWithOptions}.
     *
     * @param options the options that specifies the order in which the artifacts are returned by the service.
     * @return {@link PagedFlux} of the artifacts for the given repository in the order specified by the options.
     * @throws ClientAuthenticationException thrown if the client does not have access to the repository.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RegistryArtifactProperties> listRegistryArtifacts(ListRegistryArtifactOptions options) {
        return new PagedFlux<>(
            (pageSize) -> withContext(context -> listRegistryArtifactsSinglePageAsync(pageSize, options, context)),
            (token, pageSize) -> withContext(context -> listRegistryArtifactsNextSinglePageAsync(token, context)));
    }

    Mono<PagedResponse<RegistryArtifactProperties>> listRegistryArtifactsSinglePageAsync(Integer pageSize, ListRegistryArtifactOptions options, Context context) {
        try {
            if (pageSize != null && pageSize < 0) {
                return monoError(logger, new IllegalArgumentException("'pageSize' cannot be negative."));
            }

            String orderBy = null;
            if (options != null && options.getRegistryArtifactOrderBy() != null) {
                orderBy = options.getRegistryArtifactOrderBy().toString();
            }

            return this.serviceClient.getManifestsSinglePageAsync(repositoryName, null, pageSize, orderBy, context)
                .map(res -> Utils.getPagedResponseWithContinuationToken(res, this::getRegistryArtifactsProperties))
                .onErrorMap(Utils::mapException);
        } catch (RuntimeException e) {
            return monoError(logger, e);
        }
    }

    Mono<PagedResponse<RegistryArtifactProperties>> listRegistryArtifactsNextSinglePageAsync(String nextLink, Context context) {
        try {
            return this.serviceClient.getManifestsNextSinglePageAsync(nextLink, context)
                .map(res -> Utils.getPagedResponseWithContinuationToken(res, this::getRegistryArtifactsProperties))
                .onErrorMap(Utils::mapException);
        } catch (RuntimeException e) {
            return monoError(logger, e);
        }
    }

    private List<RegistryArtifactProperties> getRegistryArtifactsProperties(List<ManifestAttributesBase> baseArtifacts) {
        if (baseArtifacts == null) {
            return null;
        }

        return baseArtifacts.stream().map(value -> new RegistryArtifactProperties(
                repositoryName,
                value.getDigest(),
                value.getWriteableProperties(),
                getRegistryArtifacts(value.getReferences()),
                value.getCpuArchitecture(),
                value.getOperatingSystem(),
                value.getCreatedOn(),
                value.getLastUpdatedOn(),
                value.getTags(),
                value.getSize()
            )

        ).collect(Collectors.toList());
    }

    private List<RegistryArtifactProperties> getRegistryArtifacts(List<ManifestAttributesManifestReferences> artifacts) {
        if (artifacts == null) {
            return null;
        }

        return artifacts.stream()
            .map(artifact -> new RegistryArtifactProperties(
                repositoryName,
                artifact.getDigest(),
                null,
                null,
                artifact.getCpuArchitecture(),
                artifact.getOperatingSystem(),
                null,
                null,
                null,
                null
            )).collect(Collectors.toList());
    }

    /**
     * Gets the tag properties associated with a given tag in the {@link #getRepository() repository}.
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Retrieve the properties associated with the given tag.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.getTagPropertiesWithResponse}.
     *
     * @param tag name of the tag that uniquely identifies a given tag.
     * @return A REST response with the {@link TagProperties properties} associated with the given tag.
     * @throws ClientAuthenticationException thrown if the client does not have access to the repository.
     * @throws ResourceNotFoundException thrown if the given tag was not found.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TagProperties>> getTagPropertiesWithResponse(String tag) {
        return withContext(context -> getTagPropertiesWithResponse(tag, context));
    }

    Mono<Response<TagProperties>> getTagPropertiesWithResponse(String tag, Context context) {
        try {
            if (tag == null) {
                return monoError(logger, new NullPointerException("'tag' cannot be null."));
            }

            return this.serviceClient.getTagPropertiesWithResponseAsync(repositoryName, tag, context)
                .onErrorMap(Utils::mapException);
        } catch (RuntimeException ex) {
            return monoError(logger, ex);
        }
    }

    /**
     * Gets the tag properties associated with a given tag in the {@link #getRepository() repository}.
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Retrieve the properties associated with the given tag.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.getTagProperties}.
     *
     * @param tag name of the tag that uniquely identifies a given tag.
     * @return The {@link TagProperties properties} associated with the given tag.
     * @throws ClientAuthenticationException thrown if the client does not have access to the repository.
     * @throws ResourceNotFoundException thrown if the given tag was not found.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TagProperties> getTagProperties(String tag) {
        return this.getTagPropertiesWithResponse(tag).flatMap(FluxUtil::toMono);
    }

    /**
     * Fetches all the tags associated with the given {@link #getRepository() repository}.
     *
     * <p> If you would like to specify the order in which the tags are returned please
     * use the overload that takes in the options parameter {@link #listTags(ListTagsOptions) listTags}
     * No assumptions on the order can be made if no options are provided to the service.
     * </p>
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Retrieve all the tags associated with the given repository from the most recently updated to the last.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.listTagsWithOptions}.
     *
     * @return {@link PagedFlux} of the artifacts for the given repository in the order specified by the options.
     * @throws ClientAuthenticationException thrown if the client does not have access to the repository.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<TagProperties> listTags() {
        return listTags(null);
    }

    /**
     * Fetches all the tags associated with the given {@link #getRepository() repository}.
     *
     * <p> The method supports options to select the order in which the tags are returned by the service.
     * Currently the service supports an ascending or descending order based on the last updated time of the tag.
     * No assumptions on the order can be made if no options are provided to the service.
     * </p>
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Retrieve all the tags associated with the given repository from the most recently updated to the last.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.listTagsWithOptions}.
     *
     * @param options The options that specifies the order in which the tags should be returned by the service.
     * @return {@link PagedFlux} of the artifacts for the given repository in the order specified by the options.
     * @throws ClientAuthenticationException thrown if the client does not have access to the repository.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<TagProperties> listTags(ListTagsOptions options) {
        return new PagedFlux<>(
            (pageSize) -> withContext(context -> listTagsSinglePageAsync(pageSize, options, context)),
            (token, pageSize) -> withContext(context -> listTagsNextSinglePageAsync(token, context)));
    }

    Mono<PagedResponse<TagProperties>> listTagsSinglePageAsync(Integer pageSize, ListTagsOptions options, Context context) {
        try {
            if (pageSize != null && pageSize < 0) {
                return monoError(logger, new IllegalArgumentException("'pageSize' cannot be negative."));
            }

            String orderBy = null;
            if (options != null && options.getTagOrderBy() != null) {
                orderBy = options.getTagOrderBy().toString();
            }

            return this.serviceClient.getTagsSinglePageAsync(repositoryName, null, pageSize, orderBy, null, context)
                .map(res -> Utils.getPagedResponseWithContinuationToken(res, this::getTagProperties))
                .onErrorMap(Utils::mapException);
        } catch (RuntimeException e) {
            return monoError(logger, e);
        }
    }

    private List<TagProperties> getTagProperties(List<TagAttributesBase> baseValues) {
        Objects.requireNonNull(baseValues);

        return baseValues.stream().map(value -> new TagProperties(
            value.getName(),
            repositoryName,
            value.getDigest(),
            value.getWriteableProperties(),
            value.getCreatedOn(),
            value.getLastUpdatedOn()
        )).collect(Collectors.toList());
    }

    Mono<PagedResponse<TagProperties>> listTagsNextSinglePageAsync(String nextLink, Context context) {
        try {
            return this.serviceClient.getTagsNextSinglePageAsync(nextLink, context)
                .map(res -> Utils.getPagedResponseWithContinuationToken(res, this::getTagProperties));
        } catch (RuntimeException e) {
            return monoError(logger, e);
        }
    }

    /**
     * Update the writeable properties {@link ContentProperties} of the given {@link #getRepository() repository}.
     * These properties set the update, delete and retrieve options of the repository.
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Update the writeable properties for the given repository.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.updatePropertiesWithResponse}.
     *
     * @param value {@link ContentProperties writeable properties} that need to be updated for the repository.
     * @return A REST response with the completion.
     * @throws ClientAuthenticationException thrown if the client does not have access to the repository.
     * @throws ResourceNotFoundException thrown if the repository with the given name was not found.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updatePropertiesWithResponse(ContentProperties value) {
        return withContext(context -> this.updatePropertiesWithResponse(value, context));
    }

    Mono<Response<Void>> updatePropertiesWithResponse(ContentProperties value, Context context) {
        try {
            if (value == null) {
                return monoError(logger, new NullPointerException("'value' cannot be null."));
            }

            return this.serviceClient.setPropertiesWithResponseAsync(repositoryName, value, context)
                .onErrorMap(Utils::mapException);
        } catch (RuntimeException e) {
            return monoError(logger, e);
        }
    }

    /**
     * Update the writeable properties {@link ContentProperties} of the given {@link #getRepository() repository}.
     * These properties set the update, delete and retrieve options of the repository.
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Update the writeable properties for the given repository.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.updateProperties}.
     *
     * @param value {@link ContentProperties writeable properties} that need to be updated for the repository.
     * @return The completion.
     * @throws ClientAuthenticationException thrown if the client does not have access to the repository.
     * @throws ResourceNotFoundException thrown if the repository with the given name was not found.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateProperties(ContentProperties value) {
        return this.updatePropertiesWithResponse(value).flatMap(FluxUtil::toMono);
    }

    /**
     * Update the writeable properties {@link ContentProperties} of the tag with the given name {@code tag}..
     * These properties set whether the given tag can be updated, deleted and retrieved.
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Update the writeable properties of a given tag.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.updateTagPropertiesWithResponse}.
     *
     * @param tag Name of the tag that uniquely identifies it.
     * @param value {@link ContentProperties value} to be set.
     * @return A REST response for completion.
     * @throws ClientAuthenticationException thrown if the client does not have access to repository.
     * @throws ResourceNotFoundException thrown if the given tag was not found.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateTagPropertiesWithResponse(
            String tag, ContentProperties value) {
        return withContext(context -> this.updateTagPropertiesWithResponse(tag, value, context));
    }

    Mono<Response<Void>> updateTagPropertiesWithResponse(
        String tag, ContentProperties value, Context context) {
        try {
            if (tag == null) {
                return monoError(logger, new NullPointerException("'tag' cannot be null."));
            }

            if (value == null) {
                return monoError(logger, new NullPointerException("'value' cannot be null."));
            }

            return this.serviceClient.updateTagAttributesWithResponseAsync(repositoryName, tag, value, context)
                .onErrorMap(Utils::mapException);
        } catch (RuntimeException e) {
            return monoError(logger, e);
        }
    }

    /**
     * Update the writeable properties {@link ContentProperties} of the tag with the given name {@code tag}.
     * These properties set whether the given tag can be updated, deleted and retrieved.
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Update the writeable properties of a given tag.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.updateTagPropertiesWithResponse}.
     *
     * @param tag Name of the tag that uniquely identifies it.
     * @param value {@link ContentProperties value} to be set.
     * @return The completion.
     * @throws ClientAuthenticationException thrown if the client does not have access to repository.
     * @throws ResourceNotFoundException thrown if the given tag was not found.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateTagProperties(String tag, ContentProperties value) {
        return this.updateTagPropertiesWithResponse(tag, value).flatMap(FluxUtil::toMono);
    }

    /**
     * Update the writeable properties {@link ContentProperties} of the artifact with the given {@code digest}.
     * These properties set whether the given manifest can be updated, deleted and retrieved.
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Update the writeable properties of a given manifest.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.updateManifestPropertiesWithResponse}.
     *
     * @param digest Digest of the manifest to be updated.
     * @param value {@link ContentProperties value} to be set.
     * @return A REST response for the completion.
     * @throws ClientAuthenticationException thrown if the client does not have access to repository.
     * @throws ResourceNotFoundException thrown if the given digest was not found.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateManifestPropertiesWithResponse(
            String digest, ContentProperties value) {
        return withContext(context -> this.updateManifestPropertiesWithResponse(digest, value, context));
    }

    Mono<Response<Void>> updateManifestPropertiesWithResponse(String digest, ContentProperties value, Context context) {
        try {
            if (digest == null) {
                return monoError(logger, new NullPointerException("'digest' cannot be null."));
            }

            if (value == null) {
                return monoError(logger, new NullPointerException("'value' cannot be null."));
            }

            return this.serviceClient.updateManifestAttributesWithResponseAsync(repositoryName, digest, value, context)
                .onErrorMap(Utils::mapException);
        } catch (RuntimeException e) {
            return monoError(logger, e);
        }
    }

    /**
     * Update the writeable properties {@link ContentProperties} of the artifact with the given {@code digest}.
     * These properties set whether the given manifest can be updated, deleted and retrieved.
     *
     * <p><strong>Code Samples</strong></p>
     *
     * <p>Update the writeable properties of a given manifest.</p>
     *
     * {@codesnippet com.azure.containers.containerregistry.async.repositoryclient.updateManifestProperties}.
     *
     * @param digest Digest of the manifest to be updated.
     * @param value {@link ContentProperties value} to be set.
     * @return The completion.
     * @throws ClientAuthenticationException thrown if the client does not have access to repository.
     * @throws ResourceNotFoundException thrown if the given digest was not found.
     * @throws HttpResponseException thrown if any other unexpected exception is returned by the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateManifestProperties(String digest, ContentProperties value) {
        return this.updateManifestPropertiesWithResponse(digest, value).flatMap(FluxUtil::toMono);
    }
}
