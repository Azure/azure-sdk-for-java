// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.containers.containerregistry.implementation;

import com.azure.containers.containerregistry.implementation.models.AcrErrorsException;
import com.azure.containers.containerregistry.implementation.models.ContainerRegistryBlobsCheckBlobExistsResponse;
import com.azure.containers.containerregistry.implementation.models.ContainerRegistryBlobsCheckChunkExistsResponse;
import com.azure.containers.containerregistry.implementation.models.ContainerRegistryBlobsCompleteUploadResponse;
import com.azure.containers.containerregistry.implementation.models.ContainerRegistryBlobsGetUploadStatusResponse;
import com.azure.containers.containerregistry.implementation.models.ContainerRegistryBlobsMountBlobResponse;
import com.azure.containers.containerregistry.implementation.models.ContainerRegistryBlobsStartUploadResponse;
import com.azure.containers.containerregistry.implementation.models.ContainerRegistryBlobsUploadChunkResponse;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Head;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.StreamResponse;
import com.azure.core.util.Context;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ContainerRegistryBlobs. */
public final class ContainerRegistryBlobsImpl {
    /** The proxy service used to perform REST calls. */
    private final ContainerRegistryBlobsService service;

    /** The service client containing this operation class. */
    private final AzureContainerRegistryImpl client;

    /**
     * Initializes an instance of ContainerRegistryBlobsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ContainerRegistryBlobsImpl(AzureContainerRegistryImpl client) {
        this.service =
                RestProxy.create(
                        ContainerRegistryBlobsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureContainerRegistryContainerRegistryBlobs to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{url}")
    @ServiceInterface(name = "AzureContainerRegist")
    public interface ContainerRegistryBlobsService {
        @Get("/v2/{name}/blobs/{digest}")
        @ExpectedResponses({200, 307})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<StreamResponse> getBlob(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @PathParam("digest") String digest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Head("/v2/{name}/blobs/{digest}")
        @ExpectedResponses({200, 307})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<ContainerRegistryBlobsCheckBlobExistsResponse> checkBlobExists(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @PathParam("digest") String digest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/v2/{name}/blobs/{digest}")
        @ExpectedResponses({202, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<StreamResponse> deleteBlob(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @PathParam("digest") String digest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/v2/{name}/blobs/uploads/")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<ContainerRegistryBlobsMountBlobResponse> mountBlob(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @QueryParam("from") String from,
                @QueryParam("mount") String mount,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/{nextBlobUuidLink}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<ContainerRegistryBlobsGetUploadStatusResponse> getUploadStatus(
                @HostParam("url") String url,
                @PathParam(value = "nextBlobUuidLink", encoded = true) String nextLink,
                @HeaderParam("Accept") String accept,
                Context context);

        @Patch("/{nextBlobUuidLink}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<ContainerRegistryBlobsUploadChunkResponse> uploadChunk(
                @HostParam("url") String url,
                @PathParam(value = "nextBlobUuidLink", encoded = true) String nextLink,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> value,
                @HeaderParam("Content-Length") long contentLength,
                @HeaderParam("Accept") String accept,
                Context context);

        @Put("/{nextBlobUuidLink}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<ContainerRegistryBlobsCompleteUploadResponse> completeUpload(
                @HostParam("url") String url,
                @QueryParam("digest") String digest,
                @PathParam(value = "nextBlobUuidLink", encoded = true) String nextLink,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> value,
                @HeaderParam("Content-Length") Long contentLength,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/{nextBlobUuidLink}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<Response<Void>> cancelUpload(
                @HostParam("url") String url,
                @PathParam(value = "nextBlobUuidLink", encoded = true) String nextLink,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/v2/{name}/blobs/uploads/")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<ContainerRegistryBlobsStartUploadResponse> startUpload(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/v2/{name}/blobs/{digest}")
        @ExpectedResponses({206})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<StreamResponse> getChunk(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @PathParam("digest") String digest,
                @HeaderParam("Range") String range,
                @HeaderParam("Accept") String accept,
                Context context);

        @Head("/v2/{name}/blobs/{digest}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AcrErrorsException.class)
        Mono<ContainerRegistryBlobsCheckChunkExistsResponse> checkChunkExists(
                @HostParam("url") String url,
                @PathParam("name") String name,
                @PathParam("digest") String digest,
                @HeaderParam("Range") String range,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * Retrieve the blob from the registry identified by digest.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> getBlobWithResponseAsync(String name, String digest, Context context) {
        final String accept = "application/octet-stream";
        return service.getBlob(this.client.getUrl(), name, digest, accept, context);
    }

    /**
     * Same as GET, except only the headers are returned.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ContainerRegistryBlobsCheckBlobExistsResponse> checkBlobExistsWithResponseAsync(
            String name, String digest, Context context) {
        final String accept = "application/json";
        return service.checkBlobExists(this.client.getUrl(), name, digest, accept, context);
    }

    /**
     * Removes an already uploaded blob.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> deleteBlobWithResponseAsync(String name, String digest, Context context) {
        final String accept = "application/octet-stream";
        return service.deleteBlob(this.client.getUrl(), name, digest, accept, context);
    }

    /**
     * Mount a blob identified by the `mount` parameter from another repository.
     *
     * @param name Name of the image (including the namespace).
     * @param from Name of the source repository.
     * @param mount Digest of blob to mount from the source repository.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ContainerRegistryBlobsMountBlobResponse> mountBlobWithResponseAsync(
            String name, String from, String mount, Context context) {
        final String accept = "application/json";
        return service.mountBlob(this.client.getUrl(), name, from, mount, accept, context);
    }

    /**
     * Retrieve status of upload identified by uuid. The primary purpose of this endpoint is to resolve the current
     * status of a resumable upload.
     *
     * @param nextLink Link acquired from upload start or previous chunk. Note, do not include initial / (must do
     *     substring(1) ).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ContainerRegistryBlobsGetUploadStatusResponse> getUploadStatusWithResponseAsync(
            String nextLink, Context context) {
        final String accept = "application/json";
        return service.getUploadStatus(this.client.getUrl(), nextLink, accept, context);
    }

    /**
     * Upload a stream of data without completing the upload.
     *
     * @param nextLink Link acquired from upload start or previous chunk. Note, do not include initial / (must do
     *     substring(1) ).
     * @param value Raw data of blob.
     * @param contentLength The contentLength parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ContainerRegistryBlobsUploadChunkResponse> uploadChunkWithResponseAsync(
            String nextLink, Flux<ByteBuffer> value, long contentLength, Context context) {
        final String accept = "application/json";
        return service.uploadChunk(this.client.getUrl(), nextLink, value, contentLength, accept, context);
    }

    /**
     * Complete the upload, providing all the data in the body, if necessary. A request without a body will just
     * complete the upload with previously uploaded content.
     *
     * @param digest Digest of a BLOB.
     * @param nextLink Link acquired from upload start or previous chunk. Note, do not include initial / (must do
     *     substring(1) ).
     * @param value Optional raw data of blob.
     * @param contentLength The contentLength parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ContainerRegistryBlobsCompleteUploadResponse> completeUploadWithResponseAsync(
            String digest, String nextLink, Flux<ByteBuffer> value, Long contentLength, Context context) {
        final String accept = "application/json";
        return service.completeUpload(this.client.getUrl(), digest, nextLink, value, contentLength, accept, context);
    }

    /**
     * Cancel outstanding upload processes, releasing associated resources. If this is not called, the unfinished
     * uploads will eventually timeout.
     *
     * @param nextLink Link acquired from upload start or previous chunk. Note, do not include initial / (must do
     *     substring(1) ).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelUploadWithResponseAsync(String nextLink, Context context) {
        final String accept = "application/json";
        return service.cancelUpload(this.client.getUrl(), nextLink, accept, context);
    }

    /**
     * Initiate a resumable blob upload with an empty request body.
     *
     * @param name Name of the image (including the namespace).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ContainerRegistryBlobsStartUploadResponse> startUploadWithResponseAsync(String name, Context context) {
        final String accept = "application/json";
        return service.startUpload(this.client.getUrl(), name, accept, context);
    }

    /**
     * Retrieve the blob from the registry identified by `digest`. This endpoint may also support RFC7233 compliant
     * range requests. Support can be detected by issuing a HEAD request. If the header `Accept-Range: bytes` is
     * returned, range requests can be used to fetch partial content.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @param range Format : bytes=&lt;start&gt;-&lt;end&gt;, HTTP Range header specifying blob chunk.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> getChunkWithResponseAsync(String name, String digest, String range, Context context) {
        final String accept = "application/octet-stream";
        return service.getChunk(this.client.getUrl(), name, digest, range, accept, context);
    }

    /**
     * Same as GET, except only the headers are returned.
     *
     * @param name Name of the image (including the namespace).
     * @param digest Digest of a BLOB.
     * @param range Format : bytes=&lt;start&gt;-&lt;end&gt;, HTTP Range header specifying blob chunk.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AcrErrorsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ContainerRegistryBlobsCheckChunkExistsResponse> checkChunkExistsWithResponseAsync(
            String name, String digest, String range, Context context) {
        final String accept = "application/json";
        return service.checkChunkExists(this.client.getUrl(), name, digest, range, accept, context);
    }
}
