// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceprovisioningservices.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.deviceprovisioningservices.models.ErrorMessage;
import java.io.IOException;

/**
 * Result of a long running operation.
 */
@Immutable
public final class AsyncOperationResultInner implements JsonSerializable<AsyncOperationResultInner> {
    /*
     * current status of a long running operation.
     */
    private String status;

    /*
     * Error message containing code, description and details
     */
    private ErrorMessage error;

    /**
     * Creates an instance of AsyncOperationResultInner class.
     */
    private AsyncOperationResultInner() {
    }

    /**
     * Get the status property: current status of a long running operation.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the error property: Error message containing code, description and details.
     * 
     * @return the error value.
     */
    public ErrorMessage error() {
        return this.error;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AsyncOperationResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AsyncOperationResultInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AsyncOperationResultInner.
     */
    public static AsyncOperationResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AsyncOperationResultInner deserializedAsyncOperationResultInner = new AsyncOperationResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedAsyncOperationResultInner.status = reader.getString();
                } else if ("error".equals(fieldName)) {
                    deserializedAsyncOperationResultInner.error = ErrorMessage.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAsyncOperationResultInner;
        });
    }
}
