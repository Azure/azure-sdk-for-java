// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceprovisioningservices.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.deviceprovisioningservices.models.AccessRightsDescription;
import java.io.IOException;

/**
 * Description of the shared access key.
 */
@Fluent
public final class SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner
    implements JsonSerializable<SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner> {
    /*
     * Name of the key.
     */
    private String keyName;

    /*
     * Primary SAS key value.
     */
    private String primaryKey;

    /*
     * Secondary SAS key value.
     */
    private String secondaryKey;

    /*
     * Rights that this key has.
     */
    private AccessRightsDescription rights;

    /**
     * Creates an instance of SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner class.
     */
    public SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner() {
    }

    /**
     * Get the keyName property: Name of the key.
     * 
     * @return the keyName value.
     */
    public String keyName() {
        return this.keyName;
    }

    /**
     * Set the keyName property: Name of the key.
     * 
     * @param keyName the keyName value to set.
     * @return the SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner object itself.
     */
    public SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner withKeyName(String keyName) {
        this.keyName = keyName;
        return this;
    }

    /**
     * Get the primaryKey property: Primary SAS key value.
     * 
     * @return the primaryKey value.
     */
    public String primaryKey() {
        return this.primaryKey;
    }

    /**
     * Set the primaryKey property: Primary SAS key value.
     * 
     * @param primaryKey the primaryKey value to set.
     * @return the SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner object itself.
     */
    public SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner withPrimaryKey(String primaryKey) {
        this.primaryKey = primaryKey;
        return this;
    }

    /**
     * Get the secondaryKey property: Secondary SAS key value.
     * 
     * @return the secondaryKey value.
     */
    public String secondaryKey() {
        return this.secondaryKey;
    }

    /**
     * Set the secondaryKey property: Secondary SAS key value.
     * 
     * @param secondaryKey the secondaryKey value to set.
     * @return the SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner object itself.
     */
    public SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner withSecondaryKey(String secondaryKey) {
        this.secondaryKey = secondaryKey;
        return this;
    }

    /**
     * Get the rights property: Rights that this key has.
     * 
     * @return the rights value.
     */
    public AccessRightsDescription rights() {
        return this.rights;
    }

    /**
     * Set the rights property: Rights that this key has.
     * 
     * @param rights the rights value to set.
     * @return the SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner object itself.
     */
    public SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner
        withRights(AccessRightsDescription rights) {
        this.rights = rights;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyName", this.keyName);
        jsonWriter.writeStringField("rights", this.rights == null ? null : this.rights.toString());
        jsonWriter.writeStringField("primaryKey", this.primaryKey);
        jsonWriter.writeStringField("secondaryKey", this.secondaryKey);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner if the JsonReader was
     * pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the
     * SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner.
     */
    public static SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner deserializedSharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner
                = new SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyName".equals(fieldName)) {
                    deserializedSharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner.keyName
                        = reader.getString();
                } else if ("rights".equals(fieldName)) {
                    deserializedSharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner.rights
                        = AccessRightsDescription.fromString(reader.getString());
                } else if ("primaryKey".equals(fieldName)) {
                    deserializedSharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner.primaryKey
                        = reader.getString();
                } else if ("secondaryKey".equals(fieldName)) {
                    deserializedSharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner.secondaryKey
                        = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSharedAccessSignatureAuthorizationRuleAccessRightsDescriptionInner;
        });
    }
}
