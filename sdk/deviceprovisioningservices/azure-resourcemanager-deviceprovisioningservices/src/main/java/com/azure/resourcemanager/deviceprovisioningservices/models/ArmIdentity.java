// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceprovisioningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** The set of ARM identities associated with the IoT DPS resource. */
@Fluent
public class ArmIdentity {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ArmIdentity.class);

    /*
     * Principal Id
     */
    @JsonProperty(value = "principalId", access = JsonProperty.Access.WRITE_ONLY)
    private String principalId;

    /*
     * Tenant Id
     */
    @JsonProperty(value = "tenantId", access = JsonProperty.Access.WRITE_ONLY)
    private String tenantId;

    /*
     * Identity type. Only allowed values are SystemAssigned and UserAssigned.
     * Comma separated if both for ex: SystemAssigned,UserAssigned.
     */
    @JsonProperty(value = "identityType")
    private String identityType;

    /*
     * The set of UserAssigned identities associated with the IoT DPS resource.
     */
    @JsonProperty(value = "userAssignedIdentities")
    private Map<String, ArmUserIdentity> userAssignedIdentities;

    /**
     * Get the principalId property: Principal Id.
     *
     * @return the principalId value.
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Get the tenantId property: Tenant Id.
     *
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Get the identityType property: Identity type. Only allowed values are SystemAssigned and UserAssigned. Comma
     * separated if both for ex: SystemAssigned,UserAssigned.
     *
     * @return the identityType value.
     */
    public String identityType() {
        return this.identityType;
    }

    /**
     * Set the identityType property: Identity type. Only allowed values are SystemAssigned and UserAssigned. Comma
     * separated if both for ex: SystemAssigned,UserAssigned.
     *
     * @param identityType the identityType value to set.
     * @return the ArmIdentity object itself.
     */
    public ArmIdentity withIdentityType(String identityType) {
        this.identityType = identityType;
        return this;
    }

    /**
     * Get the userAssignedIdentities property: The set of UserAssigned identities associated with the IoT DPS resource.
     *
     * @return the userAssignedIdentities value.
     */
    public Map<String, ArmUserIdentity> userAssignedIdentities() {
        return this.userAssignedIdentities;
    }

    /**
     * Set the userAssignedIdentities property: The set of UserAssigned identities associated with the IoT DPS resource.
     *
     * @param userAssignedIdentities the userAssignedIdentities value to set.
     * @return the ArmIdentity object itself.
     */
    public ArmIdentity withUserAssignedIdentities(Map<String, ArmUserIdentity> userAssignedIdentities) {
        this.userAssignedIdentities = userAssignedIdentities;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (userAssignedIdentities() != null) {
            userAssignedIdentities()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
    }
}
