// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceprovisioningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Description of the Device Registry namespace that is linked to the provisioning service.
 */
@Fluent
public final class DeviceRegistryNamespaceDescription implements JsonSerializable<DeviceRegistryNamespaceDescription> {
    /*
     * The ARM resource ID of the Device Registry namespace.
     */
    private String resourceId;

    /*
     * Device Registry Namespace MI authentication type: UserAssigned, SystemAssigned.
     */
    private DeviceRegistryNamespaceAuthenticationType authenticationType;

    /*
     * The selected user-assigned identity resource Id associated with Device Registry namespace. This is required when
     * authenticationType is UserAssigned.
     */
    private String selectedUserAssignedIdentityResourceId;

    /**
     * Creates an instance of DeviceRegistryNamespaceDescription class.
     */
    public DeviceRegistryNamespaceDescription() {
    }

    /**
     * Get the resourceId property: The ARM resource ID of the Device Registry namespace.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: The ARM resource ID of the Device Registry namespace.
     * 
     * @param resourceId the resourceId value to set.
     * @return the DeviceRegistryNamespaceDescription object itself.
     */
    public DeviceRegistryNamespaceDescription withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the authenticationType property: Device Registry Namespace MI authentication type: UserAssigned,
     * SystemAssigned.
     * 
     * @return the authenticationType value.
     */
    public DeviceRegistryNamespaceAuthenticationType authenticationType() {
        return this.authenticationType;
    }

    /**
     * Set the authenticationType property: Device Registry Namespace MI authentication type: UserAssigned,
     * SystemAssigned.
     * 
     * @param authenticationType the authenticationType value to set.
     * @return the DeviceRegistryNamespaceDescription object itself.
     */
    public DeviceRegistryNamespaceDescription
        withAuthenticationType(DeviceRegistryNamespaceAuthenticationType authenticationType) {
        this.authenticationType = authenticationType;
        return this;
    }

    /**
     * Get the selectedUserAssignedIdentityResourceId property: The selected user-assigned identity resource Id
     * associated with Device Registry namespace. This is required when authenticationType is UserAssigned.
     * 
     * @return the selectedUserAssignedIdentityResourceId value.
     */
    public String selectedUserAssignedIdentityResourceId() {
        return this.selectedUserAssignedIdentityResourceId;
    }

    /**
     * Set the selectedUserAssignedIdentityResourceId property: The selected user-assigned identity resource Id
     * associated with Device Registry namespace. This is required when authenticationType is UserAssigned.
     * 
     * @param selectedUserAssignedIdentityResourceId the selectedUserAssignedIdentityResourceId value to set.
     * @return the DeviceRegistryNamespaceDescription object itself.
     */
    public DeviceRegistryNamespaceDescription
        withSelectedUserAssignedIdentityResourceId(String selectedUserAssignedIdentityResourceId) {
        this.selectedUserAssignedIdentityResourceId = selectedUserAssignedIdentityResourceId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("authenticationType",
            this.authenticationType == null ? null : this.authenticationType.toString());
        jsonWriter.writeStringField("selectedUserAssignedIdentityResourceId",
            this.selectedUserAssignedIdentityResourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeviceRegistryNamespaceDescription from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeviceRegistryNamespaceDescription if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeviceRegistryNamespaceDescription.
     */
    public static DeviceRegistryNamespaceDescription fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeviceRegistryNamespaceDescription deserializedDeviceRegistryNamespaceDescription
                = new DeviceRegistryNamespaceDescription();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceId".equals(fieldName)) {
                    deserializedDeviceRegistryNamespaceDescription.resourceId = reader.getString();
                } else if ("authenticationType".equals(fieldName)) {
                    deserializedDeviceRegistryNamespaceDescription.authenticationType
                        = DeviceRegistryNamespaceAuthenticationType.fromString(reader.getString());
                } else if ("selectedUserAssignedIdentityResourceId".equals(fieldName)) {
                    deserializedDeviceRegistryNamespaceDescription.selectedUserAssignedIdentityResourceId
                        = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeviceRegistryNamespaceDescription;
        });
    }
}
