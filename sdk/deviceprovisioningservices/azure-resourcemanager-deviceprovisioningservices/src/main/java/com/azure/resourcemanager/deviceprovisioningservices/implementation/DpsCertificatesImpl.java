// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceprovisioningservices.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.deviceprovisioningservices.fluent.DpsCertificatesClient;
import com.azure.resourcemanager.deviceprovisioningservices.fluent.models.CertificateResponseInner;
import com.azure.resourcemanager.deviceprovisioningservices.fluent.models.VerificationCodeResponseInner;
import com.azure.resourcemanager.deviceprovisioningservices.models.CertificatePurpose;
import com.azure.resourcemanager.deviceprovisioningservices.models.CertificateResponse;
import com.azure.resourcemanager.deviceprovisioningservices.models.DpsCertificates;
import com.azure.resourcemanager.deviceprovisioningservices.models.VerificationCodeRequest;
import com.azure.resourcemanager.deviceprovisioningservices.models.VerificationCodeResponse;
import java.time.OffsetDateTime;

public final class DpsCertificatesImpl implements DpsCertificates {
    private static final ClientLogger LOGGER = new ClientLogger(DpsCertificatesImpl.class);

    private final DpsCertificatesClient innerClient;

    private final com.azure.resourcemanager.deviceprovisioningservices.DeviceProvisioningServicesManager serviceManager;

    public DpsCertificatesImpl(DpsCertificatesClient innerClient,
        com.azure.resourcemanager.deviceprovisioningservices.DeviceProvisioningServicesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<CertificateResponse> getWithResponse(String resourceGroupName, String provisioningServiceName,
        String certificateName, String ifMatch, Context context) {
        Response<CertificateResponseInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, provisioningServiceName, certificateName, ifMatch, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CertificateResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CertificateResponse get(String resourceGroupName, String provisioningServiceName, String certificateName) {
        CertificateResponseInner inner
            = this.serviceClient().get(resourceGroupName, provisioningServiceName, certificateName);
        if (inner != null) {
            return new CertificateResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String provisioningServiceName,
        String certificateName, String ifMatch, String certificateNameParam, byte[] certificateRawBytes,
        Boolean certificateIsVerified, CertificatePurpose certificatePurpose, OffsetDateTime certificateCreated,
        OffsetDateTime certificateLastUpdated, Boolean certificateHasPrivateKey, String certificateNonce,
        Context context) {
        return this.serviceClient()
            .deleteWithResponse(resourceGroupName, provisioningServiceName, certificateName, ifMatch,
                certificateNameParam, certificateRawBytes, certificateIsVerified, certificatePurpose,
                certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, context);
    }

    public void delete(String resourceGroupName, String provisioningServiceName, String certificateName,
        String ifMatch) {
        this.serviceClient().delete(resourceGroupName, provisioningServiceName, certificateName, ifMatch);
    }

    public PagedIterable<CertificateResponse> list(String resourceGroupName, String provisioningServiceName) {
        PagedIterable<CertificateResponseInner> inner
            = this.serviceClient().list(resourceGroupName, provisioningServiceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CertificateResponseImpl(inner1, this.manager()));
    }

    public PagedIterable<CertificateResponse> list(String resourceGroupName, String provisioningServiceName,
        Context context) {
        PagedIterable<CertificateResponseInner> inner
            = this.serviceClient().list(resourceGroupName, provisioningServiceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CertificateResponseImpl(inner1, this.manager()));
    }

    public Response<VerificationCodeResponse> generateVerificationCodeWithResponse(String resourceGroupName,
        String provisioningServiceName, String certificateName, String ifMatch, String certificateNameParam,
        byte[] certificateRawBytes, Boolean certificateIsVerified, CertificatePurpose certificatePurpose,
        OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated, Boolean certificateHasPrivateKey,
        String certificateNonce, Context context) {
        Response<VerificationCodeResponseInner> inner = this.serviceClient()
            .generateVerificationCodeWithResponse(resourceGroupName, provisioningServiceName, certificateName, ifMatch,
                certificateNameParam, certificateRawBytes, certificateIsVerified, certificatePurpose,
                certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new VerificationCodeResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VerificationCodeResponse generateVerificationCode(String resourceGroupName, String provisioningServiceName,
        String certificateName, String ifMatch) {
        VerificationCodeResponseInner inner = this.serviceClient()
            .generateVerificationCode(resourceGroupName, provisioningServiceName, certificateName, ifMatch);
        if (inner != null) {
            return new VerificationCodeResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CertificateResponse> verifyCertificateWithResponse(String resourceGroupName,
        String provisioningServiceName, String certificateName, String ifMatch, VerificationCodeRequest request,
        String certificateNameParam, byte[] certificateRawBytes, Boolean certificateIsVerified,
        CertificatePurpose certificatePurpose, OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated,
        Boolean certificateHasPrivateKey, String certificateNonce, Context context) {
        Response<CertificateResponseInner> inner = this.serviceClient()
            .verifyCertificateWithResponse(resourceGroupName, provisioningServiceName, certificateName, ifMatch,
                request, certificateNameParam, certificateRawBytes, certificateIsVerified, certificatePurpose,
                certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CertificateResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CertificateResponse verifyCertificate(String resourceGroupName, String provisioningServiceName,
        String certificateName, String ifMatch, VerificationCodeRequest request) {
        CertificateResponseInner inner = this.serviceClient()
            .verifyCertificate(resourceGroupName, provisioningServiceName, certificateName, ifMatch, request);
        if (inner != null) {
            return new CertificateResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CertificateResponse getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String provisioningServiceName = ResourceManagerUtils.getValueFromIdByName(id, "provisioningServices");
        if (provisioningServiceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'provisioningServices'.", id)));
        }
        String certificateName = ResourceManagerUtils.getValueFromIdByName(id, "certificates");
        if (certificateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'certificates'.", id)));
        }
        String localIfMatch = null;
        return this
            .getWithResponse(resourceGroupName, provisioningServiceName, certificateName, localIfMatch, Context.NONE)
            .getValue();
    }

    public Response<CertificateResponse> getByIdWithResponse(String id, String ifMatch, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String provisioningServiceName = ResourceManagerUtils.getValueFromIdByName(id, "provisioningServices");
        if (provisioningServiceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'provisioningServices'.", id)));
        }
        String certificateName = ResourceManagerUtils.getValueFromIdByName(id, "certificates");
        if (certificateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'certificates'.", id)));
        }
        return this.getWithResponse(resourceGroupName, provisioningServiceName, certificateName, ifMatch, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String provisioningServiceName = ResourceManagerUtils.getValueFromIdByName(id, "provisioningServices");
        if (provisioningServiceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'provisioningServices'.", id)));
        }
        String certificateName = ResourceManagerUtils.getValueFromIdByName(id, "certificates");
        if (certificateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'certificates'.", id)));
        }
        String localIfMatch = null;
        String localCertificateNameParam = null;
        byte[] localCertificateRawBytes = null;
        Boolean localCertificateIsVerified = null;
        CertificatePurpose localCertificatePurpose = null;
        OffsetDateTime localCertificateCreated = null;
        OffsetDateTime localCertificateLastUpdated = null;
        Boolean localCertificateHasPrivateKey = null;
        String localCertificateNonce = null;
        this.deleteWithResponse(resourceGroupName, provisioningServiceName, certificateName, localIfMatch,
            localCertificateNameParam, localCertificateRawBytes, localCertificateIsVerified, localCertificatePurpose,
            localCertificateCreated, localCertificateLastUpdated, localCertificateHasPrivateKey, localCertificateNonce,
            Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, String ifMatch, String certificateNameParam,
        byte[] certificateRawBytes, Boolean certificateIsVerified, CertificatePurpose certificatePurpose,
        OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated, Boolean certificateHasPrivateKey,
        String certificateNonce, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String provisioningServiceName = ResourceManagerUtils.getValueFromIdByName(id, "provisioningServices");
        if (provisioningServiceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'provisioningServices'.", id)));
        }
        String certificateName = ResourceManagerUtils.getValueFromIdByName(id, "certificates");
        if (certificateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'certificates'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, provisioningServiceName, certificateName, ifMatch,
            certificateNameParam, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated,
            certificateLastUpdated, certificateHasPrivateKey, certificateNonce, context);
    }

    private DpsCertificatesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.deviceprovisioningservices.DeviceProvisioningServicesManager manager() {
        return this.serviceManager;
    }

    public CertificateResponseImpl define(String name) {
        return new CertificateResponseImpl(name, this.manager());
    }
}
