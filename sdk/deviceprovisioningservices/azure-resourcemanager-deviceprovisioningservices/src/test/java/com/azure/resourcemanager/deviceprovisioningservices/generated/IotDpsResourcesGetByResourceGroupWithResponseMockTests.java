// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceprovisioningservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.deviceprovisioningservices.IotDpsManager;
import com.azure.resourcemanager.deviceprovisioningservices.models.AllocationPolicy;
import com.azure.resourcemanager.deviceprovisioningservices.models.IotDpsSku;
import com.azure.resourcemanager.deviceprovisioningservices.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.deviceprovisioningservices.models.ProvisioningServiceDescription;
import com.azure.resourcemanager.deviceprovisioningservices.models.PublicNetworkAccess;
import com.azure.resourcemanager.deviceprovisioningservices.models.State;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class IotDpsResourcesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"etag\":\"w\",\"properties\":{\"state\":\"FailoverFailed\",\"publicNetworkAccess\":\"Enabled\",\"ipFilterRules\":[],\"privateEndpointConnections\":[],\"provisioningState\":\"ishc\",\"iotHubs\":[],\"allocationPolicy\":\"Static\",\"serviceOperationsHostName\":\"eyeam\",\"deviceProvisioningHostName\":\"hagalpbuxwgipwh\",\"idScope\":\"ow\",\"authorizationPolicies\":[],\"enableDataResidency\":true,\"portalOperationsHostName\":\"nkixzbinj\"},\"sku\":{\"name\":\"S1\",\"tier\":\"tmryw\",\"capacity\":9169702468107282807},\"identity\":{\"principalId\":\"a99a929b-b3c5-43f3-aec1-f7d853687b97\",\"tenantId\":\"6facda6d-ff45-4d43-9b8f-cf14917f7da8\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{}},\"resourcegroup\":\"n\",\"subscriptionid\":\"qvyxlwhzlsicoho\",\"location\":\"qnwvlrya\",\"tags\":{\"mqhgyxzkonocuk\":\"heun\",\"szfkbe\":\"klyaxuconu\",\"jmwvvj\":\"pewr\"},\"id\":\"kt\",\"name\":\"xsenhwlr\",\"type\":\"ffrzpwvlqdqgbiqy\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        IotDpsManager manager =
            IotDpsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ProvisioningServiceDescription response =
            manager
                .iotDpsResources()
                .getByResourceGroupWithResponse("typmrbpizcdrqjsd", "ydnfyhxdeoejz", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("qnwvlrya", response.location());
        Assertions.assertEquals("heun", response.tags().get("mqhgyxzkonocuk"));
        Assertions.assertEquals("w", response.etag());
        Assertions.assertEquals(State.FAILOVER_FAILED, response.properties().state());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.properties().publicNetworkAccess());
        Assertions.assertEquals("ishc", response.properties().provisioningState());
        Assertions.assertEquals(AllocationPolicy.STATIC, response.properties().allocationPolicy());
        Assertions.assertEquals(true, response.properties().enableDataResidency());
        Assertions.assertEquals("nkixzbinj", response.properties().portalOperationsHostname());
        Assertions.assertEquals(IotDpsSku.S1, response.sku().name());
        Assertions.assertEquals(9169702468107282807L, response.sku().capacity());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("n", response.resourcegroup());
        Assertions.assertEquals("qvyxlwhzlsicoho", response.subscriptionid());
    }
}
