// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceprovisioningservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.deviceprovisioningservices.IotDpsManager;
import com.azure.resourcemanager.deviceprovisioningservices.models.GroupIdInformation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IotDpsResourcesListPrivateLinkResourcesMockTests {
    @Test
    public void testListPrivateLinkResources() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"groupId\":\"asrru\",\"requiredMembers\":[\"hsqfsubcgjbirxbp\",\"bsrfbj\",\"dtws\",\"otftpvjzbexilz\"],\"requiredZoneNames\":[\"qqnvwpmq\",\"aruoujmkcjhwqyt\",\"r\",\"bnw\"]},\"id\":\"wgdrjervnaenqp\",\"name\":\"hin\",\"type\":\"oygmift\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IotDpsManager manager = IotDpsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<GroupIdInformation> response = manager.iotDpsResources()
            .listPrivateLinkResources("wfbkrvrns", "shqjohxcrsbf", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("asrru", response.iterator().next().properties().groupId());
        Assertions.assertEquals("hsqfsubcgjbirxbp", response.iterator().next().properties().requiredMembers().get(0));
        Assertions.assertEquals("qqnvwpmq", response.iterator().next().properties().requiredZoneNames().get(0));
    }
}
