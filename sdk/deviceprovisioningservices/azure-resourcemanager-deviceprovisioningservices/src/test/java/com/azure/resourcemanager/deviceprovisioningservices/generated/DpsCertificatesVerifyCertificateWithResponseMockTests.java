// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceprovisioningservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.deviceprovisioningservices.IotDpsManager;
import com.azure.resourcemanager.deviceprovisioningservices.models.CertificatePurpose;
import com.azure.resourcemanager.deviceprovisioningservices.models.CertificateResponse;
import com.azure.resourcemanager.deviceprovisioningservices.models.VerificationCodeRequest;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DpsCertificatesVerifyCertificateWithResponseMockTests {
    @Test
    public void testVerifyCertificateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"subject\":\"bebrjcxerfuwuttt\",\"expiry\":\"Sun, 03 Jan 2021 01:51:47 GMT\",\"thumbprint\":\"rbirphxe\",\"isVerified\":false,\"created\":\"Sun, 07 Nov 2021 03:18:20 GMT\",\"updated\":\"Sun, 23 May 2021 19:09:39 GMT\"},\"etag\":\"jky\",\"id\":\"j\",\"name\":\"uujqgidokgjljyo\",\"type\":\"gvcl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IotDpsManager manager = IotDpsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CertificateResponse response = manager.dpsCertificates()
            .verifyCertificateWithResponse("mqhgyxzkonocuk", "klyaxuconu", "szfkbe", "pewr",
                new VerificationCodeRequest().withCertificate("mwvvjektcxsenhw"), "rsffrzpwvlqdqgbi",
                "ylihkaetckt".getBytes(), true, CertificatePurpose.SERVER_AUTHENTICATION,
                OffsetDateTime.parse("2021-11-30T18:53:22Z"), OffsetDateTime.parse("2020-12-30T14:20:48Z"), true,
                "snkymuctq", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertFalse(response.properties().isVerified());
    }
}
