// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceprovisioningservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.deviceprovisioningservices.DeviceProvisioningServicesManager;
import com.azure.resourcemanager.deviceprovisioningservices.models.PrivateEndpointConnection;
import com.azure.resourcemanager.deviceprovisioningservices.models.PrivateLinkServiceConnectionStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IotDpsResourcesDeletePrivateEndpointConnectionMockTests {
    @Test
    public void testDeletePrivateEndpointConnection() throws Exception {
        String responseStr
            = "{\"properties\":{\"privateEndpoint\":{\"id\":\"fthnzdn\"},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"l\",\"actionsRequired\":\"ayqigynduhav\"}},\"id\":\"lkthu\",\"name\":\"aqolbgycduiertg\",\"type\":\"cym\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DeviceProvisioningServicesManager manager = DeviceProvisioningServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PrivateEndpointConnection response = manager.iotDpsResources()
            .deletePrivateEndpointConnection("tjrybnwjewgdr", "ervnaenqpehi", "doy", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(PrivateLinkServiceConnectionStatus.PENDING,
            response.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("l", response.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("ayqigynduhav",
            response.properties().privateLinkServiceConnectionState().actionsRequired());
    }
}
