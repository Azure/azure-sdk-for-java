// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceprovisioningservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceprovisioningservices.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.deviceprovisioningservices.models.PrivateEndpoint;
import com.azure.resourcemanager.deviceprovisioningservices.models.PrivateEndpointConnectionProperties;
import com.azure.resourcemanager.deviceprovisioningservices.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.deviceprovisioningservices.models.PrivateLinkServiceConnectionStatus;
import org.junit.jupiter.api.Assertions;

public final class PrivateEndpointConnectionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateEndpointConnectionInner model = BinaryData.fromString(
            "{\"properties\":{\"privateEndpoint\":{\"id\":\"gpbkwtmut\"},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"qktapspwgcuert\",\"actionsRequired\":\"kdosvqw\"}},\"id\":\"mdgbbjfdd\",\"name\":\"mbmbexppbh\",\"type\":\"q\"}")
            .toObject(PrivateEndpointConnectionInner.class);
        Assertions.assertEquals(PrivateLinkServiceConnectionStatus.APPROVED,
            model.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("qktapspwgcuert", model.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("kdosvqw", model.properties().privateLinkServiceConnectionState().actionsRequired());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateEndpointConnectionInner model
            = new PrivateEndpointConnectionInner()
                .withProperties(
                    new PrivateEndpointConnectionProperties().withPrivateEndpoint(new PrivateEndpoint())
                        .withPrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                            .withStatus(PrivateLinkServiceConnectionStatus.APPROVED)
                            .withDescription("qktapspwgcuert")
                            .withActionsRequired("kdosvqw")));
        model = BinaryData.fromObject(model).toObject(PrivateEndpointConnectionInner.class);
        Assertions.assertEquals(PrivateLinkServiceConnectionStatus.APPROVED,
            model.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("qktapspwgcuert", model.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("kdosvqw", model.properties().privateLinkServiceConnectionState().actionsRequired());
    }
}
