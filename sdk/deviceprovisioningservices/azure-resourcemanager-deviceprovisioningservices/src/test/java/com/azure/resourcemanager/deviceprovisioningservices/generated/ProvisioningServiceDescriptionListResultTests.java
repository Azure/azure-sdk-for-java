// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceprovisioningservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceprovisioningservices.fluent.models.ProvisioningServiceDescriptionInner;
import com.azure.resourcemanager.deviceprovisioningservices.models.AllocationPolicy;
import com.azure.resourcemanager.deviceprovisioningservices.models.IotDpsPropertiesDescription;
import com.azure.resourcemanager.deviceprovisioningservices.models.IotDpsSku;
import com.azure.resourcemanager.deviceprovisioningservices.models.IotDpsSkuInfo;
import com.azure.resourcemanager.deviceprovisioningservices.models.ManagedServiceIdentity;
import com.azure.resourcemanager.deviceprovisioningservices.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.deviceprovisioningservices.models.ProvisioningServiceDescriptionListResult;
import com.azure.resourcemanager.deviceprovisioningservices.models.PublicNetworkAccess;
import com.azure.resourcemanager.deviceprovisioningservices.models.State;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProvisioningServiceDescriptionListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProvisioningServiceDescriptionListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"etag\":\"xgjvtbv\",\"properties\":{\"state\":\"Suspended\",\"publicNetworkAccess\":\"Enabled\",\"ipFilterRules\":[],\"privateEndpointConnections\":[],\"provisioningState\":\"uj\",\"iotHubs\":[],\"allocationPolicy\":\"Static\",\"serviceOperationsHostName\":\"uouq\",\"deviceProvisioningHostName\":\"rwzwbng\",\"idScope\":\"tnwu\",\"authorizationPolicies\":[],\"enableDataResidency\":false,\"portalOperationsHostName\":\"x\"},\"sku\":{\"name\":\"S1\",\"tier\":\"uckyf\",\"capacity\":1201040082291654922},\"identity\":{\"principalId\":\"5194c36a-f4c2-495f-8eb8-bb6558654dc5\",\"tenantId\":\"ebdabeb8-2078-4e63-942d-bab65010b12a\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{}},\"resourcegroup\":\"zuhtymwisdkfthwx\",\"subscriptionid\":\"t\",\"location\":\"i\",\"tags\":{\"fsrpymzidnse\":\"pvkmijcmmxdcuf\",\"yc\":\"cxtbzsg\",\"mdwzjeiachboo\":\"sne\"},\"id\":\"flnrosfqpteehzz\",\"name\":\"ypyqrimzinp\",\"type\":\"swjdkirso\"},{\"etag\":\"qxhcrmn\",\"properties\":{\"state\":\"DeletionFailed\",\"publicNetworkAccess\":\"Enabled\",\"ipFilterRules\":[],\"privateEndpointConnections\":[],\"provisioningState\":\"dsoifiyipj\",\"iotHubs\":[],\"allocationPolicy\":\"GeoLatency\",\"serviceOperationsHostName\":\"gr\",\"deviceProvisioningHostName\":\"znorcj\",\"idScope\":\"snb\",\"authorizationPolicies\":[],\"enableDataResidency\":true,\"portalOperationsHostName\":\"nmoc\"},\"sku\":{\"name\":\"S1\",\"tier\":\"hurzafblj\",\"capacity\":2266704793214856623},\"identity\":{\"principalId\":\"f758627a-8b00-4926-8526-338477fa1cde\",\"tenantId\":\"70b8c782-6622-474f-be09-4ad9eed4f7b7\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{}},\"resourcegroup\":\"ljavbqid\",\"subscriptionid\":\"ajzyul\",\"location\":\"kudjkrlkhb\",\"tags\":{\"ocxscpaierhhbcs\":\"epgzgqexz\",\"mmajtjaodx\":\"l\"},\"id\":\"bnbdxkqpxokajion\",\"name\":\"imexgstxgcpodgma\",\"type\":\"jrmvdjwzrlo\"}],\"nextLink\":\"clwhijcoejctbz\"}")
                .toObject(ProvisioningServiceDescriptionListResult.class);
        Assertions.assertEquals("i", model.value().get(0).location());
        Assertions.assertEquals("pvkmijcmmxdcuf", model.value().get(0).tags().get("fsrpymzidnse"));
        Assertions.assertEquals("xgjvtbv", model.value().get(0).etag());
        Assertions.assertEquals(State.SUSPENDED, model.value().get(0).properties().state());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.value().get(0).properties().publicNetworkAccess());
        Assertions.assertEquals("uj", model.value().get(0).properties().provisioningState());
        Assertions.assertEquals(AllocationPolicy.STATIC, model.value().get(0).properties().allocationPolicy());
        Assertions.assertEquals(false, model.value().get(0).properties().enableDataResidency());
        Assertions.assertEquals("x", model.value().get(0).properties().portalOperationsHostname());
        Assertions.assertEquals(IotDpsSku.S1, model.value().get(0).sku().name());
        Assertions.assertEquals(1201040082291654922L, model.value().get(0).sku().capacity());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("zuhtymwisdkfthwx", model.value().get(0).resourcegroup());
        Assertions.assertEquals("t", model.value().get(0).subscriptionid());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProvisioningServiceDescriptionListResult model =
            new ProvisioningServiceDescriptionListResult()
                .withValue(
                    Arrays
                        .asList(
                            new ProvisioningServiceDescriptionInner()
                                .withLocation("i")
                                .withTags(
                                    mapOf("fsrpymzidnse", "pvkmijcmmxdcuf", "yc", "cxtbzsg", "mdwzjeiachboo", "sne"))
                                .withEtag("xgjvtbv")
                                .withProperties(
                                    new IotDpsPropertiesDescription()
                                        .withState(State.SUSPENDED)
                                        .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                                        .withIpFilterRules(Arrays.asList())
                                        .withPrivateEndpointConnections(Arrays.asList())
                                        .withProvisioningState("uj")
                                        .withIotHubs(Arrays.asList())
                                        .withAllocationPolicy(AllocationPolicy.STATIC)
                                        .withAuthorizationPolicies(Arrays.asList())
                                        .withEnableDataResidency(false)
                                        .withPortalOperationsHostname("x"))
                                .withSku(new IotDpsSkuInfo().withName(IotDpsSku.S1).withCapacity(1201040082291654922L))
                                .withIdentity(
                                    new ManagedServiceIdentity()
                                        .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                                        .withUserAssignedIdentities(mapOf()))
                                .withResourcegroup("zuhtymwisdkfthwx")
                                .withSubscriptionid("t"),
                            new ProvisioningServiceDescriptionInner()
                                .withLocation("kudjkrlkhb")
                                .withTags(mapOf("ocxscpaierhhbcs", "epgzgqexz", "mmajtjaodx", "l"))
                                .withEtag("qxhcrmn")
                                .withProperties(
                                    new IotDpsPropertiesDescription()
                                        .withState(State.DELETION_FAILED)
                                        .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                                        .withIpFilterRules(Arrays.asList())
                                        .withPrivateEndpointConnections(Arrays.asList())
                                        .withProvisioningState("dsoifiyipj")
                                        .withIotHubs(Arrays.asList())
                                        .withAllocationPolicy(AllocationPolicy.GEO_LATENCY)
                                        .withAuthorizationPolicies(Arrays.asList())
                                        .withEnableDataResidency(true)
                                        .withPortalOperationsHostname("nmoc"))
                                .withSku(new IotDpsSkuInfo().withName(IotDpsSku.S1).withCapacity(2266704793214856623L))
                                .withIdentity(
                                    new ManagedServiceIdentity()
                                        .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                                        .withUserAssignedIdentities(mapOf()))
                                .withResourcegroup("ljavbqid")
                                .withSubscriptionid("ajzyul")));
        model = BinaryData.fromObject(model).toObject(ProvisioningServiceDescriptionListResult.class);
        Assertions.assertEquals("i", model.value().get(0).location());
        Assertions.assertEquals("pvkmijcmmxdcuf", model.value().get(0).tags().get("fsrpymzidnse"));
        Assertions.assertEquals("xgjvtbv", model.value().get(0).etag());
        Assertions.assertEquals(State.SUSPENDED, model.value().get(0).properties().state());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.value().get(0).properties().publicNetworkAccess());
        Assertions.assertEquals("uj", model.value().get(0).properties().provisioningState());
        Assertions.assertEquals(AllocationPolicy.STATIC, model.value().get(0).properties().allocationPolicy());
        Assertions.assertEquals(false, model.value().get(0).properties().enableDataResidency());
        Assertions.assertEquals("x", model.value().get(0).properties().portalOperationsHostname());
        Assertions.assertEquals(IotDpsSku.S1, model.value().get(0).sku().name());
        Assertions.assertEquals(1201040082291654922L, model.value().get(0).sku().capacity());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("zuhtymwisdkfthwx", model.value().get(0).resourcegroup());
        Assertions.assertEquals("t", model.value().get(0).subscriptionid());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
