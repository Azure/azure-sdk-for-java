// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceprovisioningservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.deviceprovisioningservices.IotDpsManager;
import com.azure.resourcemanager.deviceprovisioningservices.models.CertificateProperties;
import com.azure.resourcemanager.deviceprovisioningservices.models.CertificateResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DpsCertificatesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"subject\":\"iarbutrcvpna\",\"expiry\":\"Wed, 17 Mar 2021 12:33:19 GMT\",\"thumbprint\":\"jrunmpxtt\",\"isVerified\":true,\"created\":\"Wed, 21 Apr 2021 20:03:01 GMT\",\"updated\":\"Wed, 27 Oct 2021 21:49:11 GMT\"},\"etag\":\"kx\",\"id\":\"skpbhenbtkcxywn\",\"name\":\"tnrsyn\",\"type\":\"qidybyx\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IotDpsManager manager = IotDpsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CertificateResponse response = manager.dpsCertificates()
            .define("mpvecxgodebfqk")
            .withExistingProvisioningService("bgsncghkjeszzhb", "jhtxfvgxbfsmxne")
            .withProperties(new CertificateProperties().withIsVerified(true))
            .withIfMatch("ynhijggme")
            .create();

        Assertions.assertTrue(response.properties().isVerified());
    }
}
