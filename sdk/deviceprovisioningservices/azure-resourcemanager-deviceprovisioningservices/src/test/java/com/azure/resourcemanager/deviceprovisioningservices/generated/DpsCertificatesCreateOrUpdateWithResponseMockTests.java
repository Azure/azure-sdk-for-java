// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceprovisioningservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.deviceprovisioningservices.DeviceProvisioningServicesManager;
import com.azure.resourcemanager.deviceprovisioningservices.models.CertificateProperties;
import com.azure.resourcemanager.deviceprovisioningservices.models.CertificateResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DpsCertificatesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"subject\":\"pnq\",\"expiry\":\"Thu, 25 Nov 2021 03:44:38 GMT\",\"thumbprint\":\"gkbrpyyd\",\"isVerified\":true,\"created\":\"Sat, 04 Dec 2021 04:25:10 GMT\",\"updated\":\"Thu, 07 Oct 2021 14:08:56 GMT\"},\"etag\":\"ik\",\"id\":\"rgvtqag\",\"name\":\"buynhijggm\",\"type\":\"bfs\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DeviceProvisioningServicesManager manager = DeviceProvisioningServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CertificateResponse response = manager.dpsCertificates()
            .define("ljyoxgvcltb")
            .withExistingProvisioningService("jky", "xjvuujqgidokg")
            .withProperties(new CertificateProperties().withIsVerified(true))
            .withIfMatch("wflzlfbxzpuzy")
            .create();

        Assertions.assertTrue(response.properties().isVerified());
    }
}
