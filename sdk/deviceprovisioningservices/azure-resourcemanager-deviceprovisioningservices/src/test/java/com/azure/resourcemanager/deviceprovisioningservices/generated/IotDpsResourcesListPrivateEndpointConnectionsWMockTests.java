// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceprovisioningservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.deviceprovisioningservices.IotDpsManager;
import com.azure.resourcemanager.deviceprovisioningservices.models.PrivateEndpointConnection;
import com.azure.resourcemanager.deviceprovisioningservices.models.PrivateLinkServiceConnectionStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IotDpsResourcesListPrivateEndpointConnectionsWMockTests {
    @Test
    public void testListPrivateEndpointConnectionsWithResponse() throws Exception {
        String responseStr
            = "[{\"properties\":{\"privateEndpoint\":{\"id\":\"bxwyjsflhhcaa\"},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"jixisxyawjoyaqcs\",\"actionsRequired\":\"jpkiidzyexznelix\"}},\"id\":\"rzt\",\"name\":\"o\",\"type\":\"hb\"}]";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IotDpsManager manager = IotDpsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        List<PrivateEndpointConnection> response = manager.iotDpsResources()
            .listPrivateEndpointConnectionsWithResponse("us", "ttouwaboekqvkel", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(PrivateLinkServiceConnectionStatus.PENDING,
            response.get(0).properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("jixisxyawjoyaqcs",
            response.get(0).properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("jpkiidzyexznelix",
            response.get(0).properties().privateLinkServiceConnectionState().actionsRequired());
    }
}
