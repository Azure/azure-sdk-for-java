// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceprovisioningservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.deviceprovisioningservices.IotDpsManager;
import com.azure.resourcemanager.deviceprovisioningservices.models.AllocationPolicy;
import com.azure.resourcemanager.deviceprovisioningservices.models.IotDpsSku;
import com.azure.resourcemanager.deviceprovisioningservices.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.deviceprovisioningservices.models.ProvisioningServiceDescription;
import com.azure.resourcemanager.deviceprovisioningservices.models.PublicNetworkAccess;
import com.azure.resourcemanager.deviceprovisioningservices.models.State;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class IotDpsResourcesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"etag\":\"tdbhrbnla\",\"properties\":{\"state\":\"Transitioning\",\"publicNetworkAccess\":\"Enabled\",\"ipFilterRules\":[],\"privateEndpointConnections\":[],\"provisioningState\":\"enbtkcxywny\",\"iotHubs\":[],\"allocationPolicy\":\"GeoLatency\",\"serviceOperationsHostName\":\"lqidyby\",\"deviceProvisioningHostName\":\"zfcl\",\"idScope\":\"axdbabph\",\"authorizationPolicies\":[],\"enableDataResidency\":false,\"portalOperationsHostName\":\"ktsthsucocmny\"},\"sku\":{\"name\":\"S1\",\"tier\":\"t\",\"capacity\":3916693301251652424},\"identity\":{\"principalId\":\"45b7b80f-785c-41eb-a406-6b69203b0fc0\",\"tenantId\":\"4cf86729-d5fa-4bd0-ba92-bfffb5a1a374\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{}},\"resourcegroup\":\"zywbiex\",\"subscriptionid\":\"eyueaxibxujwb\",\"location\":\"qwalmuzyoxaepd\",\"tags\":{\"bavxbniwdjswzt\":\"ancuxrhd\",\"xbzpfzab\":\"dbpgnxytxhp\"},\"id\":\"lcuhxwtctyqiklb\",\"name\":\"ovplw\",\"type\":\"bhvgy\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        IotDpsManager manager =
            IotDpsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ProvisioningServiceDescription> response =
            manager.iotDpsResources().listByResourceGroup("rcvpnazzmhjrunmp", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("qwalmuzyoxaepd", response.iterator().next().location());
        Assertions.assertEquals("ancuxrhd", response.iterator().next().tags().get("bavxbniwdjswzt"));
        Assertions.assertEquals("tdbhrbnla", response.iterator().next().etag());
        Assertions.assertEquals(State.TRANSITIONING, response.iterator().next().properties().state());
        Assertions
            .assertEquals(PublicNetworkAccess.ENABLED, response.iterator().next().properties().publicNetworkAccess());
        Assertions.assertEquals("enbtkcxywny", response.iterator().next().properties().provisioningState());
        Assertions
            .assertEquals(AllocationPolicy.GEO_LATENCY, response.iterator().next().properties().allocationPolicy());
        Assertions.assertEquals(false, response.iterator().next().properties().enableDataResidency());
        Assertions.assertEquals("ktsthsucocmny", response.iterator().next().properties().portalOperationsHostname());
        Assertions.assertEquals(IotDpsSku.S1, response.iterator().next().sku().name());
        Assertions.assertEquals(3916693301251652424L, response.iterator().next().sku().capacity());
        Assertions
            .assertEquals(
                ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.iterator().next().identity().type());
    }
}
