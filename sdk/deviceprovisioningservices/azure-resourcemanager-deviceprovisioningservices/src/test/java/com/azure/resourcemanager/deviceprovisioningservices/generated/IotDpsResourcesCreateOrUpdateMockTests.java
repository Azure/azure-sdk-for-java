// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceprovisioningservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.deviceprovisioningservices.IotDpsManager;
import com.azure.resourcemanager.deviceprovisioningservices.models.AllocationPolicy;
import com.azure.resourcemanager.deviceprovisioningservices.models.IotDpsPropertiesDescription;
import com.azure.resourcemanager.deviceprovisioningservices.models.IotDpsSku;
import com.azure.resourcemanager.deviceprovisioningservices.models.IotDpsSkuInfo;
import com.azure.resourcemanager.deviceprovisioningservices.models.ManagedServiceIdentity;
import com.azure.resourcemanager.deviceprovisioningservices.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.deviceprovisioningservices.models.ProvisioningServiceDescription;
import com.azure.resourcemanager.deviceprovisioningservices.models.PublicNetworkAccess;
import com.azure.resourcemanager.deviceprovisioningservices.models.State;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class IotDpsResourcesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"etag\":\"mvb\",\"properties\":{\"state\":\"Deleting\",\"publicNetworkAccess\":\"Enabled\",\"ipFilterRules\":[],\"privateEndpointConnections\":[],\"provisioningState\":\"Succeeded\",\"iotHubs\":[],\"allocationPolicy\":\"Hashed\",\"serviceOperationsHostName\":\"oyaqcslyjpkiid\",\"deviceProvisioningHostName\":\"exznelixhnr\",\"idScope\":\"folhbnxknal\",\"authorizationPolicies\":[],\"enableDataResidency\":false,\"portalOperationsHostName\":\"gdtpnapnyiro\"},\"sku\":{\"name\":\"S1\",\"tier\":\"igvpgylg\",\"capacity\":9066000575416708308},\"identity\":{\"principalId\":\"bb1f45eb-266a-412c-adfa-e01e5a2fdcbb\",\"tenantId\":\"c15f335f-7bcd-4e53-9bec-0871ea7b9b9f\",\"type\":\"None\",\"userAssignedIdentities\":{}},\"resourcegroup\":\"lynqwwncwzzh\",\"subscriptionid\":\"ktrmgucnapkt\",\"location\":\"oellwp\",\"tags\":{\"ac\":\"ygpfqb\"},\"id\":\"op\",\"name\":\"fqrhhuaopppc\",\"type\":\"eqx\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        IotDpsManager manager =
            IotDpsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ProvisioningServiceDescription response =
            manager
                .iotDpsResources()
                .define("wxzvlvqhjkb")
                .withRegion("nxipeil")
                .withExistingResourceGroup("c")
                .withProperties(
                    new IotDpsPropertiesDescription()
                        .withState(State.SUSPENDED)
                        .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                        .withIpFilterRules(Arrays.asList())
                        .withPrivateEndpointConnections(Arrays.asList())
                        .withProvisioningState("gwyzm")
                        .withIotHubs(Arrays.asList())
                        .withAllocationPolicy(AllocationPolicy.GEO_LATENCY)
                        .withAuthorizationPolicies(Arrays.asList())
                        .withEnableDataResidency(false)
                        .withPortalOperationsHostname("yqbexrmcqibycno"))
                .withSku(new IotDpsSkuInfo().withName(IotDpsSku.S1).withCapacity(6168011718713142792L))
                .withTags(mapOf("bbtdzumvee", "uaejxdultsk", "zuhkfpbsjyof", "gpw"))
                .withEtag("ibtnmxiebwwaloay")
                .withIdentity(
                    new ManagedServiceIdentity()
                        .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                        .withUserAssignedIdentities(mapOf()))
                .withResourcegroup("zlmwlxkvugfhz")
                .withSubscriptionid("awjvzunluthnnp")
                .create();

        Assertions.assertEquals("oellwp", response.location());
        Assertions.assertEquals("ygpfqb", response.tags().get("ac"));
        Assertions.assertEquals("mvb", response.etag());
        Assertions.assertEquals(State.DELETING, response.properties().state());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.properties().publicNetworkAccess());
        Assertions.assertEquals("Succeeded", response.properties().provisioningState());
        Assertions.assertEquals(AllocationPolicy.HASHED, response.properties().allocationPolicy());
        Assertions.assertEquals(false, response.properties().enableDataResidency());
        Assertions.assertEquals("gdtpnapnyiro", response.properties().portalOperationsHostname());
        Assertions.assertEquals(IotDpsSku.S1, response.sku().name());
        Assertions.assertEquals(9066000575416708308L, response.sku().capacity());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.identity().type());
        Assertions.assertEquals("lynqwwncwzzh", response.resourcegroup());
        Assertions.assertEquals("ktrmgucnapkt", response.subscriptionid());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
