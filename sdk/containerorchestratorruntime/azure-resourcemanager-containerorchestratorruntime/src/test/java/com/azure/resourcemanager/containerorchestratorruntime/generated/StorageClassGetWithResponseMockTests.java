// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerorchestratorruntime.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.containerorchestratorruntime.ContainerOrchestratorRuntimeManager;
import com.azure.resourcemanager.containerorchestratorruntime.models.AccessMode;
import com.azure.resourcemanager.containerorchestratorruntime.models.DataResilienceTier;
import com.azure.resourcemanager.containerorchestratorruntime.models.FailoverTier;
import com.azure.resourcemanager.containerorchestratorruntime.models.PerformanceTier;
import com.azure.resourcemanager.containerorchestratorruntime.models.StorageClassResource;
import com.azure.resourcemanager.containerorchestratorruntime.models.VolumeBindingMode;
import com.azure.resourcemanager.containerorchestratorruntime.models.VolumeExpansion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class StorageClassGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"allowVolumeExpansion\":\"Allow\",\"mountOptions\":[\"x\",\"tqgtzxdpnqbqq\",\"xrjfeallnwsub\"],\"provisioner\":\"njampm\",\"volumeBindingMode\":\"Immediate\",\"accessModes\":[\"ReadWriteOnce\",\"ReadWriteMany\"],\"dataResilience\":\"DataResilient\",\"failoverSpeed\":\"NotAvailable\",\"limitations\":[\"hcbonqvpkvlr\",\"njeaseipheofloke\",\"y\",\"enjbdlwtgrhp\"],\"performance\":\"Ultra\",\"priority\":2247988179657294632,\"typeProperties\":{\"type\":\"StorageClassTypeProperties\"},\"provisioningState\":\"Succeeded\"},\"id\":\"azjpqyegualhbxxh\",\"name\":\"jj\",\"type\":\"zvdudgwdslfhotwm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerOrchestratorRuntimeManager manager = ContainerOrchestratorRuntimeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        StorageClassResource response = manager.storageClass()
            .getWithResponse("mivkwlzuvcc", "wnfnbacf", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(VolumeExpansion.ALLOW, response.properties().allowVolumeExpansion());
        Assertions.assertEquals("x", response.properties().mountOptions().get(0));
        Assertions.assertEquals("njampm", response.properties().provisioner());
        Assertions.assertEquals(VolumeBindingMode.IMMEDIATE, response.properties().volumeBindingMode());
        Assertions.assertEquals(AccessMode.READ_WRITE_ONCE, response.properties().accessModes().get(0));
        Assertions.assertEquals(DataResilienceTier.DATA_RESILIENT, response.properties().dataResilience());
        Assertions.assertEquals(FailoverTier.NOT_AVAILABLE, response.properties().failoverSpeed());
        Assertions.assertEquals("hcbonqvpkvlr", response.properties().limitations().get(0));
        Assertions.assertEquals(PerformanceTier.ULTRA, response.properties().performance());
        Assertions.assertEquals(2247988179657294632L, response.properties().priority());
    }
}
