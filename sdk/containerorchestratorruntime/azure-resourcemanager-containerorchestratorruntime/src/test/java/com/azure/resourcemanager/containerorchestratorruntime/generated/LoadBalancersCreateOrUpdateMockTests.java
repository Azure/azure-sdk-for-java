// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerorchestratorruntime.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.containerorchestratorruntime.ContainerOrchestratorRuntimeManager;
import com.azure.resourcemanager.containerorchestratorruntime.models.AdvertiseMode;
import com.azure.resourcemanager.containerorchestratorruntime.models.LoadBalancer;
import com.azure.resourcemanager.containerorchestratorruntime.models.LoadBalancerProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LoadBalancersCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"addresses\":[\"txfvgx\",\"fsm\",\"nehmpvecx\",\"odebfqkkrbmpu\"],\"serviceSelector\":{\"lzlfbxzpuz\":\"iw\",\"yydhibnuqqk\":\"cispnqzahmgkbr\",\"drgvtqagn\":\"ik\"},\"advertiseMode\":\"ARP\",\"bgpPeers\":[\"hijggme\",\"fsiarbutr\",\"vpnazzm\"],\"provisioningState\":\"Succeeded\"},\"id\":\"nmpxttdb\",\"name\":\"rbnlankxmyskp\",\"type\":\"henbtkcxywnytn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerOrchestratorRuntimeManager manager = ContainerOrchestratorRuntimeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        LoadBalancer response = manager.loadBalancers()
            .define("konocu")
            .withExistingResourceUri("hheunmmqhgyx")
            .withProperties(
                new LoadBalancerProperties().withAddresses(Arrays.asList("lyaxuc", "nuqszfkbey", "ewrmjmwvvjektc"))
                    .withServiceSelector(mapOf("dqgbiqylihkaetc", "nhwlrsffrzpwvl", "ymuctqhjfbebrj", "tvfcivfsn"))
                    .withAdvertiseMode(AdvertiseMode.BOTH)
                    .withBgpPeers(Arrays.asList("fuwutttxf", "jrbirphxepcyv")))
            .create();

        Assertions.assertEquals("txfvgx", response.properties().addresses().get(0));
        Assertions.assertEquals("iw", response.properties().serviceSelector().get("lzlfbxzpuz"));
        Assertions.assertEquals(AdvertiseMode.ARP, response.properties().advertiseMode());
        Assertions.assertEquals("hijggme", response.properties().bgpPeers().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
