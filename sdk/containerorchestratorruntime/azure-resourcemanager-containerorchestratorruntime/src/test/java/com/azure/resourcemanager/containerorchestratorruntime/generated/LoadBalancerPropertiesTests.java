// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerorchestratorruntime.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerorchestratorruntime.models.AdvertiseMode;
import com.azure.resourcemanager.containerorchestratorruntime.models.LoadBalancerProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LoadBalancerPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LoadBalancerProperties model = BinaryData.fromString(
            "{\"addresses\":[\"hmuouqfprwzwbn\",\"uitnwuiz\",\"a\",\"x\"],\"serviceSelector\":{\"rfidfvzwdz\":\"zuckyfi\",\"sdkf\":\"htymw\",\"pvkmijcmmxdcuf\":\"hwxmnteiwa\",\"cxtbzsg\":\"fsrpymzidnse\"},\"advertiseMode\":\"Both\",\"bgpPeers\":[\"sne\"],\"provisioningState\":\"Canceled\"}")
            .toObject(LoadBalancerProperties.class);
        Assertions.assertEquals("hmuouqfprwzwbn", model.addresses().get(0));
        Assertions.assertEquals("zuckyfi", model.serviceSelector().get("rfidfvzwdz"));
        Assertions.assertEquals(AdvertiseMode.BOTH, model.advertiseMode());
        Assertions.assertEquals("sne", model.bgpPeers().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LoadBalancerProperties model
            = new LoadBalancerProperties().withAddresses(Arrays.asList("hmuouqfprwzwbn", "uitnwuiz", "a", "x"))
                .withServiceSelector(mapOf("rfidfvzwdz", "zuckyfi", "sdkf", "htymw", "pvkmijcmmxdcuf", "hwxmnteiwa",
                    "cxtbzsg", "fsrpymzidnse"))
                .withAdvertiseMode(AdvertiseMode.BOTH)
                .withBgpPeers(Arrays.asList("sne"));
        model = BinaryData.fromObject(model).toObject(LoadBalancerProperties.class);
        Assertions.assertEquals("hmuouqfprwzwbn", model.addresses().get(0));
        Assertions.assertEquals("zuckyfi", model.serviceSelector().get("rfidfvzwdz"));
        Assertions.assertEquals(AdvertiseMode.BOTH, model.advertiseMode());
        Assertions.assertEquals("sne", model.bgpPeers().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
