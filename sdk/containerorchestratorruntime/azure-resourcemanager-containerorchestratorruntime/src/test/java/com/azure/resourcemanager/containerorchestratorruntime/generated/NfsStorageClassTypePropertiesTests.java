// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerorchestratorruntime.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerorchestratorruntime.models.NfsDirectoryActionOnVolumeDeletion;
import com.azure.resourcemanager.containerorchestratorruntime.models.NfsStorageClassTypeProperties;
import org.junit.jupiter.api.Assertions;

public final class NfsStorageClassTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NfsStorageClassTypeProperties model = BinaryData.fromString(
            "{\"type\":\"NFS\",\"server\":\"ajpsquc\",\"share\":\"poyfdkfogkn\",\"subDir\":\"jofjd\",\"mountPermissions\":\"qs\",\"onDelete\":\"Retain\"}")
            .toObject(NfsStorageClassTypeProperties.class);
        Assertions.assertEquals("ajpsquc", model.server());
        Assertions.assertEquals("poyfdkfogkn", model.share());
        Assertions.assertEquals("jofjd", model.subDir());
        Assertions.assertEquals("qs", model.mountPermissions());
        Assertions.assertEquals(NfsDirectoryActionOnVolumeDeletion.RETAIN, model.onDelete());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NfsStorageClassTypeProperties model = new NfsStorageClassTypeProperties().withServer("ajpsquc")
            .withShare("poyfdkfogkn")
            .withSubDir("jofjd")
            .withMountPermissions("qs")
            .withOnDelete(NfsDirectoryActionOnVolumeDeletion.RETAIN);
        model = BinaryData.fromObject(model).toObject(NfsStorageClassTypeProperties.class);
        Assertions.assertEquals("ajpsquc", model.server());
        Assertions.assertEquals("poyfdkfogkn", model.share());
        Assertions.assertEquals("jofjd", model.subDir());
        Assertions.assertEquals("qs", model.mountPermissions());
        Assertions.assertEquals(NfsDirectoryActionOnVolumeDeletion.RETAIN, model.onDelete());
    }
}
