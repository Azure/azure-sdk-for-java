// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerorchestratorruntime.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerorchestratorruntime.fluent.models.LoadBalancerInner;
import com.azure.resourcemanager.containerorchestratorruntime.models.AdvertiseMode;
import com.azure.resourcemanager.containerorchestratorruntime.models.LoadBalancerProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LoadBalancerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LoadBalancerInner model = BinaryData.fromString(
            "{\"properties\":{\"addresses\":[\"dgbb\",\"f\",\"dgmb\"],\"serviceSelector\":{\"fpfpsalgbquxigj\":\"xppbhtqqro\"},\"advertiseMode\":\"Both\",\"bgpPeers\":[\"jaoyfhrtx\",\"lnerkujysvleju\",\"fqawrlyxw\"],\"provisioningState\":\"Accepted\"},\"id\":\"rbnwbxgjvtbvpy\",\"name\":\"szdnr\",\"type\":\"jq\"}")
            .toObject(LoadBalancerInner.class);
        Assertions.assertEquals("dgbb", model.properties().addresses().get(0));
        Assertions.assertEquals("xppbhtqqro", model.properties().serviceSelector().get("fpfpsalgbquxigj"));
        Assertions.assertEquals(AdvertiseMode.BOTH, model.properties().advertiseMode());
        Assertions.assertEquals("jaoyfhrtx", model.properties().bgpPeers().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LoadBalancerInner model = new LoadBalancerInner()
            .withProperties(new LoadBalancerProperties().withAddresses(Arrays.asList("dgbb", "f", "dgmb"))
                .withServiceSelector(mapOf("fpfpsalgbquxigj", "xppbhtqqro"))
                .withAdvertiseMode(AdvertiseMode.BOTH)
                .withBgpPeers(Arrays.asList("jaoyfhrtx", "lnerkujysvleju", "fqawrlyxw")));
        model = BinaryData.fromObject(model).toObject(LoadBalancerInner.class);
        Assertions.assertEquals("dgbb", model.properties().addresses().get(0));
        Assertions.assertEquals("xppbhtqqro", model.properties().serviceSelector().get("fpfpsalgbquxigj"));
        Assertions.assertEquals(AdvertiseMode.BOTH, model.properties().advertiseMode());
        Assertions.assertEquals("jaoyfhrtx", model.properties().bgpPeers().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
