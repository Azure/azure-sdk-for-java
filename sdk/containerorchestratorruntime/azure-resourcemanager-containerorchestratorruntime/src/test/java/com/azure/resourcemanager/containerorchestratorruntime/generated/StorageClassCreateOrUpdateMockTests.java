// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerorchestratorruntime.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.containerorchestratorruntime.ContainerOrchestratorRuntimeManager;
import com.azure.resourcemanager.containerorchestratorruntime.models.AccessMode;
import com.azure.resourcemanager.containerorchestratorruntime.models.DataResilienceTier;
import com.azure.resourcemanager.containerorchestratorruntime.models.FailoverTier;
import com.azure.resourcemanager.containerorchestratorruntime.models.PerformanceTier;
import com.azure.resourcemanager.containerorchestratorruntime.models.StorageClassProperties;
import com.azure.resourcemanager.containerorchestratorruntime.models.StorageClassResource;
import com.azure.resourcemanager.containerorchestratorruntime.models.StorageClassTypeProperties;
import com.azure.resourcemanager.containerorchestratorruntime.models.VolumeBindingMode;
import com.azure.resourcemanager.containerorchestratorruntime.models.VolumeExpansion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class StorageClassCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"allowVolumeExpansion\":\"Allow\",\"mountOptions\":[\"axbezyiuo\",\"ktwh\",\"dxwzywqsmbsurexi\",\"o\"],\"provisioner\":\"ocfs\",\"volumeBindingMode\":\"Immediate\",\"accessModes\":[\"ReadWriteMany\",\"ReadWriteMany\",\"ReadWriteOnce\"],\"dataResilience\":\"NotDataResilient\",\"failoverSpeed\":\"NotAvailable\",\"limitations\":[\"xhqyudxorrqnb\"],\"performance\":\"Standard\",\"priority\":4661834241197145471,\"typeProperties\":{\"type\":\"StorageClassTypeProperties\"},\"provisioningState\":\"Succeeded\"},\"id\":\"rvkdvjsllrm\",\"name\":\"vdfwatkpn\",\"type\":\"ulexxbczwtr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerOrchestratorRuntimeManager manager = ContainerOrchestratorRuntimeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        StorageClassResource response = manager.storageClass()
            .define("qsc")
            .withExistingResourceUri("f")
            .withProperties(new StorageClassProperties().withAllowVolumeExpansion(VolumeExpansion.ALLOW)
                .withMountOptions(Arrays.asList("ezrkgqhcjrefo", "gm"))
                .withProvisioner("sle")
                .withVolumeBindingMode(VolumeBindingMode.WAIT_FOR_FIRST_CONSUMER)
                .withAccessModes(
                    Arrays.asList(AccessMode.READ_WRITE_MANY, AccessMode.READ_WRITE_MANY, AccessMode.READ_WRITE_ONCE))
                .withDataResilience(DataResilienceTier.DATA_RESILIENT)
                .withFailoverSpeed(FailoverTier.NOT_AVAILABLE)
                .withLimitations(Arrays.asList("ngj", "rcczsqpjhvmd", "jvnysounqe", "a"))
                .withPerformance(PerformanceTier.STANDARD)
                .withPriority(4278149463839045916L)
                .withTypeProperties(new StorageClassTypeProperties()))
            .create();

        Assertions.assertEquals(VolumeExpansion.ALLOW, response.properties().allowVolumeExpansion());
        Assertions.assertEquals("axbezyiuo", response.properties().mountOptions().get(0));
        Assertions.assertEquals("ocfs", response.properties().provisioner());
        Assertions.assertEquals(VolumeBindingMode.IMMEDIATE, response.properties().volumeBindingMode());
        Assertions.assertEquals(AccessMode.READ_WRITE_MANY, response.properties().accessModes().get(0));
        Assertions.assertEquals(DataResilienceTier.NOT_DATA_RESILIENT, response.properties().dataResilience());
        Assertions.assertEquals(FailoverTier.NOT_AVAILABLE, response.properties().failoverSpeed());
        Assertions.assertEquals("xhqyudxorrqnb", response.properties().limitations().get(0));
        Assertions.assertEquals(PerformanceTier.STANDARD, response.properties().performance());
        Assertions.assertEquals(4661834241197145471L, response.properties().priority());
    }
}
