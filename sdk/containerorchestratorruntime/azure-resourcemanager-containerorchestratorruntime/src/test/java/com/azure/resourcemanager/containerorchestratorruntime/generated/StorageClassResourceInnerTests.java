// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerorchestratorruntime.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerorchestratorruntime.fluent.models.StorageClassResourceInner;
import com.azure.resourcemanager.containerorchestratorruntime.models.AccessMode;
import com.azure.resourcemanager.containerorchestratorruntime.models.DataResilienceTier;
import com.azure.resourcemanager.containerorchestratorruntime.models.FailoverTier;
import com.azure.resourcemanager.containerorchestratorruntime.models.PerformanceTier;
import com.azure.resourcemanager.containerorchestratorruntime.models.StorageClassProperties;
import com.azure.resourcemanager.containerorchestratorruntime.models.StorageClassTypeProperties;
import com.azure.resourcemanager.containerorchestratorruntime.models.VolumeBindingMode;
import com.azure.resourcemanager.containerorchestratorruntime.models.VolumeExpansion;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class StorageClassResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageClassResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"allowVolumeExpansion\":\"Allow\",\"mountOptions\":[\"vgjxpybczm\"],\"provisioner\":\"mtz\",\"volumeBindingMode\":\"WaitForFirstConsumer\",\"accessModes\":[\"ReadWriteOnce\",\"ReadWriteMany\",\"ReadWriteOnce\",\"ReadWriteMany\"],\"dataResilience\":\"NotDataResilient\",\"failoverSpeed\":\"Fast\",\"limitations\":[\"bejhphoycmsxa\"],\"performance\":\"Ultra\",\"priority\":1322088289348101610,\"typeProperties\":{\"type\":\"StorageClassTypeProperties\"},\"provisioningState\":\"Provisioning\"},\"id\":\"ioq\",\"name\":\"zehtbmu\",\"type\":\"p\"}")
            .toObject(StorageClassResourceInner.class);
        Assertions.assertEquals(VolumeExpansion.ALLOW, model.properties().allowVolumeExpansion());
        Assertions.assertEquals("vgjxpybczm", model.properties().mountOptions().get(0));
        Assertions.assertEquals("mtz", model.properties().provisioner());
        Assertions.assertEquals(VolumeBindingMode.WAIT_FOR_FIRST_CONSUMER, model.properties().volumeBindingMode());
        Assertions.assertEquals(AccessMode.READ_WRITE_ONCE, model.properties().accessModes().get(0));
        Assertions.assertEquals(DataResilienceTier.NOT_DATA_RESILIENT, model.properties().dataResilience());
        Assertions.assertEquals(FailoverTier.FAST, model.properties().failoverSpeed());
        Assertions.assertEquals("bejhphoycmsxa", model.properties().limitations().get(0));
        Assertions.assertEquals(PerformanceTier.ULTRA, model.properties().performance());
        Assertions.assertEquals(1322088289348101610L, model.properties().priority());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageClassResourceInner model = new StorageClassResourceInner()
            .withProperties(new StorageClassProperties().withAllowVolumeExpansion(VolumeExpansion.ALLOW)
                .withMountOptions(Arrays.asList("vgjxpybczm"))
                .withProvisioner("mtz")
                .withVolumeBindingMode(VolumeBindingMode.WAIT_FOR_FIRST_CONSUMER)
                .withAccessModes(Arrays.asList(AccessMode.READ_WRITE_ONCE, AccessMode.READ_WRITE_MANY,
                    AccessMode.READ_WRITE_ONCE, AccessMode.READ_WRITE_MANY))
                .withDataResilience(DataResilienceTier.NOT_DATA_RESILIENT)
                .withFailoverSpeed(FailoverTier.FAST)
                .withLimitations(Arrays.asList("bejhphoycmsxa"))
                .withPerformance(PerformanceTier.ULTRA)
                .withPriority(1322088289348101610L)
                .withTypeProperties(new StorageClassTypeProperties()));
        model = BinaryData.fromObject(model).toObject(StorageClassResourceInner.class);
        Assertions.assertEquals(VolumeExpansion.ALLOW, model.properties().allowVolumeExpansion());
        Assertions.assertEquals("vgjxpybczm", model.properties().mountOptions().get(0));
        Assertions.assertEquals("mtz", model.properties().provisioner());
        Assertions.assertEquals(VolumeBindingMode.WAIT_FOR_FIRST_CONSUMER, model.properties().volumeBindingMode());
        Assertions.assertEquals(AccessMode.READ_WRITE_ONCE, model.properties().accessModes().get(0));
        Assertions.assertEquals(DataResilienceTier.NOT_DATA_RESILIENT, model.properties().dataResilience());
        Assertions.assertEquals(FailoverTier.FAST, model.properties().failoverSpeed());
        Assertions.assertEquals("bejhphoycmsxa", model.properties().limitations().get(0));
        Assertions.assertEquals(PerformanceTier.ULTRA, model.properties().performance());
        Assertions.assertEquals(1322088289348101610L, model.properties().priority());
    }
}
