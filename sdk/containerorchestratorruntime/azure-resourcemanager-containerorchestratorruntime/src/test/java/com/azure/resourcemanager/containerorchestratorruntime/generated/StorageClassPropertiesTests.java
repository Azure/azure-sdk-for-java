// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerorchestratorruntime.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerorchestratorruntime.models.AccessMode;
import com.azure.resourcemanager.containerorchestratorruntime.models.DataResilienceTier;
import com.azure.resourcemanager.containerorchestratorruntime.models.FailoverTier;
import com.azure.resourcemanager.containerorchestratorruntime.models.PerformanceTier;
import com.azure.resourcemanager.containerorchestratorruntime.models.StorageClassProperties;
import com.azure.resourcemanager.containerorchestratorruntime.models.StorageClassTypeProperties;
import com.azure.resourcemanager.containerorchestratorruntime.models.VolumeBindingMode;
import com.azure.resourcemanager.containerorchestratorruntime.models.VolumeExpansion;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class StorageClassPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageClassProperties model = BinaryData.fromString(
            "{\"allowVolumeExpansion\":\"Allow\",\"mountOptions\":[\"zhwlrxy\",\"qsoqijgkd\"],\"provisioner\":\"pazlobcufpdz\",\"volumeBindingMode\":\"Immediate\",\"accessModes\":[\"ReadWriteOnce\",\"ReadWriteMany\",\"ReadWriteMany\"],\"dataResilience\":\"NotDataResilient\",\"failoverSpeed\":\"Fast\",\"limitations\":[\"gnufoooj\"],\"performance\":\"Premium\",\"priority\":2890649566482151076,\"typeProperties\":{\"type\":\"StorageClassTypeProperties\"},\"provisioningState\":\"Updating\"}")
            .toObject(StorageClassProperties.class);
        Assertions.assertEquals(VolumeExpansion.ALLOW, model.allowVolumeExpansion());
        Assertions.assertEquals("zhwlrxy", model.mountOptions().get(0));
        Assertions.assertEquals("pazlobcufpdz", model.provisioner());
        Assertions.assertEquals(VolumeBindingMode.IMMEDIATE, model.volumeBindingMode());
        Assertions.assertEquals(AccessMode.READ_WRITE_ONCE, model.accessModes().get(0));
        Assertions.assertEquals(DataResilienceTier.NOT_DATA_RESILIENT, model.dataResilience());
        Assertions.assertEquals(FailoverTier.FAST, model.failoverSpeed());
        Assertions.assertEquals("gnufoooj", model.limitations().get(0));
        Assertions.assertEquals(PerformanceTier.PREMIUM, model.performance());
        Assertions.assertEquals(2890649566482151076L, model.priority());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageClassProperties model = new StorageClassProperties().withAllowVolumeExpansion(VolumeExpansion.ALLOW)
            .withMountOptions(Arrays.asList("zhwlrxy", "qsoqijgkd"))
            .withProvisioner("pazlobcufpdz")
            .withVolumeBindingMode(VolumeBindingMode.IMMEDIATE)
            .withAccessModes(
                Arrays.asList(AccessMode.READ_WRITE_ONCE, AccessMode.READ_WRITE_MANY, AccessMode.READ_WRITE_MANY))
            .withDataResilience(DataResilienceTier.NOT_DATA_RESILIENT)
            .withFailoverSpeed(FailoverTier.FAST)
            .withLimitations(Arrays.asList("gnufoooj"))
            .withPerformance(PerformanceTier.PREMIUM)
            .withPriority(2890649566482151076L)
            .withTypeProperties(new StorageClassTypeProperties());
        model = BinaryData.fromObject(model).toObject(StorageClassProperties.class);
        Assertions.assertEquals(VolumeExpansion.ALLOW, model.allowVolumeExpansion());
        Assertions.assertEquals("zhwlrxy", model.mountOptions().get(0));
        Assertions.assertEquals("pazlobcufpdz", model.provisioner());
        Assertions.assertEquals(VolumeBindingMode.IMMEDIATE, model.volumeBindingMode());
        Assertions.assertEquals(AccessMode.READ_WRITE_ONCE, model.accessModes().get(0));
        Assertions.assertEquals(DataResilienceTier.NOT_DATA_RESILIENT, model.dataResilience());
        Assertions.assertEquals(FailoverTier.FAST, model.failoverSpeed());
        Assertions.assertEquals("gnufoooj", model.limitations().get(0));
        Assertions.assertEquals(PerformanceTier.PREMIUM, model.performance());
        Assertions.assertEquals(2890649566482151076L, model.priority());
    }
}
