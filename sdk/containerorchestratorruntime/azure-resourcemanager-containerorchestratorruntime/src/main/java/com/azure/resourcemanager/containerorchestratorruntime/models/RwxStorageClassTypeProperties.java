// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerorchestratorruntime.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of RWX StorageClass.
 */
@Fluent
public final class RwxStorageClassTypeProperties extends StorageClassTypeProperties {
    /*
     * Type of the storage class.
     */
    private SCType type = SCType.RWX;

    /*
     * The backing storageclass used to create new storageclass
     */
    private String backingStorageClassName;

    /**
     * Creates an instance of RwxStorageClassTypeProperties class.
     */
    public RwxStorageClassTypeProperties() {
    }

    /**
     * Get the type property: Type of the storage class.
     * 
     * @return the type value.
     */
    @Override
    public SCType type() {
        return this.type;
    }

    /**
     * Get the backingStorageClassName property: The backing storageclass used to create new storageclass.
     * 
     * @return the backingStorageClassName value.
     */
    public String backingStorageClassName() {
        return this.backingStorageClassName;
    }

    /**
     * Set the backingStorageClassName property: The backing storageclass used to create new storageclass.
     * 
     * @param backingStorageClassName the backingStorageClassName value to set.
     * @return the RwxStorageClassTypeProperties object itself.
     */
    public RwxStorageClassTypeProperties withBackingStorageClassName(String backingStorageClassName) {
        this.backingStorageClassName = backingStorageClassName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (backingStorageClassName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property backingStorageClassName in model RwxStorageClassTypeProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RwxStorageClassTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("backingStorageClassName", this.backingStorageClassName);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RwxStorageClassTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RwxStorageClassTypeProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RwxStorageClassTypeProperties.
     */
    public static RwxStorageClassTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RwxStorageClassTypeProperties deserializedRwxStorageClassTypeProperties
                = new RwxStorageClassTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("backingStorageClassName".equals(fieldName)) {
                    deserializedRwxStorageClassTypeProperties.backingStorageClassName = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedRwxStorageClassTypeProperties.type = SCType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRwxStorageClassTypeProperties;
        });
    }
}
