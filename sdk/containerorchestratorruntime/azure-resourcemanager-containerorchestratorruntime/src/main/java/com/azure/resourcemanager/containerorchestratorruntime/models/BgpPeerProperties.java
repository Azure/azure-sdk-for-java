// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerorchestratorruntime.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of the BgpPeer.
 */
@Fluent
public final class BgpPeerProperties implements JsonSerializable<BgpPeerProperties> {
    /*
     * My ASN
     */
    private int myAsn;

    /*
     * Peer ASN
     */
    private int peerAsn;

    /*
     * Peer Address
     */
    private String peerAddress;

    /*
     * Resource provision state
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of BgpPeerProperties class.
     */
    public BgpPeerProperties() {
    }

    /**
     * Get the myAsn property: My ASN.
     * 
     * @return the myAsn value.
     */
    public int myAsn() {
        return this.myAsn;
    }

    /**
     * Set the myAsn property: My ASN.
     * 
     * @param myAsn the myAsn value to set.
     * @return the BgpPeerProperties object itself.
     */
    public BgpPeerProperties withMyAsn(int myAsn) {
        this.myAsn = myAsn;
        return this;
    }

    /**
     * Get the peerAsn property: Peer ASN.
     * 
     * @return the peerAsn value.
     */
    public int peerAsn() {
        return this.peerAsn;
    }

    /**
     * Set the peerAsn property: Peer ASN.
     * 
     * @param peerAsn the peerAsn value to set.
     * @return the BgpPeerProperties object itself.
     */
    public BgpPeerProperties withPeerAsn(int peerAsn) {
        this.peerAsn = peerAsn;
        return this;
    }

    /**
     * Get the peerAddress property: Peer Address.
     * 
     * @return the peerAddress value.
     */
    public String peerAddress() {
        return this.peerAddress;
    }

    /**
     * Set the peerAddress property: Peer Address.
     * 
     * @param peerAddress the peerAddress value to set.
     * @return the BgpPeerProperties object itself.
     */
    public BgpPeerProperties withPeerAddress(String peerAddress) {
        this.peerAddress = peerAddress;
        return this;
    }

    /**
     * Get the provisioningState property: Resource provision state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (peerAddress() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property peerAddress in model BgpPeerProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BgpPeerProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("myAsn", this.myAsn);
        jsonWriter.writeIntField("peerAsn", this.peerAsn);
        jsonWriter.writeStringField("peerAddress", this.peerAddress);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BgpPeerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BgpPeerProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BgpPeerProperties.
     */
    public static BgpPeerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BgpPeerProperties deserializedBgpPeerProperties = new BgpPeerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("myAsn".equals(fieldName)) {
                    deserializedBgpPeerProperties.myAsn = reader.getInt();
                } else if ("peerAsn".equals(fieldName)) {
                    deserializedBgpPeerProperties.peerAsn = reader.getInt();
                } else if ("peerAddress".equals(fieldName)) {
                    deserializedBgpPeerProperties.peerAddress = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedBgpPeerProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBgpPeerProperties;
        });
    }
}
