// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerorchestratorruntime.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Details of the LoadBalancer.
 */
@Fluent
public final class LoadBalancerProperties implements JsonSerializable<LoadBalancerProperties> {
    /*
     * IP Range
     */
    private List<String> addresses;

    /*
     * A dynamic label mapping to select related services. For instance, if you want to create a load balancer only for
     * services with label "a=b", then please specify {"a": "b"} in the field.
     */
    private Map<String, String> serviceSelector;

    /*
     * Advertise Mode
     */
    private AdvertiseMode advertiseMode;

    /*
     * The list of BGP peers it should advertise to. Null or empty means to advertise to all peers.
     */
    private List<String> bgpPeers;

    /*
     * Resource provision state
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of LoadBalancerProperties class.
     */
    public LoadBalancerProperties() {
    }

    /**
     * Get the addresses property: IP Range.
     * 
     * @return the addresses value.
     */
    public List<String> addresses() {
        return this.addresses;
    }

    /**
     * Set the addresses property: IP Range.
     * 
     * @param addresses the addresses value to set.
     * @return the LoadBalancerProperties object itself.
     */
    public LoadBalancerProperties withAddresses(List<String> addresses) {
        this.addresses = addresses;
        return this;
    }

    /**
     * Get the serviceSelector property: A dynamic label mapping to select related services. For instance, if you want
     * to create a load balancer only for services with label "a=b", then please specify {"a": "b"} in the field.
     * 
     * @return the serviceSelector value.
     */
    public Map<String, String> serviceSelector() {
        return this.serviceSelector;
    }

    /**
     * Set the serviceSelector property: A dynamic label mapping to select related services. For instance, if you want
     * to create a load balancer only for services with label "a=b", then please specify {"a": "b"} in the field.
     * 
     * @param serviceSelector the serviceSelector value to set.
     * @return the LoadBalancerProperties object itself.
     */
    public LoadBalancerProperties withServiceSelector(Map<String, String> serviceSelector) {
        this.serviceSelector = serviceSelector;
        return this;
    }

    /**
     * Get the advertiseMode property: Advertise Mode.
     * 
     * @return the advertiseMode value.
     */
    public AdvertiseMode advertiseMode() {
        return this.advertiseMode;
    }

    /**
     * Set the advertiseMode property: Advertise Mode.
     * 
     * @param advertiseMode the advertiseMode value to set.
     * @return the LoadBalancerProperties object itself.
     */
    public LoadBalancerProperties withAdvertiseMode(AdvertiseMode advertiseMode) {
        this.advertiseMode = advertiseMode;
        return this;
    }

    /**
     * Get the bgpPeers property: The list of BGP peers it should advertise to. Null or empty means to advertise to all
     * peers.
     * 
     * @return the bgpPeers value.
     */
    public List<String> bgpPeers() {
        return this.bgpPeers;
    }

    /**
     * Set the bgpPeers property: The list of BGP peers it should advertise to. Null or empty means to advertise to all
     * peers.
     * 
     * @param bgpPeers the bgpPeers value to set.
     * @return the LoadBalancerProperties object itself.
     */
    public LoadBalancerProperties withBgpPeers(List<String> bgpPeers) {
        this.bgpPeers = bgpPeers;
        return this;
    }

    /**
     * Get the provisioningState property: Resource provision state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (addresses() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property addresses in model LoadBalancerProperties"));
        }
        if (advertiseMode() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property advertiseMode in model LoadBalancerProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LoadBalancerProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("addresses", this.addresses, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("advertiseMode", this.advertiseMode == null ? null : this.advertiseMode.toString());
        jsonWriter.writeMapField("serviceSelector", this.serviceSelector,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("bgpPeers", this.bgpPeers, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoadBalancerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoadBalancerProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LoadBalancerProperties.
     */
    public static LoadBalancerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoadBalancerProperties deserializedLoadBalancerProperties = new LoadBalancerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("addresses".equals(fieldName)) {
                    List<String> addresses = reader.readArray(reader1 -> reader1.getString());
                    deserializedLoadBalancerProperties.addresses = addresses;
                } else if ("advertiseMode".equals(fieldName)) {
                    deserializedLoadBalancerProperties.advertiseMode = AdvertiseMode.fromString(reader.getString());
                } else if ("serviceSelector".equals(fieldName)) {
                    Map<String, String> serviceSelector = reader.readMap(reader1 -> reader1.getString());
                    deserializedLoadBalancerProperties.serviceSelector = serviceSelector;
                } else if ("bgpPeers".equals(fieldName)) {
                    List<String> bgpPeers = reader.readArray(reader1 -> reader1.getString());
                    deserializedLoadBalancerProperties.bgpPeers = bgpPeers;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedLoadBalancerProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoadBalancerProperties;
        });
    }
}
