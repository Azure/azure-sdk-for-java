// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerorchestratorruntime.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerorchestratorruntime.fluent.StorageClassClient;
import com.azure.resourcemanager.containerorchestratorruntime.fluent.models.StorageClassResourceInner;
import com.azure.resourcemanager.containerorchestratorruntime.models.StorageClass;
import com.azure.resourcemanager.containerorchestratorruntime.models.StorageClassResource;

public final class StorageClassImpl implements StorageClass {
    private static final ClientLogger LOGGER = new ClientLogger(StorageClassImpl.class);

    private final StorageClassClient innerClient;

    private final com.azure.resourcemanager.containerorchestratorruntime.ContainerOrchestratorRuntimeManager serviceManager;

    public StorageClassImpl(StorageClassClient innerClient,
        com.azure.resourcemanager.containerorchestratorruntime.ContainerOrchestratorRuntimeManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<StorageClassResource> getWithResponse(String resourceUri, String storageClassName,
        Context context) {
        Response<StorageClassResourceInner> inner
            = this.serviceClient().getWithResponse(resourceUri, storageClassName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StorageClassResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StorageClassResource get(String resourceUri, String storageClassName) {
        StorageClassResourceInner inner = this.serviceClient().get(resourceUri, storageClassName);
        if (inner != null) {
            return new StorageClassResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceUri, String storageClassName) {
        this.serviceClient().delete(resourceUri, storageClassName);
    }

    public void delete(String resourceUri, String storageClassName, Context context) {
        this.serviceClient().delete(resourceUri, storageClassName, context);
    }

    public PagedIterable<StorageClassResource> list(String resourceUri) {
        PagedIterable<StorageClassResourceInner> inner = this.serviceClient().list(resourceUri);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StorageClassResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<StorageClassResource> list(String resourceUri, Context context) {
        PagedIterable<StorageClassResourceInner> inner = this.serviceClient().list(resourceUri, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StorageClassResourceImpl(inner1, this.manager()));
    }

    public StorageClassResource getById(String id) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.KubernetesRuntime/storageClasses/{storageClassName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String storageClassName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.KubernetesRuntime/storageClasses/{storageClassName}",
            "storageClassName");
        if (storageClassName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'storageClasses'.", id)));
        }
        return this.getWithResponse(resourceUri, storageClassName, Context.NONE).getValue();
    }

    public Response<StorageClassResource> getByIdWithResponse(String id, Context context) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.KubernetesRuntime/storageClasses/{storageClassName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String storageClassName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.KubernetesRuntime/storageClasses/{storageClassName}",
            "storageClassName");
        if (storageClassName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'storageClasses'.", id)));
        }
        return this.getWithResponse(resourceUri, storageClassName, context);
    }

    public void deleteById(String id) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.KubernetesRuntime/storageClasses/{storageClassName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String storageClassName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.KubernetesRuntime/storageClasses/{storageClassName}",
            "storageClassName");
        if (storageClassName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'storageClasses'.", id)));
        }
        this.delete(resourceUri, storageClassName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.KubernetesRuntime/storageClasses/{storageClassName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String storageClassName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.KubernetesRuntime/storageClasses/{storageClassName}",
            "storageClassName");
        if (storageClassName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'storageClasses'.", id)));
        }
        this.delete(resourceUri, storageClassName, context);
    }

    private StorageClassClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.containerorchestratorruntime.ContainerOrchestratorRuntimeManager manager() {
        return this.serviceManager;
    }

    public StorageClassResourceImpl define(String name) {
        return new StorageClassResourceImpl(name, this.manager());
    }
}
