// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerorchestratorruntime.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.containerorchestratorruntime.fluent.models.LoadBalancerInner;

/**
 * An instance of this class provides access to all the operations defined in LoadBalancersClient.
 */
public interface LoadBalancersClient {
    /**
     * Get a LoadBalancer.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param loadBalancerName The name of the LoadBalancer.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a LoadBalancer along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<LoadBalancerInner> getWithResponse(String resourceUri, String loadBalancerName, Context context);

    /**
     * Get a LoadBalancer.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param loadBalancerName The name of the LoadBalancer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a LoadBalancer.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    LoadBalancerInner get(String resourceUri, String loadBalancerName);

    /**
     * Create a LoadBalancer.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param loadBalancerName The name of the LoadBalancer.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a LoadBalancer resource for an Arc connected cluster
     * (Microsoft.Kubernetes/connectedClusters).
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<LoadBalancerInner>, LoadBalancerInner> beginCreateOrUpdate(String resourceUri,
        String loadBalancerName, LoadBalancerInner resource);

    /**
     * Create a LoadBalancer.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param loadBalancerName The name of the LoadBalancer.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a LoadBalancer resource for an Arc connected cluster
     * (Microsoft.Kubernetes/connectedClusters).
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<LoadBalancerInner>, LoadBalancerInner> beginCreateOrUpdate(String resourceUri,
        String loadBalancerName, LoadBalancerInner resource, Context context);

    /**
     * Create a LoadBalancer.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param loadBalancerName The name of the LoadBalancer.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a LoadBalancer resource for an Arc connected cluster (Microsoft.Kubernetes/connectedClusters).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    LoadBalancerInner createOrUpdate(String resourceUri, String loadBalancerName, LoadBalancerInner resource);

    /**
     * Create a LoadBalancer.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param loadBalancerName The name of the LoadBalancer.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a LoadBalancer resource for an Arc connected cluster (Microsoft.Kubernetes/connectedClusters).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    LoadBalancerInner createOrUpdate(String resourceUri, String loadBalancerName, LoadBalancerInner resource,
        Context context);

    /**
     * Delete a LoadBalancer.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param loadBalancerName The name of the LoadBalancer.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceUri, String loadBalancerName, Context context);

    /**
     * Delete a LoadBalancer.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param loadBalancerName The name of the LoadBalancer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceUri, String loadBalancerName);

    /**
     * List LoadBalancer resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LoadBalancer list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<LoadBalancerInner> list(String resourceUri);

    /**
     * List LoadBalancer resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LoadBalancer list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<LoadBalancerInner> list(String resourceUri, Context context);
}
