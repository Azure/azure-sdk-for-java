// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerorchestratorruntime.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of LoadBalancers.
 */
public interface LoadBalancers {
    /**
     * Get a LoadBalancer.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param loadBalancerName The name of the LoadBalancer.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a LoadBalancer along with {@link Response}.
     */
    Response<LoadBalancer> getWithResponse(String resourceUri, String loadBalancerName, Context context);

    /**
     * Get a LoadBalancer.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param loadBalancerName The name of the LoadBalancer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a LoadBalancer.
     */
    LoadBalancer get(String resourceUri, String loadBalancerName);

    /**
     * Delete a LoadBalancer.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param loadBalancerName The name of the LoadBalancer.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByResourceGroupWithResponse(String resourceUri, String loadBalancerName, Context context);

    /**
     * Delete a LoadBalancer.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param loadBalancerName The name of the LoadBalancer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceUri, String loadBalancerName);

    /**
     * List LoadBalancer resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LoadBalancer list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<LoadBalancer> list(String resourceUri);

    /**
     * List LoadBalancer resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LoadBalancer list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<LoadBalancer> list(String resourceUri, Context context);

    /**
     * Get a LoadBalancer.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a LoadBalancer along with {@link Response}.
     */
    LoadBalancer getById(String id);

    /**
     * Get a LoadBalancer.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a LoadBalancer along with {@link Response}.
     */
    Response<LoadBalancer> getByIdWithResponse(String id, Context context);

    /**
     * Delete a LoadBalancer.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a LoadBalancer.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new LoadBalancer resource.
     * 
     * @param name resource name.
     * @return the first stage of the new LoadBalancer definition.
     */
    LoadBalancer.DefinitionStages.Blank define(String name);
}
