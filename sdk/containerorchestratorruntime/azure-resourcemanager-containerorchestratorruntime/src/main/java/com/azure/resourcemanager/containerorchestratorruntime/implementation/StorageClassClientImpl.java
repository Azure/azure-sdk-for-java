// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerorchestratorruntime.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.containerorchestratorruntime.fluent.StorageClassClient;
import com.azure.resourcemanager.containerorchestratorruntime.fluent.models.StorageClassResourceInner;
import com.azure.resourcemanager.containerorchestratorruntime.implementation.models.StorageClassResourceListResult;
import com.azure.resourcemanager.containerorchestratorruntime.models.StorageClassResourceUpdate;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in StorageClassClient.
 */
public final class StorageClassClientImpl implements StorageClassClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final StorageClassService service;

    /**
     * The service client containing this operation class.
     */
    private final ContainerOrchestratorRuntimeMgmtClientImpl client;

    /**
     * Initializes an instance of StorageClassClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    StorageClassClientImpl(ContainerOrchestratorRuntimeMgmtClientImpl client) {
        this.service
            = RestProxy.create(StorageClassService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ContainerOrchestratorRuntimeMgmtClientStorageClass to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "ContainerOrchestrato")
    public interface StorageClassService {
        @Headers({ "Content-Type: application/json" })
        @Get("/{resourceUri}/providers/Microsoft.KubernetesRuntime/storageClasses/{storageClassName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StorageClassResourceInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("storageClassName") String storageClassName, @HeaderParam("Accept") String accept,
            Context context);

        @Put("/{resourceUri}/providers/Microsoft.KubernetesRuntime/storageClasses/{storageClassName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("storageClassName") String storageClassName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") StorageClassResourceInner resource,
            Context context);

        @Patch("/{resourceUri}/providers/Microsoft.KubernetesRuntime/storageClasses/{storageClassName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("storageClassName") String storageClassName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") StorageClassResourceUpdate properties,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/{resourceUri}/providers/Microsoft.KubernetesRuntime/storageClasses/{storageClassName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("storageClassName") String storageClassName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{resourceUri}/providers/Microsoft.KubernetesRuntime/storageClasses")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StorageClassResourceListResult>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StorageClassResourceListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StorageClassResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StorageClassResourceInner>> getWithResponseAsync(String resourceUri,
        String storageClassName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (storageClassName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter storageClassName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                storageClassName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StorageClassResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StorageClassResourceInner>> getWithResponseAsync(String resourceUri, String storageClassName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (storageClassName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter storageClassName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, storageClassName,
            accept, context);
    }

    /**
     * Get a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StorageClassResource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StorageClassResourceInner> getAsync(String resourceUri, String storageClassName) {
        return getWithResponseAsync(resourceUri, storageClassName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StorageClassResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StorageClassResourceInner> getWithResponse(String resourceUri, String storageClassName,
        Context context) {
        return getWithResponseAsync(resourceUri, storageClassName, context).block();
    }

    /**
     * Get a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StorageClassResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StorageClassResourceInner get(String resourceUri, String storageClassName) {
        return getWithResponse(resourceUri, storageClassName, Context.NONE).getValue();
    }

    /**
     * Create a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StorageClass resource for an Arc connected cluster (Microsoft.Kubernetes/connectedClusters) along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceUri,
        String storageClassName, StorageClassResourceInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (storageClassName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter storageClassName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceUri, storageClassName, contentType, accept, resource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StorageClass resource for an Arc connected cluster (Microsoft.Kubernetes/connectedClusters) along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceUri,
        String storageClassName, StorageClassResourceInner resource, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (storageClassName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter storageClassName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
            storageClassName, contentType, accept, resource, context);
    }

    /**
     * Create a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a StorageClass resource for an Arc connected cluster
     * (Microsoft.Kubernetes/connectedClusters).
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<StorageClassResourceInner>, StorageClassResourceInner>
        beginCreateOrUpdateAsync(String resourceUri, String storageClassName, StorageClassResourceInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceUri, storageClassName, resource);
        return this.client.<StorageClassResourceInner, StorageClassResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), StorageClassResourceInner.class, StorageClassResourceInner.class,
            this.client.getContext());
    }

    /**
     * Create a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a StorageClass resource for an Arc connected cluster
     * (Microsoft.Kubernetes/connectedClusters).
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<StorageClassResourceInner>, StorageClassResourceInner> beginCreateOrUpdateAsync(
        String resourceUri, String storageClassName, StorageClassResourceInner resource, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceUri, storageClassName, resource, context);
        return this.client.<StorageClassResourceInner, StorageClassResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), StorageClassResourceInner.class, StorageClassResourceInner.class, context);
    }

    /**
     * Create a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a StorageClass resource for an Arc connected cluster
     * (Microsoft.Kubernetes/connectedClusters).
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<StorageClassResourceInner>, StorageClassResourceInner>
        beginCreateOrUpdate(String resourceUri, String storageClassName, StorageClassResourceInner resource) {
        return this.beginCreateOrUpdateAsync(resourceUri, storageClassName, resource).getSyncPoller();
    }

    /**
     * Create a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a StorageClass resource for an Arc connected cluster
     * (Microsoft.Kubernetes/connectedClusters).
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<StorageClassResourceInner>, StorageClassResourceInner> beginCreateOrUpdate(
        String resourceUri, String storageClassName, StorageClassResourceInner resource, Context context) {
        return this.beginCreateOrUpdateAsync(resourceUri, storageClassName, resource, context).getSyncPoller();
    }

    /**
     * Create a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StorageClass resource for an Arc connected cluster (Microsoft.Kubernetes/connectedClusters) on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StorageClassResourceInner> createOrUpdateAsync(String resourceUri, String storageClassName,
        StorageClassResourceInner resource) {
        return beginCreateOrUpdateAsync(resourceUri, storageClassName, resource).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StorageClass resource for an Arc connected cluster (Microsoft.Kubernetes/connectedClusters) on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StorageClassResourceInner> createOrUpdateAsync(String resourceUri, String storageClassName,
        StorageClassResourceInner resource, Context context) {
        return beginCreateOrUpdateAsync(resourceUri, storageClassName, resource, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StorageClass resource for an Arc connected cluster (Microsoft.Kubernetes/connectedClusters).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StorageClassResourceInner createOrUpdate(String resourceUri, String storageClassName,
        StorageClassResourceInner resource) {
        return createOrUpdateAsync(resourceUri, storageClassName, resource).block();
    }

    /**
     * Create a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StorageClass resource for an Arc connected cluster (Microsoft.Kubernetes/connectedClusters).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StorageClassResourceInner createOrUpdate(String resourceUri, String storageClassName,
        StorageClassResourceInner resource, Context context) {
        return createOrUpdateAsync(resourceUri, storageClassName, resource, context).block();
    }

    /**
     * Update a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StorageClass resource for an Arc connected cluster (Microsoft.Kubernetes/connectedClusters) along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceUri, String storageClassName,
        StorageClassResourceUpdate properties) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (storageClassName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter storageClassName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                storageClassName, contentType, accept, properties, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StorageClass resource for an Arc connected cluster (Microsoft.Kubernetes/connectedClusters) along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceUri, String storageClassName,
        StorageClassResourceUpdate properties, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (storageClassName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter storageClassName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, storageClassName,
            contentType, accept, properties, context);
    }

    /**
     * Update a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a StorageClass resource for an Arc connected cluster
     * (Microsoft.Kubernetes/connectedClusters).
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<StorageClassResourceInner>, StorageClassResourceInner>
        beginUpdateAsync(String resourceUri, String storageClassName, StorageClassResourceUpdate properties) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceUri, storageClassName, properties);
        return this.client.<StorageClassResourceInner, StorageClassResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), StorageClassResourceInner.class, StorageClassResourceInner.class,
            this.client.getContext());
    }

    /**
     * Update a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a StorageClass resource for an Arc connected cluster
     * (Microsoft.Kubernetes/connectedClusters).
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<StorageClassResourceInner>, StorageClassResourceInner> beginUpdateAsync(
        String resourceUri, String storageClassName, StorageClassResourceUpdate properties, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceUri, storageClassName, properties, context);
        return this.client.<StorageClassResourceInner, StorageClassResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), StorageClassResourceInner.class, StorageClassResourceInner.class, context);
    }

    /**
     * Update a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a StorageClass resource for an Arc connected cluster
     * (Microsoft.Kubernetes/connectedClusters).
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<StorageClassResourceInner>, StorageClassResourceInner> beginUpdate(String resourceUri,
        String storageClassName, StorageClassResourceUpdate properties) {
        return this.beginUpdateAsync(resourceUri, storageClassName, properties).getSyncPoller();
    }

    /**
     * Update a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a StorageClass resource for an Arc connected cluster
     * (Microsoft.Kubernetes/connectedClusters).
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<StorageClassResourceInner>, StorageClassResourceInner> beginUpdate(String resourceUri,
        String storageClassName, StorageClassResourceUpdate properties, Context context) {
        return this.beginUpdateAsync(resourceUri, storageClassName, properties, context).getSyncPoller();
    }

    /**
     * Update a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StorageClass resource for an Arc connected cluster (Microsoft.Kubernetes/connectedClusters) on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StorageClassResourceInner> updateAsync(String resourceUri, String storageClassName,
        StorageClassResourceUpdate properties) {
        return beginUpdateAsync(resourceUri, storageClassName, properties).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StorageClass resource for an Arc connected cluster (Microsoft.Kubernetes/connectedClusters) on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StorageClassResourceInner> updateAsync(String resourceUri, String storageClassName,
        StorageClassResourceUpdate properties, Context context) {
        return beginUpdateAsync(resourceUri, storageClassName, properties, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StorageClass resource for an Arc connected cluster (Microsoft.Kubernetes/connectedClusters).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StorageClassResourceInner update(String resourceUri, String storageClassName,
        StorageClassResourceUpdate properties) {
        return updateAsync(resourceUri, storageClassName, properties).block();
    }

    /**
     * Update a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StorageClass resource for an Arc connected cluster (Microsoft.Kubernetes/connectedClusters).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StorageClassResourceInner update(String resourceUri, String storageClassName,
        StorageClassResourceUpdate properties, Context context) {
        return updateAsync(resourceUri, storageClassName, properties, context).block();
    }

    /**
     * Delete a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceUri, String storageClassName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (storageClassName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter storageClassName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                storageClassName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceUri, String storageClassName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (storageClassName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter storageClassName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, storageClassName,
            accept, context);
    }

    /**
     * Delete a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceUri, String storageClassName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceUri, storageClassName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceUri, String storageClassName,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceUri, storageClassName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Delete a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceUri, String storageClassName) {
        return this.beginDeleteAsync(resourceUri, storageClassName).getSyncPoller();
    }

    /**
     * Delete a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceUri, String storageClassName,
        Context context) {
        return this.beginDeleteAsync(resourceUri, storageClassName, context).getSyncPoller();
    }

    /**
     * Delete a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceUri, String storageClassName) {
        return beginDeleteAsync(resourceUri, storageClassName).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceUri, String storageClassName, Context context) {
        return beginDeleteAsync(resourceUri, storageClassName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceUri, String storageClassName) {
        deleteAsync(resourceUri, storageClassName).block();
    }

    /**
     * Delete a StorageClassResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param storageClassName The name of the the storage class.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceUri, String storageClassName, Context context) {
        deleteAsync(resourceUri, storageClassName, context).block();
    }

    /**
     * List StorageClassResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a StorageClassResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<StorageClassResourceInner>> listSinglePageAsync(String resourceUri) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                accept, context))
            .<PagedResponse<StorageClassResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List StorageClassResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a StorageClassResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<StorageClassResourceInner>> listSinglePageAsync(String resourceUri, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.list(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List StorageClassResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a StorageClassResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<StorageClassResourceInner> listAsync(String resourceUri) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceUri), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List StorageClassResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a StorageClassResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<StorageClassResourceInner> listAsync(String resourceUri, Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceUri, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * List StorageClassResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a StorageClassResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<StorageClassResourceInner> list(String resourceUri) {
        return new PagedIterable<>(listAsync(resourceUri));
    }

    /**
     * List StorageClassResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a StorageClassResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<StorageClassResourceInner> list(String resourceUri, Context context) {
        return new PagedIterable<>(listAsync(resourceUri, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a StorageClassResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<StorageClassResourceInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<StorageClassResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a StorageClassResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<StorageClassResourceInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
