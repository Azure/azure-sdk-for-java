// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerorchestratorruntime.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of SMB StorageClass.
 */
@Fluent
public final class SmbStorageClassTypeProperties extends StorageClassTypeProperties {
    /*
     * Type of the storage class.
     */
    @Generated
    private SCType type = SCType.SMB;

    /*
     * SMB Source
     */
    @Generated
    private String source;

    /*
     * Sub directory under share. If the sub directory doesn't exist, driver will create it
     */
    @Generated
    private String subDir;

    /*
     * Server username
     */
    @Generated
    private String username;

    /*
     * Server password
     */
    @Generated
    private String password;

    /*
     * Server domain
     */
    @Generated
    private String domain;

    /**
     * Creates an instance of SmbStorageClassTypeProperties class.
     */
    @Generated
    public SmbStorageClassTypeProperties() {
    }

    /**
     * Get the type property: Type of the storage class.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public SCType type() {
        return this.type;
    }

    /**
     * Get the source property: SMB Source.
     * 
     * @return the source value.
     */
    @Generated
    public String source() {
        return this.source;
    }

    /**
     * Set the source property: SMB Source.
     * 
     * @param source the source value to set.
     * @return the SmbStorageClassTypeProperties object itself.
     */
    @Generated
    public SmbStorageClassTypeProperties withSource(String source) {
        this.source = source;
        return this;
    }

    /**
     * Get the subDir property: Sub directory under share. If the sub directory doesn't exist, driver will create it.
     * 
     * @return the subDir value.
     */
    @Generated
    public String subDir() {
        return this.subDir;
    }

    /**
     * Set the subDir property: Sub directory under share. If the sub directory doesn't exist, driver will create it.
     * 
     * @param subDir the subDir value to set.
     * @return the SmbStorageClassTypeProperties object itself.
     */
    @Generated
    public SmbStorageClassTypeProperties withSubDir(String subDir) {
        this.subDir = subDir;
        return this;
    }

    /**
     * Get the username property: Server username.
     * 
     * @return the username value.
     */
    @Generated
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: Server username.
     * 
     * @param username the username value to set.
     * @return the SmbStorageClassTypeProperties object itself.
     */
    @Generated
    public SmbStorageClassTypeProperties withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: Server password.
     * 
     * @return the password value.
     */
    @Generated
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: Server password.
     * 
     * @param password the password value to set.
     * @return the SmbStorageClassTypeProperties object itself.
     */
    @Generated
    public SmbStorageClassTypeProperties withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Get the domain property: Server domain.
     * 
     * @return the domain value.
     */
    @Generated
    public String domain() {
        return this.domain;
    }

    /**
     * Set the domain property: Server domain.
     * 
     * @param domain the domain value to set.
     * @return the SmbStorageClassTypeProperties object itself.
     */
    @Generated
    public SmbStorageClassTypeProperties withDomain(String domain) {
        this.domain = domain;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (source() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property source in model SmbStorageClassTypeProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SmbStorageClassTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("source", this.source);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("subDir", this.subDir);
        jsonWriter.writeStringField("username", this.username);
        jsonWriter.writeStringField("password", this.password);
        jsonWriter.writeStringField("domain", this.domain);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SmbStorageClassTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SmbStorageClassTypeProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SmbStorageClassTypeProperties.
     */
    public static SmbStorageClassTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SmbStorageClassTypeProperties deserializedSmbStorageClassTypeProperties
                = new SmbStorageClassTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("source".equals(fieldName)) {
                    deserializedSmbStorageClassTypeProperties.source = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedSmbStorageClassTypeProperties.type = SCType.fromString(reader.getString());
                } else if ("subDir".equals(fieldName)) {
                    deserializedSmbStorageClassTypeProperties.subDir = reader.getString();
                } else if ("username".equals(fieldName)) {
                    deserializedSmbStorageClassTypeProperties.username = reader.getString();
                } else if ("password".equals(fieldName)) {
                    deserializedSmbStorageClassTypeProperties.password = reader.getString();
                } else if ("domain".equals(fieldName)) {
                    deserializedSmbStorageClassTypeProperties.domain = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSmbStorageClassTypeProperties;
        });
    }
}
