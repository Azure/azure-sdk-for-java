// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerorchestratorruntime.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of NFS StorageClass.
 */
@Fluent
public final class NfsStorageClassTypeProperties extends StorageClassTypeProperties {
    /*
     * Type of the storage class.
     */
    private SCType type = SCType.NFS;

    /*
     * NFS Server
     */
    private String server;

    /*
     * NFS share
     */
    private String share;

    /*
     * Sub directory under share. If the sub directory doesn't exist, driver will create it
     */
    private String subDir;

    /*
     * Mounted folder permissions. Default is 0. If set as non-zero, driver will perform `chmod` after mount
     */
    private String mountPermissions;

    /*
     * The action to take when a NFS volume is deleted. Default is Delete
     */
    private NfsDirectoryActionOnVolumeDeletion onDelete;

    /**
     * Creates an instance of NfsStorageClassTypeProperties class.
     */
    public NfsStorageClassTypeProperties() {
    }

    /**
     * Get the type property: Type of the storage class.
     * 
     * @return the type value.
     */
    @Override
    public SCType type() {
        return this.type;
    }

    /**
     * Get the server property: NFS Server.
     * 
     * @return the server value.
     */
    public String server() {
        return this.server;
    }

    /**
     * Set the server property: NFS Server.
     * 
     * @param server the server value to set.
     * @return the NfsStorageClassTypeProperties object itself.
     */
    public NfsStorageClassTypeProperties withServer(String server) {
        this.server = server;
        return this;
    }

    /**
     * Get the share property: NFS share.
     * 
     * @return the share value.
     */
    public String share() {
        return this.share;
    }

    /**
     * Set the share property: NFS share.
     * 
     * @param share the share value to set.
     * @return the NfsStorageClassTypeProperties object itself.
     */
    public NfsStorageClassTypeProperties withShare(String share) {
        this.share = share;
        return this;
    }

    /**
     * Get the subDir property: Sub directory under share. If the sub directory doesn't exist, driver will create it.
     * 
     * @return the subDir value.
     */
    public String subDir() {
        return this.subDir;
    }

    /**
     * Set the subDir property: Sub directory under share. If the sub directory doesn't exist, driver will create it.
     * 
     * @param subDir the subDir value to set.
     * @return the NfsStorageClassTypeProperties object itself.
     */
    public NfsStorageClassTypeProperties withSubDir(String subDir) {
        this.subDir = subDir;
        return this;
    }

    /**
     * Get the mountPermissions property: Mounted folder permissions. Default is 0. If set as non-zero, driver will
     * perform `chmod` after mount.
     * 
     * @return the mountPermissions value.
     */
    public String mountPermissions() {
        return this.mountPermissions;
    }

    /**
     * Set the mountPermissions property: Mounted folder permissions. Default is 0. If set as non-zero, driver will
     * perform `chmod` after mount.
     * 
     * @param mountPermissions the mountPermissions value to set.
     * @return the NfsStorageClassTypeProperties object itself.
     */
    public NfsStorageClassTypeProperties withMountPermissions(String mountPermissions) {
        this.mountPermissions = mountPermissions;
        return this;
    }

    /**
     * Get the onDelete property: The action to take when a NFS volume is deleted. Default is Delete.
     * 
     * @return the onDelete value.
     */
    public NfsDirectoryActionOnVolumeDeletion onDelete() {
        return this.onDelete;
    }

    /**
     * Set the onDelete property: The action to take when a NFS volume is deleted. Default is Delete.
     * 
     * @param onDelete the onDelete value to set.
     * @return the NfsStorageClassTypeProperties object itself.
     */
    public NfsStorageClassTypeProperties withOnDelete(NfsDirectoryActionOnVolumeDeletion onDelete) {
        this.onDelete = onDelete;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (server() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property server in model NfsStorageClassTypeProperties"));
        }
        if (share() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property share in model NfsStorageClassTypeProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NfsStorageClassTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("server", this.server);
        jsonWriter.writeStringField("share", this.share);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("subDir", this.subDir);
        jsonWriter.writeStringField("mountPermissions", this.mountPermissions);
        jsonWriter.writeStringField("onDelete", this.onDelete == null ? null : this.onDelete.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NfsStorageClassTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NfsStorageClassTypeProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NfsStorageClassTypeProperties.
     */
    public static NfsStorageClassTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NfsStorageClassTypeProperties deserializedNfsStorageClassTypeProperties
                = new NfsStorageClassTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("server".equals(fieldName)) {
                    deserializedNfsStorageClassTypeProperties.server = reader.getString();
                } else if ("share".equals(fieldName)) {
                    deserializedNfsStorageClassTypeProperties.share = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedNfsStorageClassTypeProperties.type = SCType.fromString(reader.getString());
                } else if ("subDir".equals(fieldName)) {
                    deserializedNfsStorageClassTypeProperties.subDir = reader.getString();
                } else if ("mountPermissions".equals(fieldName)) {
                    deserializedNfsStorageClassTypeProperties.mountPermissions = reader.getString();
                } else if ("onDelete".equals(fieldName)) {
                    deserializedNfsStorageClassTypeProperties.onDelete
                        = NfsDirectoryActionOnVolumeDeletion.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNfsStorageClassTypeProperties;
        });
    }
}
