// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The pair of customer secret. */
@Fluent
public final class CustomerSecret {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CustomerSecret.class);

    /*
     * The identifier to the data service input object which this secret
     * corresponds to.
     */
    @JsonProperty(value = "keyIdentifier", required = true)
    private String keyIdentifier;

    /*
     * It contains the encrypted customer secret.
     */
    @JsonProperty(value = "keyValue", required = true)
    private String keyValue;

    /*
     * The encryption algorithm used to encrypt data.
     */
    @JsonProperty(value = "algorithm", required = true)
    private SupportedAlgorithm algorithm;

    /**
     * Get the keyIdentifier property: The identifier to the data service input object which this secret corresponds to.
     *
     * @return the keyIdentifier value.
     */
    public String keyIdentifier() {
        return this.keyIdentifier;
    }

    /**
     * Set the keyIdentifier property: The identifier to the data service input object which this secret corresponds to.
     *
     * @param keyIdentifier the keyIdentifier value to set.
     * @return the CustomerSecret object itself.
     */
    public CustomerSecret withKeyIdentifier(String keyIdentifier) {
        this.keyIdentifier = keyIdentifier;
        return this;
    }

    /**
     * Get the keyValue property: It contains the encrypted customer secret.
     *
     * @return the keyValue value.
     */
    public String keyValue() {
        return this.keyValue;
    }

    /**
     * Set the keyValue property: It contains the encrypted customer secret.
     *
     * @param keyValue the keyValue value to set.
     * @return the CustomerSecret object itself.
     */
    public CustomerSecret withKeyValue(String keyValue) {
        this.keyValue = keyValue;
        return this;
    }

    /**
     * Get the algorithm property: The encryption algorithm used to encrypt data.
     *
     * @return the algorithm value.
     */
    public SupportedAlgorithm algorithm() {
        return this.algorithm;
    }

    /**
     * Set the algorithm property: The encryption algorithm used to encrypt data.
     *
     * @param algorithm the algorithm value to set.
     * @return the CustomerSecret object itself.
     */
    public CustomerSecret withAlgorithm(SupportedAlgorithm algorithm) {
        this.algorithm = algorithm;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keyIdentifier() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property keyIdentifier in model CustomerSecret"));
        }
        if (keyValue() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property keyValue in model CustomerSecret"));
        }
        if (algorithm() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property algorithm in model CustomerSecret"));
        }
    }
}
