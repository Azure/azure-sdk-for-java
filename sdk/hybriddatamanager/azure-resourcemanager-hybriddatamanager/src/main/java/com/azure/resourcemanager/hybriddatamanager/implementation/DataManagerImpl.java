// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hybriddatamanager.fluent.models.DataManagerInner;
import com.azure.resourcemanager.hybriddatamanager.models.DataManager;
import com.azure.resourcemanager.hybriddatamanager.models.DataManagerUpdateParameter;
import com.azure.resourcemanager.hybriddatamanager.models.Sku;
import java.util.Collections;
import java.util.Map;

public final class DataManagerImpl implements DataManager, DataManager.Definition, DataManager.Update {
    private DataManagerInner innerObject;

    private final com.azure.resourcemanager.hybriddatamanager.HybridDataManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public Sku sku() {
        return this.innerModel().sku();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public DataManagerInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.hybriddatamanager.HybridDataManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String dataManagerName;

    private String updateIfMatch;

    private DataManagerUpdateParameter updateDataManagerUpdateParameter;

    public DataManagerImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public DataManager create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataManagers()
                .create(resourceGroupName, dataManagerName, this.innerModel(), Context.NONE);
        return this;
    }

    public DataManager create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataManagers()
                .create(resourceGroupName, dataManagerName, this.innerModel(), context);
        return this;
    }

    DataManagerImpl(String name, com.azure.resourcemanager.hybriddatamanager.HybridDataManager serviceManager) {
        this.innerObject = new DataManagerInner();
        this.serviceManager = serviceManager;
        this.dataManagerName = name;
    }

    public DataManagerImpl update() {
        this.updateIfMatch = null;
        this.updateDataManagerUpdateParameter = new DataManagerUpdateParameter();
        return this;
    }

    public DataManager apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataManagers()
                .update(
                    resourceGroupName, dataManagerName, updateDataManagerUpdateParameter, updateIfMatch, Context.NONE);
        return this;
    }

    public DataManager apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataManagers()
                .update(resourceGroupName, dataManagerName, updateDataManagerUpdateParameter, updateIfMatch, context);
        return this;
    }

    DataManagerImpl(
        DataManagerInner innerObject, com.azure.resourcemanager.hybriddatamanager.HybridDataManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.dataManagerName = Utils.getValueFromIdByName(innerObject.id(), "dataManagers");
    }

    public DataManager refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataManagers()
                .getByResourceGroupWithResponse(resourceGroupName, dataManagerName, Context.NONE)
                .getValue();
        return this;
    }

    public DataManager refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataManagers()
                .getByResourceGroupWithResponse(resourceGroupName, dataManagerName, context)
                .getValue();
        return this;
    }

    public DataManagerImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public DataManagerImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public DataManagerImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateDataManagerUpdateParameter.withTags(tags);
            return this;
        }
    }

    public DataManagerImpl withEtag(String etag) {
        this.innerModel().withEtag(etag);
        return this;
    }

    public DataManagerImpl withSku(Sku sku) {
        if (isInCreateMode()) {
            this.innerModel().withSku(sku);
            return this;
        } else {
            this.updateDataManagerUpdateParameter.withSku(sku);
            return this;
        }
    }

    public DataManagerImpl withIfMatch(String ifMatch) {
        this.updateIfMatch = ifMatch;
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
