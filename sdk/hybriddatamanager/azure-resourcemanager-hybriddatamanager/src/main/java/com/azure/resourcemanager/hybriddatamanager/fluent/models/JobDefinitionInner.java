// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybriddatamanager.models.CustomerSecret;
import com.azure.resourcemanager.hybriddatamanager.models.DmsBaseObject;
import com.azure.resourcemanager.hybriddatamanager.models.RunLocation;
import com.azure.resourcemanager.hybriddatamanager.models.Schedule;
import com.azure.resourcemanager.hybriddatamanager.models.State;
import com.azure.resourcemanager.hybriddatamanager.models.UserConfirmation;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Job Definition. */
@JsonFlatten
@Fluent
public class JobDefinitionInner extends DmsBaseObject {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(JobDefinitionInner.class);

    /*
     * Data Source Id associated to the job definition.
     */
    @JsonProperty(value = "properties.dataSourceId", required = true)
    private String dataSourceId;

    /*
     * Data Sink Id associated to the job definition.
     */
    @JsonProperty(value = "properties.dataSinkId", required = true)
    private String dataSinkId;

    /*
     * Schedule for running the job definition
     */
    @JsonProperty(value = "properties.schedules")
    private List<Schedule> schedules;

    /*
     * State of the job definition.
     */
    @JsonProperty(value = "properties.state", required = true)
    private State state;

    /*
     * Last modified time of the job definition.
     */
    @JsonProperty(value = "properties.lastModifiedTime")
    private OffsetDateTime lastModifiedTime;

    /*
     * This is the preferred geo location for the job to run.
     */
    @JsonProperty(value = "properties.runLocation")
    private RunLocation runLocation;

    /*
     * Enum to detect if user confirmation is required. If not passed will
     * default to NotRequired.
     */
    @JsonProperty(value = "properties.userConfirmation")
    private UserConfirmation userConfirmation;

    /*
     * A generic json used differently by each data service type.
     */
    @JsonProperty(value = "properties.dataServiceInput")
    private Object dataServiceInput;

    /*
     * List of customer secrets containing a key identifier and key value. The
     * key identifier is a way for the specific data source to understand the
     * key. Value contains customer secret encrypted by the encryptionKeys.
     */
    @JsonProperty(value = "properties.customerSecrets")
    private List<CustomerSecret> customerSecrets;

    /**
     * Get the dataSourceId property: Data Source Id associated to the job definition.
     *
     * @return the dataSourceId value.
     */
    public String dataSourceId() {
        return this.dataSourceId;
    }

    /**
     * Set the dataSourceId property: Data Source Id associated to the job definition.
     *
     * @param dataSourceId the dataSourceId value to set.
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withDataSourceId(String dataSourceId) {
        this.dataSourceId = dataSourceId;
        return this;
    }

    /**
     * Get the dataSinkId property: Data Sink Id associated to the job definition.
     *
     * @return the dataSinkId value.
     */
    public String dataSinkId() {
        return this.dataSinkId;
    }

    /**
     * Set the dataSinkId property: Data Sink Id associated to the job definition.
     *
     * @param dataSinkId the dataSinkId value to set.
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withDataSinkId(String dataSinkId) {
        this.dataSinkId = dataSinkId;
        return this;
    }

    /**
     * Get the schedules property: Schedule for running the job definition.
     *
     * @return the schedules value.
     */
    public List<Schedule> schedules() {
        return this.schedules;
    }

    /**
     * Set the schedules property: Schedule for running the job definition.
     *
     * @param schedules the schedules value to set.
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withSchedules(List<Schedule> schedules) {
        this.schedules = schedules;
        return this;
    }

    /**
     * Get the state property: State of the job definition.
     *
     * @return the state value.
     */
    public State state() {
        return this.state;
    }

    /**
     * Set the state property: State of the job definition.
     *
     * @param state the state value to set.
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Get the lastModifiedTime property: Last modified time of the job definition.
     *
     * @return the lastModifiedTime value.
     */
    public OffsetDateTime lastModifiedTime() {
        return this.lastModifiedTime;
    }

    /**
     * Set the lastModifiedTime property: Last modified time of the job definition.
     *
     * @param lastModifiedTime the lastModifiedTime value to set.
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withLastModifiedTime(OffsetDateTime lastModifiedTime) {
        this.lastModifiedTime = lastModifiedTime;
        return this;
    }

    /**
     * Get the runLocation property: This is the preferred geo location for the job to run.
     *
     * @return the runLocation value.
     */
    public RunLocation runLocation() {
        return this.runLocation;
    }

    /**
     * Set the runLocation property: This is the preferred geo location for the job to run.
     *
     * @param runLocation the runLocation value to set.
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withRunLocation(RunLocation runLocation) {
        this.runLocation = runLocation;
        return this;
    }

    /**
     * Get the userConfirmation property: Enum to detect if user confirmation is required. If not passed will default to
     * NotRequired.
     *
     * @return the userConfirmation value.
     */
    public UserConfirmation userConfirmation() {
        return this.userConfirmation;
    }

    /**
     * Set the userConfirmation property: Enum to detect if user confirmation is required. If not passed will default to
     * NotRequired.
     *
     * @param userConfirmation the userConfirmation value to set.
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withUserConfirmation(UserConfirmation userConfirmation) {
        this.userConfirmation = userConfirmation;
        return this;
    }

    /**
     * Get the dataServiceInput property: A generic json used differently by each data service type.
     *
     * @return the dataServiceInput value.
     */
    public Object dataServiceInput() {
        return this.dataServiceInput;
    }

    /**
     * Set the dataServiceInput property: A generic json used differently by each data service type.
     *
     * @param dataServiceInput the dataServiceInput value to set.
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withDataServiceInput(Object dataServiceInput) {
        this.dataServiceInput = dataServiceInput;
        return this;
    }

    /**
     * Get the customerSecrets property: List of customer secrets containing a key identifier and key value. The key
     * identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted
     * by the encryptionKeys.
     *
     * @return the customerSecrets value.
     */
    public List<CustomerSecret> customerSecrets() {
        return this.customerSecrets;
    }

    /**
     * Set the customerSecrets property: List of customer secrets containing a key identifier and key value. The key
     * identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted
     * by the encryptionKeys.
     *
     * @param customerSecrets the customerSecrets value to set.
     * @return the JobDefinitionInner object itself.
     */
    public JobDefinitionInner withCustomerSecrets(List<CustomerSecret> customerSecrets) {
        this.customerSecrets = customerSecrets;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (dataSourceId() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property dataSourceId in model JobDefinitionInner"));
        }
        if (dataSinkId() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property dataSinkId in model JobDefinitionInner"));
        }
        if (schedules() != null) {
            schedules().forEach(e -> e.validate());
        }
        if (state() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property state in model JobDefinitionInner"));
        }
        if (customerSecrets() != null) {
            customerSecrets().forEach(e -> e.validate());
        }
    }
}
