// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybriddatamanager.models.State;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Data Store Type properties. */
@Fluent
public final class DataStoreTypeProperties {
    /*
     * Arm type for the manager resource to which the data source type is
     * associated. This is optional.
     */
    @JsonProperty(value = "repositoryType")
    private String repositoryType;

    /*
     * State of the data store type.
     */
    @JsonProperty(value = "state", required = true)
    private State state;

    /*
     * Supported data services where it can be used as a sink.
     */
    @JsonProperty(value = "supportedDataServicesAsSink")
    private List<String> supportedDataServicesAsSink;

    /*
     * Supported data services where it can be used as a source.
     */
    @JsonProperty(value = "supportedDataServicesAsSource")
    private List<String> supportedDataServicesAsSource;

    /**
     * Get the repositoryType property: Arm type for the manager resource to which the data source type is associated.
     * This is optional.
     *
     * @return the repositoryType value.
     */
    public String repositoryType() {
        return this.repositoryType;
    }

    /**
     * Set the repositoryType property: Arm type for the manager resource to which the data source type is associated.
     * This is optional.
     *
     * @param repositoryType the repositoryType value to set.
     * @return the DataStoreTypeProperties object itself.
     */
    public DataStoreTypeProperties withRepositoryType(String repositoryType) {
        this.repositoryType = repositoryType;
        return this;
    }

    /**
     * Get the state property: State of the data store type.
     *
     * @return the state value.
     */
    public State state() {
        return this.state;
    }

    /**
     * Set the state property: State of the data store type.
     *
     * @param state the state value to set.
     * @return the DataStoreTypeProperties object itself.
     */
    public DataStoreTypeProperties withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Get the supportedDataServicesAsSink property: Supported data services where it can be used as a sink.
     *
     * @return the supportedDataServicesAsSink value.
     */
    public List<String> supportedDataServicesAsSink() {
        return this.supportedDataServicesAsSink;
    }

    /**
     * Set the supportedDataServicesAsSink property: Supported data services where it can be used as a sink.
     *
     * @param supportedDataServicesAsSink the supportedDataServicesAsSink value to set.
     * @return the DataStoreTypeProperties object itself.
     */
    public DataStoreTypeProperties withSupportedDataServicesAsSink(List<String> supportedDataServicesAsSink) {
        this.supportedDataServicesAsSink = supportedDataServicesAsSink;
        return this;
    }

    /**
     * Get the supportedDataServicesAsSource property: Supported data services where it can be used as a source.
     *
     * @return the supportedDataServicesAsSource value.
     */
    public List<String> supportedDataServicesAsSource() {
        return this.supportedDataServicesAsSource;
    }

    /**
     * Set the supportedDataServicesAsSource property: Supported data services where it can be used as a source.
     *
     * @param supportedDataServicesAsSource the supportedDataServicesAsSource value to set.
     * @return the DataStoreTypeProperties object itself.
     */
    public DataStoreTypeProperties withSupportedDataServicesAsSource(List<String> supportedDataServicesAsSource) {
        this.supportedDataServicesAsSource = supportedDataServicesAsSource;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (state() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property state in model DataStoreTypeProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataStoreTypeProperties.class);
}
