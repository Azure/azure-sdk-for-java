// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybriddatamanager.fluent.JobsClient;
import com.azure.resourcemanager.hybriddatamanager.fluent.models.JobInner;
import com.azure.resourcemanager.hybriddatamanager.models.Job;
import com.azure.resourcemanager.hybriddatamanager.models.Jobs;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class JobsImpl implements Jobs {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(JobsImpl.class);

    private final JobsClient innerClient;

    private final com.azure.resourcemanager.hybriddatamanager.HybridDataManager serviceManager;

    public JobsImpl(
        JobsClient innerClient, com.azure.resourcemanager.hybriddatamanager.HybridDataManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Job> listByJobDefinition(
        String dataServiceName, String jobDefinitionName, String resourceGroupName, String dataManagerName) {
        PagedIterable<JobInner> inner =
            this
                .serviceClient()
                .listByJobDefinition(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName);
        return Utils.mapPage(inner, inner1 -> new JobImpl(inner1, this.manager()));
    }

    public PagedIterable<Job> listByJobDefinition(
        String dataServiceName,
        String jobDefinitionName,
        String resourceGroupName,
        String dataManagerName,
        String filter,
        Context context) {
        PagedIterable<JobInner> inner =
            this
                .serviceClient()
                .listByJobDefinition(
                    dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, filter, context);
        return Utils.mapPage(inner, inner1 -> new JobImpl(inner1, this.manager()));
    }

    public Job get(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName) {
        JobInner inner =
            this.serviceClient().get(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName);
        if (inner != null) {
            return new JobImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Job> getWithResponse(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName,
        String expand,
        Context context) {
        Response<JobInner> inner =
            this
                .serviceClient()
                .getWithResponse(
                    dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, expand, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new JobImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void cancel(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName) {
        this.serviceClient().cancel(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName);
    }

    public void cancel(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName,
        Context context) {
        this
            .serviceClient()
            .cancel(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, context);
    }

    public void resume(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName) {
        this.serviceClient().resume(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName);
    }

    public void resume(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName,
        Context context) {
        this
            .serviceClient()
            .resume(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, context);
    }

    public PagedIterable<Job> listByDataService(
        String dataServiceName, String resourceGroupName, String dataManagerName) {
        PagedIterable<JobInner> inner =
            this.serviceClient().listByDataService(dataServiceName, resourceGroupName, dataManagerName);
        return Utils.mapPage(inner, inner1 -> new JobImpl(inner1, this.manager()));
    }

    public PagedIterable<Job> listByDataService(
        String dataServiceName, String resourceGroupName, String dataManagerName, String filter, Context context) {
        PagedIterable<JobInner> inner =
            this
                .serviceClient()
                .listByDataService(dataServiceName, resourceGroupName, dataManagerName, filter, context);
        return Utils.mapPage(inner, inner1 -> new JobImpl(inner1, this.manager()));
    }

    public PagedIterable<Job> listByDataManager(String resourceGroupName, String dataManagerName) {
        PagedIterable<JobInner> inner = this.serviceClient().listByDataManager(resourceGroupName, dataManagerName);
        return Utils.mapPage(inner, inner1 -> new JobImpl(inner1, this.manager()));
    }

    public PagedIterable<Job> listByDataManager(
        String resourceGroupName, String dataManagerName, String filter, Context context) {
        PagedIterable<JobInner> inner =
            this.serviceClient().listByDataManager(resourceGroupName, dataManagerName, filter, context);
        return Utils.mapPage(inner, inner1 -> new JobImpl(inner1, this.manager()));
    }

    private JobsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybriddatamanager.HybridDataManager manager() {
        return this.serviceManager;
    }
}
