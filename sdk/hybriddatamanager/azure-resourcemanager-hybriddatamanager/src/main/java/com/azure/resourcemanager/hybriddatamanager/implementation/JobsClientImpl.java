// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.hybriddatamanager.fluent.JobsClient;
import com.azure.resourcemanager.hybriddatamanager.fluent.models.JobInner;
import com.azure.resourcemanager.hybriddatamanager.models.JobList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in JobsClient. */
public final class JobsClientImpl implements JobsClient {
    private final ClientLogger logger = new ClientLogger(JobsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final JobsService service;

    /** The service client containing this operation class. */
    private final HybridDataManagementClientImpl client;

    /**
     * Initializes an instance of JobsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    JobsClientImpl(HybridDataManagementClientImpl client) {
        this.service = RestProxy.create(JobsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HybridDataManagementClientJobs to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "HybridDataManagement")
    private interface JobsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData"
                + "/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}"
                + "/jobs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<JobList>> listByJobDefinition(
            @HostParam("$host") String endpoint,
            @PathParam("dataServiceName") String dataServiceName,
            @PathParam("jobDefinitionName") String jobDefinitionName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataManagerName") String dataManagerName,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData"
                + "/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}"
                + "/jobs/{jobId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<JobInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("dataServiceName") String dataServiceName,
            @PathParam("jobDefinitionName") String jobDefinitionName,
            @PathParam("jobId") String jobId,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataManagerName") String dataManagerName,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$expand") String expand,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Accept: application/json;q=0.9", "Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData"
                + "/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}"
                + "/jobs/{jobId}/cancel")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> cancel(
            @HostParam("$host") String endpoint,
            @PathParam("dataServiceName") String dataServiceName,
            @PathParam("jobDefinitionName") String jobDefinitionName,
            @PathParam("jobId") String jobId,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataManagerName") String dataManagerName,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Headers({"Accept: application/json;q=0.9", "Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData"
                + "/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}"
                + "/jobs/{jobId}/resume")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> resume(
            @HostParam("$host") String endpoint,
            @PathParam("dataServiceName") String dataServiceName,
            @PathParam("jobDefinitionName") String jobDefinitionName,
            @PathParam("jobId") String jobId,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataManagerName") String dataManagerName,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData"
                + "/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<JobList>> listByDataService(
            @HostParam("$host") String endpoint,
            @PathParam("dataServiceName") String dataServiceName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataManagerName") String dataManagerName,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData"
                + "/dataManagers/{dataManagerName}/jobs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<JobList>> listByDataManager(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataManagerName") String dataManagerName,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<JobList>> listByJobDefinitionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<JobList>> listByDataServiceNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<JobList>> listByDataManagerNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition for which jobs are needed.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param filter OData Filter options.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobInner>> listByJobDefinitionSinglePageAsync(
        String dataServiceName,
        String jobDefinitionName,
        String resourceGroupName,
        String dataManagerName,
        String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (dataServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataServiceName is required and cannot be null."));
        }
        if (jobDefinitionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobDefinitionName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataManagerName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByJobDefinition(
                            this.client.getEndpoint(),
                            dataServiceName,
                            jobDefinitionName,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            dataManagerName,
                            this.client.getApiVersion(),
                            filter,
                            accept,
                            context))
            .<PagedResponse<JobInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition for which jobs are needed.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param filter OData Filter options.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobInner>> listByJobDefinitionSinglePageAsync(
        String dataServiceName,
        String jobDefinitionName,
        String resourceGroupName,
        String dataManagerName,
        String filter,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (dataServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataServiceName is required and cannot be null."));
        }
        if (jobDefinitionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobDefinitionName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataManagerName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByJobDefinition(
                this.client.getEndpoint(),
                dataServiceName,
                jobDefinitionName,
                this.client.getSubscriptionId(),
                resourceGroupName,
                dataManagerName,
                this.client.getApiVersion(),
                filter,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition for which jobs are needed.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param filter OData Filter options.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JobInner> listByJobDefinitionAsync(
        String dataServiceName,
        String jobDefinitionName,
        String resourceGroupName,
        String dataManagerName,
        String filter) {
        return new PagedFlux<>(
            () ->
                listByJobDefinitionSinglePageAsync(
                    dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, filter),
            nextLink -> listByJobDefinitionNextSinglePageAsync(nextLink));
    }

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition for which jobs are needed.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JobInner> listByJobDefinitionAsync(
        String dataServiceName, String jobDefinitionName, String resourceGroupName, String dataManagerName) {
        final String filter = null;
        return new PagedFlux<>(
            () ->
                listByJobDefinitionSinglePageAsync(
                    dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, filter),
            nextLink -> listByJobDefinitionNextSinglePageAsync(nextLink));
    }

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition for which jobs are needed.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param filter OData Filter options.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JobInner> listByJobDefinitionAsync(
        String dataServiceName,
        String jobDefinitionName,
        String resourceGroupName,
        String dataManagerName,
        String filter,
        Context context) {
        return new PagedFlux<>(
            () ->
                listByJobDefinitionSinglePageAsync(
                    dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, filter, context),
            nextLink -> listByJobDefinitionNextSinglePageAsync(nextLink, context));
    }

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition for which jobs are needed.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<JobInner> listByJobDefinition(
        String dataServiceName, String jobDefinitionName, String resourceGroupName, String dataManagerName) {
        final String filter = null;
        return new PagedIterable<>(
            listByJobDefinitionAsync(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, filter));
    }

    /**
     * This method gets all the jobs of a given job definition.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition for which jobs are needed.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param filter OData Filter options.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<JobInner> listByJobDefinition(
        String dataServiceName,
        String jobDefinitionName,
        String resourceGroupName,
        String dataManagerName,
        String filter,
        Context context) {
        return new PagedIterable<>(
            listByJobDefinitionAsync(
                dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, filter, context));
    }

    /**
     * This method gets a data manager job given the jobId.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param expand $expand is supported on details parameter for job, which provides details on the job stages.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data service job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<JobInner>> getWithResponseAsync(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName,
        String expand) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (dataServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataServiceName is required and cannot be null."));
        }
        if (jobDefinitionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobDefinitionName is required and cannot be null."));
        }
        if (jobId == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataManagerName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            dataServiceName,
                            jobDefinitionName,
                            jobId,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            dataManagerName,
                            this.client.getApiVersion(),
                            expand,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * This method gets a data manager job given the jobId.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param expand $expand is supported on details parameter for job, which provides details on the job stages.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data service job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<JobInner>> getWithResponseAsync(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName,
        String expand,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (dataServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataServiceName is required and cannot be null."));
        }
        if (jobDefinitionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobDefinitionName is required and cannot be null."));
        }
        if (jobId == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataManagerName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                dataServiceName,
                jobDefinitionName,
                jobId,
                this.client.getSubscriptionId(),
                resourceGroupName,
                dataManagerName,
                this.client.getApiVersion(),
                expand,
                accept,
                context);
    }

    /**
     * This method gets a data manager job given the jobId.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param expand $expand is supported on details parameter for job, which provides details on the job stages.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data service job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<JobInner> getAsync(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName,
        String expand) {
        return getWithResponseAsync(
                dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, expand)
            .flatMap(
                (Response<JobInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * This method gets a data manager job given the jobId.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data service job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<JobInner> getAsync(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName) {
        final String expand = null;
        return getWithResponseAsync(
                dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, expand)
            .flatMap(
                (Response<JobInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * This method gets a data manager job given the jobId.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data service job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JobInner get(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName) {
        final String expand = null;
        return getAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, expand).block();
    }

    /**
     * This method gets a data manager job given the jobId.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param expand $expand is supported on details parameter for job, which provides details on the job stages.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data service job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<JobInner> getWithResponse(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName,
        String expand,
        Context context) {
        return getWithResponseAsync(
                dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, expand, context)
            .block();
    }

    /**
     * Cancels the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> cancelWithResponseAsync(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (dataServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataServiceName is required and cannot be null."));
        }
        if (jobDefinitionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobDefinitionName is required and cannot be null."));
        }
        if (jobId == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataManagerName is required and cannot be null."));
        }
        return FluxUtil
            .withContext(
                context ->
                    service
                        .cancel(
                            this.client.getEndpoint(),
                            dataServiceName,
                            jobDefinitionName,
                            jobId,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            dataManagerName,
                            this.client.getApiVersion(),
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Cancels the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> cancelWithResponseAsync(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (dataServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataServiceName is required and cannot be null."));
        }
        if (jobDefinitionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobDefinitionName is required and cannot be null."));
        }
        if (jobId == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataManagerName is required and cannot be null."));
        }
        context = this.client.mergeContext(context);
        return service
            .cancel(
                this.client.getEndpoint(),
                dataServiceName,
                jobDefinitionName,
                jobId,
                this.client.getSubscriptionId(),
                resourceGroupName,
                dataManagerName,
                this.client.getApiVersion(),
                context);
    }

    /**
     * Cancels the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginCancelAsync(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            cancelWithResponseAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Cancels the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginCancelAsync(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            cancelWithResponseAsync(
                dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Cancels the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginCancel(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName) {
        return beginCancelAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName)
            .getSyncPoller();
    }

    /**
     * Cancels the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginCancel(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName,
        Context context) {
        return beginCancelAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, context)
            .getSyncPoller();
    }

    /**
     * Cancels the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> cancelAsync(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName) {
        return beginCancelAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Cancels the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> cancelAsync(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName,
        Context context) {
        return beginCancelAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Cancels the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancel(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName) {
        cancelAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName).block();
    }

    /**
     * Cancels the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancel(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName,
        Context context) {
        cancelAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, context).block();
    }

    /**
     * Resumes the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> resumeWithResponseAsync(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (dataServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataServiceName is required and cannot be null."));
        }
        if (jobDefinitionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobDefinitionName is required and cannot be null."));
        }
        if (jobId == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataManagerName is required and cannot be null."));
        }
        return FluxUtil
            .withContext(
                context ->
                    service
                        .resume(
                            this.client.getEndpoint(),
                            dataServiceName,
                            jobDefinitionName,
                            jobId,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            dataManagerName,
                            this.client.getApiVersion(),
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Resumes the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> resumeWithResponseAsync(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (dataServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataServiceName is required and cannot be null."));
        }
        if (jobDefinitionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobDefinitionName is required and cannot be null."));
        }
        if (jobId == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataManagerName is required and cannot be null."));
        }
        context = this.client.mergeContext(context);
        return service
            .resume(
                this.client.getEndpoint(),
                dataServiceName,
                jobDefinitionName,
                jobId,
                this.client.getSubscriptionId(),
                resourceGroupName,
                dataManagerName,
                this.client.getApiVersion(),
                context);
    }

    /**
     * Resumes the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginResumeAsync(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            resumeWithResponseAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Resumes the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginResumeAsync(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            resumeWithResponseAsync(
                dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Resumes the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginResume(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName) {
        return beginResumeAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName)
            .getSyncPoller();
    }

    /**
     * Resumes the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginResume(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName,
        Context context) {
        return beginResumeAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, context)
            .getSyncPoller();
    }

    /**
     * Resumes the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> resumeAsync(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName) {
        return beginResumeAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Resumes the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> resumeAsync(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName,
        Context context) {
        return beginResumeAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Resumes the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void resume(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName) {
        resumeAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName).block();
    }

    /**
     * Resumes the given job.
     *
     * @param dataServiceName The name of the data service of the job definition.
     * @param jobDefinitionName The name of the job definition of the job.
     * @param jobId The job id of the job queried.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void resume(
        String dataServiceName,
        String jobDefinitionName,
        String jobId,
        String resourceGroupName,
        String dataManagerName,
        Context context) {
        resumeAsync(dataServiceName, jobDefinitionName, jobId, resourceGroupName, dataManagerName, context).block();
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param dataServiceName The name of the data service of interest.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param filter OData Filter options.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobInner>> listByDataServiceSinglePageAsync(
        String dataServiceName, String resourceGroupName, String dataManagerName, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (dataServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataServiceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataManagerName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByDataService(
                            this.client.getEndpoint(),
                            dataServiceName,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            dataManagerName,
                            this.client.getApiVersion(),
                            filter,
                            accept,
                            context))
            .<PagedResponse<JobInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param dataServiceName The name of the data service of interest.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param filter OData Filter options.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobInner>> listByDataServiceSinglePageAsync(
        String dataServiceName, String resourceGroupName, String dataManagerName, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (dataServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataServiceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataManagerName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByDataService(
                this.client.getEndpoint(),
                dataServiceName,
                this.client.getSubscriptionId(),
                resourceGroupName,
                dataManagerName,
                this.client.getApiVersion(),
                filter,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param dataServiceName The name of the data service of interest.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param filter OData Filter options.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JobInner> listByDataServiceAsync(
        String dataServiceName, String resourceGroupName, String dataManagerName, String filter) {
        return new PagedFlux<>(
            () -> listByDataServiceSinglePageAsync(dataServiceName, resourceGroupName, dataManagerName, filter),
            nextLink -> listByDataServiceNextSinglePageAsync(nextLink));
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param dataServiceName The name of the data service of interest.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JobInner> listByDataServiceAsync(
        String dataServiceName, String resourceGroupName, String dataManagerName) {
        final String filter = null;
        return new PagedFlux<>(
            () -> listByDataServiceSinglePageAsync(dataServiceName, resourceGroupName, dataManagerName, filter),
            nextLink -> listByDataServiceNextSinglePageAsync(nextLink));
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param dataServiceName The name of the data service of interest.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param filter OData Filter options.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JobInner> listByDataServiceAsync(
        String dataServiceName, String resourceGroupName, String dataManagerName, String filter, Context context) {
        return new PagedFlux<>(
            () ->
                listByDataServiceSinglePageAsync(dataServiceName, resourceGroupName, dataManagerName, filter, context),
            nextLink -> listByDataServiceNextSinglePageAsync(nextLink, context));
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param dataServiceName The name of the data service of interest.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<JobInner> listByDataService(
        String dataServiceName, String resourceGroupName, String dataManagerName) {
        final String filter = null;
        return new PagedIterable<>(listByDataServiceAsync(dataServiceName, resourceGroupName, dataManagerName, filter));
    }

    /**
     * This method gets all the jobs of a data service type in a given resource.
     *
     * @param dataServiceName The name of the data service of interest.
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param filter OData Filter options.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<JobInner> listByDataService(
        String dataServiceName, String resourceGroupName, String dataManagerName, String filter, Context context) {
        return new PagedIterable<>(
            listByDataServiceAsync(dataServiceName, resourceGroupName, dataManagerName, filter, context));
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param filter OData Filter options.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobInner>> listByDataManagerSinglePageAsync(
        String resourceGroupName, String dataManagerName, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataManagerName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByDataManager(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            dataManagerName,
                            this.client.getApiVersion(),
                            filter,
                            accept,
                            context))
            .<PagedResponse<JobInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param filter OData Filter options.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobInner>> listByDataManagerSinglePageAsync(
        String resourceGroupName, String dataManagerName, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataManagerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataManagerName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByDataManager(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                dataManagerName,
                this.client.getApiVersion(),
                filter,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param filter OData Filter options.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JobInner> listByDataManagerAsync(
        String resourceGroupName, String dataManagerName, String filter) {
        return new PagedFlux<>(
            () -> listByDataManagerSinglePageAsync(resourceGroupName, dataManagerName, filter),
            nextLink -> listByDataManagerNextSinglePageAsync(nextLink));
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JobInner> listByDataManagerAsync(String resourceGroupName, String dataManagerName) {
        final String filter = null;
        return new PagedFlux<>(
            () -> listByDataManagerSinglePageAsync(resourceGroupName, dataManagerName, filter),
            nextLink -> listByDataManagerNextSinglePageAsync(nextLink));
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param filter OData Filter options.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JobInner> listByDataManagerAsync(
        String resourceGroupName, String dataManagerName, String filter, Context context) {
        return new PagedFlux<>(
            () -> listByDataManagerSinglePageAsync(resourceGroupName, dataManagerName, filter, context),
            nextLink -> listByDataManagerNextSinglePageAsync(nextLink, context));
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<JobInner> listByDataManager(String resourceGroupName, String dataManagerName) {
        final String filter = null;
        return new PagedIterable<>(listByDataManagerAsync(resourceGroupName, dataManagerName, filter));
    }

    /**
     * This method gets all the jobs at the data manager resource level.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager
     *     names must be between 3 and 24 characters in length and use any alphanumeric and underscore only.
     * @param filter OData Filter options.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<JobInner> listByDataManager(
        String resourceGroupName, String dataManagerName, String filter, Context context) {
        return new PagedIterable<>(listByDataManagerAsync(resourceGroupName, dataManagerName, filter, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobInner>> listByJobDefinitionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByJobDefinitionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<JobInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobInner>> listByJobDefinitionNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByJobDefinitionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobInner>> listByDataServiceNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByDataServiceNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<JobInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobInner>> listByDataServiceNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByDataServiceNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobInner>> listByDataManagerNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByDataManagerNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<JobInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return job Collection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobInner>> listByDataManagerNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByDataManagerNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
