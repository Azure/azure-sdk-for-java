// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybriddatamanager.models.CustomerSecret;
import com.azure.resourcemanager.hybriddatamanager.models.DmsBaseObject;
import com.azure.resourcemanager.hybriddatamanager.models.State;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Data store. */
@Fluent
public final class DataStoreInner extends DmsBaseObject {
    /*
     * DataStore properties.
     */
    @JsonProperty(value = "properties", required = true)
    private DataStoreProperties innerProperties = new DataStoreProperties();

    /**
     * Get the innerProperties property: DataStore properties.
     *
     * @return the innerProperties value.
     */
    private DataStoreProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the repositoryId property: Arm Id for the manager resource to which the data source is associated. This is
     * optional.
     *
     * @return the repositoryId value.
     */
    public String repositoryId() {
        return this.innerProperties() == null ? null : this.innerProperties().repositoryId();
    }

    /**
     * Set the repositoryId property: Arm Id for the manager resource to which the data source is associated. This is
     * optional.
     *
     * @param repositoryId the repositoryId value to set.
     * @return the DataStoreInner object itself.
     */
    public DataStoreInner withRepositoryId(String repositoryId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataStoreProperties();
        }
        this.innerProperties().withRepositoryId(repositoryId);
        return this;
    }

    /**
     * Get the state property: State of the data source.
     *
     * @return the state value.
     */
    public State state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Set the state property: State of the data source.
     *
     * @param state the state value to set.
     * @return the DataStoreInner object itself.
     */
    public DataStoreInner withState(State state) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataStoreProperties();
        }
        this.innerProperties().withState(state);
        return this;
    }

    /**
     * Get the extendedProperties property: A generic json used differently by each data source type.
     *
     * @return the extendedProperties value.
     */
    public Object extendedProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().extendedProperties();
    }

    /**
     * Set the extendedProperties property: A generic json used differently by each data source type.
     *
     * @param extendedProperties the extendedProperties value to set.
     * @return the DataStoreInner object itself.
     */
    public DataStoreInner withExtendedProperties(Object extendedProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataStoreProperties();
        }
        this.innerProperties().withExtendedProperties(extendedProperties);
        return this;
    }

    /**
     * Get the dataStoreTypeId property: The arm id of the data store type.
     *
     * @return the dataStoreTypeId value.
     */
    public String dataStoreTypeId() {
        return this.innerProperties() == null ? null : this.innerProperties().dataStoreTypeId();
    }

    /**
     * Set the dataStoreTypeId property: The arm id of the data store type.
     *
     * @param dataStoreTypeId the dataStoreTypeId value to set.
     * @return the DataStoreInner object itself.
     */
    public DataStoreInner withDataStoreTypeId(String dataStoreTypeId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataStoreProperties();
        }
        this.innerProperties().withDataStoreTypeId(dataStoreTypeId);
        return this;
    }

    /**
     * Get the customerSecrets property: List of customer secrets containing a key identifier and key value. The key
     * identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted
     * by the encryptionKeys.
     *
     * @return the customerSecrets value.
     */
    public List<CustomerSecret> customerSecrets() {
        return this.innerProperties() == null ? null : this.innerProperties().customerSecrets();
    }

    /**
     * Set the customerSecrets property: List of customer secrets containing a key identifier and key value. The key
     * identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted
     * by the encryptionKeys.
     *
     * @param customerSecrets the customerSecrets value to set.
     * @return the DataStoreInner object itself.
     */
    public DataStoreInner withCustomerSecrets(List<CustomerSecret> customerSecrets) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataStoreProperties();
        }
        this.innerProperties().withCustomerSecrets(customerSecrets);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property innerProperties in model DataStoreInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataStoreInner.class);
}
