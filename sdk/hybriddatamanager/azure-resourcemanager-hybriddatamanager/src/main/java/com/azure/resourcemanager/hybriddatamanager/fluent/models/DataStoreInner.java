// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybriddatamanager.models.CustomerSecret;
import com.azure.resourcemanager.hybriddatamanager.models.DmsBaseObject;
import com.azure.resourcemanager.hybriddatamanager.models.State;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Data store. */
@JsonFlatten
@Fluent
public class DataStoreInner extends DmsBaseObject {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DataStoreInner.class);

    /*
     * Arm Id for the manager resource to which the data source is associated.
     * This is optional.
     */
    @JsonProperty(value = "properties.repositoryId")
    private String repositoryId;

    /*
     * State of the data source.
     */
    @JsonProperty(value = "properties.state", required = true)
    private State state;

    /*
     * A generic json used differently by each data source type.
     */
    @JsonProperty(value = "properties.extendedProperties")
    private Object extendedProperties;

    /*
     * The arm id of the data store type.
     */
    @JsonProperty(value = "properties.dataStoreTypeId", required = true)
    private String dataStoreTypeId;

    /*
     * List of customer secrets containing a key identifier and key value. The
     * key identifier is a way for the specific data source to understand the
     * key. Value contains customer secret encrypted by the encryptionKeys.
     */
    @JsonProperty(value = "properties.customerSecrets")
    private List<CustomerSecret> customerSecrets;

    /**
     * Get the repositoryId property: Arm Id for the manager resource to which the data source is associated. This is
     * optional.
     *
     * @return the repositoryId value.
     */
    public String repositoryId() {
        return this.repositoryId;
    }

    /**
     * Set the repositoryId property: Arm Id for the manager resource to which the data source is associated. This is
     * optional.
     *
     * @param repositoryId the repositoryId value to set.
     * @return the DataStoreInner object itself.
     */
    public DataStoreInner withRepositoryId(String repositoryId) {
        this.repositoryId = repositoryId;
        return this;
    }

    /**
     * Get the state property: State of the data source.
     *
     * @return the state value.
     */
    public State state() {
        return this.state;
    }

    /**
     * Set the state property: State of the data source.
     *
     * @param state the state value to set.
     * @return the DataStoreInner object itself.
     */
    public DataStoreInner withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Get the extendedProperties property: A generic json used differently by each data source type.
     *
     * @return the extendedProperties value.
     */
    public Object extendedProperties() {
        return this.extendedProperties;
    }

    /**
     * Set the extendedProperties property: A generic json used differently by each data source type.
     *
     * @param extendedProperties the extendedProperties value to set.
     * @return the DataStoreInner object itself.
     */
    public DataStoreInner withExtendedProperties(Object extendedProperties) {
        this.extendedProperties = extendedProperties;
        return this;
    }

    /**
     * Get the dataStoreTypeId property: The arm id of the data store type.
     *
     * @return the dataStoreTypeId value.
     */
    public String dataStoreTypeId() {
        return this.dataStoreTypeId;
    }

    /**
     * Set the dataStoreTypeId property: The arm id of the data store type.
     *
     * @param dataStoreTypeId the dataStoreTypeId value to set.
     * @return the DataStoreInner object itself.
     */
    public DataStoreInner withDataStoreTypeId(String dataStoreTypeId) {
        this.dataStoreTypeId = dataStoreTypeId;
        return this;
    }

    /**
     * Get the customerSecrets property: List of customer secrets containing a key identifier and key value. The key
     * identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted
     * by the encryptionKeys.
     *
     * @return the customerSecrets value.
     */
    public List<CustomerSecret> customerSecrets() {
        return this.customerSecrets;
    }

    /**
     * Set the customerSecrets property: List of customer secrets containing a key identifier and key value. The key
     * identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted
     * by the encryptionKeys.
     *
     * @param customerSecrets the customerSecrets value to set.
     * @return the DataStoreInner object itself.
     */
    public DataStoreInner withCustomerSecrets(List<CustomerSecret> customerSecrets) {
        this.customerSecrets = customerSecrets;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (state() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property state in model DataStoreInner"));
        }
        if (dataStoreTypeId() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property dataStoreTypeId in model DataStoreInner"));
        }
        if (customerSecrets() != null) {
            customerSecrets().forEach(e -> e.validate());
        }
    }
}
