// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.hybriddatamanager.fluent.models.DataStoreInner;
import com.azure.resourcemanager.hybriddatamanager.models.CustomerSecret;
import com.azure.resourcemanager.hybriddatamanager.models.DataStore;
import com.azure.resourcemanager.hybriddatamanager.models.State;
import java.util.Collections;
import java.util.List;

public final class DataStoreImpl implements DataStore, DataStore.Definition, DataStore.Update {
    private DataStoreInner innerObject;

    private final com.azure.resourcemanager.hybriddatamanager.HybridDataManager serviceManager;

    public String name() {
        return this.innerModel().name();
    }

    public String id() {
        return this.innerModel().id();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String repositoryId() {
        return this.innerModel().repositoryId();
    }

    public State state() {
        return this.innerModel().state();
    }

    public Object extendedProperties() {
        return this.innerModel().extendedProperties();
    }

    public String dataStoreTypeId() {
        return this.innerModel().dataStoreTypeId();
    }

    public List<CustomerSecret> customerSecrets() {
        List<CustomerSecret> inner = this.innerModel().customerSecrets();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public DataStoreInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.hybriddatamanager.HybridDataManager manager() {
        return this.serviceManager;
    }

    private String dataStoreName;

    private String resourceGroupName;

    private String dataManagerName;

    public DataStoreImpl withExistingDataManager(String resourceGroupName, String dataManagerName) {
        this.resourceGroupName = resourceGroupName;
        this.dataManagerName = dataManagerName;
        return this;
    }

    public DataStore create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataStores()
                .createOrUpdate(dataStoreName, resourceGroupName, dataManagerName, this.innerModel(), Context.NONE);
        return this;
    }

    public DataStore create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataStores()
                .createOrUpdate(dataStoreName, resourceGroupName, dataManagerName, this.innerModel(), context);
        return this;
    }

    DataStoreImpl(String name, com.azure.resourcemanager.hybriddatamanager.HybridDataManager serviceManager) {
        this.innerObject = new DataStoreInner();
        this.serviceManager = serviceManager;
        this.dataStoreName = name;
    }

    public DataStoreImpl update() {
        return this;
    }

    public DataStore apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataStores()
                .createOrUpdate(dataStoreName, resourceGroupName, dataManagerName, this.innerModel(), Context.NONE);
        return this;
    }

    public DataStore apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataStores()
                .createOrUpdate(dataStoreName, resourceGroupName, dataManagerName, this.innerModel(), context);
        return this;
    }

    DataStoreImpl(
        DataStoreInner innerObject, com.azure.resourcemanager.hybriddatamanager.HybridDataManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.dataStoreName = Utils.getValueFromIdByName(innerObject.id(), "dataStores");
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.dataManagerName = Utils.getValueFromIdByName(innerObject.id(), "dataManagers");
    }

    public DataStore refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataStores()
                .getWithResponse(dataStoreName, resourceGroupName, dataManagerName, Context.NONE)
                .getValue();
        return this;
    }

    public DataStore refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataStores()
                .getWithResponse(dataStoreName, resourceGroupName, dataManagerName, context)
                .getValue();
        return this;
    }

    public DataStoreImpl withState(State state) {
        this.innerModel().withState(state);
        return this;
    }

    public DataStoreImpl withDataStoreTypeId(String dataStoreTypeId) {
        this.innerModel().withDataStoreTypeId(dataStoreTypeId);
        return this;
    }

    public DataStoreImpl withRepositoryId(String repositoryId) {
        this.innerModel().withRepositoryId(repositoryId);
        return this;
    }

    public DataStoreImpl withExtendedProperties(Object extendedProperties) {
        this.innerModel().withExtendedProperties(extendedProperties);
        return this;
    }

    public DataStoreImpl withCustomerSecrets(List<CustomerSecret> customerSecrets) {
        this.innerModel().withCustomerSecrets(customerSecrets);
        return this;
    }
}
