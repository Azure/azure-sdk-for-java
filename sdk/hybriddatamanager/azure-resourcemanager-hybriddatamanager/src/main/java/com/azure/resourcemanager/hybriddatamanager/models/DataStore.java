// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.hybriddatamanager.fluent.models.DataStoreInner;
import java.util.List;

/** An immutable client-side representation of DataStore. */
public interface DataStore {
    /**
     * Gets the name property: Name of the object.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the id property: Id of the object.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the type property: Type of the object.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the repositoryId property: Arm Id for the manager resource to which the data source is associated. This is
     * optional.
     *
     * @return the repositoryId value.
     */
    String repositoryId();

    /**
     * Gets the state property: State of the data source.
     *
     * @return the state value.
     */
    State state();

    /**
     * Gets the extendedProperties property: A generic json used differently by each data source type.
     *
     * @return the extendedProperties value.
     */
    Object extendedProperties();

    /**
     * Gets the dataStoreTypeId property: The arm id of the data store type.
     *
     * @return the dataStoreTypeId value.
     */
    String dataStoreTypeId();

    /**
     * Gets the customerSecrets property: List of customer secrets containing a key identifier and key value. The key
     * identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted
     * by the encryptionKeys.
     *
     * @return the customerSecrets value.
     */
    List<CustomerSecret> customerSecrets();

    /**
     * Gets the inner com.azure.resourcemanager.hybriddatamanager.fluent.models.DataStoreInner object.
     *
     * @return the inner object.
     */
    DataStoreInner innerModel();

    /** The entirety of the DataStore definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithState,
            DefinitionStages.WithDataStoreTypeId,
            DefinitionStages.WithCreate {
    }
    /** The DataStore definition stages. */
    interface DefinitionStages {
        /** The first stage of the DataStore definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the DataStore definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, dataManagerName.
             *
             * @param resourceGroupName The Resource Group Name.
             * @param dataManagerName The name of the DataManager Resource within the specified resource group.
             *     DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
             *     underscore only.
             * @return the next definition stage.
             */
            WithState withExistingDataManager(String resourceGroupName, String dataManagerName);
        }
        /** The stage of the DataStore definition allowing to specify state. */
        interface WithState {
            /**
             * Specifies the state property: State of the data source..
             *
             * @param state State of the data source.
             * @return the next definition stage.
             */
            WithDataStoreTypeId withState(State state);
        }
        /** The stage of the DataStore definition allowing to specify dataStoreTypeId. */
        interface WithDataStoreTypeId {
            /**
             * Specifies the dataStoreTypeId property: The arm id of the data store type..
             *
             * @param dataStoreTypeId The arm id of the data store type.
             * @return the next definition stage.
             */
            WithCreate withDataStoreTypeId(String dataStoreTypeId);
        }
        /**
         * The stage of the DataStore definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithRepositoryId,
                DefinitionStages.WithExtendedProperties,
                DefinitionStages.WithCustomerSecrets {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            DataStore create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            DataStore create(Context context);
        }
        /** The stage of the DataStore definition allowing to specify repositoryId. */
        interface WithRepositoryId {
            /**
             * Specifies the repositoryId property: Arm Id for the manager resource to which the data source is
             * associated. This is optional..
             *
             * @param repositoryId Arm Id for the manager resource to which the data source is associated. This is
             *     optional.
             * @return the next definition stage.
             */
            WithCreate withRepositoryId(String repositoryId);
        }
        /** The stage of the DataStore definition allowing to specify extendedProperties. */
        interface WithExtendedProperties {
            /**
             * Specifies the extendedProperties property: A generic json used differently by each data source type..
             *
             * @param extendedProperties A generic json used differently by each data source type.
             * @return the next definition stage.
             */
            WithCreate withExtendedProperties(Object extendedProperties);
        }
        /** The stage of the DataStore definition allowing to specify customerSecrets. */
        interface WithCustomerSecrets {
            /**
             * Specifies the customerSecrets property: List of customer secrets containing a key identifier and key
             * value. The key identifier is a way for the specific data source to understand the key. Value contains
             * customer secret encrypted by the encryptionKeys..
             *
             * @param customerSecrets List of customer secrets containing a key identifier and key value. The key
             *     identifier is a way for the specific data source to understand the key. Value contains customer
             *     secret encrypted by the encryptionKeys.
             * @return the next definition stage.
             */
            WithCreate withCustomerSecrets(List<CustomerSecret> customerSecrets);
        }
    }
    /**
     * Begins update for the DataStore resource.
     *
     * @return the stage of resource update.
     */
    DataStore.Update update();

    /** The template for DataStore update. */
    interface Update
        extends UpdateStages.WithRepositoryId,
            UpdateStages.WithState,
            UpdateStages.WithExtendedProperties,
            UpdateStages.WithDataStoreTypeId,
            UpdateStages.WithCustomerSecrets {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        DataStore apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        DataStore apply(Context context);
    }
    /** The DataStore update stages. */
    interface UpdateStages {
        /** The stage of the DataStore update allowing to specify repositoryId. */
        interface WithRepositoryId {
            /**
             * Specifies the repositoryId property: Arm Id for the manager resource to which the data source is
             * associated. This is optional..
             *
             * @param repositoryId Arm Id for the manager resource to which the data source is associated. This is
             *     optional.
             * @return the next definition stage.
             */
            Update withRepositoryId(String repositoryId);
        }
        /** The stage of the DataStore update allowing to specify state. */
        interface WithState {
            /**
             * Specifies the state property: State of the data source..
             *
             * @param state State of the data source.
             * @return the next definition stage.
             */
            Update withState(State state);
        }
        /** The stage of the DataStore update allowing to specify extendedProperties. */
        interface WithExtendedProperties {
            /**
             * Specifies the extendedProperties property: A generic json used differently by each data source type..
             *
             * @param extendedProperties A generic json used differently by each data source type.
             * @return the next definition stage.
             */
            Update withExtendedProperties(Object extendedProperties);
        }
        /** The stage of the DataStore update allowing to specify dataStoreTypeId. */
        interface WithDataStoreTypeId {
            /**
             * Specifies the dataStoreTypeId property: The arm id of the data store type..
             *
             * @param dataStoreTypeId The arm id of the data store type.
             * @return the next definition stage.
             */
            Update withDataStoreTypeId(String dataStoreTypeId);
        }
        /** The stage of the DataStore update allowing to specify customerSecrets. */
        interface WithCustomerSecrets {
            /**
             * Specifies the customerSecrets property: List of customer secrets containing a key identifier and key
             * value. The key identifier is a way for the specific data source to understand the key. Value contains
             * customer secret encrypted by the encryptionKeys..
             *
             * @param customerSecrets List of customer secrets containing a key identifier and key value. The key
             *     identifier is a way for the specific data source to understand the key. Value contains customer
             *     secret encrypted by the encryptionKeys.
             * @return the next definition stage.
             */
            Update withCustomerSecrets(List<CustomerSecret> customerSecrets);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    DataStore refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    DataStore refresh(Context context);
}
