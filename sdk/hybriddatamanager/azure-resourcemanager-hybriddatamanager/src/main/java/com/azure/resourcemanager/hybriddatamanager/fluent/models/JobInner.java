// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybriddatamanager.models.DmsBaseObject;
import com.azure.resourcemanager.hybriddatamanager.models.Error;
import com.azure.resourcemanager.hybriddatamanager.models.IsJobCancellable;
import com.azure.resourcemanager.hybriddatamanager.models.JobStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Data service job. */
@Fluent
public final class JobInner extends DmsBaseObject {
    /*
     * Status of the job.
     */
    @JsonProperty(value = "status", required = true)
    private JobStatus status;

    /*
     * Time at which the job was started in UTC ISO 8601 format.
     */
    @JsonProperty(value = "startTime", required = true)
    private OffsetDateTime startTime;

    /*
     * Time at which the job ended in UTC ISO 8601 format.
     */
    @JsonProperty(value = "endTime")
    private OffsetDateTime endTime;

    /*
     * Job properties.
     */
    @JsonProperty(value = "properties", required = true)
    private JobPropertiesInner innerProperties = new JobPropertiesInner();

    /*
     * Top level error for the job.
     */
    @JsonProperty(value = "error")
    private Error error;

    /**
     * Get the status property: Status of the job.
     *
     * @return the status value.
     */
    public JobStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the job.
     *
     * @param status the status value to set.
     * @return the JobInner object itself.
     */
    public JobInner withStatus(JobStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the startTime property: Time at which the job was started in UTC ISO 8601 format.
     *
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: Time at which the job was started in UTC ISO 8601 format.
     *
     * @param startTime the startTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: Time at which the job ended in UTC ISO 8601 format.
     *
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: Time at which the job ended in UTC ISO 8601 format.
     *
     * @param endTime the endTime value to set.
     * @return the JobInner object itself.
     */
    public JobInner withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the innerProperties property: Job properties.
     *
     * @return the innerProperties value.
     */
    private JobPropertiesInner innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the error property: Top level error for the job.
     *
     * @return the error value.
     */
    public Error error() {
        return this.error;
    }

    /**
     * Set the error property: Top level error for the job.
     *
     * @param error the error value to set.
     * @return the JobInner object itself.
     */
    public JobInner withError(Error error) {
        this.error = error;
        return this;
    }

    /**
     * Get the isCancellable property: Describes whether the job is cancellable.
     *
     * @return the isCancellable value.
     */
    public IsJobCancellable isCancellable() {
        return this.innerProperties() == null ? null : this.innerProperties().isCancellable();
    }

    /**
     * Set the isCancellable property: Describes whether the job is cancellable.
     *
     * @param isCancellable the isCancellable value to set.
     * @return the JobInner object itself.
     */
    public JobInner withIsCancellable(IsJobCancellable isCancellable) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withIsCancellable(isCancellable);
        return this;
    }

    /**
     * Get the bytesProcessed property: Number of bytes processed by the job as of now.
     *
     * @return the bytesProcessed value.
     */
    public Long bytesProcessed() {
        return this.innerProperties() == null ? null : this.innerProperties().bytesProcessed();
    }

    /**
     * Set the bytesProcessed property: Number of bytes processed by the job as of now.
     *
     * @param bytesProcessed the bytesProcessed value to set.
     * @return the JobInner object itself.
     */
    public JobInner withBytesProcessed(Long bytesProcessed) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withBytesProcessed(bytesProcessed);
        return this;
    }

    /**
     * Get the itemsProcessed property: Number of items processed by the job as of now.
     *
     * @return the itemsProcessed value.
     */
    public Long itemsProcessed() {
        return this.innerProperties() == null ? null : this.innerProperties().itemsProcessed();
    }

    /**
     * Set the itemsProcessed property: Number of items processed by the job as of now.
     *
     * @param itemsProcessed the itemsProcessed value to set.
     * @return the JobInner object itself.
     */
    public JobInner withItemsProcessed(Long itemsProcessed) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withItemsProcessed(itemsProcessed);
        return this;
    }

    /**
     * Get the totalBytesToProcess property: Number of bytes to be processed by the job in total.
     *
     * @return the totalBytesToProcess value.
     */
    public Long totalBytesToProcess() {
        return this.innerProperties() == null ? null : this.innerProperties().totalBytesToProcess();
    }

    /**
     * Set the totalBytesToProcess property: Number of bytes to be processed by the job in total.
     *
     * @param totalBytesToProcess the totalBytesToProcess value to set.
     * @return the JobInner object itself.
     */
    public JobInner withTotalBytesToProcess(Long totalBytesToProcess) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withTotalBytesToProcess(totalBytesToProcess);
        return this;
    }

    /**
     * Get the totalItemsToProcess property: Number of items to be processed by the job in total.
     *
     * @return the totalItemsToProcess value.
     */
    public Long totalItemsToProcess() {
        return this.innerProperties() == null ? null : this.innerProperties().totalItemsToProcess();
    }

    /**
     * Set the totalItemsToProcess property: Number of items to be processed by the job in total.
     *
     * @param totalItemsToProcess the totalItemsToProcess value to set.
     * @return the JobInner object itself.
     */
    public JobInner withTotalItemsToProcess(Long totalItemsToProcess) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withTotalItemsToProcess(totalItemsToProcess);
        return this;
    }

    /**
     * Get the details property: Details of a job run. This field will only be sent for expand details filter.
     *
     * @return the details value.
     */
    public JobDetailsInner details() {
        return this.innerProperties() == null ? null : this.innerProperties().details();
    }

    /**
     * Set the details property: Details of a job run. This field will only be sent for expand details filter.
     *
     * @param details the details value to set.
     * @return the JobInner object itself.
     */
    public JobInner withDetails(JobDetailsInner details) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withDetails(details);
        return this;
    }

    /**
     * Get the dataSourceName property: Name of the data source on which the job was triggered.
     *
     * @return the dataSourceName value.
     */
    public String dataSourceName() {
        return this.innerProperties() == null ? null : this.innerProperties().dataSourceName();
    }

    /**
     * Set the dataSourceName property: Name of the data source on which the job was triggered.
     *
     * @param dataSourceName the dataSourceName value to set.
     * @return the JobInner object itself.
     */
    public JobInner withDataSourceName(String dataSourceName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withDataSourceName(dataSourceName);
        return this;
    }

    /**
     * Get the dataSinkName property: Name of the data sink on which the job was triggered.
     *
     * @return the dataSinkName value.
     */
    public String dataSinkName() {
        return this.innerProperties() == null ? null : this.innerProperties().dataSinkName();
    }

    /**
     * Set the dataSinkName property: Name of the data sink on which the job was triggered.
     *
     * @param dataSinkName the dataSinkName value to set.
     * @return the JobInner object itself.
     */
    public JobInner withDataSinkName(String dataSinkName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JobPropertiesInner();
        }
        this.innerProperties().withDataSinkName(dataSinkName);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (status() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property status in model JobInner"));
        }
        if (startTime() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property startTime in model JobInner"));
        }
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property innerProperties in model JobInner"));
        } else {
            innerProperties().validate();
        }
        if (error() != null) {
            error().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JobInner.class);
}
