// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybriddatamanager.fluent.HybridDataManagementClient;
import com.azure.resourcemanager.hybriddatamanager.implementation.DataManagersImpl;
import com.azure.resourcemanager.hybriddatamanager.implementation.DataServicesImpl;
import com.azure.resourcemanager.hybriddatamanager.implementation.DataStoreTypesImpl;
import com.azure.resourcemanager.hybriddatamanager.implementation.DataStoresImpl;
import com.azure.resourcemanager.hybriddatamanager.implementation.HybridDataManagementClientBuilder;
import com.azure.resourcemanager.hybriddatamanager.implementation.JobDefinitionsImpl;
import com.azure.resourcemanager.hybriddatamanager.implementation.JobsImpl;
import com.azure.resourcemanager.hybriddatamanager.implementation.OperationsImpl;
import com.azure.resourcemanager.hybriddatamanager.implementation.PublicKeysImpl;
import com.azure.resourcemanager.hybriddatamanager.models.DataManagers;
import com.azure.resourcemanager.hybriddatamanager.models.DataServices;
import com.azure.resourcemanager.hybriddatamanager.models.DataStoreTypes;
import com.azure.resourcemanager.hybriddatamanager.models.DataStores;
import com.azure.resourcemanager.hybriddatamanager.models.JobDefinitions;
import com.azure.resourcemanager.hybriddatamanager.models.Jobs;
import com.azure.resourcemanager.hybriddatamanager.models.Operations;
import com.azure.resourcemanager.hybriddatamanager.models.PublicKeys;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/** Entry point to HybridDataManager. */
public final class HybridDataManager {
    private Operations operations;

    private DataManagers dataManagers;

    private DataServices dataServices;

    private JobDefinitions jobDefinitions;

    private Jobs jobs;

    private DataStores dataStores;

    private DataStoreTypes dataStoreTypes;

    private PublicKeys publicKeys;

    private final HybridDataManagementClient clientObject;

    private HybridDataManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject =
            new HybridDataManagementClientBuilder()
                .pipeline(httpPipeline)
                .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
                .subscriptionId(profile.getSubscriptionId())
                .defaultPollInterval(defaultPollInterval)
                .buildClient();
    }

    /**
     * Creates an instance of HybridData service API entry point.
     *
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the HybridData service API instance.
     */
    public static HybridDataManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of HybridData service API entry point.
     *
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the HybridData service API instance.
     */
    public static HybridDataManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new HybridDataManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create HybridDataManager with optional configuration.
     *
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new HybridDataManager.Configurable();
    }

    /** The Configurable allowing configurations to be set. */
    public static final class Configurable {
        private static final ClientLogger LOGGER = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private RetryOptions retryOptions;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the retry options for the HTTP pipeline retry policy.
         *
         * <p>This setting has no effect, if retry policy is set via {@link #withRetryPolicy(RetryPolicy)}.
         *
         * @param retryOptions the retry options for the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryOptions(RetryOptions retryOptions) {
            this.retryOptions = Objects.requireNonNull(retryOptions, "'retryOptions' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval =
                Objects.requireNonNull(defaultPollInterval, "'defaultPollInterval' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw LOGGER
                    .logExceptionAsError(new IllegalArgumentException("'defaultPollInterval' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of HybridData service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the HybridData service API instance.
         */
        public HybridDataManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder
                .append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.hybriddatamanager")
                .append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder
                    .append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                if (retryOptions != null) {
                    retryPolicy = new RetryPolicy(retryOptions);
                } else {
                    retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
                }
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new AddHeadersFromContextPolicy());
            policies.add(new RequestIdPolicy());
            policies
                .addAll(
                    this
                        .policies
                        .stream()
                        .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
                        .collect(Collectors.toList()));
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new ArmChallengeAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies
                .addAll(
                    this
                        .policies
                        .stream()
                        .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                        .collect(Collectors.toList()));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                    .httpClient(httpClient)
                    .policies(policies.toArray(new HttpPipelinePolicy[0]))
                    .build();
            return new HybridDataManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /**
     * Gets the resource collection API of Operations.
     *
     * @return Resource collection API of Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /**
     * Gets the resource collection API of DataManagers. It manages DataManager.
     *
     * @return Resource collection API of DataManagers.
     */
    public DataManagers dataManagers() {
        if (this.dataManagers == null) {
            this.dataManagers = new DataManagersImpl(clientObject.getDataManagers(), this);
        }
        return dataManagers;
    }

    /**
     * Gets the resource collection API of DataServices.
     *
     * @return Resource collection API of DataServices.
     */
    public DataServices dataServices() {
        if (this.dataServices == null) {
            this.dataServices = new DataServicesImpl(clientObject.getDataServices(), this);
        }
        return dataServices;
    }

    /**
     * Gets the resource collection API of JobDefinitions. It manages JobDefinition.
     *
     * @return Resource collection API of JobDefinitions.
     */
    public JobDefinitions jobDefinitions() {
        if (this.jobDefinitions == null) {
            this.jobDefinitions = new JobDefinitionsImpl(clientObject.getJobDefinitions(), this);
        }
        return jobDefinitions;
    }

    /**
     * Gets the resource collection API of Jobs.
     *
     * @return Resource collection API of Jobs.
     */
    public Jobs jobs() {
        if (this.jobs == null) {
            this.jobs = new JobsImpl(clientObject.getJobs(), this);
        }
        return jobs;
    }

    /**
     * Gets the resource collection API of DataStores. It manages DataStore.
     *
     * @return Resource collection API of DataStores.
     */
    public DataStores dataStores() {
        if (this.dataStores == null) {
            this.dataStores = new DataStoresImpl(clientObject.getDataStores(), this);
        }
        return dataStores;
    }

    /**
     * Gets the resource collection API of DataStoreTypes.
     *
     * @return Resource collection API of DataStoreTypes.
     */
    public DataStoreTypes dataStoreTypes() {
        if (this.dataStoreTypes == null) {
            this.dataStoreTypes = new DataStoreTypesImpl(clientObject.getDataStoreTypes(), this);
        }
        return dataStoreTypes;
    }

    /**
     * Gets the resource collection API of PublicKeys.
     *
     * @return Resource collection API of PublicKeys.
     */
    public PublicKeys publicKeys() {
        if (this.publicKeys == null) {
            this.publicKeys = new PublicKeysImpl(clientObject.getPublicKeys(), this);
        }
        return publicKeys;
    }

    /**
     * @return Wrapped service client HybridDataManagementClient providing direct access to the underlying
     *     auto-generated API implementation, based on Azure REST API.
     */
    public HybridDataManagementClient serviceClient() {
        return this.clientObject;
    }
}
