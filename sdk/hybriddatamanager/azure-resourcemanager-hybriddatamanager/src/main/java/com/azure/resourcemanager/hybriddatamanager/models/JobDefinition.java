// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.hybriddatamanager.fluent.models.JobDefinitionInner;
import java.time.OffsetDateTime;
import java.util.List;

/** An immutable client-side representation of JobDefinition. */
public interface JobDefinition {
    /**
     * Gets the name property: Name of the object.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the id property: Id of the object.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the type property: Type of the object.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the dataSourceId property: Data Source Id associated to the job definition.
     *
     * @return the dataSourceId value.
     */
    String dataSourceId();

    /**
     * Gets the dataSinkId property: Data Sink Id associated to the job definition.
     *
     * @return the dataSinkId value.
     */
    String dataSinkId();

    /**
     * Gets the schedules property: Schedule for running the job definition.
     *
     * @return the schedules value.
     */
    List<Schedule> schedules();

    /**
     * Gets the state property: State of the job definition.
     *
     * @return the state value.
     */
    State state();

    /**
     * Gets the lastModifiedTime property: Last modified time of the job definition.
     *
     * @return the lastModifiedTime value.
     */
    OffsetDateTime lastModifiedTime();

    /**
     * Gets the runLocation property: This is the preferred geo location for the job to run.
     *
     * @return the runLocation value.
     */
    RunLocation runLocation();

    /**
     * Gets the userConfirmation property: Enum to detect if user confirmation is required. If not passed will default
     * to NotRequired.
     *
     * @return the userConfirmation value.
     */
    UserConfirmation userConfirmation();

    /**
     * Gets the dataServiceInput property: A generic json used differently by each data service type.
     *
     * @return the dataServiceInput value.
     */
    Object dataServiceInput();

    /**
     * Gets the customerSecrets property: List of customer secrets containing a key identifier and key value. The key
     * identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted
     * by the encryptionKeys.
     *
     * @return the customerSecrets value.
     */
    List<CustomerSecret> customerSecrets();

    /**
     * Gets the inner com.azure.resourcemanager.hybriddatamanager.fluent.models.JobDefinitionInner object.
     *
     * @return the inner object.
     */
    JobDefinitionInner innerModel();

    /** The entirety of the JobDefinition definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithDataSourceId,
            DefinitionStages.WithDataSinkId,
            DefinitionStages.WithState,
            DefinitionStages.WithCreate {
    }
    /** The JobDefinition definition stages. */
    interface DefinitionStages {
        /** The first stage of the JobDefinition definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the JobDefinition definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies dataServiceName, resourceGroupName, dataManagerName.
             *
             * @param dataServiceName The data service type of the job definition.
             * @param resourceGroupName The Resource Group Name.
             * @param dataManagerName The name of the DataManager Resource within the specified resource group.
             *     DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
             *     underscore only.
             * @return the next definition stage.
             */
            WithDataSourceId withExistingDataService(
                String dataServiceName, String resourceGroupName, String dataManagerName);
        }
        /** The stage of the JobDefinition definition allowing to specify dataSourceId. */
        interface WithDataSourceId {
            /**
             * Specifies the dataSourceId property: Data Source Id associated to the job definition..
             *
             * @param dataSourceId Data Source Id associated to the job definition.
             * @return the next definition stage.
             */
            WithDataSinkId withDataSourceId(String dataSourceId);
        }
        /** The stage of the JobDefinition definition allowing to specify dataSinkId. */
        interface WithDataSinkId {
            /**
             * Specifies the dataSinkId property: Data Sink Id associated to the job definition..
             *
             * @param dataSinkId Data Sink Id associated to the job definition.
             * @return the next definition stage.
             */
            WithState withDataSinkId(String dataSinkId);
        }
        /** The stage of the JobDefinition definition allowing to specify state. */
        interface WithState {
            /**
             * Specifies the state property: State of the job definition..
             *
             * @param state State of the job definition.
             * @return the next definition stage.
             */
            WithCreate withState(State state);
        }
        /**
         * The stage of the JobDefinition definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithSchedules,
                DefinitionStages.WithLastModifiedTime,
                DefinitionStages.WithRunLocation,
                DefinitionStages.WithUserConfirmation,
                DefinitionStages.WithDataServiceInput,
                DefinitionStages.WithCustomerSecrets {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            JobDefinition create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            JobDefinition create(Context context);
        }
        /** The stage of the JobDefinition definition allowing to specify schedules. */
        interface WithSchedules {
            /**
             * Specifies the schedules property: Schedule for running the job definition.
             *
             * @param schedules Schedule for running the job definition.
             * @return the next definition stage.
             */
            WithCreate withSchedules(List<Schedule> schedules);
        }
        /** The stage of the JobDefinition definition allowing to specify lastModifiedTime. */
        interface WithLastModifiedTime {
            /**
             * Specifies the lastModifiedTime property: Last modified time of the job definition..
             *
             * @param lastModifiedTime Last modified time of the job definition.
             * @return the next definition stage.
             */
            WithCreate withLastModifiedTime(OffsetDateTime lastModifiedTime);
        }
        /** The stage of the JobDefinition definition allowing to specify runLocation. */
        interface WithRunLocation {
            /**
             * Specifies the runLocation property: This is the preferred geo location for the job to run..
             *
             * @param runLocation This is the preferred geo location for the job to run.
             * @return the next definition stage.
             */
            WithCreate withRunLocation(RunLocation runLocation);
        }
        /** The stage of the JobDefinition definition allowing to specify userConfirmation. */
        interface WithUserConfirmation {
            /**
             * Specifies the userConfirmation property: Enum to detect if user confirmation is required. If not passed
             * will default to NotRequired..
             *
             * @param userConfirmation Enum to detect if user confirmation is required. If not passed will default to
             *     NotRequired.
             * @return the next definition stage.
             */
            WithCreate withUserConfirmation(UserConfirmation userConfirmation);
        }
        /** The stage of the JobDefinition definition allowing to specify dataServiceInput. */
        interface WithDataServiceInput {
            /**
             * Specifies the dataServiceInput property: A generic json used differently by each data service type..
             *
             * @param dataServiceInput A generic json used differently by each data service type.
             * @return the next definition stage.
             */
            WithCreate withDataServiceInput(Object dataServiceInput);
        }
        /** The stage of the JobDefinition definition allowing to specify customerSecrets. */
        interface WithCustomerSecrets {
            /**
             * Specifies the customerSecrets property: List of customer secrets containing a key identifier and key
             * value. The key identifier is a way for the specific data source to understand the key. Value contains
             * customer secret encrypted by the encryptionKeys..
             *
             * @param customerSecrets List of customer secrets containing a key identifier and key value. The key
             *     identifier is a way for the specific data source to understand the key. Value contains customer
             *     secret encrypted by the encryptionKeys.
             * @return the next definition stage.
             */
            WithCreate withCustomerSecrets(List<CustomerSecret> customerSecrets);
        }
    }
    /**
     * Begins update for the JobDefinition resource.
     *
     * @return the stage of resource update.
     */
    JobDefinition.Update update();

    /** The template for JobDefinition update. */
    interface Update
        extends UpdateStages.WithDataSourceId,
            UpdateStages.WithDataSinkId,
            UpdateStages.WithSchedules,
            UpdateStages.WithState,
            UpdateStages.WithLastModifiedTime,
            UpdateStages.WithRunLocation,
            UpdateStages.WithUserConfirmation,
            UpdateStages.WithDataServiceInput,
            UpdateStages.WithCustomerSecrets {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        JobDefinition apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        JobDefinition apply(Context context);
    }
    /** The JobDefinition update stages. */
    interface UpdateStages {
        /** The stage of the JobDefinition update allowing to specify dataSourceId. */
        interface WithDataSourceId {
            /**
             * Specifies the dataSourceId property: Data Source Id associated to the job definition..
             *
             * @param dataSourceId Data Source Id associated to the job definition.
             * @return the next definition stage.
             */
            Update withDataSourceId(String dataSourceId);
        }
        /** The stage of the JobDefinition update allowing to specify dataSinkId. */
        interface WithDataSinkId {
            /**
             * Specifies the dataSinkId property: Data Sink Id associated to the job definition..
             *
             * @param dataSinkId Data Sink Id associated to the job definition.
             * @return the next definition stage.
             */
            Update withDataSinkId(String dataSinkId);
        }
        /** The stage of the JobDefinition update allowing to specify schedules. */
        interface WithSchedules {
            /**
             * Specifies the schedules property: Schedule for running the job definition.
             *
             * @param schedules Schedule for running the job definition.
             * @return the next definition stage.
             */
            Update withSchedules(List<Schedule> schedules);
        }
        /** The stage of the JobDefinition update allowing to specify state. */
        interface WithState {
            /**
             * Specifies the state property: State of the job definition..
             *
             * @param state State of the job definition.
             * @return the next definition stage.
             */
            Update withState(State state);
        }
        /** The stage of the JobDefinition update allowing to specify lastModifiedTime. */
        interface WithLastModifiedTime {
            /**
             * Specifies the lastModifiedTime property: Last modified time of the job definition..
             *
             * @param lastModifiedTime Last modified time of the job definition.
             * @return the next definition stage.
             */
            Update withLastModifiedTime(OffsetDateTime lastModifiedTime);
        }
        /** The stage of the JobDefinition update allowing to specify runLocation. */
        interface WithRunLocation {
            /**
             * Specifies the runLocation property: This is the preferred geo location for the job to run..
             *
             * @param runLocation This is the preferred geo location for the job to run.
             * @return the next definition stage.
             */
            Update withRunLocation(RunLocation runLocation);
        }
        /** The stage of the JobDefinition update allowing to specify userConfirmation. */
        interface WithUserConfirmation {
            /**
             * Specifies the userConfirmation property: Enum to detect if user confirmation is required. If not passed
             * will default to NotRequired..
             *
             * @param userConfirmation Enum to detect if user confirmation is required. If not passed will default to
             *     NotRequired.
             * @return the next definition stage.
             */
            Update withUserConfirmation(UserConfirmation userConfirmation);
        }
        /** The stage of the JobDefinition update allowing to specify dataServiceInput. */
        interface WithDataServiceInput {
            /**
             * Specifies the dataServiceInput property: A generic json used differently by each data service type..
             *
             * @param dataServiceInput A generic json used differently by each data service type.
             * @return the next definition stage.
             */
            Update withDataServiceInput(Object dataServiceInput);
        }
        /** The stage of the JobDefinition update allowing to specify customerSecrets. */
        interface WithCustomerSecrets {
            /**
             * Specifies the customerSecrets property: List of customer secrets containing a key identifier and key
             * value. The key identifier is a way for the specific data source to understand the key. Value contains
             * customer secret encrypted by the encryptionKeys..
             *
             * @param customerSecrets List of customer secrets containing a key identifier and key value. The key
             *     identifier is a way for the specific data source to understand the key. Value contains customer
             *     secret encrypted by the encryptionKeys.
             * @return the next definition stage.
             */
            Update withCustomerSecrets(List<CustomerSecret> customerSecrets);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    JobDefinition refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    JobDefinition refresh(Context context);

    /**
     * This method runs a job instance of the given job definition.
     *
     * @param runParameters Run time parameters for the job definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void run(RunParameters runParameters);

    /**
     * This method runs a job instance of the given job definition.
     *
     * @param runParameters Run time parameters for the job definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void run(RunParameters runParameters, Context context);
}
