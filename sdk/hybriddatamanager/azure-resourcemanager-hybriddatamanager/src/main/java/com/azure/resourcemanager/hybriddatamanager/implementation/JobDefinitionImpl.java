// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.hybriddatamanager.fluent.models.JobDefinitionInner;
import com.azure.resourcemanager.hybriddatamanager.models.CustomerSecret;
import com.azure.resourcemanager.hybriddatamanager.models.JobDefinition;
import com.azure.resourcemanager.hybriddatamanager.models.RunLocation;
import com.azure.resourcemanager.hybriddatamanager.models.RunParameters;
import com.azure.resourcemanager.hybriddatamanager.models.Schedule;
import com.azure.resourcemanager.hybriddatamanager.models.State;
import com.azure.resourcemanager.hybriddatamanager.models.UserConfirmation;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;

public final class JobDefinitionImpl implements JobDefinition, JobDefinition.Definition, JobDefinition.Update {
    private JobDefinitionInner innerObject;

    private final com.azure.resourcemanager.hybriddatamanager.HybridDataManager serviceManager;

    public String name() {
        return this.innerModel().name();
    }

    public String id() {
        return this.innerModel().id();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String dataSourceId() {
        return this.innerModel().dataSourceId();
    }

    public String dataSinkId() {
        return this.innerModel().dataSinkId();
    }

    public List<Schedule> schedules() {
        List<Schedule> inner = this.innerModel().schedules();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public State state() {
        return this.innerModel().state();
    }

    public OffsetDateTime lastModifiedTime() {
        return this.innerModel().lastModifiedTime();
    }

    public RunLocation runLocation() {
        return this.innerModel().runLocation();
    }

    public UserConfirmation userConfirmation() {
        return this.innerModel().userConfirmation();
    }

    public Object dataServiceInput() {
        return this.innerModel().dataServiceInput();
    }

    public List<CustomerSecret> customerSecrets() {
        List<CustomerSecret> inner = this.innerModel().customerSecrets();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public JobDefinitionInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.hybriddatamanager.HybridDataManager manager() {
        return this.serviceManager;
    }

    private String dataServiceName;

    private String jobDefinitionName;

    private String resourceGroupName;

    private String dataManagerName;

    public JobDefinitionImpl withExistingDataService(
        String dataServiceName, String resourceGroupName, String dataManagerName) {
        this.dataServiceName = dataServiceName;
        this.resourceGroupName = resourceGroupName;
        this.dataManagerName = dataManagerName;
        return this;
    }

    public JobDefinition create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getJobDefinitions()
                .createOrUpdate(
                    dataServiceName,
                    jobDefinitionName,
                    resourceGroupName,
                    dataManagerName,
                    this.innerModel(),
                    Context.NONE);
        return this;
    }

    public JobDefinition create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getJobDefinitions()
                .createOrUpdate(
                    dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, this.innerModel(), context);
        return this;
    }

    JobDefinitionImpl(String name, com.azure.resourcemanager.hybriddatamanager.HybridDataManager serviceManager) {
        this.innerObject = new JobDefinitionInner();
        this.serviceManager = serviceManager;
        this.jobDefinitionName = name;
    }

    public JobDefinitionImpl update() {
        return this;
    }

    public JobDefinition apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getJobDefinitions()
                .createOrUpdate(
                    dataServiceName,
                    jobDefinitionName,
                    resourceGroupName,
                    dataManagerName,
                    this.innerModel(),
                    Context.NONE);
        return this;
    }

    public JobDefinition apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getJobDefinitions()
                .createOrUpdate(
                    dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, this.innerModel(), context);
        return this;
    }

    JobDefinitionImpl(
        JobDefinitionInner innerObject, com.azure.resourcemanager.hybriddatamanager.HybridDataManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.dataServiceName = Utils.getValueFromIdByName(innerObject.id(), "dataServices");
        this.jobDefinitionName = Utils.getValueFromIdByName(innerObject.id(), "jobDefinitions");
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.dataManagerName = Utils.getValueFromIdByName(innerObject.id(), "dataManagers");
    }

    public JobDefinition refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getJobDefinitions()
                .getWithResponse(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, Context.NONE)
                .getValue();
        return this;
    }

    public JobDefinition refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getJobDefinitions()
                .getWithResponse(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, context)
                .getValue();
        return this;
    }

    public void run(RunParameters runParameters) {
        serviceManager
            .jobDefinitions()
            .run(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, runParameters);
    }

    public void run(RunParameters runParameters, Context context) {
        serviceManager
            .jobDefinitions()
            .run(dataServiceName, jobDefinitionName, resourceGroupName, dataManagerName, runParameters, context);
    }

    public JobDefinitionImpl withDataSourceId(String dataSourceId) {
        this.innerModel().withDataSourceId(dataSourceId);
        return this;
    }

    public JobDefinitionImpl withDataSinkId(String dataSinkId) {
        this.innerModel().withDataSinkId(dataSinkId);
        return this;
    }

    public JobDefinitionImpl withState(State state) {
        this.innerModel().withState(state);
        return this;
    }

    public JobDefinitionImpl withSchedules(List<Schedule> schedules) {
        this.innerModel().withSchedules(schedules);
        return this;
    }

    public JobDefinitionImpl withLastModifiedTime(OffsetDateTime lastModifiedTime) {
        this.innerModel().withLastModifiedTime(lastModifiedTime);
        return this;
    }

    public JobDefinitionImpl withRunLocation(RunLocation runLocation) {
        this.innerModel().withRunLocation(runLocation);
        return this;
    }

    public JobDefinitionImpl withUserConfirmation(UserConfirmation userConfirmation) {
        this.innerModel().withUserConfirmation(userConfirmation);
        return this;
    }

    public JobDefinitionImpl withDataServiceInput(Object dataServiceInput) {
        this.innerModel().withDataServiceInput(dataServiceInput);
        return this;
    }

    public JobDefinitionImpl withCustomerSecrets(List<CustomerSecret> customerSecrets) {
        this.innerModel().withCustomerSecrets(customerSecrets);
        return this;
    }
}
