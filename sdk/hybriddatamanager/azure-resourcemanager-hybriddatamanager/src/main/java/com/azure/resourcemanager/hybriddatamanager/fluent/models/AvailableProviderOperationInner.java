// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybriddatamanager.models.AvailableProviderOperationDisplay;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Class represents provider operation. */
@Fluent
public final class AvailableProviderOperationInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AvailableProviderOperationInner.class);

    /*
     * Gets or Sets Name of the operations
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /*
     * Gets or sets Display information
     * Contains the localized display information for this particular
     * operation/action
     */
    @JsonProperty(value = "display")
    private AvailableProviderOperationDisplay display;

    /*
     * Gets or sets Origin
     * The intended executor of the operation; governs the display of the
     * operation in the RBAC UX and the audit logs UX.
     * Default value is “user,system”
     */
    @JsonProperty(value = "origin")
    private String origin;

    /*
     * Gets or sets Properties
     * Reserved for future use
     */
    @JsonProperty(value = "properties")
    private Object properties;

    /**
     * Get the name property: Gets or Sets Name of the operations.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Gets or Sets Name of the operations.
     *
     * @param name the name value to set.
     * @return the AvailableProviderOperationInner object itself.
     */
    public AvailableProviderOperationInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the display property: Gets or sets Display information Contains the localized display information for this
     * particular operation/action.
     *
     * @return the display value.
     */
    public AvailableProviderOperationDisplay display() {
        return this.display;
    }

    /**
     * Set the display property: Gets or sets Display information Contains the localized display information for this
     * particular operation/action.
     *
     * @param display the display value to set.
     * @return the AvailableProviderOperationInner object itself.
     */
    public AvailableProviderOperationInner withDisplay(AvailableProviderOperationDisplay display) {
        this.display = display;
        return this;
    }

    /**
     * Get the origin property: Gets or sets Origin The intended executor of the operation; governs the display of the
     * operation in the RBAC UX and the audit logs UX. Default value is “user,system”.
     *
     * @return the origin value.
     */
    public String origin() {
        return this.origin;
    }

    /**
     * Set the origin property: Gets or sets Origin The intended executor of the operation; governs the display of the
     * operation in the RBAC UX and the audit logs UX. Default value is “user,system”.
     *
     * @param origin the origin value to set.
     * @return the AvailableProviderOperationInner object itself.
     */
    public AvailableProviderOperationInner withOrigin(String origin) {
        this.origin = origin;
        return this;
    }

    /**
     * Get the properties property: Gets or sets Properties Reserved for future use.
     *
     * @return the properties value.
     */
    public Object properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Gets or sets Properties Reserved for future use.
     *
     * @param properties the properties value to set.
     * @return the AvailableProviderOperationInner object itself.
     */
    public AvailableProviderOperationInner withProperties(Object properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property name in model AvailableProviderOperationInner"));
        }
        if (display() != null) {
            display().validate();
        }
    }
}
