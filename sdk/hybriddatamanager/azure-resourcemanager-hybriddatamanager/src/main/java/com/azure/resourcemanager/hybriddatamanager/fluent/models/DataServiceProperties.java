// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybriddatamanager.models.State;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Data Service properties. */
@Fluent
public final class DataServiceProperties {
    /*
     * State of the data service.
     */
    @JsonProperty(value = "state", required = true)
    private State state;

    /*
     * Supported data store types which can be used as a sink.
     */
    @JsonProperty(value = "supportedDataSinkTypes")
    private List<String> supportedDataSinkTypes;

    /*
     * Supported data store types which can be used as a source.
     */
    @JsonProperty(value = "supportedDataSourceTypes")
    private List<String> supportedDataSourceTypes;

    /**
     * Get the state property: State of the data service.
     *
     * @return the state value.
     */
    public State state() {
        return this.state;
    }

    /**
     * Set the state property: State of the data service.
     *
     * @param state the state value to set.
     * @return the DataServiceProperties object itself.
     */
    public DataServiceProperties withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Get the supportedDataSinkTypes property: Supported data store types which can be used as a sink.
     *
     * @return the supportedDataSinkTypes value.
     */
    public List<String> supportedDataSinkTypes() {
        return this.supportedDataSinkTypes;
    }

    /**
     * Set the supportedDataSinkTypes property: Supported data store types which can be used as a sink.
     *
     * @param supportedDataSinkTypes the supportedDataSinkTypes value to set.
     * @return the DataServiceProperties object itself.
     */
    public DataServiceProperties withSupportedDataSinkTypes(List<String> supportedDataSinkTypes) {
        this.supportedDataSinkTypes = supportedDataSinkTypes;
        return this;
    }

    /**
     * Get the supportedDataSourceTypes property: Supported data store types which can be used as a source.
     *
     * @return the supportedDataSourceTypes value.
     */
    public List<String> supportedDataSourceTypes() {
        return this.supportedDataSourceTypes;
    }

    /**
     * Set the supportedDataSourceTypes property: Supported data store types which can be used as a source.
     *
     * @param supportedDataSourceTypes the supportedDataSourceTypes value to set.
     * @return the DataServiceProperties object itself.
     */
    public DataServiceProperties withSupportedDataSourceTypes(List<String> supportedDataSourceTypes) {
        this.supportedDataSourceTypes = supportedDataSourceTypes;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (state() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property state in model DataServiceProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataServiceProperties.class);
}
