// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybriddatamanager.models.ErrorDetails;
import com.azure.resourcemanager.hybriddatamanager.models.JobStages;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Job details. */
@Fluent
public final class JobDetailsInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(JobDetailsInner.class);

    /*
     * List of stages that ran in the job
     */
    @JsonProperty(value = "jobStages")
    private List<JobStages> jobStages;

    /*
     * JobDefinition at the time of the run
     */
    @JsonProperty(value = "jobDefinition")
    private JobDefinitionInner jobDefinition;

    /*
     * Error details for failure. This is optional.
     */
    @JsonProperty(value = "errorDetails")
    private List<ErrorDetails> errorDetails;

    /*
     * Item Details Link to download files or see details
     */
    @JsonProperty(value = "itemDetailsLink")
    private String itemDetailsLink;

    /**
     * Get the jobStages property: List of stages that ran in the job.
     *
     * @return the jobStages value.
     */
    public List<JobStages> jobStages() {
        return this.jobStages;
    }

    /**
     * Set the jobStages property: List of stages that ran in the job.
     *
     * @param jobStages the jobStages value to set.
     * @return the JobDetailsInner object itself.
     */
    public JobDetailsInner withJobStages(List<JobStages> jobStages) {
        this.jobStages = jobStages;
        return this;
    }

    /**
     * Get the jobDefinition property: JobDefinition at the time of the run.
     *
     * @return the jobDefinition value.
     */
    public JobDefinitionInner jobDefinition() {
        return this.jobDefinition;
    }

    /**
     * Set the jobDefinition property: JobDefinition at the time of the run.
     *
     * @param jobDefinition the jobDefinition value to set.
     * @return the JobDetailsInner object itself.
     */
    public JobDetailsInner withJobDefinition(JobDefinitionInner jobDefinition) {
        this.jobDefinition = jobDefinition;
        return this;
    }

    /**
     * Get the errorDetails property: Error details for failure. This is optional.
     *
     * @return the errorDetails value.
     */
    public List<ErrorDetails> errorDetails() {
        return this.errorDetails;
    }

    /**
     * Set the errorDetails property: Error details for failure. This is optional.
     *
     * @param errorDetails the errorDetails value to set.
     * @return the JobDetailsInner object itself.
     */
    public JobDetailsInner withErrorDetails(List<ErrorDetails> errorDetails) {
        this.errorDetails = errorDetails;
        return this;
    }

    /**
     * Get the itemDetailsLink property: Item Details Link to download files or see details.
     *
     * @return the itemDetailsLink value.
     */
    public String itemDetailsLink() {
        return this.itemDetailsLink;
    }

    /**
     * Set the itemDetailsLink property: Item Details Link to download files or see details.
     *
     * @param itemDetailsLink the itemDetailsLink value to set.
     * @return the JobDetailsInner object itself.
     */
    public JobDetailsInner withItemDetailsLink(String itemDetailsLink) {
        this.itemDetailsLink = itemDetailsLink;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (jobStages() != null) {
            jobStages().forEach(e -> e.validate());
        }
        if (jobDefinition() != null) {
            jobDefinition().validate();
        }
        if (errorDetails() != null) {
            errorDetails().forEach(e -> e.validate());
        }
    }
}
