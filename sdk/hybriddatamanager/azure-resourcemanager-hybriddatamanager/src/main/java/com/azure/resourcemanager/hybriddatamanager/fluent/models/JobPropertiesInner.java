// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybriddatamanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybriddatamanager.models.IsJobCancellable;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Job Properties. */
@Fluent
public final class JobPropertiesInner {
    /*
     * Describes whether the job is cancellable.
     */
    @JsonProperty(value = "isCancellable", required = true)
    private IsJobCancellable isCancellable;

    /*
     * Number of bytes processed by the job as of now.
     */
    @JsonProperty(value = "bytesProcessed")
    private Long bytesProcessed;

    /*
     * Number of items processed by the job as of now
     */
    @JsonProperty(value = "itemsProcessed")
    private Long itemsProcessed;

    /*
     * Number of bytes to be processed by the job in total.
     */
    @JsonProperty(value = "totalBytesToProcess")
    private Long totalBytesToProcess;

    /*
     * Number of items to be processed by the job in total
     */
    @JsonProperty(value = "totalItemsToProcess")
    private Long totalItemsToProcess;

    /*
     * Details of a job run. This field will only be sent for expand details
     * filter.
     */
    @JsonProperty(value = "details")
    private JobDetailsInner details;

    /*
     * Name of the data source on which the job was triggered.
     */
    @JsonProperty(value = "dataSourceName")
    private String dataSourceName;

    /*
     * Name of the data sink on which the job was triggered.
     */
    @JsonProperty(value = "dataSinkName")
    private String dataSinkName;

    /**
     * Get the isCancellable property: Describes whether the job is cancellable.
     *
     * @return the isCancellable value.
     */
    public IsJobCancellable isCancellable() {
        return this.isCancellable;
    }

    /**
     * Set the isCancellable property: Describes whether the job is cancellable.
     *
     * @param isCancellable the isCancellable value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withIsCancellable(IsJobCancellable isCancellable) {
        this.isCancellable = isCancellable;
        return this;
    }

    /**
     * Get the bytesProcessed property: Number of bytes processed by the job as of now.
     *
     * @return the bytesProcessed value.
     */
    public Long bytesProcessed() {
        return this.bytesProcessed;
    }

    /**
     * Set the bytesProcessed property: Number of bytes processed by the job as of now.
     *
     * @param bytesProcessed the bytesProcessed value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withBytesProcessed(Long bytesProcessed) {
        this.bytesProcessed = bytesProcessed;
        return this;
    }

    /**
     * Get the itemsProcessed property: Number of items processed by the job as of now.
     *
     * @return the itemsProcessed value.
     */
    public Long itemsProcessed() {
        return this.itemsProcessed;
    }

    /**
     * Set the itemsProcessed property: Number of items processed by the job as of now.
     *
     * @param itemsProcessed the itemsProcessed value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withItemsProcessed(Long itemsProcessed) {
        this.itemsProcessed = itemsProcessed;
        return this;
    }

    /**
     * Get the totalBytesToProcess property: Number of bytes to be processed by the job in total.
     *
     * @return the totalBytesToProcess value.
     */
    public Long totalBytesToProcess() {
        return this.totalBytesToProcess;
    }

    /**
     * Set the totalBytesToProcess property: Number of bytes to be processed by the job in total.
     *
     * @param totalBytesToProcess the totalBytesToProcess value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withTotalBytesToProcess(Long totalBytesToProcess) {
        this.totalBytesToProcess = totalBytesToProcess;
        return this;
    }

    /**
     * Get the totalItemsToProcess property: Number of items to be processed by the job in total.
     *
     * @return the totalItemsToProcess value.
     */
    public Long totalItemsToProcess() {
        return this.totalItemsToProcess;
    }

    /**
     * Set the totalItemsToProcess property: Number of items to be processed by the job in total.
     *
     * @param totalItemsToProcess the totalItemsToProcess value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withTotalItemsToProcess(Long totalItemsToProcess) {
        this.totalItemsToProcess = totalItemsToProcess;
        return this;
    }

    /**
     * Get the details property: Details of a job run. This field will only be sent for expand details filter.
     *
     * @return the details value.
     */
    public JobDetailsInner details() {
        return this.details;
    }

    /**
     * Set the details property: Details of a job run. This field will only be sent for expand details filter.
     *
     * @param details the details value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withDetails(JobDetailsInner details) {
        this.details = details;
        return this;
    }

    /**
     * Get the dataSourceName property: Name of the data source on which the job was triggered.
     *
     * @return the dataSourceName value.
     */
    public String dataSourceName() {
        return this.dataSourceName;
    }

    /**
     * Set the dataSourceName property: Name of the data source on which the job was triggered.
     *
     * @param dataSourceName the dataSourceName value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withDataSourceName(String dataSourceName) {
        this.dataSourceName = dataSourceName;
        return this;
    }

    /**
     * Get the dataSinkName property: Name of the data sink on which the job was triggered.
     *
     * @return the dataSinkName value.
     */
    public String dataSinkName() {
        return this.dataSinkName;
    }

    /**
     * Set the dataSinkName property: Name of the data sink on which the job was triggered.
     *
     * @param dataSinkName the dataSinkName value to set.
     * @return the JobPropertiesInner object itself.
     */
    public JobPropertiesInner withDataSinkName(String dataSinkName) {
        this.dataSinkName = dataSinkName;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (isCancellable() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property isCancellable in model JobPropertiesInner"));
        }
        if (details() != null) {
            details().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JobPropertiesInner.class);
}
