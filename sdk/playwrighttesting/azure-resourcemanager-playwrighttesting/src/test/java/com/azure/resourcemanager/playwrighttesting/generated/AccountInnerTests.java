// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.playwrighttesting.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.playwrighttesting.fluent.models.AccountInner;
import com.azure.resourcemanager.playwrighttesting.models.EnablementStatus;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AccountInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AccountInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"dashboardUri\":\"o\",\"regionalAffinity\":\"Enabled\",\"scalableExecution\":\"Disabled\",\"reporting\":\"Disabled\",\"provisioningState\":\"Canceled\"},\"location\":\"mqnjaqw\",\"tags\":{\"gjvw\":\"sprozvcput\",\"dvpjhulsuuvmk\":\"fdatsc\",\"jdpvwryo\":\"ozkrwfndiodjpslw\"},\"id\":\"psoacctazakljl\",\"name\":\"hbcryffdfdosyge\",\"type\":\"paojakhmsbzjh\"}")
                .toObject(AccountInner.class);
        Assertions.assertEquals("mqnjaqw", model.location());
        Assertions.assertEquals("sprozvcput", model.tags().get("gjvw"));
        Assertions.assertEquals(EnablementStatus.ENABLED, model.regionalAffinity());
        Assertions.assertEquals(EnablementStatus.DISABLED, model.scalableExecution());
        Assertions.assertEquals(EnablementStatus.DISABLED, model.reporting());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AccountInner model =
            new AccountInner()
                .withLocation("mqnjaqw")
                .withTags(mapOf("gjvw", "sprozvcput", "dvpjhulsuuvmk", "fdatsc", "jdpvwryo", "ozkrwfndiodjpslw"))
                .withRegionalAffinity(EnablementStatus.ENABLED)
                .withScalableExecution(EnablementStatus.DISABLED)
                .withReporting(EnablementStatus.DISABLED);
        model = BinaryData.fromObject(model).toObject(AccountInner.class);
        Assertions.assertEquals("mqnjaqw", model.location());
        Assertions.assertEquals("sprozvcput", model.tags().get("gjvw"));
        Assertions.assertEquals(EnablementStatus.ENABLED, model.regionalAffinity());
        Assertions.assertEquals(EnablementStatus.DISABLED, model.scalableExecution());
        Assertions.assertEquals(EnablementStatus.DISABLED, model.reporting());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
