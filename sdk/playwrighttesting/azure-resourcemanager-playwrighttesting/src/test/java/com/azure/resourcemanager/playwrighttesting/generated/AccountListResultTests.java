// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.playwrighttesting.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.playwrighttesting.fluent.models.AccountInner;
import com.azure.resourcemanager.playwrighttesting.models.AccountListResult;
import com.azure.resourcemanager.playwrighttesting.models.EnablementStatus;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AccountListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AccountListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"dashboardUri\":\"ithxqhabifpi\",\"regionalAffinity\":\"Enabled\",\"scalableExecution\":\"Enabled\",\"reporting\":\"Enabled\",\"provisioningState\":\"Failed\"},\"location\":\"pqxu\",\"tags\":{\"n\":\"y\"},\"id\":\"wby\",\"name\":\"rkxvdum\",\"type\":\"grtfwvu\"}],\"nextLink\":\"gaudcc\"}")
                .toObject(AccountListResult.class);
        Assertions.assertEquals("pqxu", model.value().get(0).location());
        Assertions.assertEquals("y", model.value().get(0).tags().get("n"));
        Assertions.assertEquals(EnablementStatus.ENABLED, model.value().get(0).regionalAffinity());
        Assertions.assertEquals(EnablementStatus.ENABLED, model.value().get(0).scalableExecution());
        Assertions.assertEquals(EnablementStatus.ENABLED, model.value().get(0).reporting());
        Assertions.assertEquals("gaudcc", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AccountListResult model =
            new AccountListResult()
                .withValue(
                    Arrays
                        .asList(
                            new AccountInner()
                                .withLocation("pqxu")
                                .withTags(mapOf("n", "y"))
                                .withRegionalAffinity(EnablementStatus.ENABLED)
                                .withScalableExecution(EnablementStatus.ENABLED)
                                .withReporting(EnablementStatus.ENABLED)))
                .withNextLink("gaudcc");
        model = BinaryData.fromObject(model).toObject(AccountListResult.class);
        Assertions.assertEquals("pqxu", model.value().get(0).location());
        Assertions.assertEquals("y", model.value().get(0).tags().get("n"));
        Assertions.assertEquals(EnablementStatus.ENABLED, model.value().get(0).regionalAffinity());
        Assertions.assertEquals(EnablementStatus.ENABLED, model.value().get(0).scalableExecution());
        Assertions.assertEquals(EnablementStatus.ENABLED, model.value().get(0).reporting());
        Assertions.assertEquals("gaudcc", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
