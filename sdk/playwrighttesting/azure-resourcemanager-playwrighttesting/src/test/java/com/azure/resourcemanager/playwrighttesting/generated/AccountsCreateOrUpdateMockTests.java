// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.playwrighttesting.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.playwrighttesting.PlaywrightTestingManager;
import com.azure.resourcemanager.playwrighttesting.models.Account;
import com.azure.resourcemanager.playwrighttesting.models.AccountProperties;
import com.azure.resourcemanager.playwrighttesting.models.EnablementStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AccountsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"dashboardUri\":\"nrosfqpte\",\"regionalAffinity\":\"Disabled\",\"scalableExecution\":\"Disabled\",\"reporting\":\"Enabled\",\"localAuth\":\"Disabled\",\"provisioningState\":\"Succeeded\"},\"location\":\"z\",\"tags\":{\"rsoodqxhcrmnoh\":\"vswjdk\",\"kwh\":\"t\",\"gr\":\"soifiyipjxsqw\"},\"id\":\"bznorcjxvsnby\",\"name\":\"qabnmoc\",\"type\":\"cyshurzafbljjgp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PlaywrightTestingManager manager = PlaywrightTestingManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Account response = manager.accounts()
            .define("nguitnwuizgazxu")
            .withRegion("uht")
            .withExistingResourceGroup("zw")
            .withTags(mapOf("opvkmijcm", "isdkfthwxmnteiw", "uf", "xdcu"))
            .withProperties(new AccountProperties().withRegionalAffinity(EnablementStatus.DISABLED)
                .withScalableExecution(EnablementStatus.ENABLED)
                .withReporting(EnablementStatus.DISABLED)
                .withLocalAuth(EnablementStatus.ENABLED))
            .create();

        Assertions.assertEquals("z", response.location());
        Assertions.assertEquals("vswjdk", response.tags().get("rsoodqxhcrmnoh"));
        Assertions.assertEquals(EnablementStatus.DISABLED, response.properties().regionalAffinity());
        Assertions.assertEquals(EnablementStatus.DISABLED, response.properties().scalableExecution());
        Assertions.assertEquals(EnablementStatus.ENABLED, response.properties().reporting());
        Assertions.assertEquals(EnablementStatus.DISABLED, response.properties().localAuth());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
