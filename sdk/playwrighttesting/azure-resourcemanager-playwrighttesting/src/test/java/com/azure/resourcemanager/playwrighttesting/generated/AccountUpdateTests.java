// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.playwrighttesting.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.playwrighttesting.models.AccountUpdate;
import com.azure.resourcemanager.playwrighttesting.models.AccountUpdateProperties;
import com.azure.resourcemanager.playwrighttesting.models.EnablementStatus;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AccountUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AccountUpdate model = BinaryData.fromString(
            "{\"tags\":{\"dcc\":\"jgrtfwvukxga\"},\"properties\":{\"regionalAffinity\":\"Enabled\",\"scalableExecution\":\"Disabled\",\"reporting\":\"Enabled\",\"localAuth\":\"Enabled\"}}")
            .toObject(AccountUpdate.class);
        Assertions.assertEquals("jgrtfwvukxga", model.tags().get("dcc"));
        Assertions.assertEquals(EnablementStatus.ENABLED, model.properties().regionalAffinity());
        Assertions.assertEquals(EnablementStatus.DISABLED, model.properties().scalableExecution());
        Assertions.assertEquals(EnablementStatus.ENABLED, model.properties().reporting());
        Assertions.assertEquals(EnablementStatus.ENABLED, model.properties().localAuth());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AccountUpdate model = new AccountUpdate().withTags(mapOf("dcc", "jgrtfwvukxga"))
            .withProperties(new AccountUpdateProperties().withRegionalAffinity(EnablementStatus.ENABLED)
                .withScalableExecution(EnablementStatus.DISABLED)
                .withReporting(EnablementStatus.ENABLED)
                .withLocalAuth(EnablementStatus.ENABLED));
        model = BinaryData.fromObject(model).toObject(AccountUpdate.class);
        Assertions.assertEquals("jgrtfwvukxga", model.tags().get("dcc"));
        Assertions.assertEquals(EnablementStatus.ENABLED, model.properties().regionalAffinity());
        Assertions.assertEquals(EnablementStatus.DISABLED, model.properties().scalableExecution());
        Assertions.assertEquals(EnablementStatus.ENABLED, model.properties().reporting());
        Assertions.assertEquals(EnablementStatus.ENABLED, model.properties().localAuth());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
