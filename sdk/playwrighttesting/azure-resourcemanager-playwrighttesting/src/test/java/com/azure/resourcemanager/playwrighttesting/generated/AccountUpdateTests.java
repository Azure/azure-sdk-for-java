// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.playwrighttesting.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.playwrighttesting.models.AccountUpdate;
import com.azure.resourcemanager.playwrighttesting.models.EnablementStatus;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AccountUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AccountUpdate model =
            BinaryData
                .fromString(
                    "{\"tags\":{\"wrwclxxwrljd\":\"ntnbybkzg\",\"kwt\":\"uskcqvkocrcj\",\"ssainqpjwnzll\":\"hxbnjbiksqrg\"},\"properties\":{\"regionalAffinity\":\"Disabled\",\"scalableExecution\":\"Disabled\",\"reporting\":\"Disabled\"}}")
                .toObject(AccountUpdate.class);
        Assertions.assertEquals("ntnbybkzg", model.tags().get("wrwclxxwrljd"));
        Assertions.assertEquals(EnablementStatus.DISABLED, model.regionalAffinity());
        Assertions.assertEquals(EnablementStatus.DISABLED, model.scalableExecution());
        Assertions.assertEquals(EnablementStatus.DISABLED, model.reporting());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AccountUpdate model =
            new AccountUpdate()
                .withTags(mapOf("wrwclxxwrljd", "ntnbybkzg", "kwt", "uskcqvkocrcj", "ssainqpjwnzll", "hxbnjbiksqrg"))
                .withRegionalAffinity(EnablementStatus.DISABLED)
                .withScalableExecution(EnablementStatus.DISABLED)
                .withReporting(EnablementStatus.DISABLED);
        model = BinaryData.fromObject(model).toObject(AccountUpdate.class);
        Assertions.assertEquals("ntnbybkzg", model.tags().get("wrwclxxwrljd"));
        Assertions.assertEquals(EnablementStatus.DISABLED, model.regionalAffinity());
        Assertions.assertEquals(EnablementStatus.DISABLED, model.scalableExecution());
        Assertions.assertEquals(EnablementStatus.DISABLED, model.reporting());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
