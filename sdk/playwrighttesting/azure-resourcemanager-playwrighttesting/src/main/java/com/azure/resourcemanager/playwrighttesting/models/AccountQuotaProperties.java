// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.playwrighttesting.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Playwright service account quota resource properties.
 */
@Immutable
public final class AccountQuotaProperties implements JsonSerializable<AccountQuotaProperties> {
    /*
     * The Playwright service account quota resource free-trial properties.
     */
    private AccountFreeTrialProperties freeTrial;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of AccountQuotaProperties class.
     */
    private AccountQuotaProperties() {
    }

    /**
     * Get the freeTrial property: The Playwright service account quota resource free-trial properties.
     * 
     * @return the freeTrial value.
     */
    public AccountFreeTrialProperties freeTrial() {
        return this.freeTrial;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (freeTrial() != null) {
            freeTrial().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("freeTrial", this.freeTrial);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccountQuotaProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccountQuotaProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccountQuotaProperties.
     */
    public static AccountQuotaProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccountQuotaProperties deserializedAccountQuotaProperties = new AccountQuotaProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("freeTrial".equals(fieldName)) {
                    deserializedAccountQuotaProperties.freeTrial = AccountFreeTrialProperties.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAccountQuotaProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccountQuotaProperties;
        });
    }
}
