// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.playwrighttesting.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Account resource properties.
 */
@Fluent
public final class AccountProperties implements JsonSerializable<AccountProperties> {
    /*
     * The Playwright testing dashboard URI for the account resource.
     */
    private String dashboardUri;

    /*
     * This property sets the connection region for Playwright client workers to cloud-hosted browsers. If enabled,
     * workers connect to browsers in the closest Azure region, ensuring lower latency. If disabled, workers connect to
     * browsers in the Azure region in which the workspace was initially created.
     */
    private EnablementStatus regionalAffinity;

    /*
     * When enabled, Playwright client workers can connect to cloud-hosted browsers. This can increase the number of
     * parallel workers for a test run, significantly minimizing test completion durations.
     */
    private EnablementStatus scalableExecution;

    /*
     * When enabled, this feature allows the workspace to upload and display test results, including artifacts like
     * traces and screenshots, in the Playwright portal. This enables faster and more efficient troubleshooting.
     */
    private EnablementStatus reporting;

    /*
     * When enabled, this feature allows the workspace to use local auth(through access key) for authentication of test
     * runs.
     */
    private EnablementStatus localAuth;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of AccountProperties class.
     */
    public AccountProperties() {
    }

    /**
     * Get the dashboardUri property: The Playwright testing dashboard URI for the account resource.
     * 
     * @return the dashboardUri value.
     */
    public String dashboardUri() {
        return this.dashboardUri;
    }

    /**
     * Get the regionalAffinity property: This property sets the connection region for Playwright client workers to
     * cloud-hosted browsers. If enabled, workers connect to browsers in the closest Azure region, ensuring lower
     * latency. If disabled, workers connect to browsers in the Azure region in which the workspace was initially
     * created.
     * 
     * @return the regionalAffinity value.
     */
    public EnablementStatus regionalAffinity() {
        return this.regionalAffinity;
    }

    /**
     * Set the regionalAffinity property: This property sets the connection region for Playwright client workers to
     * cloud-hosted browsers. If enabled, workers connect to browsers in the closest Azure region, ensuring lower
     * latency. If disabled, workers connect to browsers in the Azure region in which the workspace was initially
     * created.
     * 
     * @param regionalAffinity the regionalAffinity value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withRegionalAffinity(EnablementStatus regionalAffinity) {
        this.regionalAffinity = regionalAffinity;
        return this;
    }

    /**
     * Get the scalableExecution property: When enabled, Playwright client workers can connect to cloud-hosted browsers.
     * This can increase the number of parallel workers for a test run, significantly minimizing test completion
     * durations.
     * 
     * @return the scalableExecution value.
     */
    public EnablementStatus scalableExecution() {
        return this.scalableExecution;
    }

    /**
     * Set the scalableExecution property: When enabled, Playwright client workers can connect to cloud-hosted browsers.
     * This can increase the number of parallel workers for a test run, significantly minimizing test completion
     * durations.
     * 
     * @param scalableExecution the scalableExecution value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withScalableExecution(EnablementStatus scalableExecution) {
        this.scalableExecution = scalableExecution;
        return this;
    }

    /**
     * Get the reporting property: When enabled, this feature allows the workspace to upload and display test results,
     * including artifacts like traces and screenshots, in the Playwright portal. This enables faster and more efficient
     * troubleshooting.
     * 
     * @return the reporting value.
     */
    public EnablementStatus reporting() {
        return this.reporting;
    }

    /**
     * Set the reporting property: When enabled, this feature allows the workspace to upload and display test results,
     * including artifacts like traces and screenshots, in the Playwright portal. This enables faster and more efficient
     * troubleshooting.
     * 
     * @param reporting the reporting value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withReporting(EnablementStatus reporting) {
        this.reporting = reporting;
        return this;
    }

    /**
     * Get the localAuth property: When enabled, this feature allows the workspace to use local auth(through access key)
     * for authentication of test runs.
     * 
     * @return the localAuth value.
     */
    public EnablementStatus localAuth() {
        return this.localAuth;
    }

    /**
     * Set the localAuth property: When enabled, this feature allows the workspace to use local auth(through access key)
     * for authentication of test runs.
     * 
     * @param localAuth the localAuth value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withLocalAuth(EnablementStatus localAuth) {
        this.localAuth = localAuth;
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("regionalAffinity",
            this.regionalAffinity == null ? null : this.regionalAffinity.toString());
        jsonWriter.writeStringField("scalableExecution",
            this.scalableExecution == null ? null : this.scalableExecution.toString());
        jsonWriter.writeStringField("reporting", this.reporting == null ? null : this.reporting.toString());
        jsonWriter.writeStringField("localAuth", this.localAuth == null ? null : this.localAuth.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccountProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccountProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccountProperties.
     */
    public static AccountProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccountProperties deserializedAccountProperties = new AccountProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dashboardUri".equals(fieldName)) {
                    deserializedAccountProperties.dashboardUri = reader.getString();
                } else if ("regionalAffinity".equals(fieldName)) {
                    deserializedAccountProperties.regionalAffinity = EnablementStatus.fromString(reader.getString());
                } else if ("scalableExecution".equals(fieldName)) {
                    deserializedAccountProperties.scalableExecution = EnablementStatus.fromString(reader.getString());
                } else if ("reporting".equals(fieldName)) {
                    deserializedAccountProperties.reporting = EnablementStatus.fromString(reader.getString());
                } else if ("localAuth".equals(fieldName)) {
                    deserializedAccountProperties.localAuth = EnablementStatus.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAccountProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccountProperties;
        });
    }
}
