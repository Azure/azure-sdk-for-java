// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.playwrighttesting.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of Quotas.
 */
public interface Quotas {
    /**
     * List quotas for a given subscription Id.
     * 
     * @param location The location of quota in ARM Normalized format like eastus, southeastasia etc.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Quota list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Quota> listBySubscription(String location);

    /**
     * List quotas for a given subscription Id.
     * 
     * @param location The location of quota in ARM Normalized format like eastus, southeastasia etc.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Quota list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Quota> listBySubscription(String location, Context context);

    /**
     * Get quota by name.
     * 
     * @param location The location of quota in ARM Normalized format like eastus, southeastasia etc.
     * @param name The quota name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota by name along with {@link Response}.
     */
    Response<Quota> getWithResponse(String location, QuotaNames name, Context context);

    /**
     * Get quota by name.
     * 
     * @param location The location of quota in ARM Normalized format like eastus, southeastasia etc.
     * @param name The quota name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota by name.
     */
    Quota get(String location, QuotaNames name);
}
