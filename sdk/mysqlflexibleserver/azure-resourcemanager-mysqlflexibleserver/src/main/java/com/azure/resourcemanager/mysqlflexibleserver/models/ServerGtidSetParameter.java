// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Server Gtid set parameters.
 */
@Fluent
public final class ServerGtidSetParameter implements JsonSerializable<ServerGtidSetParameter> {
    /*
     * The Gtid set of server.
     */
    private String gtidSet;

    /**
     * Creates an instance of ServerGtidSetParameter class.
     */
    public ServerGtidSetParameter() {
    }

    /**
     * Get the gtidSet property: The Gtid set of server.
     * 
     * @return the gtidSet value.
     */
    public String gtidSet() {
        return this.gtidSet;
    }

    /**
     * Set the gtidSet property: The Gtid set of server.
     * 
     * @param gtidSet the gtidSet value to set.
     * @return the ServerGtidSetParameter object itself.
     */
    public ServerGtidSetParameter withGtidSet(String gtidSet) {
        this.gtidSet = gtidSet;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("gtidSet", this.gtidSet);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerGtidSetParameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerGtidSetParameter if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerGtidSetParameter.
     */
    public static ServerGtidSetParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerGtidSetParameter deserializedServerGtidSetParameter = new ServerGtidSetParameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("gtidSet".equals(fieldName)) {
                    deserializedServerGtidSetParameter.gtidSet = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerGtidSetParameter;
        });
    }
}
