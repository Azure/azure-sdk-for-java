// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents ValidateBackup API Response.
 */
@Immutable
public final class ValidateBackupResponseInner implements JsonSerializable<ValidateBackupResponseInner> {
    /*
     * The response properties of a pre backup operation.
     */
    private ValidateBackupResponseProperties innerProperties;

    /**
     * Creates an instance of ValidateBackupResponseInner class.
     */
    private ValidateBackupResponseInner() {
    }

    /**
     * Get the innerProperties property: The response properties of a pre backup operation.
     * 
     * @return the innerProperties value.
     */
    private ValidateBackupResponseProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the numberOfContainers property: Estimated no of storage containers required for resource data to be backed
     * up.
     * 
     * @return the numberOfContainers value.
     */
    public Integer numberOfContainers() {
        return this.innerProperties() == null ? null : this.innerProperties().numberOfContainers();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ValidateBackupResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ValidateBackupResponseInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ValidateBackupResponseInner.
     */
    public static ValidateBackupResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ValidateBackupResponseInner deserializedValidateBackupResponseInner = new ValidateBackupResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedValidateBackupResponseInner.innerProperties
                        = ValidateBackupResponseProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedValidateBackupResponseInner;
        });
    }
}
