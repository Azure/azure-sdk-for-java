// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.mysqlflexibleserver.fluent.LongRunningBackupOperationsClient;
import com.azure.resourcemanager.mysqlflexibleserver.fluent.models.ServerBackupV2Inner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in LongRunningBackupOperationsClient.
 */
public final class LongRunningBackupOperationsClientImpl implements LongRunningBackupOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final LongRunningBackupOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final MySqlManagementClientImpl client;

    /**
     * Initializes an instance of LongRunningBackupOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    LongRunningBackupOperationsClientImpl(MySqlManagementClientImpl client) {
        this.service = RestProxy.create(LongRunningBackupOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MySqlManagementClientLongRunningBackupOperations to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MySqlManagementClientLongRunningBackupOperations")
    public interface LongRunningBackupOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/flexibleServers/{serverName}/backupsV2/{backupName}")
        @ExpectedResponses({ 200, 201, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("serverName") String serverName,
            @PathParam("backupName") String backupName, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ServerBackupV2Inner parameters, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/flexibleServers/{serverName}/backupsV2/{backupName}")
        @ExpectedResponses({ 200, 201, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("serverName") String serverName,
            @PathParam("backupName") String backupName, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ServerBackupV2Inner parameters, Context context);
    }

    /**
     * Create backup for a given server with specified backup name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param backupName The name of the backup.
     * @param parameters The required parameters for creating and exporting backup of the given server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server backup properties along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName, String serverName,
        String backupName, ServerBackupV2Inner parameters) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.create(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, serverName, backupName, accept, parameters, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create backup for a given server with specified backup name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param backupName The name of the backup.
     * @param parameters The required parameters for creating and exporting backup of the given server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server backup properties along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createWithResponse(String resourceGroupName, String serverName, String backupName,
        ServerBackupV2Inner parameters) {
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, serverName, backupName, accept, parameters,
            Context.NONE);
    }

    /**
     * Create backup for a given server with specified backup name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param backupName The name of the backup.
     * @param parameters The required parameters for creating and exporting backup of the given server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server backup properties along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createWithResponse(String resourceGroupName, String serverName, String backupName,
        ServerBackupV2Inner parameters, Context context) {
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, serverName, backupName, accept, parameters, context);
    }

    /**
     * Create backup for a given server with specified backup name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param backupName The name of the backup.
     * @param parameters The required parameters for creating and exporting backup of the given server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of server backup properties.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ServerBackupV2Inner>, ServerBackupV2Inner> beginCreateAsync(String resourceGroupName,
        String serverName, String backupName, ServerBackupV2Inner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createWithResponseAsync(resourceGroupName, serverName, backupName, parameters);
        return this.client.<ServerBackupV2Inner, ServerBackupV2Inner>getLroResult(mono, this.client.getHttpPipeline(),
            ServerBackupV2Inner.class, ServerBackupV2Inner.class, this.client.getContext());
    }

    /**
     * Create backup for a given server with specified backup name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param backupName The name of the backup.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of server backup properties.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ServerBackupV2Inner>, ServerBackupV2Inner> beginCreateAsync(String resourceGroupName,
        String serverName, String backupName) {
        final ServerBackupV2Inner parameters = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = createWithResponseAsync(resourceGroupName, serverName, backupName, parameters);
        return this.client.<ServerBackupV2Inner, ServerBackupV2Inner>getLroResult(mono, this.client.getHttpPipeline(),
            ServerBackupV2Inner.class, ServerBackupV2Inner.class, this.client.getContext());
    }

    /**
     * Create backup for a given server with specified backup name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param backupName The name of the backup.
     * @param parameters The required parameters for creating and exporting backup of the given server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of server backup properties.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ServerBackupV2Inner>, ServerBackupV2Inner> beginCreate(String resourceGroupName,
        String serverName, String backupName, ServerBackupV2Inner parameters) {
        Response<BinaryData> response = createWithResponse(resourceGroupName, serverName, backupName, parameters);
        return this.client.<ServerBackupV2Inner, ServerBackupV2Inner>getLroResult(response, ServerBackupV2Inner.class,
            ServerBackupV2Inner.class, Context.NONE);
    }

    /**
     * Create backup for a given server with specified backup name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param backupName The name of the backup.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of server backup properties.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ServerBackupV2Inner>, ServerBackupV2Inner> beginCreate(String resourceGroupName,
        String serverName, String backupName) {
        final ServerBackupV2Inner parameters = null;
        Response<BinaryData> response = createWithResponse(resourceGroupName, serverName, backupName, parameters);
        return this.client.<ServerBackupV2Inner, ServerBackupV2Inner>getLroResult(response, ServerBackupV2Inner.class,
            ServerBackupV2Inner.class, Context.NONE);
    }

    /**
     * Create backup for a given server with specified backup name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param backupName The name of the backup.
     * @param parameters The required parameters for creating and exporting backup of the given server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of server backup properties.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ServerBackupV2Inner>, ServerBackupV2Inner> beginCreate(String resourceGroupName,
        String serverName, String backupName, ServerBackupV2Inner parameters, Context context) {
        Response<BinaryData> response
            = createWithResponse(resourceGroupName, serverName, backupName, parameters, context);
        return this.client.<ServerBackupV2Inner, ServerBackupV2Inner>getLroResult(response, ServerBackupV2Inner.class,
            ServerBackupV2Inner.class, context);
    }

    /**
     * Create backup for a given server with specified backup name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param backupName The name of the backup.
     * @param parameters The required parameters for creating and exporting backup of the given server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server backup properties on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ServerBackupV2Inner> createAsync(String resourceGroupName, String serverName, String backupName,
        ServerBackupV2Inner parameters) {
        return beginCreateAsync(resourceGroupName, serverName, backupName, parameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create backup for a given server with specified backup name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param backupName The name of the backup.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server backup properties on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ServerBackupV2Inner> createAsync(String resourceGroupName, String serverName, String backupName) {
        final ServerBackupV2Inner parameters = null;
        return beginCreateAsync(resourceGroupName, serverName, backupName, parameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create backup for a given server with specified backup name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param backupName The name of the backup.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server backup properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ServerBackupV2Inner create(String resourceGroupName, String serverName, String backupName) {
        final ServerBackupV2Inner parameters = null;
        return beginCreate(resourceGroupName, serverName, backupName, parameters).getFinalResult();
    }

    /**
     * Create backup for a given server with specified backup name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param backupName The name of the backup.
     * @param parameters The required parameters for creating and exporting backup of the given server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server backup properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ServerBackupV2Inner create(String resourceGroupName, String serverName, String backupName,
        ServerBackupV2Inner parameters, Context context) {
        return beginCreate(resourceGroupName, serverName, backupName, parameters, context).getFinalResult();
    }
}
