// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.mysqlflexibleserver.fluent.CheckVirtualNetworkSubnetUsagesClient;
import com.azure.resourcemanager.mysqlflexibleserver.fluent.models.VirtualNetworkSubnetUsageResultInner;
import com.azure.resourcemanager.mysqlflexibleserver.models.VirtualNetworkSubnetUsageParameter;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in CheckVirtualNetworkSubnetUsagesClient.
 */
public final class CheckVirtualNetworkSubnetUsagesClientImpl implements CheckVirtualNetworkSubnetUsagesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final CheckVirtualNetworkSubnetUsagesService service;

    /**
     * The service client containing this operation class.
     */
    private final MySqlManagementClientImpl client;

    /**
     * Initializes an instance of CheckVirtualNetworkSubnetUsagesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    CheckVirtualNetworkSubnetUsagesClientImpl(MySqlManagementClientImpl client) {
        this.service = RestProxy.create(CheckVirtualNetworkSubnetUsagesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MySqlManagementClientCheckVirtualNetworkSubnetUsages to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MySqlManagementClientCheckVirtualNetworkSubnetUsages")
    public interface CheckVirtualNetworkSubnetUsagesService {
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.DBforMySQL/locations/{locationName}/checkVirtualNetworkSubnetUsage")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<VirtualNetworkSubnetUsageResultInner>> execute(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("locationName") String locationName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") VirtualNetworkSubnetUsageParameter parameters, Context context);

        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.DBforMySQL/locations/{locationName}/checkVirtualNetworkSubnetUsage")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<VirtualNetworkSubnetUsageResultInner> executeSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("locationName") String locationName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") VirtualNetworkSubnetUsageParameter parameters, Context context);
    }

    /**
     * Get virtual network subnet usage for a given vNet resource id.
     * 
     * @param locationName The name of the location.
     * @param parameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual network subnet usage for a given vNet resource id along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VirtualNetworkSubnetUsageResultInner>> executeWithResponseAsync(String locationName,
        VirtualNetworkSubnetUsageParameter parameters) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.execute(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), locationName, contentType, accept, parameters, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get virtual network subnet usage for a given vNet resource id.
     * 
     * @param locationName The name of the location.
     * @param parameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual network subnet usage for a given vNet resource id on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<VirtualNetworkSubnetUsageResultInner> executeAsync(String locationName,
        VirtualNetworkSubnetUsageParameter parameters) {
        return executeWithResponseAsync(locationName, parameters).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get virtual network subnet usage for a given vNet resource id.
     * 
     * @param locationName The name of the location.
     * @param parameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual network subnet usage for a given vNet resource id along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<VirtualNetworkSubnetUsageResultInner> executeWithResponse(String locationName,
        VirtualNetworkSubnetUsageParameter parameters, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.executeSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), locationName, contentType, accept, parameters, context);
    }

    /**
     * Get virtual network subnet usage for a given vNet resource id.
     * 
     * @param locationName The name of the location.
     * @param parameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual network subnet usage for a given vNet resource id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VirtualNetworkSubnetUsageResultInner execute(String locationName,
        VirtualNetworkSubnetUsageParameter parameters) {
        return executeWithResponse(locationName, parameters, Context.NONE).getValue();
    }
}
