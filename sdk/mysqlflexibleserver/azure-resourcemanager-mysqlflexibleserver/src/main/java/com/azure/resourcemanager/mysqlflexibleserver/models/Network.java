// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Network related properties of a server.
 */
@Fluent
public final class Network implements JsonSerializable<Network> {
    /*
     * Whether or not public network access is allowed for this server. Value is 'Disabled' when server has VNet
     * integration.
     */
    private EnableStatusEnum publicNetworkAccess;

    /*
     * Delegated subnet resource id used to setup vnet for a server.
     */
    private String delegatedSubnetResourceId;

    /*
     * Private DNS zone resource id.
     */
    private String privateDnsZoneResourceId;

    /**
     * Creates an instance of Network class.
     */
    public Network() {
    }

    /**
     * Get the publicNetworkAccess property: Whether or not public network access is allowed for this server. Value is
     * 'Disabled' when server has VNet integration.
     * 
     * @return the publicNetworkAccess value.
     */
    public EnableStatusEnum publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Get the delegatedSubnetResourceId property: Delegated subnet resource id used to setup vnet for a server.
     * 
     * @return the delegatedSubnetResourceId value.
     */
    public String delegatedSubnetResourceId() {
        return this.delegatedSubnetResourceId;
    }

    /**
     * Set the delegatedSubnetResourceId property: Delegated subnet resource id used to setup vnet for a server.
     * 
     * @param delegatedSubnetResourceId the delegatedSubnetResourceId value to set.
     * @return the Network object itself.
     */
    public Network withDelegatedSubnetResourceId(String delegatedSubnetResourceId) {
        this.delegatedSubnetResourceId = delegatedSubnetResourceId;
        return this;
    }

    /**
     * Get the privateDnsZoneResourceId property: Private DNS zone resource id.
     * 
     * @return the privateDnsZoneResourceId value.
     */
    public String privateDnsZoneResourceId() {
        return this.privateDnsZoneResourceId;
    }

    /**
     * Set the privateDnsZoneResourceId property: Private DNS zone resource id.
     * 
     * @param privateDnsZoneResourceId the privateDnsZoneResourceId value to set.
     * @return the Network object itself.
     */
    public Network withPrivateDnsZoneResourceId(String privateDnsZoneResourceId) {
        this.privateDnsZoneResourceId = privateDnsZoneResourceId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("delegatedSubnetResourceId", this.delegatedSubnetResourceId);
        jsonWriter.writeStringField("privateDnsZoneResourceId", this.privateDnsZoneResourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Network from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Network if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Network.
     */
    public static Network fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Network deserializedNetwork = new Network();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedNetwork.publicNetworkAccess = EnableStatusEnum.fromString(reader.getString());
                } else if ("delegatedSubnetResourceId".equals(fieldName)) {
                    deserializedNetwork.delegatedSubnetResourceId = reader.getString();
                } else if ("privateDnsZoneResourceId".equals(fieldName)) {
                    deserializedNetwork.privateDnsZoneResourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetwork;
        });
    }
}
