// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mysqlflexibleserver.models.OperationStatusResult;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

/**
 * Represents Operation Results API Response.
 */
@Immutable
public final class OperationStatusExtendedResultInner extends OperationStatusResult {
    /*
     * The extended properties of Operation Results
     */
    private Map<String, Object> properties;

    /*
     * Fully qualified ID of the resource against which the original async operation was started.
     */
    private String resourceId;

    /*
     * If present, details of the operation error.
     */
    private ManagementError error;

    /*
     * The operations list.
     */
    private List<OperationStatusResult> operations;

    /*
     * The end time of the operation.
     */
    private OffsetDateTime endTime;

    /*
     * The start time of the operation.
     */
    private OffsetDateTime startTime;

    /*
     * Percent of the operation that is complete.
     */
    private Double percentComplete;

    /*
     * Operation status.
     */
    private String status;

    /*
     * Name of the async operation.
     */
    private String name;

    /*
     * Fully qualified ID for the async operation.
     */
    private String id;

    /**
     * Creates an instance of OperationStatusExtendedResultInner class.
     */
    private OperationStatusExtendedResultInner() {
    }

    /**
     * Get the properties property: The extended properties of Operation Results.
     * 
     * @return the properties value.
     */
    public Map<String, Object> properties() {
        return this.properties;
    }

    /**
     * Get the resourceId property: Fully qualified ID of the resource against which the original async operation was
     * started.
     * 
     * @return the resourceId value.
     */
    @Override
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Get the error property: If present, details of the operation error.
     * 
     * @return the error value.
     */
    @Override
    public ManagementError error() {
        return this.error;
    }

    /**
     * Get the operations property: The operations list.
     * 
     * @return the operations value.
     */
    @Override
    public List<OperationStatusResult> operations() {
        return this.operations;
    }

    /**
     * Get the endTime property: The end time of the operation.
     * 
     * @return the endTime value.
     */
    @Override
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the startTime property: The start time of the operation.
     * 
     * @return the startTime value.
     */
    @Override
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the percentComplete property: Percent of the operation that is complete.
     * 
     * @return the percentComplete value.
     */
    @Override
    public Double percentComplete() {
        return this.percentComplete;
    }

    /**
     * Get the status property: Operation status.
     * 
     * @return the status value.
     */
    @Override
    public String status() {
        return this.status;
    }

    /**
     * Get the name property: Name of the async operation.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified ID for the async operation.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", status());
        jsonWriter.writeStringField("id", id());
        jsonWriter.writeStringField("name", name());
        jsonWriter.writeNumberField("percentComplete", percentComplete());
        jsonWriter.writeStringField("startTime",
            startTime() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(startTime()));
        jsonWriter.writeStringField("endTime",
            endTime() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(endTime()));
        jsonWriter.writeArrayField("operations", operations(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("error", error());
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperationStatusExtendedResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperationStatusExtendedResultInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OperationStatusExtendedResultInner.
     */
    public static OperationStatusExtendedResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperationStatusExtendedResultInner deserializedOperationStatusExtendedResultInner
                = new OperationStatusExtendedResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedOperationStatusExtendedResultInner.status = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedOperationStatusExtendedResultInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedOperationStatusExtendedResultInner.name = reader.getString();
                } else if ("percentComplete".equals(fieldName)) {
                    deserializedOperationStatusExtendedResultInner.percentComplete
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("startTime".equals(fieldName)) {
                    deserializedOperationStatusExtendedResultInner.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedOperationStatusExtendedResultInner.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("operations".equals(fieldName)) {
                    List<OperationStatusResult> operations
                        = reader.readArray(reader1 -> OperationStatusResult.fromJson(reader1));
                    deserializedOperationStatusExtendedResultInner.operations = operations;
                } else if ("error".equals(fieldName)) {
                    deserializedOperationStatusExtendedResultInner.error = ManagementError.fromJson(reader);
                } else if ("resourceId".equals(fieldName)) {
                    deserializedOperationStatusExtendedResultInner.resourceId = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    Map<String, Object> properties = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedOperationStatusExtendedResultInner.properties = properties;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOperationStatusExtendedResultInner;
        });
    }
}
