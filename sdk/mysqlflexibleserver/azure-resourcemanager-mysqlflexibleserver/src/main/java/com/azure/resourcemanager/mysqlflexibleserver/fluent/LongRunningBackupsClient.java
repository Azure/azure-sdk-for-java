// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.mysqlflexibleserver.fluent.models.ServerBackupV2Inner;

/**
 * An instance of this class provides access to all the operations defined in LongRunningBackupsClient.
 */
public interface LongRunningBackupsClient {
    /**
     * Create backup for a given server with specified backup name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param backupName The name of the backup.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of server backup properties.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ServerBackupV2Inner>, ServerBackupV2Inner> beginCreate(String resourceGroupName,
        String serverName, String backupName);

    /**
     * Create backup for a given server with specified backup name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param backupName The name of the backup.
     * @param parameters The required parameters for creating and exporting backup of the given server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of server backup properties.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ServerBackupV2Inner>, ServerBackupV2Inner> beginCreate(String resourceGroupName,
        String serverName, String backupName, ServerBackupV2Inner parameters, Context context);

    /**
     * Create backup for a given server with specified backup name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param backupName The name of the backup.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server backup properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ServerBackupV2Inner create(String resourceGroupName, String serverName, String backupName);

    /**
     * Create backup for a given server with specified backup name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param backupName The name of the backup.
     * @param parameters The required parameters for creating and exporting backup of the given server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server backup properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ServerBackupV2Inner create(String resourceGroupName, String serverName, String backupName,
        ServerBackupV2Inner parameters, Context context);
}
