// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Server version capabilities.
 */
@Immutable
public final class FeatureProperty implements JsonSerializable<FeatureProperty> {
    /*
     * feature name
     */
    private String featureName;

    /*
     * feature value
     */
    private String featureValue;

    /**
     * Creates an instance of FeatureProperty class.
     */
    private FeatureProperty() {
    }

    /**
     * Get the featureName property: feature name.
     * 
     * @return the featureName value.
     */
    public String featureName() {
        return this.featureName;
    }

    /**
     * Get the featureValue property: feature value.
     * 
     * @return the featureValue value.
     */
    public String featureValue() {
        return this.featureValue;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FeatureProperty from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FeatureProperty if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FeatureProperty.
     */
    public static FeatureProperty fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FeatureProperty deserializedFeatureProperty = new FeatureProperty();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("featureName".equals(fieldName)) {
                    deserializedFeatureProperty.featureName = reader.getString();
                } else if ("featureValue".equals(fieldName)) {
                    deserializedFeatureProperty.featureValue = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFeatureProperty;
        });
    }
}
