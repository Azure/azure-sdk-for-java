// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Server edition capabilities.
 */
@Immutable
public final class ServerEditionCapability implements JsonSerializable<ServerEditionCapability> {
    /*
     * Server edition name
     */
    private String name;

    /*
     * A list of supported storage editions
     */
    private List<StorageEditionCapability> supportedStorageEditions;

    /*
     * A list of supported server versions.
     */
    private List<ServerVersionCapability> supportedServerVersions;

    /**
     * Creates an instance of ServerEditionCapability class.
     */
    public ServerEditionCapability() {
    }

    /**
     * Get the name property: Server edition name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the supportedStorageEditions property: A list of supported storage editions.
     * 
     * @return the supportedStorageEditions value.
     */
    public List<StorageEditionCapability> supportedStorageEditions() {
        return this.supportedStorageEditions;
    }

    /**
     * Get the supportedServerVersions property: A list of supported server versions.
     * 
     * @return the supportedServerVersions value.
     */
    public List<ServerVersionCapability> supportedServerVersions() {
        return this.supportedServerVersions;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (supportedStorageEditions() != null) {
            supportedStorageEditions().forEach(e -> e.validate());
        }
        if (supportedServerVersions() != null) {
            supportedServerVersions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerEditionCapability from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerEditionCapability if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerEditionCapability.
     */
    public static ServerEditionCapability fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerEditionCapability deserializedServerEditionCapability = new ServerEditionCapability();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedServerEditionCapability.name = reader.getString();
                } else if ("supportedStorageEditions".equals(fieldName)) {
                    List<StorageEditionCapability> supportedStorageEditions
                        = reader.readArray(reader1 -> StorageEditionCapability.fromJson(reader1));
                    deserializedServerEditionCapability.supportedStorageEditions = supportedStorageEditions;
                } else if ("supportedServerVersions".equals(fieldName)) {
                    List<ServerVersionCapability> supportedServerVersions
                        = reader.readArray(reader1 -> ServerVersionCapability.fromJson(reader1));
                    deserializedServerEditionCapability.supportedServerVersions = supportedServerVersions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerEditionCapability;
        });
    }
}
