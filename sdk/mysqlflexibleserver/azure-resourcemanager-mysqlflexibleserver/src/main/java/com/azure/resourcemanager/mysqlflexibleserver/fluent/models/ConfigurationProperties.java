// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.mysqlflexibleserver.models.ConfigurationSource;
import com.azure.resourcemanager.mysqlflexibleserver.models.IsConfigPendingRestart;
import com.azure.resourcemanager.mysqlflexibleserver.models.IsDynamicConfig;
import com.azure.resourcemanager.mysqlflexibleserver.models.IsReadOnly;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The properties of a configuration. */
@Fluent
public final class ConfigurationProperties {
    /*
     * Value of the configuration.
     */
    @JsonProperty(value = "value")
    private String value;

    /*
     * Current value of the configuration.
     */
    @JsonProperty(value = "currentValue")
    private String currentValue;

    /*
     * Description of the configuration.
     */
    @JsonProperty(value = "description", access = JsonProperty.Access.WRITE_ONLY)
    private String description;

    /*
     * The link used to get the document from community or Azure site.
     */
    @JsonProperty(value = "documentationLink", access = JsonProperty.Access.WRITE_ONLY)
    private String documentationLink;

    /*
     * Default value of the configuration.
     */
    @JsonProperty(value = "defaultValue", access = JsonProperty.Access.WRITE_ONLY)
    private String defaultValue;

    /*
     * Data type of the configuration.
     */
    @JsonProperty(value = "dataType", access = JsonProperty.Access.WRITE_ONLY)
    private String dataType;

    /*
     * Allowed values of the configuration.
     */
    @JsonProperty(value = "allowedValues", access = JsonProperty.Access.WRITE_ONLY)
    private String allowedValues;

    /*
     * Source of the configuration.
     */
    @JsonProperty(value = "source")
    private ConfigurationSource source;

    /*
     * If is the configuration read only.
     */
    @JsonProperty(value = "isReadOnly", access = JsonProperty.Access.WRITE_ONLY)
    private IsReadOnly isReadOnly;

    /*
     * If is the configuration pending restart or not.
     */
    @JsonProperty(value = "isConfigPendingRestart", access = JsonProperty.Access.WRITE_ONLY)
    private IsConfigPendingRestart isConfigPendingRestart;

    /*
     * If is the configuration dynamic.
     */
    @JsonProperty(value = "isDynamicConfig", access = JsonProperty.Access.WRITE_ONLY)
    private IsDynamicConfig isDynamicConfig;

    /** Creates an instance of ConfigurationProperties class. */
    public ConfigurationProperties() {
    }

    /**
     * Get the value property: Value of the configuration.
     *
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Set the value property: Value of the configuration.
     *
     * @param value the value value to set.
     * @return the ConfigurationProperties object itself.
     */
    public ConfigurationProperties withValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Get the currentValue property: Current value of the configuration.
     *
     * @return the currentValue value.
     */
    public String currentValue() {
        return this.currentValue;
    }

    /**
     * Set the currentValue property: Current value of the configuration.
     *
     * @param currentValue the currentValue value to set.
     * @return the ConfigurationProperties object itself.
     */
    public ConfigurationProperties withCurrentValue(String currentValue) {
        this.currentValue = currentValue;
        return this;
    }

    /**
     * Get the description property: Description of the configuration.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the documentationLink property: The link used to get the document from community or Azure site.
     *
     * @return the documentationLink value.
     */
    public String documentationLink() {
        return this.documentationLink;
    }

    /**
     * Get the defaultValue property: Default value of the configuration.
     *
     * @return the defaultValue value.
     */
    public String defaultValue() {
        return this.defaultValue;
    }

    /**
     * Get the dataType property: Data type of the configuration.
     *
     * @return the dataType value.
     */
    public String dataType() {
        return this.dataType;
    }

    /**
     * Get the allowedValues property: Allowed values of the configuration.
     *
     * @return the allowedValues value.
     */
    public String allowedValues() {
        return this.allowedValues;
    }

    /**
     * Get the source property: Source of the configuration.
     *
     * @return the source value.
     */
    public ConfigurationSource source() {
        return this.source;
    }

    /**
     * Set the source property: Source of the configuration.
     *
     * @param source the source value to set.
     * @return the ConfigurationProperties object itself.
     */
    public ConfigurationProperties withSource(ConfigurationSource source) {
        this.source = source;
        return this;
    }

    /**
     * Get the isReadOnly property: If is the configuration read only.
     *
     * @return the isReadOnly value.
     */
    public IsReadOnly isReadOnly() {
        return this.isReadOnly;
    }

    /**
     * Get the isConfigPendingRestart property: If is the configuration pending restart or not.
     *
     * @return the isConfigPendingRestart value.
     */
    public IsConfigPendingRestart isConfigPendingRestart() {
        return this.isConfigPendingRestart;
    }

    /**
     * Get the isDynamicConfig property: If is the configuration dynamic.
     *
     * @return the isDynamicConfig value.
     */
    public IsDynamicConfig isDynamicConfig() {
        return this.isDynamicConfig;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
