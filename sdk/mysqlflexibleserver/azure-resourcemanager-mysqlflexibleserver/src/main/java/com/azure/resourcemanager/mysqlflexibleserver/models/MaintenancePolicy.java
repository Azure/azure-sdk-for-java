// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Maintenance policy of a server.
 */
@Fluent
public final class MaintenancePolicy implements JsonSerializable<MaintenancePolicy> {
    /*
     * The patch strategy of this server
     */
    private PatchStrategy patchStrategy;

    /**
     * Creates an instance of MaintenancePolicy class.
     */
    public MaintenancePolicy() {
    }

    /**
     * Get the patchStrategy property: The patch strategy of this server.
     * 
     * @return the patchStrategy value.
     */
    public PatchStrategy patchStrategy() {
        return this.patchStrategy;
    }

    /**
     * Set the patchStrategy property: The patch strategy of this server.
     * 
     * @param patchStrategy the patchStrategy value to set.
     * @return the MaintenancePolicy object itself.
     */
    public MaintenancePolicy withPatchStrategy(PatchStrategy patchStrategy) {
        this.patchStrategy = patchStrategy;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("patchStrategy", this.patchStrategy == null ? null : this.patchStrategy.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MaintenancePolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MaintenancePolicy if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MaintenancePolicy.
     */
    public static MaintenancePolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MaintenancePolicy deserializedMaintenancePolicy = new MaintenancePolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("patchStrategy".equals(fieldName)) {
                    deserializedMaintenancePolicy.patchStrategy = PatchStrategy.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMaintenancePolicy;
        });
    }
}
