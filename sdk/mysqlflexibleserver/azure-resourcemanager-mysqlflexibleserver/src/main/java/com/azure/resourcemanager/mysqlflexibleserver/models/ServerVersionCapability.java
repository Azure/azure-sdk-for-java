// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Server version capabilities.
 */
@Immutable
public final class ServerVersionCapability implements JsonSerializable<ServerVersionCapability> {
    /*
     * server version
     */
    private String name;

    /*
     * A list of supported Skus
     */
    private List<SkuCapability> supportedSkus;

    /**
     * Creates an instance of ServerVersionCapability class.
     */
    public ServerVersionCapability() {
    }

    /**
     * Get the name property: server version.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the supportedSkus property: A list of supported Skus.
     * 
     * @return the supportedSkus value.
     */
    public List<SkuCapability> supportedSkus() {
        return this.supportedSkus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (supportedSkus() != null) {
            supportedSkus().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerVersionCapability from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerVersionCapability if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerVersionCapability.
     */
    public static ServerVersionCapability fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerVersionCapability deserializedServerVersionCapability = new ServerVersionCapability();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedServerVersionCapability.name = reader.getString();
                } else if ("supportedSkus".equals(fieldName)) {
                    List<SkuCapability> supportedSkus = reader.readArray(reader1 -> SkuCapability.fromJson(reader1));
                    deserializedServerVersionCapability.supportedSkus = supportedSkus;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerVersionCapability;
        });
    }
}
