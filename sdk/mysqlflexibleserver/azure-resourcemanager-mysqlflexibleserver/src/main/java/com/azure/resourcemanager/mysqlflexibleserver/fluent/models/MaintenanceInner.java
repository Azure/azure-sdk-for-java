// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mysqlflexibleserver.models.MaintenanceProvisioningState;
import com.azure.resourcemanager.mysqlflexibleserver.models.MaintenanceState;
import com.azure.resourcemanager.mysqlflexibleserver.models.MaintenanceType;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Represents a maintenance.
 */
@Fluent
public final class MaintenanceInner extends ProxyResource {
    /*
     * The properties of a maintenance
     */
    private MaintenanceProperties innerProperties = new MaintenanceProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of MaintenanceInner class.
     */
    public MaintenanceInner() {
    }

    /**
     * Get the innerProperties property: The properties of a maintenance.
     * 
     * @return the innerProperties value.
     */
    private MaintenanceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the maintenanceType property: A string defines maintenance type.
     * 
     * @return the maintenanceType value.
     */
    public MaintenanceType maintenanceType() {
        return this.innerProperties() == null ? null : this.innerProperties().maintenanceType();
    }

    /**
     * Get the maintenanceState property: A string describes the maintenance status.
     * 
     * @return the maintenanceState value.
     */
    public MaintenanceState maintenanceState() {
        return this.innerProperties() == null ? null : this.innerProperties().maintenanceState();
    }

    /**
     * Get the maintenanceStartTime property: The start time for a maintenance.
     * 
     * @return the maintenanceStartTime value.
     */
    public OffsetDateTime maintenanceStartTime() {
        return this.innerProperties() == null ? null : this.innerProperties().maintenanceStartTime();
    }

    /**
     * Set the maintenanceStartTime property: The start time for a maintenance.
     * 
     * @param maintenanceStartTime the maintenanceStartTime value to set.
     * @return the MaintenanceInner object itself.
     */
    public MaintenanceInner withMaintenanceStartTime(OffsetDateTime maintenanceStartTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MaintenanceProperties();
        }
        this.innerProperties().withMaintenanceStartTime(maintenanceStartTime);
        return this;
    }

    /**
     * Get the maintenanceEndTime property: The end time for a maintenance.
     * 
     * @return the maintenanceEndTime value.
     */
    public OffsetDateTime maintenanceEndTime() {
        return this.innerProperties() == null ? null : this.innerProperties().maintenanceEndTime();
    }

    /**
     * Get the maintenanceExecutionStartTime property: The start time for a maintenance execution.
     * 
     * @return the maintenanceExecutionStartTime value.
     */
    public OffsetDateTime maintenanceExecutionStartTime() {
        return this.innerProperties() == null ? null : this.innerProperties().maintenanceExecutionStartTime();
    }

    /**
     * Get the maintenanceExecutionEndTime property: The end time for a maintenance execution.
     * 
     * @return the maintenanceExecutionEndTime value.
     */
    public OffsetDateTime maintenanceExecutionEndTime() {
        return this.innerProperties() == null ? null : this.innerProperties().maintenanceExecutionEndTime();
    }

    /**
     * Get the maintenanceAvailableScheduleMinTime property: The min time the maintenance can be rescheduled.
     * 
     * @return the maintenanceAvailableScheduleMinTime value.
     */
    public OffsetDateTime maintenanceAvailableScheduleMinTime() {
        return this.innerProperties() == null ? null : this.innerProperties().maintenanceAvailableScheduleMinTime();
    }

    /**
     * Get the maintenanceAvailableScheduleMaxTime property: The max time the maintenance can be rescheduled.
     * 
     * @return the maintenanceAvailableScheduleMaxTime value.
     */
    public OffsetDateTime maintenanceAvailableScheduleMaxTime() {
        return this.innerProperties() == null ? null : this.innerProperties().maintenanceAvailableScheduleMaxTime();
    }

    /**
     * Get the maintenanceTitle property: The maintenance title.
     * 
     * @return the maintenanceTitle value.
     */
    public String maintenanceTitle() {
        return this.innerProperties() == null ? null : this.innerProperties().maintenanceTitle();
    }

    /**
     * Get the maintenanceDescription property: The maintenance description.
     * 
     * @return the maintenanceDescription value.
     */
    public String maintenanceDescription() {
        return this.innerProperties() == null ? null : this.innerProperties().maintenanceDescription();
    }

    /**
     * Get the provisioningState property: Provisioning state of the Maintenance.
     * 
     * @return the provisioningState value.
     */
    public MaintenanceProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model MaintenanceInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MaintenanceInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MaintenanceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MaintenanceInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MaintenanceInner.
     */
    public static MaintenanceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MaintenanceInner deserializedMaintenanceInner = new MaintenanceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMaintenanceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedMaintenanceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedMaintenanceInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedMaintenanceInner.innerProperties = MaintenanceProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedMaintenanceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMaintenanceInner;
        });
    }
}
