// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mysqlflexibleserver.models.Backup;
import com.azure.resourcemanager.mysqlflexibleserver.models.DataEncryption;
import com.azure.resourcemanager.mysqlflexibleserver.models.HighAvailability;
import com.azure.resourcemanager.mysqlflexibleserver.models.MaintenanceWindow;
import com.azure.resourcemanager.mysqlflexibleserver.models.ReplicationRole;
import com.azure.resourcemanager.mysqlflexibleserver.models.Storage;
import java.io.IOException;

/**
 * The properties that can be updated for a server.
 */
@Fluent
public final class ServerPropertiesForUpdate implements JsonSerializable<ServerPropertiesForUpdate> {
    /*
     * The password of the administrator login.
     */
    private String administratorLoginPassword;

    /*
     * Storage related properties of a server.
     */
    private Storage storage;

    /*
     * Backup related properties of a server.
     */
    private Backup backup;

    /*
     * High availability related properties of a server.
     */
    private HighAvailability highAvailability;

    /*
     * Maintenance window of a server.
     */
    private MaintenanceWindow maintenanceWindow;

    /*
     * The replication role of the server.
     */
    private ReplicationRole replicationRole;

    /*
     * The Data Encryption for CMK.
     */
    private DataEncryption dataEncryption;

    /**
     * Creates an instance of ServerPropertiesForUpdate class.
     */
    public ServerPropertiesForUpdate() {
    }

    /**
     * Get the administratorLoginPassword property: The password of the administrator login.
     * 
     * @return the administratorLoginPassword value.
     */
    public String administratorLoginPassword() {
        return this.administratorLoginPassword;
    }

    /**
     * Set the administratorLoginPassword property: The password of the administrator login.
     * 
     * @param administratorLoginPassword the administratorLoginPassword value to set.
     * @return the ServerPropertiesForUpdate object itself.
     */
    public ServerPropertiesForUpdate withAdministratorLoginPassword(String administratorLoginPassword) {
        this.administratorLoginPassword = administratorLoginPassword;
        return this;
    }

    /**
     * Get the storage property: Storage related properties of a server.
     * 
     * @return the storage value.
     */
    public Storage storage() {
        return this.storage;
    }

    /**
     * Set the storage property: Storage related properties of a server.
     * 
     * @param storage the storage value to set.
     * @return the ServerPropertiesForUpdate object itself.
     */
    public ServerPropertiesForUpdate withStorage(Storage storage) {
        this.storage = storage;
        return this;
    }

    /**
     * Get the backup property: Backup related properties of a server.
     * 
     * @return the backup value.
     */
    public Backup backup() {
        return this.backup;
    }

    /**
     * Set the backup property: Backup related properties of a server.
     * 
     * @param backup the backup value to set.
     * @return the ServerPropertiesForUpdate object itself.
     */
    public ServerPropertiesForUpdate withBackup(Backup backup) {
        this.backup = backup;
        return this;
    }

    /**
     * Get the highAvailability property: High availability related properties of a server.
     * 
     * @return the highAvailability value.
     */
    public HighAvailability highAvailability() {
        return this.highAvailability;
    }

    /**
     * Set the highAvailability property: High availability related properties of a server.
     * 
     * @param highAvailability the highAvailability value to set.
     * @return the ServerPropertiesForUpdate object itself.
     */
    public ServerPropertiesForUpdate withHighAvailability(HighAvailability highAvailability) {
        this.highAvailability = highAvailability;
        return this;
    }

    /**
     * Get the maintenanceWindow property: Maintenance window of a server.
     * 
     * @return the maintenanceWindow value.
     */
    public MaintenanceWindow maintenanceWindow() {
        return this.maintenanceWindow;
    }

    /**
     * Set the maintenanceWindow property: Maintenance window of a server.
     * 
     * @param maintenanceWindow the maintenanceWindow value to set.
     * @return the ServerPropertiesForUpdate object itself.
     */
    public ServerPropertiesForUpdate withMaintenanceWindow(MaintenanceWindow maintenanceWindow) {
        this.maintenanceWindow = maintenanceWindow;
        return this;
    }

    /**
     * Get the replicationRole property: The replication role of the server.
     * 
     * @return the replicationRole value.
     */
    public ReplicationRole replicationRole() {
        return this.replicationRole;
    }

    /**
     * Set the replicationRole property: The replication role of the server.
     * 
     * @param replicationRole the replicationRole value to set.
     * @return the ServerPropertiesForUpdate object itself.
     */
    public ServerPropertiesForUpdate withReplicationRole(ReplicationRole replicationRole) {
        this.replicationRole = replicationRole;
        return this;
    }

    /**
     * Get the dataEncryption property: The Data Encryption for CMK.
     * 
     * @return the dataEncryption value.
     */
    public DataEncryption dataEncryption() {
        return this.dataEncryption;
    }

    /**
     * Set the dataEncryption property: The Data Encryption for CMK.
     * 
     * @param dataEncryption the dataEncryption value to set.
     * @return the ServerPropertiesForUpdate object itself.
     */
    public ServerPropertiesForUpdate withDataEncryption(DataEncryption dataEncryption) {
        this.dataEncryption = dataEncryption;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (storage() != null) {
            storage().validate();
        }
        if (backup() != null) {
            backup().validate();
        }
        if (highAvailability() != null) {
            highAvailability().validate();
        }
        if (maintenanceWindow() != null) {
            maintenanceWindow().validate();
        }
        if (dataEncryption() != null) {
            dataEncryption().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("administratorLoginPassword", this.administratorLoginPassword);
        jsonWriter.writeJsonField("storage", this.storage);
        jsonWriter.writeJsonField("backup", this.backup);
        jsonWriter.writeJsonField("highAvailability", this.highAvailability);
        jsonWriter.writeJsonField("maintenanceWindow", this.maintenanceWindow);
        jsonWriter.writeStringField("replicationRole",
            this.replicationRole == null ? null : this.replicationRole.toString());
        jsonWriter.writeJsonField("dataEncryption", this.dataEncryption);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerPropertiesForUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerPropertiesForUpdate if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerPropertiesForUpdate.
     */
    public static ServerPropertiesForUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerPropertiesForUpdate deserializedServerPropertiesForUpdate = new ServerPropertiesForUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("administratorLoginPassword".equals(fieldName)) {
                    deserializedServerPropertiesForUpdate.administratorLoginPassword = reader.getString();
                } else if ("storage".equals(fieldName)) {
                    deserializedServerPropertiesForUpdate.storage = Storage.fromJson(reader);
                } else if ("backup".equals(fieldName)) {
                    deserializedServerPropertiesForUpdate.backup = Backup.fromJson(reader);
                } else if ("highAvailability".equals(fieldName)) {
                    deserializedServerPropertiesForUpdate.highAvailability = HighAvailability.fromJson(reader);
                } else if ("maintenanceWindow".equals(fieldName)) {
                    deserializedServerPropertiesForUpdate.maintenanceWindow = MaintenanceWindow.fromJson(reader);
                } else if ("replicationRole".equals(fieldName)) {
                    deserializedServerPropertiesForUpdate.replicationRole
                        = ReplicationRole.fromString(reader.getString());
                } else if ("dataEncryption".equals(fieldName)) {
                    deserializedServerPropertiesForUpdate.dataEncryption = DataEncryption.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerPropertiesForUpdate;
        });
    }
}
