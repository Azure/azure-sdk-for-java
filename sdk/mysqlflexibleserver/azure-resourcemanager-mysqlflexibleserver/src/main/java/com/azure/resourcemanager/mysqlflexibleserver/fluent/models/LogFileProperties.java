// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The properties of a logFile.
 */
@Immutable
public final class LogFileProperties implements JsonSerializable<LogFileProperties> {
    /*
     * The size in kb of the logFile.
     */
    private Long sizeInKB;

    /*
     * Creation timestamp of the log file.
     */
    private OffsetDateTime createdTime;

    /*
     * Type of the log file.
     */
    private String type;

    /*
     * Last modified timestamp of the log file.
     */
    private OffsetDateTime lastModifiedTime;

    /*
     * The url to download the log file from.
     */
    private String url;

    /**
     * Creates an instance of LogFileProperties class.
     */
    private LogFileProperties() {
    }

    /**
     * Get the sizeInKB property: The size in kb of the logFile.
     * 
     * @return the sizeInKB value.
     */
    public Long sizeInKB() {
        return this.sizeInKB;
    }

    /**
     * Get the createdTime property: Creation timestamp of the log file.
     * 
     * @return the createdTime value.
     */
    public OffsetDateTime createdTime() {
        return this.createdTime;
    }

    /**
     * Get the type property: Type of the log file.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the lastModifiedTime property: Last modified timestamp of the log file.
     * 
     * @return the lastModifiedTime value.
     */
    public OffsetDateTime lastModifiedTime() {
        return this.lastModifiedTime;
    }

    /**
     * Get the url property: The url to download the log file from.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("sizeInKB", this.sizeInKB);
        jsonWriter.writeStringField("createdTime",
            this.createdTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdTime));
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("lastModifiedTime",
            this.lastModifiedTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastModifiedTime));
        jsonWriter.writeStringField("url", this.url);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LogFileProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LogFileProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LogFileProperties.
     */
    public static LogFileProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LogFileProperties deserializedLogFileProperties = new LogFileProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sizeInKB".equals(fieldName)) {
                    deserializedLogFileProperties.sizeInKB = reader.getNullable(JsonReader::getLong);
                } else if ("createdTime".equals(fieldName)) {
                    deserializedLogFileProperties.createdTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("type".equals(fieldName)) {
                    deserializedLogFileProperties.type = reader.getString();
                } else if ("lastModifiedTime".equals(fieldName)) {
                    deserializedLogFileProperties.lastModifiedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("url".equals(fieldName)) {
                    deserializedLogFileProperties.url = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLogFileProperties;
        });
    }
}
