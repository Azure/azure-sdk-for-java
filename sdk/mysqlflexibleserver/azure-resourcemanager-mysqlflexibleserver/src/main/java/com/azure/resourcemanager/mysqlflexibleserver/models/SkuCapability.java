// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Sku capability.
 */
@Immutable
public final class SkuCapability implements JsonSerializable<SkuCapability> {
    /*
     * vCore name
     */
    private String name;

    /*
     * supported vCores
     */
    private Long vCores;

    /*
     * supported IOPS
     */
    private Long supportedIops;

    /*
     * supported memory per vCore in MB
     */
    private Long supportedMemoryPerVCoreMB;

    /**
     * Creates an instance of SkuCapability class.
     */
    public SkuCapability() {
    }

    /**
     * Get the name property: vCore name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the vCores property: supported vCores.
     * 
     * @return the vCores value.
     */
    public Long vCores() {
        return this.vCores;
    }

    /**
     * Get the supportedIops property: supported IOPS.
     * 
     * @return the supportedIops value.
     */
    public Long supportedIops() {
        return this.supportedIops;
    }

    /**
     * Get the supportedMemoryPerVCoreMB property: supported memory per vCore in MB.
     * 
     * @return the supportedMemoryPerVCoreMB value.
     */
    public Long supportedMemoryPerVCoreMB() {
        return this.supportedMemoryPerVCoreMB;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SkuCapability from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SkuCapability if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SkuCapability.
     */
    public static SkuCapability fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SkuCapability deserializedSkuCapability = new SkuCapability();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedSkuCapability.name = reader.getString();
                } else if ("vCores".equals(fieldName)) {
                    deserializedSkuCapability.vCores = reader.getNullable(JsonReader::getLong);
                } else if ("supportedIops".equals(fieldName)) {
                    deserializedSkuCapability.supportedIops = reader.getNullable(JsonReader::getLong);
                } else if ("supportedMemoryPerVCoreMB".equals(fieldName)) {
                    deserializedSkuCapability.supportedMemoryPerVCoreMB = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSkuCapability;
        });
    }
}
