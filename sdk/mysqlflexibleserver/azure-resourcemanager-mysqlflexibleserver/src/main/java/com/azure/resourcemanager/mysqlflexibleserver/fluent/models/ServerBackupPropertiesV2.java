// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mysqlflexibleserver.models.BackupType;
import com.azure.resourcemanager.mysqlflexibleserver.models.ProvisioningState;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The properties of a server backup.
 */
@Fluent
public final class ServerBackupPropertiesV2 implements JsonSerializable<ServerBackupPropertiesV2> {
    /*
     * Backup name
     */
    private String backupNameV2;

    /*
     * The backupType property.
     */
    private BackupType backupType;

    /*
     * Backup completed time (ISO8601 format).
     */
    private OffsetDateTime completedTime;

    /*
     * Backup source
     */
    private String source;

    /*
     * The provisioning state of backup resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of ServerBackupPropertiesV2 class.
     */
    public ServerBackupPropertiesV2() {
    }

    /**
     * Get the backupNameV2 property: Backup name.
     * 
     * @return the backupNameV2 value.
     */
    public String backupNameV2() {
        return this.backupNameV2;
    }

    /**
     * Set the backupNameV2 property: Backup name.
     * 
     * @param backupNameV2 the backupNameV2 value to set.
     * @return the ServerBackupPropertiesV2 object itself.
     */
    public ServerBackupPropertiesV2 withBackupNameV2(String backupNameV2) {
        this.backupNameV2 = backupNameV2;
        return this;
    }

    /**
     * Get the backupType property: The backupType property.
     * 
     * @return the backupType value.
     */
    public BackupType backupType() {
        return this.backupType;
    }

    /**
     * Set the backupType property: The backupType property.
     * 
     * @param backupType the backupType value to set.
     * @return the ServerBackupPropertiesV2 object itself.
     */
    public ServerBackupPropertiesV2 withBackupType(BackupType backupType) {
        this.backupType = backupType;
        return this;
    }

    /**
     * Get the completedTime property: Backup completed time (ISO8601 format).
     * 
     * @return the completedTime value.
     */
    public OffsetDateTime completedTime() {
        return this.completedTime;
    }

    /**
     * Set the completedTime property: Backup completed time (ISO8601 format).
     * 
     * @param completedTime the completedTime value to set.
     * @return the ServerBackupPropertiesV2 object itself.
     */
    public ServerBackupPropertiesV2 withCompletedTime(OffsetDateTime completedTime) {
        this.completedTime = completedTime;
        return this;
    }

    /**
     * Get the source property: Backup source.
     * 
     * @return the source value.
     */
    public String source() {
        return this.source;
    }

    /**
     * Set the source property: Backup source.
     * 
     * @param source the source value to set.
     * @return the ServerBackupPropertiesV2 object itself.
     */
    public ServerBackupPropertiesV2 withSource(String source) {
        this.source = source;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of backup resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("backupNameV2", this.backupNameV2);
        jsonWriter.writeStringField("backupType", this.backupType == null ? null : this.backupType.toString());
        jsonWriter.writeStringField("completedTime",
            this.completedTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.completedTime));
        jsonWriter.writeStringField("source", this.source);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerBackupPropertiesV2 from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerBackupPropertiesV2 if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerBackupPropertiesV2.
     */
    public static ServerBackupPropertiesV2 fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerBackupPropertiesV2 deserializedServerBackupPropertiesV2 = new ServerBackupPropertiesV2();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("backupNameV2".equals(fieldName)) {
                    deserializedServerBackupPropertiesV2.backupNameV2 = reader.getString();
                } else if ("backupType".equals(fieldName)) {
                    deserializedServerBackupPropertiesV2.backupType = BackupType.fromString(reader.getString());
                } else if ("completedTime".equals(fieldName)) {
                    deserializedServerBackupPropertiesV2.completedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("source".equals(fieldName)) {
                    deserializedServerBackupPropertiesV2.source = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedServerBackupPropertiesV2.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerBackupPropertiesV2;
        });
    }
}
