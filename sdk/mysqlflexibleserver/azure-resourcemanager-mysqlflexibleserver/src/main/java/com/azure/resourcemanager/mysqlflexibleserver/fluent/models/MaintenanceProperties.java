// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mysqlflexibleserver.models.MaintenanceProvisioningState;
import com.azure.resourcemanager.mysqlflexibleserver.models.MaintenanceState;
import com.azure.resourcemanager.mysqlflexibleserver.models.MaintenanceType;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The properties of a maintenance resource.
 */
@Fluent
public final class MaintenanceProperties implements JsonSerializable<MaintenanceProperties> {
    /*
     * A string defines maintenance type.
     */
    private MaintenanceType maintenanceType;

    /*
     * A string describes the maintenance status
     */
    private MaintenanceState maintenanceState;

    /*
     * The start time for a maintenance.
     */
    private OffsetDateTime maintenanceStartTime;

    /*
     * The end time for a maintenance.
     */
    private OffsetDateTime maintenanceEndTime;

    /*
     * The start time for a maintenance execution.
     */
    private OffsetDateTime maintenanceExecutionStartTime;

    /*
     * The end time for a maintenance execution.
     */
    private OffsetDateTime maintenanceExecutionEndTime;

    /*
     * The min time the maintenance can be rescheduled.
     */
    private OffsetDateTime maintenanceAvailableScheduleMinTime;

    /*
     * The max time the maintenance can be rescheduled.
     */
    private OffsetDateTime maintenanceAvailableScheduleMaxTime;

    /*
     * The maintenance title.
     */
    private String maintenanceTitle;

    /*
     * The maintenance description.
     */
    private String maintenanceDescription;

    /*
     * Provisioning state of the Maintenance.
     */
    private MaintenanceProvisioningState provisioningState;

    /**
     * Creates an instance of MaintenanceProperties class.
     */
    public MaintenanceProperties() {
    }

    /**
     * Get the maintenanceType property: A string defines maintenance type.
     * 
     * @return the maintenanceType value.
     */
    public MaintenanceType maintenanceType() {
        return this.maintenanceType;
    }

    /**
     * Get the maintenanceState property: A string describes the maintenance status.
     * 
     * @return the maintenanceState value.
     */
    public MaintenanceState maintenanceState() {
        return this.maintenanceState;
    }

    /**
     * Get the maintenanceStartTime property: The start time for a maintenance.
     * 
     * @return the maintenanceStartTime value.
     */
    public OffsetDateTime maintenanceStartTime() {
        return this.maintenanceStartTime;
    }

    /**
     * Set the maintenanceStartTime property: The start time for a maintenance.
     * 
     * @param maintenanceStartTime the maintenanceStartTime value to set.
     * @return the MaintenanceProperties object itself.
     */
    public MaintenanceProperties withMaintenanceStartTime(OffsetDateTime maintenanceStartTime) {
        this.maintenanceStartTime = maintenanceStartTime;
        return this;
    }

    /**
     * Get the maintenanceEndTime property: The end time for a maintenance.
     * 
     * @return the maintenanceEndTime value.
     */
    public OffsetDateTime maintenanceEndTime() {
        return this.maintenanceEndTime;
    }

    /**
     * Get the maintenanceExecutionStartTime property: The start time for a maintenance execution.
     * 
     * @return the maintenanceExecutionStartTime value.
     */
    public OffsetDateTime maintenanceExecutionStartTime() {
        return this.maintenanceExecutionStartTime;
    }

    /**
     * Get the maintenanceExecutionEndTime property: The end time for a maintenance execution.
     * 
     * @return the maintenanceExecutionEndTime value.
     */
    public OffsetDateTime maintenanceExecutionEndTime() {
        return this.maintenanceExecutionEndTime;
    }

    /**
     * Get the maintenanceAvailableScheduleMinTime property: The min time the maintenance can be rescheduled.
     * 
     * @return the maintenanceAvailableScheduleMinTime value.
     */
    public OffsetDateTime maintenanceAvailableScheduleMinTime() {
        return this.maintenanceAvailableScheduleMinTime;
    }

    /**
     * Get the maintenanceAvailableScheduleMaxTime property: The max time the maintenance can be rescheduled.
     * 
     * @return the maintenanceAvailableScheduleMaxTime value.
     */
    public OffsetDateTime maintenanceAvailableScheduleMaxTime() {
        return this.maintenanceAvailableScheduleMaxTime;
    }

    /**
     * Get the maintenanceTitle property: The maintenance title.
     * 
     * @return the maintenanceTitle value.
     */
    public String maintenanceTitle() {
        return this.maintenanceTitle;
    }

    /**
     * Get the maintenanceDescription property: The maintenance description.
     * 
     * @return the maintenanceDescription value.
     */
    public String maintenanceDescription() {
        return this.maintenanceDescription;
    }

    /**
     * Get the provisioningState property: Provisioning state of the Maintenance.
     * 
     * @return the provisioningState value.
     */
    public MaintenanceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("maintenanceStartTime",
            this.maintenanceStartTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.maintenanceStartTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MaintenanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MaintenanceProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MaintenanceProperties.
     */
    public static MaintenanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MaintenanceProperties deserializedMaintenanceProperties = new MaintenanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maintenanceType".equals(fieldName)) {
                    deserializedMaintenanceProperties.maintenanceType = MaintenanceType.fromString(reader.getString());
                } else if ("maintenanceState".equals(fieldName)) {
                    deserializedMaintenanceProperties.maintenanceState
                        = MaintenanceState.fromString(reader.getString());
                } else if ("maintenanceStartTime".equals(fieldName)) {
                    deserializedMaintenanceProperties.maintenanceStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("maintenanceEndTime".equals(fieldName)) {
                    deserializedMaintenanceProperties.maintenanceEndTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("maintenanceExecutionStartTime".equals(fieldName)) {
                    deserializedMaintenanceProperties.maintenanceExecutionStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("maintenanceExecutionEndTime".equals(fieldName)) {
                    deserializedMaintenanceProperties.maintenanceExecutionEndTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("maintenanceAvailableScheduleMinTime".equals(fieldName)) {
                    deserializedMaintenanceProperties.maintenanceAvailableScheduleMinTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("maintenanceAvailableScheduleMaxTime".equals(fieldName)) {
                    deserializedMaintenanceProperties.maintenanceAvailableScheduleMaxTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("maintenanceTitle".equals(fieldName)) {
                    deserializedMaintenanceProperties.maintenanceTitle = reader.getString();
                } else if ("maintenanceDescription".equals(fieldName)) {
                    deserializedMaintenanceProperties.maintenanceDescription = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedMaintenanceProperties.provisioningState
                        = MaintenanceProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMaintenanceProperties;
        });
    }
}
