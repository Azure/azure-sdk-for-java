// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Parameters to detach Vnet.
 */
@Fluent
public final class ServerDetachVNetParameter implements JsonSerializable<ServerDetachVNetParameter> {
    /*
     * Whether or not public network access is allowed for this server. Value is 'Disabled' when server has VNet
     * integration.
     */
    private EnableStatusEnum publicNetworkAccess;

    /**
     * Creates an instance of ServerDetachVNetParameter class.
     */
    public ServerDetachVNetParameter() {
    }

    /**
     * Get the publicNetworkAccess property: Whether or not public network access is allowed for this server. Value is
     * 'Disabled' when server has VNet integration.
     * 
     * @return the publicNetworkAccess value.
     */
    public EnableStatusEnum publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Whether or not public network access is allowed for this server. Value is
     * 'Disabled' when server has VNet integration.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the ServerDetachVNetParameter object itself.
     */
    public ServerDetachVNetParameter withPublicNetworkAccess(EnableStatusEnum publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerDetachVNetParameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerDetachVNetParameter if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerDetachVNetParameter.
     */
    public static ServerDetachVNetParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerDetachVNetParameter deserializedServerDetachVNetParameter = new ServerDetachVNetParameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedServerDetachVNetParameter.publicNetworkAccess
                        = EnableStatusEnum.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerDetachVNetParameter;
        });
    }
}
