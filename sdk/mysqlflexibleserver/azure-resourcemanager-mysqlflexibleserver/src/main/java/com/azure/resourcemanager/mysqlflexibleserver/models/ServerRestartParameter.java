// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Server restart parameters.
 */
@Fluent
public final class ServerRestartParameter implements JsonSerializable<ServerRestartParameter> {
    /*
     * Whether or not failover to standby server when restarting a server with high availability enabled.
     */
    private EnableStatusEnum restartWithFailover;

    /*
     * The maximum allowed failover time in seconds.
     */
    private Integer maxFailoverSeconds;

    /**
     * Creates an instance of ServerRestartParameter class.
     */
    public ServerRestartParameter() {
    }

    /**
     * Get the restartWithFailover property: Whether or not failover to standby server when restarting a server with
     * high availability enabled.
     * 
     * @return the restartWithFailover value.
     */
    public EnableStatusEnum restartWithFailover() {
        return this.restartWithFailover;
    }

    /**
     * Set the restartWithFailover property: Whether or not failover to standby server when restarting a server with
     * high availability enabled.
     * 
     * @param restartWithFailover the restartWithFailover value to set.
     * @return the ServerRestartParameter object itself.
     */
    public ServerRestartParameter withRestartWithFailover(EnableStatusEnum restartWithFailover) {
        this.restartWithFailover = restartWithFailover;
        return this;
    }

    /**
     * Get the maxFailoverSeconds property: The maximum allowed failover time in seconds.
     * 
     * @return the maxFailoverSeconds value.
     */
    public Integer maxFailoverSeconds() {
        return this.maxFailoverSeconds;
    }

    /**
     * Set the maxFailoverSeconds property: The maximum allowed failover time in seconds.
     * 
     * @param maxFailoverSeconds the maxFailoverSeconds value to set.
     * @return the ServerRestartParameter object itself.
     */
    public ServerRestartParameter withMaxFailoverSeconds(Integer maxFailoverSeconds) {
        this.maxFailoverSeconds = maxFailoverSeconds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("restartWithFailover",
            this.restartWithFailover == null ? null : this.restartWithFailover.toString());
        jsonWriter.writeNumberField("maxFailoverSeconds", this.maxFailoverSeconds);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerRestartParameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerRestartParameter if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerRestartParameter.
     */
    public static ServerRestartParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerRestartParameter deserializedServerRestartParameter = new ServerRestartParameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("restartWithFailover".equals(fieldName)) {
                    deserializedServerRestartParameter.restartWithFailover
                        = EnableStatusEnum.fromString(reader.getString());
                } else if ("maxFailoverSeconds".equals(fieldName)) {
                    deserializedServerRestartParameter.maxFailoverSeconds = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerRestartParameter;
        });
    }
}
