// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mysqlflexibleserver.models.AdministratorType;
import java.io.IOException;

/**
 * The properties of an administrator.
 */
@Fluent
public final class AdministratorProperties implements JsonSerializable<AdministratorProperties> {
    /*
     * Type of the sever administrator.
     */
    private AdministratorType administratorType;

    /*
     * Login name of the server administrator.
     */
    private String login;

    /*
     * SID (object ID) of the server administrator.
     */
    private String sid;

    /*
     * Tenant ID of the administrator.
     */
    private String tenantId;

    /*
     * The resource id of the identity used for AAD Authentication.
     */
    private String identityResourceId;

    /**
     * Creates an instance of AdministratorProperties class.
     */
    public AdministratorProperties() {
    }

    /**
     * Get the administratorType property: Type of the sever administrator.
     * 
     * @return the administratorType value.
     */
    public AdministratorType administratorType() {
        return this.administratorType;
    }

    /**
     * Set the administratorType property: Type of the sever administrator.
     * 
     * @param administratorType the administratorType value to set.
     * @return the AdministratorProperties object itself.
     */
    public AdministratorProperties withAdministratorType(AdministratorType administratorType) {
        this.administratorType = administratorType;
        return this;
    }

    /**
     * Get the login property: Login name of the server administrator.
     * 
     * @return the login value.
     */
    public String login() {
        return this.login;
    }

    /**
     * Set the login property: Login name of the server administrator.
     * 
     * @param login the login value to set.
     * @return the AdministratorProperties object itself.
     */
    public AdministratorProperties withLogin(String login) {
        this.login = login;
        return this;
    }

    /**
     * Get the sid property: SID (object ID) of the server administrator.
     * 
     * @return the sid value.
     */
    public String sid() {
        return this.sid;
    }

    /**
     * Set the sid property: SID (object ID) of the server administrator.
     * 
     * @param sid the sid value to set.
     * @return the AdministratorProperties object itself.
     */
    public AdministratorProperties withSid(String sid) {
        this.sid = sid;
        return this;
    }

    /**
     * Get the tenantId property: Tenant ID of the administrator.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: Tenant ID of the administrator.
     * 
     * @param tenantId the tenantId value to set.
     * @return the AdministratorProperties object itself.
     */
    public AdministratorProperties withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Get the identityResourceId property: The resource id of the identity used for AAD Authentication.
     * 
     * @return the identityResourceId value.
     */
    public String identityResourceId() {
        return this.identityResourceId;
    }

    /**
     * Set the identityResourceId property: The resource id of the identity used for AAD Authentication.
     * 
     * @param identityResourceId the identityResourceId value to set.
     * @return the AdministratorProperties object itself.
     */
    public AdministratorProperties withIdentityResourceId(String identityResourceId) {
        this.identityResourceId = identityResourceId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("administratorType",
            this.administratorType == null ? null : this.administratorType.toString());
        jsonWriter.writeStringField("login", this.login);
        jsonWriter.writeStringField("sid", this.sid);
        jsonWriter.writeStringField("tenantId", this.tenantId);
        jsonWriter.writeStringField("identityResourceId", this.identityResourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdministratorProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdministratorProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AdministratorProperties.
     */
    public static AdministratorProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AdministratorProperties deserializedAdministratorProperties = new AdministratorProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("administratorType".equals(fieldName)) {
                    deserializedAdministratorProperties.administratorType
                        = AdministratorType.fromString(reader.getString());
                } else if ("login".equals(fieldName)) {
                    deserializedAdministratorProperties.login = reader.getString();
                } else if ("sid".equals(fieldName)) {
                    deserializedAdministratorProperties.sid = reader.getString();
                } else if ("tenantId".equals(fieldName)) {
                    deserializedAdministratorProperties.tenantId = reader.getString();
                } else if ("identityResourceId".equals(fieldName)) {
                    deserializedAdministratorProperties.identityResourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAdministratorProperties;
        });
    }
}
