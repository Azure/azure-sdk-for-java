// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.generated;

import com.azure.resourcemanager.mysqlflexibleserver.models.BatchOfMaintenance;
import com.azure.resourcemanager.mysqlflexibleserver.models.DataEncryption;
import com.azure.resourcemanager.mysqlflexibleserver.models.DataEncryptionType;
import com.azure.resourcemanager.mysqlflexibleserver.models.EnableStatusEnum;
import com.azure.resourcemanager.mysqlflexibleserver.models.Identity;
import com.azure.resourcemanager.mysqlflexibleserver.models.MaintenancePolicy;
import com.azure.resourcemanager.mysqlflexibleserver.models.MaintenanceWindow;
import com.azure.resourcemanager.mysqlflexibleserver.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.mysqlflexibleserver.models.Network;
import com.azure.resourcemanager.mysqlflexibleserver.models.PatchStrategy;
import com.azure.resourcemanager.mysqlflexibleserver.models.Server;
import com.azure.resourcemanager.mysqlflexibleserver.models.Storage;
import com.azure.resourcemanager.mysqlflexibleserver.models.StorageRedundancyEnum;
import com.azure.resourcemanager.mysqlflexibleserver.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Servers Update.
 */
public final class ServersUpdateSamples {
    /*
     * x-ms-original-file: 2024-12-30/ServerUpdateWithCustomerMaintenanceWindow.json
     */
    /**
     * Sample code: Update server customer maintenance window.
     * 
     * @param manager Entry point to MySqlManager.
     */
    public static void
        updateServerCustomerMaintenanceWindow(com.azure.resourcemanager.mysqlflexibleserver.MySqlManager manager) {
        Server resource = manager.servers()
            .getByResourceGroupWithResponse("testrg", "mysqltestserver", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withMaintenanceWindow(new MaintenanceWindow().withCustomWindow("Enabled")
                .withStartHour(8)
                .withStartMinute(0)
                .withDayOfWeek(1)
                .withBatchOfMaintenance(BatchOfMaintenance.BATCH1))
            .apply();
    }

    /*
     * x-ms-original-file: 2024-12-30/MaintenancePolicyPatchOptInVirtualCanary.json
     */
    /**
     * Sample code: Update server to opt in virtual canary.
     * 
     * @param manager Entry point to MySqlManager.
     */
    public static void
        updateServerToOptInVirtualCanary(com.azure.resourcemanager.mysqlflexibleserver.MySqlManager manager) {
        Server resource = manager.servers()
            .getByResourceGroupWithResponse("testrg", "mysqltestserver", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withMaintenancePolicy(new MaintenancePolicy().withPatchStrategy(PatchStrategy.VIRTUAL_CANARY))
            .apply();
    }

    /*
     * x-ms-original-file: 2024-12-30/MaintenancePolicyPatchOptOutVirtualCanary.json
     */
    /**
     * Sample code: Update server to opt out virtual canary.
     * 
     * @param manager Entry point to MySqlManager.
     */
    public static void
        updateServerToOptOutVirtualCanary(com.azure.resourcemanager.mysqlflexibleserver.MySqlManager manager) {
        Server resource = manager.servers()
            .getByResourceGroupWithResponse("testrg", "mysqltestserver", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withMaintenancePolicy(new MaintenancePolicy().withPatchStrategy(PatchStrategy.fromString("Default")))
            .apply();
    }

    /*
     * x-ms-original-file: 2024-12-30/ServerUpdateWithBYOK.json
     */
    /**
     * Sample code: Update server with byok.
     * 
     * @param manager Entry point to MySqlManager.
     */
    public static void updateServerWithByok(com.azure.resourcemanager.mysqlflexibleserver.MySqlManager manager) {
        Server resource = manager.servers()
            .getByResourceGroupWithResponse("testrg", "mysqltestserver", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withIdentity(new Identity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf(
                    "/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/test-identity",
                    new UserAssignedIdentity())))
            .withDataEncryption(new DataEncryption().withPrimaryUserAssignedIdentityId(
                "/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/test-identity")
                .withPrimaryKeyUri("fakeTokenPlaceholder")
                .withGeoBackupUserAssignedIdentityId(
                    "/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/test-geo-identity")
                .withGeoBackupKeyUri("fakeTokenPlaceholder")
                .withType(DataEncryptionType.AZURE_KEY_VAULT))
            .apply();
    }

    /*
     * x-ms-original-file: 2024-12-30/ServerUpdate.json
     */
    /**
     * Sample code: Update a server.
     * 
     * @param manager Entry point to MySqlManager.
     */
    public static void updateAServer(com.azure.resourcemanager.mysqlflexibleserver.MySqlManager manager) {
        Server resource = manager.servers()
            .getByResourceGroupWithResponse("testrg", "mysqltestserver", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withStorage(new Storage().withStorageSizeGB(30)
                .withIops(200)
                .withAutoGrow(EnableStatusEnum.DISABLED)
                .withAutoIoScaling(EnableStatusEnum.DISABLED)
                .withStorageRedundancy(StorageRedundancyEnum.LOCAL_REDUNDANCY))
            .withNetwork(new Network().withPublicNetworkAccess(EnableStatusEnum.DISABLED))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
