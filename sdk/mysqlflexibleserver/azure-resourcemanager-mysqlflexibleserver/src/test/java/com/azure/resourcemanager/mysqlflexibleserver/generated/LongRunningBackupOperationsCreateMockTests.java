// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mysqlflexibleserver.MySqlManager;
import com.azure.resourcemanager.mysqlflexibleserver.models.BackupType;
import com.azure.resourcemanager.mysqlflexibleserver.models.ServerBackupV2;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LongRunningBackupOperationsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"backupNameV2\":\"faxvxil\",\"backupType\":\"FULL\",\"completedTime\":\"2021-07-08T19:53:14Z\",\"source\":\"nzeyqxtjj\",\"provisioningState\":\"Succeeded\"},\"id\":\"qhycavodggxdbees\",\"name\":\"ieknl\",\"type\":\"ariaawi\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MySqlManager manager = MySqlManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ServerBackupV2 response = manager.longRunningBackupOperations()
            .define("roud")
            .withExistingFlexibleServer("g", "khocxvdfffwaf")
            .withBackupNameV2("avehhrvkbunzo")
            .withBackupType(BackupType.FULL)
            .withCompletedTime(OffsetDateTime.parse("2021-10-22T01:37:19Z"))
            .withSource("gkmoyxcdyuibhmfd")
            .create();

        Assertions.assertEquals("faxvxil", response.backupNameV2());
        Assertions.assertEquals(BackupType.FULL, response.backupType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-08T19:53:14Z"), response.completedTime());
        Assertions.assertEquals("nzeyqxtjj", response.source());
    }
}
