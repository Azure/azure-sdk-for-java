// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mysqlflexibleserver.MySqlManager;
import com.azure.resourcemanager.mysqlflexibleserver.models.PrivateEndpointConnectionListResult;
import com.azure.resourcemanager.mysqlflexibleserver.models.PrivateEndpointServiceConnectionStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsListByServerWithResponseMockTests {
    @Test
    public void testListByServerWithResponse() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"groupIds\":[\"tifdwfmvi\"],\"privateEndpoint\":{\"id\":\"qj\"},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"h\",\"actionsRequired\":\"glka\"},\"provisioningState\":\"Failed\"},\"id\":\"qjujeickpzvcp\",\"name\":\"pmxelnwcltyje\",\"type\":\"ex\"},{\"properties\":{\"groupIds\":[\"mkqscaz\"],\"privateEndpoint\":{\"id\":\"xtzx\"},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"wabzxrvxcushsp\",\"actionsRequired\":\"ivmxyasfl\"},\"provisioningState\":\"Failed\"},\"id\":\"zwywako\",\"name\":\"hknsmjbl\",\"type\":\"ljhlnymzotq\"}],\"nextLink\":\"yuzcbmqqvxmvw\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MySqlManager manager = MySqlManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PrivateEndpointConnectionListResult response = manager.privateEndpointConnections()
            .listByServerWithResponse("lhslnelxieixyn", "lxecwcrojphslh", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.APPROVED,
            response.value().get(0).privateLinkServiceConnectionState().status());
        Assertions.assertEquals("h", response.value().get(0).privateLinkServiceConnectionState().description());
        Assertions.assertEquals("glka", response.value().get(0).privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("yuzcbmqqvxmvw", response.nextLink());
    }
}
