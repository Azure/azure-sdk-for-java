// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mysqlflexibleserver.MySqlManager;
import com.azure.resourcemanager.mysqlflexibleserver.models.Configuration;
import com.azure.resourcemanager.mysqlflexibleserver.models.ConfigurationSource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConfigurationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"value\":\"ojgcyzt\",\"currentValue\":\"mznbaeqphch\",\"description\":\"rn\",\"documentationLink\":\"x\",\"defaultValue\":\"uwrykqgaifmvikl\",\"dataType\":\"dvk\",\"allowedValues\":\"ejd\",\"source\":\"system-default\",\"isReadOnly\":\"False\",\"isConfigPendingRestart\":\"True\",\"isDynamicConfig\":\"True\"},\"id\":\"jivolvtnov\",\"name\":\"fzg\",\"type\":\"mjdftu\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MySqlManager manager = MySqlManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Configuration response = manager.configurations()
            .define("euzvx")
            .withExistingFlexibleServer("skasdvlmfwdgzxu", "ucvpamrs")
            .withValue("sjnhn")
            .withCurrentValue("xifqjzgxm")
            .withSource(ConfigurationSource.USER_OVERRIDE)
            .create();

        Assertions.assertEquals("ojgcyzt", response.value());
        Assertions.assertEquals("mznbaeqphch", response.currentValue());
        Assertions.assertEquals(ConfigurationSource.SYSTEM_DEFAULT, response.source());
    }
}
