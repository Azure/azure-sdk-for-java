// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mysqlflexibleserver.MySqlManager;
import com.azure.resourcemanager.mysqlflexibleserver.models.ConfigurationForBatchUpdate;
import com.azure.resourcemanager.mysqlflexibleserver.models.ConfigurationListForBatchUpdate;
import com.azure.resourcemanager.mysqlflexibleserver.models.ConfigurationListResult;
import com.azure.resourcemanager.mysqlflexibleserver.models.ConfigurationSource;
import com.azure.resourcemanager.mysqlflexibleserver.models.ResetAllToDefault;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConfigurationsBatchUpdateMockTests {
    @Test
    public void testBatchUpdate() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"value\":\"nwiaaomyl\",\"currentValue\":\"azul\",\"description\":\"ethwwnpjhlfz\",\"documentationLink\":\"pchwa\",\"defaultValue\":\"bousn\",\"dataType\":\"pgfewetwlyx\",\"allowedValues\":\"cxy\",\"source\":\"user-override\",\"isReadOnly\":\"False\",\"isConfigPendingRestart\":\"True\",\"isDynamicConfig\":\"False\"},\"id\":\"bcxf\",\"name\":\"bcporxvxcjzhqizx\",\"type\":\"pxtgqscjav\"},{\"properties\":{\"value\":\"uhdqazk\",\"currentValue\":\"gg\",\"description\":\"pijrajcivmmghf\",\"documentationLink\":\"iwrxgkn\",\"defaultValue\":\"vyi\",\"dataType\":\"qodfvp\",\"allowedValues\":\"hoxgsgbpf\",\"source\":\"user-override\",\"isReadOnly\":\"True\",\"isConfigPendingRestart\":\"True\",\"isDynamicConfig\":\"True\"},\"id\":\"bqvgaqv\",\"name\":\"gafcqu\",\"type\":\"rdve\"},{\"properties\":{\"value\":\"sdtutnwlduyc\",\"currentValue\":\"zhyrmewipmve\",\"description\":\"xukuqgsj\",\"documentationLink\":\"undxgketw\",\"defaultValue\":\"hzjhf\",\"dataType\":\"hvvmuvgpmun\",\"allowedValues\":\"sx\",\"source\":\"user-override\",\"isReadOnly\":\"True\",\"isConfigPendingRestart\":\"True\",\"isDynamicConfig\":\"False\"},\"id\":\"hsasbhu\",\"name\":\"ypoh\",\"type\":\"uemsly\"},{\"properties\":{\"value\":\"yrpfoobrlttymsj\",\"currentValue\":\"gqdnfwqzd\",\"description\":\"tilaxh\",\"documentationLink\":\"hqlyvijo\",\"defaultValue\":\"iv\",\"dataType\":\"oyzunbixxr\",\"allowedValues\":\"kvcpwpgclr\",\"source\":\"system-default\",\"isReadOnly\":\"True\",\"isConfigPendingRestart\":\"True\",\"isDynamicConfig\":\"True\"},\"id\":\"enxpmyyefr\",\"name\":\"mpdnqqskawa\",\"type\":\"qvmmbn\"}],\"nextLink\":\"fr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MySqlManager manager = MySqlManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ConfigurationListResult response
            = manager.configurations()
                .batchUpdate("toqbeitpkxztmoob", "lftidgfcwqmpim",
                    new ConfigurationListForBatchUpdate().withValue(Arrays.asList(
                        new ConfigurationForBatchUpdate().withName("hemjy").withValue("uj").withSource("t"),
                        new ConfigurationForBatchUpdate().withName("ozzwculkba")
                            .withValue("ajnjwltlwtjj")
                            .withSource("ktalhsnvkcdmxz")))
                        .withResetAllToDefault(ResetAllToDefault.TRUE),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("nwiaaomyl", response.value().get(0).value());
        Assertions.assertEquals("azul", response.value().get(0).currentValue());
        Assertions.assertEquals(ConfigurationSource.USER_OVERRIDE, response.value().get(0).source());
        Assertions.assertEquals("fr", response.nextLink());
    }
}
