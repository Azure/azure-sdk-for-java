// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mysqlflexibleserver.fluent.models.OperationInner;
import com.azure.resourcemanager.mysqlflexibleserver.models.OperationDisplay;
import com.azure.resourcemanager.mysqlflexibleserver.models.OperationListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OperationListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OperationListResult model = BinaryData.fromString(
            "{\"value\":[{\"name\":\"hltrpmopjmcmatuo\",\"display\":{\"provider\":\"fu\",\"resource\":\"aodsfcpkv\",\"operation\":\"dpuozmyz\",\"description\":\"agfuaxbezyiu\"},\"origin\":\"ktwh\",\"properties\":{\"wqsmbsur\":\"datawz\"}}],\"nextLink\":\"imoryocfsfksym\"}")
            .toObject(OperationListResult.class);
        Assertions.assertEquals("hltrpmopjmcmatuo", model.value().get(0).name());
        Assertions.assertEquals("fu", model.value().get(0).display().provider());
        Assertions.assertEquals("aodsfcpkv", model.value().get(0).display().resource());
        Assertions.assertEquals("dpuozmyz", model.value().get(0).display().operation());
        Assertions.assertEquals("agfuaxbezyiu", model.value().get(0).display().description());
        Assertions.assertEquals("ktwh", model.value().get(0).origin());
        Assertions.assertEquals("imoryocfsfksym", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OperationListResult model
            = new OperationListResult().withValue(Arrays.asList(new OperationInner().withName("hltrpmopjmcmatuo")
                .withDisplay(new OperationDisplay().withProvider("fu")
                    .withResource("aodsfcpkv")
                    .withOperation("dpuozmyz")
                    .withDescription("agfuaxbezyiu"))
                .withOrigin("ktwh")
                .withProperties(mapOf("wqsmbsur", "datawz")))).withNextLink("imoryocfsfksym");
        model = BinaryData.fromObject(model).toObject(OperationListResult.class);
        Assertions.assertEquals("hltrpmopjmcmatuo", model.value().get(0).name());
        Assertions.assertEquals("fu", model.value().get(0).display().provider());
        Assertions.assertEquals("aodsfcpkv", model.value().get(0).display().resource());
        Assertions.assertEquals("dpuozmyz", model.value().get(0).display().operation());
        Assertions.assertEquals("agfuaxbezyiu", model.value().get(0).display().description());
        Assertions.assertEquals("ktwh", model.value().get(0).origin());
        Assertions.assertEquals("imoryocfsfksym", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
