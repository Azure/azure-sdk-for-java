// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mysqlflexibleserver.fluent.models.OperationStatusExtendedResultInner;
import com.azure.resourcemanager.mysqlflexibleserver.models.OperationStatusResult;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OperationStatusExtendedResultInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OperationStatusExtendedResultInner model = BinaryData.fromString(
            "{\"properties\":{\"lla\":\"datagxk\",\"z\":\"datamelwuipiccjz\",\"vvcnayr\":\"datav\",\"rdvstkwqqtch\":\"datayrnxxmueedn\"},\"id\":\"lmfmtdaay\",\"resourceId\":\"v\",\"name\":\"gpiohgwxrtfudxe\",\"status\":\"xg\",\"percentComplete\":65.89699,\"startTime\":\"2021-01-20T23:29:46Z\",\"endTime\":\"2021-07-18T03:12:47Z\",\"operations\":[{\"id\":\"k\",\"resourceId\":\"ghimdblx\",\"name\":\"imfnjhfjx\",\"status\":\"mszkkfo\",\"percentComplete\":56.352932,\"startTime\":\"2021-06-21T22:48:50Z\",\"endTime\":\"2021-05-31T03:25:20Z\",\"operations\":[{\"id\":\"jawneaiv\",\"resourceId\":\"czelpcirel\",\"name\":\"eae\",\"status\":\"wabfatkl\",\"percentComplete\":96.40516,\"startTime\":\"2021-11-23T10:06:03Z\",\"endTime\":\"2021-11-06T11:40:31Z\",\"operations\":[{\"status\":\"an\"},{\"status\":\"zjosp\"},{\"status\":\"youlp\"},{\"status\":\"rvxaglrvimjwosy\"}]}]},{\"id\":\"cskfcktqumiekk\",\"resourceId\":\"zikhl\",\"name\":\"jhdgqggebdunyga\",\"status\":\"qidbqfatpxllrxcy\",\"percentComplete\":47.30266,\"startTime\":\"2021-01-17T00:57:30Z\",\"endTime\":\"2021-02-02T22:23:44Z\",\"operations\":[{\"id\":\"m\",\"resourceId\":\"dmjsjqb\",\"name\":\"hyxxrwlycoduhpk\",\"status\":\"kgymareqnajxqug\",\"percentComplete\":10.06968,\"startTime\":\"2021-03-29T06:53:32Z\",\"endTime\":\"2020-12-25T16:19:20Z\",\"operations\":[{\"status\":\"dgssofwqmzqal\"}]}]},{\"id\":\"jijpxac\",\"resourceId\":\"udfnbyxba\",\"name\":\"bjyvay\",\"status\":\"fimrzrtuzqogse\",\"percentComplete\":55.08285,\"startTime\":\"2021-10-08T20:33:25Z\",\"endTime\":\"2021-12-03T20:54:07Z\",\"operations\":[{\"id\":\"mewzsyyc\",\"resourceId\":\"zsoibjudpfrxtr\",\"name\":\"zvaytdwkqbr\",\"status\":\"ubpaxhe\",\"percentComplete\":1.5196979,\"startTime\":\"2021-06-07T07:50:45Z\",\"endTime\":\"2021-10-29T07:32:45Z\",\"operations\":[{\"status\":\"iirqtd\"},{\"status\":\"oaxoruzfgsqu\"},{\"status\":\"fxrxxle\"}]}]},{\"id\":\"mxjezwlw\",\"resourceId\":\"xuqlcvydypat\",\"name\":\"oa\",\"status\":\"jkniodko\",\"percentComplete\":8.24799,\"startTime\":\"2021-08-25T09:30:56Z\",\"endTime\":\"2021-01-14T23:54:10Z\",\"operations\":[{\"id\":\"msbvdkcrodtjinf\",\"resourceId\":\"lfltka\",\"name\":\"vefkdlfoakggk\",\"status\":\"pagao\",\"percentComplete\":90.49998,\"startTime\":\"2021-11-09T20:51:35Z\",\"endTime\":\"2021-01-06T17:17:38Z\",\"operations\":[{\"status\":\"lsyxkqjnsjervt\"},{\"status\":\"agxsdszuemps\"},{\"status\":\"zkfzbeyv\"}]},{\"id\":\"icvi\",\"resourceId\":\"kjj\",\"name\":\"xrbuukzclew\",\"status\":\"hmlwpaztzpo\",\"percentComplete\":83.19924,\"startTime\":\"2021-07-07T15:20:18Z\",\"endTime\":\"2021-05-31T21:39:48Z\",\"operations\":[{\"status\":\"whxxbuyqax\"},{\"status\":\"feqztppriol\"},{\"status\":\"or\"},{\"status\":\"altol\"}]},{\"id\":\"wsobqwcsdbn\",\"resourceId\":\"cf\",\"name\":\"cqdpfuv\",\"status\":\"lsbjjcanvxbv\",\"percentComplete\":40.676033,\"startTime\":\"2021-04-07T04:06:35Z\",\"endTime\":\"2021-10-07T13:15:31Z\",\"operations\":[{\"status\":\"rmrlxqtvcof\"},{\"status\":\"dflvkg\"},{\"status\":\"u\"},{\"status\":\"gdknnqv\"}]}]}]}")
            .toObject(OperationStatusExtendedResultInner.class);
        Assertions.assertEquals("lmfmtdaay", model.id());
        Assertions.assertEquals("gpiohgwxrtfudxe", model.name());
        Assertions.assertEquals("xg", model.status());
        Assertions.assertEquals(65.89699F, model.percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-20T23:29:46Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-18T03:12:47Z"), model.endTime());
        Assertions.assertEquals("k", model.operations().get(0).id());
        Assertions.assertEquals("imfnjhfjx", model.operations().get(0).name());
        Assertions.assertEquals("mszkkfo", model.operations().get(0).status());
        Assertions.assertEquals(56.352932F, model.operations().get(0).percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-21T22:48:50Z"), model.operations().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-31T03:25:20Z"), model.operations().get(0).endTime());
        Assertions.assertEquals("jawneaiv", model.operations().get(0).operations().get(0).id());
        Assertions.assertEquals("eae", model.operations().get(0).operations().get(0).name());
        Assertions.assertEquals("wabfatkl", model.operations().get(0).operations().get(0).status());
        Assertions.assertEquals(96.40516F, model.operations().get(0).operations().get(0).percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-23T10:06:03Z"),
            model.operations().get(0).operations().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-06T11:40:31Z"),
            model.operations().get(0).operations().get(0).endTime());
        Assertions.assertEquals("an", model.operations().get(0).operations().get(0).operations().get(0).status());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OperationStatusExtendedResultInner model = new OperationStatusExtendedResultInner().withId("lmfmtdaay")
            .withName("gpiohgwxrtfudxe")
            .withStatus("xg")
            .withPercentComplete(65.89699F)
            .withStartTime(OffsetDateTime.parse("2021-01-20T23:29:46Z"))
            .withEndTime(OffsetDateTime.parse("2021-07-18T03:12:47Z"))
            .withOperations(Arrays.asList(
                new OperationStatusResult().withId("k")
                    .withName("imfnjhfjx")
                    .withStatus("mszkkfo")
                    .withPercentComplete(56.352932F)
                    .withStartTime(OffsetDateTime.parse("2021-06-21T22:48:50Z"))
                    .withEndTime(OffsetDateTime.parse("2021-05-31T03:25:20Z"))
                    .withOperations(Arrays.asList(new OperationStatusResult().withId("jawneaiv")
                        .withName("eae")
                        .withStatus("wabfatkl")
                        .withPercentComplete(96.40516F)
                        .withStartTime(OffsetDateTime.parse("2021-11-23T10:06:03Z"))
                        .withEndTime(OffsetDateTime.parse("2021-11-06T11:40:31Z"))
                        .withOperations(Arrays.asList(new OperationStatusResult().withStatus("an"),
                            new OperationStatusResult().withStatus("zjosp"),
                            new OperationStatusResult().withStatus("youlp"),
                            new OperationStatusResult().withStatus("rvxaglrvimjwosy"))))),
                new OperationStatusResult().withId("cskfcktqumiekk")
                    .withName("jhdgqggebdunyga")
                    .withStatus("qidbqfatpxllrxcy")
                    .withPercentComplete(47.30266F)
                    .withStartTime(OffsetDateTime.parse("2021-01-17T00:57:30Z"))
                    .withEndTime(OffsetDateTime.parse("2021-02-02T22:23:44Z"))
                    .withOperations(Arrays.asList(new OperationStatusResult().withId("m")
                        .withName("hyxxrwlycoduhpk")
                        .withStatus("kgymareqnajxqug")
                        .withPercentComplete(10.06968F)
                        .withStartTime(OffsetDateTime.parse("2021-03-29T06:53:32Z"))
                        .withEndTime(OffsetDateTime.parse("2020-12-25T16:19:20Z"))
                        .withOperations(Arrays.asList(new OperationStatusResult().withStatus("dgssofwqmzqal"))))),
                new OperationStatusResult().withId("jijpxac")
                    .withName("bjyvay")
                    .withStatus("fimrzrtuzqogse")
                    .withPercentComplete(55.08285F)
                    .withStartTime(OffsetDateTime.parse("2021-10-08T20:33:25Z"))
                    .withEndTime(OffsetDateTime.parse("2021-12-03T20:54:07Z"))
                    .withOperations(Arrays.asList(new OperationStatusResult().withId("mewzsyyc")
                        .withName("zvaytdwkqbr")
                        .withStatus("ubpaxhe")
                        .withPercentComplete(1.5196979F)
                        .withStartTime(OffsetDateTime.parse("2021-06-07T07:50:45Z"))
                        .withEndTime(OffsetDateTime.parse("2021-10-29T07:32:45Z"))
                        .withOperations(Arrays.asList(new OperationStatusResult().withStatus("iirqtd"),
                            new OperationStatusResult().withStatus("oaxoruzfgsqu"),
                            new OperationStatusResult().withStatus("fxrxxle"))))),
                new OperationStatusResult().withId("mxjezwlw")
                    .withName("oa")
                    .withStatus("jkniodko")
                    .withPercentComplete(8.24799F)
                    .withStartTime(OffsetDateTime.parse("2021-08-25T09:30:56Z"))
                    .withEndTime(OffsetDateTime.parse("2021-01-14T23:54:10Z"))
                    .withOperations(Arrays.asList(
                        new OperationStatusResult().withId("msbvdkcrodtjinf")
                            .withName("vefkdlfoakggk")
                            .withStatus("pagao")
                            .withPercentComplete(90.49998F)
                            .withStartTime(OffsetDateTime.parse("2021-11-09T20:51:35Z"))
                            .withEndTime(OffsetDateTime.parse("2021-01-06T17:17:38Z"))
                            .withOperations(Arrays.asList(new OperationStatusResult().withStatus("lsyxkqjnsjervt"),
                                new OperationStatusResult().withStatus("agxsdszuemps"),
                                new OperationStatusResult().withStatus("zkfzbeyv"))),
                        new OperationStatusResult().withId("icvi")
                            .withName("xrbuukzclew")
                            .withStatus("hmlwpaztzpo")
                            .withPercentComplete(83.19924F)
                            .withStartTime(OffsetDateTime.parse("2021-07-07T15:20:18Z"))
                            .withEndTime(OffsetDateTime.parse("2021-05-31T21:39:48Z"))
                            .withOperations(Arrays.asList(new OperationStatusResult().withStatus("whxxbuyqax"),
                                new OperationStatusResult().withStatus("feqztppriol"),
                                new OperationStatusResult().withStatus("or"),
                                new OperationStatusResult().withStatus("altol"))),
                        new OperationStatusResult().withId("wsobqwcsdbn")
                            .withName("cqdpfuv")
                            .withStatus("lsbjjcanvxbv")
                            .withPercentComplete(40.676033F)
                            .withStartTime(OffsetDateTime.parse("2021-04-07T04:06:35Z"))
                            .withEndTime(OffsetDateTime.parse("2021-10-07T13:15:31Z"))
                            .withOperations(Arrays.asList(new OperationStatusResult().withStatus("rmrlxqtvcof"),
                                new OperationStatusResult().withStatus("dflvkg"),
                                new OperationStatusResult().withStatus("u"),
                                new OperationStatusResult().withStatus("gdknnqv")))))))
            .withProperties(mapOf("lla", "datagxk", "z", "datamelwuipiccjz", "vvcnayr", "datav", "rdvstkwqqtch",
                "datayrnxxmueedn"));
        model = BinaryData.fromObject(model).toObject(OperationStatusExtendedResultInner.class);
        Assertions.assertEquals("lmfmtdaay", model.id());
        Assertions.assertEquals("gpiohgwxrtfudxe", model.name());
        Assertions.assertEquals("xg", model.status());
        Assertions.assertEquals(65.89699F, model.percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-20T23:29:46Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-18T03:12:47Z"), model.endTime());
        Assertions.assertEquals("k", model.operations().get(0).id());
        Assertions.assertEquals("imfnjhfjx", model.operations().get(0).name());
        Assertions.assertEquals("mszkkfo", model.operations().get(0).status());
        Assertions.assertEquals(56.352932F, model.operations().get(0).percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-21T22:48:50Z"), model.operations().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-31T03:25:20Z"), model.operations().get(0).endTime());
        Assertions.assertEquals("jawneaiv", model.operations().get(0).operations().get(0).id());
        Assertions.assertEquals("eae", model.operations().get(0).operations().get(0).name());
        Assertions.assertEquals("wabfatkl", model.operations().get(0).operations().get(0).status());
        Assertions.assertEquals(96.40516F, model.operations().get(0).operations().get(0).percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-23T10:06:03Z"),
            model.operations().get(0).operations().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-06T11:40:31Z"),
            model.operations().get(0).operations().get(0).endTime());
        Assertions.assertEquals("an", model.operations().get(0).operations().get(0).operations().get(0).status());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
