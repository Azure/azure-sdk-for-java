// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mysqlflexibleserver.fluent.models.AzureADAdministratorInner;
import com.azure.resourcemanager.mysqlflexibleserver.models.AdministratorType;
import org.junit.jupiter.api.Assertions;

public final class AzureADAdministratorInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureADAdministratorInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"administratorType\":\"ActiveDirectory\",\"login\":\"qidybyx\",\"sid\":\"fclhaaxdbabphlwr\",\"tenantId\":\"fkts\",\"identityResourceId\":\"sucocmnyyazttbtw\"},\"id\":\"qpuedckzywbiex\",\"name\":\"fey\",\"type\":\"eaxib\"}")
                .toObject(AzureADAdministratorInner.class);
        Assertions.assertEquals(AdministratorType.ACTIVE_DIRECTORY, model.administratorType());
        Assertions.assertEquals("qidybyx", model.login());
        Assertions.assertEquals("fclhaaxdbabphlwr", model.sid());
        Assertions.assertEquals("fkts", model.tenantId());
        Assertions.assertEquals("sucocmnyyazttbtw", model.identityResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureADAdministratorInner model =
            new AzureADAdministratorInner()
                .withAdministratorType(AdministratorType.ACTIVE_DIRECTORY)
                .withLogin("qidybyx")
                .withSid("fclhaaxdbabphlwr")
                .withTenantId("fkts")
                .withIdentityResourceId("sucocmnyyazttbtw");
        model = BinaryData.fromObject(model).toObject(AzureADAdministratorInner.class);
        Assertions.assertEquals(AdministratorType.ACTIVE_DIRECTORY, model.administratorType());
        Assertions.assertEquals("qidybyx", model.login());
        Assertions.assertEquals("fclhaaxdbabphlwr", model.sid());
        Assertions.assertEquals("fkts", model.tenantId());
        Assertions.assertEquals("sucocmnyyazttbtw", model.identityResourceId());
    }
}
