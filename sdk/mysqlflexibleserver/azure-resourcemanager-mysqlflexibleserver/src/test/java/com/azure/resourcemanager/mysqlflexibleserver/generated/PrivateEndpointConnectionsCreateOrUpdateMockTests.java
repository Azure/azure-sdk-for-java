// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mysqlflexibleserver.MySqlManager;
import com.azure.resourcemanager.mysqlflexibleserver.models.PrivateEndpoint;
import com.azure.resourcemanager.mysqlflexibleserver.models.PrivateEndpointConnection;
import com.azure.resourcemanager.mysqlflexibleserver.models.PrivateEndpointServiceConnectionStatus;
import com.azure.resourcemanager.mysqlflexibleserver.models.PrivateLinkServiceConnectionState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"groupIds\":[\"fmd\",\"ragegi\",\"vcjfelisdjubggb\"],\"privateEndpoint\":{\"id\":\"kxkbsazgakgacyr\"},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"mspofapvuhryl\",\"actionsRequired\":\"ofrzgb\"},\"provisioningState\":\"Succeeded\"},\"id\":\"mstk\",\"name\":\"nlvxbcuii\",\"type\":\"nktwfansnvpdibmi\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MySqlManager manager = MySqlManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PrivateEndpointConnection response = manager.privateEndpointConnections()
            .define("vsqltnzoibgsxg")
            .withExistingFlexibleServer("gtayxonsupeujlz", "nh")
            .withPrivateEndpoint(new PrivateEndpoint())
            .withPrivateLinkServiceConnectionState(
                new PrivateLinkServiceConnectionState().withStatus(PrivateEndpointServiceConnectionStatus.REJECTED)
                    .withDescription("nhe")
                    .withActionsRequired("qpofvwbc"))
            .create();

        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.PENDING,
            response.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("mspofapvuhryl", response.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("ofrzgb", response.privateLinkServiceConnectionState().actionsRequired());
    }
}
