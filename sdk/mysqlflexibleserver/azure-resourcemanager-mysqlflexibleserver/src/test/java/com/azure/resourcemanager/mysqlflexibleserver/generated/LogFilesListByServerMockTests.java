// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mysqlflexibleserver.MySqlManager;
import com.azure.resourcemanager.mysqlflexibleserver.models.LogFile;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LogFilesListByServerMockTests {
    @Test
    public void testListByServer() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"sizeInKB\":1685798888080605918,\"createdTime\":\"2021-10-11T02:34:35Z\",\"type\":\"geivsiykzkdncj\",\"lastModifiedTime\":\"2021-05-05T17:45:23Z\",\"url\":\"bzo\"},\"id\":\"culapzwyrpgogtq\",\"name\":\"epnylbfu\",\"type\":\"jlyjtlvofq\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MySqlManager manager = MySqlManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<LogFile> response
            = manager.logFiles().listByServer("drihpfhoqcaaewda", "mdjvlpj", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(1685798888080605918L, response.iterator().next().sizeInKB());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-11T02:34:35Z"), response.iterator().next().createdTime());
        Assertions.assertEquals("geivsiykzkdncj", response.iterator().next().typePropertiesType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-05T17:45:23Z"),
            response.iterator().next().lastModifiedTime());
        Assertions.assertEquals("bzo", response.iterator().next().url());
    }
}
