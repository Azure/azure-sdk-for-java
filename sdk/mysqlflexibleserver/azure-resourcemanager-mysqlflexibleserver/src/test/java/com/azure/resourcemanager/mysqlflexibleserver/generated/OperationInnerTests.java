// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mysqlflexibleserver.fluent.models.OperationInner;
import com.azure.resourcemanager.mysqlflexibleserver.models.OperationDisplay;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OperationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OperationInner model = BinaryData.fromString(
            "{\"name\":\"f\",\"display\":{\"provider\":\"txhojujb\",\"resource\":\"elmcuvhixbjxyfw\",\"operation\":\"lrcoolsttpki\",\"description\":\"kbnujr\"},\"origin\":\"vtylbfpncu\",\"properties\":{\"htywubxcbihwq\":\"dataiwii\",\"wjchrdg\":\"datanfdn\",\"uu\":\"dataihxumwctondzj\"}}")
            .toObject(OperationInner.class);
        Assertions.assertEquals("f", model.name());
        Assertions.assertEquals("txhojujb", model.display().provider());
        Assertions.assertEquals("elmcuvhixbjxyfw", model.display().resource());
        Assertions.assertEquals("lrcoolsttpki", model.display().operation());
        Assertions.assertEquals("kbnujr", model.display().description());
        Assertions.assertEquals("vtylbfpncu", model.origin());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OperationInner model = new OperationInner().withName("f")
            .withDisplay(new OperationDisplay().withProvider("txhojujb")
                .withResource("elmcuvhixbjxyfw")
                .withOperation("lrcoolsttpki")
                .withDescription("kbnujr"))
            .withOrigin("vtylbfpncu")
            .withProperties(mapOf("htywubxcbihwq", "dataiwii", "wjchrdg", "datanfdn", "uu", "dataihxumwctondzj"));
        model = BinaryData.fromObject(model).toObject(OperationInner.class);
        Assertions.assertEquals("f", model.name());
        Assertions.assertEquals("txhojujb", model.display().provider());
        Assertions.assertEquals("elmcuvhixbjxyfw", model.display().resource());
        Assertions.assertEquals("lrcoolsttpki", model.display().operation());
        Assertions.assertEquals("kbnujr", model.display().description());
        Assertions.assertEquals("vtylbfpncu", model.origin());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
