// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mysqlflexibleserver.fluent.models.OperationInner;
import com.azure.resourcemanager.mysqlflexibleserver.models.OperationDisplay;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OperationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OperationInner model =
            BinaryData
                .fromString(
                    "{\"name\":\"riwflzlfb\",\"display\":{\"provider\":\"uzycispnqza\",\"resource\":\"gkbrpyyd\",\"operation\":\"bnuqqkpik\",\"description\":\"rgvtqag\"},\"origin\":\"uynhijg\",\"properties\":{\"arbu\":\"databfs\"}}")
                .toObject(OperationInner.class);
        Assertions.assertEquals("riwflzlfb", model.name());
        Assertions.assertEquals("uzycispnqza", model.display().provider());
        Assertions.assertEquals("gkbrpyyd", model.display().resource());
        Assertions.assertEquals("bnuqqkpik", model.display().operation());
        Assertions.assertEquals("rgvtqag", model.display().description());
        Assertions.assertEquals("uynhijg", model.origin());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OperationInner model =
            new OperationInner()
                .withName("riwflzlfb")
                .withDisplay(
                    new OperationDisplay()
                        .withProvider("uzycispnqza")
                        .withResource("gkbrpyyd")
                        .withOperation("bnuqqkpik")
                        .withDescription("rgvtqag"))
                .withOrigin("uynhijg")
                .withProperties(mapOf("arbu", "databfs"));
        model = BinaryData.fromObject(model).toObject(OperationInner.class);
        Assertions.assertEquals("riwflzlfb", model.name());
        Assertions.assertEquals("uzycispnqza", model.display().provider());
        Assertions.assertEquals("gkbrpyyd", model.display().resource());
        Assertions.assertEquals("bnuqqkpik", model.display().operation());
        Assertions.assertEquals("rgvtqag", model.display().description());
        Assertions.assertEquals("uynhijg", model.origin());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
