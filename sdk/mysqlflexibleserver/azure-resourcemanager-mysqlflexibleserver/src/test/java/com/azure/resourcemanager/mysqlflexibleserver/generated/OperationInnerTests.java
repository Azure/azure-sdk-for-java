// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysqlflexibleserver.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mysqlflexibleserver.fluent.models.OperationInner;
import com.azure.resourcemanager.mysqlflexibleserver.models.OperationDisplay;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OperationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OperationInner model = BinaryData.fromString(
            "{\"name\":\"puqujmqlgkfbtn\",\"display\":{\"provider\":\"ongbjcnt\",\"resource\":\"i\",\"operation\":\"jed\",\"description\":\"wwa\"},\"origin\":\"kojvd\",\"properties\":{\"rzgszufoxci\":\"datafoqouicybx\",\"haz\":\"dataopidoamciodh\",\"toego\":\"datakhnzbonlw\",\"vbtqgsfraoyzk\":\"datadwbwhkszzcmrvexz\"}}")
            .toObject(OperationInner.class);
        Assertions.assertEquals("puqujmqlgkfbtn", model.name());
        Assertions.assertEquals("ongbjcnt", model.display().provider());
        Assertions.assertEquals("i", model.display().resource());
        Assertions.assertEquals("jed", model.display().operation());
        Assertions.assertEquals("wwa", model.display().description());
        Assertions.assertEquals("kojvd", model.origin());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OperationInner model = new OperationInner().withName("puqujmqlgkfbtn")
            .withDisplay(new OperationDisplay().withProvider("ongbjcnt")
                .withResource("i")
                .withOperation("jed")
                .withDescription("wwa"))
            .withOrigin("kojvd")
            .withProperties(mapOf("rzgszufoxci", "datafoqouicybx", "haz", "dataopidoamciodh", "toego", "datakhnzbonlw",
                "vbtqgsfraoyzk", "datadwbwhkszzcmrvexz"));
        model = BinaryData.fromObject(model).toObject(OperationInner.class);
        Assertions.assertEquals("puqujmqlgkfbtn", model.name());
        Assertions.assertEquals("ongbjcnt", model.display().provider());
        Assertions.assertEquals("i", model.display().resource());
        Assertions.assertEquals("jed", model.display().operation());
        Assertions.assertEquals("wwa", model.display().description());
        Assertions.assertEquals("kojvd", model.origin());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
