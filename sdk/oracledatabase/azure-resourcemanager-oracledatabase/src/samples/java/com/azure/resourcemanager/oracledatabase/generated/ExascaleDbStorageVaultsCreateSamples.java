// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.resourcemanager.oracledatabase.models.ExascaleDbStorageInputDetails;
import com.azure.resourcemanager.oracledatabase.models.ExascaleDbStorageVaultProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ExascaleDbStorageVaults Create.
 */
public final class ExascaleDbStorageVaultsCreateSamples {
    /*
     * x-ms-original-file: 2025-09-01/ExascaleDbStorageVaults_Create_MinimumSet_Gen.json
     */
    /**
     * Sample code: ExascaleDbStorageVaults_Create_MaximumSet - generated by [MinimumSet] rule.
     * 
     * @param manager Entry point to OracleDatabaseManager.
     */
    public static void exascaleDbStorageVaultsCreateMaximumSetGeneratedByMinimumSetRule(
        com.azure.resourcemanager.oracledatabase.OracleDatabaseManager manager) {
        manager.exascaleDbStorageVaults()
            .define("storagevault1")
            .withRegion("odxgtv")
            .withExistingResourceGroup("rgopenapi")
            .create();
    }

    /*
     * x-ms-original-file: 2025-09-01/ExascaleDbStorageVaults_Create_MaximumSet_Gen.json
     */
    /**
     * Sample code: ExascaleDbStorageVaults_Create_MaximumSet.
     * 
     * @param manager Entry point to OracleDatabaseManager.
     */
    public static void exascaleDbStorageVaultsCreateMaximumSet(
        com.azure.resourcemanager.oracledatabase.OracleDatabaseManager manager) {
        manager.exascaleDbStorageVaults()
            .define("storagevault1")
            .withRegion("zuoudqbvlxerpjtlfooyqlb")
            .withExistingResourceGroup("rgopenapi")
            .withTags(mapOf("key4521", "fakeTokenPlaceholder"))
            .withProperties(new ExascaleDbStorageVaultProperties().withAdditionalFlashCacheInPercent(0)
                .withDescription(
                    "kgqvxvtegzwyppegpvqxnlslvetbjlgveofcpjddenhbpocyzwtswaeaetqkipcxyhedsymuljalirryldlbviuvidhssyiwodacajjnbpkbvbvzwzsjctsidchalyjkievnivikwnnypaojcvhmokddstxwiqxmbfmbvglfimseguwyvibwzllggjtwejdfgezoeuvjjbsyfozswihydzuscjrqnklewongumiljeordhqlsclwlmftzdoey")
                .withDisplayName("storagevault1")
                .withHighCapacityDatabaseStorageInput(new ExascaleDbStorageInputDetails().withTotalSizeInGbs(1))
                .withTimeZone("hyjcftlal"))
            .withZones(Arrays.asList("npqjhyekyumfybqas"))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
