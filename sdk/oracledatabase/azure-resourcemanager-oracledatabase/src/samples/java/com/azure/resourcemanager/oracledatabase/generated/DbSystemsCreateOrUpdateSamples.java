// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.resourcemanager.oracledatabase.models.ComputeModel;
import com.azure.resourcemanager.oracledatabase.models.DbSystemDatabaseEditionType;
import com.azure.resourcemanager.oracledatabase.models.DbSystemOptions;
import com.azure.resourcemanager.oracledatabase.models.DbSystemProperties;
import com.azure.resourcemanager.oracledatabase.models.DiskRedundancyType;
import com.azure.resourcemanager.oracledatabase.models.StorageManagementType;
import com.azure.resourcemanager.oracledatabase.models.StorageVolumePerformanceMode;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for DbSystems CreateOrUpdate.
 */
public final class DbSystemsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2025-09-01/DbSystems_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: DbSystems_CreateOrUpdate_MaximumSet.
     * 
     * @param manager Entry point to OracleDatabaseManager.
     */
    public static void
        dbSystemsCreateOrUpdateMaximumSet(com.azure.resourcemanager.oracledatabase.OracleDatabaseManager manager) {
        manager.dbSystems()
            .define("dbsystem1")
            .withRegion("uuh")
            .withExistingResourceGroup("rgopenapi")
            .withTags(mapOf("key2549", "fakeTokenPlaceholder"))
            .withProperties(new DbSystemProperties().withResourceAnchorId(
                "/subscriptions/00000000-0000-4025-0000-000000000000/resourceGroups/rg001/providers/Oracle.Database/resourceAnchors/resourceanchor1")
                .withNetworkAnchorId(
                    "/subscriptions/00000000-0000-4025-0000-000000000000/resourceGroups/rg001/providers/Oracle.Database/networkAnchors/networkanchor1")
                .withClusterName("icshqxm")
                .withDisplayName(
                    "cpvibowyttzngughrisxfglqnffhtbjacuskwmixpczatxyrmrrgjsokonbolesdufrvuganmokwjkziisezqbvhmxtftldjulyixvmrcpmtlhynhbdlufcjdmmlbvcjdwbumjzdgwrxthntbbzscyrgmcfmkkowpujydlofklcrhdhoefeyl")
                .withInitialDataStorageSizeInGb(19)
                .withDbSystemOptions(new DbSystemOptions().withStorageManagement(StorageManagementType.LVM))
                .withDiskRedundancy(DiskRedundancyType.HIGH)
                .withHostname("krixp")
                .withNodeCount(24)
                .withShape(
                    "kcknzpixkpolhxpcvpzwhjjvyafciktxguoljnixmztvkfryxaqogtrefbjbibzlbojjnuhrrxninevocnigpzenshgqozclxyhzwkavncfvekfpmbxhinwqvupoacgascnmqvplqckjrqbxsejzprsvgvmvkbuvncffjv")
                .withSshPublicKeys(Arrays.asList("qtozhgwrjzkmwvdsggbivnbcwgykjnuvugqwmzompvbyfi"))
                .withStorageVolumePerformanceMode(StorageVolumePerformanceMode.BALANCED)
                .withTimeZone("gyrlmvdtseawpykcpwlgexrcffciyavsshsekacwcfkubcqdbrliy")
                .withComputeModel(ComputeModel.ECPU)
                .withComputeCount(28)
                .withDatabaseEdition(DbSystemDatabaseEditionType.STANDARD_EDITION)
                .withAdminPassword("fakeTokenPlaceholder")
                .withDbVersion("nuzcyzulicdscaxxleansibdtqxhf"))
            .withZones(Arrays.asList("pstozrrpkhlaffxt"))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
