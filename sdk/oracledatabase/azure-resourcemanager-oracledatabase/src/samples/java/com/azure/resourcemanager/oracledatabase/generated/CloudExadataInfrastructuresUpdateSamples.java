// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructure;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructureUpdateProperties;
import com.azure.resourcemanager.oracledatabase.models.CustomerContact;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeek;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeekName;
import com.azure.resourcemanager.oracledatabase.models.MaintenanceWindow;
import com.azure.resourcemanager.oracledatabase.models.Month;
import com.azure.resourcemanager.oracledatabase.models.MonthName;
import com.azure.resourcemanager.oracledatabase.models.PatchingMode;
import com.azure.resourcemanager.oracledatabase.models.Preference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for CloudExadataInfrastructures Update.
 */
public final class CloudExadataInfrastructuresUpdateSamples {
    /*
     * x-ms-original-file: 2025-09-01/CloudExadataInfrastructures_Update_MaximumSet_Gen.json
     */
    /**
     * Sample code: Patch Exadata Infrastructure - generated by [MaximumSet] rule.
     * 
     * @param manager Entry point to OracleDatabaseManager.
     */
    public static void patchExadataInfrastructureGeneratedByMaximumSetRule(
        com.azure.resourcemanager.oracledatabase.OracleDatabaseManager manager) {
        CloudExadataInfrastructure resource = manager.cloudExadataInfrastructures()
            .getByResourceGroupWithResponse("rgopenapi", "cloudexaInfra1", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withTags(mapOf("key831", "fakeTokenPlaceholder"))
            .withZones(Arrays.asList("wl"))
            .withProperties(new CloudExadataInfrastructureUpdateProperties().withComputeCount(9)
                .withStorageCount(4)
                .withMaintenanceWindow(new MaintenanceWindow().withPreference(Preference.NO_PREFERENCE)
                    .withMonths(Arrays.asList(new Month().withName(MonthName.JANUARY)))
                    .withWeeksOfMonth(Arrays.asList(0))
                    .withDaysOfWeek(Arrays.asList(new DayOfWeek().withName(DayOfWeekName.MONDAY)))
                    .withHoursOfDay(Arrays.asList(0))
                    .withLeadTimeInWeeks(10)
                    .withPatchingMode(PatchingMode.ROLLING)
                    .withCustomActionTimeoutInMins(120)
                    .withIsCustomActionTimeoutEnabled(true)
                    .withIsMonthlyPatchingEnabled(true))
                .withCustomerContacts(Arrays.asList(new CustomerContact().withEmail("dummyemail@microsoft.com")))
                .withDisplayName("displayName"))
            .apply();
    }

    /*
     * x-ms-original-file: 2025-09-01/CloudExadataInfrastructures_Update_MinimumSet_Gen.json
     */
    /**
     * Sample code: Patch Exadata Infrastructure - generated by [MinimumSet] rule.
     * 
     * @param manager Entry point to OracleDatabaseManager.
     */
    public static void patchExadataInfrastructureGeneratedByMinimumSetRule(
        com.azure.resourcemanager.oracledatabase.OracleDatabaseManager manager) {
        CloudExadataInfrastructure resource = manager.cloudExadataInfrastructures()
            .getByResourceGroupWithResponse("rgopenapi", "cloudexainfra1", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update().apply();
    }

    /*
     * x-ms-original-file: 2025-09-01/exaInfra_patch.json
     */
    /**
     * Sample code: CloudExadataInfrastructures_update.
     * 
     * @param manager Entry point to OracleDatabaseManager.
     */
    public static void
        cloudExadataInfrastructuresUpdate(com.azure.resourcemanager.oracledatabase.OracleDatabaseManager manager) {
        CloudExadataInfrastructure resource = manager.cloudExadataInfrastructures()
            .getByResourceGroupWithResponse("rg000", "infra1", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update().apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
