// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.resourcemanager.oracledatabase.models.CloudVmCluster;
import com.azure.resourcemanager.oracledatabase.models.CloudVmClusterUpdateProperties;
import com.azure.resourcemanager.oracledatabase.models.DataCollectionOptions;
import com.azure.resourcemanager.oracledatabase.models.FileSystemConfigurationDetails;
import com.azure.resourcemanager.oracledatabase.models.LicenseModel;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for CloudVmClusters Update.
 */
public final class CloudVmClustersUpdateSamples {
    /*
     * x-ms-original-file: 2025-09-01/CloudVmClusters_Update_MaximumSet_Gen.json
     */
    /**
     * Sample code: Patch VM Cluster - generated by [MaximumSet] rule.
     * 
     * @param manager Entry point to OracleDatabaseManager.
     */
    public static void patchVMClusterGeneratedByMaximumSetRule(
        com.azure.resourcemanager.oracledatabase.OracleDatabaseManager manager) {
        CloudVmCluster resource = manager.cloudVmClusters()
            .getByResourceGroupWithResponse("rgopenapi", "cloudvmcluster1", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withTags(mapOf("key4668", "fakeTokenPlaceholder"))
            .withProperties(new CloudVmClusterUpdateProperties().withStorageSizeInGbs(17)
                .withFileSystemConfigurationDetails(Arrays.asList(
                    new FileSystemConfigurationDetails().withMountPoint("gukfhjlmkqfqdgb").withFileSystemSizeGb(20)))
                .withDataStorageSizeInTbs(29.0D)
                .withDbNodeStorageSizeInGbs(24)
                .withMemorySizeInGbs(9)
                .withCpuCoreCount(18)
                .withOcpuCount(7.0D)
                .withSshPublicKeys(Arrays.asList("hazhcc"))
                .withLicenseModel(LicenseModel.LICENSE_INCLUDED)
                .withDataCollectionOptions(new DataCollectionOptions().withIsDiagnosticsEventsEnabled(true)
                    .withIsHealthMonitoringEnabled(true)
                    .withIsIncidentLogsEnabled(true))
                .withDisplayName("hvdyewkjqjxwzinkqnnsqxbmccteohzumz")
                .withComputeNodes(
                    Arrays.asList("ggficcnjgibtuqgdbbrzyckmtlhddecfcvjurboqfufqchgpvwmlcdcyyxnjivpkvsvr")))
            .apply();
    }

    /*
     * x-ms-original-file: 2025-09-01/vmClusters_patch.json
     */
    /**
     * Sample code: CloudVmClusters_update.
     * 
     * @param manager Entry point to OracleDatabaseManager.
     */
    public static void cloudVmClustersUpdate(com.azure.resourcemanager.oracledatabase.OracleDatabaseManager manager) {
        CloudVmCluster resource = manager.cloudVmClusters()
            .getByResourceGroupWithResponse("rg000", "cluster1", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update().apply();
    }

    /*
     * x-ms-original-file: 2025-09-01/CloudVmClusters_Update_MinimumSet_Gen.json
     */
    /**
     * Sample code: Patch VM Cluster - generated by [MinimumSet] rule.
     * 
     * @param manager Entry point to OracleDatabaseManager.
     */
    public static void patchVMClusterGeneratedByMinimumSetRule(
        com.azure.resourcemanager.oracledatabase.OracleDatabaseManager manager) {
        CloudVmCluster resource = manager.cloudVmClusters()
            .getByResourceGroupWithResponse("rgopenapi", "cloudvmcluster1", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update().apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
