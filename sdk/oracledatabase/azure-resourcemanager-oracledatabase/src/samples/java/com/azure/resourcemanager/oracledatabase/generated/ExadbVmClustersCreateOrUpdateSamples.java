// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.resourcemanager.oracledatabase.models.DataCollectionOptions;
import com.azure.resourcemanager.oracledatabase.models.ExadbVmClusterProperties;
import com.azure.resourcemanager.oracledatabase.models.ExadbVmClusterStorageDetails;
import com.azure.resourcemanager.oracledatabase.models.LicenseModel;
import com.azure.resourcemanager.oracledatabase.models.NsgCidr;
import com.azure.resourcemanager.oracledatabase.models.PortRange;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ExadbVmClusters CreateOrUpdate.
 */
public final class ExadbVmClustersCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2025-09-01/ExadbVmClusters_CreateOrUpdate_MinimumSet_Gen.json
     */
    /**
     * Sample code: ExadbVmClusters_CreateOrUpdate_MaximumSet - generated by [MinimumSet] rule.
     * 
     * @param manager Entry point to OracleDatabaseManager.
     */
    public static void exadbVmClustersCreateOrUpdateMaximumSetGeneratedByMinimumSetRule(
        com.azure.resourcemanager.oracledatabase.OracleDatabaseManager manager) {
        manager.exadbVmClusters()
            .define("exadbVmClusterName1")
            .withRegion("eastus")
            .withExistingResourceGroup("rgopenapi")
            .create();
    }

    /*
     * x-ms-original-file: 2025-09-01/ExadbVmClusters_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: ExadbVmClusters_CreateOrUpdate_MaximumSet.
     * 
     * @param manager Entry point to OracleDatabaseManager.
     */
    public static void exadbVmClustersCreateOrUpdateMaximumSet(
        com.azure.resourcemanager.oracledatabase.OracleDatabaseManager manager) {
        manager.exadbVmClusters()
            .define("vmcluster1")
            .withRegion("dsmvbplxdvesmvsgdvorgxalwpqxwt")
            .withExistingResourceGroup("rgopenapi")
            .withTags(mapOf("key8577", "fakeTokenPlaceholder"))
            .withProperties(new ExadbVmClusterProperties().withClusterName("p")
                .withBackupSubnetCidr("ca")
                .withVnetId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1")
                .withSubnetId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1")
                .withDataCollectionOptions(new DataCollectionOptions().withIsDiagnosticsEventsEnabled(true)
                    .withIsHealthMonitoringEnabled(true)
                    .withIsIncidentLogsEnabled(true))
                .withDisplayName(
                    "zvnuzwcpevcsnhaheojscyiytcgxvtsuownoyrjddolqzpaalbyrgqgactzrafocjglzjzosrqewmsvdovubrczmlrjoahwgckbbhvimqfhmnrpuszndasfutdyyrvszdawdxvyfpgtoaemjvqpavsfsedbdhbqmqqtxxjthmjbswjbaymibfpbpzuy")
                .withDomain("akltvmctvumwfuqi")
                .withEnabledEcpuCount(0)
                .withExascaleDbStorageVaultId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/providers/Oracle.Database/exascaleDbStorageVaults/storageVaultName")
                .withGridImageOcid("ocid1.autonomousdatabase.oc1..aaaaa3klq")
                .withHostname("uwrzwwhrr")
                .withLicenseModel(LicenseModel.LICENSE_INCLUDED)
                .withNodeCount(30)
                .withNsgCidrs(Arrays.asList(new NsgCidr().withSource("10.0.0.0/16")
                    .withDestinationPortRange(new PortRange().withMin(1520).withMax(1522))))
                .withPrivateZoneOcid("ocid1.autonomousdatabase.oc1..aaaaa3klq")
                .withScanListenerPortTcp(30)
                .withScanListenerPortTcpSsl(14)
                .withShape("pzfyfjznebdsakeira")
                .withSshPublicKeys(Arrays.asList("wzzayf"))
                .withSystemVersion("ssqzevdtjtcnxpdspcyqzgdtmonqjj")
                .withTimeZone(
                    "lkqvpvoczhoytxmeukzepgqgpdvdnigwxfojzfanqhracxsvgchwahzcifrkxlknixdrsopatguwccnejgyehnwfrvfedlefgneiudaqxbqnjkjedmcjocfvjdabwlyridcjvhzmlomgotwvnqqsrdjufsmebedckwwurmdoddknnfsm")
                .withTotalEcpuCount(10)
                .withVmFileSystemStorage(new ExadbVmClusterStorageDetails().withTotalSizeInGbs(18)))
            .withZones(Arrays.asList("ozwhowofqaq"))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
