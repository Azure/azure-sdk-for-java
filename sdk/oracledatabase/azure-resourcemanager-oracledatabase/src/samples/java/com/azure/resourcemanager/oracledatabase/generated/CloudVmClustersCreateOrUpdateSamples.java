// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.resourcemanager.oracledatabase.models.CloudVmClusterProperties;
import com.azure.resourcemanager.oracledatabase.models.DataCollectionOptions;
import com.azure.resourcemanager.oracledatabase.models.FileSystemConfigurationDetails;
import com.azure.resourcemanager.oracledatabase.models.LicenseModel;
import com.azure.resourcemanager.oracledatabase.models.NsgCidr;
import com.azure.resourcemanager.oracledatabase.models.PortRange;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for CloudVmClusters CreateOrUpdate.
 */
public final class CloudVmClustersCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2025-09-01/CloudVmClusters_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: Create VM Cluster - generated by [MaximumSet] rule.
     * 
     * @param manager Entry point to OracleDatabaseManager.
     */
    public static void createVMClusterGeneratedByMaximumSetRule(
        com.azure.resourcemanager.oracledatabase.OracleDatabaseManager manager) {
        manager.cloudVmClusters()
            .define("cloudvmcluster1")
            .withRegion("eastus")
            .withExistingResourceGroup("rgopenapi")
            .withTags(mapOf())
            .withProperties(new CloudVmClusterProperties().withStorageSizeInGbs(1000)
                .withFileSystemConfigurationDetails(Arrays.asList(
                    new FileSystemConfigurationDetails().withMountPoint("gukfhjlmkqfqdgb").withFileSystemSizeGb(20)))
                .withDataStorageSizeInTbs(1000.0D)
                .withDbNodeStorageSizeInGbs(1000)
                .withMemorySizeInGbs(1000)
                .withTimeZone("UTC")
                .withZoneId("ocid1..aaaa")
                .withHostname("hostname1")
                .withDomain("domain1")
                .withCpuCoreCount(2)
                .withOcpuCount(3.0D)
                .withClusterName("cluster1")
                .withDataStoragePercentage(100)
                .withIsLocalBackupEnabled(true)
                .withCloudExadataInfrastructureId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/cloudExadataInfrastructures/infra1")
                .withIsSparseDiskgroupEnabled(true)
                .withSystemVersion("v1")
                .withSshPublicKeys(Arrays.asList("ssh-key 1"))
                .withLicenseModel(LicenseModel.LICENSE_INCLUDED)
                .withScanListenerPortTcp(1050)
                .withScanListenerPortTcpSsl(1025)
                .withVnetId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1")
                .withGiVersion("19.0.0.0")
                .withSubnetId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1")
                .withBackupSubnetCidr("172.17.5.0/24")
                .withNsgCidrs(Arrays.asList(
                    new NsgCidr().withSource("10.0.0.0/16")
                        .withDestinationPortRange(new PortRange().withMin(1520).withMax(1522)),
                    new NsgCidr().withSource("10.10.0.0/24")
                        .withDestinationPortRange(new PortRange().withMin(9434).withMax(11996))))
                .withDataCollectionOptions(new DataCollectionOptions().withIsDiagnosticsEventsEnabled(true)
                    .withIsHealthMonitoringEnabled(true)
                    .withIsIncidentLogsEnabled(true))
                .withDisplayName("cluster 1")
                .withComputeNodes(Arrays.asList("ggficcnjgibtuqgdbbrzyckmtlhddecfcvjurboqfufqchgpvwmlcdcyyxnjivpkvsvr"))
                .withDbServers(Arrays.asList("ocid1..aaaa")))
            .create();
    }

    /*
     * x-ms-original-file: 2025-09-01/CloudVmClusters_CreateOrUpdate_MinimumSet_Gen.json
     */
    /**
     * Sample code: Create VM Cluster - generated by [MinimumSet] rule.
     * 
     * @param manager Entry point to OracleDatabaseManager.
     */
    public static void createVMClusterGeneratedByMinimumSetRule(
        com.azure.resourcemanager.oracledatabase.OracleDatabaseManager manager) {
        manager.cloudVmClusters()
            .define("cloudvmcluster1")
            .withRegion("eastus")
            .withExistingResourceGroup("rgopenapi")
            .create();
    }

    /*
     * x-ms-original-file: 2025-09-01/vmClusters_create.json
     */
    /**
     * Sample code: CloudVmClusters_createOrUpdate.
     * 
     * @param manager Entry point to OracleDatabaseManager.
     */
    public static void
        cloudVmClustersCreateOrUpdate(com.azure.resourcemanager.oracledatabase.OracleDatabaseManager manager) {
        manager.cloudVmClusters()
            .define("cluster1")
            .withRegion("eastus")
            .withExistingResourceGroup("rg000")
            .withTags(mapOf("tagK1", "tagV1"))
            .withProperties(new CloudVmClusterProperties().withDataStorageSizeInTbs(1000.0D)
                .withDbNodeStorageSizeInGbs(1000)
                .withMemorySizeInGbs(1000)
                .withTimeZone("UTC")
                .withHostname("hostname1")
                .withDomain("domain1")
                .withCpuCoreCount(2)
                .withOcpuCount(3.0D)
                .withClusterName("cluster1")
                .withDataStoragePercentage(100)
                .withIsLocalBackupEnabled(false)
                .withCloudExadataInfrastructureId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/cloudExadataInfrastructures/infra1")
                .withIsSparseDiskgroupEnabled(false)
                .withSshPublicKeys(Arrays.asList("ssh-key 1"))
                .withLicenseModel(LicenseModel.LICENSE_INCLUDED)
                .withScanListenerPortTcp(1050)
                .withScanListenerPortTcpSsl(1025)
                .withVnetId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1")
                .withGiVersion("19.0.0.0")
                .withSubnetId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1")
                .withBackupSubnetCidr("172.17.5.0/24")
                .withNsgCidrs(Arrays.asList(
                    new NsgCidr().withSource("10.0.0.0/16")
                        .withDestinationPortRange(new PortRange().withMin(1520).withMax(1522)),
                    new NsgCidr().withSource("10.10.0.0/24")))
                .withDataCollectionOptions(new DataCollectionOptions().withIsDiagnosticsEventsEnabled(false)
                    .withIsHealthMonitoringEnabled(false)
                    .withIsIncidentLogsEnabled(false))
                .withDisplayName("cluster 1")
                .withDbServers(Arrays.asList("ocid1..aaaa")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
