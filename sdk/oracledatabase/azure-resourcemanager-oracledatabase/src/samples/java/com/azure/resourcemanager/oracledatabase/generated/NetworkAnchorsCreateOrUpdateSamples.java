// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.resourcemanager.oracledatabase.models.DnsForwardingRule;
import com.azure.resourcemanager.oracledatabase.models.NetworkAnchorProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for NetworkAnchors CreateOrUpdate.
 */
public final class NetworkAnchorsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2025-09-01/NetworkAnchors_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: NetworkAnchors_CreateOrUpdate_MaximumSet.
     * 
     * @param manager Entry point to OracleDatabaseManager.
     */
    public static void
        networkAnchorsCreateOrUpdateMaximumSet(com.azure.resourcemanager.oracledatabase.OracleDatabaseManager manager) {
        manager.networkAnchors()
            .define("networkAnchor1")
            .withRegion("igamtwfkkmjnkcceh")
            .withExistingResourceGroup("rgopenapi")
            .withTags(mapOf("key4863", "fakeTokenPlaceholder"))
            .withProperties(new NetworkAnchorProperties().withResourceAnchorId("ivxnsdkelptazxrbzzrs")
                .withSubnetId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1")
                .withOciVcnDnsLabel("taqimtjhlsshwakiaocbsrewvkq")
                .withOciBackupCidrBlock("i")
                .withIsOracleToAzureDnsZoneSyncEnabled(true)
                .withIsOracleDnsListeningEndpointEnabled(true)
                .withIsOracleDnsForwardingEndpointEnabled(true)
                .withDnsForwardingRules(Arrays
                    .asList(new DnsForwardingRule().withDomainNames("domain1, domain2").withForwardingIpAddress("qe"))))
            .withZones(Arrays.asList("qwrgwcmycokwbhdafhoheaxzoxx"))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
