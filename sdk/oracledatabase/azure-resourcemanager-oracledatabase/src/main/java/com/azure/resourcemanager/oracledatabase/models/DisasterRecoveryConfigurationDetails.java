// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Configurations of a Disaster Recovery Details.
 */
@Fluent
public final class DisasterRecoveryConfigurationDetails
    implements JsonSerializable<DisasterRecoveryConfigurationDetails> {
    /*
     * Indicates the disaster recovery (DR) type of the Autonomous Database Serverless instance. Autonomous Data Guard
     * (ADG) DR type provides business critical DR with a faster recovery time objective (RTO) during failover or
     * switchover. Backup-based DR type provides lower cost DR with a slower RTO during failover or switchover.
     */
    private DisasterRecoveryType disasterRecoveryType;

    /*
     * Time and date stored as an RFC 3339 formatted timestamp string. For example, 2022-01-01T12:00:00.000Z would set a
     * limit for the snapshot standby to be converted back to a cross-region standby database.
     */
    private OffsetDateTime timeSnapshotStandbyEnabledTill;

    /*
     * Indicates if user wants to convert to a snapshot standby. For example, true would set a standby database to
     * snapshot standby database. False would set a snapshot standby database back to regular standby database.
     */
    private Boolean isSnapshotStandby;

    /*
     * If true, 7 days worth of backups are replicated across regions for Cross-Region ADB or Backup-Based DR between
     * Primary and Standby. If false, the backups taken on the Primary are not replicated to the Standby database.
     */
    private Boolean isReplicateAutomaticBackups;

    /**
     * Creates an instance of DisasterRecoveryConfigurationDetails class.
     */
    public DisasterRecoveryConfigurationDetails() {
    }

    /**
     * Get the disasterRecoveryType property: Indicates the disaster recovery (DR) type of the Autonomous Database
     * Serverless instance. Autonomous Data Guard (ADG) DR type provides business critical DR with a faster recovery
     * time objective (RTO) during failover or switchover. Backup-based DR type provides lower cost DR with a slower RTO
     * during failover or switchover.
     * 
     * @return the disasterRecoveryType value.
     */
    public DisasterRecoveryType disasterRecoveryType() {
        return this.disasterRecoveryType;
    }

    /**
     * Set the disasterRecoveryType property: Indicates the disaster recovery (DR) type of the Autonomous Database
     * Serverless instance. Autonomous Data Guard (ADG) DR type provides business critical DR with a faster recovery
     * time objective (RTO) during failover or switchover. Backup-based DR type provides lower cost DR with a slower RTO
     * during failover or switchover.
     * 
     * @param disasterRecoveryType the disasterRecoveryType value to set.
     * @return the DisasterRecoveryConfigurationDetails object itself.
     */
    public DisasterRecoveryConfigurationDetails withDisasterRecoveryType(DisasterRecoveryType disasterRecoveryType) {
        this.disasterRecoveryType = disasterRecoveryType;
        return this;
    }

    /**
     * Get the timeSnapshotStandbyEnabledTill property: Time and date stored as an RFC 3339 formatted timestamp string.
     * For example, 2022-01-01T12:00:00.000Z would set a limit for the snapshot standby to be converted back to a
     * cross-region standby database.
     * 
     * @return the timeSnapshotStandbyEnabledTill value.
     */
    public OffsetDateTime timeSnapshotStandbyEnabledTill() {
        return this.timeSnapshotStandbyEnabledTill;
    }

    /**
     * Set the timeSnapshotStandbyEnabledTill property: Time and date stored as an RFC 3339 formatted timestamp string.
     * For example, 2022-01-01T12:00:00.000Z would set a limit for the snapshot standby to be converted back to a
     * cross-region standby database.
     * 
     * @param timeSnapshotStandbyEnabledTill the timeSnapshotStandbyEnabledTill value to set.
     * @return the DisasterRecoveryConfigurationDetails object itself.
     */
    public DisasterRecoveryConfigurationDetails
        withTimeSnapshotStandbyEnabledTill(OffsetDateTime timeSnapshotStandbyEnabledTill) {
        this.timeSnapshotStandbyEnabledTill = timeSnapshotStandbyEnabledTill;
        return this;
    }

    /**
     * Get the isSnapshotStandby property: Indicates if user wants to convert to a snapshot standby. For example, true
     * would set a standby database to snapshot standby database. False would set a snapshot standby database back to
     * regular standby database.
     * 
     * @return the isSnapshotStandby value.
     */
    public Boolean isSnapshotStandby() {
        return this.isSnapshotStandby;
    }

    /**
     * Set the isSnapshotStandby property: Indicates if user wants to convert to a snapshot standby. For example, true
     * would set a standby database to snapshot standby database. False would set a snapshot standby database back to
     * regular standby database.
     * 
     * @param isSnapshotStandby the isSnapshotStandby value to set.
     * @return the DisasterRecoveryConfigurationDetails object itself.
     */
    public DisasterRecoveryConfigurationDetails withIsSnapshotStandby(Boolean isSnapshotStandby) {
        this.isSnapshotStandby = isSnapshotStandby;
        return this;
    }

    /**
     * Get the isReplicateAutomaticBackups property: If true, 7 days worth of backups are replicated across regions for
     * Cross-Region ADB or Backup-Based DR between Primary and Standby. If false, the backups taken on the Primary are
     * not replicated to the Standby database.
     * 
     * @return the isReplicateAutomaticBackups value.
     */
    public Boolean isReplicateAutomaticBackups() {
        return this.isReplicateAutomaticBackups;
    }

    /**
     * Set the isReplicateAutomaticBackups property: If true, 7 days worth of backups are replicated across regions for
     * Cross-Region ADB or Backup-Based DR between Primary and Standby. If false, the backups taken on the Primary are
     * not replicated to the Standby database.
     * 
     * @param isReplicateAutomaticBackups the isReplicateAutomaticBackups value to set.
     * @return the DisasterRecoveryConfigurationDetails object itself.
     */
    public DisasterRecoveryConfigurationDetails withIsReplicateAutomaticBackups(Boolean isReplicateAutomaticBackups) {
        this.isReplicateAutomaticBackups = isReplicateAutomaticBackups;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("disasterRecoveryType",
            this.disasterRecoveryType == null ? null : this.disasterRecoveryType.toString());
        jsonWriter.writeStringField("timeSnapshotStandbyEnabledTill",
            this.timeSnapshotStandbyEnabledTill == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timeSnapshotStandbyEnabledTill));
        jsonWriter.writeBooleanField("isSnapshotStandby", this.isSnapshotStandby);
        jsonWriter.writeBooleanField("isReplicateAutomaticBackups", this.isReplicateAutomaticBackups);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DisasterRecoveryConfigurationDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DisasterRecoveryConfigurationDetails if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DisasterRecoveryConfigurationDetails.
     */
    public static DisasterRecoveryConfigurationDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DisasterRecoveryConfigurationDetails deserializedDisasterRecoveryConfigurationDetails
                = new DisasterRecoveryConfigurationDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("disasterRecoveryType".equals(fieldName)) {
                    deserializedDisasterRecoveryConfigurationDetails.disasterRecoveryType
                        = DisasterRecoveryType.fromString(reader.getString());
                } else if ("timeSnapshotStandbyEnabledTill".equals(fieldName)) {
                    deserializedDisasterRecoveryConfigurationDetails.timeSnapshotStandbyEnabledTill = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("isSnapshotStandby".equals(fieldName)) {
                    deserializedDisasterRecoveryConfigurationDetails.isSnapshotStandby
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isReplicateAutomaticBackups".equals(fieldName)) {
                    deserializedDisasterRecoveryConfigurationDetails.isReplicateAutomaticBackups
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDisasterRecoveryConfigurationDetails;
        });
    }
}
