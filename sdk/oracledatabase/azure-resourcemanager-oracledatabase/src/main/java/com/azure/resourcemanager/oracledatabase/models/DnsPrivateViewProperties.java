// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Views resource model.
 */
@Immutable
public final class DnsPrivateViewProperties implements JsonSerializable<DnsPrivateViewProperties> {
    /*
     * The OCID of the view
     */
    private String ocid;

    /*
     * The display name of the view resource
     */
    private String displayName;

    /*
     * A Boolean flag indicating whether or not parts of the resource are unable to be explicitly managed.
     */
    private boolean isProtected;

    /*
     * Views lifecycleState
     */
    private DnsPrivateViewsLifecycleState lifecycleState;

    /*
     * The canonical absolute URL of the resource.
     */
    private String self;

    /*
     * views timeCreated
     */
    private OffsetDateTime timeCreated;

    /*
     * views timeCreated
     */
    private OffsetDateTime timeUpdated;

    /*
     * Azure resource provisioning state.
     */
    private ResourceProvisioningState provisioningState;

    /**
     * Creates an instance of DnsPrivateViewProperties class.
     */
    private DnsPrivateViewProperties() {
    }

    /**
     * Get the ocid property: The OCID of the view.
     * 
     * @return the ocid value.
     */
    public String ocid() {
        return this.ocid;
    }

    /**
     * Get the displayName property: The display name of the view resource.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the isProtected property: A Boolean flag indicating whether or not parts of the resource are unable to be
     * explicitly managed.
     * 
     * @return the isProtected value.
     */
    public boolean isProtected() {
        return this.isProtected;
    }

    /**
     * Get the lifecycleState property: Views lifecycleState.
     * 
     * @return the lifecycleState value.
     */
    public DnsPrivateViewsLifecycleState lifecycleState() {
        return this.lifecycleState;
    }

    /**
     * Get the self property: The canonical absolute URL of the resource.
     * 
     * @return the self value.
     */
    public String self() {
        return this.self;
    }

    /**
     * Get the timeCreated property: views timeCreated.
     * 
     * @return the timeCreated value.
     */
    public OffsetDateTime timeCreated() {
        return this.timeCreated;
    }

    /**
     * Get the timeUpdated property: views timeCreated.
     * 
     * @return the timeUpdated value.
     */
    public OffsetDateTime timeUpdated() {
        return this.timeUpdated;
    }

    /**
     * Get the provisioningState property: Azure resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ocid() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property ocid in model DnsPrivateViewProperties"));
        }
        if (displayName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property displayName in model DnsPrivateViewProperties"));
        }
        if (lifecycleState() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property lifecycleState in model DnsPrivateViewProperties"));
        }
        if (self() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property self in model DnsPrivateViewProperties"));
        }
        if (timeCreated() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property timeCreated in model DnsPrivateViewProperties"));
        }
        if (timeUpdated() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property timeUpdated in model DnsPrivateViewProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DnsPrivateViewProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ocid", this.ocid);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeBooleanField("isProtected", this.isProtected);
        jsonWriter.writeStringField("lifecycleState",
            this.lifecycleState == null ? null : this.lifecycleState.toString());
        jsonWriter.writeStringField("self", this.self);
        jsonWriter.writeStringField("timeCreated",
            this.timeCreated == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timeCreated));
        jsonWriter.writeStringField("timeUpdated",
            this.timeUpdated == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timeUpdated));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DnsPrivateViewProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DnsPrivateViewProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DnsPrivateViewProperties.
     */
    public static DnsPrivateViewProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DnsPrivateViewProperties deserializedDnsPrivateViewProperties = new DnsPrivateViewProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ocid".equals(fieldName)) {
                    deserializedDnsPrivateViewProperties.ocid = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedDnsPrivateViewProperties.displayName = reader.getString();
                } else if ("isProtected".equals(fieldName)) {
                    deserializedDnsPrivateViewProperties.isProtected = reader.getBoolean();
                } else if ("lifecycleState".equals(fieldName)) {
                    deserializedDnsPrivateViewProperties.lifecycleState
                        = DnsPrivateViewsLifecycleState.fromString(reader.getString());
                } else if ("self".equals(fieldName)) {
                    deserializedDnsPrivateViewProperties.self = reader.getString();
                } else if ("timeCreated".equals(fieldName)) {
                    deserializedDnsPrivateViewProperties.timeCreated = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("timeUpdated".equals(fieldName)) {
                    deserializedDnsPrivateViewProperties.timeUpdated = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDnsPrivateViewProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDnsPrivateViewProperties;
        });
    }
}
