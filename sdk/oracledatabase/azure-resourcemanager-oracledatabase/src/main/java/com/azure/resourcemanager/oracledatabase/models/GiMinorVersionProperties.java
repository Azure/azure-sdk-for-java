// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Oracle Grid Infrastructure (GI) minor version properties.
 */
@Immutable
public final class GiMinorVersionProperties implements JsonSerializable<GiMinorVersionProperties> {
    /*
     * A valid Oracle Grid Infrastructure (GI) software version.
     */
    private String version;

    /*
     * Grid Infrastructure Image Id
     */
    private String gridImageOcid;

    /**
     * Creates an instance of GiMinorVersionProperties class.
     */
    private GiMinorVersionProperties() {
    }

    /**
     * Get the version property: A valid Oracle Grid Infrastructure (GI) software version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the gridImageOcid property: Grid Infrastructure Image Id.
     * 
     * @return the gridImageOcid value.
     */
    public String gridImageOcid() {
        return this.gridImageOcid;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (version() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property version in model GiMinorVersionProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GiMinorVersionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeStringField("gridImageOcid", this.gridImageOcid);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GiMinorVersionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GiMinorVersionProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GiMinorVersionProperties.
     */
    public static GiMinorVersionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GiMinorVersionProperties deserializedGiMinorVersionProperties = new GiMinorVersionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedGiMinorVersionProperties.version = reader.getString();
                } else if ("gridImageOcid".equals(fieldName)) {
                    deserializedGiMinorVersionProperties.gridImageOcid = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGiMinorVersionProperties;
        });
    }
}
