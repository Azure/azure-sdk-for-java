// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A rule for allowing inbound (INGRESS) IP packets.
 */
@Fluent
public final class NsgCidr implements JsonSerializable<NsgCidr> {
    /*
     * Conceptually, this is the range of IP addresses that a packet coming into the instance can come from.
     */
    private String source;

    /*
     * Destination port range to specify particular destination ports for TCP rules.
     */
    private PortRange destinationPortRange;

    /**
     * Creates an instance of NsgCidr class.
     */
    public NsgCidr() {
    }

    /**
     * Get the source property: Conceptually, this is the range of IP addresses that a packet coming into the instance
     * can come from.
     * 
     * @return the source value.
     */
    public String source() {
        return this.source;
    }

    /**
     * Set the source property: Conceptually, this is the range of IP addresses that a packet coming into the instance
     * can come from.
     * 
     * @param source the source value to set.
     * @return the NsgCidr object itself.
     */
    public NsgCidr withSource(String source) {
        this.source = source;
        return this;
    }

    /**
     * Get the destinationPortRange property: Destination port range to specify particular destination ports for TCP
     * rules.
     * 
     * @return the destinationPortRange value.
     */
    public PortRange destinationPortRange() {
        return this.destinationPortRange;
    }

    /**
     * Set the destinationPortRange property: Destination port range to specify particular destination ports for TCP
     * rules.
     * 
     * @param destinationPortRange the destinationPortRange value to set.
     * @return the NsgCidr object itself.
     */
    public NsgCidr withDestinationPortRange(PortRange destinationPortRange) {
        this.destinationPortRange = destinationPortRange;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (source() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property source in model NsgCidr"));
        }
        if (destinationPortRange() != null) {
            destinationPortRange().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NsgCidr.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("source", this.source);
        jsonWriter.writeJsonField("destinationPortRange", this.destinationPortRange);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NsgCidr from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NsgCidr if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NsgCidr.
     */
    public static NsgCidr fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NsgCidr deserializedNsgCidr = new NsgCidr();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("source".equals(fieldName)) {
                    deserializedNsgCidr.source = reader.getString();
                } else if ("destinationPortRange".equals(fieldName)) {
                    deserializedNsgCidr.destinationPortRange = PortRange.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNsgCidr;
        });
    }
}
