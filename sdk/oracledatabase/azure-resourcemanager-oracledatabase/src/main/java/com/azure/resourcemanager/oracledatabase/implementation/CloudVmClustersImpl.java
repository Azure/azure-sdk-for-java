// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.oracledatabase.fluent.CloudVmClustersClient;
import com.azure.resourcemanager.oracledatabase.fluent.models.CloudVmClusterInner;
import com.azure.resourcemanager.oracledatabase.fluent.models.PrivateIpAddressPropertiesInner;
import com.azure.resourcemanager.oracledatabase.models.AddRemoveDbNode;
import com.azure.resourcemanager.oracledatabase.models.CloudVmCluster;
import com.azure.resourcemanager.oracledatabase.models.CloudVmClusters;
import com.azure.resourcemanager.oracledatabase.models.PrivateIpAddressesFilter;
import com.azure.resourcemanager.oracledatabase.models.PrivateIpAddressProperties;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public final class CloudVmClustersImpl implements CloudVmClusters {
    private static final ClientLogger LOGGER = new ClientLogger(CloudVmClustersImpl.class);

    private final CloudVmClustersClient innerClient;

    private final com.azure.resourcemanager.oracledatabase.OracleDatabaseManager serviceManager;

    public CloudVmClustersImpl(CloudVmClustersClient innerClient,
        com.azure.resourcemanager.oracledatabase.OracleDatabaseManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<CloudVmCluster> list() {
        PagedIterable<CloudVmClusterInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CloudVmClusterImpl(inner1, this.manager()));
    }

    public PagedIterable<CloudVmCluster> list(Context context) {
        PagedIterable<CloudVmClusterInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CloudVmClusterImpl(inner1, this.manager()));
    }

    public PagedIterable<CloudVmCluster> listByResourceGroup(String resourceGroupName) {
        PagedIterable<CloudVmClusterInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CloudVmClusterImpl(inner1, this.manager()));
    }

    public PagedIterable<CloudVmCluster> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<CloudVmClusterInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CloudVmClusterImpl(inner1, this.manager()));
    }

    public Response<CloudVmCluster> getByResourceGroupWithResponse(String resourceGroupName, String cloudvmclustername,
        Context context) {
        Response<CloudVmClusterInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, cloudvmclustername, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CloudVmClusterImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CloudVmCluster getByResourceGroup(String resourceGroupName, String cloudvmclustername) {
        CloudVmClusterInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, cloudvmclustername);
        if (inner != null) {
            return new CloudVmClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String cloudvmclustername) {
        this.serviceClient().delete(resourceGroupName, cloudvmclustername);
    }

    public void delete(String resourceGroupName, String cloudvmclustername, Context context) {
        this.serviceClient().delete(resourceGroupName, cloudvmclustername, context);
    }

    public CloudVmCluster addVms(String resourceGroupName, String cloudvmclustername, AddRemoveDbNode body) {
        CloudVmClusterInner inner = this.serviceClient().addVms(resourceGroupName, cloudvmclustername, body);
        if (inner != null) {
            return new CloudVmClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CloudVmCluster addVms(String resourceGroupName, String cloudvmclustername, AddRemoveDbNode body,
        Context context) {
        CloudVmClusterInner inner = this.serviceClient().addVms(resourceGroupName, cloudvmclustername, body, context);
        if (inner != null) {
            return new CloudVmClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<List<PrivateIpAddressProperties>> listPrivateIpAddressesWithResponse(String resourceGroupName,
        String cloudvmclustername, PrivateIpAddressesFilter body, Context context) {
        Response<List<PrivateIpAddressPropertiesInner>> inner = this.serviceClient()
            .listPrivateIpAddressesWithResponse(resourceGroupName, cloudvmclustername, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                inner.getValue()
                    .stream()
                    .map(inner1 -> new PrivateIpAddressPropertiesImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public List<PrivateIpAddressProperties> listPrivateIpAddresses(String resourceGroupName, String cloudvmclustername,
        PrivateIpAddressesFilter body) {
        List<PrivateIpAddressPropertiesInner> inner
            = this.serviceClient().listPrivateIpAddresses(resourceGroupName, cloudvmclustername, body);
        if (inner != null) {
            return Collections.unmodifiableList(inner.stream()
                .map(inner1 -> new PrivateIpAddressPropertiesImpl(inner1, this.manager()))
                .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public CloudVmCluster removeVms(String resourceGroupName, String cloudvmclustername, AddRemoveDbNode body) {
        CloudVmClusterInner inner = this.serviceClient().removeVms(resourceGroupName, cloudvmclustername, body);
        if (inner != null) {
            return new CloudVmClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CloudVmCluster removeVms(String resourceGroupName, String cloudvmclustername, AddRemoveDbNode body,
        Context context) {
        CloudVmClusterInner inner
            = this.serviceClient().removeVms(resourceGroupName, cloudvmclustername, body, context);
        if (inner != null) {
            return new CloudVmClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CloudVmCluster getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cloudvmclustername = ResourceManagerUtils.getValueFromIdByName(id, "cloudVmClusters");
        if (cloudvmclustername == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'cloudVmClusters'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, cloudvmclustername, Context.NONE).getValue();
    }

    public Response<CloudVmCluster> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cloudvmclustername = ResourceManagerUtils.getValueFromIdByName(id, "cloudVmClusters");
        if (cloudvmclustername == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'cloudVmClusters'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, cloudvmclustername, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cloudvmclustername = ResourceManagerUtils.getValueFromIdByName(id, "cloudVmClusters");
        if (cloudvmclustername == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'cloudVmClusters'.", id)));
        }
        this.delete(resourceGroupName, cloudvmclustername, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cloudvmclustername = ResourceManagerUtils.getValueFromIdByName(id, "cloudVmClusters");
        if (cloudvmclustername == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'cloudVmClusters'.", id)));
        }
        this.delete(resourceGroupName, cloudvmclustername, context);
    }

    private CloudVmClustersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.oracledatabase.OracleDatabaseManager manager() {
        return this.serviceManager;
    }

    public CloudVmClusterImpl define(String name) {
        return new CloudVmClusterImpl(name, this.manager());
    }
}
