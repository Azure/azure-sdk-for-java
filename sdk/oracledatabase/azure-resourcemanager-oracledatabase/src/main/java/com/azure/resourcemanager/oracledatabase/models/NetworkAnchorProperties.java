// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Network Anchor properties.
 */
@Fluent
public final class NetworkAnchorProperties implements JsonSerializable<NetworkAnchorProperties> {
    /*
     * Corresponding resource anchor Azure ID
     */
    private String resourceAnchorId;

    /*
     * NetworkAnchor provisioning state
     */
    private AzureResourceProvisioningState provisioningState;

    /*
     * VNET for network connectivity
     */
    private String vnetId;

    /*
     * Client subnet
     */
    private String subnetId;

    /*
     * Delegated Azure subnet cidr block.
     */
    private String cidrBlock;

    /*
     * Oracle Cloud Infrastructure VCN OCID
     */
    private String ociVcnId;

    /*
     * OCI DNS label. This is optional if DNS config is provided.
     */
    private String ociVcnDnsLabel;

    /*
     * Oracle Cloud Infrastructure subnet OCID
     */
    private String ociSubnetId;

    /*
     * OCI backup subnet cidr block.
     */
    private String ociBackupCidrBlock;

    /*
     * Indicates whether DNS zone sync from OCI to Azure is enabled
     */
    private Boolean isOracleToAzureDnsZoneSyncEnabled;

    /*
     * Indicates whether the Oracle DNS listening endpoint is enabled
     */
    private Boolean isOracleDnsListeningEndpointEnabled;

    /*
     * Indicates whether the Oracle DNS forwarding endpoint is enabled
     */
    private Boolean isOracleDnsForwardingEndpointEnabled;

    /*
     * DNS forwarding rules
     */
    private List<DnsForwardingRule> dnsForwardingRules;

    /*
     * Comma-separated list of CIDRs that are allowed to send requests to the DNS listening endpoint
     */
    private String dnsListeningEndpointAllowedCidrs;

    /*
     * DNS listening endpoint IP address
     */
    private String dnsListeningEndpointIpAddress;

    /*
     * DNS forwarding endpoint IP address
     */
    private String dnsForwardingEndpointIpAddress;

    /*
     * Deep link to OCI console DNS Forwarding rules page
     */
    private String dnsForwardingRulesUrl;

    /*
     * Deep link to OCI console DNS Listening endpoint NSG rules
     */
    private String dnsListeningEndpointNsgRulesUrl;

    /*
     * Deep link to OCI console DNS Forwarding endpoint NSG rules
     */
    private String dnsForwardingEndpointNsgRulesUrl;

    /**
     * Creates an instance of NetworkAnchorProperties class.
     */
    public NetworkAnchorProperties() {
    }

    /**
     * Get the resourceAnchorId property: Corresponding resource anchor Azure ID.
     * 
     * @return the resourceAnchorId value.
     */
    public String resourceAnchorId() {
        return this.resourceAnchorId;
    }

    /**
     * Set the resourceAnchorId property: Corresponding resource anchor Azure ID.
     * 
     * @param resourceAnchorId the resourceAnchorId value to set.
     * @return the NetworkAnchorProperties object itself.
     */
    public NetworkAnchorProperties withResourceAnchorId(String resourceAnchorId) {
        this.resourceAnchorId = resourceAnchorId;
        return this;
    }

    /**
     * Get the provisioningState property: NetworkAnchor provisioning state.
     * 
     * @return the provisioningState value.
     */
    public AzureResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the vnetId property: VNET for network connectivity.
     * 
     * @return the vnetId value.
     */
    public String vnetId() {
        return this.vnetId;
    }

    /**
     * Get the subnetId property: Client subnet.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: Client subnet.
     * 
     * @param subnetId the subnetId value to set.
     * @return the NetworkAnchorProperties object itself.
     */
    public NetworkAnchorProperties withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the cidrBlock property: Delegated Azure subnet cidr block.
     * 
     * @return the cidrBlock value.
     */
    public String cidrBlock() {
        return this.cidrBlock;
    }

    /**
     * Get the ociVcnId property: Oracle Cloud Infrastructure VCN OCID.
     * 
     * @return the ociVcnId value.
     */
    public String ociVcnId() {
        return this.ociVcnId;
    }

    /**
     * Get the ociVcnDnsLabel property: OCI DNS label. This is optional if DNS config is provided.
     * 
     * @return the ociVcnDnsLabel value.
     */
    public String ociVcnDnsLabel() {
        return this.ociVcnDnsLabel;
    }

    /**
     * Set the ociVcnDnsLabel property: OCI DNS label. This is optional if DNS config is provided.
     * 
     * @param ociVcnDnsLabel the ociVcnDnsLabel value to set.
     * @return the NetworkAnchorProperties object itself.
     */
    public NetworkAnchorProperties withOciVcnDnsLabel(String ociVcnDnsLabel) {
        this.ociVcnDnsLabel = ociVcnDnsLabel;
        return this;
    }

    /**
     * Get the ociSubnetId property: Oracle Cloud Infrastructure subnet OCID.
     * 
     * @return the ociSubnetId value.
     */
    public String ociSubnetId() {
        return this.ociSubnetId;
    }

    /**
     * Get the ociBackupCidrBlock property: OCI backup subnet cidr block.
     * 
     * @return the ociBackupCidrBlock value.
     */
    public String ociBackupCidrBlock() {
        return this.ociBackupCidrBlock;
    }

    /**
     * Set the ociBackupCidrBlock property: OCI backup subnet cidr block.
     * 
     * @param ociBackupCidrBlock the ociBackupCidrBlock value to set.
     * @return the NetworkAnchorProperties object itself.
     */
    public NetworkAnchorProperties withOciBackupCidrBlock(String ociBackupCidrBlock) {
        this.ociBackupCidrBlock = ociBackupCidrBlock;
        return this;
    }

    /**
     * Get the isOracleToAzureDnsZoneSyncEnabled property: Indicates whether DNS zone sync from OCI to Azure is enabled.
     * 
     * @return the isOracleToAzureDnsZoneSyncEnabled value.
     */
    public Boolean isOracleToAzureDnsZoneSyncEnabled() {
        return this.isOracleToAzureDnsZoneSyncEnabled;
    }

    /**
     * Set the isOracleToAzureDnsZoneSyncEnabled property: Indicates whether DNS zone sync from OCI to Azure is enabled.
     * 
     * @param isOracleToAzureDnsZoneSyncEnabled the isOracleToAzureDnsZoneSyncEnabled value to set.
     * @return the NetworkAnchorProperties object itself.
     */
    public NetworkAnchorProperties withIsOracleToAzureDnsZoneSyncEnabled(Boolean isOracleToAzureDnsZoneSyncEnabled) {
        this.isOracleToAzureDnsZoneSyncEnabled = isOracleToAzureDnsZoneSyncEnabled;
        return this;
    }

    /**
     * Get the isOracleDnsListeningEndpointEnabled property: Indicates whether the Oracle DNS listening endpoint is
     * enabled.
     * 
     * @return the isOracleDnsListeningEndpointEnabled value.
     */
    public Boolean isOracleDnsListeningEndpointEnabled() {
        return this.isOracleDnsListeningEndpointEnabled;
    }

    /**
     * Set the isOracleDnsListeningEndpointEnabled property: Indicates whether the Oracle DNS listening endpoint is
     * enabled.
     * 
     * @param isOracleDnsListeningEndpointEnabled the isOracleDnsListeningEndpointEnabled value to set.
     * @return the NetworkAnchorProperties object itself.
     */
    public NetworkAnchorProperties
        withIsOracleDnsListeningEndpointEnabled(Boolean isOracleDnsListeningEndpointEnabled) {
        this.isOracleDnsListeningEndpointEnabled = isOracleDnsListeningEndpointEnabled;
        return this;
    }

    /**
     * Get the isOracleDnsForwardingEndpointEnabled property: Indicates whether the Oracle DNS forwarding endpoint is
     * enabled.
     * 
     * @return the isOracleDnsForwardingEndpointEnabled value.
     */
    public Boolean isOracleDnsForwardingEndpointEnabled() {
        return this.isOracleDnsForwardingEndpointEnabled;
    }

    /**
     * Set the isOracleDnsForwardingEndpointEnabled property: Indicates whether the Oracle DNS forwarding endpoint is
     * enabled.
     * 
     * @param isOracleDnsForwardingEndpointEnabled the isOracleDnsForwardingEndpointEnabled value to set.
     * @return the NetworkAnchorProperties object itself.
     */
    public NetworkAnchorProperties
        withIsOracleDnsForwardingEndpointEnabled(Boolean isOracleDnsForwardingEndpointEnabled) {
        this.isOracleDnsForwardingEndpointEnabled = isOracleDnsForwardingEndpointEnabled;
        return this;
    }

    /**
     * Get the dnsForwardingRules property: DNS forwarding rules.
     * 
     * @return the dnsForwardingRules value.
     */
    public List<DnsForwardingRule> dnsForwardingRules() {
        return this.dnsForwardingRules;
    }

    /**
     * Set the dnsForwardingRules property: DNS forwarding rules.
     * 
     * @param dnsForwardingRules the dnsForwardingRules value to set.
     * @return the NetworkAnchorProperties object itself.
     */
    public NetworkAnchorProperties withDnsForwardingRules(List<DnsForwardingRule> dnsForwardingRules) {
        this.dnsForwardingRules = dnsForwardingRules;
        return this;
    }

    /**
     * Get the dnsListeningEndpointAllowedCidrs property: Comma-separated list of CIDRs that are allowed to send
     * requests to the DNS listening endpoint.
     * 
     * @return the dnsListeningEndpointAllowedCidrs value.
     */
    public String dnsListeningEndpointAllowedCidrs() {
        return this.dnsListeningEndpointAllowedCidrs;
    }

    /**
     * Set the dnsListeningEndpointAllowedCidrs property: Comma-separated list of CIDRs that are allowed to send
     * requests to the DNS listening endpoint.
     * 
     * @param dnsListeningEndpointAllowedCidrs the dnsListeningEndpointAllowedCidrs value to set.
     * @return the NetworkAnchorProperties object itself.
     */
    public NetworkAnchorProperties withDnsListeningEndpointAllowedCidrs(String dnsListeningEndpointAllowedCidrs) {
        this.dnsListeningEndpointAllowedCidrs = dnsListeningEndpointAllowedCidrs;
        return this;
    }

    /**
     * Get the dnsListeningEndpointIpAddress property: DNS listening endpoint IP address.
     * 
     * @return the dnsListeningEndpointIpAddress value.
     */
    public String dnsListeningEndpointIpAddress() {
        return this.dnsListeningEndpointIpAddress;
    }

    /**
     * Get the dnsForwardingEndpointIpAddress property: DNS forwarding endpoint IP address.
     * 
     * @return the dnsForwardingEndpointIpAddress value.
     */
    public String dnsForwardingEndpointIpAddress() {
        return this.dnsForwardingEndpointIpAddress;
    }

    /**
     * Get the dnsForwardingRulesUrl property: Deep link to OCI console DNS Forwarding rules page.
     * 
     * @return the dnsForwardingRulesUrl value.
     */
    public String dnsForwardingRulesUrl() {
        return this.dnsForwardingRulesUrl;
    }

    /**
     * Get the dnsListeningEndpointNsgRulesUrl property: Deep link to OCI console DNS Listening endpoint NSG rules.
     * 
     * @return the dnsListeningEndpointNsgRulesUrl value.
     */
    public String dnsListeningEndpointNsgRulesUrl() {
        return this.dnsListeningEndpointNsgRulesUrl;
    }

    /**
     * Get the dnsForwardingEndpointNsgRulesUrl property: Deep link to OCI console DNS Forwarding endpoint NSG rules.
     * 
     * @return the dnsForwardingEndpointNsgRulesUrl value.
     */
    public String dnsForwardingEndpointNsgRulesUrl() {
        return this.dnsForwardingEndpointNsgRulesUrl;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceAnchorId", this.resourceAnchorId);
        jsonWriter.writeStringField("subnetId", this.subnetId);
        jsonWriter.writeStringField("ociVcnDnsLabel", this.ociVcnDnsLabel);
        jsonWriter.writeStringField("ociBackupCidrBlock", this.ociBackupCidrBlock);
        jsonWriter.writeBooleanField("isOracleToAzureDnsZoneSyncEnabled", this.isOracleToAzureDnsZoneSyncEnabled);
        jsonWriter.writeBooleanField("isOracleDnsListeningEndpointEnabled", this.isOracleDnsListeningEndpointEnabled);
        jsonWriter.writeBooleanField("isOracleDnsForwardingEndpointEnabled", this.isOracleDnsForwardingEndpointEnabled);
        jsonWriter.writeArrayField("dnsForwardingRules", this.dnsForwardingRules,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("dnsListeningEndpointAllowedCidrs", this.dnsListeningEndpointAllowedCidrs);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkAnchorProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkAnchorProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NetworkAnchorProperties.
     */
    public static NetworkAnchorProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkAnchorProperties deserializedNetworkAnchorProperties = new NetworkAnchorProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceAnchorId".equals(fieldName)) {
                    deserializedNetworkAnchorProperties.resourceAnchorId = reader.getString();
                } else if ("subnetId".equals(fieldName)) {
                    deserializedNetworkAnchorProperties.subnetId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNetworkAnchorProperties.provisioningState
                        = AzureResourceProvisioningState.fromString(reader.getString());
                } else if ("vnetId".equals(fieldName)) {
                    deserializedNetworkAnchorProperties.vnetId = reader.getString();
                } else if ("cidrBlock".equals(fieldName)) {
                    deserializedNetworkAnchorProperties.cidrBlock = reader.getString();
                } else if ("ociVcnId".equals(fieldName)) {
                    deserializedNetworkAnchorProperties.ociVcnId = reader.getString();
                } else if ("ociVcnDnsLabel".equals(fieldName)) {
                    deserializedNetworkAnchorProperties.ociVcnDnsLabel = reader.getString();
                } else if ("ociSubnetId".equals(fieldName)) {
                    deserializedNetworkAnchorProperties.ociSubnetId = reader.getString();
                } else if ("ociBackupCidrBlock".equals(fieldName)) {
                    deserializedNetworkAnchorProperties.ociBackupCidrBlock = reader.getString();
                } else if ("isOracleToAzureDnsZoneSyncEnabled".equals(fieldName)) {
                    deserializedNetworkAnchorProperties.isOracleToAzureDnsZoneSyncEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isOracleDnsListeningEndpointEnabled".equals(fieldName)) {
                    deserializedNetworkAnchorProperties.isOracleDnsListeningEndpointEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isOracleDnsForwardingEndpointEnabled".equals(fieldName)) {
                    deserializedNetworkAnchorProperties.isOracleDnsForwardingEndpointEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("dnsForwardingRules".equals(fieldName)) {
                    List<DnsForwardingRule> dnsForwardingRules
                        = reader.readArray(reader1 -> DnsForwardingRule.fromJson(reader1));
                    deserializedNetworkAnchorProperties.dnsForwardingRules = dnsForwardingRules;
                } else if ("dnsListeningEndpointAllowedCidrs".equals(fieldName)) {
                    deserializedNetworkAnchorProperties.dnsListeningEndpointAllowedCidrs = reader.getString();
                } else if ("dnsListeningEndpointIpAddress".equals(fieldName)) {
                    deserializedNetworkAnchorProperties.dnsListeningEndpointIpAddress = reader.getString();
                } else if ("dnsForwardingEndpointIpAddress".equals(fieldName)) {
                    deserializedNetworkAnchorProperties.dnsForwardingEndpointIpAddress = reader.getString();
                } else if ("dnsForwardingRulesUrl".equals(fieldName)) {
                    deserializedNetworkAnchorProperties.dnsForwardingRulesUrl = reader.getString();
                } else if ("dnsListeningEndpointNsgRulesUrl".equals(fieldName)) {
                    deserializedNetworkAnchorProperties.dnsListeningEndpointNsgRulesUrl = reader.getString();
                } else if ("dnsForwardingEndpointNsgRulesUrl".equals(fieldName)) {
                    deserializedNetworkAnchorProperties.dnsForwardingEndpointNsgRulesUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkAnchorProperties;
        });
    }
}
