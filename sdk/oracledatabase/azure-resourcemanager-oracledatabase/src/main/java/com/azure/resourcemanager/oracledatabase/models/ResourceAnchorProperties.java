// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Resource Anchor properties.
 */
@Immutable
public final class ResourceAnchorProperties implements JsonSerializable<ResourceAnchorProperties> {
    /*
     * ResourceAnchor provisioning state
     */
    private AzureResourceProvisioningState provisioningState;

    /*
     * Oracle Cloud Infrastructure compartment Id (ocid) which was created or linked by customer with resource anchor.
     * This compartmentId is different from where resource Anchor lives
     */
    private String linkedCompartmentId;

    /**
     * Creates an instance of ResourceAnchorProperties class.
     */
    public ResourceAnchorProperties() {
    }

    /**
     * Get the provisioningState property: ResourceAnchor provisioning state.
     * 
     * @return the provisioningState value.
     */
    public AzureResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the linkedCompartmentId property: Oracle Cloud Infrastructure compartment Id (ocid) which was created or
     * linked by customer with resource anchor. This compartmentId is different from where resource Anchor lives.
     * 
     * @return the linkedCompartmentId value.
     */
    public String linkedCompartmentId() {
        return this.linkedCompartmentId;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceAnchorProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceAnchorProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceAnchorProperties.
     */
    public static ResourceAnchorProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceAnchorProperties deserializedResourceAnchorProperties = new ResourceAnchorProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedResourceAnchorProperties.provisioningState
                        = AzureResourceProvisioningState.fromString(reader.getString());
                } else if ("linkedCompartmentId".equals(fieldName)) {
                    deserializedResourceAnchorProperties.linkedCompartmentId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceAnchorProperties;
        });
    }
}
