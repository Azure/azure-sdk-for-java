// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Autonomous Database Action Object.
 */
@Fluent
public final class AutonomousDatabaseLifecycleAction implements JsonSerializable<AutonomousDatabaseLifecycleAction> {
    /*
     * Autonomous Database lifecycle action
     */
    private AutonomousDatabaseLifecycleActionEnum action;

    /**
     * Creates an instance of AutonomousDatabaseLifecycleAction class.
     */
    public AutonomousDatabaseLifecycleAction() {
    }

    /**
     * Get the action property: Autonomous Database lifecycle action.
     * 
     * @return the action value.
     */
    public AutonomousDatabaseLifecycleActionEnum action() {
        return this.action;
    }

    /**
     * Set the action property: Autonomous Database lifecycle action.
     * 
     * @param action the action value to set.
     * @return the AutonomousDatabaseLifecycleAction object itself.
     */
    public AutonomousDatabaseLifecycleAction withAction(AutonomousDatabaseLifecycleActionEnum action) {
        this.action = action;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("action", this.action == null ? null : this.action.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutonomousDatabaseLifecycleAction from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutonomousDatabaseLifecycleAction if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AutonomousDatabaseLifecycleAction.
     */
    public static AutonomousDatabaseLifecycleAction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutonomousDatabaseLifecycleAction deserializedAutonomousDatabaseLifecycleAction
                = new AutonomousDatabaseLifecycleAction();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("action".equals(fieldName)) {
                    deserializedAutonomousDatabaseLifecycleAction.action
                        = AutonomousDatabaseLifecycleActionEnum.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutonomousDatabaseLifecycleAction;
        });
    }
}
