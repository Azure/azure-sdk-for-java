// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The exascale config request details for the Cloud Exadata infrastructure.
 */
@Fluent
public final class ConfigureExascaleCloudExadataInfrastructureDetails
    implements JsonSerializable<ConfigureExascaleCloudExadataInfrastructureDetails> {
    /*
     * Storage size needed for Exascale in GBs.
     */
    private int totalStorageInGbs;

    /**
     * Creates an instance of ConfigureExascaleCloudExadataInfrastructureDetails class.
     */
    public ConfigureExascaleCloudExadataInfrastructureDetails() {
    }

    /**
     * Get the totalStorageInGbs property: Storage size needed for Exascale in GBs.
     * 
     * @return the totalStorageInGbs value.
     */
    public int totalStorageInGbs() {
        return this.totalStorageInGbs;
    }

    /**
     * Set the totalStorageInGbs property: Storage size needed for Exascale in GBs.
     * 
     * @param totalStorageInGbs the totalStorageInGbs value to set.
     * @return the ConfigureExascaleCloudExadataInfrastructureDetails object itself.
     */
    public ConfigureExascaleCloudExadataInfrastructureDetails withTotalStorageInGbs(int totalStorageInGbs) {
        this.totalStorageInGbs = totalStorageInGbs;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("totalStorageInGbs", this.totalStorageInGbs);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConfigureExascaleCloudExadataInfrastructureDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConfigureExascaleCloudExadataInfrastructureDetails if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ConfigureExascaleCloudExadataInfrastructureDetails.
     */
    public static ConfigureExascaleCloudExadataInfrastructureDetails fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ConfigureExascaleCloudExadataInfrastructureDetails deserializedConfigureExascaleCloudExadataInfrastructureDetails
                = new ConfigureExascaleCloudExadataInfrastructureDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("totalStorageInGbs".equals(fieldName)) {
                    deserializedConfigureExascaleCloudExadataInfrastructureDetails.totalStorageInGbs = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConfigureExascaleCloudExadataInfrastructureDetails;
        });
    }
}
