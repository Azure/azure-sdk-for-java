// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The updatable properties of the NetworkAnchor.
 */
@Fluent
public final class NetworkAnchorUpdateProperties implements JsonSerializable<NetworkAnchorUpdateProperties> {
    /*
     * OCI backup subnet cidr block.
     */
    private String ociBackupCidrBlock;

    /*
     * Indicates whether DNS zone sync from OCI to Azure is enabled
     */
    private Boolean isOracleToAzureDnsZoneSyncEnabled;

    /*
     * Indicates whether the Oracle DNS listening endpoint is enabled
     */
    private Boolean isOracleDnsListeningEndpointEnabled;

    /*
     * Indicates whether the Oracle DNS forwarding endpoint is enabled
     */
    private Boolean isOracleDnsForwardingEndpointEnabled;

    /**
     * Creates an instance of NetworkAnchorUpdateProperties class.
     */
    public NetworkAnchorUpdateProperties() {
    }

    /**
     * Get the ociBackupCidrBlock property: OCI backup subnet cidr block.
     * 
     * @return the ociBackupCidrBlock value.
     */
    public String ociBackupCidrBlock() {
        return this.ociBackupCidrBlock;
    }

    /**
     * Set the ociBackupCidrBlock property: OCI backup subnet cidr block.
     * 
     * @param ociBackupCidrBlock the ociBackupCidrBlock value to set.
     * @return the NetworkAnchorUpdateProperties object itself.
     */
    public NetworkAnchorUpdateProperties withOciBackupCidrBlock(String ociBackupCidrBlock) {
        this.ociBackupCidrBlock = ociBackupCidrBlock;
        return this;
    }

    /**
     * Get the isOracleToAzureDnsZoneSyncEnabled property: Indicates whether DNS zone sync from OCI to Azure is enabled.
     * 
     * @return the isOracleToAzureDnsZoneSyncEnabled value.
     */
    public Boolean isOracleToAzureDnsZoneSyncEnabled() {
        return this.isOracleToAzureDnsZoneSyncEnabled;
    }

    /**
     * Set the isOracleToAzureDnsZoneSyncEnabled property: Indicates whether DNS zone sync from OCI to Azure is enabled.
     * 
     * @param isOracleToAzureDnsZoneSyncEnabled the isOracleToAzureDnsZoneSyncEnabled value to set.
     * @return the NetworkAnchorUpdateProperties object itself.
     */
    public NetworkAnchorUpdateProperties
        withIsOracleToAzureDnsZoneSyncEnabled(Boolean isOracleToAzureDnsZoneSyncEnabled) {
        this.isOracleToAzureDnsZoneSyncEnabled = isOracleToAzureDnsZoneSyncEnabled;
        return this;
    }

    /**
     * Get the isOracleDnsListeningEndpointEnabled property: Indicates whether the Oracle DNS listening endpoint is
     * enabled.
     * 
     * @return the isOracleDnsListeningEndpointEnabled value.
     */
    public Boolean isOracleDnsListeningEndpointEnabled() {
        return this.isOracleDnsListeningEndpointEnabled;
    }

    /**
     * Set the isOracleDnsListeningEndpointEnabled property: Indicates whether the Oracle DNS listening endpoint is
     * enabled.
     * 
     * @param isOracleDnsListeningEndpointEnabled the isOracleDnsListeningEndpointEnabled value to set.
     * @return the NetworkAnchorUpdateProperties object itself.
     */
    public NetworkAnchorUpdateProperties
        withIsOracleDnsListeningEndpointEnabled(Boolean isOracleDnsListeningEndpointEnabled) {
        this.isOracleDnsListeningEndpointEnabled = isOracleDnsListeningEndpointEnabled;
        return this;
    }

    /**
     * Get the isOracleDnsForwardingEndpointEnabled property: Indicates whether the Oracle DNS forwarding endpoint is
     * enabled.
     * 
     * @return the isOracleDnsForwardingEndpointEnabled value.
     */
    public Boolean isOracleDnsForwardingEndpointEnabled() {
        return this.isOracleDnsForwardingEndpointEnabled;
    }

    /**
     * Set the isOracleDnsForwardingEndpointEnabled property: Indicates whether the Oracle DNS forwarding endpoint is
     * enabled.
     * 
     * @param isOracleDnsForwardingEndpointEnabled the isOracleDnsForwardingEndpointEnabled value to set.
     * @return the NetworkAnchorUpdateProperties object itself.
     */
    public NetworkAnchorUpdateProperties
        withIsOracleDnsForwardingEndpointEnabled(Boolean isOracleDnsForwardingEndpointEnabled) {
        this.isOracleDnsForwardingEndpointEnabled = isOracleDnsForwardingEndpointEnabled;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ociBackupCidrBlock", this.ociBackupCidrBlock);
        jsonWriter.writeBooleanField("isOracleToAzureDnsZoneSyncEnabled", this.isOracleToAzureDnsZoneSyncEnabled);
        jsonWriter.writeBooleanField("isOracleDnsListeningEndpointEnabled", this.isOracleDnsListeningEndpointEnabled);
        jsonWriter.writeBooleanField("isOracleDnsForwardingEndpointEnabled", this.isOracleDnsForwardingEndpointEnabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkAnchorUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkAnchorUpdateProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkAnchorUpdateProperties.
     */
    public static NetworkAnchorUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkAnchorUpdateProperties deserializedNetworkAnchorUpdateProperties
                = new NetworkAnchorUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ociBackupCidrBlock".equals(fieldName)) {
                    deserializedNetworkAnchorUpdateProperties.ociBackupCidrBlock = reader.getString();
                } else if ("isOracleToAzureDnsZoneSyncEnabled".equals(fieldName)) {
                    deserializedNetworkAnchorUpdateProperties.isOracleToAzureDnsZoneSyncEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isOracleDnsListeningEndpointEnabled".equals(fieldName)) {
                    deserializedNetworkAnchorUpdateProperties.isOracleDnsListeningEndpointEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isOracleDnsForwardingEndpointEnabled".equals(fieldName)) {
                    deserializedNetworkAnchorUpdateProperties.isOracleDnsForwardingEndpointEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkAnchorUpdateProperties;
        });
    }
}
