// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AutonomousDbVersion resource model.
 */
@Immutable
public final class AutonomousDbVersionProperties implements JsonSerializable<AutonomousDbVersionProperties> {
    /*
     * Supported Autonomous Db versions.
     */
    private String version;

    /*
     * The Autonomous Database workload type
     */
    private WorkloadType dbWorkload;

    /*
     * True if this version of the Oracle Database software's default is free.
     */
    private Boolean isDefaultForFree;

    /*
     * True if this version of the Oracle Database software's default is paid.
     */
    private Boolean isDefaultForPaid;

    /*
     * True if this version of the Oracle Database software can be used for Always-Free Autonomous Databases.
     */
    private Boolean isFreeTierEnabled;

    /*
     * True if this version of the Oracle Database software has payments enabled.
     */
    private Boolean isPaidEnabled;

    /**
     * Creates an instance of AutonomousDbVersionProperties class.
     */
    public AutonomousDbVersionProperties() {
    }

    /**
     * Get the version property: Supported Autonomous Db versions.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the dbWorkload property: The Autonomous Database workload type.
     * 
     * @return the dbWorkload value.
     */
    public WorkloadType dbWorkload() {
        return this.dbWorkload;
    }

    /**
     * Get the isDefaultForFree property: True if this version of the Oracle Database software's default is free.
     * 
     * @return the isDefaultForFree value.
     */
    public Boolean isDefaultForFree() {
        return this.isDefaultForFree;
    }

    /**
     * Get the isDefaultForPaid property: True if this version of the Oracle Database software's default is paid.
     * 
     * @return the isDefaultForPaid value.
     */
    public Boolean isDefaultForPaid() {
        return this.isDefaultForPaid;
    }

    /**
     * Get the isFreeTierEnabled property: True if this version of the Oracle Database software can be used for
     * Always-Free Autonomous Databases.
     * 
     * @return the isFreeTierEnabled value.
     */
    public Boolean isFreeTierEnabled() {
        return this.isFreeTierEnabled;
    }

    /**
     * Get the isPaidEnabled property: True if this version of the Oracle Database software has payments enabled.
     * 
     * @return the isPaidEnabled value.
     */
    public Boolean isPaidEnabled() {
        return this.isPaidEnabled;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutonomousDbVersionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutonomousDbVersionProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AutonomousDbVersionProperties.
     */
    public static AutonomousDbVersionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutonomousDbVersionProperties deserializedAutonomousDbVersionProperties
                = new AutonomousDbVersionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedAutonomousDbVersionProperties.version = reader.getString();
                } else if ("dbWorkload".equals(fieldName)) {
                    deserializedAutonomousDbVersionProperties.dbWorkload = WorkloadType.fromString(reader.getString());
                } else if ("isDefaultForFree".equals(fieldName)) {
                    deserializedAutonomousDbVersionProperties.isDefaultForFree
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isDefaultForPaid".equals(fieldName)) {
                    deserializedAutonomousDbVersionProperties.isDefaultForPaid
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isFreeTierEnabled".equals(fieldName)) {
                    deserializedAutonomousDbVersionProperties.isFreeTierEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isPaidEnabled".equals(fieldName)) {
                    deserializedAutonomousDbVersionProperties.isPaidEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutonomousDbVersionProperties;
        });
    }
}
