// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The updatable properties of the AutonomousDatabase.
 */
@Fluent
public final class AutonomousDatabaseUpdateProperties implements JsonSerializable<AutonomousDatabaseUpdateProperties> {
    /*
     * Admin password.
     */
    private String adminPassword;

    /*
     * The maintenance schedule type of the Autonomous Database Serverless.
     */
    private AutonomousMaintenanceScheduleType autonomousMaintenanceScheduleType;

    /*
     * The compute amount (CPUs) available to the database.
     */
    private Float computeCount;

    /*
     * The number of CPU cores to be made available to the database.
     */
    private Integer cpuCoreCount;

    /*
     * Customer Contacts.
     */
    private List<CustomerContact> customerContacts;

    /*
     * The quantity of data in the database, in terabytes.
     */
    private Integer dataStorageSizeInTbs;

    /*
     * The size, in gigabytes, of the data volume that will be created and attached to the database.
     */
    private Integer dataStorageSizeInGbs;

    /*
     * The user-friendly name for the Autonomous Database.
     */
    private String displayName;

    /*
     * Indicates if auto scaling is enabled for the Autonomous Database CPU core count.
     */
    private Boolean isAutoScalingEnabled;

    /*
     * Indicates if auto scaling is enabled for the Autonomous Database storage.
     */
    private Boolean isAutoScalingForStorageEnabled;

    /*
     * The database OCID of the Disaster Recovery peer database, which is located in a different region from the current
     * peer database.
     */
    private String peerDbId;

    /*
     * Indicates whether the Autonomous Database has local or called in-region Data Guard enabled.
     */
    private Boolean isLocalDataGuardEnabled;

    /*
     * Specifies if the Autonomous Database requires mTLS connections.
     */
    private Boolean isMtlsConnectionRequired;

    /*
     * The Oracle license model that applies to the Oracle Autonomous Database. The default is LICENSE_INCLUDED.
     */
    private LicenseModel licenseModel;

    /*
     * The list of scheduled operations.
     */
    private ScheduledOperationsTypeUpdate scheduledOperations;

    /*
     * The Oracle Database Edition that applies to the Autonomous databases.
     */
    private DatabaseEditionType databaseEdition;

    /*
     * Details for the long-term backup schedule.
     */
    private LongTermBackUpScheduleDetails longTermBackupSchedule;

    /*
     * Parameter that allows users to select an acceptable maximum data loss limit in seconds, up to which Automatic
     * Failover will be triggered when necessary for a Local Autonomous Data Guard
     */
    private Integer localAdgAutoFailoverMaxDataLossLimit;

    /*
     * Indicates the Autonomous Database mode.
     */
    private OpenModeType openMode;

    /*
     * The Autonomous Database permission level.
     */
    private PermissionLevelType permissionLevel;

    /*
     * The Data Guard role of the Autonomous Container Database or Autonomous Database, if Autonomous Data Guard is
     * enabled.
     */
    private RoleType role;

    /*
     * Retention period, in days, for long-term backups
     */
    private Integer backupRetentionPeriodInDays;

    /*
     * The client IP access control list (ACL). This is an array of CIDR notations and/or IP addresses. Values should be
     * separate strings, separated by commas. Example: ['1.1.1.1','1.1.1.0/24','1.1.2.25']
     */
    private List<String> whitelistedIps;

    /**
     * Creates an instance of AutonomousDatabaseUpdateProperties class.
     */
    public AutonomousDatabaseUpdateProperties() {
    }

    /**
     * Get the adminPassword property: Admin password.
     * 
     * @return the adminPassword value.
     */
    public String adminPassword() {
        return this.adminPassword;
    }

    /**
     * Set the adminPassword property: Admin password.
     * 
     * @param adminPassword the adminPassword value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties withAdminPassword(String adminPassword) {
        this.adminPassword = adminPassword;
        return this;
    }

    /**
     * Get the autonomousMaintenanceScheduleType property: The maintenance schedule type of the Autonomous Database
     * Serverless.
     * 
     * @return the autonomousMaintenanceScheduleType value.
     */
    public AutonomousMaintenanceScheduleType autonomousMaintenanceScheduleType() {
        return this.autonomousMaintenanceScheduleType;
    }

    /**
     * Set the autonomousMaintenanceScheduleType property: The maintenance schedule type of the Autonomous Database
     * Serverless.
     * 
     * @param autonomousMaintenanceScheduleType the autonomousMaintenanceScheduleType value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties
        withAutonomousMaintenanceScheduleType(AutonomousMaintenanceScheduleType autonomousMaintenanceScheduleType) {
        this.autonomousMaintenanceScheduleType = autonomousMaintenanceScheduleType;
        return this;
    }

    /**
     * Get the computeCount property: The compute amount (CPUs) available to the database.
     * 
     * @return the computeCount value.
     */
    public Float computeCount() {
        return this.computeCount;
    }

    /**
     * Set the computeCount property: The compute amount (CPUs) available to the database.
     * 
     * @param computeCount the computeCount value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties withComputeCount(Float computeCount) {
        this.computeCount = computeCount;
        return this;
    }

    /**
     * Get the cpuCoreCount property: The number of CPU cores to be made available to the database.
     * 
     * @return the cpuCoreCount value.
     */
    public Integer cpuCoreCount() {
        return this.cpuCoreCount;
    }

    /**
     * Set the cpuCoreCount property: The number of CPU cores to be made available to the database.
     * 
     * @param cpuCoreCount the cpuCoreCount value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties withCpuCoreCount(Integer cpuCoreCount) {
        this.cpuCoreCount = cpuCoreCount;
        return this;
    }

    /**
     * Get the customerContacts property: Customer Contacts.
     * 
     * @return the customerContacts value.
     */
    public List<CustomerContact> customerContacts() {
        return this.customerContacts;
    }

    /**
     * Set the customerContacts property: Customer Contacts.
     * 
     * @param customerContacts the customerContacts value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties withCustomerContacts(List<CustomerContact> customerContacts) {
        this.customerContacts = customerContacts;
        return this;
    }

    /**
     * Get the dataStorageSizeInTbs property: The quantity of data in the database, in terabytes.
     * 
     * @return the dataStorageSizeInTbs value.
     */
    public Integer dataStorageSizeInTbs() {
        return this.dataStorageSizeInTbs;
    }

    /**
     * Set the dataStorageSizeInTbs property: The quantity of data in the database, in terabytes.
     * 
     * @param dataStorageSizeInTbs the dataStorageSizeInTbs value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties withDataStorageSizeInTbs(Integer dataStorageSizeInTbs) {
        this.dataStorageSizeInTbs = dataStorageSizeInTbs;
        return this;
    }

    /**
     * Get the dataStorageSizeInGbs property: The size, in gigabytes, of the data volume that will be created and
     * attached to the database.
     * 
     * @return the dataStorageSizeInGbs value.
     */
    public Integer dataStorageSizeInGbs() {
        return this.dataStorageSizeInGbs;
    }

    /**
     * Set the dataStorageSizeInGbs property: The size, in gigabytes, of the data volume that will be created and
     * attached to the database.
     * 
     * @param dataStorageSizeInGbs the dataStorageSizeInGbs value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties withDataStorageSizeInGbs(Integer dataStorageSizeInGbs) {
        this.dataStorageSizeInGbs = dataStorageSizeInGbs;
        return this;
    }

    /**
     * Get the displayName property: The user-friendly name for the Autonomous Database.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The user-friendly name for the Autonomous Database.
     * 
     * @param displayName the displayName value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the isAutoScalingEnabled property: Indicates if auto scaling is enabled for the Autonomous Database CPU core
     * count.
     * 
     * @return the isAutoScalingEnabled value.
     */
    public Boolean isAutoScalingEnabled() {
        return this.isAutoScalingEnabled;
    }

    /**
     * Set the isAutoScalingEnabled property: Indicates if auto scaling is enabled for the Autonomous Database CPU core
     * count.
     * 
     * @param isAutoScalingEnabled the isAutoScalingEnabled value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties withIsAutoScalingEnabled(Boolean isAutoScalingEnabled) {
        this.isAutoScalingEnabled = isAutoScalingEnabled;
        return this;
    }

    /**
     * Get the isAutoScalingForStorageEnabled property: Indicates if auto scaling is enabled for the Autonomous Database
     * storage.
     * 
     * @return the isAutoScalingForStorageEnabled value.
     */
    public Boolean isAutoScalingForStorageEnabled() {
        return this.isAutoScalingForStorageEnabled;
    }

    /**
     * Set the isAutoScalingForStorageEnabled property: Indicates if auto scaling is enabled for the Autonomous Database
     * storage.
     * 
     * @param isAutoScalingForStorageEnabled the isAutoScalingForStorageEnabled value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties
        withIsAutoScalingForStorageEnabled(Boolean isAutoScalingForStorageEnabled) {
        this.isAutoScalingForStorageEnabled = isAutoScalingForStorageEnabled;
        return this;
    }

    /**
     * Get the peerDbId property: The database OCID of the Disaster Recovery peer database, which is located in a
     * different region from the current peer database.
     * 
     * @return the peerDbId value.
     */
    public String peerDbId() {
        return this.peerDbId;
    }

    /**
     * Set the peerDbId property: The database OCID of the Disaster Recovery peer database, which is located in a
     * different region from the current peer database.
     * 
     * @param peerDbId the peerDbId value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties withPeerDbId(String peerDbId) {
        this.peerDbId = peerDbId;
        return this;
    }

    /**
     * Get the isLocalDataGuardEnabled property: Indicates whether the Autonomous Database has local or called in-region
     * Data Guard enabled.
     * 
     * @return the isLocalDataGuardEnabled value.
     */
    public Boolean isLocalDataGuardEnabled() {
        return this.isLocalDataGuardEnabled;
    }

    /**
     * Set the isLocalDataGuardEnabled property: Indicates whether the Autonomous Database has local or called in-region
     * Data Guard enabled.
     * 
     * @param isLocalDataGuardEnabled the isLocalDataGuardEnabled value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties withIsLocalDataGuardEnabled(Boolean isLocalDataGuardEnabled) {
        this.isLocalDataGuardEnabled = isLocalDataGuardEnabled;
        return this;
    }

    /**
     * Get the isMtlsConnectionRequired property: Specifies if the Autonomous Database requires mTLS connections.
     * 
     * @return the isMtlsConnectionRequired value.
     */
    public Boolean isMtlsConnectionRequired() {
        return this.isMtlsConnectionRequired;
    }

    /**
     * Set the isMtlsConnectionRequired property: Specifies if the Autonomous Database requires mTLS connections.
     * 
     * @param isMtlsConnectionRequired the isMtlsConnectionRequired value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties withIsMtlsConnectionRequired(Boolean isMtlsConnectionRequired) {
        this.isMtlsConnectionRequired = isMtlsConnectionRequired;
        return this;
    }

    /**
     * Get the licenseModel property: The Oracle license model that applies to the Oracle Autonomous Database. The
     * default is LICENSE_INCLUDED.
     * 
     * @return the licenseModel value.
     */
    public LicenseModel licenseModel() {
        return this.licenseModel;
    }

    /**
     * Set the licenseModel property: The Oracle license model that applies to the Oracle Autonomous Database. The
     * default is LICENSE_INCLUDED.
     * 
     * @param licenseModel the licenseModel value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties withLicenseModel(LicenseModel licenseModel) {
        this.licenseModel = licenseModel;
        return this;
    }

    /**
     * Get the scheduledOperations property: The list of scheduled operations.
     * 
     * @return the scheduledOperations value.
     */
    public ScheduledOperationsTypeUpdate scheduledOperations() {
        return this.scheduledOperations;
    }

    /**
     * Set the scheduledOperations property: The list of scheduled operations.
     * 
     * @param scheduledOperations the scheduledOperations value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties
        withScheduledOperations(ScheduledOperationsTypeUpdate scheduledOperations) {
        this.scheduledOperations = scheduledOperations;
        return this;
    }

    /**
     * Get the databaseEdition property: The Oracle Database Edition that applies to the Autonomous databases.
     * 
     * @return the databaseEdition value.
     */
    public DatabaseEditionType databaseEdition() {
        return this.databaseEdition;
    }

    /**
     * Set the databaseEdition property: The Oracle Database Edition that applies to the Autonomous databases.
     * 
     * @param databaseEdition the databaseEdition value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties withDatabaseEdition(DatabaseEditionType databaseEdition) {
        this.databaseEdition = databaseEdition;
        return this;
    }

    /**
     * Get the longTermBackupSchedule property: Details for the long-term backup schedule.
     * 
     * @return the longTermBackupSchedule value.
     */
    public LongTermBackUpScheduleDetails longTermBackupSchedule() {
        return this.longTermBackupSchedule;
    }

    /**
     * Set the longTermBackupSchedule property: Details for the long-term backup schedule.
     * 
     * @param longTermBackupSchedule the longTermBackupSchedule value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties
        withLongTermBackupSchedule(LongTermBackUpScheduleDetails longTermBackupSchedule) {
        this.longTermBackupSchedule = longTermBackupSchedule;
        return this;
    }

    /**
     * Get the localAdgAutoFailoverMaxDataLossLimit property: Parameter that allows users to select an acceptable
     * maximum data loss limit in seconds, up to which Automatic Failover will be triggered when necessary for a Local
     * Autonomous Data Guard.
     * 
     * @return the localAdgAutoFailoverMaxDataLossLimit value.
     */
    public Integer localAdgAutoFailoverMaxDataLossLimit() {
        return this.localAdgAutoFailoverMaxDataLossLimit;
    }

    /**
     * Set the localAdgAutoFailoverMaxDataLossLimit property: Parameter that allows users to select an acceptable
     * maximum data loss limit in seconds, up to which Automatic Failover will be triggered when necessary for a Local
     * Autonomous Data Guard.
     * 
     * @param localAdgAutoFailoverMaxDataLossLimit the localAdgAutoFailoverMaxDataLossLimit value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties
        withLocalAdgAutoFailoverMaxDataLossLimit(Integer localAdgAutoFailoverMaxDataLossLimit) {
        this.localAdgAutoFailoverMaxDataLossLimit = localAdgAutoFailoverMaxDataLossLimit;
        return this;
    }

    /**
     * Get the openMode property: Indicates the Autonomous Database mode.
     * 
     * @return the openMode value.
     */
    public OpenModeType openMode() {
        return this.openMode;
    }

    /**
     * Set the openMode property: Indicates the Autonomous Database mode.
     * 
     * @param openMode the openMode value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties withOpenMode(OpenModeType openMode) {
        this.openMode = openMode;
        return this;
    }

    /**
     * Get the permissionLevel property: The Autonomous Database permission level.
     * 
     * @return the permissionLevel value.
     */
    public PermissionLevelType permissionLevel() {
        return this.permissionLevel;
    }

    /**
     * Set the permissionLevel property: The Autonomous Database permission level.
     * 
     * @param permissionLevel the permissionLevel value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties withPermissionLevel(PermissionLevelType permissionLevel) {
        this.permissionLevel = permissionLevel;
        return this;
    }

    /**
     * Get the role property: The Data Guard role of the Autonomous Container Database or Autonomous Database, if
     * Autonomous Data Guard is enabled.
     * 
     * @return the role value.
     */
    public RoleType role() {
        return this.role;
    }

    /**
     * Set the role property: The Data Guard role of the Autonomous Container Database or Autonomous Database, if
     * Autonomous Data Guard is enabled.
     * 
     * @param role the role value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties withRole(RoleType role) {
        this.role = role;
        return this;
    }

    /**
     * Get the backupRetentionPeriodInDays property: Retention period, in days, for long-term backups.
     * 
     * @return the backupRetentionPeriodInDays value.
     */
    public Integer backupRetentionPeriodInDays() {
        return this.backupRetentionPeriodInDays;
    }

    /**
     * Set the backupRetentionPeriodInDays property: Retention period, in days, for long-term backups.
     * 
     * @param backupRetentionPeriodInDays the backupRetentionPeriodInDays value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties withBackupRetentionPeriodInDays(Integer backupRetentionPeriodInDays) {
        this.backupRetentionPeriodInDays = backupRetentionPeriodInDays;
        return this;
    }

    /**
     * Get the whitelistedIps property: The client IP access control list (ACL). This is an array of CIDR notations
     * and/or IP addresses. Values should be separate strings, separated by commas. Example:
     * ['1.1.1.1','1.1.1.0/24','1.1.2.25'].
     * 
     * @return the whitelistedIps value.
     */
    public List<String> whitelistedIps() {
        return this.whitelistedIps;
    }

    /**
     * Set the whitelistedIps property: The client IP access control list (ACL). This is an array of CIDR notations
     * and/or IP addresses. Values should be separate strings, separated by commas. Example:
     * ['1.1.1.1','1.1.1.0/24','1.1.2.25'].
     * 
     * @param whitelistedIps the whitelistedIps value to set.
     * @return the AutonomousDatabaseUpdateProperties object itself.
     */
    public AutonomousDatabaseUpdateProperties withWhitelistedIps(List<String> whitelistedIps) {
        this.whitelistedIps = whitelistedIps;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (customerContacts() != null) {
            customerContacts().forEach(e -> e.validate());
        }
        if (scheduledOperations() != null) {
            scheduledOperations().validate();
        }
        if (longTermBackupSchedule() != null) {
            longTermBackupSchedule().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("adminPassword", this.adminPassword);
        jsonWriter.writeStringField("autonomousMaintenanceScheduleType",
            this.autonomousMaintenanceScheduleType == null ? null : this.autonomousMaintenanceScheduleType.toString());
        jsonWriter.writeNumberField("computeCount", this.computeCount);
        jsonWriter.writeNumberField("cpuCoreCount", this.cpuCoreCount);
        jsonWriter.writeArrayField("customerContacts", this.customerContacts,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("dataStorageSizeInTbs", this.dataStorageSizeInTbs);
        jsonWriter.writeNumberField("dataStorageSizeInGbs", this.dataStorageSizeInGbs);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeBooleanField("isAutoScalingEnabled", this.isAutoScalingEnabled);
        jsonWriter.writeBooleanField("isAutoScalingForStorageEnabled", this.isAutoScalingForStorageEnabled);
        jsonWriter.writeStringField("peerDbId", this.peerDbId);
        jsonWriter.writeBooleanField("isLocalDataGuardEnabled", this.isLocalDataGuardEnabled);
        jsonWriter.writeBooleanField("isMtlsConnectionRequired", this.isMtlsConnectionRequired);
        jsonWriter.writeStringField("licenseModel", this.licenseModel == null ? null : this.licenseModel.toString());
        jsonWriter.writeJsonField("scheduledOperations", this.scheduledOperations);
        jsonWriter.writeStringField("databaseEdition",
            this.databaseEdition == null ? null : this.databaseEdition.toString());
        jsonWriter.writeJsonField("longTermBackupSchedule", this.longTermBackupSchedule);
        jsonWriter.writeNumberField("localAdgAutoFailoverMaxDataLossLimit", this.localAdgAutoFailoverMaxDataLossLimit);
        jsonWriter.writeStringField("openMode", this.openMode == null ? null : this.openMode.toString());
        jsonWriter.writeStringField("permissionLevel",
            this.permissionLevel == null ? null : this.permissionLevel.toString());
        jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
        jsonWriter.writeNumberField("backupRetentionPeriodInDays", this.backupRetentionPeriodInDays);
        jsonWriter.writeArrayField("whitelistedIps", this.whitelistedIps,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutonomousDatabaseUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutonomousDatabaseUpdateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AutonomousDatabaseUpdateProperties.
     */
    public static AutonomousDatabaseUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutonomousDatabaseUpdateProperties deserializedAutonomousDatabaseUpdateProperties
                = new AutonomousDatabaseUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("adminPassword".equals(fieldName)) {
                    deserializedAutonomousDatabaseUpdateProperties.adminPassword = reader.getString();
                } else if ("autonomousMaintenanceScheduleType".equals(fieldName)) {
                    deserializedAutonomousDatabaseUpdateProperties.autonomousMaintenanceScheduleType
                        = AutonomousMaintenanceScheduleType.fromString(reader.getString());
                } else if ("computeCount".equals(fieldName)) {
                    deserializedAutonomousDatabaseUpdateProperties.computeCount
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("cpuCoreCount".equals(fieldName)) {
                    deserializedAutonomousDatabaseUpdateProperties.cpuCoreCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("customerContacts".equals(fieldName)) {
                    List<CustomerContact> customerContacts
                        = reader.readArray(reader1 -> CustomerContact.fromJson(reader1));
                    deserializedAutonomousDatabaseUpdateProperties.customerContacts = customerContacts;
                } else if ("dataStorageSizeInTbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseUpdateProperties.dataStorageSizeInTbs
                        = reader.getNullable(JsonReader::getInt);
                } else if ("dataStorageSizeInGbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseUpdateProperties.dataStorageSizeInGbs
                        = reader.getNullable(JsonReader::getInt);
                } else if ("displayName".equals(fieldName)) {
                    deserializedAutonomousDatabaseUpdateProperties.displayName = reader.getString();
                } else if ("isAutoScalingEnabled".equals(fieldName)) {
                    deserializedAutonomousDatabaseUpdateProperties.isAutoScalingEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isAutoScalingForStorageEnabled".equals(fieldName)) {
                    deserializedAutonomousDatabaseUpdateProperties.isAutoScalingForStorageEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("peerDbId".equals(fieldName)) {
                    deserializedAutonomousDatabaseUpdateProperties.peerDbId = reader.getString();
                } else if ("isLocalDataGuardEnabled".equals(fieldName)) {
                    deserializedAutonomousDatabaseUpdateProperties.isLocalDataGuardEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isMtlsConnectionRequired".equals(fieldName)) {
                    deserializedAutonomousDatabaseUpdateProperties.isMtlsConnectionRequired
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("licenseModel".equals(fieldName)) {
                    deserializedAutonomousDatabaseUpdateProperties.licenseModel
                        = LicenseModel.fromString(reader.getString());
                } else if ("scheduledOperations".equals(fieldName)) {
                    deserializedAutonomousDatabaseUpdateProperties.scheduledOperations
                        = ScheduledOperationsTypeUpdate.fromJson(reader);
                } else if ("databaseEdition".equals(fieldName)) {
                    deserializedAutonomousDatabaseUpdateProperties.databaseEdition
                        = DatabaseEditionType.fromString(reader.getString());
                } else if ("longTermBackupSchedule".equals(fieldName)) {
                    deserializedAutonomousDatabaseUpdateProperties.longTermBackupSchedule
                        = LongTermBackUpScheduleDetails.fromJson(reader);
                } else if ("localAdgAutoFailoverMaxDataLossLimit".equals(fieldName)) {
                    deserializedAutonomousDatabaseUpdateProperties.localAdgAutoFailoverMaxDataLossLimit
                        = reader.getNullable(JsonReader::getInt);
                } else if ("openMode".equals(fieldName)) {
                    deserializedAutonomousDatabaseUpdateProperties.openMode
                        = OpenModeType.fromString(reader.getString());
                } else if ("permissionLevel".equals(fieldName)) {
                    deserializedAutonomousDatabaseUpdateProperties.permissionLevel
                        = PermissionLevelType.fromString(reader.getString());
                } else if ("role".equals(fieldName)) {
                    deserializedAutonomousDatabaseUpdateProperties.role = RoleType.fromString(reader.getString());
                } else if ("backupRetentionPeriodInDays".equals(fieldName)) {
                    deserializedAutonomousDatabaseUpdateProperties.backupRetentionPeriodInDays
                        = reader.getNullable(JsonReader::getInt);
                } else if ("whitelistedIps".equals(fieldName)) {
                    List<String> whitelistedIps = reader.readArray(reader1 -> reader1.getString());
                    deserializedAutonomousDatabaseUpdateProperties.whitelistedIps = whitelistedIps;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutonomousDatabaseUpdateProperties;
        });
    }
}
