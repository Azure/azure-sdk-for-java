// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DbNode action object.
 */
@Fluent
public final class DbNodeAction implements JsonSerializable<DbNodeAction> {
    /*
     * Db action
     */
    private DbNodeActionEnum action;

    /**
     * Creates an instance of DbNodeAction class.
     */
    public DbNodeAction() {
    }

    /**
     * Get the action property: Db action.
     * 
     * @return the action value.
     */
    public DbNodeActionEnum action() {
        return this.action;
    }

    /**
     * Set the action property: Db action.
     * 
     * @param action the action value to set.
     * @return the DbNodeAction object itself.
     */
    public DbNodeAction withAction(DbNodeActionEnum action) {
        this.action = action;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (action() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property action in model DbNodeAction"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DbNodeAction.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("action", this.action == null ? null : this.action.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DbNodeAction from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DbNodeAction if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DbNodeAction.
     */
    public static DbNodeAction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DbNodeAction deserializedDbNodeAction = new DbNodeAction();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("action".equals(fieldName)) {
                    deserializedDbNodeAction.action = DbNodeActionEnum.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDbNodeAction;
        });
    }
}
