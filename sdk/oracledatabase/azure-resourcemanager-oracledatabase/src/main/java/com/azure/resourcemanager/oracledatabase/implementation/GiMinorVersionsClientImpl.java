// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.oracledatabase.fluent.GiMinorVersionsClient;
import com.azure.resourcemanager.oracledatabase.fluent.models.GiMinorVersionInner;
import com.azure.resourcemanager.oracledatabase.implementation.models.GiMinorVersionListResult;
import com.azure.resourcemanager.oracledatabase.models.ShapeFamily;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in GiMinorVersionsClient.
 */
public final class GiMinorVersionsClientImpl implements GiMinorVersionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final GiMinorVersionsService service;

    /**
     * The service client containing this operation class.
     */
    private final OracleDatabaseManagementClientImpl client;

    /**
     * Initializes an instance of GiMinorVersionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    GiMinorVersionsClientImpl(OracleDatabaseManagementClientImpl client) {
        this.service
            = RestProxy.create(GiMinorVersionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for OracleDatabaseManagementClientGiMinorVersions to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "OracleDatabaseManage")
    public interface GiMinorVersionsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/giVersions/{giversionname}/giMinorVersions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GiMinorVersionListResult>> listByParent(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @PathParam("giversionname") String giversionname,
            @QueryParam("shapeFamily") ShapeFamily shapeFamily, @QueryParam("zone") String zone,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/giVersions/{giversionname}/giMinorVersions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<GiMinorVersionListResult> listByParentSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @PathParam("giversionname") String giversionname,
            @QueryParam("shapeFamily") ShapeFamily shapeFamily, @QueryParam("zone") String zone,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/giVersions/{giversionname}/giMinorVersions/{giMinorVersionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GiMinorVersionInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @PathParam("giversionname") String giversionname,
            @PathParam("giMinorVersionName") String giMinorVersionName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/giVersions/{giversionname}/giMinorVersions/{giMinorVersionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<GiMinorVersionInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @PathParam("giversionname") String giversionname,
            @PathParam("giMinorVersionName") String giMinorVersionName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GiMinorVersionListResult>> listByParentNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<GiMinorVersionListResult> listByParentNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List GiMinorVersion resources by GiVersion.
     * 
     * @param location The name of the Azure region.
     * @param giversionname GiVersion name.
     * @param shapeFamily If provided, filters the results to the set of database versions which are supported for the
     * given shape family.
     * @param zone Filters the result for the given Azure Availability Zone.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GiMinorVersion list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GiMinorVersionInner>> listByParentSinglePageAsync(String location, String giversionname,
        ShapeFamily shapeFamily, String zone) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (giversionname == null) {
            return Mono.error(new IllegalArgumentException("Parameter giversionname is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByParent(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), location, giversionname, shapeFamily, zone, accept, context))
            .<PagedResponse<GiMinorVersionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List GiMinorVersion resources by GiVersion.
     * 
     * @param location The name of the Azure region.
     * @param giversionname GiVersion name.
     * @param shapeFamily If provided, filters the results to the set of database versions which are supported for the
     * given shape family.
     * @param zone Filters the result for the given Azure Availability Zone.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GiMinorVersion list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<GiMinorVersionInner> listByParentAsync(String location, String giversionname,
        ShapeFamily shapeFamily, String zone) {
        return new PagedFlux<>(() -> listByParentSinglePageAsync(location, giversionname, shapeFamily, zone),
            nextLink -> listByParentNextSinglePageAsync(nextLink));
    }

    /**
     * List GiMinorVersion resources by GiVersion.
     * 
     * @param location The name of the Azure region.
     * @param giversionname GiVersion name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GiMinorVersion list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<GiMinorVersionInner> listByParentAsync(String location, String giversionname) {
        final ShapeFamily shapeFamily = null;
        final String zone = null;
        return new PagedFlux<>(() -> listByParentSinglePageAsync(location, giversionname, shapeFamily, zone),
            nextLink -> listByParentNextSinglePageAsync(nextLink));
    }

    /**
     * List GiMinorVersion resources by GiVersion.
     * 
     * @param location The name of the Azure region.
     * @param giversionname GiVersion name.
     * @param shapeFamily If provided, filters the results to the set of database versions which are supported for the
     * given shape family.
     * @param zone Filters the result for the given Azure Availability Zone.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GiMinorVersion list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<GiMinorVersionInner> listByParentSinglePage(String location, String giversionname,
        ShapeFamily shapeFamily, String zone) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (giversionname == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter giversionname is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<GiMinorVersionListResult> res
            = service.listByParentSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), location, giversionname, shapeFamily, zone, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List GiMinorVersion resources by GiVersion.
     * 
     * @param location The name of the Azure region.
     * @param giversionname GiVersion name.
     * @param shapeFamily If provided, filters the results to the set of database versions which are supported for the
     * given shape family.
     * @param zone Filters the result for the given Azure Availability Zone.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GiMinorVersion list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<GiMinorVersionInner> listByParentSinglePage(String location, String giversionname,
        ShapeFamily shapeFamily, String zone, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (giversionname == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter giversionname is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<GiMinorVersionListResult> res
            = service.listByParentSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), location, giversionname, shapeFamily, zone, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List GiMinorVersion resources by GiVersion.
     * 
     * @param location The name of the Azure region.
     * @param giversionname GiVersion name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GiMinorVersion list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GiMinorVersionInner> listByParent(String location, String giversionname) {
        final ShapeFamily shapeFamily = null;
        final String zone = null;
        return new PagedIterable<>(() -> listByParentSinglePage(location, giversionname, shapeFamily, zone),
            nextLink -> listByParentNextSinglePage(nextLink));
    }

    /**
     * List GiMinorVersion resources by GiVersion.
     * 
     * @param location The name of the Azure region.
     * @param giversionname GiVersion name.
     * @param shapeFamily If provided, filters the results to the set of database versions which are supported for the
     * given shape family.
     * @param zone Filters the result for the given Azure Availability Zone.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GiMinorVersion list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GiMinorVersionInner> listByParent(String location, String giversionname,
        ShapeFamily shapeFamily, String zone, Context context) {
        return new PagedIterable<>(() -> listByParentSinglePage(location, giversionname, shapeFamily, zone, context),
            nextLink -> listByParentNextSinglePage(nextLink, context));
    }

    /**
     * Get a GiMinorVersion.
     * 
     * @param location The name of the Azure region.
     * @param giversionname GiVersion name.
     * @param giMinorVersionName The name of the GiMinorVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a GiMinorVersion along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GiMinorVersionInner>> getWithResponseAsync(String location, String giversionname,
        String giMinorVersionName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (giversionname == null) {
            return Mono.error(new IllegalArgumentException("Parameter giversionname is required and cannot be null."));
        }
        if (giMinorVersionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter giMinorVersionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), location, giversionname, giMinorVersionName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a GiMinorVersion.
     * 
     * @param location The name of the Azure region.
     * @param giversionname GiVersion name.
     * @param giMinorVersionName The name of the GiMinorVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a GiMinorVersion on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GiMinorVersionInner> getAsync(String location, String giversionname, String giMinorVersionName) {
        return getWithResponseAsync(location, giversionname, giMinorVersionName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a GiMinorVersion.
     * 
     * @param location The name of the Azure region.
     * @param giversionname GiVersion name.
     * @param giMinorVersionName The name of the GiMinorVersion.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a GiMinorVersion along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GiMinorVersionInner> getWithResponse(String location, String giversionname,
        String giMinorVersionName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (giversionname == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter giversionname is required and cannot be null."));
        }
        if (giMinorVersionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter giMinorVersionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            location, giversionname, giMinorVersionName, accept, context);
    }

    /**
     * Get a GiMinorVersion.
     * 
     * @param location The name of the Azure region.
     * @param giversionname GiVersion name.
     * @param giMinorVersionName The name of the GiMinorVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a GiMinorVersion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GiMinorVersionInner get(String location, String giversionname, String giMinorVersionName) {
        return getWithResponse(location, giversionname, giMinorVersionName, Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GiMinorVersion list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GiMinorVersionInner>> listByParentNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByParentNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<GiMinorVersionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GiMinorVersion list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<GiMinorVersionInner> listByParentNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<GiMinorVersionListResult> res
            = service.listByParentNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GiMinorVersion list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<GiMinorVersionInner> listByParentNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<GiMinorVersionListResult> res
            = service.listByParentNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(GiMinorVersionsClientImpl.class);
}
