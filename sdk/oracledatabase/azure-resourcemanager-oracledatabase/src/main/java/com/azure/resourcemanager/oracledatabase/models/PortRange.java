// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Port Range to specify particular destination ports for TCP rules.
 */
@Fluent
public final class PortRange implements JsonSerializable<PortRange> {
    /*
     * The minimum port number, which must not be greater than the maximum port number.
     */
    private int min;

    /*
     * The maximum port number, which must not be less than the minimum port number. To specify a single port number,
     * set both the min and max to the same value.
     */
    private int max;

    /**
     * Creates an instance of PortRange class.
     */
    public PortRange() {
    }

    /**
     * Get the min property: The minimum port number, which must not be greater than the maximum port number.
     * 
     * @return the min value.
     */
    public int min() {
        return this.min;
    }

    /**
     * Set the min property: The minimum port number, which must not be greater than the maximum port number.
     * 
     * @param min the min value to set.
     * @return the PortRange object itself.
     */
    public PortRange withMin(int min) {
        this.min = min;
        return this;
    }

    /**
     * Get the max property: The maximum port number, which must not be less than the minimum port number. To specify a
     * single port number, set both the min and max to the same value.
     * 
     * @return the max value.
     */
    public int max() {
        return this.max;
    }

    /**
     * Set the max property: The maximum port number, which must not be less than the minimum port number. To specify a
     * single port number, set both the min and max to the same value.
     * 
     * @param max the max value to set.
     * @return the PortRange object itself.
     */
    public PortRange withMax(int max) {
        this.max = max;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("min", this.min);
        jsonWriter.writeIntField("max", this.max);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PortRange from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PortRange if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PortRange.
     */
    public static PortRange fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PortRange deserializedPortRange = new PortRange();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("min".equals(fieldName)) {
                    deserializedPortRange.min = reader.getInt();
                } else if ("max".equals(fieldName)) {
                    deserializedPortRange.max = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPortRange;
        });
    }
}
