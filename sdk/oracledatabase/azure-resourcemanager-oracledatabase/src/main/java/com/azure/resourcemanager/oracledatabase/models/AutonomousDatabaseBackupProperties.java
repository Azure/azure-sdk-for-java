// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * AutonomousDatabaseBackup resource model.
 */
@Fluent
public final class AutonomousDatabaseBackupProperties implements JsonSerializable<AutonomousDatabaseBackupProperties> {
    /*
     * The OCID of the Autonomous Database.
     */
    private String autonomousDatabaseOcid;

    /*
     * The size of the database in terabytes at the time the backup was taken.
     */
    private Double databaseSizeInTbs;

    /*
     * A valid Oracle Database version for Autonomous Database.
     */
    private String dbVersion;

    /*
     * The user-friendly name for the backup. The name does not have to be unique.
     */
    private String displayName;

    /*
     * The OCID of the Autonomous Database backup.
     */
    private String ocid;

    /*
     * Indicates whether the backup is user-initiated or automatic.
     */
    private Boolean isAutomatic;

    /*
     * Indicates whether the backup can be used to restore the associated Autonomous Database.
     */
    private Boolean isRestorable;

    /*
     * Additional information about the current lifecycle state.
     */
    private String lifecycleDetails;

    /*
     * The current state of the backup.
     */
    private AutonomousDatabaseBackupLifecycleState lifecycleState;

    /*
     * Retention period, in days, for long-term backups.
     */
    private Integer retentionPeriodInDays;

    /*
     * The backup size in terabytes (TB).
     */
    private Double sizeInTbs;

    /*
     * Timestamp until when the backup will be available.
     */
    private OffsetDateTime timeAvailableTil;

    /*
     * The date and time the backup started.
     */
    private String timeStarted;

    /*
     * The date and time the backup completed.
     */
    private String timeEnded;

    /*
     * The type of backup.
     */
    private AutonomousDatabaseBackupType backupType;

    /*
     * Azure resource provisioning state.
     */
    private AzureResourceProvisioningState provisioningState;

    /**
     * Creates an instance of AutonomousDatabaseBackupProperties class.
     */
    public AutonomousDatabaseBackupProperties() {
    }

    /**
     * Get the autonomousDatabaseOcid property: The OCID of the Autonomous Database.
     * 
     * @return the autonomousDatabaseOcid value.
     */
    public String autonomousDatabaseOcid() {
        return this.autonomousDatabaseOcid;
    }

    /**
     * Get the databaseSizeInTbs property: The size of the database in terabytes at the time the backup was taken.
     * 
     * @return the databaseSizeInTbs value.
     */
    public Double databaseSizeInTbs() {
        return this.databaseSizeInTbs;
    }

    /**
     * Get the dbVersion property: A valid Oracle Database version for Autonomous Database.
     * 
     * @return the dbVersion value.
     */
    public String dbVersion() {
        return this.dbVersion;
    }

    /**
     * Get the displayName property: The user-friendly name for the backup. The name does not have to be unique.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The user-friendly name for the backup. The name does not have to be unique.
     * 
     * @param displayName the displayName value to set.
     * @return the AutonomousDatabaseBackupProperties object itself.
     */
    public AutonomousDatabaseBackupProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the ocid property: The OCID of the Autonomous Database backup.
     * 
     * @return the ocid value.
     */
    public String ocid() {
        return this.ocid;
    }

    /**
     * Get the isAutomatic property: Indicates whether the backup is user-initiated or automatic.
     * 
     * @return the isAutomatic value.
     */
    public Boolean isAutomatic() {
        return this.isAutomatic;
    }

    /**
     * Get the isRestorable property: Indicates whether the backup can be used to restore the associated Autonomous
     * Database.
     * 
     * @return the isRestorable value.
     */
    public Boolean isRestorable() {
        return this.isRestorable;
    }

    /**
     * Get the lifecycleDetails property: Additional information about the current lifecycle state.
     * 
     * @return the lifecycleDetails value.
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }

    /**
     * Get the lifecycleState property: The current state of the backup.
     * 
     * @return the lifecycleState value.
     */
    public AutonomousDatabaseBackupLifecycleState lifecycleState() {
        return this.lifecycleState;
    }

    /**
     * Get the retentionPeriodInDays property: Retention period, in days, for long-term backups.
     * 
     * @return the retentionPeriodInDays value.
     */
    public Integer retentionPeriodInDays() {
        return this.retentionPeriodInDays;
    }

    /**
     * Set the retentionPeriodInDays property: Retention period, in days, for long-term backups.
     * 
     * @param retentionPeriodInDays the retentionPeriodInDays value to set.
     * @return the AutonomousDatabaseBackupProperties object itself.
     */
    public AutonomousDatabaseBackupProperties withRetentionPeriodInDays(Integer retentionPeriodInDays) {
        this.retentionPeriodInDays = retentionPeriodInDays;
        return this;
    }

    /**
     * Get the sizeInTbs property: The backup size in terabytes (TB).
     * 
     * @return the sizeInTbs value.
     */
    public Double sizeInTbs() {
        return this.sizeInTbs;
    }

    /**
     * Get the timeAvailableTil property: Timestamp until when the backup will be available.
     * 
     * @return the timeAvailableTil value.
     */
    public OffsetDateTime timeAvailableTil() {
        return this.timeAvailableTil;
    }

    /**
     * Get the timeStarted property: The date and time the backup started.
     * 
     * @return the timeStarted value.
     */
    public String timeStarted() {
        return this.timeStarted;
    }

    /**
     * Get the timeEnded property: The date and time the backup completed.
     * 
     * @return the timeEnded value.
     */
    public String timeEnded() {
        return this.timeEnded;
    }

    /**
     * Get the backupType property: The type of backup.
     * 
     * @return the backupType value.
     */
    public AutonomousDatabaseBackupType backupType() {
        return this.backupType;
    }

    /**
     * Get the provisioningState property: Azure resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public AzureResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeNumberField("retentionPeriodInDays", this.retentionPeriodInDays);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutonomousDatabaseBackupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutonomousDatabaseBackupProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AutonomousDatabaseBackupProperties.
     */
    public static AutonomousDatabaseBackupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutonomousDatabaseBackupProperties deserializedAutonomousDatabaseBackupProperties
                = new AutonomousDatabaseBackupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("autonomousDatabaseOcid".equals(fieldName)) {
                    deserializedAutonomousDatabaseBackupProperties.autonomousDatabaseOcid = reader.getString();
                } else if ("databaseSizeInTbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseBackupProperties.databaseSizeInTbs
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("dbVersion".equals(fieldName)) {
                    deserializedAutonomousDatabaseBackupProperties.dbVersion = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedAutonomousDatabaseBackupProperties.displayName = reader.getString();
                } else if ("ocid".equals(fieldName)) {
                    deserializedAutonomousDatabaseBackupProperties.ocid = reader.getString();
                } else if ("isAutomatic".equals(fieldName)) {
                    deserializedAutonomousDatabaseBackupProperties.isAutomatic
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isRestorable".equals(fieldName)) {
                    deserializedAutonomousDatabaseBackupProperties.isRestorable
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("lifecycleDetails".equals(fieldName)) {
                    deserializedAutonomousDatabaseBackupProperties.lifecycleDetails = reader.getString();
                } else if ("lifecycleState".equals(fieldName)) {
                    deserializedAutonomousDatabaseBackupProperties.lifecycleState
                        = AutonomousDatabaseBackupLifecycleState.fromString(reader.getString());
                } else if ("retentionPeriodInDays".equals(fieldName)) {
                    deserializedAutonomousDatabaseBackupProperties.retentionPeriodInDays
                        = reader.getNullable(JsonReader::getInt);
                } else if ("sizeInTbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseBackupProperties.sizeInTbs
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("timeAvailableTil".equals(fieldName)) {
                    deserializedAutonomousDatabaseBackupProperties.timeAvailableTil = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("timeStarted".equals(fieldName)) {
                    deserializedAutonomousDatabaseBackupProperties.timeStarted = reader.getString();
                } else if ("timeEnded".equals(fieldName)) {
                    deserializedAutonomousDatabaseBackupProperties.timeEnded = reader.getString();
                } else if ("backupType".equals(fieldName)) {
                    deserializedAutonomousDatabaseBackupProperties.backupType
                        = AutonomousDatabaseBackupType.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAutonomousDatabaseBackupProperties.provisioningState
                        = AzureResourceProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutonomousDatabaseBackupProperties;
        });
    }
}
