// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.oracledatabase.fluent.AutonomousDatabasesClient;
import com.azure.resourcemanager.oracledatabase.fluent.models.AutonomousDatabaseInner;
import com.azure.resourcemanager.oracledatabase.fluent.models.AutonomousDatabaseWalletFileInner;
import com.azure.resourcemanager.oracledatabase.models.AutonomousDatabase;
import com.azure.resourcemanager.oracledatabase.models.AutonomousDatabases;
import com.azure.resourcemanager.oracledatabase.models.AutonomousDatabaseWalletFile;
import com.azure.resourcemanager.oracledatabase.models.GenerateAutonomousDatabaseWalletDetails;
import com.azure.resourcemanager.oracledatabase.models.PeerDbDetails;

public final class AutonomousDatabasesImpl implements AutonomousDatabases {
    private static final ClientLogger LOGGER = new ClientLogger(AutonomousDatabasesImpl.class);

    private final AutonomousDatabasesClient innerClient;

    private final com.azure.resourcemanager.oracledatabase.OracleDatabaseManager serviceManager;

    public AutonomousDatabasesImpl(AutonomousDatabasesClient innerClient,
        com.azure.resourcemanager.oracledatabase.OracleDatabaseManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AutonomousDatabase> list() {
        PagedIterable<AutonomousDatabaseInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AutonomousDatabaseImpl(inner1, this.manager()));
    }

    public PagedIterable<AutonomousDatabase> list(Context context) {
        PagedIterable<AutonomousDatabaseInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AutonomousDatabaseImpl(inner1, this.manager()));
    }

    public PagedIterable<AutonomousDatabase> listByResourceGroup(String resourceGroupName) {
        PagedIterable<AutonomousDatabaseInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AutonomousDatabaseImpl(inner1, this.manager()));
    }

    public PagedIterable<AutonomousDatabase> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<AutonomousDatabaseInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AutonomousDatabaseImpl(inner1, this.manager()));
    }

    public Response<AutonomousDatabase> getByResourceGroupWithResponse(String resourceGroupName,
        String autonomousdatabasename, Context context) {
        Response<AutonomousDatabaseInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, autonomousdatabasename, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AutonomousDatabaseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AutonomousDatabase getByResourceGroup(String resourceGroupName, String autonomousdatabasename) {
        AutonomousDatabaseInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, autonomousdatabasename);
        if (inner != null) {
            return new AutonomousDatabaseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String autonomousdatabasename) {
        this.serviceClient().delete(resourceGroupName, autonomousdatabasename);
    }

    public void delete(String resourceGroupName, String autonomousdatabasename, Context context) {
        this.serviceClient().delete(resourceGroupName, autonomousdatabasename, context);
    }

    public AutonomousDatabase failover(String resourceGroupName, String autonomousdatabasename, PeerDbDetails body) {
        AutonomousDatabaseInner inner = this.serviceClient().failover(resourceGroupName, autonomousdatabasename, body);
        if (inner != null) {
            return new AutonomousDatabaseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public AutonomousDatabase failover(String resourceGroupName, String autonomousdatabasename, PeerDbDetails body,
        Context context) {
        AutonomousDatabaseInner inner
            = this.serviceClient().failover(resourceGroupName, autonomousdatabasename, body, context);
        if (inner != null) {
            return new AutonomousDatabaseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AutonomousDatabaseWalletFile> generateWalletWithResponse(String resourceGroupName,
        String autonomousdatabasename, GenerateAutonomousDatabaseWalletDetails body, Context context) {
        Response<AutonomousDatabaseWalletFileInner> inner
            = this.serviceClient().generateWalletWithResponse(resourceGroupName, autonomousdatabasename, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AutonomousDatabaseWalletFileImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AutonomousDatabaseWalletFile generateWallet(String resourceGroupName, String autonomousdatabasename,
        GenerateAutonomousDatabaseWalletDetails body) {
        AutonomousDatabaseWalletFileInner inner
            = this.serviceClient().generateWallet(resourceGroupName, autonomousdatabasename, body);
        if (inner != null) {
            return new AutonomousDatabaseWalletFileImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public AutonomousDatabase switchover(String resourceGroupName, String autonomousdatabasename, PeerDbDetails body) {
        AutonomousDatabaseInner inner
            = this.serviceClient().switchover(resourceGroupName, autonomousdatabasename, body);
        if (inner != null) {
            return new AutonomousDatabaseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public AutonomousDatabase switchover(String resourceGroupName, String autonomousdatabasename, PeerDbDetails body,
        Context context) {
        AutonomousDatabaseInner inner
            = this.serviceClient().switchover(resourceGroupName, autonomousdatabasename, body, context);
        if (inner != null) {
            return new AutonomousDatabaseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public AutonomousDatabase getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String autonomousdatabasename = ResourceManagerUtils.getValueFromIdByName(id, "autonomousDatabases");
        if (autonomousdatabasename == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'autonomousDatabases'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, autonomousdatabasename, Context.NONE).getValue();
    }

    public Response<AutonomousDatabase> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String autonomousdatabasename = ResourceManagerUtils.getValueFromIdByName(id, "autonomousDatabases");
        if (autonomousdatabasename == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'autonomousDatabases'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, autonomousdatabasename, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String autonomousdatabasename = ResourceManagerUtils.getValueFromIdByName(id, "autonomousDatabases");
        if (autonomousdatabasename == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'autonomousDatabases'.", id)));
        }
        this.delete(resourceGroupName, autonomousdatabasename, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String autonomousdatabasename = ResourceManagerUtils.getValueFromIdByName(id, "autonomousDatabases");
        if (autonomousdatabasename == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'autonomousDatabases'.", id)));
        }
        this.delete(resourceGroupName, autonomousdatabasename, context);
    }

    private AutonomousDatabasesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.oracledatabase.OracleDatabaseManager manager() {
        return this.serviceManager;
    }

    public AutonomousDatabaseImpl define(String name) {
        return new AutonomousDatabaseImpl(name, this.manager());
    }
}
