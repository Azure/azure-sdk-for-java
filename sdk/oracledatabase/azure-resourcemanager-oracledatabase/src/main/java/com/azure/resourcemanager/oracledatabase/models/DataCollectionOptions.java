// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DataCollectionOptions resource properties.
 */
@Fluent
public final class DataCollectionOptions implements JsonSerializable<DataCollectionOptions> {
    /*
     * Indicates whether diagnostic collection is enabled for the VM cluster/Cloud VM cluster/VMBM DBCS.
     */
    private Boolean isDiagnosticsEventsEnabled;

    /*
     * Indicates whether health monitoring is enabled for the VM cluster / Cloud VM cluster / VMBM DBCS.
     */
    private Boolean isHealthMonitoringEnabled;

    /*
     * Indicates whether incident logs and trace collection are enabled for the VM cluster / Cloud VM cluster / VMBM
     * DBCS.
     */
    private Boolean isIncidentLogsEnabled;

    /**
     * Creates an instance of DataCollectionOptions class.
     */
    public DataCollectionOptions() {
    }

    /**
     * Get the isDiagnosticsEventsEnabled property: Indicates whether diagnostic collection is enabled for the VM
     * cluster/Cloud VM cluster/VMBM DBCS.
     * 
     * @return the isDiagnosticsEventsEnabled value.
     */
    public Boolean isDiagnosticsEventsEnabled() {
        return this.isDiagnosticsEventsEnabled;
    }

    /**
     * Set the isDiagnosticsEventsEnabled property: Indicates whether diagnostic collection is enabled for the VM
     * cluster/Cloud VM cluster/VMBM DBCS.
     * 
     * @param isDiagnosticsEventsEnabled the isDiagnosticsEventsEnabled value to set.
     * @return the DataCollectionOptions object itself.
     */
    public DataCollectionOptions withIsDiagnosticsEventsEnabled(Boolean isDiagnosticsEventsEnabled) {
        this.isDiagnosticsEventsEnabled = isDiagnosticsEventsEnabled;
        return this;
    }

    /**
     * Get the isHealthMonitoringEnabled property: Indicates whether health monitoring is enabled for the VM cluster /
     * Cloud VM cluster / VMBM DBCS.
     * 
     * @return the isHealthMonitoringEnabled value.
     */
    public Boolean isHealthMonitoringEnabled() {
        return this.isHealthMonitoringEnabled;
    }

    /**
     * Set the isHealthMonitoringEnabled property: Indicates whether health monitoring is enabled for the VM cluster /
     * Cloud VM cluster / VMBM DBCS.
     * 
     * @param isHealthMonitoringEnabled the isHealthMonitoringEnabled value to set.
     * @return the DataCollectionOptions object itself.
     */
    public DataCollectionOptions withIsHealthMonitoringEnabled(Boolean isHealthMonitoringEnabled) {
        this.isHealthMonitoringEnabled = isHealthMonitoringEnabled;
        return this;
    }

    /**
     * Get the isIncidentLogsEnabled property: Indicates whether incident logs and trace collection are enabled for the
     * VM cluster / Cloud VM cluster / VMBM DBCS.
     * 
     * @return the isIncidentLogsEnabled value.
     */
    public Boolean isIncidentLogsEnabled() {
        return this.isIncidentLogsEnabled;
    }

    /**
     * Set the isIncidentLogsEnabled property: Indicates whether incident logs and trace collection are enabled for the
     * VM cluster / Cloud VM cluster / VMBM DBCS.
     * 
     * @param isIncidentLogsEnabled the isIncidentLogsEnabled value to set.
     * @return the DataCollectionOptions object itself.
     */
    public DataCollectionOptions withIsIncidentLogsEnabled(Boolean isIncidentLogsEnabled) {
        this.isIncidentLogsEnabled = isIncidentLogsEnabled;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("isDiagnosticsEventsEnabled", this.isDiagnosticsEventsEnabled);
        jsonWriter.writeBooleanField("isHealthMonitoringEnabled", this.isHealthMonitoringEnabled);
        jsonWriter.writeBooleanField("isIncidentLogsEnabled", this.isIncidentLogsEnabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataCollectionOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataCollectionOptions if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataCollectionOptions.
     */
    public static DataCollectionOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataCollectionOptions deserializedDataCollectionOptions = new DataCollectionOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("isDiagnosticsEventsEnabled".equals(fieldName)) {
                    deserializedDataCollectionOptions.isDiagnosticsEventsEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isHealthMonitoringEnabled".equals(fieldName)) {
                    deserializedDataCollectionOptions.isHealthMonitoringEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isIncidentLogsEnabled".equals(fieldName)) {
                    deserializedDataCollectionOptions.isIncidentLogsEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataCollectionOptions;
        });
    }
}
