// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.oracledatabase.fluent.GiVersionsClient;
import com.azure.resourcemanager.oracledatabase.fluent.models.GiVersionInner;
import com.azure.resourcemanager.oracledatabase.implementation.models.GiVersionListResult;
import com.azure.resourcemanager.oracledatabase.models.SystemShapes;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in GiVersionsClient.
 */
public final class GiVersionsClientImpl implements GiVersionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final GiVersionsService service;

    /**
     * The service client containing this operation class.
     */
    private final OracleDatabaseManagementClientImpl client;

    /**
     * Initializes an instance of GiVersionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    GiVersionsClientImpl(OracleDatabaseManagementClientImpl client) {
        this.service
            = RestProxy.create(GiVersionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for OracleDatabaseManagementClientGiVersions to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "OracleDatabaseManagementClientGiVersions")
    public interface GiVersionsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/giVersions/{giversionname}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GiVersionInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @PathParam("giversionname") String giversionname,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/giVersions/{giversionname}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<GiVersionInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @PathParam("giversionname") String giversionname,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/giVersions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GiVersionListResult>> listByLocation(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @QueryParam("shape") SystemShapes shape,
            @QueryParam("zone") String zone, @QueryParam("shapeAttribute") String shapeAttribute,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/giVersions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<GiVersionListResult> listByLocationSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @QueryParam("shape") SystemShapes shape,
            @QueryParam("zone") String zone, @QueryParam("shapeAttribute") String shapeAttribute,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GiVersionListResult>> listByLocationNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<GiVersionListResult> listByLocationNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a GiVersion.
     * 
     * @param location The name of the Azure region.
     * @param giversionname GiVersion name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a GiVersion along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GiVersionInner>> getWithResponseAsync(String location, String giversionname) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), location, giversionname, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a GiVersion.
     * 
     * @param location The name of the Azure region.
     * @param giversionname GiVersion name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a GiVersion on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GiVersionInner> getAsync(String location, String giversionname) {
        return getWithResponseAsync(location, giversionname).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a GiVersion.
     * 
     * @param location The name of the Azure region.
     * @param giversionname GiVersion name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a GiVersion along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GiVersionInner> getWithResponse(String location, String giversionname, Context context) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            location, giversionname, accept, context);
    }

    /**
     * Get a GiVersion.
     * 
     * @param location The name of the Azure region.
     * @param giversionname GiVersion name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a GiVersion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GiVersionInner get(String location, String giversionname) {
        return getWithResponse(location, giversionname, Context.NONE).getValue();
    }

    /**
     * List GiVersion resources by SubscriptionLocationResource.
     * 
     * @param location The name of the Azure region.
     * @param shape If provided, filters the results for the given shape.
     * @param zone Filters the result for the given Azure Availability Zone.
     * @param shapeAttribute Filters the result for the given Shape Attribute, such as BLOCK_STORAGE or SMART_STORAGE.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GiVersion list operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GiVersionInner>> listByLocationSinglePageAsync(String location, SystemShapes shape,
        String zone, String shapeAttribute) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByLocation(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), location, shape, zone, shapeAttribute, accept, context))
            .<PagedResponse<GiVersionInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List GiVersion resources by SubscriptionLocationResource.
     * 
     * @param location The name of the Azure region.
     * @param shape If provided, filters the results for the given shape.
     * @param zone Filters the result for the given Azure Availability Zone.
     * @param shapeAttribute Filters the result for the given Shape Attribute, such as BLOCK_STORAGE or SMART_STORAGE.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GiVersion list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<GiVersionInner> listByLocationAsync(String location, SystemShapes shape, String zone,
        String shapeAttribute) {
        return new PagedFlux<>(() -> listByLocationSinglePageAsync(location, shape, zone, shapeAttribute),
            nextLink -> listByLocationNextSinglePageAsync(nextLink));
    }

    /**
     * List GiVersion resources by SubscriptionLocationResource.
     * 
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GiVersion list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<GiVersionInner> listByLocationAsync(String location) {
        final SystemShapes shape = null;
        final String zone = null;
        final String shapeAttribute = null;
        return new PagedFlux<>(() -> listByLocationSinglePageAsync(location, shape, zone, shapeAttribute),
            nextLink -> listByLocationNextSinglePageAsync(nextLink));
    }

    /**
     * List GiVersion resources by SubscriptionLocationResource.
     * 
     * @param location The name of the Azure region.
     * @param shape If provided, filters the results for the given shape.
     * @param zone Filters the result for the given Azure Availability Zone.
     * @param shapeAttribute Filters the result for the given Shape Attribute, such as BLOCK_STORAGE or SMART_STORAGE.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GiVersion list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<GiVersionInner> listByLocationSinglePage(String location, SystemShapes shape, String zone,
        String shapeAttribute) {
        final String accept = "application/json";
        Response<GiVersionListResult> res
            = service.listByLocationSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), location, shape, zone, shapeAttribute, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List GiVersion resources by SubscriptionLocationResource.
     * 
     * @param location The name of the Azure region.
     * @param shape If provided, filters the results for the given shape.
     * @param zone Filters the result for the given Azure Availability Zone.
     * @param shapeAttribute Filters the result for the given Shape Attribute, such as BLOCK_STORAGE or SMART_STORAGE.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GiVersion list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<GiVersionInner> listByLocationSinglePage(String location, SystemShapes shape, String zone,
        String shapeAttribute, Context context) {
        final String accept = "application/json";
        Response<GiVersionListResult> res
            = service.listByLocationSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), location, shape, zone, shapeAttribute, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List GiVersion resources by SubscriptionLocationResource.
     * 
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GiVersion list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GiVersionInner> listByLocation(String location) {
        final SystemShapes shape = null;
        final String zone = null;
        final String shapeAttribute = null;
        return new PagedIterable<>(() -> listByLocationSinglePage(location, shape, zone, shapeAttribute),
            nextLink -> listByLocationNextSinglePage(nextLink));
    }

    /**
     * List GiVersion resources by SubscriptionLocationResource.
     * 
     * @param location The name of the Azure region.
     * @param shape If provided, filters the results for the given shape.
     * @param zone Filters the result for the given Azure Availability Zone.
     * @param shapeAttribute Filters the result for the given Shape Attribute, such as BLOCK_STORAGE or SMART_STORAGE.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GiVersion list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GiVersionInner> listByLocation(String location, SystemShapes shape, String zone,
        String shapeAttribute, Context context) {
        return new PagedIterable<>(() -> listByLocationSinglePage(location, shape, zone, shapeAttribute, context),
            nextLink -> listByLocationNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GiVersion list operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GiVersionInner>> listByLocationNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByLocationNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<GiVersionInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GiVersion list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<GiVersionInner> listByLocationNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<GiVersionListResult> res
            = service.listByLocationNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GiVersion list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<GiVersionInner> listByLocationNextSinglePage(String nextLink, Context context) {
        final String accept = "application/json";
        Response<GiVersionListResult> res
            = service.listByLocationNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }
}
