// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * DbServer resource properties.
 */
@Immutable
public final class DbServerProperties {
    /*
     * Db server name.
     */
    @JsonProperty(value = "ocid", access = JsonProperty.Access.WRITE_ONLY)
    private String ocid;

    /*
     * The name for the Db Server.
     */
    @JsonProperty(value = "displayName", access = JsonProperty.Access.WRITE_ONLY)
    private String displayName;

    /*
     * The OCID of the compartment.
     */
    @JsonProperty(value = "compartmentId", access = JsonProperty.Access.WRITE_ONLY)
    private String compartmentId;

    /*
     * The OCID of the Exadata infrastructure.
     */
    @JsonProperty(value = "exadataInfrastructureId", access = JsonProperty.Access.WRITE_ONLY)
    private String exadataInfrastructureId;

    /*
     * The number of CPU cores enabled on the Db server.
     */
    @JsonProperty(value = "cpuCoreCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer cpuCoreCount;

    /*
     * dbServerPatching details of the Db server.
     */
    @JsonProperty(value = "dbServerPatchingDetails", access = JsonProperty.Access.WRITE_ONLY)
    private DbServerPatchingDetails dbServerPatchingDetails;

    /*
     * The total memory available in GBs.
     */
    @JsonProperty(value = "maxMemoryInGbs", access = JsonProperty.Access.WRITE_ONLY)
    private Integer maxMemoryInGbs;

    /*
     * The allocated local node storage in GBs on the Db server.
     */
    @JsonProperty(value = "dbNodeStorageSizeInGbs", access = JsonProperty.Access.WRITE_ONLY)
    private Integer dbNodeStorageSizeInGbs;

    /*
     * The OCID of the VM Clusters associated with the Db server.
     */
    @JsonProperty(value = "vmClusterIds", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> vmClusterIds;

    /*
     * The OCID of the Db nodes associated with the Db server.
     */
    @JsonProperty(value = "dbNodeIds", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> dbNodeIds;

    /*
     * Lifecycle details of dbServer.
     */
    @JsonProperty(value = "lifecycleDetails", access = JsonProperty.Access.WRITE_ONLY)
    private String lifecycleDetails;

    /*
     * DbServer provisioning state.
     */
    @JsonProperty(value = "lifecycleState", access = JsonProperty.Access.WRITE_ONLY)
    private DbServerProvisioningState lifecycleState;

    /*
     * The total number of CPU cores available.
     */
    @JsonProperty(value = "maxCpuCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer maxCpuCount;

    /*
     * The list of OCIDs of the Autonomous VM Clusters associated with the Db server.
     */
    @JsonProperty(value = "autonomousVmClusterIds", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> autonomousVmClusterIds;

    /*
     * The list of OCIDs of the Autonomous Virtual Machines associated with the Db server.
     */
    @JsonProperty(value = "autonomousVirtualMachineIds", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> autonomousVirtualMachineIds;

    /*
     * The total max dbNode storage in GBs.
     */
    @JsonProperty(value = "maxDbNodeStorageInGbs", access = JsonProperty.Access.WRITE_ONLY)
    private Integer maxDbNodeStorageInGbs;

    /*
     * The total memory size in GBs.
     */
    @JsonProperty(value = "memorySizeInGbs", access = JsonProperty.Access.WRITE_ONLY)
    private Integer memorySizeInGbs;

    /*
     * The shape of the Db server. The shape determines the amount of CPU, storage, and memory resources available.
     */
    @JsonProperty(value = "shape", access = JsonProperty.Access.WRITE_ONLY)
    private String shape;

    /*
     * The date and time that the Db Server was created.
     */
    @JsonProperty(value = "timeCreated", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime timeCreated;

    /*
     * Azure resource provisioning state.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ResourceProvisioningState provisioningState;

    /**
     * Creates an instance of DbServerProperties class.
     */
    public DbServerProperties() {
    }

    /**
     * Get the ocid property: Db server name.
     * 
     * @return the ocid value.
     */
    public String ocid() {
        return this.ocid;
    }

    /**
     * Get the displayName property: The name for the Db Server.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the compartmentId property: The OCID of the compartment.
     * 
     * @return the compartmentId value.
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * Get the exadataInfrastructureId property: The OCID of the Exadata infrastructure.
     * 
     * @return the exadataInfrastructureId value.
     */
    public String exadataInfrastructureId() {
        return this.exadataInfrastructureId;
    }

    /**
     * Get the cpuCoreCount property: The number of CPU cores enabled on the Db server.
     * 
     * @return the cpuCoreCount value.
     */
    public Integer cpuCoreCount() {
        return this.cpuCoreCount;
    }

    /**
     * Get the dbServerPatchingDetails property: dbServerPatching details of the Db server.
     * 
     * @return the dbServerPatchingDetails value.
     */
    public DbServerPatchingDetails dbServerPatchingDetails() {
        return this.dbServerPatchingDetails;
    }

    /**
     * Get the maxMemoryInGbs property: The total memory available in GBs.
     * 
     * @return the maxMemoryInGbs value.
     */
    public Integer maxMemoryInGbs() {
        return this.maxMemoryInGbs;
    }

    /**
     * Get the dbNodeStorageSizeInGbs property: The allocated local node storage in GBs on the Db server.
     * 
     * @return the dbNodeStorageSizeInGbs value.
     */
    public Integer dbNodeStorageSizeInGbs() {
        return this.dbNodeStorageSizeInGbs;
    }

    /**
     * Get the vmClusterIds property: The OCID of the VM Clusters associated with the Db server.
     * 
     * @return the vmClusterIds value.
     */
    public List<String> vmClusterIds() {
        return this.vmClusterIds;
    }

    /**
     * Get the dbNodeIds property: The OCID of the Db nodes associated with the Db server.
     * 
     * @return the dbNodeIds value.
     */
    public List<String> dbNodeIds() {
        return this.dbNodeIds;
    }

    /**
     * Get the lifecycleDetails property: Lifecycle details of dbServer.
     * 
     * @return the lifecycleDetails value.
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }

    /**
     * Get the lifecycleState property: DbServer provisioning state.
     * 
     * @return the lifecycleState value.
     */
    public DbServerProvisioningState lifecycleState() {
        return this.lifecycleState;
    }

    /**
     * Get the maxCpuCount property: The total number of CPU cores available.
     * 
     * @return the maxCpuCount value.
     */
    public Integer maxCpuCount() {
        return this.maxCpuCount;
    }

    /**
     * Get the autonomousVmClusterIds property: The list of OCIDs of the Autonomous VM Clusters associated with the Db
     * server.
     * 
     * @return the autonomousVmClusterIds value.
     */
    public List<String> autonomousVmClusterIds() {
        return this.autonomousVmClusterIds;
    }

    /**
     * Get the autonomousVirtualMachineIds property: The list of OCIDs of the Autonomous Virtual Machines associated
     * with the Db server.
     * 
     * @return the autonomousVirtualMachineIds value.
     */
    public List<String> autonomousVirtualMachineIds() {
        return this.autonomousVirtualMachineIds;
    }

    /**
     * Get the maxDbNodeStorageInGbs property: The total max dbNode storage in GBs.
     * 
     * @return the maxDbNodeStorageInGbs value.
     */
    public Integer maxDbNodeStorageInGbs() {
        return this.maxDbNodeStorageInGbs;
    }

    /**
     * Get the memorySizeInGbs property: The total memory size in GBs.
     * 
     * @return the memorySizeInGbs value.
     */
    public Integer memorySizeInGbs() {
        return this.memorySizeInGbs;
    }

    /**
     * Get the shape property: The shape of the Db server. The shape determines the amount of CPU, storage, and memory
     * resources available.
     * 
     * @return the shape value.
     */
    public String shape() {
        return this.shape;
    }

    /**
     * Get the timeCreated property: The date and time that the Db Server was created.
     * 
     * @return the timeCreated value.
     */
    public OffsetDateTime timeCreated() {
        return this.timeCreated;
    }

    /**
     * Get the provisioningState property: Azure resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dbServerPatchingDetails() != null) {
            dbServerPatchingDetails().validate();
        }
    }
}
