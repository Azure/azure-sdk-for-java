// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DbVersion resource model.
 */
@Immutable
public final class DbVersionProperties implements JsonSerializable<DbVersionProperties> {
    /*
     * A valid Oracle Database version.
     */
    private String version;

    /*
     * True if this version of the Oracle Database software is the latest version for a release.
     */
    private Boolean isLatestForMajorVersion;

    /*
     * True if this version of the Oracle Database software is the preview version.
     */
    private Boolean isPreviewDbVersion;

    /*
     * True if this version of the Oracle Database software is supported for Upgrade.
     */
    private Boolean isUpgradeSupported;

    /*
     * True if this version of the Oracle Database software supports pluggable databases.
     */
    private Boolean supportsPdb;

    /**
     * Creates an instance of DbVersionProperties class.
     */
    private DbVersionProperties() {
    }

    /**
     * Get the version property: A valid Oracle Database version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the isLatestForMajorVersion property: True if this version of the Oracle Database software is the latest
     * version for a release.
     * 
     * @return the isLatestForMajorVersion value.
     */
    public Boolean isLatestForMajorVersion() {
        return this.isLatestForMajorVersion;
    }

    /**
     * Get the isPreviewDbVersion property: True if this version of the Oracle Database software is the preview version.
     * 
     * @return the isPreviewDbVersion value.
     */
    public Boolean isPreviewDbVersion() {
        return this.isPreviewDbVersion;
    }

    /**
     * Get the isUpgradeSupported property: True if this version of the Oracle Database software is supported for
     * Upgrade.
     * 
     * @return the isUpgradeSupported value.
     */
    public Boolean isUpgradeSupported() {
        return this.isUpgradeSupported;
    }

    /**
     * Get the supportsPdb property: True if this version of the Oracle Database software supports pluggable databases.
     * 
     * @return the supportsPdb value.
     */
    public Boolean supportsPdb() {
        return this.supportsPdb;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeBooleanField("isLatestForMajorVersion", this.isLatestForMajorVersion);
        jsonWriter.writeBooleanField("isPreviewDbVersion", this.isPreviewDbVersion);
        jsonWriter.writeBooleanField("isUpgradeSupported", this.isUpgradeSupported);
        jsonWriter.writeBooleanField("supportsPdb", this.supportsPdb);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DbVersionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DbVersionProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DbVersionProperties.
     */
    public static DbVersionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DbVersionProperties deserializedDbVersionProperties = new DbVersionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedDbVersionProperties.version = reader.getString();
                } else if ("isLatestForMajorVersion".equals(fieldName)) {
                    deserializedDbVersionProperties.isLatestForMajorVersion
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isPreviewDbVersion".equals(fieldName)) {
                    deserializedDbVersionProperties.isPreviewDbVersion = reader.getNullable(JsonReader::getBoolean);
                } else if ("isUpgradeSupported".equals(fieldName)) {
                    deserializedDbVersionProperties.isUpgradeSupported = reader.getNullable(JsonReader::getBoolean);
                } else if ("supportsPdb".equals(fieldName)) {
                    deserializedDbVersionProperties.supportsPdb = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDbVersionProperties;
        });
    }
}
