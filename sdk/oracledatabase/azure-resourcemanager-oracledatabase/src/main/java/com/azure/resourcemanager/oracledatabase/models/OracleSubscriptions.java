// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.oracledatabase.fluent.models.OracleSubscriptionInner;

/**
 * Resource collection API of OracleSubscriptions.
 */
public interface OracleSubscriptions {
    /**
     * List OracleSubscription resources by subscription ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a OracleSubscription list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<OracleSubscription> list();

    /**
     * List OracleSubscription resources by subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a OracleSubscription list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<OracleSubscription> list(Context context);

    /**
     * Get a OracleSubscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a OracleSubscription along with {@link Response}.
     */
    Response<OracleSubscription> getWithResponse(Context context);

    /**
     * Get a OracleSubscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a OracleSubscription.
     */
    OracleSubscription get();

    /**
     * Create a OracleSubscription.
     * 
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return oracleSubscription resource definition.
     */
    OracleSubscription createOrUpdate(OracleSubscriptionInner resource);

    /**
     * Create a OracleSubscription.
     * 
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return oracleSubscription resource definition.
     */
    OracleSubscription createOrUpdate(OracleSubscriptionInner resource, Context context);

    /**
     * Update a OracleSubscription.
     * 
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return oracleSubscription resource definition.
     */
    OracleSubscription update(OracleSubscriptionUpdate properties);

    /**
     * Update a OracleSubscription.
     * 
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return oracleSubscription resource definition.
     */
    OracleSubscription update(OracleSubscriptionUpdate properties, Context context);

    /**
     * Delete a OracleSubscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete();

    /**
     * Delete a OracleSubscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(Context context);

    /**
     * List Activation Links.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return activation Links model.
     */
    ActivationLinks listActivationLinks();

    /**
     * List Activation Links.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return activation Links model.
     */
    ActivationLinks listActivationLinks(Context context);

    /**
     * List Cloud Account Details.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Account Details model.
     */
    CloudAccountDetails listCloudAccountDetails();

    /**
     * List Cloud Account Details.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Account Details model.
     */
    CloudAccountDetails listCloudAccountDetails(Context context);

    /**
     * List Saas Subscription Details.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS Subscription Details model.
     */
    SaasSubscriptionDetails listSaasSubscriptionDetails();

    /**
     * List Saas Subscription Details.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS Subscription Details model.
     */
    SaasSubscriptionDetails listSaasSubscriptionDetails(Context context);
}
