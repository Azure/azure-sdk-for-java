// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.oracledatabase.fluent.DbVersionsClient;
import com.azure.resourcemanager.oracledatabase.fluent.models.DbVersionInner;
import com.azure.resourcemanager.oracledatabase.models.BaseDbSystemShapes;
import com.azure.resourcemanager.oracledatabase.models.DbVersion;
import com.azure.resourcemanager.oracledatabase.models.DbVersions;
import com.azure.resourcemanager.oracledatabase.models.ShapeFamilyType;
import com.azure.resourcemanager.oracledatabase.models.StorageManagementType;

public final class DbVersionsImpl implements DbVersions {
    private static final ClientLogger LOGGER = new ClientLogger(DbVersionsImpl.class);

    private final DbVersionsClient innerClient;

    private final com.azure.resourcemanager.oracledatabase.OracleDatabaseManager serviceManager;

    public DbVersionsImpl(DbVersionsClient innerClient,
        com.azure.resourcemanager.oracledatabase.OracleDatabaseManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<DbVersion> getWithResponse(String location, String dbversionsname, Context context) {
        Response<DbVersionInner> inner = this.serviceClient().getWithResponse(location, dbversionsname, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DbVersionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DbVersion get(String location, String dbversionsname) {
        DbVersionInner inner = this.serviceClient().get(location, dbversionsname);
        if (inner != null) {
            return new DbVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<DbVersion> listByLocation(String location) {
        PagedIterable<DbVersionInner> inner = this.serviceClient().listByLocation(location);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DbVersionImpl(inner1, this.manager()));
    }

    public PagedIterable<DbVersion> listByLocation(String location, BaseDbSystemShapes dbSystemShape, String dbSystemId,
        StorageManagementType storageManagement, Boolean isUpgradeSupported, Boolean isDatabaseSoftwareImageSupported,
        ShapeFamilyType shapeFamily, Context context) {
        PagedIterable<DbVersionInner> inner = this.serviceClient()
            .listByLocation(location, dbSystemShape, dbSystemId, storageManagement, isUpgradeSupported,
                isDatabaseSoftwareImageSupported, shapeFamily, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DbVersionImpl(inner1, this.manager()));
    }

    private DbVersionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.oracledatabase.OracleDatabaseManager manager() {
        return this.serviceManager;
    }
}
