// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of the ExaCS Db node. Applies to Exadata Database Service on Exascale Infrastructure only.
 */
@Fluent
public final class DbNodeDetails implements JsonSerializable<DbNodeDetails> {
    /*
     * Exascale DbNode Azure Resource ID
     */
    private String dbNodeId;

    /**
     * Creates an instance of DbNodeDetails class.
     */
    public DbNodeDetails() {
    }

    /**
     * Get the dbNodeId property: Exascale DbNode Azure Resource ID.
     * 
     * @return the dbNodeId value.
     */
    public String dbNodeId() {
        return this.dbNodeId;
    }

    /**
     * Set the dbNodeId property: Exascale DbNode Azure Resource ID.
     * 
     * @param dbNodeId the dbNodeId value to set.
     * @return the DbNodeDetails object itself.
     */
    public DbNodeDetails withDbNodeId(String dbNodeId) {
        this.dbNodeId = dbNodeId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dbNodeId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property dbNodeId in model DbNodeDetails"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DbNodeDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dbNodeId", this.dbNodeId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DbNodeDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DbNodeDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DbNodeDetails.
     */
    public static DbNodeDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DbNodeDetails deserializedDbNodeDetails = new DbNodeDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dbNodeId".equals(fieldName)) {
                    deserializedDbNodeDetails.dbNodeId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDbNodeDetails;
        });
    }
}
