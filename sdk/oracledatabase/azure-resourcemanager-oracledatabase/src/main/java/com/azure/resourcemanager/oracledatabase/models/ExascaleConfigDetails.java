// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The exascale config response details for the cloud Exadata infrastructure.
 */
@Immutable
public final class ExascaleConfigDetails implements JsonSerializable<ExascaleConfigDetails> {
    /*
     * Storage size needed for Exascale in GBs.
     */
    private int totalStorageInGbs;

    /*
     * Available storage size for Exascale in GBs.
     */
    private Integer availableStorageInGbs;

    /**
     * Creates an instance of ExascaleConfigDetails class.
     */
    private ExascaleConfigDetails() {
    }

    /**
     * Get the totalStorageInGbs property: Storage size needed for Exascale in GBs.
     * 
     * @return the totalStorageInGbs value.
     */
    public int totalStorageInGbs() {
        return this.totalStorageInGbs;
    }

    /**
     * Get the availableStorageInGbs property: Available storage size for Exascale in GBs.
     * 
     * @return the availableStorageInGbs value.
     */
    public Integer availableStorageInGbs() {
        return this.availableStorageInGbs;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("totalStorageInGbs", this.totalStorageInGbs);
        jsonWriter.writeNumberField("availableStorageInGbs", this.availableStorageInGbs);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExascaleConfigDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExascaleConfigDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExascaleConfigDetails.
     */
    public static ExascaleConfigDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExascaleConfigDetails deserializedExascaleConfigDetails = new ExascaleConfigDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("totalStorageInGbs".equals(fieldName)) {
                    deserializedExascaleConfigDetails.totalStorageInGbs = reader.getInt();
                } else if ("availableStorageInGbs".equals(fieldName)) {
                    deserializedExascaleConfigDetails.availableStorageInGbs = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExascaleConfigDetails;
        });
    }
}
