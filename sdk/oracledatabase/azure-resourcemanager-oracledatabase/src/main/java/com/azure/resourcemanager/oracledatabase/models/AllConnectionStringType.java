// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The connection string profile to allow clients to group, filter and select connection string values based on
 * structured metadata.
 */
@Fluent
public final class AllConnectionStringType implements JsonSerializable<AllConnectionStringType> {
    /*
     * The High database service provides the highest level of resources to each SQL statement resulting in the highest
     * performance, but supports the fewest number of concurrent SQL statements.
     */
    private String high;

    /*
     * The Low database service provides the least level of resources to each SQL statement, but supports the most
     * number of concurrent SQL statements.
     */
    private String low;

    /*
     * The Medium database service provides a lower level of resources to each SQL statement potentially resulting a
     * lower level of performance, but supports more concurrent SQL statements.
     */
    private String medium;

    /**
     * Creates an instance of AllConnectionStringType class.
     */
    public AllConnectionStringType() {
    }

    /**
     * Get the high property: The High database service provides the highest level of resources to each SQL statement
     * resulting in the highest performance, but supports the fewest number of concurrent SQL statements.
     * 
     * @return the high value.
     */
    public String high() {
        return this.high;
    }

    /**
     * Set the high property: The High database service provides the highest level of resources to each SQL statement
     * resulting in the highest performance, but supports the fewest number of concurrent SQL statements.
     * 
     * @param high the high value to set.
     * @return the AllConnectionStringType object itself.
     */
    public AllConnectionStringType withHigh(String high) {
        this.high = high;
        return this;
    }

    /**
     * Get the low property: The Low database service provides the least level of resources to each SQL statement, but
     * supports the most number of concurrent SQL statements.
     * 
     * @return the low value.
     */
    public String low() {
        return this.low;
    }

    /**
     * Set the low property: The Low database service provides the least level of resources to each SQL statement, but
     * supports the most number of concurrent SQL statements.
     * 
     * @param low the low value to set.
     * @return the AllConnectionStringType object itself.
     */
    public AllConnectionStringType withLow(String low) {
        this.low = low;
        return this;
    }

    /**
     * Get the medium property: The Medium database service provides a lower level of resources to each SQL statement
     * potentially resulting a lower level of performance, but supports more concurrent SQL statements.
     * 
     * @return the medium value.
     */
    public String medium() {
        return this.medium;
    }

    /**
     * Set the medium property: The Medium database service provides a lower level of resources to each SQL statement
     * potentially resulting a lower level of performance, but supports more concurrent SQL statements.
     * 
     * @param medium the medium value to set.
     * @return the AllConnectionStringType object itself.
     */
    public AllConnectionStringType withMedium(String medium) {
        this.medium = medium;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("high", this.high);
        jsonWriter.writeStringField("low", this.low);
        jsonWriter.writeStringField("medium", this.medium);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AllConnectionStringType from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AllConnectionStringType if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AllConnectionStringType.
     */
    public static AllConnectionStringType fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AllConnectionStringType deserializedAllConnectionStringType = new AllConnectionStringType();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("high".equals(fieldName)) {
                    deserializedAllConnectionStringType.high = reader.getString();
                } else if ("low".equals(fieldName)) {
                    deserializedAllConnectionStringType.low = reader.getString();
                } else if ("medium".equals(fieldName)) {
                    deserializedAllConnectionStringType.medium = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAllConnectionStringType;
        });
    }
}
