// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/**
 * Autonomous Database clone resource model.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "dataBaseType",
    defaultImpl = AutonomousDatabaseCloneProperties.class,
    visible = true)
@JsonTypeName("Clone")
@Fluent
public final class AutonomousDatabaseCloneProperties extends AutonomousDatabaseBaseProperties {
    /*
     * Database type to be created.
     */
    @JsonTypeId
    @JsonProperty(value = "dataBaseType", required = true)
    private DataBaseType dataBaseType = DataBaseType.CLONE;

    /*
     * The source of the database.
     */
    @JsonProperty(value = "source")
    private SourceType source;

    /*
     * The Azure ID of the Autonomous Database that was cloned to create the current Autonomous Database.
     */
    @JsonProperty(value = "sourceId", required = true)
    private String sourceId;

    /*
     * The Autonomous Database clone type.
     */
    @JsonProperty(value = "cloneType", required = true)
    private CloneType cloneType;

    /*
     * Indicates if the refreshable clone can be reconnected to its source database.
     */
    @JsonProperty(value = "isReconnectCloneEnabled", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean isReconnectCloneEnabled;

    /*
     * Indicates if the Autonomous Database is a refreshable clone.
     */
    @JsonProperty(value = "isRefreshableClone", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean isRefreshableClone;

    /*
     * The refresh mode of the clone.
     */
    @JsonProperty(value = "refreshableModel")
    private RefreshableModelType refreshableModel;

    /*
     * The refresh status of the clone.
     */
    @JsonProperty(value = "refreshableStatus", access = JsonProperty.Access.WRITE_ONLY)
    private RefreshableStatusType refreshableStatus;

    /*
     * The time and date as an RFC3339 formatted string, e.g., 2022-01-01T12:00:00.000Z, to set the limit for a refreshable clone to be reconnected to its source database.
     */
    @JsonProperty(value = "timeUntilReconnectCloneEnabled")
    private String timeUntilReconnectCloneEnabled;

    /**
     * Creates an instance of AutonomousDatabaseCloneProperties class.
     */
    public AutonomousDatabaseCloneProperties() {
    }

    /**
     * Get the dataBaseType property: Database type to be created.
     * 
     * @return the dataBaseType value.
     */
    @Override
    public DataBaseType dataBaseType() {
        return this.dataBaseType;
    }

    /**
     * Get the source property: The source of the database.
     * 
     * @return the source value.
     */
    public SourceType source() {
        return this.source;
    }

    /**
     * Set the source property: The source of the database.
     * 
     * @param source the source value to set.
     * @return the AutonomousDatabaseCloneProperties object itself.
     */
    public AutonomousDatabaseCloneProperties withSource(SourceType source) {
        this.source = source;
        return this;
    }

    /**
     * Get the sourceId property: The Azure ID of the Autonomous Database that was cloned to create the current
     * Autonomous Database.
     * 
     * @return the sourceId value.
     */
    public String sourceId() {
        return this.sourceId;
    }

    /**
     * Set the sourceId property: The Azure ID of the Autonomous Database that was cloned to create the current
     * Autonomous Database.
     * 
     * @param sourceId the sourceId value to set.
     * @return the AutonomousDatabaseCloneProperties object itself.
     */
    public AutonomousDatabaseCloneProperties withSourceId(String sourceId) {
        this.sourceId = sourceId;
        return this;
    }

    /**
     * Get the cloneType property: The Autonomous Database clone type.
     * 
     * @return the cloneType value.
     */
    public CloneType cloneType() {
        return this.cloneType;
    }

    /**
     * Set the cloneType property: The Autonomous Database clone type.
     * 
     * @param cloneType the cloneType value to set.
     * @return the AutonomousDatabaseCloneProperties object itself.
     */
    public AutonomousDatabaseCloneProperties withCloneType(CloneType cloneType) {
        this.cloneType = cloneType;
        return this;
    }

    /**
     * Get the isReconnectCloneEnabled property: Indicates if the refreshable clone can be reconnected to its source
     * database.
     * 
     * @return the isReconnectCloneEnabled value.
     */
    public Boolean isReconnectCloneEnabled() {
        return this.isReconnectCloneEnabled;
    }

    /**
     * Get the isRefreshableClone property: Indicates if the Autonomous Database is a refreshable clone.
     * 
     * @return the isRefreshableClone value.
     */
    public Boolean isRefreshableClone() {
        return this.isRefreshableClone;
    }

    /**
     * Get the refreshableModel property: The refresh mode of the clone.
     * 
     * @return the refreshableModel value.
     */
    public RefreshableModelType refreshableModel() {
        return this.refreshableModel;
    }

    /**
     * Set the refreshableModel property: The refresh mode of the clone.
     * 
     * @param refreshableModel the refreshableModel value to set.
     * @return the AutonomousDatabaseCloneProperties object itself.
     */
    public AutonomousDatabaseCloneProperties withRefreshableModel(RefreshableModelType refreshableModel) {
        this.refreshableModel = refreshableModel;
        return this;
    }

    /**
     * Get the refreshableStatus property: The refresh status of the clone.
     * 
     * @return the refreshableStatus value.
     */
    public RefreshableStatusType refreshableStatus() {
        return this.refreshableStatus;
    }

    /**
     * Get the timeUntilReconnectCloneEnabled property: The time and date as an RFC3339 formatted string, e.g.,
     * 2022-01-01T12:00:00.000Z, to set the limit for a refreshable clone to be reconnected to its source database.
     * 
     * @return the timeUntilReconnectCloneEnabled value.
     */
    public String timeUntilReconnectCloneEnabled() {
        return this.timeUntilReconnectCloneEnabled;
    }

    /**
     * Set the timeUntilReconnectCloneEnabled property: The time and date as an RFC3339 formatted string, e.g.,
     * 2022-01-01T12:00:00.000Z, to set the limit for a refreshable clone to be reconnected to its source database.
     * 
     * @param timeUntilReconnectCloneEnabled the timeUntilReconnectCloneEnabled value to set.
     * @return the AutonomousDatabaseCloneProperties object itself.
     */
    public AutonomousDatabaseCloneProperties withTimeUntilReconnectCloneEnabled(String timeUntilReconnectCloneEnabled) {
        this.timeUntilReconnectCloneEnabled = timeUntilReconnectCloneEnabled;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withAdminPassword(String adminPassword) {
        super.withAdminPassword(adminPassword);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties
        withAutonomousMaintenanceScheduleType(AutonomousMaintenanceScheduleType autonomousMaintenanceScheduleType) {
        super.withAutonomousMaintenanceScheduleType(autonomousMaintenanceScheduleType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withCharacterSet(String characterSet) {
        super.withCharacterSet(characterSet);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withComputeCount(Float computeCount) {
        super.withComputeCount(computeCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withComputeModel(ComputeModel computeModel) {
        super.withComputeModel(computeModel);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withCpuCoreCount(Integer cpuCoreCount) {
        super.withCpuCoreCount(cpuCoreCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withCustomerContacts(List<CustomerContact> customerContacts) {
        super.withCustomerContacts(customerContacts);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withDataStorageSizeInTbs(Integer dataStorageSizeInTbs) {
        super.withDataStorageSizeInTbs(dataStorageSizeInTbs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withDataStorageSizeInGbs(Integer dataStorageSizeInGbs) {
        super.withDataStorageSizeInGbs(dataStorageSizeInGbs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withDbVersion(String dbVersion) {
        super.withDbVersion(dbVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withDbWorkload(WorkloadType dbWorkload) {
        super.withDbWorkload(dbWorkload);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withDisplayName(String displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withIsAutoScalingEnabled(Boolean isAutoScalingEnabled) {
        super.withIsAutoScalingEnabled(isAutoScalingEnabled);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties
        withIsAutoScalingForStorageEnabled(Boolean isAutoScalingForStorageEnabled) {
        super.withIsAutoScalingForStorageEnabled(isAutoScalingForStorageEnabled);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withPeerDbId(String peerDbId) {
        super.withPeerDbId(peerDbId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withIsLocalDataGuardEnabled(Boolean isLocalDataGuardEnabled) {
        super.withIsLocalDataGuardEnabled(isLocalDataGuardEnabled);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withIsMtlsConnectionRequired(Boolean isMtlsConnectionRequired) {
        super.withIsMtlsConnectionRequired(isMtlsConnectionRequired);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties
        withIsPreviewVersionWithServiceTermsAccepted(Boolean isPreviewVersionWithServiceTermsAccepted) {
        super.withIsPreviewVersionWithServiceTermsAccepted(isPreviewVersionWithServiceTermsAccepted);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withLicenseModel(LicenseModel licenseModel) {
        super.withLicenseModel(licenseModel);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withNcharacterSet(String ncharacterSet) {
        super.withNcharacterSet(ncharacterSet);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withScheduledOperations(ScheduledOperationsType scheduledOperations) {
        super.withScheduledOperations(scheduledOperations);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withPrivateEndpointIp(String privateEndpointIp) {
        super.withPrivateEndpointIp(privateEndpointIp);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withPrivateEndpointLabel(String privateEndpointLabel) {
        super.withPrivateEndpointLabel(privateEndpointLabel);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withSubnetId(String subnetId) {
        super.withSubnetId(subnetId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withVnetId(String vnetId) {
        super.withVnetId(vnetId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withDatabaseEdition(DatabaseEditionType databaseEdition) {
        super.withDatabaseEdition(databaseEdition);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withAutonomousDatabaseId(String autonomousDatabaseId) {
        super.withAutonomousDatabaseId(autonomousDatabaseId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties
        withLocalAdgAutoFailoverMaxDataLossLimit(Integer localAdgAutoFailoverMaxDataLossLimit) {
        super.withLocalAdgAutoFailoverMaxDataLossLimit(localAdgAutoFailoverMaxDataLossLimit);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withOpenMode(OpenModeType openMode) {
        super.withOpenMode(openMode);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withPermissionLevel(PermissionLevelType permissionLevel) {
        super.withPermissionLevel(permissionLevel);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withRole(RoleType role) {
        super.withRole(role);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withBackupRetentionPeriodInDays(Integer backupRetentionPeriodInDays) {
        super.withBackupRetentionPeriodInDays(backupRetentionPeriodInDays);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withWhitelistedIps(List<String> whitelistedIps) {
        super.withWhitelistedIps(whitelistedIps);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (sourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceId in model AutonomousDatabaseCloneProperties"));
        }
        if (cloneType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property cloneType in model AutonomousDatabaseCloneProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AutonomousDatabaseCloneProperties.class);
}
