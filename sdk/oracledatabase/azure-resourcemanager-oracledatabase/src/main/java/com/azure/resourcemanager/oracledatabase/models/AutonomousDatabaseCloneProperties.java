// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Autonomous Database clone resource model.
 */
@Fluent
public final class AutonomousDatabaseCloneProperties extends AutonomousDatabaseBaseProperties {
    /*
     * Database type to be created.
     */
    private DataBaseType dataBaseType = DataBaseType.CLONE;

    /*
     * The source of the database.
     */
    private SourceType source;

    /*
     * The Azure resource ID of the Autonomous Database that was cloned to create the current Autonomous Database.
     */
    private String sourceId;

    /*
     * The Autonomous Database clone type.
     */
    private CloneType cloneType;

    /*
     * Indicates if the refreshable clone can be reconnected to its source database.
     */
    private Boolean isReconnectCloneEnabled;

    /*
     * Indicates if the Autonomous Database is a refreshable clone.
     */
    private Boolean isRefreshableClone;

    /*
     * The refresh mode of the clone.
     */
    private RefreshableModelType refreshableModel;

    /*
     * The refresh status of the clone.
     */
    private RefreshableStatusType refreshableStatus;

    /*
     * The time and date as an RFC3339 formatted string, e.g., 2022-01-01T12:00:00.000Z, to set the limit for a
     * refreshable clone to be reconnected to its source database.
     */
    private String timeUntilReconnectCloneEnabled;

    /**
     * Creates an instance of AutonomousDatabaseCloneProperties class.
     */
    public AutonomousDatabaseCloneProperties() {
    }

    /**
     * Get the dataBaseType property: Database type to be created.
     * 
     * @return the dataBaseType value.
     */
    @Override
    public DataBaseType dataBaseType() {
        return this.dataBaseType;
    }

    /**
     * Get the source property: The source of the database.
     * 
     * @return the source value.
     */
    public SourceType source() {
        return this.source;
    }

    /**
     * Set the source property: The source of the database.
     * 
     * @param source the source value to set.
     * @return the AutonomousDatabaseCloneProperties object itself.
     */
    public AutonomousDatabaseCloneProperties withSource(SourceType source) {
        this.source = source;
        return this;
    }

    /**
     * Get the sourceId property: The Azure resource ID of the Autonomous Database that was cloned to create the current
     * Autonomous Database.
     * 
     * @return the sourceId value.
     */
    public String sourceId() {
        return this.sourceId;
    }

    /**
     * Set the sourceId property: The Azure resource ID of the Autonomous Database that was cloned to create the current
     * Autonomous Database.
     * 
     * @param sourceId the sourceId value to set.
     * @return the AutonomousDatabaseCloneProperties object itself.
     */
    public AutonomousDatabaseCloneProperties withSourceId(String sourceId) {
        this.sourceId = sourceId;
        return this;
    }

    /**
     * Get the cloneType property: The Autonomous Database clone type.
     * 
     * @return the cloneType value.
     */
    public CloneType cloneType() {
        return this.cloneType;
    }

    /**
     * Set the cloneType property: The Autonomous Database clone type.
     * 
     * @param cloneType the cloneType value to set.
     * @return the AutonomousDatabaseCloneProperties object itself.
     */
    public AutonomousDatabaseCloneProperties withCloneType(CloneType cloneType) {
        this.cloneType = cloneType;
        return this;
    }

    /**
     * Get the isReconnectCloneEnabled property: Indicates if the refreshable clone can be reconnected to its source
     * database.
     * 
     * @return the isReconnectCloneEnabled value.
     */
    public Boolean isReconnectCloneEnabled() {
        return this.isReconnectCloneEnabled;
    }

    /**
     * Get the isRefreshableClone property: Indicates if the Autonomous Database is a refreshable clone.
     * 
     * @return the isRefreshableClone value.
     */
    public Boolean isRefreshableClone() {
        return this.isRefreshableClone;
    }

    /**
     * Get the refreshableModel property: The refresh mode of the clone.
     * 
     * @return the refreshableModel value.
     */
    public RefreshableModelType refreshableModel() {
        return this.refreshableModel;
    }

    /**
     * Set the refreshableModel property: The refresh mode of the clone.
     * 
     * @param refreshableModel the refreshableModel value to set.
     * @return the AutonomousDatabaseCloneProperties object itself.
     */
    public AutonomousDatabaseCloneProperties withRefreshableModel(RefreshableModelType refreshableModel) {
        this.refreshableModel = refreshableModel;
        return this;
    }

    /**
     * Get the refreshableStatus property: The refresh status of the clone.
     * 
     * @return the refreshableStatus value.
     */
    public RefreshableStatusType refreshableStatus() {
        return this.refreshableStatus;
    }

    /**
     * Get the timeUntilReconnectCloneEnabled property: The time and date as an RFC3339 formatted string, e.g.,
     * 2022-01-01T12:00:00.000Z, to set the limit for a refreshable clone to be reconnected to its source database.
     * 
     * @return the timeUntilReconnectCloneEnabled value.
     */
    public String timeUntilReconnectCloneEnabled() {
        return this.timeUntilReconnectCloneEnabled;
    }

    /**
     * Set the timeUntilReconnectCloneEnabled property: The time and date as an RFC3339 formatted string, e.g.,
     * 2022-01-01T12:00:00.000Z, to set the limit for a refreshable clone to be reconnected to its source database.
     * 
     * @param timeUntilReconnectCloneEnabled the timeUntilReconnectCloneEnabled value to set.
     * @return the AutonomousDatabaseCloneProperties object itself.
     */
    public AutonomousDatabaseCloneProperties withTimeUntilReconnectCloneEnabled(String timeUntilReconnectCloneEnabled) {
        this.timeUntilReconnectCloneEnabled = timeUntilReconnectCloneEnabled;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withAdminPassword(String adminPassword) {
        super.withAdminPassword(adminPassword);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties
        withAutonomousMaintenanceScheduleType(AutonomousMaintenanceScheduleType autonomousMaintenanceScheduleType) {
        super.withAutonomousMaintenanceScheduleType(autonomousMaintenanceScheduleType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withCharacterSet(String characterSet) {
        super.withCharacterSet(characterSet);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withComputeCount(Double computeCount) {
        super.withComputeCount(computeCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withComputeModel(ComputeModel computeModel) {
        super.withComputeModel(computeModel);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withCpuCoreCount(Integer cpuCoreCount) {
        super.withCpuCoreCount(cpuCoreCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withCustomerContacts(List<CustomerContact> customerContacts) {
        super.withCustomerContacts(customerContacts);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withDataStorageSizeInTbs(Integer dataStorageSizeInTbs) {
        super.withDataStorageSizeInTbs(dataStorageSizeInTbs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withDataStorageSizeInGbs(Integer dataStorageSizeInGbs) {
        super.withDataStorageSizeInGbs(dataStorageSizeInGbs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withDbVersion(String dbVersion) {
        super.withDbVersion(dbVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withDbWorkload(WorkloadType dbWorkload) {
        super.withDbWorkload(dbWorkload);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withDisplayName(String displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withIsAutoScalingEnabled(Boolean isAutoScalingEnabled) {
        super.withIsAutoScalingEnabled(isAutoScalingEnabled);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties
        withIsAutoScalingForStorageEnabled(Boolean isAutoScalingForStorageEnabled) {
        super.withIsAutoScalingForStorageEnabled(isAutoScalingForStorageEnabled);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withPeerDbId(String peerDbId) {
        super.withPeerDbId(peerDbId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withIsLocalDataGuardEnabled(Boolean isLocalDataGuardEnabled) {
        super.withIsLocalDataGuardEnabled(isLocalDataGuardEnabled);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withIsMtlsConnectionRequired(Boolean isMtlsConnectionRequired) {
        super.withIsMtlsConnectionRequired(isMtlsConnectionRequired);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties
        withIsPreviewVersionWithServiceTermsAccepted(Boolean isPreviewVersionWithServiceTermsAccepted) {
        super.withIsPreviewVersionWithServiceTermsAccepted(isPreviewVersionWithServiceTermsAccepted);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withLicenseModel(LicenseModel licenseModel) {
        super.withLicenseModel(licenseModel);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withNcharacterSet(String ncharacterSet) {
        super.withNcharacterSet(ncharacterSet);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withScheduledOperations(ScheduledOperationsType scheduledOperations) {
        super.withScheduledOperations(scheduledOperations);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withPrivateEndpointIp(String privateEndpointIp) {
        super.withPrivateEndpointIp(privateEndpointIp);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withPrivateEndpointLabel(String privateEndpointLabel) {
        super.withPrivateEndpointLabel(privateEndpointLabel);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withSubnetId(String subnetId) {
        super.withSubnetId(subnetId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withVnetId(String vnetId) {
        super.withVnetId(vnetId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withDatabaseEdition(DatabaseEditionType databaseEdition) {
        super.withDatabaseEdition(databaseEdition);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withAutonomousDatabaseId(String autonomousDatabaseId) {
        super.withAutonomousDatabaseId(autonomousDatabaseId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties
        withLongTermBackupSchedule(LongTermBackUpScheduleDetails longTermBackupSchedule) {
        super.withLongTermBackupSchedule(longTermBackupSchedule);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties
        withLocalAdgAutoFailoverMaxDataLossLimit(Integer localAdgAutoFailoverMaxDataLossLimit) {
        super.withLocalAdgAutoFailoverMaxDataLossLimit(localAdgAutoFailoverMaxDataLossLimit);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withOpenMode(OpenModeType openMode) {
        super.withOpenMode(openMode);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withPermissionLevel(PermissionLevelType permissionLevel) {
        super.withPermissionLevel(permissionLevel);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withRole(RoleType role) {
        super.withRole(role);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withBackupRetentionPeriodInDays(Integer backupRetentionPeriodInDays) {
        super.withBackupRetentionPeriodInDays(backupRetentionPeriodInDays);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCloneProperties withWhitelistedIps(List<String> whitelistedIps) {
        super.withWhitelistedIps(whitelistedIps);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (sourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceId in model AutonomousDatabaseCloneProperties"));
        }
        if (cloneType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property cloneType in model AutonomousDatabaseCloneProperties"));
        }
        if (customerContacts() != null) {
            customerContacts().forEach(e -> e.validate());
        }
        if (remoteDisasterRecoveryConfiguration() != null) {
            remoteDisasterRecoveryConfiguration().validate();
        }
        if (localStandbyDb() != null) {
            localStandbyDb().validate();
        }
        if (scheduledOperations() != null) {
            scheduledOperations().validate();
        }
        if (apexDetails() != null) {
            apexDetails().validate();
        }
        if (connectionStrings() != null) {
            connectionStrings().validate();
        }
        if (connectionUrls() != null) {
            connectionUrls().validate();
        }
        if (longTermBackupSchedule() != null) {
            longTermBackupSchedule().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AutonomousDatabaseCloneProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("adminPassword", adminPassword());
        jsonWriter.writeStringField("autonomousMaintenanceScheduleType",
            autonomousMaintenanceScheduleType() == null ? null : autonomousMaintenanceScheduleType().toString());
        jsonWriter.writeStringField("characterSet", characterSet());
        jsonWriter.writeNumberField("computeCount", computeCount());
        jsonWriter.writeStringField("computeModel", computeModel() == null ? null : computeModel().toString());
        jsonWriter.writeNumberField("cpuCoreCount", cpuCoreCount());
        jsonWriter.writeArrayField("customerContacts", customerContacts(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("dataStorageSizeInTbs", dataStorageSizeInTbs());
        jsonWriter.writeNumberField("dataStorageSizeInGbs", dataStorageSizeInGbs());
        jsonWriter.writeStringField("dbVersion", dbVersion());
        jsonWriter.writeStringField("dbWorkload", dbWorkload() == null ? null : dbWorkload().toString());
        jsonWriter.writeStringField("displayName", displayName());
        jsonWriter.writeBooleanField("isAutoScalingEnabled", isAutoScalingEnabled());
        jsonWriter.writeBooleanField("isAutoScalingForStorageEnabled", isAutoScalingForStorageEnabled());
        jsonWriter.writeStringField("peerDbId", peerDbId());
        jsonWriter.writeBooleanField("isLocalDataGuardEnabled", isLocalDataGuardEnabled());
        jsonWriter.writeBooleanField("isMtlsConnectionRequired", isMtlsConnectionRequired());
        jsonWriter.writeBooleanField("isPreviewVersionWithServiceTermsAccepted",
            isPreviewVersionWithServiceTermsAccepted());
        jsonWriter.writeStringField("licenseModel", licenseModel() == null ? null : licenseModel().toString());
        jsonWriter.writeStringField("ncharacterSet", ncharacterSet());
        jsonWriter.writeJsonField("scheduledOperations", scheduledOperations());
        jsonWriter.writeStringField("privateEndpointIp", privateEndpointIp());
        jsonWriter.writeStringField("privateEndpointLabel", privateEndpointLabel());
        jsonWriter.writeStringField("subnetId", subnetId());
        jsonWriter.writeStringField("vnetId", vnetId());
        jsonWriter.writeStringField("databaseEdition", databaseEdition() == null ? null : databaseEdition().toString());
        jsonWriter.writeStringField("autonomousDatabaseId", autonomousDatabaseId());
        jsonWriter.writeJsonField("longTermBackupSchedule", longTermBackupSchedule());
        jsonWriter.writeNumberField("localAdgAutoFailoverMaxDataLossLimit", localAdgAutoFailoverMaxDataLossLimit());
        jsonWriter.writeStringField("openMode", openMode() == null ? null : openMode().toString());
        jsonWriter.writeStringField("permissionLevel", permissionLevel() == null ? null : permissionLevel().toString());
        jsonWriter.writeStringField("role", role() == null ? null : role().toString());
        jsonWriter.writeNumberField("backupRetentionPeriodInDays", backupRetentionPeriodInDays());
        jsonWriter.writeArrayField("whitelistedIps", whitelistedIps(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("sourceId", this.sourceId);
        jsonWriter.writeStringField("cloneType", this.cloneType == null ? null : this.cloneType.toString());
        jsonWriter.writeStringField("dataBaseType", this.dataBaseType == null ? null : this.dataBaseType.toString());
        jsonWriter.writeStringField("source", this.source == null ? null : this.source.toString());
        jsonWriter.writeStringField("refreshableModel",
            this.refreshableModel == null ? null : this.refreshableModel.toString());
        jsonWriter.writeStringField("timeUntilReconnectCloneEnabled", this.timeUntilReconnectCloneEnabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutonomousDatabaseCloneProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutonomousDatabaseCloneProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AutonomousDatabaseCloneProperties.
     */
    public static AutonomousDatabaseCloneProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutonomousDatabaseCloneProperties deserializedAutonomousDatabaseCloneProperties
                = new AutonomousDatabaseCloneProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("adminPassword".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withAdminPassword(reader.getString());
                } else if ("autonomousMaintenanceScheduleType".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withAutonomousMaintenanceScheduleType(
                        AutonomousMaintenanceScheduleType.fromString(reader.getString()));
                } else if ("characterSet".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withCharacterSet(reader.getString());
                } else if ("computeCount".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withComputeCount(reader.getNullable(JsonReader::getDouble));
                } else if ("computeModel".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withComputeModel(ComputeModel.fromString(reader.getString()));
                } else if ("cpuCoreCount".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withCpuCoreCount(reader.getNullable(JsonReader::getInt));
                } else if ("customerContacts".equals(fieldName)) {
                    List<CustomerContact> customerContacts
                        = reader.readArray(reader1 -> CustomerContact.fromJson(reader1));
                    deserializedAutonomousDatabaseCloneProperties.withCustomerContacts(customerContacts);
                } else if ("dataStorageSizeInTbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withDataStorageSizeInTbs(reader.getNullable(JsonReader::getInt));
                } else if ("dataStorageSizeInGbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withDataStorageSizeInGbs(reader.getNullable(JsonReader::getInt));
                } else if ("dbVersion".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withDbVersion(reader.getString());
                } else if ("dbWorkload".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withDbWorkload(WorkloadType.fromString(reader.getString()));
                } else if ("displayName".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withDisplayName(reader.getString());
                } else if ("isAutoScalingEnabled".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withIsAutoScalingEnabled(reader.getNullable(JsonReader::getBoolean));
                } else if ("isAutoScalingForStorageEnabled".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withIsAutoScalingForStorageEnabled(reader.getNullable(JsonReader::getBoolean));
                } else if ("peerDbIds".equals(fieldName)) {
                    List<String> peerDbIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedAutonomousDatabaseCloneProperties.withPeerDbIds(peerDbIds);
                } else if ("peerDbId".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withPeerDbId(reader.getString());
                } else if ("isLocalDataGuardEnabled".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withIsLocalDataGuardEnabled(reader.getNullable(JsonReader::getBoolean));
                } else if ("isRemoteDataGuardEnabled".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withIsRemoteDataGuardEnabled(reader.getNullable(JsonReader::getBoolean));
                } else if ("localDisasterRecoveryType".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withLocalDisasterRecoveryType(DisasterRecoveryType.fromString(reader.getString()));
                } else if ("timeDisasterRecoveryRoleChanged".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withTimeDisasterRecoveryRoleChanged(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("remoteDisasterRecoveryConfiguration".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withRemoteDisasterRecoveryConfiguration(DisasterRecoveryConfigurationDetails.fromJson(reader));
                } else if ("localStandbyDb".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withLocalStandbyDb(AutonomousDatabaseStandbySummary.fromJson(reader));
                } else if ("failedDataRecoveryInSeconds".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withFailedDataRecoveryInSeconds(reader.getNullable(JsonReader::getInt));
                } else if ("isMtlsConnectionRequired".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withIsMtlsConnectionRequired(reader.getNullable(JsonReader::getBoolean));
                } else if ("isPreviewVersionWithServiceTermsAccepted".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withIsPreviewVersionWithServiceTermsAccepted(reader.getNullable(JsonReader::getBoolean));
                } else if ("licenseModel".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withLicenseModel(LicenseModel.fromString(reader.getString()));
                } else if ("ncharacterSet".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withNcharacterSet(reader.getString());
                } else if ("lifecycleDetails".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withLifecycleDetails(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withProvisioningState(AzureResourceProvisioningState.fromString(reader.getString()));
                } else if ("lifecycleState".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withLifecycleState(AutonomousDatabaseLifecycleState.fromString(reader.getString()));
                } else if ("scheduledOperations".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withScheduledOperations(ScheduledOperationsType.fromJson(reader));
                } else if ("privateEndpointIp".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withPrivateEndpointIp(reader.getString());
                } else if ("privateEndpointLabel".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withPrivateEndpointLabel(reader.getString());
                } else if ("ociUrl".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withOciUrl(reader.getString());
                } else if ("subnetId".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withSubnetId(reader.getString());
                } else if ("vnetId".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withVnetId(reader.getString());
                } else if ("timeCreated".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withTimeCreated(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("timeMaintenanceBegin".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withTimeMaintenanceBegin(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("timeMaintenanceEnd".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withTimeMaintenanceEnd(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("actualUsedDataStorageSizeInTbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withActualUsedDataStorageSizeInTbs(reader.getNullable(JsonReader::getDouble));
                } else if ("allocatedStorageSizeInTbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withAllocatedStorageSizeInTbs(reader.getNullable(JsonReader::getDouble));
                } else if ("apexDetails".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withApexDetails(ApexDetailsType.fromJson(reader));
                } else if ("availableUpgradeVersions".equals(fieldName)) {
                    List<String> availableUpgradeVersions = reader.readArray(reader1 -> reader1.getString());
                    deserializedAutonomousDatabaseCloneProperties
                        .withAvailableUpgradeVersions(availableUpgradeVersions);
                } else if ("connectionStrings".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withConnectionStrings(ConnectionStringType.fromJson(reader));
                } else if ("connectionUrls".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withConnectionUrls(ConnectionUrlType.fromJson(reader));
                } else if ("dataSafeStatus".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withDataSafeStatus(DataSafeStatusType.fromString(reader.getString()));
                } else if ("databaseEdition".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withDatabaseEdition(DatabaseEditionType.fromString(reader.getString()));
                } else if ("autonomousDatabaseId".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withAutonomousDatabaseId(reader.getString());
                } else if ("inMemoryAreaInGbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withInMemoryAreaInGbs(reader.getNullable(JsonReader::getInt));
                } else if ("nextLongTermBackupTimeStamp".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withNextLongTermBackupTimestamp(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("longTermBackupSchedule".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withLongTermBackupSchedule(LongTermBackUpScheduleDetails.fromJson(reader));
                } else if ("isPreview".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withIsPreview(reader.getNullable(JsonReader::getBoolean));
                } else if ("localAdgAutoFailoverMaxDataLossLimit".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withLocalAdgAutoFailoverMaxDataLossLimit(reader.getNullable(JsonReader::getInt));
                } else if ("memoryPerOracleComputeUnitInGbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withMemoryPerOracleComputeUnitInGbs(reader.getNullable(JsonReader::getInt));
                } else if ("openMode".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withOpenMode(OpenModeType.fromString(reader.getString()));
                } else if ("operationsInsightsStatus".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withOperationsInsightsStatus(OperationsInsightsStatusType.fromString(reader.getString()));
                } else if ("permissionLevel".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withPermissionLevel(PermissionLevelType.fromString(reader.getString()));
                } else if ("privateEndpoint".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withPrivateEndpoint(reader.getString());
                } else if ("provisionableCpus".equals(fieldName)) {
                    List<Integer> provisionableCpus = reader.readArray(reader1 -> reader1.getInt());
                    deserializedAutonomousDatabaseCloneProperties.withProvisionableCpus(provisionableCpus);
                } else if ("role".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withRole(RoleType.fromString(reader.getString()));
                } else if ("serviceConsoleUrl".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withServiceConsoleUrl(reader.getString());
                } else if ("sqlWebDeveloperUrl".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withSqlWebDeveloperUrl(reader.getString());
                } else if ("supportedRegionsToCloneTo".equals(fieldName)) {
                    List<String> supportedRegionsToCloneTo = reader.readArray(reader1 -> reader1.getString());
                    deserializedAutonomousDatabaseCloneProperties
                        .withSupportedRegionsToCloneTo(supportedRegionsToCloneTo);
                } else if ("timeDataGuardRoleChanged".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withTimeDataGuardRoleChanged(reader.getString());
                } else if ("timeDeletionOfFreeAutonomousDatabase".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withTimeDeletionOfFreeAutonomousDatabase(reader.getString());
                } else if ("timeLocalDataGuardEnabled".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withTimeLocalDataGuardEnabled(reader.getString());
                } else if ("timeOfLastFailover".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withTimeOfLastFailover(reader.getString());
                } else if ("timeOfLastRefresh".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withTimeOfLastRefresh(reader.getString());
                } else if ("timeOfLastRefreshPoint".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withTimeOfLastRefreshPoint(reader.getString());
                } else if ("timeOfLastSwitchover".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withTimeOfLastSwitchover(reader.getString());
                } else if ("timeReclamationOfFreeAutonomousDatabase".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withTimeReclamationOfFreeAutonomousDatabase(reader.getString());
                } else if ("usedDataStorageSizeInGbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withUsedDataStorageSizeInGbs(reader.getNullable(JsonReader::getInt));
                } else if ("usedDataStorageSizeInTbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withUsedDataStorageSizeInTbs(reader.getNullable(JsonReader::getInt));
                } else if ("ocid".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.withOcid(reader.getString());
                } else if ("backupRetentionPeriodInDays".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties
                        .withBackupRetentionPeriodInDays(reader.getNullable(JsonReader::getInt));
                } else if ("whitelistedIps".equals(fieldName)) {
                    List<String> whitelistedIps = reader.readArray(reader1 -> reader1.getString());
                    deserializedAutonomousDatabaseCloneProperties.withWhitelistedIps(whitelistedIps);
                } else if ("sourceId".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.sourceId = reader.getString();
                } else if ("cloneType".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.cloneType = CloneType.fromString(reader.getString());
                } else if ("dataBaseType".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.dataBaseType
                        = DataBaseType.fromString(reader.getString());
                } else if ("source".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.source = SourceType.fromString(reader.getString());
                } else if ("isReconnectCloneEnabled".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.isReconnectCloneEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isRefreshableClone".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.isRefreshableClone
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("refreshableModel".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.refreshableModel
                        = RefreshableModelType.fromString(reader.getString());
                } else if ("refreshableStatus".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.refreshableStatus
                        = RefreshableStatusType.fromString(reader.getString());
                } else if ("timeUntilReconnectCloneEnabled".equals(fieldName)) {
                    deserializedAutonomousDatabaseCloneProperties.timeUntilReconnectCloneEnabled = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutonomousDatabaseCloneProperties;
        });
    }
}
