// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.oracledatabase.fluent.models.ActivationLinksInner;
import com.azure.resourcemanager.oracledatabase.fluent.models.CloudAccountDetailsInner;
import com.azure.resourcemanager.oracledatabase.fluent.models.OracleSubscriptionInner;
import com.azure.resourcemanager.oracledatabase.fluent.models.SaasSubscriptionDetailsInner;
import com.azure.resourcemanager.oracledatabase.models.OracleSubscriptionUpdate;

/**
 * An instance of this class provides access to all the operations defined in OracleSubscriptionsClient.
 */
public interface OracleSubscriptionsClient {
    /**
     * List OracleSubscription resources by subscription ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a OracleSubscription list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<OracleSubscriptionInner> list();

    /**
     * List OracleSubscription resources by subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a OracleSubscription list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<OracleSubscriptionInner> list(Context context);

    /**
     * Get a OracleSubscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a OracleSubscription along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<OracleSubscriptionInner> getWithResponse(Context context);

    /**
     * Get a OracleSubscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a OracleSubscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OracleSubscriptionInner get();

    /**
     * Create a OracleSubscription.
     * 
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of oracleSubscription resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OracleSubscriptionInner>, OracleSubscriptionInner>
        beginCreateOrUpdate(OracleSubscriptionInner resource);

    /**
     * Create a OracleSubscription.
     * 
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of oracleSubscription resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OracleSubscriptionInner>, OracleSubscriptionInner>
        beginCreateOrUpdate(OracleSubscriptionInner resource, Context context);

    /**
     * Create a OracleSubscription.
     * 
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return oracleSubscription resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OracleSubscriptionInner createOrUpdate(OracleSubscriptionInner resource);

    /**
     * Create a OracleSubscription.
     * 
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return oracleSubscription resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OracleSubscriptionInner createOrUpdate(OracleSubscriptionInner resource, Context context);

    /**
     * Update a OracleSubscription.
     * 
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of oracleSubscription resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OracleSubscriptionInner>, OracleSubscriptionInner>
        beginUpdate(OracleSubscriptionUpdate properties);

    /**
     * Update a OracleSubscription.
     * 
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of oracleSubscription resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OracleSubscriptionInner>, OracleSubscriptionInner>
        beginUpdate(OracleSubscriptionUpdate properties, Context context);

    /**
     * Update a OracleSubscription.
     * 
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return oracleSubscription resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OracleSubscriptionInner update(OracleSubscriptionUpdate properties);

    /**
     * Update a OracleSubscription.
     * 
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return oracleSubscription resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OracleSubscriptionInner update(OracleSubscriptionUpdate properties, Context context);

    /**
     * Delete a OracleSubscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete();

    /**
     * Delete a OracleSubscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(Context context);

    /**
     * Delete a OracleSubscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete();

    /**
     * Delete a OracleSubscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(Context context);

    /**
     * List Activation Links.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of activation Links model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ActivationLinksInner>, ActivationLinksInner> beginListActivationLinks();

    /**
     * List Activation Links.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of activation Links model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ActivationLinksInner>, ActivationLinksInner> beginListActivationLinks(Context context);

    /**
     * List Activation Links.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return activation Links model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ActivationLinksInner listActivationLinks();

    /**
     * List Activation Links.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return activation Links model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ActivationLinksInner listActivationLinks(Context context);

    /**
     * List Cloud Account Details.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of cloud Account Details model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CloudAccountDetailsInner>, CloudAccountDetailsInner> beginListCloudAccountDetails();

    /**
     * List Cloud Account Details.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of cloud Account Details model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CloudAccountDetailsInner>, CloudAccountDetailsInner>
        beginListCloudAccountDetails(Context context);

    /**
     * List Cloud Account Details.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Account Details model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CloudAccountDetailsInner listCloudAccountDetails();

    /**
     * List Cloud Account Details.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Account Details model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CloudAccountDetailsInner listCloudAccountDetails(Context context);

    /**
     * List Saas Subscription Details.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of saaS Subscription Details model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SaasSubscriptionDetailsInner>, SaasSubscriptionDetailsInner>
        beginListSaasSubscriptionDetails();

    /**
     * List Saas Subscription Details.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of saaS Subscription Details model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SaasSubscriptionDetailsInner>, SaasSubscriptionDetailsInner>
        beginListSaasSubscriptionDetails(Context context);

    /**
     * List Saas Subscription Details.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS Subscription Details model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SaasSubscriptionDetailsInner listSaasSubscriptionDetails();

    /**
     * List Saas Subscription Details.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS Subscription Details model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SaasSubscriptionDetailsInner listSaasSubscriptionDetails(Context context);
}
