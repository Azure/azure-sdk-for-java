// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Autonomous Database base resource model.
 */
@Fluent
public class AutonomousDatabaseBaseProperties implements JsonSerializable<AutonomousDatabaseBaseProperties> {
    /*
     * Database type to be created.
     */
    private DataBaseType dataBaseType = DataBaseType.fromString("AutonomousDatabaseBaseProperties");

    /*
     * Admin password.
     */
    private String adminPassword;

    /*
     * The maintenance schedule type of the Autonomous Database Serverless.
     */
    private AutonomousMaintenanceScheduleType autonomousMaintenanceScheduleType;

    /*
     * The character set for the autonomous database.
     */
    private String characterSet;

    /*
     * The compute amount (CPUs) available to the database.
     */
    private Float computeCount;

    /*
     * The compute model of the Autonomous Database.
     */
    private ComputeModel computeModel;

    /*
     * The number of CPU cores to be made available to the database.
     */
    private Integer cpuCoreCount;

    /*
     * Customer Contacts.
     */
    private List<CustomerContact> customerContacts;

    /*
     * The quantity of data in the database, in terabytes.
     */
    private Integer dataStorageSizeInTbs;

    /*
     * The size, in gigabytes, of the data volume that will be created and attached to the database.
     */
    private Integer dataStorageSizeInGbs;

    /*
     * A valid Oracle Database version for Autonomous Database.
     */
    private String dbVersion;

    /*
     * The Autonomous Database workload type
     */
    private WorkloadType dbWorkload;

    /*
     * The user-friendly name for the Autonomous Database.
     */
    private String displayName;

    /*
     * Indicates if auto scaling is enabled for the Autonomous Database CPU core count.
     */
    private Boolean isAutoScalingEnabled;

    /*
     * Indicates if auto scaling is enabled for the Autonomous Database storage.
     */
    private Boolean isAutoScalingForStorageEnabled;

    /*
     * The list of [OCIDs](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of standby databases
     * located in Autonomous Data Guard remote regions that are associated with the source database. Note that for
     * Autonomous Database Serverless instances, standby databases located in the same region as the source primary
     * database do not have OCIDs.
     */
    private List<String> peerDbIds;

    /*
     * The database OCID of the Disaster Recovery peer database, which is located in a different region from the current
     * peer database.
     */
    private String peerDbId;

    /*
     * Indicates whether the Autonomous Database has local or called in-region Data Guard enabled.
     */
    private Boolean isLocalDataGuardEnabled;

    /*
     * Indicates whether the Autonomous Database has Cross Region Data Guard enabled.
     */
    private Boolean isRemoteDataGuardEnabled;

    /*
     * Indicates the local disaster recovery (DR) type of the Autonomous Database Serverless instance.Autonomous Data
     * Guard (ADG) DR type provides business critical DR with a faster recovery time objective (RTO) during failover or
     * switchover.Backup-based DR type provides lower cost DR with a slower RTO during failover or switchover.
     */
    private DisasterRecoveryType localDisasterRecoveryType;

    /*
     * Local Autonomous Disaster Recovery standby database details.
     */
    private AutonomousDatabaseStandbySummary localStandbyDb;

    /*
     * Indicates the number of seconds of data loss for a Data Guard failover.
     */
    private Integer failedDataRecoveryInSeconds;

    /*
     * Specifies if the Autonomous Database requires mTLS connections.
     */
    private Boolean isMtlsConnectionRequired;

    /*
     * Specifies if the Autonomous Database preview version is being provisioned.
     */
    private Boolean isPreviewVersionWithServiceTermsAccepted;

    /*
     * The Oracle license model that applies to the Oracle Autonomous Database. The default is LICENSE_INCLUDED.
     */
    private LicenseModel licenseModel;

    /*
     * The character set for the Autonomous Database.
     */
    private String ncharacterSet;

    /*
     * Additional information about the current lifecycle state.
     */
    private String lifecycleDetails;

    /*
     * Azure resource provisioning state.
     */
    private AzureResourceProvisioningState provisioningState;

    /*
     * Views lifecycleState
     */
    private AutonomousDatabaseLifecycleState lifecycleState;

    /*
     * The list of scheduled operations.
     */
    private ScheduledOperationsType scheduledOperations;

    /*
     * The private endpoint Ip address for the resource.
     */
    private String privateEndpointIp;

    /*
     * The resource's private endpoint label.
     */
    private String privateEndpointLabel;

    /*
     * HTTPS link to OCI resources exposed to Azure Customer via Azure Interface.
     */
    private String ociUrl;

    /*
     * Client subnet
     */
    private String subnetId;

    /*
     * VNET for network connectivity
     */
    private String vnetId;

    /*
     * The date and time that the database was created.
     */
    private OffsetDateTime timeCreated;

    /*
     * The date and time when maintenance will begin.
     */
    private OffsetDateTime timeMaintenanceBegin;

    /*
     * The date and time when maintenance will end.
     */
    private OffsetDateTime timeMaintenanceEnd;

    /*
     * The current amount of storage in use for user and system data, in terabytes (TB).
     */
    private Double actualUsedDataStorageSizeInTbs;

    /*
     * The amount of storage currently allocated for the database tables and billed for, rounded up.
     */
    private Double allocatedStorageSizeInTbs;

    /*
     * Information about Oracle APEX Application Development.
     */
    private ApexDetailsType apexDetails;

    /*
     * List of Oracle Database versions available for a database upgrade. If there are no version upgrades available,
     * this list is empty.
     */
    private List<String> availableUpgradeVersions;

    /*
     * The connection string used to connect to the Autonomous Database.
     */
    private ConnectionStringType connectionStrings;

    /*
     * The URLs for accessing Oracle Application Express (APEX) and SQL Developer Web with a browser from a Compute
     * instance within your VCN or that has a direct connection to your VCN.
     */
    private ConnectionUrlType connectionUrls;

    /*
     * Status of the Data Safe registration for this Autonomous Database.
     */
    private DataSafeStatusType dataSafeStatus;

    /*
     * The Oracle Database Edition that applies to the Autonomous databases.
     */
    private DatabaseEditionType databaseEdition;

    /*
     * Autonomous Database ID
     */
    private String autonomousDatabaseId;

    /*
     * The area assigned to In-Memory tables in Autonomous Database.
     */
    private Integer inMemoryAreaInGbs;

    /*
     * The date and time when the next long-term backup would be created.
     */
    private OffsetDateTime nextLongTermBackupTimestamp;

    /*
     * Details for the long-term backup schedule.
     */
    private LongTermBackUpScheduleDetails longTermBackupSchedule;

    /*
     * Indicates if the Autonomous Database version is a preview version.
     */
    private Boolean isPreview;

    /*
     * Parameter that allows users to select an acceptable maximum data loss limit in seconds, up to which Automatic
     * Failover will be triggered when necessary for a Local Autonomous Data Guard
     */
    private Integer localAdgAutoFailoverMaxDataLossLimit;

    /*
     * The amount of memory (in GBs) enabled per ECPU or OCPU.
     */
    private Integer memoryPerOracleComputeUnitInGbs;

    /*
     * Indicates the Autonomous Database mode.
     */
    private OpenModeType openMode;

    /*
     * Status of Operations Insights for this Autonomous Database.
     */
    private OperationsInsightsStatusType operationsInsightsStatus;

    /*
     * The Autonomous Database permission level.
     */
    private PermissionLevelType permissionLevel;

    /*
     * The private endpoint for the resource.
     */
    private String privateEndpoint;

    /*
     * An array of CPU values that an Autonomous Database can be scaled to.
     */
    private List<Integer> provisionableCpus;

    /*
     * The Data Guard role of the Autonomous Container Database or Autonomous Database, if Autonomous Data Guard is
     * enabled.
     */
    private RoleType role;

    /*
     * The URL of the Service Console for the Autonomous Database.
     */
    private String serviceConsoleUrl;

    /*
     * The SQL Web Developer URL for the Oracle Autonomous Database.
     */
    private String sqlWebDeveloperUrl;

    /*
     * The list of regions that support the creation of an Autonomous Database clone or an Autonomous Data Guard standby
     * database.
     */
    private List<String> supportedRegionsToCloneTo;

    /*
     * The date and time the Autonomous Data Guard role was switched for the Autonomous Database.
     */
    private String timeDataGuardRoleChanged;

    /*
     * The date and time the Always Free database will be automatically deleted because of inactivity.
     */
    private String timeDeletionOfFreeAutonomousDatabase;

    /*
     * The date and time that Autonomous Data Guard was enabled for an Autonomous Database where the standby was
     * provisioned in the same region as the primary database.
     */
    private String timeLocalDataGuardEnabled;

    /*
     * The timestamp of the last failover operation.
     */
    private String timeOfLastFailover;

    /*
     * The date and time when last refresh happened.
     */
    private String timeOfLastRefresh;

    /*
     * The refresh point timestamp (UTC).
     */
    private String timeOfLastRefreshPoint;

    /*
     * The timestamp of the last switchover operation for the Autonomous Database.
     */
    private String timeOfLastSwitchover;

    /*
     * The date and time the Always Free database will be stopped because of inactivity.
     */
    private String timeReclamationOfFreeAutonomousDatabase;

    /*
     * The storage space consumed by Autonomous Database in GBs.
     */
    private Integer usedDataStorageSizeInGbs;

    /*
     * The amount of storage that has been used, in terabytes.
     */
    private Integer usedDataStorageSizeInTbs;

    /*
     * Database ocid
     */
    private String ocid;

    /*
     * Retention period, in days, for long-term backups
     */
    private Integer backupRetentionPeriodInDays;

    /*
     * The client IP access control list (ACL). This is an array of CIDR notations and/or IP addresses. Values should be
     * separate strings, separated by commas. Example: ['1.1.1.1','1.1.1.0/24','1.1.2.25']
     */
    private List<String> whitelistedIps;

    /**
     * Creates an instance of AutonomousDatabaseBaseProperties class.
     */
    public AutonomousDatabaseBaseProperties() {
    }

    /**
     * Get the dataBaseType property: Database type to be created.
     * 
     * @return the dataBaseType value.
     */
    public DataBaseType dataBaseType() {
        return this.dataBaseType;
    }

    /**
     * Get the adminPassword property: Admin password.
     * 
     * @return the adminPassword value.
     */
    public String adminPassword() {
        return this.adminPassword;
    }

    /**
     * Set the adminPassword property: Admin password.
     * 
     * @param adminPassword the adminPassword value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withAdminPassword(String adminPassword) {
        this.adminPassword = adminPassword;
        return this;
    }

    /**
     * Get the autonomousMaintenanceScheduleType property: The maintenance schedule type of the Autonomous Database
     * Serverless.
     * 
     * @return the autonomousMaintenanceScheduleType value.
     */
    public AutonomousMaintenanceScheduleType autonomousMaintenanceScheduleType() {
        return this.autonomousMaintenanceScheduleType;
    }

    /**
     * Set the autonomousMaintenanceScheduleType property: The maintenance schedule type of the Autonomous Database
     * Serverless.
     * 
     * @param autonomousMaintenanceScheduleType the autonomousMaintenanceScheduleType value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties
        withAutonomousMaintenanceScheduleType(AutonomousMaintenanceScheduleType autonomousMaintenanceScheduleType) {
        this.autonomousMaintenanceScheduleType = autonomousMaintenanceScheduleType;
        return this;
    }

    /**
     * Get the characterSet property: The character set for the autonomous database.
     * 
     * @return the characterSet value.
     */
    public String characterSet() {
        return this.characterSet;
    }

    /**
     * Set the characterSet property: The character set for the autonomous database.
     * 
     * @param characterSet the characterSet value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withCharacterSet(String characterSet) {
        this.characterSet = characterSet;
        return this;
    }

    /**
     * Get the computeCount property: The compute amount (CPUs) available to the database.
     * 
     * @return the computeCount value.
     */
    public Float computeCount() {
        return this.computeCount;
    }

    /**
     * Set the computeCount property: The compute amount (CPUs) available to the database.
     * 
     * @param computeCount the computeCount value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withComputeCount(Float computeCount) {
        this.computeCount = computeCount;
        return this;
    }

    /**
     * Get the computeModel property: The compute model of the Autonomous Database.
     * 
     * @return the computeModel value.
     */
    public ComputeModel computeModel() {
        return this.computeModel;
    }

    /**
     * Set the computeModel property: The compute model of the Autonomous Database.
     * 
     * @param computeModel the computeModel value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withComputeModel(ComputeModel computeModel) {
        this.computeModel = computeModel;
        return this;
    }

    /**
     * Get the cpuCoreCount property: The number of CPU cores to be made available to the database.
     * 
     * @return the cpuCoreCount value.
     */
    public Integer cpuCoreCount() {
        return this.cpuCoreCount;
    }

    /**
     * Set the cpuCoreCount property: The number of CPU cores to be made available to the database.
     * 
     * @param cpuCoreCount the cpuCoreCount value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withCpuCoreCount(Integer cpuCoreCount) {
        this.cpuCoreCount = cpuCoreCount;
        return this;
    }

    /**
     * Get the customerContacts property: Customer Contacts.
     * 
     * @return the customerContacts value.
     */
    public List<CustomerContact> customerContacts() {
        return this.customerContacts;
    }

    /**
     * Set the customerContacts property: Customer Contacts.
     * 
     * @param customerContacts the customerContacts value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withCustomerContacts(List<CustomerContact> customerContacts) {
        this.customerContacts = customerContacts;
        return this;
    }

    /**
     * Get the dataStorageSizeInTbs property: The quantity of data in the database, in terabytes.
     * 
     * @return the dataStorageSizeInTbs value.
     */
    public Integer dataStorageSizeInTbs() {
        return this.dataStorageSizeInTbs;
    }

    /**
     * Set the dataStorageSizeInTbs property: The quantity of data in the database, in terabytes.
     * 
     * @param dataStorageSizeInTbs the dataStorageSizeInTbs value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withDataStorageSizeInTbs(Integer dataStorageSizeInTbs) {
        this.dataStorageSizeInTbs = dataStorageSizeInTbs;
        return this;
    }

    /**
     * Get the dataStorageSizeInGbs property: The size, in gigabytes, of the data volume that will be created and
     * attached to the database.
     * 
     * @return the dataStorageSizeInGbs value.
     */
    public Integer dataStorageSizeInGbs() {
        return this.dataStorageSizeInGbs;
    }

    /**
     * Set the dataStorageSizeInGbs property: The size, in gigabytes, of the data volume that will be created and
     * attached to the database.
     * 
     * @param dataStorageSizeInGbs the dataStorageSizeInGbs value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withDataStorageSizeInGbs(Integer dataStorageSizeInGbs) {
        this.dataStorageSizeInGbs = dataStorageSizeInGbs;
        return this;
    }

    /**
     * Get the dbVersion property: A valid Oracle Database version for Autonomous Database.
     * 
     * @return the dbVersion value.
     */
    public String dbVersion() {
        return this.dbVersion;
    }

    /**
     * Set the dbVersion property: A valid Oracle Database version for Autonomous Database.
     * 
     * @param dbVersion the dbVersion value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withDbVersion(String dbVersion) {
        this.dbVersion = dbVersion;
        return this;
    }

    /**
     * Get the dbWorkload property: The Autonomous Database workload type.
     * 
     * @return the dbWorkload value.
     */
    public WorkloadType dbWorkload() {
        return this.dbWorkload;
    }

    /**
     * Set the dbWorkload property: The Autonomous Database workload type.
     * 
     * @param dbWorkload the dbWorkload value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withDbWorkload(WorkloadType dbWorkload) {
        this.dbWorkload = dbWorkload;
        return this;
    }

    /**
     * Get the displayName property: The user-friendly name for the Autonomous Database.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The user-friendly name for the Autonomous Database.
     * 
     * @param displayName the displayName value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the isAutoScalingEnabled property: Indicates if auto scaling is enabled for the Autonomous Database CPU core
     * count.
     * 
     * @return the isAutoScalingEnabled value.
     */
    public Boolean isAutoScalingEnabled() {
        return this.isAutoScalingEnabled;
    }

    /**
     * Set the isAutoScalingEnabled property: Indicates if auto scaling is enabled for the Autonomous Database CPU core
     * count.
     * 
     * @param isAutoScalingEnabled the isAutoScalingEnabled value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withIsAutoScalingEnabled(Boolean isAutoScalingEnabled) {
        this.isAutoScalingEnabled = isAutoScalingEnabled;
        return this;
    }

    /**
     * Get the isAutoScalingForStorageEnabled property: Indicates if auto scaling is enabled for the Autonomous Database
     * storage.
     * 
     * @return the isAutoScalingForStorageEnabled value.
     */
    public Boolean isAutoScalingForStorageEnabled() {
        return this.isAutoScalingForStorageEnabled;
    }

    /**
     * Set the isAutoScalingForStorageEnabled property: Indicates if auto scaling is enabled for the Autonomous Database
     * storage.
     * 
     * @param isAutoScalingForStorageEnabled the isAutoScalingForStorageEnabled value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withIsAutoScalingForStorageEnabled(Boolean isAutoScalingForStorageEnabled) {
        this.isAutoScalingForStorageEnabled = isAutoScalingForStorageEnabled;
        return this;
    }

    /**
     * Get the peerDbIds property: The list of
     * [OCIDs](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of standby databases located in
     * Autonomous Data Guard remote regions that are associated with the source database. Note that for Autonomous
     * Database Serverless instances, standby databases located in the same region as the source primary database do not
     * have OCIDs.
     * 
     * @return the peerDbIds value.
     */
    public List<String> peerDbIds() {
        return this.peerDbIds;
    }

    /**
     * Set the peerDbIds property: The list of
     * [OCIDs](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of standby databases located in
     * Autonomous Data Guard remote regions that are associated with the source database. Note that for Autonomous
     * Database Serverless instances, standby databases located in the same region as the source primary database do not
     * have OCIDs.
     * 
     * @param peerDbIds the peerDbIds value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withPeerDbIds(List<String> peerDbIds) {
        this.peerDbIds = peerDbIds;
        return this;
    }

    /**
     * Get the peerDbId property: The database OCID of the Disaster Recovery peer database, which is located in a
     * different region from the current peer database.
     * 
     * @return the peerDbId value.
     */
    public String peerDbId() {
        return this.peerDbId;
    }

    /**
     * Set the peerDbId property: The database OCID of the Disaster Recovery peer database, which is located in a
     * different region from the current peer database.
     * 
     * @param peerDbId the peerDbId value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withPeerDbId(String peerDbId) {
        this.peerDbId = peerDbId;
        return this;
    }

    /**
     * Get the isLocalDataGuardEnabled property: Indicates whether the Autonomous Database has local or called in-region
     * Data Guard enabled.
     * 
     * @return the isLocalDataGuardEnabled value.
     */
    public Boolean isLocalDataGuardEnabled() {
        return this.isLocalDataGuardEnabled;
    }

    /**
     * Set the isLocalDataGuardEnabled property: Indicates whether the Autonomous Database has local or called in-region
     * Data Guard enabled.
     * 
     * @param isLocalDataGuardEnabled the isLocalDataGuardEnabled value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withIsLocalDataGuardEnabled(Boolean isLocalDataGuardEnabled) {
        this.isLocalDataGuardEnabled = isLocalDataGuardEnabled;
        return this;
    }

    /**
     * Get the isRemoteDataGuardEnabled property: Indicates whether the Autonomous Database has Cross Region Data Guard
     * enabled.
     * 
     * @return the isRemoteDataGuardEnabled value.
     */
    public Boolean isRemoteDataGuardEnabled() {
        return this.isRemoteDataGuardEnabled;
    }

    /**
     * Set the isRemoteDataGuardEnabled property: Indicates whether the Autonomous Database has Cross Region Data Guard
     * enabled.
     * 
     * @param isRemoteDataGuardEnabled the isRemoteDataGuardEnabled value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withIsRemoteDataGuardEnabled(Boolean isRemoteDataGuardEnabled) {
        this.isRemoteDataGuardEnabled = isRemoteDataGuardEnabled;
        return this;
    }

    /**
     * Get the localDisasterRecoveryType property: Indicates the local disaster recovery (DR) type of the Autonomous
     * Database Serverless instance.Autonomous Data Guard (ADG) DR type provides business critical DR with a faster
     * recovery time objective (RTO) during failover or switchover.Backup-based DR type provides lower cost DR with a
     * slower RTO during failover or switchover.
     * 
     * @return the localDisasterRecoveryType value.
     */
    public DisasterRecoveryType localDisasterRecoveryType() {
        return this.localDisasterRecoveryType;
    }

    /**
     * Set the localDisasterRecoveryType property: Indicates the local disaster recovery (DR) type of the Autonomous
     * Database Serverless instance.Autonomous Data Guard (ADG) DR type provides business critical DR with a faster
     * recovery time objective (RTO) during failover or switchover.Backup-based DR type provides lower cost DR with a
     * slower RTO during failover or switchover.
     * 
     * @param localDisasterRecoveryType the localDisasterRecoveryType value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withLocalDisasterRecoveryType(DisasterRecoveryType localDisasterRecoveryType) {
        this.localDisasterRecoveryType = localDisasterRecoveryType;
        return this;
    }

    /**
     * Get the localStandbyDb property: Local Autonomous Disaster Recovery standby database details.
     * 
     * @return the localStandbyDb value.
     */
    public AutonomousDatabaseStandbySummary localStandbyDb() {
        return this.localStandbyDb;
    }

    /**
     * Set the localStandbyDb property: Local Autonomous Disaster Recovery standby database details.
     * 
     * @param localStandbyDb the localStandbyDb value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withLocalStandbyDb(AutonomousDatabaseStandbySummary localStandbyDb) {
        this.localStandbyDb = localStandbyDb;
        return this;
    }

    /**
     * Get the failedDataRecoveryInSeconds property: Indicates the number of seconds of data loss for a Data Guard
     * failover.
     * 
     * @return the failedDataRecoveryInSeconds value.
     */
    public Integer failedDataRecoveryInSeconds() {
        return this.failedDataRecoveryInSeconds;
    }

    /**
     * Set the failedDataRecoveryInSeconds property: Indicates the number of seconds of data loss for a Data Guard
     * failover.
     * 
     * @param failedDataRecoveryInSeconds the failedDataRecoveryInSeconds value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withFailedDataRecoveryInSeconds(Integer failedDataRecoveryInSeconds) {
        this.failedDataRecoveryInSeconds = failedDataRecoveryInSeconds;
        return this;
    }

    /**
     * Get the isMtlsConnectionRequired property: Specifies if the Autonomous Database requires mTLS connections.
     * 
     * @return the isMtlsConnectionRequired value.
     */
    public Boolean isMtlsConnectionRequired() {
        return this.isMtlsConnectionRequired;
    }

    /**
     * Set the isMtlsConnectionRequired property: Specifies if the Autonomous Database requires mTLS connections.
     * 
     * @param isMtlsConnectionRequired the isMtlsConnectionRequired value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withIsMtlsConnectionRequired(Boolean isMtlsConnectionRequired) {
        this.isMtlsConnectionRequired = isMtlsConnectionRequired;
        return this;
    }

    /**
     * Get the isPreviewVersionWithServiceTermsAccepted property: Specifies if the Autonomous Database preview version
     * is being provisioned.
     * 
     * @return the isPreviewVersionWithServiceTermsAccepted value.
     */
    public Boolean isPreviewVersionWithServiceTermsAccepted() {
        return this.isPreviewVersionWithServiceTermsAccepted;
    }

    /**
     * Set the isPreviewVersionWithServiceTermsAccepted property: Specifies if the Autonomous Database preview version
     * is being provisioned.
     * 
     * @param isPreviewVersionWithServiceTermsAccepted the isPreviewVersionWithServiceTermsAccepted value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties
        withIsPreviewVersionWithServiceTermsAccepted(Boolean isPreviewVersionWithServiceTermsAccepted) {
        this.isPreviewVersionWithServiceTermsAccepted = isPreviewVersionWithServiceTermsAccepted;
        return this;
    }

    /**
     * Get the licenseModel property: The Oracle license model that applies to the Oracle Autonomous Database. The
     * default is LICENSE_INCLUDED.
     * 
     * @return the licenseModel value.
     */
    public LicenseModel licenseModel() {
        return this.licenseModel;
    }

    /**
     * Set the licenseModel property: The Oracle license model that applies to the Oracle Autonomous Database. The
     * default is LICENSE_INCLUDED.
     * 
     * @param licenseModel the licenseModel value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withLicenseModel(LicenseModel licenseModel) {
        this.licenseModel = licenseModel;
        return this;
    }

    /**
     * Get the ncharacterSet property: The character set for the Autonomous Database.
     * 
     * @return the ncharacterSet value.
     */
    public String ncharacterSet() {
        return this.ncharacterSet;
    }

    /**
     * Set the ncharacterSet property: The character set for the Autonomous Database.
     * 
     * @param ncharacterSet the ncharacterSet value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withNcharacterSet(String ncharacterSet) {
        this.ncharacterSet = ncharacterSet;
        return this;
    }

    /**
     * Get the lifecycleDetails property: Additional information about the current lifecycle state.
     * 
     * @return the lifecycleDetails value.
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }

    /**
     * Set the lifecycleDetails property: Additional information about the current lifecycle state.
     * 
     * @param lifecycleDetails the lifecycleDetails value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withLifecycleDetails(String lifecycleDetails) {
        this.lifecycleDetails = lifecycleDetails;
        return this;
    }

    /**
     * Get the provisioningState property: Azure resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public AzureResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Azure resource provisioning state.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withProvisioningState(AzureResourceProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the lifecycleState property: Views lifecycleState.
     * 
     * @return the lifecycleState value.
     */
    public AutonomousDatabaseLifecycleState lifecycleState() {
        return this.lifecycleState;
    }

    /**
     * Set the lifecycleState property: Views lifecycleState.
     * 
     * @param lifecycleState the lifecycleState value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withLifecycleState(AutonomousDatabaseLifecycleState lifecycleState) {
        this.lifecycleState = lifecycleState;
        return this;
    }

    /**
     * Get the scheduledOperations property: The list of scheduled operations.
     * 
     * @return the scheduledOperations value.
     */
    public ScheduledOperationsType scheduledOperations() {
        return this.scheduledOperations;
    }

    /**
     * Set the scheduledOperations property: The list of scheduled operations.
     * 
     * @param scheduledOperations the scheduledOperations value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withScheduledOperations(ScheduledOperationsType scheduledOperations) {
        this.scheduledOperations = scheduledOperations;
        return this;
    }

    /**
     * Get the privateEndpointIp property: The private endpoint Ip address for the resource.
     * 
     * @return the privateEndpointIp value.
     */
    public String privateEndpointIp() {
        return this.privateEndpointIp;
    }

    /**
     * Set the privateEndpointIp property: The private endpoint Ip address for the resource.
     * 
     * @param privateEndpointIp the privateEndpointIp value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withPrivateEndpointIp(String privateEndpointIp) {
        this.privateEndpointIp = privateEndpointIp;
        return this;
    }

    /**
     * Get the privateEndpointLabel property: The resource's private endpoint label.
     * 
     * @return the privateEndpointLabel value.
     */
    public String privateEndpointLabel() {
        return this.privateEndpointLabel;
    }

    /**
     * Set the privateEndpointLabel property: The resource's private endpoint label.
     * 
     * @param privateEndpointLabel the privateEndpointLabel value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withPrivateEndpointLabel(String privateEndpointLabel) {
        this.privateEndpointLabel = privateEndpointLabel;
        return this;
    }

    /**
     * Get the ociUrl property: HTTPS link to OCI resources exposed to Azure Customer via Azure Interface.
     * 
     * @return the ociUrl value.
     */
    public String ociUrl() {
        return this.ociUrl;
    }

    /**
     * Set the ociUrl property: HTTPS link to OCI resources exposed to Azure Customer via Azure Interface.
     * 
     * @param ociUrl the ociUrl value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withOciUrl(String ociUrl) {
        this.ociUrl = ociUrl;
        return this;
    }

    /**
     * Get the subnetId property: Client subnet.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: Client subnet.
     * 
     * @param subnetId the subnetId value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the vnetId property: VNET for network connectivity.
     * 
     * @return the vnetId value.
     */
    public String vnetId() {
        return this.vnetId;
    }

    /**
     * Set the vnetId property: VNET for network connectivity.
     * 
     * @param vnetId the vnetId value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withVnetId(String vnetId) {
        this.vnetId = vnetId;
        return this;
    }

    /**
     * Get the timeCreated property: The date and time that the database was created.
     * 
     * @return the timeCreated value.
     */
    public OffsetDateTime timeCreated() {
        return this.timeCreated;
    }

    /**
     * Set the timeCreated property: The date and time that the database was created.
     * 
     * @param timeCreated the timeCreated value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withTimeCreated(OffsetDateTime timeCreated) {
        this.timeCreated = timeCreated;
        return this;
    }

    /**
     * Get the timeMaintenanceBegin property: The date and time when maintenance will begin.
     * 
     * @return the timeMaintenanceBegin value.
     */
    public OffsetDateTime timeMaintenanceBegin() {
        return this.timeMaintenanceBegin;
    }

    /**
     * Set the timeMaintenanceBegin property: The date and time when maintenance will begin.
     * 
     * @param timeMaintenanceBegin the timeMaintenanceBegin value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withTimeMaintenanceBegin(OffsetDateTime timeMaintenanceBegin) {
        this.timeMaintenanceBegin = timeMaintenanceBegin;
        return this;
    }

    /**
     * Get the timeMaintenanceEnd property: The date and time when maintenance will end.
     * 
     * @return the timeMaintenanceEnd value.
     */
    public OffsetDateTime timeMaintenanceEnd() {
        return this.timeMaintenanceEnd;
    }

    /**
     * Set the timeMaintenanceEnd property: The date and time when maintenance will end.
     * 
     * @param timeMaintenanceEnd the timeMaintenanceEnd value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withTimeMaintenanceEnd(OffsetDateTime timeMaintenanceEnd) {
        this.timeMaintenanceEnd = timeMaintenanceEnd;
        return this;
    }

    /**
     * Get the actualUsedDataStorageSizeInTbs property: The current amount of storage in use for user and system data,
     * in terabytes (TB).
     * 
     * @return the actualUsedDataStorageSizeInTbs value.
     */
    public Double actualUsedDataStorageSizeInTbs() {
        return this.actualUsedDataStorageSizeInTbs;
    }

    /**
     * Set the actualUsedDataStorageSizeInTbs property: The current amount of storage in use for user and system data,
     * in terabytes (TB).
     * 
     * @param actualUsedDataStorageSizeInTbs the actualUsedDataStorageSizeInTbs value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withActualUsedDataStorageSizeInTbs(Double actualUsedDataStorageSizeInTbs) {
        this.actualUsedDataStorageSizeInTbs = actualUsedDataStorageSizeInTbs;
        return this;
    }

    /**
     * Get the allocatedStorageSizeInTbs property: The amount of storage currently allocated for the database tables and
     * billed for, rounded up.
     * 
     * @return the allocatedStorageSizeInTbs value.
     */
    public Double allocatedStorageSizeInTbs() {
        return this.allocatedStorageSizeInTbs;
    }

    /**
     * Set the allocatedStorageSizeInTbs property: The amount of storage currently allocated for the database tables and
     * billed for, rounded up.
     * 
     * @param allocatedStorageSizeInTbs the allocatedStorageSizeInTbs value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withAllocatedStorageSizeInTbs(Double allocatedStorageSizeInTbs) {
        this.allocatedStorageSizeInTbs = allocatedStorageSizeInTbs;
        return this;
    }

    /**
     * Get the apexDetails property: Information about Oracle APEX Application Development.
     * 
     * @return the apexDetails value.
     */
    public ApexDetailsType apexDetails() {
        return this.apexDetails;
    }

    /**
     * Set the apexDetails property: Information about Oracle APEX Application Development.
     * 
     * @param apexDetails the apexDetails value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withApexDetails(ApexDetailsType apexDetails) {
        this.apexDetails = apexDetails;
        return this;
    }

    /**
     * Get the availableUpgradeVersions property: List of Oracle Database versions available for a database upgrade. If
     * there are no version upgrades available, this list is empty.
     * 
     * @return the availableUpgradeVersions value.
     */
    public List<String> availableUpgradeVersions() {
        return this.availableUpgradeVersions;
    }

    /**
     * Set the availableUpgradeVersions property: List of Oracle Database versions available for a database upgrade. If
     * there are no version upgrades available, this list is empty.
     * 
     * @param availableUpgradeVersions the availableUpgradeVersions value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withAvailableUpgradeVersions(List<String> availableUpgradeVersions) {
        this.availableUpgradeVersions = availableUpgradeVersions;
        return this;
    }

    /**
     * Get the connectionStrings property: The connection string used to connect to the Autonomous Database.
     * 
     * @return the connectionStrings value.
     */
    public ConnectionStringType connectionStrings() {
        return this.connectionStrings;
    }

    /**
     * Set the connectionStrings property: The connection string used to connect to the Autonomous Database.
     * 
     * @param connectionStrings the connectionStrings value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withConnectionStrings(ConnectionStringType connectionStrings) {
        this.connectionStrings = connectionStrings;
        return this;
    }

    /**
     * Get the connectionUrls property: The URLs for accessing Oracle Application Express (APEX) and SQL Developer Web
     * with a browser from a Compute instance within your VCN or that has a direct connection to your VCN.
     * 
     * @return the connectionUrls value.
     */
    public ConnectionUrlType connectionUrls() {
        return this.connectionUrls;
    }

    /**
     * Set the connectionUrls property: The URLs for accessing Oracle Application Express (APEX) and SQL Developer Web
     * with a browser from a Compute instance within your VCN or that has a direct connection to your VCN.
     * 
     * @param connectionUrls the connectionUrls value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withConnectionUrls(ConnectionUrlType connectionUrls) {
        this.connectionUrls = connectionUrls;
        return this;
    }

    /**
     * Get the dataSafeStatus property: Status of the Data Safe registration for this Autonomous Database.
     * 
     * @return the dataSafeStatus value.
     */
    public DataSafeStatusType dataSafeStatus() {
        return this.dataSafeStatus;
    }

    /**
     * Set the dataSafeStatus property: Status of the Data Safe registration for this Autonomous Database.
     * 
     * @param dataSafeStatus the dataSafeStatus value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withDataSafeStatus(DataSafeStatusType dataSafeStatus) {
        this.dataSafeStatus = dataSafeStatus;
        return this;
    }

    /**
     * Get the databaseEdition property: The Oracle Database Edition that applies to the Autonomous databases.
     * 
     * @return the databaseEdition value.
     */
    public DatabaseEditionType databaseEdition() {
        return this.databaseEdition;
    }

    /**
     * Set the databaseEdition property: The Oracle Database Edition that applies to the Autonomous databases.
     * 
     * @param databaseEdition the databaseEdition value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withDatabaseEdition(DatabaseEditionType databaseEdition) {
        this.databaseEdition = databaseEdition;
        return this;
    }

    /**
     * Get the autonomousDatabaseId property: Autonomous Database ID.
     * 
     * @return the autonomousDatabaseId value.
     */
    public String autonomousDatabaseId() {
        return this.autonomousDatabaseId;
    }

    /**
     * Set the autonomousDatabaseId property: Autonomous Database ID.
     * 
     * @param autonomousDatabaseId the autonomousDatabaseId value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withAutonomousDatabaseId(String autonomousDatabaseId) {
        this.autonomousDatabaseId = autonomousDatabaseId;
        return this;
    }

    /**
     * Get the inMemoryAreaInGbs property: The area assigned to In-Memory tables in Autonomous Database.
     * 
     * @return the inMemoryAreaInGbs value.
     */
    public Integer inMemoryAreaInGbs() {
        return this.inMemoryAreaInGbs;
    }

    /**
     * Set the inMemoryAreaInGbs property: The area assigned to In-Memory tables in Autonomous Database.
     * 
     * @param inMemoryAreaInGbs the inMemoryAreaInGbs value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withInMemoryAreaInGbs(Integer inMemoryAreaInGbs) {
        this.inMemoryAreaInGbs = inMemoryAreaInGbs;
        return this;
    }

    /**
     * Get the nextLongTermBackupTimestamp property: The date and time when the next long-term backup would be created.
     * 
     * @return the nextLongTermBackupTimestamp value.
     */
    public OffsetDateTime nextLongTermBackupTimestamp() {
        return this.nextLongTermBackupTimestamp;
    }

    /**
     * Set the nextLongTermBackupTimestamp property: The date and time when the next long-term backup would be created.
     * 
     * @param nextLongTermBackupTimestamp the nextLongTermBackupTimestamp value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withNextLongTermBackupTimestamp(OffsetDateTime nextLongTermBackupTimestamp) {
        this.nextLongTermBackupTimestamp = nextLongTermBackupTimestamp;
        return this;
    }

    /**
     * Get the longTermBackupSchedule property: Details for the long-term backup schedule.
     * 
     * @return the longTermBackupSchedule value.
     */
    public LongTermBackUpScheduleDetails longTermBackupSchedule() {
        return this.longTermBackupSchedule;
    }

    /**
     * Set the longTermBackupSchedule property: Details for the long-term backup schedule.
     * 
     * @param longTermBackupSchedule the longTermBackupSchedule value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties
        withLongTermBackupSchedule(LongTermBackUpScheduleDetails longTermBackupSchedule) {
        this.longTermBackupSchedule = longTermBackupSchedule;
        return this;
    }

    /**
     * Get the isPreview property: Indicates if the Autonomous Database version is a preview version.
     * 
     * @return the isPreview value.
     */
    public Boolean isPreview() {
        return this.isPreview;
    }

    /**
     * Set the isPreview property: Indicates if the Autonomous Database version is a preview version.
     * 
     * @param isPreview the isPreview value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withIsPreview(Boolean isPreview) {
        this.isPreview = isPreview;
        return this;
    }

    /**
     * Get the localAdgAutoFailoverMaxDataLossLimit property: Parameter that allows users to select an acceptable
     * maximum data loss limit in seconds, up to which Automatic Failover will be triggered when necessary for a Local
     * Autonomous Data Guard.
     * 
     * @return the localAdgAutoFailoverMaxDataLossLimit value.
     */
    public Integer localAdgAutoFailoverMaxDataLossLimit() {
        return this.localAdgAutoFailoverMaxDataLossLimit;
    }

    /**
     * Set the localAdgAutoFailoverMaxDataLossLimit property: Parameter that allows users to select an acceptable
     * maximum data loss limit in seconds, up to which Automatic Failover will be triggered when necessary for a Local
     * Autonomous Data Guard.
     * 
     * @param localAdgAutoFailoverMaxDataLossLimit the localAdgAutoFailoverMaxDataLossLimit value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties
        withLocalAdgAutoFailoverMaxDataLossLimit(Integer localAdgAutoFailoverMaxDataLossLimit) {
        this.localAdgAutoFailoverMaxDataLossLimit = localAdgAutoFailoverMaxDataLossLimit;
        return this;
    }

    /**
     * Get the memoryPerOracleComputeUnitInGbs property: The amount of memory (in GBs) enabled per ECPU or OCPU.
     * 
     * @return the memoryPerOracleComputeUnitInGbs value.
     */
    public Integer memoryPerOracleComputeUnitInGbs() {
        return this.memoryPerOracleComputeUnitInGbs;
    }

    /**
     * Set the memoryPerOracleComputeUnitInGbs property: The amount of memory (in GBs) enabled per ECPU or OCPU.
     * 
     * @param memoryPerOracleComputeUnitInGbs the memoryPerOracleComputeUnitInGbs value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withMemoryPerOracleComputeUnitInGbs(Integer memoryPerOracleComputeUnitInGbs) {
        this.memoryPerOracleComputeUnitInGbs = memoryPerOracleComputeUnitInGbs;
        return this;
    }

    /**
     * Get the openMode property: Indicates the Autonomous Database mode.
     * 
     * @return the openMode value.
     */
    public OpenModeType openMode() {
        return this.openMode;
    }

    /**
     * Set the openMode property: Indicates the Autonomous Database mode.
     * 
     * @param openMode the openMode value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withOpenMode(OpenModeType openMode) {
        this.openMode = openMode;
        return this;
    }

    /**
     * Get the operationsInsightsStatus property: Status of Operations Insights for this Autonomous Database.
     * 
     * @return the operationsInsightsStatus value.
     */
    public OperationsInsightsStatusType operationsInsightsStatus() {
        return this.operationsInsightsStatus;
    }

    /**
     * Set the operationsInsightsStatus property: Status of Operations Insights for this Autonomous Database.
     * 
     * @param operationsInsightsStatus the operationsInsightsStatus value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties
        withOperationsInsightsStatus(OperationsInsightsStatusType operationsInsightsStatus) {
        this.operationsInsightsStatus = operationsInsightsStatus;
        return this;
    }

    /**
     * Get the permissionLevel property: The Autonomous Database permission level.
     * 
     * @return the permissionLevel value.
     */
    public PermissionLevelType permissionLevel() {
        return this.permissionLevel;
    }

    /**
     * Set the permissionLevel property: The Autonomous Database permission level.
     * 
     * @param permissionLevel the permissionLevel value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withPermissionLevel(PermissionLevelType permissionLevel) {
        this.permissionLevel = permissionLevel;
        return this;
    }

    /**
     * Get the privateEndpoint property: The private endpoint for the resource.
     * 
     * @return the privateEndpoint value.
     */
    public String privateEndpoint() {
        return this.privateEndpoint;
    }

    /**
     * Set the privateEndpoint property: The private endpoint for the resource.
     * 
     * @param privateEndpoint the privateEndpoint value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withPrivateEndpoint(String privateEndpoint) {
        this.privateEndpoint = privateEndpoint;
        return this;
    }

    /**
     * Get the provisionableCpus property: An array of CPU values that an Autonomous Database can be scaled to.
     * 
     * @return the provisionableCpus value.
     */
    public List<Integer> provisionableCpus() {
        return this.provisionableCpus;
    }

    /**
     * Set the provisionableCpus property: An array of CPU values that an Autonomous Database can be scaled to.
     * 
     * @param provisionableCpus the provisionableCpus value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withProvisionableCpus(List<Integer> provisionableCpus) {
        this.provisionableCpus = provisionableCpus;
        return this;
    }

    /**
     * Get the role property: The Data Guard role of the Autonomous Container Database or Autonomous Database, if
     * Autonomous Data Guard is enabled.
     * 
     * @return the role value.
     */
    public RoleType role() {
        return this.role;
    }

    /**
     * Set the role property: The Data Guard role of the Autonomous Container Database or Autonomous Database, if
     * Autonomous Data Guard is enabled.
     * 
     * @param role the role value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withRole(RoleType role) {
        this.role = role;
        return this;
    }

    /**
     * Get the serviceConsoleUrl property: The URL of the Service Console for the Autonomous Database.
     * 
     * @return the serviceConsoleUrl value.
     */
    public String serviceConsoleUrl() {
        return this.serviceConsoleUrl;
    }

    /**
     * Set the serviceConsoleUrl property: The URL of the Service Console for the Autonomous Database.
     * 
     * @param serviceConsoleUrl the serviceConsoleUrl value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withServiceConsoleUrl(String serviceConsoleUrl) {
        this.serviceConsoleUrl = serviceConsoleUrl;
        return this;
    }

    /**
     * Get the sqlWebDeveloperUrl property: The SQL Web Developer URL for the Oracle Autonomous Database.
     * 
     * @return the sqlWebDeveloperUrl value.
     */
    public String sqlWebDeveloperUrl() {
        return this.sqlWebDeveloperUrl;
    }

    /**
     * Set the sqlWebDeveloperUrl property: The SQL Web Developer URL for the Oracle Autonomous Database.
     * 
     * @param sqlWebDeveloperUrl the sqlWebDeveloperUrl value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withSqlWebDeveloperUrl(String sqlWebDeveloperUrl) {
        this.sqlWebDeveloperUrl = sqlWebDeveloperUrl;
        return this;
    }

    /**
     * Get the supportedRegionsToCloneTo property: The list of regions that support the creation of an Autonomous
     * Database clone or an Autonomous Data Guard standby database.
     * 
     * @return the supportedRegionsToCloneTo value.
     */
    public List<String> supportedRegionsToCloneTo() {
        return this.supportedRegionsToCloneTo;
    }

    /**
     * Set the supportedRegionsToCloneTo property: The list of regions that support the creation of an Autonomous
     * Database clone or an Autonomous Data Guard standby database.
     * 
     * @param supportedRegionsToCloneTo the supportedRegionsToCloneTo value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withSupportedRegionsToCloneTo(List<String> supportedRegionsToCloneTo) {
        this.supportedRegionsToCloneTo = supportedRegionsToCloneTo;
        return this;
    }

    /**
     * Get the timeDataGuardRoleChanged property: The date and time the Autonomous Data Guard role was switched for the
     * Autonomous Database.
     * 
     * @return the timeDataGuardRoleChanged value.
     */
    public String timeDataGuardRoleChanged() {
        return this.timeDataGuardRoleChanged;
    }

    /**
     * Set the timeDataGuardRoleChanged property: The date and time the Autonomous Data Guard role was switched for the
     * Autonomous Database.
     * 
     * @param timeDataGuardRoleChanged the timeDataGuardRoleChanged value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withTimeDataGuardRoleChanged(String timeDataGuardRoleChanged) {
        this.timeDataGuardRoleChanged = timeDataGuardRoleChanged;
        return this;
    }

    /**
     * Get the timeDeletionOfFreeAutonomousDatabase property: The date and time the Always Free database will be
     * automatically deleted because of inactivity.
     * 
     * @return the timeDeletionOfFreeAutonomousDatabase value.
     */
    public String timeDeletionOfFreeAutonomousDatabase() {
        return this.timeDeletionOfFreeAutonomousDatabase;
    }

    /**
     * Set the timeDeletionOfFreeAutonomousDatabase property: The date and time the Always Free database will be
     * automatically deleted because of inactivity.
     * 
     * @param timeDeletionOfFreeAutonomousDatabase the timeDeletionOfFreeAutonomousDatabase value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties
        withTimeDeletionOfFreeAutonomousDatabase(String timeDeletionOfFreeAutonomousDatabase) {
        this.timeDeletionOfFreeAutonomousDatabase = timeDeletionOfFreeAutonomousDatabase;
        return this;
    }

    /**
     * Get the timeLocalDataGuardEnabled property: The date and time that Autonomous Data Guard was enabled for an
     * Autonomous Database where the standby was provisioned in the same region as the primary database.
     * 
     * @return the timeLocalDataGuardEnabled value.
     */
    public String timeLocalDataGuardEnabled() {
        return this.timeLocalDataGuardEnabled;
    }

    /**
     * Set the timeLocalDataGuardEnabled property: The date and time that Autonomous Data Guard was enabled for an
     * Autonomous Database where the standby was provisioned in the same region as the primary database.
     * 
     * @param timeLocalDataGuardEnabled the timeLocalDataGuardEnabled value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withTimeLocalDataGuardEnabled(String timeLocalDataGuardEnabled) {
        this.timeLocalDataGuardEnabled = timeLocalDataGuardEnabled;
        return this;
    }

    /**
     * Get the timeOfLastFailover property: The timestamp of the last failover operation.
     * 
     * @return the timeOfLastFailover value.
     */
    public String timeOfLastFailover() {
        return this.timeOfLastFailover;
    }

    /**
     * Set the timeOfLastFailover property: The timestamp of the last failover operation.
     * 
     * @param timeOfLastFailover the timeOfLastFailover value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withTimeOfLastFailover(String timeOfLastFailover) {
        this.timeOfLastFailover = timeOfLastFailover;
        return this;
    }

    /**
     * Get the timeOfLastRefresh property: The date and time when last refresh happened.
     * 
     * @return the timeOfLastRefresh value.
     */
    public String timeOfLastRefresh() {
        return this.timeOfLastRefresh;
    }

    /**
     * Set the timeOfLastRefresh property: The date and time when last refresh happened.
     * 
     * @param timeOfLastRefresh the timeOfLastRefresh value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withTimeOfLastRefresh(String timeOfLastRefresh) {
        this.timeOfLastRefresh = timeOfLastRefresh;
        return this;
    }

    /**
     * Get the timeOfLastRefreshPoint property: The refresh point timestamp (UTC).
     * 
     * @return the timeOfLastRefreshPoint value.
     */
    public String timeOfLastRefreshPoint() {
        return this.timeOfLastRefreshPoint;
    }

    /**
     * Set the timeOfLastRefreshPoint property: The refresh point timestamp (UTC).
     * 
     * @param timeOfLastRefreshPoint the timeOfLastRefreshPoint value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withTimeOfLastRefreshPoint(String timeOfLastRefreshPoint) {
        this.timeOfLastRefreshPoint = timeOfLastRefreshPoint;
        return this;
    }

    /**
     * Get the timeOfLastSwitchover property: The timestamp of the last switchover operation for the Autonomous
     * Database.
     * 
     * @return the timeOfLastSwitchover value.
     */
    public String timeOfLastSwitchover() {
        return this.timeOfLastSwitchover;
    }

    /**
     * Set the timeOfLastSwitchover property: The timestamp of the last switchover operation for the Autonomous
     * Database.
     * 
     * @param timeOfLastSwitchover the timeOfLastSwitchover value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withTimeOfLastSwitchover(String timeOfLastSwitchover) {
        this.timeOfLastSwitchover = timeOfLastSwitchover;
        return this;
    }

    /**
     * Get the timeReclamationOfFreeAutonomousDatabase property: The date and time the Always Free database will be
     * stopped because of inactivity.
     * 
     * @return the timeReclamationOfFreeAutonomousDatabase value.
     */
    public String timeReclamationOfFreeAutonomousDatabase() {
        return this.timeReclamationOfFreeAutonomousDatabase;
    }

    /**
     * Set the timeReclamationOfFreeAutonomousDatabase property: The date and time the Always Free database will be
     * stopped because of inactivity.
     * 
     * @param timeReclamationOfFreeAutonomousDatabase the timeReclamationOfFreeAutonomousDatabase value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties
        withTimeReclamationOfFreeAutonomousDatabase(String timeReclamationOfFreeAutonomousDatabase) {
        this.timeReclamationOfFreeAutonomousDatabase = timeReclamationOfFreeAutonomousDatabase;
        return this;
    }

    /**
     * Get the usedDataStorageSizeInGbs property: The storage space consumed by Autonomous Database in GBs.
     * 
     * @return the usedDataStorageSizeInGbs value.
     */
    public Integer usedDataStorageSizeInGbs() {
        return this.usedDataStorageSizeInGbs;
    }

    /**
     * Set the usedDataStorageSizeInGbs property: The storage space consumed by Autonomous Database in GBs.
     * 
     * @param usedDataStorageSizeInGbs the usedDataStorageSizeInGbs value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withUsedDataStorageSizeInGbs(Integer usedDataStorageSizeInGbs) {
        this.usedDataStorageSizeInGbs = usedDataStorageSizeInGbs;
        return this;
    }

    /**
     * Get the usedDataStorageSizeInTbs property: The amount of storage that has been used, in terabytes.
     * 
     * @return the usedDataStorageSizeInTbs value.
     */
    public Integer usedDataStorageSizeInTbs() {
        return this.usedDataStorageSizeInTbs;
    }

    /**
     * Set the usedDataStorageSizeInTbs property: The amount of storage that has been used, in terabytes.
     * 
     * @param usedDataStorageSizeInTbs the usedDataStorageSizeInTbs value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withUsedDataStorageSizeInTbs(Integer usedDataStorageSizeInTbs) {
        this.usedDataStorageSizeInTbs = usedDataStorageSizeInTbs;
        return this;
    }

    /**
     * Get the ocid property: Database ocid.
     * 
     * @return the ocid value.
     */
    public String ocid() {
        return this.ocid;
    }

    /**
     * Set the ocid property: Database ocid.
     * 
     * @param ocid the ocid value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    AutonomousDatabaseBaseProperties withOcid(String ocid) {
        this.ocid = ocid;
        return this;
    }

    /**
     * Get the backupRetentionPeriodInDays property: Retention period, in days, for long-term backups.
     * 
     * @return the backupRetentionPeriodInDays value.
     */
    public Integer backupRetentionPeriodInDays() {
        return this.backupRetentionPeriodInDays;
    }

    /**
     * Set the backupRetentionPeriodInDays property: Retention period, in days, for long-term backups.
     * 
     * @param backupRetentionPeriodInDays the backupRetentionPeriodInDays value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withBackupRetentionPeriodInDays(Integer backupRetentionPeriodInDays) {
        this.backupRetentionPeriodInDays = backupRetentionPeriodInDays;
        return this;
    }

    /**
     * Get the whitelistedIps property: The client IP access control list (ACL). This is an array of CIDR notations
     * and/or IP addresses. Values should be separate strings, separated by commas. Example:
     * ['1.1.1.1','1.1.1.0/24','1.1.2.25'].
     * 
     * @return the whitelistedIps value.
     */
    public List<String> whitelistedIps() {
        return this.whitelistedIps;
    }

    /**
     * Set the whitelistedIps property: The client IP access control list (ACL). This is an array of CIDR notations
     * and/or IP addresses. Values should be separate strings, separated by commas. Example:
     * ['1.1.1.1','1.1.1.0/24','1.1.2.25'].
     * 
     * @param whitelistedIps the whitelistedIps value to set.
     * @return the AutonomousDatabaseBaseProperties object itself.
     */
    public AutonomousDatabaseBaseProperties withWhitelistedIps(List<String> whitelistedIps) {
        this.whitelistedIps = whitelistedIps;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (customerContacts() != null) {
            customerContacts().forEach(e -> e.validate());
        }
        if (localStandbyDb() != null) {
            localStandbyDb().validate();
        }
        if (scheduledOperations() != null) {
            scheduledOperations().validate();
        }
        if (apexDetails() != null) {
            apexDetails().validate();
        }
        if (connectionStrings() != null) {
            connectionStrings().validate();
        }
        if (connectionUrls() != null) {
            connectionUrls().validate();
        }
        if (longTermBackupSchedule() != null) {
            longTermBackupSchedule().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataBaseType", this.dataBaseType == null ? null : this.dataBaseType.toString());
        jsonWriter.writeStringField("adminPassword", this.adminPassword);
        jsonWriter.writeStringField("autonomousMaintenanceScheduleType",
            this.autonomousMaintenanceScheduleType == null ? null : this.autonomousMaintenanceScheduleType.toString());
        jsonWriter.writeStringField("characterSet", this.characterSet);
        jsonWriter.writeNumberField("computeCount", this.computeCount);
        jsonWriter.writeStringField("computeModel", this.computeModel == null ? null : this.computeModel.toString());
        jsonWriter.writeNumberField("cpuCoreCount", this.cpuCoreCount);
        jsonWriter.writeArrayField("customerContacts", this.customerContacts,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("dataStorageSizeInTbs", this.dataStorageSizeInTbs);
        jsonWriter.writeNumberField("dataStorageSizeInGbs", this.dataStorageSizeInGbs);
        jsonWriter.writeStringField("dbVersion", this.dbVersion);
        jsonWriter.writeStringField("dbWorkload", this.dbWorkload == null ? null : this.dbWorkload.toString());
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeBooleanField("isAutoScalingEnabled", this.isAutoScalingEnabled);
        jsonWriter.writeBooleanField("isAutoScalingForStorageEnabled", this.isAutoScalingForStorageEnabled);
        jsonWriter.writeStringField("peerDbId", this.peerDbId);
        jsonWriter.writeBooleanField("isLocalDataGuardEnabled", this.isLocalDataGuardEnabled);
        jsonWriter.writeBooleanField("isMtlsConnectionRequired", this.isMtlsConnectionRequired);
        jsonWriter.writeBooleanField("isPreviewVersionWithServiceTermsAccepted",
            this.isPreviewVersionWithServiceTermsAccepted);
        jsonWriter.writeStringField("licenseModel", this.licenseModel == null ? null : this.licenseModel.toString());
        jsonWriter.writeStringField("ncharacterSet", this.ncharacterSet);
        jsonWriter.writeJsonField("scheduledOperations", this.scheduledOperations);
        jsonWriter.writeStringField("privateEndpointIp", this.privateEndpointIp);
        jsonWriter.writeStringField("privateEndpointLabel", this.privateEndpointLabel);
        jsonWriter.writeStringField("subnetId", this.subnetId);
        jsonWriter.writeStringField("vnetId", this.vnetId);
        jsonWriter.writeStringField("databaseEdition",
            this.databaseEdition == null ? null : this.databaseEdition.toString());
        jsonWriter.writeStringField("autonomousDatabaseId", this.autonomousDatabaseId);
        jsonWriter.writeJsonField("longTermBackupSchedule", this.longTermBackupSchedule);
        jsonWriter.writeNumberField("localAdgAutoFailoverMaxDataLossLimit", this.localAdgAutoFailoverMaxDataLossLimit);
        jsonWriter.writeStringField("openMode", this.openMode == null ? null : this.openMode.toString());
        jsonWriter.writeStringField("permissionLevel",
            this.permissionLevel == null ? null : this.permissionLevel.toString());
        jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
        jsonWriter.writeNumberField("backupRetentionPeriodInDays", this.backupRetentionPeriodInDays);
        jsonWriter.writeArrayField("whitelistedIps", this.whitelistedIps,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutonomousDatabaseBaseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutonomousDatabaseBaseProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AutonomousDatabaseBaseProperties.
     */
    public static AutonomousDatabaseBaseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("dataBaseType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Clone".equals(discriminatorValue)) {
                    return AutonomousDatabaseCloneProperties.fromJson(readerToUse.reset());
                } else if ("Regular".equals(discriminatorValue)) {
                    return AutonomousDatabaseProperties.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static AutonomousDatabaseBaseProperties fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutonomousDatabaseBaseProperties deserializedAutonomousDatabaseBaseProperties
                = new AutonomousDatabaseBaseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataBaseType".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.dataBaseType
                        = DataBaseType.fromString(reader.getString());
                } else if ("adminPassword".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.adminPassword = reader.getString();
                } else if ("autonomousMaintenanceScheduleType".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.autonomousMaintenanceScheduleType
                        = AutonomousMaintenanceScheduleType.fromString(reader.getString());
                } else if ("characterSet".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.characterSet = reader.getString();
                } else if ("computeCount".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.computeCount
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("computeModel".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.computeModel
                        = ComputeModel.fromString(reader.getString());
                } else if ("cpuCoreCount".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.cpuCoreCount = reader.getNullable(JsonReader::getInt);
                } else if ("customerContacts".equals(fieldName)) {
                    List<CustomerContact> customerContacts
                        = reader.readArray(reader1 -> CustomerContact.fromJson(reader1));
                    deserializedAutonomousDatabaseBaseProperties.customerContacts = customerContacts;
                } else if ("dataStorageSizeInTbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.dataStorageSizeInTbs
                        = reader.getNullable(JsonReader::getInt);
                } else if ("dataStorageSizeInGbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.dataStorageSizeInGbs
                        = reader.getNullable(JsonReader::getInt);
                } else if ("dbVersion".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.dbVersion = reader.getString();
                } else if ("dbWorkload".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.dbWorkload
                        = WorkloadType.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.displayName = reader.getString();
                } else if ("isAutoScalingEnabled".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.isAutoScalingEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isAutoScalingForStorageEnabled".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.isAutoScalingForStorageEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("peerDbIds".equals(fieldName)) {
                    List<String> peerDbIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedAutonomousDatabaseBaseProperties.peerDbIds = peerDbIds;
                } else if ("peerDbId".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.peerDbId = reader.getString();
                } else if ("isLocalDataGuardEnabled".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.isLocalDataGuardEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isRemoteDataGuardEnabled".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.isRemoteDataGuardEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("localDisasterRecoveryType".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.localDisasterRecoveryType
                        = DisasterRecoveryType.fromString(reader.getString());
                } else if ("localStandbyDb".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.localStandbyDb
                        = AutonomousDatabaseStandbySummary.fromJson(reader);
                } else if ("failedDataRecoveryInSeconds".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.failedDataRecoveryInSeconds
                        = reader.getNullable(JsonReader::getInt);
                } else if ("isMtlsConnectionRequired".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.isMtlsConnectionRequired
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isPreviewVersionWithServiceTermsAccepted".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.isPreviewVersionWithServiceTermsAccepted
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("licenseModel".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.licenseModel
                        = LicenseModel.fromString(reader.getString());
                } else if ("ncharacterSet".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.ncharacterSet = reader.getString();
                } else if ("lifecycleDetails".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.lifecycleDetails = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.provisioningState
                        = AzureResourceProvisioningState.fromString(reader.getString());
                } else if ("lifecycleState".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.lifecycleState
                        = AutonomousDatabaseLifecycleState.fromString(reader.getString());
                } else if ("scheduledOperations".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.scheduledOperations
                        = ScheduledOperationsType.fromJson(reader);
                } else if ("privateEndpointIp".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.privateEndpointIp = reader.getString();
                } else if ("privateEndpointLabel".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.privateEndpointLabel = reader.getString();
                } else if ("ociUrl".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.ociUrl = reader.getString();
                } else if ("subnetId".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.subnetId = reader.getString();
                } else if ("vnetId".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.vnetId = reader.getString();
                } else if ("timeCreated".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.timeCreated = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("timeMaintenanceBegin".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.timeMaintenanceBegin = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("timeMaintenanceEnd".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.timeMaintenanceEnd = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("actualUsedDataStorageSizeInTbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.actualUsedDataStorageSizeInTbs
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("allocatedStorageSizeInTbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.allocatedStorageSizeInTbs
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("apexDetails".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.apexDetails = ApexDetailsType.fromJson(reader);
                } else if ("availableUpgradeVersions".equals(fieldName)) {
                    List<String> availableUpgradeVersions = reader.readArray(reader1 -> reader1.getString());
                    deserializedAutonomousDatabaseBaseProperties.availableUpgradeVersions = availableUpgradeVersions;
                } else if ("connectionStrings".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.connectionStrings
                        = ConnectionStringType.fromJson(reader);
                } else if ("connectionUrls".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.connectionUrls = ConnectionUrlType.fromJson(reader);
                } else if ("dataSafeStatus".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.dataSafeStatus
                        = DataSafeStatusType.fromString(reader.getString());
                } else if ("databaseEdition".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.databaseEdition
                        = DatabaseEditionType.fromString(reader.getString());
                } else if ("autonomousDatabaseId".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.autonomousDatabaseId = reader.getString();
                } else if ("inMemoryAreaInGbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.inMemoryAreaInGbs
                        = reader.getNullable(JsonReader::getInt);
                } else if ("nextLongTermBackupTimeStamp".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.nextLongTermBackupTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("longTermBackupSchedule".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.longTermBackupSchedule
                        = LongTermBackUpScheduleDetails.fromJson(reader);
                } else if ("isPreview".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.isPreview = reader.getNullable(JsonReader::getBoolean);
                } else if ("localAdgAutoFailoverMaxDataLossLimit".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.localAdgAutoFailoverMaxDataLossLimit
                        = reader.getNullable(JsonReader::getInt);
                } else if ("memoryPerOracleComputeUnitInGbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.memoryPerOracleComputeUnitInGbs
                        = reader.getNullable(JsonReader::getInt);
                } else if ("openMode".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.openMode = OpenModeType.fromString(reader.getString());
                } else if ("operationsInsightsStatus".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.operationsInsightsStatus
                        = OperationsInsightsStatusType.fromString(reader.getString());
                } else if ("permissionLevel".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.permissionLevel
                        = PermissionLevelType.fromString(reader.getString());
                } else if ("privateEndpoint".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.privateEndpoint = reader.getString();
                } else if ("provisionableCpus".equals(fieldName)) {
                    List<Integer> provisionableCpus = reader.readArray(reader1 -> reader1.getInt());
                    deserializedAutonomousDatabaseBaseProperties.provisionableCpus = provisionableCpus;
                } else if ("role".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.role = RoleType.fromString(reader.getString());
                } else if ("serviceConsoleUrl".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.serviceConsoleUrl = reader.getString();
                } else if ("sqlWebDeveloperUrl".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.sqlWebDeveloperUrl = reader.getString();
                } else if ("supportedRegionsToCloneTo".equals(fieldName)) {
                    List<String> supportedRegionsToCloneTo = reader.readArray(reader1 -> reader1.getString());
                    deserializedAutonomousDatabaseBaseProperties.supportedRegionsToCloneTo = supportedRegionsToCloneTo;
                } else if ("timeDataGuardRoleChanged".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.timeDataGuardRoleChanged = reader.getString();
                } else if ("timeDeletionOfFreeAutonomousDatabase".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.timeDeletionOfFreeAutonomousDatabase
                        = reader.getString();
                } else if ("timeLocalDataGuardEnabled".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.timeLocalDataGuardEnabled = reader.getString();
                } else if ("timeOfLastFailover".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.timeOfLastFailover = reader.getString();
                } else if ("timeOfLastRefresh".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.timeOfLastRefresh = reader.getString();
                } else if ("timeOfLastRefreshPoint".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.timeOfLastRefreshPoint = reader.getString();
                } else if ("timeOfLastSwitchover".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.timeOfLastSwitchover = reader.getString();
                } else if ("timeReclamationOfFreeAutonomousDatabase".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.timeReclamationOfFreeAutonomousDatabase
                        = reader.getString();
                } else if ("usedDataStorageSizeInGbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.usedDataStorageSizeInGbs
                        = reader.getNullable(JsonReader::getInt);
                } else if ("usedDataStorageSizeInTbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.usedDataStorageSizeInTbs
                        = reader.getNullable(JsonReader::getInt);
                } else if ("ocid".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.ocid = reader.getString();
                } else if ("backupRetentionPeriodInDays".equals(fieldName)) {
                    deserializedAutonomousDatabaseBaseProperties.backupRetentionPeriodInDays
                        = reader.getNullable(JsonReader::getInt);
                } else if ("whitelistedIps".equals(fieldName)) {
                    List<String> whitelistedIps = reader.readArray(reader1 -> reader1.getString());
                    deserializedAutonomousDatabaseBaseProperties.whitelistedIps = whitelistedIps;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutonomousDatabaseBaseProperties;
        });
    }
}
