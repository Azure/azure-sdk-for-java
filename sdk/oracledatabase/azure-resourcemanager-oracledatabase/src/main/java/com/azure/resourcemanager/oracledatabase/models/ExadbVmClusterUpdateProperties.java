// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The updatable properties of the ExadbVmCluster.
 */
@Fluent
public final class ExadbVmClusterUpdateProperties implements JsonSerializable<ExadbVmClusterUpdateProperties> {
    /*
     * The number of nodes in the Exadata VM cluster on Exascale Infrastructure.
     */
    private Integer nodeCount;

    /**
     * Creates an instance of ExadbVmClusterUpdateProperties class.
     */
    public ExadbVmClusterUpdateProperties() {
    }

    /**
     * Get the nodeCount property: The number of nodes in the Exadata VM cluster on Exascale Infrastructure.
     * 
     * @return the nodeCount value.
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }

    /**
     * Set the nodeCount property: The number of nodes in the Exadata VM cluster on Exascale Infrastructure.
     * 
     * @param nodeCount the nodeCount value to set.
     * @return the ExadbVmClusterUpdateProperties object itself.
     */
    public ExadbVmClusterUpdateProperties withNodeCount(Integer nodeCount) {
        this.nodeCount = nodeCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("nodeCount", this.nodeCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExadbVmClusterUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExadbVmClusterUpdateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExadbVmClusterUpdateProperties.
     */
    public static ExadbVmClusterUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExadbVmClusterUpdateProperties deserializedExadbVmClusterUpdateProperties
                = new ExadbVmClusterUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nodeCount".equals(fieldName)) {
                    deserializedExadbVmClusterUpdateProperties.nodeCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExadbVmClusterUpdateProperties;
        });
    }
}
