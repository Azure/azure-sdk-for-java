// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * FlexComponent resource model.
 */
@Immutable
public final class FlexComponentProperties implements JsonSerializable<FlexComponentProperties> {
    /*
     * The minimum number of CPU cores that can be enabled on the DB Server for this Flex Component.
     */
    private Integer minimumCoreCount;

    /*
     * The maximum number of CPU cores that can be enabled on the DB Server for this Flex Component.
     */
    private Integer availableCoreCount;

    /*
     * The maximum storage that can be enabled on the Storage Server for this Flex Component.
     */
    private Integer availableDbStorageInGbs;

    /*
     * The runtime minimum number of CPU cores that can be enabled for this Flex Component.
     */
    private Integer runtimeMinimumCoreCount;

    /*
     * The name of the DB system shape for this Flex Component.
     */
    private String shape;

    /*
     * The maximum memory size that can be enabled on the DB Server for this Flex Component.
     */
    private Integer availableMemoryInGbs;

    /*
     * The maximum local storage that can be enabled on the DB Server for this Flex Component.
     */
    private Integer availableLocalStorageInGbs;

    /*
     * The compute model of the DB Server for this Flex Component.
     */
    private String computeModel;

    /*
     * The hardware type of the DB (Compute) or Storage (Cell) Server for this Flex Component.
     */
    private HardwareType hardwareType;

    /*
     * The description summary for this Flex Component.
     */
    private String descriptionSummary;

    /**
     * Creates an instance of FlexComponentProperties class.
     */
    private FlexComponentProperties() {
    }

    /**
     * Get the minimumCoreCount property: The minimum number of CPU cores that can be enabled on the DB Server for this
     * Flex Component.
     * 
     * @return the minimumCoreCount value.
     */
    public Integer minimumCoreCount() {
        return this.minimumCoreCount;
    }

    /**
     * Get the availableCoreCount property: The maximum number of CPU cores that can be enabled on the DB Server for
     * this Flex Component.
     * 
     * @return the availableCoreCount value.
     */
    public Integer availableCoreCount() {
        return this.availableCoreCount;
    }

    /**
     * Get the availableDbStorageInGbs property: The maximum storage that can be enabled on the Storage Server for this
     * Flex Component.
     * 
     * @return the availableDbStorageInGbs value.
     */
    public Integer availableDbStorageInGbs() {
        return this.availableDbStorageInGbs;
    }

    /**
     * Get the runtimeMinimumCoreCount property: The runtime minimum number of CPU cores that can be enabled for this
     * Flex Component.
     * 
     * @return the runtimeMinimumCoreCount value.
     */
    public Integer runtimeMinimumCoreCount() {
        return this.runtimeMinimumCoreCount;
    }

    /**
     * Get the shape property: The name of the DB system shape for this Flex Component.
     * 
     * @return the shape value.
     */
    public String shape() {
        return this.shape;
    }

    /**
     * Get the availableMemoryInGbs property: The maximum memory size that can be enabled on the DB Server for this Flex
     * Component.
     * 
     * @return the availableMemoryInGbs value.
     */
    public Integer availableMemoryInGbs() {
        return this.availableMemoryInGbs;
    }

    /**
     * Get the availableLocalStorageInGbs property: The maximum local storage that can be enabled on the DB Server for
     * this Flex Component.
     * 
     * @return the availableLocalStorageInGbs value.
     */
    public Integer availableLocalStorageInGbs() {
        return this.availableLocalStorageInGbs;
    }

    /**
     * Get the computeModel property: The compute model of the DB Server for this Flex Component.
     * 
     * @return the computeModel value.
     */
    public String computeModel() {
        return this.computeModel;
    }

    /**
     * Get the hardwareType property: The hardware type of the DB (Compute) or Storage (Cell) Server for this Flex
     * Component.
     * 
     * @return the hardwareType value.
     */
    public HardwareType hardwareType() {
        return this.hardwareType;
    }

    /**
     * Get the descriptionSummary property: The description summary for this Flex Component.
     * 
     * @return the descriptionSummary value.
     */
    public String descriptionSummary() {
        return this.descriptionSummary;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FlexComponentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FlexComponentProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FlexComponentProperties.
     */
    public static FlexComponentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FlexComponentProperties deserializedFlexComponentProperties = new FlexComponentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("minimumCoreCount".equals(fieldName)) {
                    deserializedFlexComponentProperties.minimumCoreCount = reader.getNullable(JsonReader::getInt);
                } else if ("availableCoreCount".equals(fieldName)) {
                    deserializedFlexComponentProperties.availableCoreCount = reader.getNullable(JsonReader::getInt);
                } else if ("availableDbStorageInGbs".equals(fieldName)) {
                    deserializedFlexComponentProperties.availableDbStorageInGbs
                        = reader.getNullable(JsonReader::getInt);
                } else if ("runtimeMinimumCoreCount".equals(fieldName)) {
                    deserializedFlexComponentProperties.runtimeMinimumCoreCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("shape".equals(fieldName)) {
                    deserializedFlexComponentProperties.shape = reader.getString();
                } else if ("availableMemoryInGbs".equals(fieldName)) {
                    deserializedFlexComponentProperties.availableMemoryInGbs = reader.getNullable(JsonReader::getInt);
                } else if ("availableLocalStorageInGbs".equals(fieldName)) {
                    deserializedFlexComponentProperties.availableLocalStorageInGbs
                        = reader.getNullable(JsonReader::getInt);
                } else if ("computeModel".equals(fieldName)) {
                    deserializedFlexComponentProperties.computeModel = reader.getString();
                } else if ("hardwareType".equals(fieldName)) {
                    deserializedFlexComponentProperties.hardwareType = HardwareType.fromString(reader.getString());
                } else if ("descriptionSummary".equals(fieldName)) {
                    deserializedFlexComponentProperties.descriptionSummary = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFlexComponentProperties;
        });
    }
}
