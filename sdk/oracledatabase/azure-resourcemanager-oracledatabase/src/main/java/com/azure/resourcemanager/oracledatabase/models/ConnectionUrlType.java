// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The URLs for accessing Oracle Application Express (APEX) and SQL Developer Web with a browser from a Compute instance
 * within your VCN or that has a direct connection to your VCN.
 */
@Immutable
public final class ConnectionUrlType implements JsonSerializable<ConnectionUrlType> {
    /*
     * Oracle Application Express (APEX) URL.
     */
    private String apexUrl;

    /*
     * The URL of the Database Transforms for the Autonomous Database.
     */
    private String databaseTransformsUrl;

    /*
     * The URL of the Graph Studio for the Autonomous Database.
     */
    private String graphStudioUrl;

    /*
     * The URL of the Oracle Machine Learning (OML) Notebook for the Autonomous Database.
     */
    private String machineLearningNotebookUrl;

    /*
     * The URL of the MongoDB API for the Autonomous Database.
     */
    private String mongoDbUrl;

    /*
     * The Oracle REST Data Services (ORDS) URL of the Web Access for the Autonomous Database.
     */
    private String ordsUrl;

    /*
     * Oracle SQL Developer Web URL.
     */
    private String sqlDevWebUrl;

    /**
     * Creates an instance of ConnectionUrlType class.
     */
    private ConnectionUrlType() {
    }

    /**
     * Get the apexUrl property: Oracle Application Express (APEX) URL.
     * 
     * @return the apexUrl value.
     */
    public String apexUrl() {
        return this.apexUrl;
    }

    /**
     * Get the databaseTransformsUrl property: The URL of the Database Transforms for the Autonomous Database.
     * 
     * @return the databaseTransformsUrl value.
     */
    public String databaseTransformsUrl() {
        return this.databaseTransformsUrl;
    }

    /**
     * Get the graphStudioUrl property: The URL of the Graph Studio for the Autonomous Database.
     * 
     * @return the graphStudioUrl value.
     */
    public String graphStudioUrl() {
        return this.graphStudioUrl;
    }

    /**
     * Get the machineLearningNotebookUrl property: The URL of the Oracle Machine Learning (OML) Notebook for the
     * Autonomous Database.
     * 
     * @return the machineLearningNotebookUrl value.
     */
    public String machineLearningNotebookUrl() {
        return this.machineLearningNotebookUrl;
    }

    /**
     * Get the mongoDbUrl property: The URL of the MongoDB API for the Autonomous Database.
     * 
     * @return the mongoDbUrl value.
     */
    public String mongoDbUrl() {
        return this.mongoDbUrl;
    }

    /**
     * Get the ordsUrl property: The Oracle REST Data Services (ORDS) URL of the Web Access for the Autonomous Database.
     * 
     * @return the ordsUrl value.
     */
    public String ordsUrl() {
        return this.ordsUrl;
    }

    /**
     * Get the sqlDevWebUrl property: Oracle SQL Developer Web URL.
     * 
     * @return the sqlDevWebUrl value.
     */
    public String sqlDevWebUrl() {
        return this.sqlDevWebUrl;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("apexUrl", this.apexUrl);
        jsonWriter.writeStringField("databaseTransformsUrl", this.databaseTransformsUrl);
        jsonWriter.writeStringField("graphStudioUrl", this.graphStudioUrl);
        jsonWriter.writeStringField("machineLearningNotebookUrl", this.machineLearningNotebookUrl);
        jsonWriter.writeStringField("mongoDbUrl", this.mongoDbUrl);
        jsonWriter.writeStringField("ordsUrl", this.ordsUrl);
        jsonWriter.writeStringField("sqlDevWebUrl", this.sqlDevWebUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectionUrlType from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectionUrlType if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectionUrlType.
     */
    public static ConnectionUrlType fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectionUrlType deserializedConnectionUrlType = new ConnectionUrlType();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("apexUrl".equals(fieldName)) {
                    deserializedConnectionUrlType.apexUrl = reader.getString();
                } else if ("databaseTransformsUrl".equals(fieldName)) {
                    deserializedConnectionUrlType.databaseTransformsUrl = reader.getString();
                } else if ("graphStudioUrl".equals(fieldName)) {
                    deserializedConnectionUrlType.graphStudioUrl = reader.getString();
                } else if ("machineLearningNotebookUrl".equals(fieldName)) {
                    deserializedConnectionUrlType.machineLearningNotebookUrl = reader.getString();
                } else if ("mongoDbUrl".equals(fieldName)) {
                    deserializedConnectionUrlType.mongoDbUrl = reader.getString();
                } else if ("ordsUrl".equals(fieldName)) {
                    deserializedConnectionUrlType.ordsUrl = reader.getString();
                } else if ("sqlDevWebUrl".equals(fieldName)) {
                    deserializedConnectionUrlType.sqlDevWebUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectionUrlType;
        });
    }
}
