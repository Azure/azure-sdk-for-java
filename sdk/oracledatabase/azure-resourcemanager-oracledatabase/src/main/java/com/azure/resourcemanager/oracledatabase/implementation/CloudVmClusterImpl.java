// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.oracledatabase.fluent.models.CloudVmClusterInner;
import com.azure.resourcemanager.oracledatabase.models.AddRemoveDbNode;
import com.azure.resourcemanager.oracledatabase.models.CloudVmCluster;
import com.azure.resourcemanager.oracledatabase.models.CloudVmClusterProperties;
import com.azure.resourcemanager.oracledatabase.models.CloudVmClusterUpdate;
import com.azure.resourcemanager.oracledatabase.models.CloudVmClusterUpdateProperties;
import com.azure.resourcemanager.oracledatabase.models.PrivateIpAddressesFilter;
import com.azure.resourcemanager.oracledatabase.models.PrivateIpAddressProperties;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class CloudVmClusterImpl implements CloudVmCluster, CloudVmCluster.Definition, CloudVmCluster.Update {
    private CloudVmClusterInner innerObject;

    private final com.azure.resourcemanager.oracledatabase.OracleDatabaseManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public CloudVmClusterProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public CloudVmClusterInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.oracledatabase.OracleDatabaseManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String cloudvmclustername;

    private CloudVmClusterUpdate updateProperties;

    public CloudVmClusterImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public CloudVmCluster create() {
        this.innerObject = serviceManager.serviceClient()
            .getCloudVmClusters()
            .createOrUpdate(resourceGroupName, cloudvmclustername, this.innerModel(), Context.NONE);
        return this;
    }

    public CloudVmCluster create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getCloudVmClusters()
            .createOrUpdate(resourceGroupName, cloudvmclustername, this.innerModel(), context);
        return this;
    }

    CloudVmClusterImpl(String name, com.azure.resourcemanager.oracledatabase.OracleDatabaseManager serviceManager) {
        this.innerObject = new CloudVmClusterInner();
        this.serviceManager = serviceManager;
        this.cloudvmclustername = name;
    }

    public CloudVmClusterImpl update() {
        this.updateProperties = new CloudVmClusterUpdate();
        return this;
    }

    public CloudVmCluster apply() {
        this.innerObject = serviceManager.serviceClient()
            .getCloudVmClusters()
            .update(resourceGroupName, cloudvmclustername, updateProperties, Context.NONE);
        return this;
    }

    public CloudVmCluster apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getCloudVmClusters()
            .update(resourceGroupName, cloudvmclustername, updateProperties, context);
        return this;
    }

    CloudVmClusterImpl(CloudVmClusterInner innerObject,
        com.azure.resourcemanager.oracledatabase.OracleDatabaseManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.cloudvmclustername = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "cloudVmClusters");
    }

    public CloudVmCluster refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getCloudVmClusters()
            .getByResourceGroupWithResponse(resourceGroupName, cloudvmclustername, Context.NONE)
            .getValue();
        return this;
    }

    public CloudVmCluster refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getCloudVmClusters()
            .getByResourceGroupWithResponse(resourceGroupName, cloudvmclustername, context)
            .getValue();
        return this;
    }

    public CloudVmCluster addVms(AddRemoveDbNode body) {
        return serviceManager.cloudVmClusters().addVms(resourceGroupName, cloudvmclustername, body);
    }

    public CloudVmCluster addVms(AddRemoveDbNode body, Context context) {
        return serviceManager.cloudVmClusters().addVms(resourceGroupName, cloudvmclustername, body, context);
    }

    public Response<List<PrivateIpAddressProperties>> listPrivateIpAddressesWithResponse(PrivateIpAddressesFilter body,
        Context context) {
        return serviceManager.cloudVmClusters()
            .listPrivateIpAddressesWithResponse(resourceGroupName, cloudvmclustername, body, context);
    }

    public List<PrivateIpAddressProperties> listPrivateIpAddresses(PrivateIpAddressesFilter body) {
        return serviceManager.cloudVmClusters().listPrivateIpAddresses(resourceGroupName, cloudvmclustername, body);
    }

    public CloudVmCluster removeVms(AddRemoveDbNode body) {
        return serviceManager.cloudVmClusters().removeVms(resourceGroupName, cloudvmclustername, body);
    }

    public CloudVmCluster removeVms(AddRemoveDbNode body, Context context) {
        return serviceManager.cloudVmClusters().removeVms(resourceGroupName, cloudvmclustername, body, context);
    }

    public CloudVmClusterImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public CloudVmClusterImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public CloudVmClusterImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public CloudVmClusterImpl withProperties(CloudVmClusterProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public CloudVmClusterImpl withProperties(CloudVmClusterUpdateProperties properties) {
        this.updateProperties.withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
