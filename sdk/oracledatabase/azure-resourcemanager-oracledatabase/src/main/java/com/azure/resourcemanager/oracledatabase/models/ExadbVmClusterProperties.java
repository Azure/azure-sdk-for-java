// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * ExadbVmCluster resource model.
 */
@Fluent
public final class ExadbVmClusterProperties implements JsonSerializable<ExadbVmClusterProperties> {
    /*
     * ExadbVmCluster ocid
     */
    private String ocid;

    /*
     * The cluster name for Exadata VM cluster on Exascale Infrastructure. The cluster name must begin with an
     * alphabetic character, and may contain hyphens (-). Underscores (_) are not permitted. The cluster name can be no
     * longer than 11 characters and is not case sensitive.
     */
    private String clusterName;

    /*
     * Client OCI backup subnet CIDR, default is 192.168.252.0/22
     */
    private String backupSubnetCidr;

    /*
     * HTTPS link to OCI Network Security Group exposed to Azure Customer via the Azure Interface.
     */
    private String nsgUrl;

    /*
     * Exadata VM cluster on Exascale Infrastructure provisioning state
     */
    private AzureResourceProvisioningState provisioningState;

    /*
     * CloudVmCluster lifecycle state
     */
    private ExadbVmClusterLifecycleState lifecycleState;

    /*
     * VNET for network connectivity
     */
    private String vnetId;

    /*
     * Client subnet
     */
    private String subnetId;

    /*
     * Indicates user preferences for the various diagnostic collection options for the VM cluster/Cloud VM cluster/VMBM
     * DBCS.
     */
    private DataCollectionOptions dataCollectionOptions;

    /*
     * Display Name
     */
    private String displayName;

    /*
     * A domain name used for the Exadata VM cluster on Exascale Infrastructure
     */
    private String domain;

    /*
     * The number of ECPUs to enable for an Exadata VM cluster on Exascale Infrastructure.
     */
    private int enabledEcpuCount;

    /*
     * The Azure Resource ID of the Exadata Database Storage Vault.
     */
    private String exascaleDbStorageVaultId;

    /*
     * Grid Setup will be done using this Grid Image OCID. Can be obtained using giMinorVersions API
     */
    private String gridImageOcid;

    /*
     * The type of Grid Image
     */
    private GridImageType gridImageType;

    /*
     * Oracle Grid Infrastructure (GI) software version
     */
    private String giVersion;

    /*
     * The hostname for the Exadata VM cluster on Exascale Infrastructure.
     */
    private String hostname;

    /*
     * The Oracle license model that applies to the Exadata VM cluster on Exascale Infrastructure. The default is
     * LICENSE_INCLUDED.
     */
    private LicenseModel licenseModel;

    /*
     * The memory that you want to be allocated in GBs. Memory is calculated based on 11 GB per VM core reserved.
     */
    private Integer memorySizeInGbs;

    /*
     * The number of nodes in the Exadata VM cluster on Exascale Infrastructure.
     */
    private int nodeCount;

    /*
     * CIDR blocks for additional NSG ingress rules. The VNET CIDRs used to provision the VM Cluster will be added by
     * default.
     */
    private List<NsgCidr> nsgCidrs;

    /*
     * The OCID of the zone the Exadata VM cluster on Exascale Infrastructure is associated with.
     */
    private String zoneOcid;

    /*
     * The OCID of the zone the Exadata VM cluster on Exascale Infrastructure is associated with.
     */
    private String privateZoneOcid;

    /*
     * The TCP Single Client Access Name (SCAN) port. The default port is 1521.
     */
    private Integer scanListenerPortTcp;

    /*
     * The TCPS Single Client Access Name (SCAN) port. The default port is 2484.
     */
    private Integer scanListenerPortTcpSsl;

    /*
     * The port number configured for the listener on the Exadata VM cluster on Exascale Infrastructure.
     */
    private Integer listenerPort;

    /*
     * The shape of the Exadata VM cluster on Exascale Infrastructure resource
     */
    private String shape;

    /*
     * The public key portion of one or more key pairs used for SSH access to the Exadata VM cluster on Exascale
     * Infrastructure.
     */
    private List<String> sshPublicKeys;

    /*
     * Operating system version of the image.
     */
    private String systemVersion;

    /*
     * The time zone of the Exadata VM cluster on Exascale Infrastructure. For details, see [Exadata Infrastructure Time
     * Zones](/Content/Database/References/timezones.htm).
     */
    private String timeZone;

    /*
     * The number of Total ECPUs for an Exadata VM cluster on Exascale Infrastructure.
     */
    private int totalEcpuCount;

    /*
     * Filesystem storage details.
     */
    private ExadbVmClusterStorageDetails vmFileSystemStorage;

    /*
     * Additional information about the current lifecycle state.
     */
    private String lifecycleDetails;

    /*
     * The FQDN of the DNS record for the SCAN IP addresses that are associated with the Exadata VM cluster on Exascale
     * Infrastructure.
     */
    private String scanDnsName;

    /*
     * The Single Client Access Name (SCAN) IP addresses associated with the Exadata VM cluster on Exascale
     * Infrastructure. SCAN IP addresses are typically used for load balancing and are not assigned to any interface.
     * Oracle Clusterware directs the requests to the appropriate nodes in the cluster. **Note:** For a single-node DB
     * system, this list is empty.
     */
    private List<String> scanIpIds;

    /*
     * The OCID of the DNS record for the SCAN IP addresses that are associated with the Exadata VM cluster on Exascale
     * Infrastructure.
     */
    private String scanDnsRecordId;

    /*
     * Snapshot filesystem storage details.
     */
    private ExadbVmClusterStorageDetails snapshotFileSystemStorage;

    /*
     * Total file system storage details.
     */
    private ExadbVmClusterStorageDetails totalFileSystemStorage;

    /*
     * The virtual IP (VIP) addresses associated with the Exadata VM cluster on Exascale Infrastructure. The Cluster
     * Ready Services (CRS) creates and maintains one VIP address for each node in the Exadata Cloud Service instance to
     * enable failover. If one node fails, the VIP is reassigned to another active node in the cluster. **Note:** For a
     * single-node DB system, this list is empty.
     */
    private List<String> vipIds;

    /*
     * HTTPS link to OCI resources exposed to Azure Customer via Azure Interface.
     */
    private String ociUrl;

    /*
     * iormConfigCache details for Exadata VM cluster on Exascale Infrastructure.
     */
    private ExadataIormConfig iormConfigCache;

    /*
     * Cluster backup subnet ocid
     */
    private String backupSubnetOcid;

    /*
     * Cluster subnet ocid
     */
    private String subnetOcid;

    /**
     * Creates an instance of ExadbVmClusterProperties class.
     */
    public ExadbVmClusterProperties() {
    }

    /**
     * Get the ocid property: ExadbVmCluster ocid.
     * 
     * @return the ocid value.
     */
    public String ocid() {
        return this.ocid;
    }

    /**
     * Get the clusterName property: The cluster name for Exadata VM cluster on Exascale Infrastructure. The cluster
     * name must begin with an alphabetic character, and may contain hyphens (-). Underscores (_) are not permitted. The
     * cluster name can be no longer than 11 characters and is not case sensitive.
     * 
     * @return the clusterName value.
     */
    public String clusterName() {
        return this.clusterName;
    }

    /**
     * Set the clusterName property: The cluster name for Exadata VM cluster on Exascale Infrastructure. The cluster
     * name must begin with an alphabetic character, and may contain hyphens (-). Underscores (_) are not permitted. The
     * cluster name can be no longer than 11 characters and is not case sensitive.
     * 
     * @param clusterName the clusterName value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withClusterName(String clusterName) {
        this.clusterName = clusterName;
        return this;
    }

    /**
     * Get the backupSubnetCidr property: Client OCI backup subnet CIDR, default is 192.168.252.0/22.
     * 
     * @return the backupSubnetCidr value.
     */
    public String backupSubnetCidr() {
        return this.backupSubnetCidr;
    }

    /**
     * Set the backupSubnetCidr property: Client OCI backup subnet CIDR, default is 192.168.252.0/22.
     * 
     * @param backupSubnetCidr the backupSubnetCidr value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withBackupSubnetCidr(String backupSubnetCidr) {
        this.backupSubnetCidr = backupSubnetCidr;
        return this;
    }

    /**
     * Get the nsgUrl property: HTTPS link to OCI Network Security Group exposed to Azure Customer via the Azure
     * Interface.
     * 
     * @return the nsgUrl value.
     */
    public String nsgUrl() {
        return this.nsgUrl;
    }

    /**
     * Get the provisioningState property: Exadata VM cluster on Exascale Infrastructure provisioning state.
     * 
     * @return the provisioningState value.
     */
    public AzureResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the lifecycleState property: CloudVmCluster lifecycle state.
     * 
     * @return the lifecycleState value.
     */
    public ExadbVmClusterLifecycleState lifecycleState() {
        return this.lifecycleState;
    }

    /**
     * Get the vnetId property: VNET for network connectivity.
     * 
     * @return the vnetId value.
     */
    public String vnetId() {
        return this.vnetId;
    }

    /**
     * Set the vnetId property: VNET for network connectivity.
     * 
     * @param vnetId the vnetId value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withVnetId(String vnetId) {
        this.vnetId = vnetId;
        return this;
    }

    /**
     * Get the subnetId property: Client subnet.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: Client subnet.
     * 
     * @param subnetId the subnetId value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the dataCollectionOptions property: Indicates user preferences for the various diagnostic collection options
     * for the VM cluster/Cloud VM cluster/VMBM DBCS.
     * 
     * @return the dataCollectionOptions value.
     */
    public DataCollectionOptions dataCollectionOptions() {
        return this.dataCollectionOptions;
    }

    /**
     * Set the dataCollectionOptions property: Indicates user preferences for the various diagnostic collection options
     * for the VM cluster/Cloud VM cluster/VMBM DBCS.
     * 
     * @param dataCollectionOptions the dataCollectionOptions value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withDataCollectionOptions(DataCollectionOptions dataCollectionOptions) {
        this.dataCollectionOptions = dataCollectionOptions;
        return this;
    }

    /**
     * Get the displayName property: Display Name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display Name.
     * 
     * @param displayName the displayName value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the domain property: A domain name used for the Exadata VM cluster on Exascale Infrastructure.
     * 
     * @return the domain value.
     */
    public String domain() {
        return this.domain;
    }

    /**
     * Set the domain property: A domain name used for the Exadata VM cluster on Exascale Infrastructure.
     * 
     * @param domain the domain value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withDomain(String domain) {
        this.domain = domain;
        return this;
    }

    /**
     * Get the enabledEcpuCount property: The number of ECPUs to enable for an Exadata VM cluster on Exascale
     * Infrastructure.
     * 
     * @return the enabledEcpuCount value.
     */
    public int enabledEcpuCount() {
        return this.enabledEcpuCount;
    }

    /**
     * Set the enabledEcpuCount property: The number of ECPUs to enable for an Exadata VM cluster on Exascale
     * Infrastructure.
     * 
     * @param enabledEcpuCount the enabledEcpuCount value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withEnabledEcpuCount(int enabledEcpuCount) {
        this.enabledEcpuCount = enabledEcpuCount;
        return this;
    }

    /**
     * Get the exascaleDbStorageVaultId property: The Azure Resource ID of the Exadata Database Storage Vault.
     * 
     * @return the exascaleDbStorageVaultId value.
     */
    public String exascaleDbStorageVaultId() {
        return this.exascaleDbStorageVaultId;
    }

    /**
     * Set the exascaleDbStorageVaultId property: The Azure Resource ID of the Exadata Database Storage Vault.
     * 
     * @param exascaleDbStorageVaultId the exascaleDbStorageVaultId value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withExascaleDbStorageVaultId(String exascaleDbStorageVaultId) {
        this.exascaleDbStorageVaultId = exascaleDbStorageVaultId;
        return this;
    }

    /**
     * Get the gridImageOcid property: Grid Setup will be done using this Grid Image OCID. Can be obtained using
     * giMinorVersions API.
     * 
     * @return the gridImageOcid value.
     */
    public String gridImageOcid() {
        return this.gridImageOcid;
    }

    /**
     * Set the gridImageOcid property: Grid Setup will be done using this Grid Image OCID. Can be obtained using
     * giMinorVersions API.
     * 
     * @param gridImageOcid the gridImageOcid value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withGridImageOcid(String gridImageOcid) {
        this.gridImageOcid = gridImageOcid;
        return this;
    }

    /**
     * Get the gridImageType property: The type of Grid Image.
     * 
     * @return the gridImageType value.
     */
    public GridImageType gridImageType() {
        return this.gridImageType;
    }

    /**
     * Get the giVersion property: Oracle Grid Infrastructure (GI) software version.
     * 
     * @return the giVersion value.
     */
    public String giVersion() {
        return this.giVersion;
    }

    /**
     * Get the hostname property: The hostname for the Exadata VM cluster on Exascale Infrastructure.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: The hostname for the Exadata VM cluster on Exascale Infrastructure.
     * 
     * @param hostname the hostname value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the licenseModel property: The Oracle license model that applies to the Exadata VM cluster on Exascale
     * Infrastructure. The default is LICENSE_INCLUDED.
     * 
     * @return the licenseModel value.
     */
    public LicenseModel licenseModel() {
        return this.licenseModel;
    }

    /**
     * Set the licenseModel property: The Oracle license model that applies to the Exadata VM cluster on Exascale
     * Infrastructure. The default is LICENSE_INCLUDED.
     * 
     * @param licenseModel the licenseModel value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withLicenseModel(LicenseModel licenseModel) {
        this.licenseModel = licenseModel;
        return this;
    }

    /**
     * Get the memorySizeInGbs property: The memory that you want to be allocated in GBs. Memory is calculated based on
     * 11 GB per VM core reserved.
     * 
     * @return the memorySizeInGbs value.
     */
    public Integer memorySizeInGbs() {
        return this.memorySizeInGbs;
    }

    /**
     * Get the nodeCount property: The number of nodes in the Exadata VM cluster on Exascale Infrastructure.
     * 
     * @return the nodeCount value.
     */
    public int nodeCount() {
        return this.nodeCount;
    }

    /**
     * Set the nodeCount property: The number of nodes in the Exadata VM cluster on Exascale Infrastructure.
     * 
     * @param nodeCount the nodeCount value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withNodeCount(int nodeCount) {
        this.nodeCount = nodeCount;
        return this;
    }

    /**
     * Get the nsgCidrs property: CIDR blocks for additional NSG ingress rules. The VNET CIDRs used to provision the VM
     * Cluster will be added by default.
     * 
     * @return the nsgCidrs value.
     */
    public List<NsgCidr> nsgCidrs() {
        return this.nsgCidrs;
    }

    /**
     * Set the nsgCidrs property: CIDR blocks for additional NSG ingress rules. The VNET CIDRs used to provision the VM
     * Cluster will be added by default.
     * 
     * @param nsgCidrs the nsgCidrs value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withNsgCidrs(List<NsgCidr> nsgCidrs) {
        this.nsgCidrs = nsgCidrs;
        return this;
    }

    /**
     * Get the zoneOcid property: The OCID of the zone the Exadata VM cluster on Exascale Infrastructure is associated
     * with.
     * 
     * @return the zoneOcid value.
     */
    public String zoneOcid() {
        return this.zoneOcid;
    }

    /**
     * Get the privateZoneOcid property: The OCID of the zone the Exadata VM cluster on Exascale Infrastructure is
     * associated with.
     * 
     * @return the privateZoneOcid value.
     */
    public String privateZoneOcid() {
        return this.privateZoneOcid;
    }

    /**
     * Set the privateZoneOcid property: The OCID of the zone the Exadata VM cluster on Exascale Infrastructure is
     * associated with.
     * 
     * @param privateZoneOcid the privateZoneOcid value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withPrivateZoneOcid(String privateZoneOcid) {
        this.privateZoneOcid = privateZoneOcid;
        return this;
    }

    /**
     * Get the scanListenerPortTcp property: The TCP Single Client Access Name (SCAN) port. The default port is 1521.
     * 
     * @return the scanListenerPortTcp value.
     */
    public Integer scanListenerPortTcp() {
        return this.scanListenerPortTcp;
    }

    /**
     * Set the scanListenerPortTcp property: The TCP Single Client Access Name (SCAN) port. The default port is 1521.
     * 
     * @param scanListenerPortTcp the scanListenerPortTcp value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withScanListenerPortTcp(Integer scanListenerPortTcp) {
        this.scanListenerPortTcp = scanListenerPortTcp;
        return this;
    }

    /**
     * Get the scanListenerPortTcpSsl property: The TCPS Single Client Access Name (SCAN) port. The default port is
     * 2484.
     * 
     * @return the scanListenerPortTcpSsl value.
     */
    public Integer scanListenerPortTcpSsl() {
        return this.scanListenerPortTcpSsl;
    }

    /**
     * Set the scanListenerPortTcpSsl property: The TCPS Single Client Access Name (SCAN) port. The default port is
     * 2484.
     * 
     * @param scanListenerPortTcpSsl the scanListenerPortTcpSsl value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withScanListenerPortTcpSsl(Integer scanListenerPortTcpSsl) {
        this.scanListenerPortTcpSsl = scanListenerPortTcpSsl;
        return this;
    }

    /**
     * Get the listenerPort property: The port number configured for the listener on the Exadata VM cluster on Exascale
     * Infrastructure.
     * 
     * @return the listenerPort value.
     */
    public Integer listenerPort() {
        return this.listenerPort;
    }

    /**
     * Get the shape property: The shape of the Exadata VM cluster on Exascale Infrastructure resource.
     * 
     * @return the shape value.
     */
    public String shape() {
        return this.shape;
    }

    /**
     * Set the shape property: The shape of the Exadata VM cluster on Exascale Infrastructure resource.
     * 
     * @param shape the shape value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withShape(String shape) {
        this.shape = shape;
        return this;
    }

    /**
     * Get the sshPublicKeys property: The public key portion of one or more key pairs used for SSH access to the
     * Exadata VM cluster on Exascale Infrastructure.
     * 
     * @return the sshPublicKeys value.
     */
    public List<String> sshPublicKeys() {
        return this.sshPublicKeys;
    }

    /**
     * Set the sshPublicKeys property: The public key portion of one or more key pairs used for SSH access to the
     * Exadata VM cluster on Exascale Infrastructure.
     * 
     * @param sshPublicKeys the sshPublicKeys value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withSshPublicKeys(List<String> sshPublicKeys) {
        this.sshPublicKeys = sshPublicKeys;
        return this;
    }

    /**
     * Get the systemVersion property: Operating system version of the image.
     * 
     * @return the systemVersion value.
     */
    public String systemVersion() {
        return this.systemVersion;
    }

    /**
     * Set the systemVersion property: Operating system version of the image.
     * 
     * @param systemVersion the systemVersion value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withSystemVersion(String systemVersion) {
        this.systemVersion = systemVersion;
        return this;
    }

    /**
     * Get the timeZone property: The time zone of the Exadata VM cluster on Exascale Infrastructure. For details, see
     * [Exadata Infrastructure Time Zones](/Content/Database/References/timezones.htm).
     * 
     * @return the timeZone value.
     */
    public String timeZone() {
        return this.timeZone;
    }

    /**
     * Set the timeZone property: The time zone of the Exadata VM cluster on Exascale Infrastructure. For details, see
     * [Exadata Infrastructure Time Zones](/Content/Database/References/timezones.htm).
     * 
     * @param timeZone the timeZone value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }

    /**
     * Get the totalEcpuCount property: The number of Total ECPUs for an Exadata VM cluster on Exascale Infrastructure.
     * 
     * @return the totalEcpuCount value.
     */
    public int totalEcpuCount() {
        return this.totalEcpuCount;
    }

    /**
     * Set the totalEcpuCount property: The number of Total ECPUs for an Exadata VM cluster on Exascale Infrastructure.
     * 
     * @param totalEcpuCount the totalEcpuCount value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withTotalEcpuCount(int totalEcpuCount) {
        this.totalEcpuCount = totalEcpuCount;
        return this;
    }

    /**
     * Get the vmFileSystemStorage property: Filesystem storage details.
     * 
     * @return the vmFileSystemStorage value.
     */
    public ExadbVmClusterStorageDetails vmFileSystemStorage() {
        return this.vmFileSystemStorage;
    }

    /**
     * Set the vmFileSystemStorage property: Filesystem storage details.
     * 
     * @param vmFileSystemStorage the vmFileSystemStorage value to set.
     * @return the ExadbVmClusterProperties object itself.
     */
    public ExadbVmClusterProperties withVmFileSystemStorage(ExadbVmClusterStorageDetails vmFileSystemStorage) {
        this.vmFileSystemStorage = vmFileSystemStorage;
        return this;
    }

    /**
     * Get the lifecycleDetails property: Additional information about the current lifecycle state.
     * 
     * @return the lifecycleDetails value.
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }

    /**
     * Get the scanDnsName property: The FQDN of the DNS record for the SCAN IP addresses that are associated with the
     * Exadata VM cluster on Exascale Infrastructure.
     * 
     * @return the scanDnsName value.
     */
    public String scanDnsName() {
        return this.scanDnsName;
    }

    /**
     * Get the scanIpIds property: The Single Client Access Name (SCAN) IP addresses associated with the Exadata VM
     * cluster on Exascale Infrastructure. SCAN IP addresses are typically used for load balancing and are not assigned
     * to any interface. Oracle Clusterware directs the requests to the appropriate nodes in the cluster. **Note:** For
     * a single-node DB system, this list is empty.
     * 
     * @return the scanIpIds value.
     */
    public List<String> scanIpIds() {
        return this.scanIpIds;
    }

    /**
     * Get the scanDnsRecordId property: The OCID of the DNS record for the SCAN IP addresses that are associated with
     * the Exadata VM cluster on Exascale Infrastructure.
     * 
     * @return the scanDnsRecordId value.
     */
    public String scanDnsRecordId() {
        return this.scanDnsRecordId;
    }

    /**
     * Get the snapshotFileSystemStorage property: Snapshot filesystem storage details.
     * 
     * @return the snapshotFileSystemStorage value.
     */
    public ExadbVmClusterStorageDetails snapshotFileSystemStorage() {
        return this.snapshotFileSystemStorage;
    }

    /**
     * Get the totalFileSystemStorage property: Total file system storage details.
     * 
     * @return the totalFileSystemStorage value.
     */
    public ExadbVmClusterStorageDetails totalFileSystemStorage() {
        return this.totalFileSystemStorage;
    }

    /**
     * Get the vipIds property: The virtual IP (VIP) addresses associated with the Exadata VM cluster on Exascale
     * Infrastructure. The Cluster Ready Services (CRS) creates and maintains one VIP address for each node in the
     * Exadata Cloud Service instance to enable failover. If one node fails, the VIP is reassigned to another active
     * node in the cluster. **Note:** For a single-node DB system, this list is empty.
     * 
     * @return the vipIds value.
     */
    public List<String> vipIds() {
        return this.vipIds;
    }

    /**
     * Get the ociUrl property: HTTPS link to OCI resources exposed to Azure Customer via Azure Interface.
     * 
     * @return the ociUrl value.
     */
    public String ociUrl() {
        return this.ociUrl;
    }

    /**
     * Get the iormConfigCache property: iormConfigCache details for Exadata VM cluster on Exascale Infrastructure.
     * 
     * @return the iormConfigCache value.
     */
    public ExadataIormConfig iormConfigCache() {
        return this.iormConfigCache;
    }

    /**
     * Get the backupSubnetOcid property: Cluster backup subnet ocid.
     * 
     * @return the backupSubnetOcid value.
     */
    public String backupSubnetOcid() {
        return this.backupSubnetOcid;
    }

    /**
     * Get the subnetOcid property: Cluster subnet ocid.
     * 
     * @return the subnetOcid value.
     */
    public String subnetOcid() {
        return this.subnetOcid;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (vnetId() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property vnetId in model ExadbVmClusterProperties"));
        }
        if (subnetId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property subnetId in model ExadbVmClusterProperties"));
        }
        if (dataCollectionOptions() != null) {
            dataCollectionOptions().validate();
        }
        if (displayName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property displayName in model ExadbVmClusterProperties"));
        }
        if (exascaleDbStorageVaultId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property exascaleDbStorageVaultId in model ExadbVmClusterProperties"));
        }
        if (hostname() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property hostname in model ExadbVmClusterProperties"));
        }
        if (nsgCidrs() != null) {
            nsgCidrs().forEach(e -> e.validate());
        }
        if (shape() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property shape in model ExadbVmClusterProperties"));
        }
        if (sshPublicKeys() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sshPublicKeys in model ExadbVmClusterProperties"));
        }
        if (vmFileSystemStorage() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property vmFileSystemStorage in model ExadbVmClusterProperties"));
        } else {
            vmFileSystemStorage().validate();
        }
        if (snapshotFileSystemStorage() != null) {
            snapshotFileSystemStorage().validate();
        }
        if (totalFileSystemStorage() != null) {
            totalFileSystemStorage().validate();
        }
        if (iormConfigCache() != null) {
            iormConfigCache().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExadbVmClusterProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("vnetId", this.vnetId);
        jsonWriter.writeStringField("subnetId", this.subnetId);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeIntField("enabledEcpuCount", this.enabledEcpuCount);
        jsonWriter.writeStringField("exascaleDbStorageVaultId", this.exascaleDbStorageVaultId);
        jsonWriter.writeStringField("hostname", this.hostname);
        jsonWriter.writeIntField("nodeCount", this.nodeCount);
        jsonWriter.writeStringField("shape", this.shape);
        jsonWriter.writeArrayField("sshPublicKeys", this.sshPublicKeys,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeIntField("totalEcpuCount", this.totalEcpuCount);
        jsonWriter.writeJsonField("vmFileSystemStorage", this.vmFileSystemStorage);
        jsonWriter.writeStringField("clusterName", this.clusterName);
        jsonWriter.writeStringField("backupSubnetCidr", this.backupSubnetCidr);
        jsonWriter.writeJsonField("dataCollectionOptions", this.dataCollectionOptions);
        jsonWriter.writeStringField("domain", this.domain);
        jsonWriter.writeStringField("gridImageOcid", this.gridImageOcid);
        jsonWriter.writeStringField("licenseModel", this.licenseModel == null ? null : this.licenseModel.toString());
        jsonWriter.writeArrayField("nsgCidrs", this.nsgCidrs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("privateZoneOcid", this.privateZoneOcid);
        jsonWriter.writeNumberField("scanListenerPortTcp", this.scanListenerPortTcp);
        jsonWriter.writeNumberField("scanListenerPortTcpSsl", this.scanListenerPortTcpSsl);
        jsonWriter.writeStringField("systemVersion", this.systemVersion);
        jsonWriter.writeStringField("timeZone", this.timeZone);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExadbVmClusterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExadbVmClusterProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExadbVmClusterProperties.
     */
    public static ExadbVmClusterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExadbVmClusterProperties deserializedExadbVmClusterProperties = new ExadbVmClusterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vnetId".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.vnetId = reader.getString();
                } else if ("subnetId".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.subnetId = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.displayName = reader.getString();
                } else if ("enabledEcpuCount".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.enabledEcpuCount = reader.getInt();
                } else if ("exascaleDbStorageVaultId".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.exascaleDbStorageVaultId = reader.getString();
                } else if ("hostname".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.hostname = reader.getString();
                } else if ("nodeCount".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.nodeCount = reader.getInt();
                } else if ("shape".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.shape = reader.getString();
                } else if ("sshPublicKeys".equals(fieldName)) {
                    List<String> sshPublicKeys = reader.readArray(reader1 -> reader1.getString());
                    deserializedExadbVmClusterProperties.sshPublicKeys = sshPublicKeys;
                } else if ("totalEcpuCount".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.totalEcpuCount = reader.getInt();
                } else if ("vmFileSystemStorage".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.vmFileSystemStorage
                        = ExadbVmClusterStorageDetails.fromJson(reader);
                } else if ("ocid".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.ocid = reader.getString();
                } else if ("clusterName".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.clusterName = reader.getString();
                } else if ("backupSubnetCidr".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.backupSubnetCidr = reader.getString();
                } else if ("nsgUrl".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.nsgUrl = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.provisioningState
                        = AzureResourceProvisioningState.fromString(reader.getString());
                } else if ("lifecycleState".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.lifecycleState
                        = ExadbVmClusterLifecycleState.fromString(reader.getString());
                } else if ("dataCollectionOptions".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.dataCollectionOptions = DataCollectionOptions.fromJson(reader);
                } else if ("domain".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.domain = reader.getString();
                } else if ("gridImageOcid".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.gridImageOcid = reader.getString();
                } else if ("gridImageType".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.gridImageType = GridImageType.fromString(reader.getString());
                } else if ("giVersion".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.giVersion = reader.getString();
                } else if ("licenseModel".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.licenseModel = LicenseModel.fromString(reader.getString());
                } else if ("memorySizeInGbs".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.memorySizeInGbs = reader.getNullable(JsonReader::getInt);
                } else if ("nsgCidrs".equals(fieldName)) {
                    List<NsgCidr> nsgCidrs = reader.readArray(reader1 -> NsgCidr.fromJson(reader1));
                    deserializedExadbVmClusterProperties.nsgCidrs = nsgCidrs;
                } else if ("zoneOcid".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.zoneOcid = reader.getString();
                } else if ("privateZoneOcid".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.privateZoneOcid = reader.getString();
                } else if ("scanListenerPortTcp".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.scanListenerPortTcp = reader.getNullable(JsonReader::getInt);
                } else if ("scanListenerPortTcpSsl".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.scanListenerPortTcpSsl
                        = reader.getNullable(JsonReader::getInt);
                } else if ("listenerPort".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.listenerPort = reader.getNullable(JsonReader::getInt);
                } else if ("systemVersion".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.systemVersion = reader.getString();
                } else if ("timeZone".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.timeZone = reader.getString();
                } else if ("lifecycleDetails".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.lifecycleDetails = reader.getString();
                } else if ("scanDnsName".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.scanDnsName = reader.getString();
                } else if ("scanIpIds".equals(fieldName)) {
                    List<String> scanIpIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedExadbVmClusterProperties.scanIpIds = scanIpIds;
                } else if ("scanDnsRecordId".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.scanDnsRecordId = reader.getString();
                } else if ("snapshotFileSystemStorage".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.snapshotFileSystemStorage
                        = ExadbVmClusterStorageDetails.fromJson(reader);
                } else if ("totalFileSystemStorage".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.totalFileSystemStorage
                        = ExadbVmClusterStorageDetails.fromJson(reader);
                } else if ("vipIds".equals(fieldName)) {
                    List<String> vipIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedExadbVmClusterProperties.vipIds = vipIds;
                } else if ("ociUrl".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.ociUrl = reader.getString();
                } else if ("iormConfigCache".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.iormConfigCache = ExadataIormConfig.fromJson(reader);
                } else if ("backupSubnetOcid".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.backupSubnetOcid = reader.getString();
                } else if ("subnetOcid".equals(fieldName)) {
                    deserializedExadbVmClusterProperties.subnetOcid = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExadbVmClusterProperties;
        });
    }
}
