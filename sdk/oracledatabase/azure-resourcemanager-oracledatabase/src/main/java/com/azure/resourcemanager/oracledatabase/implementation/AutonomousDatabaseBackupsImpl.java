// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.oracledatabase.fluent.AutonomousDatabaseBackupsClient;
import com.azure.resourcemanager.oracledatabase.fluent.models.AutonomousDatabaseBackupInner;
import com.azure.resourcemanager.oracledatabase.models.AutonomousDatabaseBackup;
import com.azure.resourcemanager.oracledatabase.models.AutonomousDatabaseBackups;

public final class AutonomousDatabaseBackupsImpl implements AutonomousDatabaseBackups {
    private static final ClientLogger LOGGER = new ClientLogger(AutonomousDatabaseBackupsImpl.class);

    private final AutonomousDatabaseBackupsClient innerClient;

    private final com.azure.resourcemanager.oracledatabase.OracleDatabaseManager serviceManager;

    public AutonomousDatabaseBackupsImpl(AutonomousDatabaseBackupsClient innerClient,
        com.azure.resourcemanager.oracledatabase.OracleDatabaseManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AutonomousDatabaseBackup> listByAutonomousDatabase(String resourceGroupName,
        String autonomousdatabasename) {
        PagedIterable<AutonomousDatabaseBackupInner> inner
            = this.serviceClient().listByAutonomousDatabase(resourceGroupName, autonomousdatabasename);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AutonomousDatabaseBackupImpl(inner1, this.manager()));
    }

    public PagedIterable<AutonomousDatabaseBackup> listByAutonomousDatabase(String resourceGroupName,
        String autonomousdatabasename, Context context) {
        PagedIterable<AutonomousDatabaseBackupInner> inner
            = this.serviceClient().listByAutonomousDatabase(resourceGroupName, autonomousdatabasename, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AutonomousDatabaseBackupImpl(inner1, this.manager()));
    }

    public Response<AutonomousDatabaseBackup> getWithResponse(String resourceGroupName, String autonomousdatabasename,
        String adbbackupid, Context context) {
        Response<AutonomousDatabaseBackupInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, autonomousdatabasename, adbbackupid, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AutonomousDatabaseBackupImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AutonomousDatabaseBackup get(String resourceGroupName, String autonomousdatabasename, String adbbackupid) {
        AutonomousDatabaseBackupInner inner
            = this.serviceClient().get(resourceGroupName, autonomousdatabasename, adbbackupid);
        if (inner != null) {
            return new AutonomousDatabaseBackupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String autonomousdatabasename, String adbbackupid) {
        this.serviceClient().delete(resourceGroupName, autonomousdatabasename, adbbackupid);
    }

    public void delete(String resourceGroupName, String autonomousdatabasename, String adbbackupid, Context context) {
        this.serviceClient().delete(resourceGroupName, autonomousdatabasename, adbbackupid, context);
    }

    public AutonomousDatabaseBackup getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String autonomousdatabasename = ResourceManagerUtils.getValueFromIdByName(id, "autonomousDatabases");
        if (autonomousdatabasename == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'autonomousDatabases'.", id)));
        }
        String adbbackupid = ResourceManagerUtils.getValueFromIdByName(id, "autonomousDatabaseBackups");
        if (adbbackupid == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'autonomousDatabaseBackups'.", id)));
        }
        return this.getWithResponse(resourceGroupName, autonomousdatabasename, adbbackupid, Context.NONE).getValue();
    }

    public Response<AutonomousDatabaseBackup> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String autonomousdatabasename = ResourceManagerUtils.getValueFromIdByName(id, "autonomousDatabases");
        if (autonomousdatabasename == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'autonomousDatabases'.", id)));
        }
        String adbbackupid = ResourceManagerUtils.getValueFromIdByName(id, "autonomousDatabaseBackups");
        if (adbbackupid == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'autonomousDatabaseBackups'.", id)));
        }
        return this.getWithResponse(resourceGroupName, autonomousdatabasename, adbbackupid, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String autonomousdatabasename = ResourceManagerUtils.getValueFromIdByName(id, "autonomousDatabases");
        if (autonomousdatabasename == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'autonomousDatabases'.", id)));
        }
        String adbbackupid = ResourceManagerUtils.getValueFromIdByName(id, "autonomousDatabaseBackups");
        if (adbbackupid == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'autonomousDatabaseBackups'.", id)));
        }
        this.delete(resourceGroupName, autonomousdatabasename, adbbackupid, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String autonomousdatabasename = ResourceManagerUtils.getValueFromIdByName(id, "autonomousDatabases");
        if (autonomousdatabasename == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'autonomousDatabases'.", id)));
        }
        String adbbackupid = ResourceManagerUtils.getValueFromIdByName(id, "autonomousDatabaseBackups");
        if (adbbackupid == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'autonomousDatabaseBackups'.", id)));
        }
        this.delete(resourceGroupName, autonomousdatabasename, adbbackupid, context);
    }

    private AutonomousDatabaseBackupsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.oracledatabase.OracleDatabaseManager manager() {
        return this.serviceManager;
    }

    public AutonomousDatabaseBackupImpl define(String name) {
        return new AutonomousDatabaseBackupImpl(name, this.manager());
    }
}
