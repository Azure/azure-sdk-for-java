// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AutonomousDatabaseNationalCharacterSet resource model.
 */
@Immutable
public final class AutonomousDatabaseNationalCharacterSetProperties
    implements JsonSerializable<AutonomousDatabaseNationalCharacterSetProperties> {
    /*
     * The Oracle Autonomous Database supported national character sets.
     */
    private String characterSet;

    /**
     * Creates an instance of AutonomousDatabaseNationalCharacterSetProperties class.
     */
    private AutonomousDatabaseNationalCharacterSetProperties() {
    }

    /**
     * Get the characterSet property: The Oracle Autonomous Database supported national character sets.
     * 
     * @return the characterSet value.
     */
    public String characterSet() {
        return this.characterSet;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (characterSet() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property characterSet in model AutonomousDatabaseNationalCharacterSetProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AutonomousDatabaseNationalCharacterSetProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("characterSet", this.characterSet);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutonomousDatabaseNationalCharacterSetProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutonomousDatabaseNationalCharacterSetProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AutonomousDatabaseNationalCharacterSetProperties.
     */
    public static AutonomousDatabaseNationalCharacterSetProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutonomousDatabaseNationalCharacterSetProperties deserializedAutonomousDatabaseNationalCharacterSetProperties
                = new AutonomousDatabaseNationalCharacterSetProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("characterSet".equals(fieldName)) {
                    deserializedAutonomousDatabaseNationalCharacterSetProperties.characterSet = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutonomousDatabaseNationalCharacterSetProperties;
        });
    }
}
