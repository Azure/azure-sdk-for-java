// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.oracledatabase.fluent.DbServersClient;
import com.azure.resourcemanager.oracledatabase.fluent.models.DbServerInner;
import com.azure.resourcemanager.oracledatabase.models.DbServerListResult;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DbServersClient.
 */
public final class DbServersClientImpl implements DbServersClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DbServersService service;

    /**
     * The service client containing this operation class.
     */
    private final OracleDatabaseResourceManagerImpl client;

    /**
     * Initializes an instance of DbServersClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DbServersClientImpl(OracleDatabaseResourceManagerImpl client) {
        this.service
            = RestProxy.create(DbServersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for OracleDatabaseResourceManagerDbServers to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "OracleDatabaseResour")
    public interface DbServersService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/cloudExadataInfrastructures/{cloudexadatainfrastructurename}/dbServers")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DbServerListResult>> listByCloudExadataInfrastructure(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("cloudexadatainfrastructurename") String cloudexadatainfrastructurename,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/cloudExadataInfrastructures/{cloudexadatainfrastructurename}/dbServers/{dbserverocid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DbServerInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("cloudexadatainfrastructurename") String cloudexadatainfrastructurename,
            @PathParam("dbserverocid") String dbserverocid, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DbServerListResult>> listByCloudExadataInfrastructureNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List DbServer resources by CloudExadataInfrastructure.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudexadatainfrastructurename CloudExadataInfrastructure name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbServer list operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DbServerInner>> listByCloudExadataInfrastructureSinglePageAsync(String resourceGroupName,
        String cloudexadatainfrastructurename) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudexadatainfrastructurename == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter cloudexadatainfrastructurename is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByCloudExadataInfrastructure(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName,
                cloudexadatainfrastructurename, accept, context))
            .<PagedResponse<DbServerInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List DbServer resources by CloudExadataInfrastructure.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudexadatainfrastructurename CloudExadataInfrastructure name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbServer list operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DbServerInner>> listByCloudExadataInfrastructureSinglePageAsync(String resourceGroupName,
        String cloudexadatainfrastructurename, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudexadatainfrastructurename == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter cloudexadatainfrastructurename is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByCloudExadataInfrastructure(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, cloudexadatainfrastructurename, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List DbServer resources by CloudExadataInfrastructure.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudexadatainfrastructurename CloudExadataInfrastructure name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbServer list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DbServerInner> listByCloudExadataInfrastructureAsync(String resourceGroupName,
        String cloudexadatainfrastructurename) {
        return new PagedFlux<>(
            () -> listByCloudExadataInfrastructureSinglePageAsync(resourceGroupName, cloudexadatainfrastructurename),
            nextLink -> listByCloudExadataInfrastructureNextSinglePageAsync(nextLink));
    }

    /**
     * List DbServer resources by CloudExadataInfrastructure.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudexadatainfrastructurename CloudExadataInfrastructure name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbServer list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DbServerInner> listByCloudExadataInfrastructureAsync(String resourceGroupName,
        String cloudexadatainfrastructurename, Context context) {
        return new PagedFlux<>(() -> listByCloudExadataInfrastructureSinglePageAsync(resourceGroupName,
            cloudexadatainfrastructurename, context),
            nextLink -> listByCloudExadataInfrastructureNextSinglePageAsync(nextLink, context));
    }

    /**
     * List DbServer resources by CloudExadataInfrastructure.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudexadatainfrastructurename CloudExadataInfrastructure name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbServer list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DbServerInner> listByCloudExadataInfrastructure(String resourceGroupName,
        String cloudexadatainfrastructurename) {
        return new PagedIterable<>(
            listByCloudExadataInfrastructureAsync(resourceGroupName, cloudexadatainfrastructurename));
    }

    /**
     * List DbServer resources by CloudExadataInfrastructure.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudexadatainfrastructurename CloudExadataInfrastructure name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbServer list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DbServerInner> listByCloudExadataInfrastructure(String resourceGroupName,
        String cloudexadatainfrastructurename, Context context) {
        return new PagedIterable<>(
            listByCloudExadataInfrastructureAsync(resourceGroupName, cloudexadatainfrastructurename, context));
    }

    /**
     * Get a DbServer.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudexadatainfrastructurename CloudExadataInfrastructure name.
     * @param dbserverocid DbServer OCID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DbServer along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DbServerInner>> getWithResponseAsync(String resourceGroupName,
        String cloudexadatainfrastructurename, String dbserverocid) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudexadatainfrastructurename == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter cloudexadatainfrastructurename is required and cannot be null."));
        }
        if (dbserverocid == null) {
            return Mono.error(new IllegalArgumentException("Parameter dbserverocid is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, cloudexadatainfrastructurename, dbserverocid,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a DbServer.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudexadatainfrastructurename CloudExadataInfrastructure name.
     * @param dbserverocid DbServer OCID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DbServer along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DbServerInner>> getWithResponseAsync(String resourceGroupName,
        String cloudexadatainfrastructurename, String dbserverocid, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudexadatainfrastructurename == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter cloudexadatainfrastructurename is required and cannot be null."));
        }
        if (dbserverocid == null) {
            return Mono.error(new IllegalArgumentException("Parameter dbserverocid is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, cloudexadatainfrastructurename, dbserverocid, accept, context);
    }

    /**
     * Get a DbServer.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudexadatainfrastructurename CloudExadataInfrastructure name.
     * @param dbserverocid DbServer OCID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DbServer on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DbServerInner> getAsync(String resourceGroupName, String cloudexadatainfrastructurename,
        String dbserverocid) {
        return getWithResponseAsync(resourceGroupName, cloudexadatainfrastructurename, dbserverocid)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a DbServer.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudexadatainfrastructurename CloudExadataInfrastructure name.
     * @param dbserverocid DbServer OCID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DbServer along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DbServerInner> getWithResponse(String resourceGroupName, String cloudexadatainfrastructurename,
        String dbserverocid, Context context) {
        return getWithResponseAsync(resourceGroupName, cloudexadatainfrastructurename, dbserverocid, context).block();
    }

    /**
     * Get a DbServer.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudexadatainfrastructurename CloudExadataInfrastructure name.
     * @param dbserverocid DbServer OCID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DbServer.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DbServerInner get(String resourceGroupName, String cloudexadatainfrastructurename, String dbserverocid) {
        return getWithResponse(resourceGroupName, cloudexadatainfrastructurename, dbserverocid, Context.NONE)
            .getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbServer list operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DbServerInner>> listByCloudExadataInfrastructureNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByCloudExadataInfrastructureNext(nextLink, this.client.getEndpoint(),
                accept, context))
            .<PagedResponse<DbServerInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbServer list operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DbServerInner>> listByCloudExadataInfrastructureNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByCloudExadataInfrastructureNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
