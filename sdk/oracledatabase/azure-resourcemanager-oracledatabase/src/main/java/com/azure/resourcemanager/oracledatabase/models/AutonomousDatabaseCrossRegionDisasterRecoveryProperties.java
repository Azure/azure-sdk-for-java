// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Autonomous Database Cross Region Disaster Recovery resource model.
 */
@Fluent
public final class AutonomousDatabaseCrossRegionDisasterRecoveryProperties extends AutonomousDatabaseBaseProperties {
    /*
     * Database type to be created.
     */
    private DataBaseType dataBaseType = DataBaseType.CROSS_REGION_DISASTER_RECOVERY;

    /*
     * The source of the database.
     */
    private final SourceType source = SourceType.CROSS_REGION_DISASTER_RECOVERY;

    /*
     * The Azure ID of the source Autonomous Database that will be used to create a new peer database for the DR
     * association.
     */
    private String sourceId;

    /*
     * The name of the region where source Autonomous Database exists.
     */
    private String sourceLocation;

    /*
     * The source database ocid
     */
    private String sourceOcid;

    /*
     * Indicates the cross-region disaster recovery (DR) type of the standby Autonomous Database Serverless instance.
     * Autonomous Data Guard (ADG) DR type provides business critical DR with a faster recovery time objective (RTO)
     * during failover or switchover. Backup-based DR type provides lower cost DR with a slower RTO during failover or
     * switchover.
     */
    private DisasterRecoveryType remoteDisasterRecoveryType;

    /*
     * If true, 7 days worth of backups are replicated across regions for Cross-Region ADB or Backup-Based DR between
     * Primary and Standby. If false, the backups taken on the Primary are not replicated to the Standby database.
     */
    private Boolean isReplicateAutomaticBackups;

    /**
     * Creates an instance of AutonomousDatabaseCrossRegionDisasterRecoveryProperties class.
     */
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties() {
    }

    /**
     * Get the dataBaseType property: Database type to be created.
     * 
     * @return the dataBaseType value.
     */
    @Override
    public DataBaseType dataBaseType() {
        return this.dataBaseType;
    }

    /**
     * Get the source property: The source of the database.
     * 
     * @return the source value.
     */
    public SourceType source() {
        return this.source;
    }

    /**
     * Get the sourceId property: The Azure ID of the source Autonomous Database that will be used to create a new peer
     * database for the DR association.
     * 
     * @return the sourceId value.
     */
    public String sourceId() {
        return this.sourceId;
    }

    /**
     * Set the sourceId property: The Azure ID of the source Autonomous Database that will be used to create a new peer
     * database for the DR association.
     * 
     * @param sourceId the sourceId value to set.
     * @return the AutonomousDatabaseCrossRegionDisasterRecoveryProperties object itself.
     */
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties withSourceId(String sourceId) {
        this.sourceId = sourceId;
        return this;
    }

    /**
     * Get the sourceLocation property: The name of the region where source Autonomous Database exists.
     * 
     * @return the sourceLocation value.
     */
    public String sourceLocation() {
        return this.sourceLocation;
    }

    /**
     * Set the sourceLocation property: The name of the region where source Autonomous Database exists.
     * 
     * @param sourceLocation the sourceLocation value to set.
     * @return the AutonomousDatabaseCrossRegionDisasterRecoveryProperties object itself.
     */
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties withSourceLocation(String sourceLocation) {
        this.sourceLocation = sourceLocation;
        return this;
    }

    /**
     * Get the sourceOcid property: The source database ocid.
     * 
     * @return the sourceOcid value.
     */
    public String sourceOcid() {
        return this.sourceOcid;
    }

    /**
     * Set the sourceOcid property: The source database ocid.
     * 
     * @param sourceOcid the sourceOcid value to set.
     * @return the AutonomousDatabaseCrossRegionDisasterRecoveryProperties object itself.
     */
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties withSourceOcid(String sourceOcid) {
        this.sourceOcid = sourceOcid;
        return this;
    }

    /**
     * Get the remoteDisasterRecoveryType property: Indicates the cross-region disaster recovery (DR) type of the
     * standby Autonomous Database Serverless instance. Autonomous Data Guard (ADG) DR type provides business critical
     * DR with a faster recovery time objective (RTO) during failover or switchover. Backup-based DR type provides lower
     * cost DR with a slower RTO during failover or switchover.
     * 
     * @return the remoteDisasterRecoveryType value.
     */
    public DisasterRecoveryType remoteDisasterRecoveryType() {
        return this.remoteDisasterRecoveryType;
    }

    /**
     * Set the remoteDisasterRecoveryType property: Indicates the cross-region disaster recovery (DR) type of the
     * standby Autonomous Database Serverless instance. Autonomous Data Guard (ADG) DR type provides business critical
     * DR with a faster recovery time objective (RTO) during failover or switchover. Backup-based DR type provides lower
     * cost DR with a slower RTO during failover or switchover.
     * 
     * @param remoteDisasterRecoveryType the remoteDisasterRecoveryType value to set.
     * @return the AutonomousDatabaseCrossRegionDisasterRecoveryProperties object itself.
     */
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties
        withRemoteDisasterRecoveryType(DisasterRecoveryType remoteDisasterRecoveryType) {
        this.remoteDisasterRecoveryType = remoteDisasterRecoveryType;
        return this;
    }

    /**
     * Get the isReplicateAutomaticBackups property: If true, 7 days worth of backups are replicated across regions for
     * Cross-Region ADB or Backup-Based DR between Primary and Standby. If false, the backups taken on the Primary are
     * not replicated to the Standby database.
     * 
     * @return the isReplicateAutomaticBackups value.
     */
    public Boolean isReplicateAutomaticBackups() {
        return this.isReplicateAutomaticBackups;
    }

    /**
     * Set the isReplicateAutomaticBackups property: If true, 7 days worth of backups are replicated across regions for
     * Cross-Region ADB or Backup-Based DR between Primary and Standby. If false, the backups taken on the Primary are
     * not replicated to the Standby database.
     * 
     * @param isReplicateAutomaticBackups the isReplicateAutomaticBackups value to set.
     * @return the AutonomousDatabaseCrossRegionDisasterRecoveryProperties object itself.
     */
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties
        withIsReplicateAutomaticBackups(Boolean isReplicateAutomaticBackups) {
        this.isReplicateAutomaticBackups = isReplicateAutomaticBackups;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties withAdminPassword(String adminPassword) {
        super.withAdminPassword(adminPassword);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties
        withAutonomousMaintenanceScheduleType(AutonomousMaintenanceScheduleType autonomousMaintenanceScheduleType) {
        super.withAutonomousMaintenanceScheduleType(autonomousMaintenanceScheduleType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties withCharacterSet(String characterSet) {
        super.withCharacterSet(characterSet);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties withComputeCount(Double computeCount) {
        super.withComputeCount(computeCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties withComputeModel(ComputeModel computeModel) {
        super.withComputeModel(computeModel);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties withCpuCoreCount(Integer cpuCoreCount) {
        super.withCpuCoreCount(cpuCoreCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties
        withCustomerContacts(List<CustomerContact> customerContacts) {
        super.withCustomerContacts(customerContacts);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties
        withDataStorageSizeInTbs(Integer dataStorageSizeInTbs) {
        super.withDataStorageSizeInTbs(dataStorageSizeInTbs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties
        withDataStorageSizeInGbs(Integer dataStorageSizeInGbs) {
        super.withDataStorageSizeInGbs(dataStorageSizeInGbs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties withDbVersion(String dbVersion) {
        super.withDbVersion(dbVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties withDbWorkload(WorkloadType dbWorkload) {
        super.withDbWorkload(dbWorkload);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties withDisplayName(String displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties
        withIsAutoScalingEnabled(Boolean isAutoScalingEnabled) {
        super.withIsAutoScalingEnabled(isAutoScalingEnabled);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties
        withIsAutoScalingForStorageEnabled(Boolean isAutoScalingForStorageEnabled) {
        super.withIsAutoScalingForStorageEnabled(isAutoScalingForStorageEnabled);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties withPeerDbId(String peerDbId) {
        super.withPeerDbId(peerDbId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties
        withIsLocalDataGuardEnabled(Boolean isLocalDataGuardEnabled) {
        super.withIsLocalDataGuardEnabled(isLocalDataGuardEnabled);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties
        withIsMtlsConnectionRequired(Boolean isMtlsConnectionRequired) {
        super.withIsMtlsConnectionRequired(isMtlsConnectionRequired);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties
        withIsPreviewVersionWithServiceTermsAccepted(Boolean isPreviewVersionWithServiceTermsAccepted) {
        super.withIsPreviewVersionWithServiceTermsAccepted(isPreviewVersionWithServiceTermsAccepted);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties withLicenseModel(LicenseModel licenseModel) {
        super.withLicenseModel(licenseModel);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties withNcharacterSet(String ncharacterSet) {
        super.withNcharacterSet(ncharacterSet);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties
        withScheduledOperations(ScheduledOperationsType scheduledOperations) {
        super.withScheduledOperations(scheduledOperations);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties withPrivateEndpointIp(String privateEndpointIp) {
        super.withPrivateEndpointIp(privateEndpointIp);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties
        withPrivateEndpointLabel(String privateEndpointLabel) {
        super.withPrivateEndpointLabel(privateEndpointLabel);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties withSubnetId(String subnetId) {
        super.withSubnetId(subnetId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties withVnetId(String vnetId) {
        super.withVnetId(vnetId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties
        withDatabaseEdition(DatabaseEditionType databaseEdition) {
        super.withDatabaseEdition(databaseEdition);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties
        withAutonomousDatabaseId(String autonomousDatabaseId) {
        super.withAutonomousDatabaseId(autonomousDatabaseId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties
        withLongTermBackupSchedule(LongTermBackUpScheduleDetails longTermBackupSchedule) {
        super.withLongTermBackupSchedule(longTermBackupSchedule);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties
        withLocalAdgAutoFailoverMaxDataLossLimit(Integer localAdgAutoFailoverMaxDataLossLimit) {
        super.withLocalAdgAutoFailoverMaxDataLossLimit(localAdgAutoFailoverMaxDataLossLimit);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties withOpenMode(OpenModeType openMode) {
        super.withOpenMode(openMode);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties
        withPermissionLevel(PermissionLevelType permissionLevel) {
        super.withPermissionLevel(permissionLevel);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties withRole(RoleType role) {
        super.withRole(role);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties
        withBackupRetentionPeriodInDays(Integer backupRetentionPeriodInDays) {
        super.withBackupRetentionPeriodInDays(backupRetentionPeriodInDays);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutonomousDatabaseCrossRegionDisasterRecoveryProperties withWhitelistedIps(List<String> whitelistedIps) {
        super.withWhitelistedIps(whitelistedIps);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (sourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceId in model AutonomousDatabaseCrossRegionDisasterRecoveryProperties"));
        }
        if (remoteDisasterRecoveryType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property remoteDisasterRecoveryType in model AutonomousDatabaseCrossRegionDisasterRecoveryProperties"));
        }
        if (customerContacts() != null) {
            customerContacts().forEach(e -> e.validate());
        }
        if (remoteDisasterRecoveryConfiguration() != null) {
            remoteDisasterRecoveryConfiguration().validate();
        }
        if (localStandbyDb() != null) {
            localStandbyDb().validate();
        }
        if (scheduledOperations() != null) {
            scheduledOperations().validate();
        }
        if (apexDetails() != null) {
            apexDetails().validate();
        }
        if (connectionStrings() != null) {
            connectionStrings().validate();
        }
        if (connectionUrls() != null) {
            connectionUrls().validate();
        }
        if (longTermBackupSchedule() != null) {
            longTermBackupSchedule().validate();
        }
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(AutonomousDatabaseCrossRegionDisasterRecoveryProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("adminPassword", adminPassword());
        jsonWriter.writeStringField("autonomousMaintenanceScheduleType",
            autonomousMaintenanceScheduleType() == null ? null : autonomousMaintenanceScheduleType().toString());
        jsonWriter.writeStringField("characterSet", characterSet());
        jsonWriter.writeNumberField("computeCount", computeCount());
        jsonWriter.writeStringField("computeModel", computeModel() == null ? null : computeModel().toString());
        jsonWriter.writeNumberField("cpuCoreCount", cpuCoreCount());
        jsonWriter.writeArrayField("customerContacts", customerContacts(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("dataStorageSizeInTbs", dataStorageSizeInTbs());
        jsonWriter.writeNumberField("dataStorageSizeInGbs", dataStorageSizeInGbs());
        jsonWriter.writeStringField("dbVersion", dbVersion());
        jsonWriter.writeStringField("dbWorkload", dbWorkload() == null ? null : dbWorkload().toString());
        jsonWriter.writeStringField("displayName", displayName());
        jsonWriter.writeBooleanField("isAutoScalingEnabled", isAutoScalingEnabled());
        jsonWriter.writeBooleanField("isAutoScalingForStorageEnabled", isAutoScalingForStorageEnabled());
        jsonWriter.writeStringField("peerDbId", peerDbId());
        jsonWriter.writeBooleanField("isLocalDataGuardEnabled", isLocalDataGuardEnabled());
        jsonWriter.writeBooleanField("isMtlsConnectionRequired", isMtlsConnectionRequired());
        jsonWriter.writeBooleanField("isPreviewVersionWithServiceTermsAccepted",
            isPreviewVersionWithServiceTermsAccepted());
        jsonWriter.writeStringField("licenseModel", licenseModel() == null ? null : licenseModel().toString());
        jsonWriter.writeStringField("ncharacterSet", ncharacterSet());
        jsonWriter.writeJsonField("scheduledOperations", scheduledOperations());
        jsonWriter.writeStringField("privateEndpointIp", privateEndpointIp());
        jsonWriter.writeStringField("privateEndpointLabel", privateEndpointLabel());
        jsonWriter.writeStringField("subnetId", subnetId());
        jsonWriter.writeStringField("vnetId", vnetId());
        jsonWriter.writeStringField("databaseEdition", databaseEdition() == null ? null : databaseEdition().toString());
        jsonWriter.writeStringField("autonomousDatabaseId", autonomousDatabaseId());
        jsonWriter.writeJsonField("longTermBackupSchedule", longTermBackupSchedule());
        jsonWriter.writeNumberField("localAdgAutoFailoverMaxDataLossLimit", localAdgAutoFailoverMaxDataLossLimit());
        jsonWriter.writeStringField("openMode", openMode() == null ? null : openMode().toString());
        jsonWriter.writeStringField("permissionLevel", permissionLevel() == null ? null : permissionLevel().toString());
        jsonWriter.writeStringField("role", role() == null ? null : role().toString());
        jsonWriter.writeNumberField("backupRetentionPeriodInDays", backupRetentionPeriodInDays());
        jsonWriter.writeArrayField("whitelistedIps", whitelistedIps(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("source", this.source == null ? null : this.source.toString());
        jsonWriter.writeStringField("sourceId", this.sourceId);
        jsonWriter.writeStringField("remoteDisasterRecoveryType",
            this.remoteDisasterRecoveryType == null ? null : this.remoteDisasterRecoveryType.toString());
        jsonWriter.writeStringField("dataBaseType", this.dataBaseType == null ? null : this.dataBaseType.toString());
        jsonWriter.writeStringField("sourceLocation", this.sourceLocation);
        jsonWriter.writeStringField("sourceOcid", this.sourceOcid);
        jsonWriter.writeBooleanField("isReplicateAutomaticBackups", this.isReplicateAutomaticBackups);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutonomousDatabaseCrossRegionDisasterRecoveryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutonomousDatabaseCrossRegionDisasterRecoveryProperties if the JsonReader was pointing to
     * an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AutonomousDatabaseCrossRegionDisasterRecoveryProperties.
     */
    public static AutonomousDatabaseCrossRegionDisasterRecoveryProperties fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            AutonomousDatabaseCrossRegionDisasterRecoveryProperties deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                = new AutonomousDatabaseCrossRegionDisasterRecoveryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("adminPassword".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withAdminPassword(reader.getString());
                } else if ("autonomousMaintenanceScheduleType".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withAutonomousMaintenanceScheduleType(
                            AutonomousMaintenanceScheduleType.fromString(reader.getString()));
                } else if ("characterSet".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withCharacterSet(reader.getString());
                } else if ("computeCount".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withComputeCount(reader.getNullable(JsonReader::getDouble));
                } else if ("computeModel".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withComputeModel(ComputeModel.fromString(reader.getString()));
                } else if ("cpuCoreCount".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withCpuCoreCount(reader.getNullable(JsonReader::getInt));
                } else if ("customerContacts".equals(fieldName)) {
                    List<CustomerContact> customerContacts
                        = reader.readArray(reader1 -> CustomerContact.fromJson(reader1));
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withCustomerContacts(customerContacts);
                } else if ("dataStorageSizeInTbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withDataStorageSizeInTbs(reader.getNullable(JsonReader::getInt));
                } else if ("dataStorageSizeInGbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withDataStorageSizeInGbs(reader.getNullable(JsonReader::getInt));
                } else if ("dbVersion".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withDbVersion(reader.getString());
                } else if ("dbWorkload".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withDbWorkload(WorkloadType.fromString(reader.getString()));
                } else if ("displayName".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withDisplayName(reader.getString());
                } else if ("isAutoScalingEnabled".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withIsAutoScalingEnabled(reader.getNullable(JsonReader::getBoolean));
                } else if ("isAutoScalingForStorageEnabled".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withIsAutoScalingForStorageEnabled(reader.getNullable(JsonReader::getBoolean));
                } else if ("peerDbIds".equals(fieldName)) {
                    List<String> peerDbIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties.withPeerDbIds(peerDbIds);
                } else if ("peerDbId".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withPeerDbId(reader.getString());
                } else if ("isLocalDataGuardEnabled".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withIsLocalDataGuardEnabled(reader.getNullable(JsonReader::getBoolean));
                } else if ("isRemoteDataGuardEnabled".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withIsRemoteDataGuardEnabled(reader.getNullable(JsonReader::getBoolean));
                } else if ("localDisasterRecoveryType".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withLocalDisasterRecoveryType(DisasterRecoveryType.fromString(reader.getString()));
                } else if ("timeDisasterRecoveryRoleChanged".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withTimeDisasterRecoveryRoleChanged(reader.getNullable(
                            nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("remoteDisasterRecoveryConfiguration".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withRemoteDisasterRecoveryConfiguration(DisasterRecoveryConfigurationDetails.fromJson(reader));
                } else if ("localStandbyDb".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withLocalStandbyDb(AutonomousDatabaseStandbySummary.fromJson(reader));
                } else if ("failedDataRecoveryInSeconds".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withFailedDataRecoveryInSeconds(reader.getNullable(JsonReader::getInt));
                } else if ("isMtlsConnectionRequired".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withIsMtlsConnectionRequired(reader.getNullable(JsonReader::getBoolean));
                } else if ("isPreviewVersionWithServiceTermsAccepted".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withIsPreviewVersionWithServiceTermsAccepted(reader.getNullable(JsonReader::getBoolean));
                } else if ("licenseModel".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withLicenseModel(LicenseModel.fromString(reader.getString()));
                } else if ("ncharacterSet".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withNcharacterSet(reader.getString());
                } else if ("lifecycleDetails".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withLifecycleDetails(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withProvisioningState(AzureResourceProvisioningState.fromString(reader.getString()));
                } else if ("lifecycleState".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withLifecycleState(AutonomousDatabaseLifecycleState.fromString(reader.getString()));
                } else if ("scheduledOperations".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withScheduledOperations(ScheduledOperationsType.fromJson(reader));
                } else if ("privateEndpointIp".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withPrivateEndpointIp(reader.getString());
                } else if ("privateEndpointLabel".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withPrivateEndpointLabel(reader.getString());
                } else if ("ociUrl".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties.withOciUrl(reader.getString());
                } else if ("subnetId".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withSubnetId(reader.getString());
                } else if ("vnetId".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties.withVnetId(reader.getString());
                } else if ("timeCreated".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties.withTimeCreated(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("timeMaintenanceBegin".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties.withTimeMaintenanceBegin(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("timeMaintenanceEnd".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties.withTimeMaintenanceEnd(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("actualUsedDataStorageSizeInTbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withActualUsedDataStorageSizeInTbs(reader.getNullable(JsonReader::getDouble));
                } else if ("allocatedStorageSizeInTbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withAllocatedStorageSizeInTbs(reader.getNullable(JsonReader::getDouble));
                } else if ("apexDetails".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withApexDetails(ApexDetailsType.fromJson(reader));
                } else if ("availableUpgradeVersions".equals(fieldName)) {
                    List<String> availableUpgradeVersions = reader.readArray(reader1 -> reader1.getString());
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withAvailableUpgradeVersions(availableUpgradeVersions);
                } else if ("connectionStrings".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withConnectionStrings(ConnectionStringType.fromJson(reader));
                } else if ("connectionUrls".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withConnectionUrls(ConnectionUrlType.fromJson(reader));
                } else if ("dataSafeStatus".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withDataSafeStatus(DataSafeStatusType.fromString(reader.getString()));
                } else if ("databaseEdition".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withDatabaseEdition(DatabaseEditionType.fromString(reader.getString()));
                } else if ("autonomousDatabaseId".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withAutonomousDatabaseId(reader.getString());
                } else if ("inMemoryAreaInGbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withInMemoryAreaInGbs(reader.getNullable(JsonReader::getInt));
                } else if ("nextLongTermBackupTimeStamp".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withNextLongTermBackupTimestamp(reader.getNullable(
                            nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("longTermBackupSchedule".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withLongTermBackupSchedule(LongTermBackUpScheduleDetails.fromJson(reader));
                } else if ("isPreview".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withIsPreview(reader.getNullable(JsonReader::getBoolean));
                } else if ("localAdgAutoFailoverMaxDataLossLimit".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withLocalAdgAutoFailoverMaxDataLossLimit(reader.getNullable(JsonReader::getInt));
                } else if ("memoryPerOracleComputeUnitInGbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withMemoryPerOracleComputeUnitInGbs(reader.getNullable(JsonReader::getInt));
                } else if ("openMode".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withOpenMode(OpenModeType.fromString(reader.getString()));
                } else if ("operationsInsightsStatus".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withOperationsInsightsStatus(OperationsInsightsStatusType.fromString(reader.getString()));
                } else if ("permissionLevel".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withPermissionLevel(PermissionLevelType.fromString(reader.getString()));
                } else if ("privateEndpoint".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withPrivateEndpoint(reader.getString());
                } else if ("provisionableCpus".equals(fieldName)) {
                    List<Integer> provisionableCpus = reader.readArray(reader1 -> reader1.getInt());
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withProvisionableCpus(provisionableCpus);
                } else if ("role".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withRole(RoleType.fromString(reader.getString()));
                } else if ("serviceConsoleUrl".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withServiceConsoleUrl(reader.getString());
                } else if ("sqlWebDeveloperUrl".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withSqlWebDeveloperUrl(reader.getString());
                } else if ("supportedRegionsToCloneTo".equals(fieldName)) {
                    List<String> supportedRegionsToCloneTo = reader.readArray(reader1 -> reader1.getString());
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withSupportedRegionsToCloneTo(supportedRegionsToCloneTo);
                } else if ("timeDataGuardRoleChanged".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withTimeDataGuardRoleChanged(reader.getString());
                } else if ("timeDeletionOfFreeAutonomousDatabase".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withTimeDeletionOfFreeAutonomousDatabase(reader.getString());
                } else if ("timeLocalDataGuardEnabled".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withTimeLocalDataGuardEnabled(reader.getString());
                } else if ("timeOfLastFailover".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withTimeOfLastFailover(reader.getString());
                } else if ("timeOfLastRefresh".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withTimeOfLastRefresh(reader.getString());
                } else if ("timeOfLastRefreshPoint".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withTimeOfLastRefreshPoint(reader.getString());
                } else if ("timeOfLastSwitchover".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withTimeOfLastSwitchover(reader.getString());
                } else if ("timeReclamationOfFreeAutonomousDatabase".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withTimeReclamationOfFreeAutonomousDatabase(reader.getString());
                } else if ("usedDataStorageSizeInGbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withUsedDataStorageSizeInGbs(reader.getNullable(JsonReader::getInt));
                } else if ("usedDataStorageSizeInTbs".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withUsedDataStorageSizeInTbs(reader.getNullable(JsonReader::getInt));
                } else if ("ocid".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties.withOcid(reader.getString());
                } else if ("backupRetentionPeriodInDays".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withBackupRetentionPeriodInDays(reader.getNullable(JsonReader::getInt));
                } else if ("whitelistedIps".equals(fieldName)) {
                    List<String> whitelistedIps = reader.readArray(reader1 -> reader1.getString());
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties
                        .withWhitelistedIps(whitelistedIps);
                } else if ("sourceId".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties.sourceId = reader.getString();
                } else if ("remoteDisasterRecoveryType".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties.remoteDisasterRecoveryType
                        = DisasterRecoveryType.fromString(reader.getString());
                } else if ("dataBaseType".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties.dataBaseType
                        = DataBaseType.fromString(reader.getString());
                } else if ("sourceLocation".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties.sourceLocation
                        = reader.getString();
                } else if ("sourceOcid".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties.sourceOcid = reader.getString();
                } else if ("isReplicateAutomaticBackups".equals(fieldName)) {
                    deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties.isReplicateAutomaticBackups
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutonomousDatabaseCrossRegionDisasterRecoveryProperties;
        });
    }
}
