// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DbSystemShape resource model.
 */
@Immutable
public final class DbSystemShapeProperties {
    /*
     * The family of the shape used for the DB system.
     */
    @JsonProperty(value = "shapeFamily", access = JsonProperty.Access.WRITE_ONLY)
    private String shapeFamily;

    /*
     * The maximum number of CPU cores that can be enabled on the DB system for this shape.
     */
    @JsonProperty(value = "availableCoreCount", required = true, access = JsonProperty.Access.WRITE_ONLY)
    private int availableCoreCount;

    /*
     * The minimum number of CPU cores that can be enabled on the DB system for this shape.
     */
    @JsonProperty(value = "minimumCoreCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer minimumCoreCount;

    /*
     * The runtime minimum number of CPU cores that can be enabled on the DB system for this shape.
     */
    @JsonProperty(value = "runtimeMinimumCoreCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer runtimeMinimumCoreCount;

    /*
     * The discrete number by which the CPU core count for this shape can be increased or decreased.
     */
    @JsonProperty(value = "coreCountIncrement", access = JsonProperty.Access.WRITE_ONLY)
    private Integer coreCountIncrement;

    /*
     * The minimum number of Exadata storage servers available for the Exadata infrastructure.
     */
    @JsonProperty(value = "minStorageCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer minStorageCount;

    /*
     * The maximum number of Exadata storage servers available for the Exadata infrastructure.
     */
    @JsonProperty(value = "maxStorageCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer maxStorageCount;

    /*
     * The maximum data storage available per storage server for this shape. Only applicable to ExaCC Elastic shapes.
     */
    @JsonProperty(value = "availableDataStoragePerServerInTbs", access = JsonProperty.Access.WRITE_ONLY)
    private Double availableDataStoragePerServerInTbs;

    /*
     * The maximum memory available per database node for this shape. Only applicable to ExaCC Elastic shapes.
     */
    @JsonProperty(value = "availableMemoryPerNodeInGbs", access = JsonProperty.Access.WRITE_ONLY)
    private Integer availableMemoryPerNodeInGbs;

    /*
     * The maximum Db Node storage available per database node for this shape. Only applicable to ExaCC Elastic shapes.
     */
    @JsonProperty(value = "availableDbNodePerNodeInGbs", access = JsonProperty.Access.WRITE_ONLY)
    private Integer availableDbNodePerNodeInGbs;

    /*
     * The minimum number of CPU cores that can be enabled per node for this shape.
     */
    @JsonProperty(value = "minCoreCountPerNode", access = JsonProperty.Access.WRITE_ONLY)
    private Integer minCoreCountPerNode;

    /*
     * The maximum memory that can be enabled for this shape.
     */
    @JsonProperty(value = "availableMemoryInGbs", access = JsonProperty.Access.WRITE_ONLY)
    private Integer availableMemoryInGbs;

    /*
     * The minimum memory that need be allocated per node for this shape.
     */
    @JsonProperty(value = "minMemoryPerNodeInGbs", access = JsonProperty.Access.WRITE_ONLY)
    private Integer minMemoryPerNodeInGbs;

    /*
     * The maximum Db Node storage that can be enabled for this shape.
     */
    @JsonProperty(value = "availableDbNodeStorageInGbs", access = JsonProperty.Access.WRITE_ONLY)
    private Integer availableDbNodeStorageInGbs;

    /*
     * The minimum Db Node storage that need be allocated per node for this shape.
     */
    @JsonProperty(value = "minDbNodeStoragePerNodeInGbs", access = JsonProperty.Access.WRITE_ONLY)
    private Integer minDbNodeStoragePerNodeInGbs;

    /*
     * The maximum DATA storage that can be enabled for this shape.
     */
    @JsonProperty(value = "availableDataStorageInTbs", access = JsonProperty.Access.WRITE_ONLY)
    private Integer availableDataStorageInTbs;

    /*
     * The minimum data storage that need be allocated for this shape.
     */
    @JsonProperty(value = "minDataStorageInTbs", access = JsonProperty.Access.WRITE_ONLY)
    private Integer minDataStorageInTbs;

    /*
     * The minimum number of database nodes available for this shape.
     */
    @JsonProperty(value = "minimumNodeCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer minimumNodeCount;

    /*
     * The maximum number of database nodes available for this shape.
     */
    @JsonProperty(value = "maximumNodeCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer maximumNodeCount;

    /*
     * The maximum number of CPU cores per database node that can be enabled for this shape. Only applicable to the flex Exadata shape and ExaCC Elastic shapes.
     */
    @JsonProperty(value = "availableCoreCountPerNode", access = JsonProperty.Access.WRITE_ONLY)
    private Integer availableCoreCountPerNode;

    /**
     * Creates an instance of DbSystemShapeProperties class.
     */
    public DbSystemShapeProperties() {
    }

    /**
     * Get the shapeFamily property: The family of the shape used for the DB system.
     * 
     * @return the shapeFamily value.
     */
    public String shapeFamily() {
        return this.shapeFamily;
    }

    /**
     * Get the availableCoreCount property: The maximum number of CPU cores that can be enabled on the DB system for
     * this shape.
     * 
     * @return the availableCoreCount value.
     */
    public int availableCoreCount() {
        return this.availableCoreCount;
    }

    /**
     * Get the minimumCoreCount property: The minimum number of CPU cores that can be enabled on the DB system for this
     * shape.
     * 
     * @return the minimumCoreCount value.
     */
    public Integer minimumCoreCount() {
        return this.minimumCoreCount;
    }

    /**
     * Get the runtimeMinimumCoreCount property: The runtime minimum number of CPU cores that can be enabled on the DB
     * system for this shape.
     * 
     * @return the runtimeMinimumCoreCount value.
     */
    public Integer runtimeMinimumCoreCount() {
        return this.runtimeMinimumCoreCount;
    }

    /**
     * Get the coreCountIncrement property: The discrete number by which the CPU core count for this shape can be
     * increased or decreased.
     * 
     * @return the coreCountIncrement value.
     */
    public Integer coreCountIncrement() {
        return this.coreCountIncrement;
    }

    /**
     * Get the minStorageCount property: The minimum number of Exadata storage servers available for the Exadata
     * infrastructure.
     * 
     * @return the minStorageCount value.
     */
    public Integer minStorageCount() {
        return this.minStorageCount;
    }

    /**
     * Get the maxStorageCount property: The maximum number of Exadata storage servers available for the Exadata
     * infrastructure.
     * 
     * @return the maxStorageCount value.
     */
    public Integer maxStorageCount() {
        return this.maxStorageCount;
    }

    /**
     * Get the availableDataStoragePerServerInTbs property: The maximum data storage available per storage server for
     * this shape. Only applicable to ExaCC Elastic shapes.
     * 
     * @return the availableDataStoragePerServerInTbs value.
     */
    public Double availableDataStoragePerServerInTbs() {
        return this.availableDataStoragePerServerInTbs;
    }

    /**
     * Get the availableMemoryPerNodeInGbs property: The maximum memory available per database node for this shape. Only
     * applicable to ExaCC Elastic shapes.
     * 
     * @return the availableMemoryPerNodeInGbs value.
     */
    public Integer availableMemoryPerNodeInGbs() {
        return this.availableMemoryPerNodeInGbs;
    }

    /**
     * Get the availableDbNodePerNodeInGbs property: The maximum Db Node storage available per database node for this
     * shape. Only applicable to ExaCC Elastic shapes.
     * 
     * @return the availableDbNodePerNodeInGbs value.
     */
    public Integer availableDbNodePerNodeInGbs() {
        return this.availableDbNodePerNodeInGbs;
    }

    /**
     * Get the minCoreCountPerNode property: The minimum number of CPU cores that can be enabled per node for this
     * shape.
     * 
     * @return the minCoreCountPerNode value.
     */
    public Integer minCoreCountPerNode() {
        return this.minCoreCountPerNode;
    }

    /**
     * Get the availableMemoryInGbs property: The maximum memory that can be enabled for this shape.
     * 
     * @return the availableMemoryInGbs value.
     */
    public Integer availableMemoryInGbs() {
        return this.availableMemoryInGbs;
    }

    /**
     * Get the minMemoryPerNodeInGbs property: The minimum memory that need be allocated per node for this shape.
     * 
     * @return the minMemoryPerNodeInGbs value.
     */
    public Integer minMemoryPerNodeInGbs() {
        return this.minMemoryPerNodeInGbs;
    }

    /**
     * Get the availableDbNodeStorageInGbs property: The maximum Db Node storage that can be enabled for this shape.
     * 
     * @return the availableDbNodeStorageInGbs value.
     */
    public Integer availableDbNodeStorageInGbs() {
        return this.availableDbNodeStorageInGbs;
    }

    /**
     * Get the minDbNodeStoragePerNodeInGbs property: The minimum Db Node storage that need be allocated per node for
     * this shape.
     * 
     * @return the minDbNodeStoragePerNodeInGbs value.
     */
    public Integer minDbNodeStoragePerNodeInGbs() {
        return this.minDbNodeStoragePerNodeInGbs;
    }

    /**
     * Get the availableDataStorageInTbs property: The maximum DATA storage that can be enabled for this shape.
     * 
     * @return the availableDataStorageInTbs value.
     */
    public Integer availableDataStorageInTbs() {
        return this.availableDataStorageInTbs;
    }

    /**
     * Get the minDataStorageInTbs property: The minimum data storage that need be allocated for this shape.
     * 
     * @return the minDataStorageInTbs value.
     */
    public Integer minDataStorageInTbs() {
        return this.minDataStorageInTbs;
    }

    /**
     * Get the minimumNodeCount property: The minimum number of database nodes available for this shape.
     * 
     * @return the minimumNodeCount value.
     */
    public Integer minimumNodeCount() {
        return this.minimumNodeCount;
    }

    /**
     * Get the maximumNodeCount property: The maximum number of database nodes available for this shape.
     * 
     * @return the maximumNodeCount value.
     */
    public Integer maximumNodeCount() {
        return this.maximumNodeCount;
    }

    /**
     * Get the availableCoreCountPerNode property: The maximum number of CPU cores per database node that can be enabled
     * for this shape. Only applicable to the flex Exadata shape and ExaCC Elastic shapes.
     * 
     * @return the availableCoreCountPerNode value.
     */
    public Integer availableCoreCountPerNode() {
        return this.availableCoreCountPerNode;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
