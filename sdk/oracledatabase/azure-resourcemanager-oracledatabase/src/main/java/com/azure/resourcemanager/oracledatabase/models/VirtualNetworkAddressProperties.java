// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * virtualNetworkAddress resource properties.
 */
@Fluent
public final class VirtualNetworkAddressProperties implements JsonSerializable<VirtualNetworkAddressProperties> {
    /*
     * Virtual network Address address.
     */
    private String ipAddress;

    /*
     * Virtual Machine OCID.
     */
    private String vmOcid;

    /*
     * Application VIP OCID.
     */
    private String ocid;

    /*
     * Virtual network address fully qualified domain name.
     */
    private String domain;

    /*
     * Additional information about the current lifecycle state of the application virtual IP (VIP) address.
     */
    private String lifecycleDetails;

    /*
     * Azure resource provisioning state.
     */
    private AzureResourceProvisioningState provisioningState;

    /*
     * virtual network address lifecycle state.
     */
    private VirtualNetworkAddressLifecycleState lifecycleState;

    /*
     * The date and time when the create operation for the application virtual IP (VIP) address completed.
     */
    private OffsetDateTime timeAssigned;

    /**
     * Creates an instance of VirtualNetworkAddressProperties class.
     */
    public VirtualNetworkAddressProperties() {
    }

    /**
     * Get the ipAddress property: Virtual network Address address.
     * 
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Set the ipAddress property: Virtual network Address address.
     * 
     * @param ipAddress the ipAddress value to set.
     * @return the VirtualNetworkAddressProperties object itself.
     */
    public VirtualNetworkAddressProperties withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }

    /**
     * Get the vmOcid property: Virtual Machine OCID.
     * 
     * @return the vmOcid value.
     */
    public String vmOcid() {
        return this.vmOcid;
    }

    /**
     * Set the vmOcid property: Virtual Machine OCID.
     * 
     * @param vmOcid the vmOcid value to set.
     * @return the VirtualNetworkAddressProperties object itself.
     */
    public VirtualNetworkAddressProperties withVmOcid(String vmOcid) {
        this.vmOcid = vmOcid;
        return this;
    }

    /**
     * Get the ocid property: Application VIP OCID.
     * 
     * @return the ocid value.
     */
    public String ocid() {
        return this.ocid;
    }

    /**
     * Get the domain property: Virtual network address fully qualified domain name.
     * 
     * @return the domain value.
     */
    public String domain() {
        return this.domain;
    }

    /**
     * Get the lifecycleDetails property: Additional information about the current lifecycle state of the application
     * virtual IP (VIP) address.
     * 
     * @return the lifecycleDetails value.
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }

    /**
     * Get the provisioningState property: Azure resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public AzureResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the lifecycleState property: virtual network address lifecycle state.
     * 
     * @return the lifecycleState value.
     */
    public VirtualNetworkAddressLifecycleState lifecycleState() {
        return this.lifecycleState;
    }

    /**
     * Get the timeAssigned property: The date and time when the create operation for the application virtual IP (VIP)
     * address completed.
     * 
     * @return the timeAssigned value.
     */
    public OffsetDateTime timeAssigned() {
        return this.timeAssigned;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ipAddress", this.ipAddress);
        jsonWriter.writeStringField("vmOcid", this.vmOcid);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualNetworkAddressProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualNetworkAddressProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualNetworkAddressProperties.
     */
    public static VirtualNetworkAddressProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualNetworkAddressProperties deserializedVirtualNetworkAddressProperties
                = new VirtualNetworkAddressProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ipAddress".equals(fieldName)) {
                    deserializedVirtualNetworkAddressProperties.ipAddress = reader.getString();
                } else if ("vmOcid".equals(fieldName)) {
                    deserializedVirtualNetworkAddressProperties.vmOcid = reader.getString();
                } else if ("ocid".equals(fieldName)) {
                    deserializedVirtualNetworkAddressProperties.ocid = reader.getString();
                } else if ("domain".equals(fieldName)) {
                    deserializedVirtualNetworkAddressProperties.domain = reader.getString();
                } else if ("lifecycleDetails".equals(fieldName)) {
                    deserializedVirtualNetworkAddressProperties.lifecycleDetails = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedVirtualNetworkAddressProperties.provisioningState
                        = AzureResourceProvisioningState.fromString(reader.getString());
                } else if ("lifecycleState".equals(fieldName)) {
                    deserializedVirtualNetworkAddressProperties.lifecycleState
                        = VirtualNetworkAddressLifecycleState.fromString(reader.getString());
                } else if ("timeAssigned".equals(fieldName)) {
                    deserializedVirtualNetworkAddressProperties.timeAssigned = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualNetworkAddressProperties;
        });
    }
}
