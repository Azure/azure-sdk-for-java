// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DbSystemOptions resource properties.
 */
@Fluent
public final class DbSystemOptions implements JsonSerializable<DbSystemOptions> {
    /*
     * The storage option used in DB system. ASM - Automatic storage management, LVM - Logical Volume management.
     */
    private StorageManagementType storageManagement;

    /**
     * Creates an instance of DbSystemOptions class.
     */
    public DbSystemOptions() {
    }

    /**
     * Get the storageManagement property: The storage option used in DB system. ASM - Automatic storage management, LVM
     * - Logical Volume management.
     * 
     * @return the storageManagement value.
     */
    public StorageManagementType storageManagement() {
        return this.storageManagement;
    }

    /**
     * Set the storageManagement property: The storage option used in DB system. ASM - Automatic storage management, LVM
     * - Logical Volume management.
     * 
     * @param storageManagement the storageManagement value to set.
     * @return the DbSystemOptions object itself.
     */
    public DbSystemOptions withStorageManagement(StorageManagementType storageManagement) {
        this.storageManagement = storageManagement;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("storageManagement",
            this.storageManagement == null ? null : this.storageManagement.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DbSystemOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DbSystemOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DbSystemOptions.
     */
    public static DbSystemOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DbSystemOptions deserializedDbSystemOptions = new DbSystemOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageManagement".equals(fieldName)) {
                    deserializedDbSystemOptions.storageManagement
                        = StorageManagementType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDbSystemOptions;
        });
    }
}
