// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * CloudVmCluster resource model.
 */
@Fluent
public final class CloudVmClusterProperties {
    /*
     * Cloud VM Cluster ocid
     */
    @JsonProperty(value = "ocid", access = JsonProperty.Access.WRITE_ONLY)
    private String ocid;

    /*
     * The port number configured for the listener on the cloud VM cluster.
     */
    @JsonProperty(value = "listenerPort", access = JsonProperty.Access.WRITE_ONLY)
    private Long listenerPort;

    /*
     * The number of nodes in the cloud VM cluster. 
     */
    @JsonProperty(value = "nodeCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer nodeCount;

    /*
     * The data disk group size to be allocated in GBs per VM.
     */
    @JsonProperty(value = "storageSizeInGbs")
    private Integer storageSizeInGbs;

    /*
     * The data disk group size to be allocated in TBs.
     */
    @JsonProperty(value = "dataStorageSizeInTbs")
    private Double dataStorageSizeInTbs;

    /*
     * The local node storage to be allocated in GBs.
     */
    @JsonProperty(value = "dbNodeStorageSizeInGbs")
    private Integer dbNodeStorageSizeInGbs;

    /*
     * The memory to be allocated in GBs.
     */
    @JsonProperty(value = "memorySizeInGbs")
    private Integer memorySizeInGbs;

    /*
     * The date and time that the cloud VM cluster was created.
     */
    @JsonProperty(value = "timeCreated", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime timeCreated;

    /*
     * Additional information about the current lifecycle state.
     */
    @JsonProperty(value = "lifecycleDetails", access = JsonProperty.Access.WRITE_ONLY)
    private String lifecycleDetails;

    /*
     * The time zone of the cloud VM cluster. For details, see [Exadata Infrastructure Time Zones](/Content/Database/References/timezones.htm).
     */
    @JsonProperty(value = "timeZone")
    private String timeZone;

    /*
     * The OCID of the zone the cloud VM cluster is associated with.
     */
    @JsonProperty(value = "zoneId")
    private String zoneId;

    /*
     * The hostname for the cloud VM cluster.
     */
    @JsonProperty(value = "hostname", required = true)
    private String hostname;

    /*
     * The domain name for the cloud VM cluster.
     */
    @JsonProperty(value = "domain")
    private String domain;

    /*
     * The number of CPU cores enabled on the cloud VM cluster.
     */
    @JsonProperty(value = "cpuCoreCount", required = true)
    private int cpuCoreCount;

    /*
     * The number of OCPU cores to enable on the cloud VM cluster. Only 1 decimal place is allowed for the fractional part.
     */
    @JsonProperty(value = "ocpuCount")
    private Float ocpuCount;

    /*
     * The cluster name for cloud VM cluster. The cluster name must begin with an alphabetic character, and may contain hyphens (-). Underscores (_) are not permitted. The cluster name can be no longer than 11 characters and is not case sensitive. 
     */
    @JsonProperty(value = "clusterName")
    private String clusterName;

    /*
     * The percentage assigned to DATA storage (user data and database files). The remaining percentage is assigned to RECO storage (database redo logs, archive logs, and recovery manager backups). Accepted values are 35, 40, 60 and 80. The default is 80 percent assigned to DATA storage. See [Storage Configuration](/Content/Database/Concepts/exaoverview.htm#Exadata) in the Exadata documentation for details on the impact of the configuration settings on storage. 
     */
    @JsonProperty(value = "dataStoragePercentage")
    private Integer dataStoragePercentage;

    /*
     * If true, database backup on local Exadata storage is configured for the cloud VM cluster. If false, database backup on local Exadata storage is not available in the cloud VM cluster. 
     */
    @JsonProperty(value = "isLocalBackupEnabled")
    private Boolean isLocalBackupEnabled;

    /*
     * Cloud Exadata Infrastructure ID
     */
    @JsonProperty(value = "cloudExadataInfrastructureId", required = true)
    private String cloudExadataInfrastructureId;

    /*
     * If true, sparse disk group is configured for the cloud VM cluster. If false, sparse disk group is not created. 
     */
    @JsonProperty(value = "isSparseDiskgroupEnabled")
    private Boolean isSparseDiskgroupEnabled;

    /*
     * Operating system version of the image.
     */
    @JsonProperty(value = "systemVersion", access = JsonProperty.Access.WRITE_ONLY)
    private String systemVersion;

    /*
     * The public key portion of one or more key pairs used for SSH access to the cloud VM cluster.
     */
    @JsonProperty(value = "sshPublicKeys", required = true)
    private List<String> sshPublicKeys;

    /*
     * The Oracle license model that applies to the cloud VM cluster. The default is LICENSE_INCLUDED. 
     */
    @JsonProperty(value = "licenseModel")
    private LicenseModel licenseModel;

    /*
     * The type of redundancy configured for the cloud Vm cluster. NORMAL is 2-way redundancy. HIGH is 3-way redundancy. 
     */
    @JsonProperty(value = "diskRedundancy", access = JsonProperty.Access.WRITE_ONLY)
    private DiskRedundancy diskRedundancy;

    /*
     * The Single Client Access Name (SCAN) IP addresses associated with the cloud VM cluster. SCAN IP addresses are typically used for load balancing and are not assigned to any interface. Oracle Clusterware directs the requests to the appropriate nodes in the cluster. **Note:** For a single-node DB system, this list is empty.
     */
    @JsonProperty(value = "scanIpIds", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> scanIpIds;

    /*
     * The virtual IP (VIP) addresses associated with the cloud VM cluster. The Cluster Ready Services (CRS) creates and maintains one VIP address for each node in the Exadata Cloud Service instance to enable failover. If one node fails, the VIP is reassigned to another active node in the cluster. **Note:** For a single-node DB system, this list is empty.
     */
    @JsonProperty(value = "vipIds", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> vipIds;

    /*
     * The FQDN of the DNS record for the SCAN IP addresses that are associated with the cloud VM cluster. 
     */
    @JsonProperty(value = "scanDnsName", access = JsonProperty.Access.WRITE_ONLY)
    private String scanDnsName;

    /*
     * The TCP Single Client Access Name (SCAN) port. The default port is 1521.
     */
    @JsonProperty(value = "scanListenerPortTcp")
    private Integer scanListenerPortTcp;

    /*
     * The TCPS Single Client Access Name (SCAN) port. The default port is 2484.
     */
    @JsonProperty(value = "scanListenerPortTcpSsl")
    private Integer scanListenerPortTcpSsl;

    /*
     * The OCID of the DNS record for the SCAN IP addresses that are associated with the cloud VM cluster.
     */
    @JsonProperty(value = "scanDnsRecordId", access = JsonProperty.Access.WRITE_ONLY)
    private String scanDnsRecordId;

    /*
     * The model name of the Exadata hardware running the cloud VM cluster.
     */
    @JsonProperty(value = "shape", access = JsonProperty.Access.WRITE_ONLY)
    private String shape;

    /*
     * CloudVmCluster provisioning state
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private AzureResourceProvisioningState provisioningState;

    /*
     * CloudVmCluster lifecycle state
     */
    @JsonProperty(value = "lifecycleState", access = JsonProperty.Access.WRITE_ONLY)
    private CloudVmClusterLifecycleState lifecycleState;

    /*
     * VNET for network connectivity
     */
    @JsonProperty(value = "vnetId", required = true)
    private String vnetId;

    /*
     * Oracle Grid Infrastructure (GI) software version
     */
    @JsonProperty(value = "giVersion", required = true)
    private String giVersion;

    /*
     * HTTPS link to OCI resources exposed to Azure Customer via Azure Interface.
     */
    @JsonProperty(value = "ociUrl", access = JsonProperty.Access.WRITE_ONLY)
    private String ociUrl;

    /*
     * HTTPS link to OCI Network Security Group exposed to Azure Customer via the Azure Interface.
     */
    @JsonProperty(value = "nsgUrl", access = JsonProperty.Access.WRITE_ONLY)
    private String nsgUrl;

    /*
     * Client subnet
     */
    @JsonProperty(value = "subnetId", required = true)
    private String subnetId;

    /*
     * Client OCI backup subnet CIDR, default is 192.168.252.0/22
     */
    @JsonProperty(value = "backupSubnetCidr")
    private String backupSubnetCidr;

    /*
     * CIDR blocks for additional NSG ingress rules. The VNET CIDRs used to provision the VM Cluster will be added by default.
     */
    @JsonProperty(value = "nsgCidrs")
    private List<NsgCidr> nsgCidrs;

    /*
     * Indicates user preferences for the various diagnostic collection options for the VM cluster/Cloud VM cluster/VMBM DBCS.
     */
    @JsonProperty(value = "dataCollectionOptions")
    private DataCollectionOptions dataCollectionOptions;

    /*
     * Display Name
     */
    @JsonProperty(value = "displayName", required = true)
    private String displayName;

    /*
     * The list of compute servers to be added to the cloud VM cluster.
     */
    @JsonProperty(value = "computeNodes")
    private List<String> computeNodes;

    /*
     * iormConfigCache details for cloud VM cluster.
     */
    @JsonProperty(value = "iormConfigCache", access = JsonProperty.Access.WRITE_ONLY)
    private ExadataIormConfig iormConfigCache;

    /*
     * The OCID of the last maintenance update history entry.
     */
    @JsonProperty(value = "lastUpdateHistoryEntryId", access = JsonProperty.Access.WRITE_ONLY)
    private String lastUpdateHistoryEntryId;

    /*
     * The list of DB servers.
     */
    @JsonProperty(value = "dbServers")
    private List<String> dbServers;

    /*
     * Cluster compartmentId
     */
    @JsonProperty(value = "compartmentId", access = JsonProperty.Access.WRITE_ONLY)
    private String compartmentId;

    /*
     * Cluster subnet ocid
     */
    @JsonProperty(value = "subnetOcid", access = JsonProperty.Access.WRITE_ONLY)
    private String subnetOcid;

    /**
     * Creates an instance of CloudVmClusterProperties class.
     */
    public CloudVmClusterProperties() {
    }

    /**
     * Get the ocid property: Cloud VM Cluster ocid.
     * 
     * @return the ocid value.
     */
    public String ocid() {
        return this.ocid;
    }

    /**
     * Get the listenerPort property: The port number configured for the listener on the cloud VM cluster.
     * 
     * @return the listenerPort value.
     */
    public Long listenerPort() {
        return this.listenerPort;
    }

    /**
     * Get the nodeCount property: The number of nodes in the cloud VM cluster.
     * 
     * @return the nodeCount value.
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }

    /**
     * Get the storageSizeInGbs property: The data disk group size to be allocated in GBs per VM.
     * 
     * @return the storageSizeInGbs value.
     */
    public Integer storageSizeInGbs() {
        return this.storageSizeInGbs;
    }

    /**
     * Set the storageSizeInGbs property: The data disk group size to be allocated in GBs per VM.
     * 
     * @param storageSizeInGbs the storageSizeInGbs value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withStorageSizeInGbs(Integer storageSizeInGbs) {
        this.storageSizeInGbs = storageSizeInGbs;
        return this;
    }

    /**
     * Get the dataStorageSizeInTbs property: The data disk group size to be allocated in TBs.
     * 
     * @return the dataStorageSizeInTbs value.
     */
    public Double dataStorageSizeInTbs() {
        return this.dataStorageSizeInTbs;
    }

    /**
     * Set the dataStorageSizeInTbs property: The data disk group size to be allocated in TBs.
     * 
     * @param dataStorageSizeInTbs the dataStorageSizeInTbs value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withDataStorageSizeInTbs(Double dataStorageSizeInTbs) {
        this.dataStorageSizeInTbs = dataStorageSizeInTbs;
        return this;
    }

    /**
     * Get the dbNodeStorageSizeInGbs property: The local node storage to be allocated in GBs.
     * 
     * @return the dbNodeStorageSizeInGbs value.
     */
    public Integer dbNodeStorageSizeInGbs() {
        return this.dbNodeStorageSizeInGbs;
    }

    /**
     * Set the dbNodeStorageSizeInGbs property: The local node storage to be allocated in GBs.
     * 
     * @param dbNodeStorageSizeInGbs the dbNodeStorageSizeInGbs value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withDbNodeStorageSizeInGbs(Integer dbNodeStorageSizeInGbs) {
        this.dbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
        return this;
    }

    /**
     * Get the memorySizeInGbs property: The memory to be allocated in GBs.
     * 
     * @return the memorySizeInGbs value.
     */
    public Integer memorySizeInGbs() {
        return this.memorySizeInGbs;
    }

    /**
     * Set the memorySizeInGbs property: The memory to be allocated in GBs.
     * 
     * @param memorySizeInGbs the memorySizeInGbs value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withMemorySizeInGbs(Integer memorySizeInGbs) {
        this.memorySizeInGbs = memorySizeInGbs;
        return this;
    }

    /**
     * Get the timeCreated property: The date and time that the cloud VM cluster was created.
     * 
     * @return the timeCreated value.
     */
    public OffsetDateTime timeCreated() {
        return this.timeCreated;
    }

    /**
     * Get the lifecycleDetails property: Additional information about the current lifecycle state.
     * 
     * @return the lifecycleDetails value.
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }

    /**
     * Get the timeZone property: The time zone of the cloud VM cluster. For details, see [Exadata Infrastructure Time
     * Zones](/Content/Database/References/timezones.htm).
     * 
     * @return the timeZone value.
     */
    public String timeZone() {
        return this.timeZone;
    }

    /**
     * Set the timeZone property: The time zone of the cloud VM cluster. For details, see [Exadata Infrastructure Time
     * Zones](/Content/Database/References/timezones.htm).
     * 
     * @param timeZone the timeZone value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }

    /**
     * Get the zoneId property: The OCID of the zone the cloud VM cluster is associated with.
     * 
     * @return the zoneId value.
     */
    public String zoneId() {
        return this.zoneId;
    }

    /**
     * Set the zoneId property: The OCID of the zone the cloud VM cluster is associated with.
     * 
     * @param zoneId the zoneId value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withZoneId(String zoneId) {
        this.zoneId = zoneId;
        return this;
    }

    /**
     * Get the hostname property: The hostname for the cloud VM cluster.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: The hostname for the cloud VM cluster.
     * 
     * @param hostname the hostname value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the domain property: The domain name for the cloud VM cluster.
     * 
     * @return the domain value.
     */
    public String domain() {
        return this.domain;
    }

    /**
     * Set the domain property: The domain name for the cloud VM cluster.
     * 
     * @param domain the domain value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withDomain(String domain) {
        this.domain = domain;
        return this;
    }

    /**
     * Get the cpuCoreCount property: The number of CPU cores enabled on the cloud VM cluster.
     * 
     * @return the cpuCoreCount value.
     */
    public int cpuCoreCount() {
        return this.cpuCoreCount;
    }

    /**
     * Set the cpuCoreCount property: The number of CPU cores enabled on the cloud VM cluster.
     * 
     * @param cpuCoreCount the cpuCoreCount value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withCpuCoreCount(int cpuCoreCount) {
        this.cpuCoreCount = cpuCoreCount;
        return this;
    }

    /**
     * Get the ocpuCount property: The number of OCPU cores to enable on the cloud VM cluster. Only 1 decimal place is
     * allowed for the fractional part.
     * 
     * @return the ocpuCount value.
     */
    public Float ocpuCount() {
        return this.ocpuCount;
    }

    /**
     * Set the ocpuCount property: The number of OCPU cores to enable on the cloud VM cluster. Only 1 decimal place is
     * allowed for the fractional part.
     * 
     * @param ocpuCount the ocpuCount value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withOcpuCount(Float ocpuCount) {
        this.ocpuCount = ocpuCount;
        return this;
    }

    /**
     * Get the clusterName property: The cluster name for cloud VM cluster. The cluster name must begin with an
     * alphabetic character, and may contain hyphens (-). Underscores (_) are not permitted. The cluster name can be no
     * longer than 11 characters and is not case sensitive.
     * 
     * @return the clusterName value.
     */
    public String clusterName() {
        return this.clusterName;
    }

    /**
     * Set the clusterName property: The cluster name for cloud VM cluster. The cluster name must begin with an
     * alphabetic character, and may contain hyphens (-). Underscores (_) are not permitted. The cluster name can be no
     * longer than 11 characters and is not case sensitive.
     * 
     * @param clusterName the clusterName value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withClusterName(String clusterName) {
        this.clusterName = clusterName;
        return this;
    }

    /**
     * Get the dataStoragePercentage property: The percentage assigned to DATA storage (user data and database files).
     * The remaining percentage is assigned to RECO storage (database redo logs, archive logs, and recovery manager
     * backups). Accepted values are 35, 40, 60 and 80. The default is 80 percent assigned to DATA storage. See [Storage
     * Configuration](/Content/Database/Concepts/exaoverview.htm#Exadata) in the Exadata documentation for details on
     * the impact of the configuration settings on storage.
     * 
     * @return the dataStoragePercentage value.
     */
    public Integer dataStoragePercentage() {
        return this.dataStoragePercentage;
    }

    /**
     * Set the dataStoragePercentage property: The percentage assigned to DATA storage (user data and database files).
     * The remaining percentage is assigned to RECO storage (database redo logs, archive logs, and recovery manager
     * backups). Accepted values are 35, 40, 60 and 80. The default is 80 percent assigned to DATA storage. See [Storage
     * Configuration](/Content/Database/Concepts/exaoverview.htm#Exadata) in the Exadata documentation for details on
     * the impact of the configuration settings on storage.
     * 
     * @param dataStoragePercentage the dataStoragePercentage value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withDataStoragePercentage(Integer dataStoragePercentage) {
        this.dataStoragePercentage = dataStoragePercentage;
        return this;
    }

    /**
     * Get the isLocalBackupEnabled property: If true, database backup on local Exadata storage is configured for the
     * cloud VM cluster. If false, database backup on local Exadata storage is not available in the cloud VM cluster.
     * 
     * @return the isLocalBackupEnabled value.
     */
    public Boolean isLocalBackupEnabled() {
        return this.isLocalBackupEnabled;
    }

    /**
     * Set the isLocalBackupEnabled property: If true, database backup on local Exadata storage is configured for the
     * cloud VM cluster. If false, database backup on local Exadata storage is not available in the cloud VM cluster.
     * 
     * @param isLocalBackupEnabled the isLocalBackupEnabled value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withIsLocalBackupEnabled(Boolean isLocalBackupEnabled) {
        this.isLocalBackupEnabled = isLocalBackupEnabled;
        return this;
    }

    /**
     * Get the cloudExadataInfrastructureId property: Cloud Exadata Infrastructure ID.
     * 
     * @return the cloudExadataInfrastructureId value.
     */
    public String cloudExadataInfrastructureId() {
        return this.cloudExadataInfrastructureId;
    }

    /**
     * Set the cloudExadataInfrastructureId property: Cloud Exadata Infrastructure ID.
     * 
     * @param cloudExadataInfrastructureId the cloudExadataInfrastructureId value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withCloudExadataInfrastructureId(String cloudExadataInfrastructureId) {
        this.cloudExadataInfrastructureId = cloudExadataInfrastructureId;
        return this;
    }

    /**
     * Get the isSparseDiskgroupEnabled property: If true, sparse disk group is configured for the cloud VM cluster. If
     * false, sparse disk group is not created.
     * 
     * @return the isSparseDiskgroupEnabled value.
     */
    public Boolean isSparseDiskgroupEnabled() {
        return this.isSparseDiskgroupEnabled;
    }

    /**
     * Set the isSparseDiskgroupEnabled property: If true, sparse disk group is configured for the cloud VM cluster. If
     * false, sparse disk group is not created.
     * 
     * @param isSparseDiskgroupEnabled the isSparseDiskgroupEnabled value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withIsSparseDiskgroupEnabled(Boolean isSparseDiskgroupEnabled) {
        this.isSparseDiskgroupEnabled = isSparseDiskgroupEnabled;
        return this;
    }

    /**
     * Get the systemVersion property: Operating system version of the image.
     * 
     * @return the systemVersion value.
     */
    public String systemVersion() {
        return this.systemVersion;
    }

    /**
     * Get the sshPublicKeys property: The public key portion of one or more key pairs used for SSH access to the cloud
     * VM cluster.
     * 
     * @return the sshPublicKeys value.
     */
    public List<String> sshPublicKeys() {
        return this.sshPublicKeys;
    }

    /**
     * Set the sshPublicKeys property: The public key portion of one or more key pairs used for SSH access to the cloud
     * VM cluster.
     * 
     * @param sshPublicKeys the sshPublicKeys value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withSshPublicKeys(List<String> sshPublicKeys) {
        this.sshPublicKeys = sshPublicKeys;
        return this;
    }

    /**
     * Get the licenseModel property: The Oracle license model that applies to the cloud VM cluster. The default is
     * LICENSE_INCLUDED.
     * 
     * @return the licenseModel value.
     */
    public LicenseModel licenseModel() {
        return this.licenseModel;
    }

    /**
     * Set the licenseModel property: The Oracle license model that applies to the cloud VM cluster. The default is
     * LICENSE_INCLUDED.
     * 
     * @param licenseModel the licenseModel value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withLicenseModel(LicenseModel licenseModel) {
        this.licenseModel = licenseModel;
        return this;
    }

    /**
     * Get the diskRedundancy property: The type of redundancy configured for the cloud Vm cluster. NORMAL is 2-way
     * redundancy. HIGH is 3-way redundancy.
     * 
     * @return the diskRedundancy value.
     */
    public DiskRedundancy diskRedundancy() {
        return this.diskRedundancy;
    }

    /**
     * Get the scanIpIds property: The Single Client Access Name (SCAN) IP addresses associated with the cloud VM
     * cluster. SCAN IP addresses are typically used for load balancing and are not assigned to any interface. Oracle
     * Clusterware directs the requests to the appropriate nodes in the cluster. **Note:** For a single-node DB system,
     * this list is empty.
     * 
     * @return the scanIpIds value.
     */
    public List<String> scanIpIds() {
        return this.scanIpIds;
    }

    /**
     * Get the vipIds property: The virtual IP (VIP) addresses associated with the cloud VM cluster. The Cluster Ready
     * Services (CRS) creates and maintains one VIP address for each node in the Exadata Cloud Service instance to
     * enable failover. If one node fails, the VIP is reassigned to another active node in the cluster. **Note:** For a
     * single-node DB system, this list is empty.
     * 
     * @return the vipIds value.
     */
    public List<String> vipIds() {
        return this.vipIds;
    }

    /**
     * Get the scanDnsName property: The FQDN of the DNS record for the SCAN IP addresses that are associated with the
     * cloud VM cluster.
     * 
     * @return the scanDnsName value.
     */
    public String scanDnsName() {
        return this.scanDnsName;
    }

    /**
     * Get the scanListenerPortTcp property: The TCP Single Client Access Name (SCAN) port. The default port is 1521.
     * 
     * @return the scanListenerPortTcp value.
     */
    public Integer scanListenerPortTcp() {
        return this.scanListenerPortTcp;
    }

    /**
     * Set the scanListenerPortTcp property: The TCP Single Client Access Name (SCAN) port. The default port is 1521.
     * 
     * @param scanListenerPortTcp the scanListenerPortTcp value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withScanListenerPortTcp(Integer scanListenerPortTcp) {
        this.scanListenerPortTcp = scanListenerPortTcp;
        return this;
    }

    /**
     * Get the scanListenerPortTcpSsl property: The TCPS Single Client Access Name (SCAN) port. The default port is
     * 2484.
     * 
     * @return the scanListenerPortTcpSsl value.
     */
    public Integer scanListenerPortTcpSsl() {
        return this.scanListenerPortTcpSsl;
    }

    /**
     * Set the scanListenerPortTcpSsl property: The TCPS Single Client Access Name (SCAN) port. The default port is
     * 2484.
     * 
     * @param scanListenerPortTcpSsl the scanListenerPortTcpSsl value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withScanListenerPortTcpSsl(Integer scanListenerPortTcpSsl) {
        this.scanListenerPortTcpSsl = scanListenerPortTcpSsl;
        return this;
    }

    /**
     * Get the scanDnsRecordId property: The OCID of the DNS record for the SCAN IP addresses that are associated with
     * the cloud VM cluster.
     * 
     * @return the scanDnsRecordId value.
     */
    public String scanDnsRecordId() {
        return this.scanDnsRecordId;
    }

    /**
     * Get the shape property: The model name of the Exadata hardware running the cloud VM cluster.
     * 
     * @return the shape value.
     */
    public String shape() {
        return this.shape;
    }

    /**
     * Get the provisioningState property: CloudVmCluster provisioning state.
     * 
     * @return the provisioningState value.
     */
    public AzureResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the lifecycleState property: CloudVmCluster lifecycle state.
     * 
     * @return the lifecycleState value.
     */
    public CloudVmClusterLifecycleState lifecycleState() {
        return this.lifecycleState;
    }

    /**
     * Get the vnetId property: VNET for network connectivity.
     * 
     * @return the vnetId value.
     */
    public String vnetId() {
        return this.vnetId;
    }

    /**
     * Set the vnetId property: VNET for network connectivity.
     * 
     * @param vnetId the vnetId value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withVnetId(String vnetId) {
        this.vnetId = vnetId;
        return this;
    }

    /**
     * Get the giVersion property: Oracle Grid Infrastructure (GI) software version.
     * 
     * @return the giVersion value.
     */
    public String giVersion() {
        return this.giVersion;
    }

    /**
     * Set the giVersion property: Oracle Grid Infrastructure (GI) software version.
     * 
     * @param giVersion the giVersion value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withGiVersion(String giVersion) {
        this.giVersion = giVersion;
        return this;
    }

    /**
     * Get the ociUrl property: HTTPS link to OCI resources exposed to Azure Customer via Azure Interface.
     * 
     * @return the ociUrl value.
     */
    public String ociUrl() {
        return this.ociUrl;
    }

    /**
     * Get the nsgUrl property: HTTPS link to OCI Network Security Group exposed to Azure Customer via the Azure
     * Interface.
     * 
     * @return the nsgUrl value.
     */
    public String nsgUrl() {
        return this.nsgUrl;
    }

    /**
     * Get the subnetId property: Client subnet.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: Client subnet.
     * 
     * @param subnetId the subnetId value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the backupSubnetCidr property: Client OCI backup subnet CIDR, default is 192.168.252.0/22.
     * 
     * @return the backupSubnetCidr value.
     */
    public String backupSubnetCidr() {
        return this.backupSubnetCidr;
    }

    /**
     * Set the backupSubnetCidr property: Client OCI backup subnet CIDR, default is 192.168.252.0/22.
     * 
     * @param backupSubnetCidr the backupSubnetCidr value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withBackupSubnetCidr(String backupSubnetCidr) {
        this.backupSubnetCidr = backupSubnetCidr;
        return this;
    }

    /**
     * Get the nsgCidrs property: CIDR blocks for additional NSG ingress rules. The VNET CIDRs used to provision the VM
     * Cluster will be added by default.
     * 
     * @return the nsgCidrs value.
     */
    public List<NsgCidr> nsgCidrs() {
        return this.nsgCidrs;
    }

    /**
     * Set the nsgCidrs property: CIDR blocks for additional NSG ingress rules. The VNET CIDRs used to provision the VM
     * Cluster will be added by default.
     * 
     * @param nsgCidrs the nsgCidrs value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withNsgCidrs(List<NsgCidr> nsgCidrs) {
        this.nsgCidrs = nsgCidrs;
        return this;
    }

    /**
     * Get the dataCollectionOptions property: Indicates user preferences for the various diagnostic collection options
     * for the VM cluster/Cloud VM cluster/VMBM DBCS.
     * 
     * @return the dataCollectionOptions value.
     */
    public DataCollectionOptions dataCollectionOptions() {
        return this.dataCollectionOptions;
    }

    /**
     * Set the dataCollectionOptions property: Indicates user preferences for the various diagnostic collection options
     * for the VM cluster/Cloud VM cluster/VMBM DBCS.
     * 
     * @param dataCollectionOptions the dataCollectionOptions value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withDataCollectionOptions(DataCollectionOptions dataCollectionOptions) {
        this.dataCollectionOptions = dataCollectionOptions;
        return this;
    }

    /**
     * Get the displayName property: Display Name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display Name.
     * 
     * @param displayName the displayName value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the computeNodes property: The list of compute servers to be added to the cloud VM cluster.
     * 
     * @return the computeNodes value.
     */
    public List<String> computeNodes() {
        return this.computeNodes;
    }

    /**
     * Set the computeNodes property: The list of compute servers to be added to the cloud VM cluster.
     * 
     * @param computeNodes the computeNodes value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withComputeNodes(List<String> computeNodes) {
        this.computeNodes = computeNodes;
        return this;
    }

    /**
     * Get the iormConfigCache property: iormConfigCache details for cloud VM cluster.
     * 
     * @return the iormConfigCache value.
     */
    public ExadataIormConfig iormConfigCache() {
        return this.iormConfigCache;
    }

    /**
     * Get the lastUpdateHistoryEntryId property: The OCID of the last maintenance update history entry.
     * 
     * @return the lastUpdateHistoryEntryId value.
     */
    public String lastUpdateHistoryEntryId() {
        return this.lastUpdateHistoryEntryId;
    }

    /**
     * Get the dbServers property: The list of DB servers.
     * 
     * @return the dbServers value.
     */
    public List<String> dbServers() {
        return this.dbServers;
    }

    /**
     * Set the dbServers property: The list of DB servers.
     * 
     * @param dbServers the dbServers value to set.
     * @return the CloudVmClusterProperties object itself.
     */
    public CloudVmClusterProperties withDbServers(List<String> dbServers) {
        this.dbServers = dbServers;
        return this;
    }

    /**
     * Get the compartmentId property: Cluster compartmentId.
     * 
     * @return the compartmentId value.
     */
    public String compartmentId() {
        return this.compartmentId;
    }

    /**
     * Get the subnetOcid property: Cluster subnet ocid.
     * 
     * @return the subnetOcid value.
     */
    public String subnetOcid() {
        return this.subnetOcid;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hostname() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property hostname in model CloudVmClusterProperties"));
        }
        if (cloudExadataInfrastructureId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property cloudExadataInfrastructureId in model CloudVmClusterProperties"));
        }
        if (sshPublicKeys() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sshPublicKeys in model CloudVmClusterProperties"));
        }
        if (vnetId() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property vnetId in model CloudVmClusterProperties"));
        }
        if (giVersion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property giVersion in model CloudVmClusterProperties"));
        }
        if (subnetId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property subnetId in model CloudVmClusterProperties"));
        }
        if (nsgCidrs() != null) {
            nsgCidrs().forEach(e -> e.validate());
        }
        if (dataCollectionOptions() != null) {
            dataCollectionOptions().validate();
        }
        if (displayName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property displayName in model CloudVmClusterProperties"));
        }
        if (iormConfigCache() != null) {
            iormConfigCache().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CloudVmClusterProperties.class);
}
