// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Details for the long-term backup schedule.
 */
@Fluent
public final class LongTermBackUpScheduleDetails implements JsonSerializable<LongTermBackUpScheduleDetails> {
    /*
     * The frequency of the long-term backup schedule
     */
    private RepeatCadenceType repeatCadence;

    /*
     * The timestamp for the long-term backup schedule. For a MONTHLY cadence, months having fewer days than the
     * provided date will have the backup taken on the last day of that month.
     */
    private OffsetDateTime timeOfBackup;

    /*
     * Retention period, in days, for backups.
     */
    private Integer retentionPeriodInDays;

    /*
     * Indicates if the long-term backup schedule should be deleted. The default value is `FALSE`.
     */
    private Boolean isDisabled;

    /**
     * Creates an instance of LongTermBackUpScheduleDetails class.
     */
    public LongTermBackUpScheduleDetails() {
    }

    /**
     * Get the repeatCadence property: The frequency of the long-term backup schedule.
     * 
     * @return the repeatCadence value.
     */
    public RepeatCadenceType repeatCadence() {
        return this.repeatCadence;
    }

    /**
     * Set the repeatCadence property: The frequency of the long-term backup schedule.
     * 
     * @param repeatCadence the repeatCadence value to set.
     * @return the LongTermBackUpScheduleDetails object itself.
     */
    public LongTermBackUpScheduleDetails withRepeatCadence(RepeatCadenceType repeatCadence) {
        this.repeatCadence = repeatCadence;
        return this;
    }

    /**
     * Get the timeOfBackup property: The timestamp for the long-term backup schedule. For a MONTHLY cadence, months
     * having fewer days than the provided date will have the backup taken on the last day of that month.
     * 
     * @return the timeOfBackup value.
     */
    public OffsetDateTime timeOfBackup() {
        return this.timeOfBackup;
    }

    /**
     * Set the timeOfBackup property: The timestamp for the long-term backup schedule. For a MONTHLY cadence, months
     * having fewer days than the provided date will have the backup taken on the last day of that month.
     * 
     * @param timeOfBackup the timeOfBackup value to set.
     * @return the LongTermBackUpScheduleDetails object itself.
     */
    public LongTermBackUpScheduleDetails withTimeOfBackup(OffsetDateTime timeOfBackup) {
        this.timeOfBackup = timeOfBackup;
        return this;
    }

    /**
     * Get the retentionPeriodInDays property: Retention period, in days, for backups.
     * 
     * @return the retentionPeriodInDays value.
     */
    public Integer retentionPeriodInDays() {
        return this.retentionPeriodInDays;
    }

    /**
     * Set the retentionPeriodInDays property: Retention period, in days, for backups.
     * 
     * @param retentionPeriodInDays the retentionPeriodInDays value to set.
     * @return the LongTermBackUpScheduleDetails object itself.
     */
    public LongTermBackUpScheduleDetails withRetentionPeriodInDays(Integer retentionPeriodInDays) {
        this.retentionPeriodInDays = retentionPeriodInDays;
        return this;
    }

    /**
     * Get the isDisabled property: Indicates if the long-term backup schedule should be deleted. The default value is
     * `FALSE`.
     * 
     * @return the isDisabled value.
     */
    public Boolean isDisabled() {
        return this.isDisabled;
    }

    /**
     * Set the isDisabled property: Indicates if the long-term backup schedule should be deleted. The default value is
     * `FALSE`.
     * 
     * @param isDisabled the isDisabled value to set.
     * @return the LongTermBackUpScheduleDetails object itself.
     */
    public LongTermBackUpScheduleDetails withIsDisabled(Boolean isDisabled) {
        this.isDisabled = isDisabled;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("repeatCadence", this.repeatCadence == null ? null : this.repeatCadence.toString());
        jsonWriter.writeStringField("timeOfBackup",
            this.timeOfBackup == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timeOfBackup));
        jsonWriter.writeNumberField("retentionPeriodInDays", this.retentionPeriodInDays);
        jsonWriter.writeBooleanField("isDisabled", this.isDisabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LongTermBackUpScheduleDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LongTermBackUpScheduleDetails if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LongTermBackUpScheduleDetails.
     */
    public static LongTermBackUpScheduleDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LongTermBackUpScheduleDetails deserializedLongTermBackUpScheduleDetails
                = new LongTermBackUpScheduleDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("repeatCadence".equals(fieldName)) {
                    deserializedLongTermBackUpScheduleDetails.repeatCadence
                        = RepeatCadenceType.fromString(reader.getString());
                } else if ("timeOfBackup".equals(fieldName)) {
                    deserializedLongTermBackUpScheduleDetails.timeOfBackup = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("retentionPeriodInDays".equals(fieldName)) {
                    deserializedLongTermBackUpScheduleDetails.retentionPeriodInDays
                        = reader.getNullable(JsonReader::getInt);
                } else if ("isDisabled".equals(fieldName)) {
                    deserializedLongTermBackUpScheduleDetails.isDisabled = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLongTermBackUpScheduleDetails;
        });
    }
}
