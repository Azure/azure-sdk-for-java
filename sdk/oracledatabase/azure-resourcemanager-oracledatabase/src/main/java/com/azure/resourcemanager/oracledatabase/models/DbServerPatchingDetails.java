// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * DbServer Patching Properties.
 */
@Immutable
public final class DbServerPatchingDetails implements JsonSerializable<DbServerPatchingDetails> {
    /*
     * Estimated Patch Duration
     */
    private Integer estimatedPatchDuration;

    /*
     * Patching Status
     */
    private DbServerPatchingStatus patchingStatus;

    /*
     * Time Patching Ended
     */
    private OffsetDateTime timePatchingEnded;

    /*
     * Time Patching Started
     */
    private OffsetDateTime timePatchingStarted;

    /**
     * Creates an instance of DbServerPatchingDetails class.
     */
    public DbServerPatchingDetails() {
    }

    /**
     * Get the estimatedPatchDuration property: Estimated Patch Duration.
     * 
     * @return the estimatedPatchDuration value.
     */
    public Integer estimatedPatchDuration() {
        return this.estimatedPatchDuration;
    }

    /**
     * Get the patchingStatus property: Patching Status.
     * 
     * @return the patchingStatus value.
     */
    public DbServerPatchingStatus patchingStatus() {
        return this.patchingStatus;
    }

    /**
     * Get the timePatchingEnded property: Time Patching Ended.
     * 
     * @return the timePatchingEnded value.
     */
    public OffsetDateTime timePatchingEnded() {
        return this.timePatchingEnded;
    }

    /**
     * Get the timePatchingStarted property: Time Patching Started.
     * 
     * @return the timePatchingStarted value.
     */
    public OffsetDateTime timePatchingStarted() {
        return this.timePatchingStarted;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DbServerPatchingDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DbServerPatchingDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DbServerPatchingDetails.
     */
    public static DbServerPatchingDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DbServerPatchingDetails deserializedDbServerPatchingDetails = new DbServerPatchingDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("estimatedPatchDuration".equals(fieldName)) {
                    deserializedDbServerPatchingDetails.estimatedPatchDuration = reader.getNullable(JsonReader::getInt);
                } else if ("patchingStatus".equals(fieldName)) {
                    deserializedDbServerPatchingDetails.patchingStatus
                        = DbServerPatchingStatus.fromString(reader.getString());
                } else if ("timePatchingEnded".equals(fieldName)) {
                    deserializedDbServerPatchingDetails.timePatchingEnded = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("timePatchingStarted".equals(fieldName)) {
                    deserializedDbServerPatchingDetails.timePatchingStarted = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDbServerPatchingDetails;
        });
    }
}
