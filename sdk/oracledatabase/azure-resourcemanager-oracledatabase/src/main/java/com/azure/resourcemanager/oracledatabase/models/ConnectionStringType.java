// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Connection strings to connect to an Oracle Autonomous Database.
 */
@Fluent
public final class ConnectionStringType {
    /*
     * Returns all connection strings that can be used to connect to the Autonomous Database.
     */
    @JsonProperty(value = "allConnectionStrings")
    private AllConnectionStringType allConnectionStrings;

    /*
     * The database service provides the least level of resources to each SQL statement, but supports the most number of concurrent SQL statements.
     */
    @JsonProperty(value = "dedicated")
    private String dedicated;

    /*
     * The High database service provides the highest level of resources to each SQL statement resulting in the highest performance, but supports the fewest number of concurrent SQL statements.
     */
    @JsonProperty(value = "high")
    private String high;

    /*
     * The Low database service provides the least level of resources to each SQL statement, but supports the most number of concurrent SQL statements.
     */
    @JsonProperty(value = "low")
    private String low;

    /*
     * The Medium database service provides a lower level of resources to each SQL statement potentially resulting a lower level of performance, but supports more concurrent SQL statements.
     */
    @JsonProperty(value = "medium")
    private String medium;

    /*
     * A list of connection string profiles to allow clients to group, filter and select connection string values based on structured metadata.
     */
    @JsonProperty(value = "profiles")
    private List<ProfileType> profiles;

    /**
     * Creates an instance of ConnectionStringType class.
     */
    public ConnectionStringType() {
    }

    /**
     * Get the allConnectionStrings property: Returns all connection strings that can be used to connect to the
     * Autonomous Database.
     * 
     * @return the allConnectionStrings value.
     */
    public AllConnectionStringType allConnectionStrings() {
        return this.allConnectionStrings;
    }

    /**
     * Set the allConnectionStrings property: Returns all connection strings that can be used to connect to the
     * Autonomous Database.
     * 
     * @param allConnectionStrings the allConnectionStrings value to set.
     * @return the ConnectionStringType object itself.
     */
    public ConnectionStringType withAllConnectionStrings(AllConnectionStringType allConnectionStrings) {
        this.allConnectionStrings = allConnectionStrings;
        return this;
    }

    /**
     * Get the dedicated property: The database service provides the least level of resources to each SQL statement, but
     * supports the most number of concurrent SQL statements.
     * 
     * @return the dedicated value.
     */
    public String dedicated() {
        return this.dedicated;
    }

    /**
     * Set the dedicated property: The database service provides the least level of resources to each SQL statement, but
     * supports the most number of concurrent SQL statements.
     * 
     * @param dedicated the dedicated value to set.
     * @return the ConnectionStringType object itself.
     */
    public ConnectionStringType withDedicated(String dedicated) {
        this.dedicated = dedicated;
        return this;
    }

    /**
     * Get the high property: The High database service provides the highest level of resources to each SQL statement
     * resulting in the highest performance, but supports the fewest number of concurrent SQL statements.
     * 
     * @return the high value.
     */
    public String high() {
        return this.high;
    }

    /**
     * Set the high property: The High database service provides the highest level of resources to each SQL statement
     * resulting in the highest performance, but supports the fewest number of concurrent SQL statements.
     * 
     * @param high the high value to set.
     * @return the ConnectionStringType object itself.
     */
    public ConnectionStringType withHigh(String high) {
        this.high = high;
        return this;
    }

    /**
     * Get the low property: The Low database service provides the least level of resources to each SQL statement, but
     * supports the most number of concurrent SQL statements.
     * 
     * @return the low value.
     */
    public String low() {
        return this.low;
    }

    /**
     * Set the low property: The Low database service provides the least level of resources to each SQL statement, but
     * supports the most number of concurrent SQL statements.
     * 
     * @param low the low value to set.
     * @return the ConnectionStringType object itself.
     */
    public ConnectionStringType withLow(String low) {
        this.low = low;
        return this;
    }

    /**
     * Get the medium property: The Medium database service provides a lower level of resources to each SQL statement
     * potentially resulting a lower level of performance, but supports more concurrent SQL statements.
     * 
     * @return the medium value.
     */
    public String medium() {
        return this.medium;
    }

    /**
     * Set the medium property: The Medium database service provides a lower level of resources to each SQL statement
     * potentially resulting a lower level of performance, but supports more concurrent SQL statements.
     * 
     * @param medium the medium value to set.
     * @return the ConnectionStringType object itself.
     */
    public ConnectionStringType withMedium(String medium) {
        this.medium = medium;
        return this;
    }

    /**
     * Get the profiles property: A list of connection string profiles to allow clients to group, filter and select
     * connection string values based on structured metadata.
     * 
     * @return the profiles value.
     */
    public List<ProfileType> profiles() {
        return this.profiles;
    }

    /**
     * Set the profiles property: A list of connection string profiles to allow clients to group, filter and select
     * connection string values based on structured metadata.
     * 
     * @param profiles the profiles value to set.
     * @return the ConnectionStringType object itself.
     */
    public ConnectionStringType withProfiles(List<ProfileType> profiles) {
        this.profiles = profiles;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (allConnectionStrings() != null) {
            allConnectionStrings().validate();
        }
        if (profiles() != null) {
            profiles().forEach(e -> e.validate());
        }
    }
}
