// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * DbSystem resource model.
 */
@Fluent
public final class DbSystemProperties extends DbSystemBaseProperties {
    /*
     * The source of the database: Use `None` for creating a new database. The default is `None`.
     */
    private DbSystemSourceType source = DbSystemSourceType.NONE;

    /*
     * The Oracle Database Edition that applies to all the databases on the DB system. Exadata DB systems and 2-node RAC
     * DB systems require EnterpriseEditionExtremePerformance.
     */
    private DbSystemDatabaseEditionType databaseEdition;

    /*
     * A strong password for SYS, SYSTEM, and PDB Admin. The password must be at least nine characters and contain at
     * least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, #,
     * or -.
     */
    private String adminPassword;

    /*
     * A valid Oracle Database version. For a list of supported versions, use the ListDbVersions operation.
     */
    private String dbVersion;

    /*
     * The name of the pluggable database. The name must begin with an alphabetic character and can contain a maximum of
     * thirty alphanumeric characters. Special characters are not permitted. Pluggable database should not be same as
     * database name.
     */
    private String pdbName;

    /**
     * Creates an instance of DbSystemProperties class.
     */
    public DbSystemProperties() {
    }

    /**
     * Get the source property: The source of the database: Use `None` for creating a new database. The default is
     * `None`.
     * 
     * @return the source value.
     */
    @Override
    public DbSystemSourceType source() {
        return this.source;
    }

    /**
     * Get the databaseEdition property: The Oracle Database Edition that applies to all the databases on the DB system.
     * Exadata DB systems and 2-node RAC DB systems require EnterpriseEditionExtremePerformance.
     * 
     * @return the databaseEdition value.
     */
    public DbSystemDatabaseEditionType databaseEdition() {
        return this.databaseEdition;
    }

    /**
     * Set the databaseEdition property: The Oracle Database Edition that applies to all the databases on the DB system.
     * Exadata DB systems and 2-node RAC DB systems require EnterpriseEditionExtremePerformance.
     * 
     * @param databaseEdition the databaseEdition value to set.
     * @return the DbSystemProperties object itself.
     */
    public DbSystemProperties withDatabaseEdition(DbSystemDatabaseEditionType databaseEdition) {
        this.databaseEdition = databaseEdition;
        return this;
    }

    /**
     * Get the adminPassword property: A strong password for SYS, SYSTEM, and PDB Admin. The password must be at least
     * nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The
     * special characters must be _, #, or -.
     * 
     * @return the adminPassword value.
     */
    public String adminPassword() {
        return this.adminPassword;
    }

    /**
     * Set the adminPassword property: A strong password for SYS, SYSTEM, and PDB Admin. The password must be at least
     * nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The
     * special characters must be _, #, or -.
     * 
     * @param adminPassword the adminPassword value to set.
     * @return the DbSystemProperties object itself.
     */
    public DbSystemProperties withAdminPassword(String adminPassword) {
        this.adminPassword = adminPassword;
        return this;
    }

    /**
     * Get the dbVersion property: A valid Oracle Database version. For a list of supported versions, use the
     * ListDbVersions operation.
     * 
     * @return the dbVersion value.
     */
    public String dbVersion() {
        return this.dbVersion;
    }

    /**
     * Set the dbVersion property: A valid Oracle Database version. For a list of supported versions, use the
     * ListDbVersions operation.
     * 
     * @param dbVersion the dbVersion value to set.
     * @return the DbSystemProperties object itself.
     */
    public DbSystemProperties withDbVersion(String dbVersion) {
        this.dbVersion = dbVersion;
        return this;
    }

    /**
     * Get the pdbName property: The name of the pluggable database. The name must begin with an alphabetic character
     * and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable
     * database should not be same as database name.
     * 
     * @return the pdbName value.
     */
    public String pdbName() {
        return this.pdbName;
    }

    /**
     * Set the pdbName property: The name of the pluggable database. The name must begin with an alphabetic character
     * and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. Pluggable
     * database should not be same as database name.
     * 
     * @param pdbName the pdbName value to set.
     * @return the DbSystemProperties object itself.
     */
    public DbSystemProperties withPdbName(String pdbName) {
        this.pdbName = pdbName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbSystemProperties withResourceAnchorId(String resourceAnchorId) {
        super.withResourceAnchorId(resourceAnchorId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbSystemProperties withNetworkAnchorId(String networkAnchorId) {
        super.withNetworkAnchorId(networkAnchorId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbSystemProperties withClusterName(String clusterName) {
        super.withClusterName(clusterName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbSystemProperties withDisplayName(String displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbSystemProperties withInitialDataStorageSizeInGb(Integer initialDataStorageSizeInGb) {
        super.withInitialDataStorageSizeInGb(initialDataStorageSizeInGb);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbSystemProperties withDbSystemOptions(DbSystemOptions dbSystemOptions) {
        super.withDbSystemOptions(dbSystemOptions);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbSystemProperties withDiskRedundancy(DiskRedundancyType diskRedundancy) {
        super.withDiskRedundancy(diskRedundancy);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbSystemProperties withDomainV2(String domainV2) {
        super.withDomainV2(domainV2);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbSystemProperties withHostname(String hostname) {
        super.withHostname(hostname);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbSystemProperties withLicenseModelV2(LicenseModel licenseModelV2) {
        super.withLicenseModelV2(licenseModelV2);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbSystemProperties withNodeCount(Integer nodeCount) {
        super.withNodeCount(nodeCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbSystemProperties withShape(String shape) {
        super.withShape(shape);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbSystemProperties withSshPublicKeys(List<String> sshPublicKeys) {
        super.withSshPublicKeys(sshPublicKeys);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbSystemProperties
        withStorageVolumePerformanceMode(StorageVolumePerformanceMode storageVolumePerformanceMode) {
        super.withStorageVolumePerformanceMode(storageVolumePerformanceMode);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbSystemProperties withTimeZone(String timeZone) {
        super.withTimeZone(timeZone);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbSystemProperties withComputeModel(ComputeModel computeModel) {
        super.withComputeModel(computeModel);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbSystemProperties withComputeCount(Integer computeCount) {
        super.withComputeCount(computeCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceAnchorId", resourceAnchorId());
        jsonWriter.writeStringField("networkAnchorId", networkAnchorId());
        jsonWriter.writeStringField("hostname", hostname());
        jsonWriter.writeStringField("shape", shape());
        jsonWriter.writeArrayField("sshPublicKeys", sshPublicKeys(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("clusterName", clusterName());
        jsonWriter.writeStringField("displayName", displayName());
        jsonWriter.writeNumberField("initialDataStorageSizeInGb", initialDataStorageSizeInGb());
        jsonWriter.writeJsonField("dbSystemOptions", dbSystemOptions());
        jsonWriter.writeStringField("diskRedundancy", diskRedundancy() == null ? null : diskRedundancy().toString());
        jsonWriter.writeStringField("domain", domainV2());
        jsonWriter.writeStringField("licenseModel", licenseModelV2() == null ? null : licenseModelV2().toString());
        jsonWriter.writeNumberField("nodeCount", nodeCount());
        jsonWriter.writeStringField("storageVolumePerformanceMode",
            storageVolumePerformanceMode() == null ? null : storageVolumePerformanceMode().toString());
        jsonWriter.writeStringField("timeZone", timeZone());
        jsonWriter.writeStringField("computeModel", computeModel() == null ? null : computeModel().toString());
        jsonWriter.writeNumberField("computeCount", computeCount());
        jsonWriter.writeStringField("databaseEdition",
            this.databaseEdition == null ? null : this.databaseEdition.toString());
        jsonWriter.writeStringField("dbVersion", this.dbVersion);
        jsonWriter.writeStringField("source", this.source == null ? null : this.source.toString());
        jsonWriter.writeStringField("adminPassword", this.adminPassword);
        jsonWriter.writeStringField("pdbName", this.pdbName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DbSystemProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DbSystemProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DbSystemProperties.
     */
    public static DbSystemProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DbSystemProperties deserializedDbSystemProperties = new DbSystemProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceAnchorId".equals(fieldName)) {
                    deserializedDbSystemProperties.withResourceAnchorId(reader.getString());
                } else if ("networkAnchorId".equals(fieldName)) {
                    deserializedDbSystemProperties.withNetworkAnchorId(reader.getString());
                } else if ("hostname".equals(fieldName)) {
                    deserializedDbSystemProperties.withHostname(reader.getString());
                } else if ("shape".equals(fieldName)) {
                    deserializedDbSystemProperties.withShape(reader.getString());
                } else if ("sshPublicKeys".equals(fieldName)) {
                    List<String> sshPublicKeys = reader.readArray(reader1 -> reader1.getString());
                    deserializedDbSystemProperties.withSshPublicKeys(sshPublicKeys);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDbSystemProperties
                        .withProvisioningState(AzureResourceProvisioningState.fromString(reader.getString()));
                } else if ("ociUrl".equals(fieldName)) {
                    deserializedDbSystemProperties.withOciUrl(reader.getString());
                } else if ("clusterName".equals(fieldName)) {
                    deserializedDbSystemProperties.withClusterName(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedDbSystemProperties.withDisplayName(reader.getString());
                } else if ("initialDataStorageSizeInGb".equals(fieldName)) {
                    deserializedDbSystemProperties
                        .withInitialDataStorageSizeInGb(reader.getNullable(JsonReader::getInt));
                } else if ("dataStorageSizeInGbs".equals(fieldName)) {
                    deserializedDbSystemProperties.withDataStorageSizeInGbs(reader.getNullable(JsonReader::getInt));
                } else if ("dbSystemOptions".equals(fieldName)) {
                    deserializedDbSystemProperties.withDbSystemOptions(DbSystemOptions.fromJson(reader));
                } else if ("diskRedundancy".equals(fieldName)) {
                    deserializedDbSystemProperties
                        .withDiskRedundancy(DiskRedundancyType.fromString(reader.getString()));
                } else if ("domain".equals(fieldName)) {
                    deserializedDbSystemProperties.withDomainV2(reader.getString());
                } else if ("gridImageOcid".equals(fieldName)) {
                    deserializedDbSystemProperties.withGridImageOcid(reader.getString());
                } else if ("ocid".equals(fieldName)) {
                    deserializedDbSystemProperties.withOcid(reader.getString());
                } else if ("licenseModel".equals(fieldName)) {
                    deserializedDbSystemProperties.withLicenseModelV2(LicenseModel.fromString(reader.getString()));
                } else if ("lifecycleDetails".equals(fieldName)) {
                    deserializedDbSystemProperties.withLifecycleDetails(reader.getString());
                } else if ("lifecycleState".equals(fieldName)) {
                    deserializedDbSystemProperties
                        .withLifecycleState(DbSystemLifecycleState.fromString(reader.getString()));
                } else if ("listenerPort".equals(fieldName)) {
                    deserializedDbSystemProperties.withListenerPort(reader.getNullable(JsonReader::getInt));
                } else if ("memorySizeInGbs".equals(fieldName)) {
                    deserializedDbSystemProperties.withMemorySizeInGbs(reader.getNullable(JsonReader::getInt));
                } else if ("nodeCount".equals(fieldName)) {
                    deserializedDbSystemProperties.withNodeCount(reader.getNullable(JsonReader::getInt));
                } else if ("scanDnsName".equals(fieldName)) {
                    deserializedDbSystemProperties.withScanDnsName(reader.getString());
                } else if ("scanIps".equals(fieldName)) {
                    List<String> scanIps = reader.readArray(reader1 -> reader1.getString());
                    deserializedDbSystemProperties.withScanIps(scanIps);
                } else if ("storageVolumePerformanceMode".equals(fieldName)) {
                    deserializedDbSystemProperties
                        .withStorageVolumePerformanceMode(StorageVolumePerformanceMode.fromString(reader.getString()));
                } else if ("timeZone".equals(fieldName)) {
                    deserializedDbSystemProperties.withTimeZone(reader.getString());
                } else if ("version".equals(fieldName)) {
                    deserializedDbSystemProperties.withVersion(reader.getString());
                } else if ("computeModel".equals(fieldName)) {
                    deserializedDbSystemProperties.withComputeModel(ComputeModel.fromString(reader.getString()));
                } else if ("computeCount".equals(fieldName)) {
                    deserializedDbSystemProperties.withComputeCount(reader.getNullable(JsonReader::getInt));
                } else if ("databaseEdition".equals(fieldName)) {
                    deserializedDbSystemProperties.databaseEdition
                        = DbSystemDatabaseEditionType.fromString(reader.getString());
                } else if ("dbVersion".equals(fieldName)) {
                    deserializedDbSystemProperties.dbVersion = reader.getString();
                } else if ("source".equals(fieldName)) {
                    deserializedDbSystemProperties.source = DbSystemSourceType.fromString(reader.getString());
                } else if ("adminPassword".equals(fieldName)) {
                    deserializedDbSystemProperties.adminPassword = reader.getString();
                } else if ("pdbName".equals(fieldName)) {
                    deserializedDbSystemProperties.pdbName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDbSystemProperties;
        });
    }
}
