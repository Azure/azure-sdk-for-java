// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * ExascaleDbStorageVault resource model.
 */
@Fluent
public final class ExascaleDbStorageVaultProperties implements JsonSerializable<ExascaleDbStorageVaultProperties> {
    /*
     * The size of additional Flash Cache in percentage of High Capacity database storage.
     */
    private Integer additionalFlashCacheInPercent;

    /*
     * Exadata Database Storage Vault description.
     */
    private String description;

    /*
     * The user-friendly name for the Exadata Database Storage Vault. The name does not need to be unique.
     */
    private String displayName;

    /*
     * Create exadata Database Storage Details
     */
    private ExascaleDbStorageInputDetails highCapacityDatabaseStorageInput;

    /*
     * Response exadata Database Storage Details
     */
    private ExascaleDbStorageDetails highCapacityDatabaseStorage;

    /*
     * The time zone that you want to use for the Exadata Database Storage Vault
     */
    private String timeZone;

    /*
     * Exadata Database Storage Vault provisioning state
     */
    private AzureResourceProvisioningState provisioningState;

    /*
     * Exadata Database Storage Vault lifecycle state
     */
    private ExascaleDbStorageVaultLifecycleState lifecycleState;

    /*
     * Additional information about the current lifecycle state.
     */
    private String lifecycleDetails;

    /*
     * The number of Exadata VM clusters used the Exadata Database Storage Vault.
     */
    private Integer vmClusterCount;

    /*
     * The OCID of the Exadata Database Storage Vault.
     */
    private String ocid;

    /*
     * HTTPS link to OCI resources exposed to Azure Customer via Azure Interface.
     */
    private String ociUrl;

    /**
     * Creates an instance of ExascaleDbStorageVaultProperties class.
     */
    public ExascaleDbStorageVaultProperties() {
    }

    /**
     * Get the additionalFlashCacheInPercent property: The size of additional Flash Cache in percentage of High Capacity
     * database storage.
     * 
     * @return the additionalFlashCacheInPercent value.
     */
    public Integer additionalFlashCacheInPercent() {
        return this.additionalFlashCacheInPercent;
    }

    /**
     * Set the additionalFlashCacheInPercent property: The size of additional Flash Cache in percentage of High Capacity
     * database storage.
     * 
     * @param additionalFlashCacheInPercent the additionalFlashCacheInPercent value to set.
     * @return the ExascaleDbStorageVaultProperties object itself.
     */
    public ExascaleDbStorageVaultProperties withAdditionalFlashCacheInPercent(Integer additionalFlashCacheInPercent) {
        this.additionalFlashCacheInPercent = additionalFlashCacheInPercent;
        return this;
    }

    /**
     * Get the description property: Exadata Database Storage Vault description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Exadata Database Storage Vault description.
     * 
     * @param description the description value to set.
     * @return the ExascaleDbStorageVaultProperties object itself.
     */
    public ExascaleDbStorageVaultProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the displayName property: The user-friendly name for the Exadata Database Storage Vault. The name does not
     * need to be unique.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The user-friendly name for the Exadata Database Storage Vault. The name does not
     * need to be unique.
     * 
     * @param displayName the displayName value to set.
     * @return the ExascaleDbStorageVaultProperties object itself.
     */
    public ExascaleDbStorageVaultProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the highCapacityDatabaseStorageInput property: Create exadata Database Storage Details.
     * 
     * @return the highCapacityDatabaseStorageInput value.
     */
    public ExascaleDbStorageInputDetails highCapacityDatabaseStorageInput() {
        return this.highCapacityDatabaseStorageInput;
    }

    /**
     * Set the highCapacityDatabaseStorageInput property: Create exadata Database Storage Details.
     * 
     * @param highCapacityDatabaseStorageInput the highCapacityDatabaseStorageInput value to set.
     * @return the ExascaleDbStorageVaultProperties object itself.
     */
    public ExascaleDbStorageVaultProperties
        withHighCapacityDatabaseStorageInput(ExascaleDbStorageInputDetails highCapacityDatabaseStorageInput) {
        this.highCapacityDatabaseStorageInput = highCapacityDatabaseStorageInput;
        return this;
    }

    /**
     * Get the highCapacityDatabaseStorage property: Response exadata Database Storage Details.
     * 
     * @return the highCapacityDatabaseStorage value.
     */
    public ExascaleDbStorageDetails highCapacityDatabaseStorage() {
        return this.highCapacityDatabaseStorage;
    }

    /**
     * Get the timeZone property: The time zone that you want to use for the Exadata Database Storage Vault.
     * 
     * @return the timeZone value.
     */
    public String timeZone() {
        return this.timeZone;
    }

    /**
     * Set the timeZone property: The time zone that you want to use for the Exadata Database Storage Vault.
     * 
     * @param timeZone the timeZone value to set.
     * @return the ExascaleDbStorageVaultProperties object itself.
     */
    public ExascaleDbStorageVaultProperties withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }

    /**
     * Get the provisioningState property: Exadata Database Storage Vault provisioning state.
     * 
     * @return the provisioningState value.
     */
    public AzureResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the lifecycleState property: Exadata Database Storage Vault lifecycle state.
     * 
     * @return the lifecycleState value.
     */
    public ExascaleDbStorageVaultLifecycleState lifecycleState() {
        return this.lifecycleState;
    }

    /**
     * Get the lifecycleDetails property: Additional information about the current lifecycle state.
     * 
     * @return the lifecycleDetails value.
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }

    /**
     * Get the vmClusterCount property: The number of Exadata VM clusters used the Exadata Database Storage Vault.
     * 
     * @return the vmClusterCount value.
     */
    public Integer vmClusterCount() {
        return this.vmClusterCount;
    }

    /**
     * Get the ocid property: The OCID of the Exadata Database Storage Vault.
     * 
     * @return the ocid value.
     */
    public String ocid() {
        return this.ocid;
    }

    /**
     * Get the ociUrl property: HTTPS link to OCI resources exposed to Azure Customer via Azure Interface.
     * 
     * @return the ociUrl value.
     */
    public String ociUrl() {
        return this.ociUrl;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (displayName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property displayName in model ExascaleDbStorageVaultProperties"));
        }
        if (highCapacityDatabaseStorageInput() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property highCapacityDatabaseStorageInput in model ExascaleDbStorageVaultProperties"));
        } else {
            highCapacityDatabaseStorageInput().validate();
        }
        if (highCapacityDatabaseStorage() != null) {
            highCapacityDatabaseStorage().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExascaleDbStorageVaultProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeJsonField("highCapacityDatabaseStorageInput", this.highCapacityDatabaseStorageInput);
        jsonWriter.writeNumberField("additionalFlashCacheInPercent", this.additionalFlashCacheInPercent);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("timeZone", this.timeZone);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExascaleDbStorageVaultProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExascaleDbStorageVaultProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExascaleDbStorageVaultProperties.
     */
    public static ExascaleDbStorageVaultProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExascaleDbStorageVaultProperties deserializedExascaleDbStorageVaultProperties
                = new ExascaleDbStorageVaultProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedExascaleDbStorageVaultProperties.displayName = reader.getString();
                } else if ("highCapacityDatabaseStorageInput".equals(fieldName)) {
                    deserializedExascaleDbStorageVaultProperties.highCapacityDatabaseStorageInput
                        = ExascaleDbStorageInputDetails.fromJson(reader);
                } else if ("additionalFlashCacheInPercent".equals(fieldName)) {
                    deserializedExascaleDbStorageVaultProperties.additionalFlashCacheInPercent
                        = reader.getNullable(JsonReader::getInt);
                } else if ("description".equals(fieldName)) {
                    deserializedExascaleDbStorageVaultProperties.description = reader.getString();
                } else if ("highCapacityDatabaseStorage".equals(fieldName)) {
                    deserializedExascaleDbStorageVaultProperties.highCapacityDatabaseStorage
                        = ExascaleDbStorageDetails.fromJson(reader);
                } else if ("timeZone".equals(fieldName)) {
                    deserializedExascaleDbStorageVaultProperties.timeZone = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedExascaleDbStorageVaultProperties.provisioningState
                        = AzureResourceProvisioningState.fromString(reader.getString());
                } else if ("lifecycleState".equals(fieldName)) {
                    deserializedExascaleDbStorageVaultProperties.lifecycleState
                        = ExascaleDbStorageVaultLifecycleState.fromString(reader.getString());
                } else if ("lifecycleDetails".equals(fieldName)) {
                    deserializedExascaleDbStorageVaultProperties.lifecycleDetails = reader.getString();
                } else if ("vmClusterCount".equals(fieldName)) {
                    deserializedExascaleDbStorageVaultProperties.vmClusterCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("ocid".equals(fieldName)) {
                    deserializedExascaleDbStorageVaultProperties.ocid = reader.getString();
                } else if ("ociUrl".equals(fieldName)) {
                    deserializedExascaleDbStorageVaultProperties.ociUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExascaleDbStorageVaultProperties;
        });
    }
}
