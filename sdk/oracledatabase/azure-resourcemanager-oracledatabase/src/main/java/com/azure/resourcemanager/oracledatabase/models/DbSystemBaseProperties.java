// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * DbSystem resource base model.
 */
@Fluent
public class DbSystemBaseProperties implements JsonSerializable<DbSystemBaseProperties> {
    /*
     * The source of the database: Use `None` for creating a new database. The default is `None`.
     */
    private DbSystemSourceType source = DbSystemSourceType.fromString("DbSystemBaseProperties");

    /*
     * dbSystem provisioning state
     */
    private AzureResourceProvisioningState provisioningState;

    /*
     * HTTPS link to OCI resources exposed to Azure Customer via Azure Interface.
     */
    private String ociUrl;

    /*
     * Azure Resource Anchor ID
     */
    private String resourceAnchorId;

    /*
     * Azure Network Anchor ID
     */
    private String networkAnchorId;

    /*
     * The cluster name for Exadata and 2-node RAC virtual machine DB systems. The cluster name must begin with an
     * alphabetic character, and may contain hyphens (-). Underscores (_) are not permitted. The cluster name can be no
     * longer than 11 characters and is not case sensitive.
     */
    private String clusterName;

    /*
     * The user-friendly name for the DB system. The name does not have to be unique.
     */
    private String displayName;

    /*
     * Size in GB of the initial data volume that will be created and attached to a virtual machine DB system. You can
     * scale up storage after provisioning, as needed. Note that the total storage size attached will be more than the
     * amount you specify to allow for REDO/RECO space and software volume.
     */
    private Integer initialDataStorageSizeInGb;

    /*
     * The data storage size, in gigabytes, that is currently available to the DB system. Applies only for virtual
     * machine DB systems.
     */
    private Integer dataStorageSizeInGbs;

    /*
     * The DB system options.
     */
    private DbSystemOptions dbSystemOptions;

    /*
     * The type of redundancy configured for the DB system. NORMAL is 2-way redundancy. HIGH is 3-way redundancy.
     */
    private DiskRedundancyType diskRedundancy;

    /*
     * The domain name for the DB system.
     */
    private String domainV2;

    /*
     * The OCID of a grid infrastructure software image. This is a database software image of the type GRID_IMAGE.
     */
    private String gridImageOcid;

    /*
     * The hostname for the DB system.
     */
    private String hostname;

    /*
     * The OCID of the DB system.
     */
    private String ocid;

    /*
     * The Oracle license model that applies to all the databases on the DB system. The default is LicenseIncluded.
     */
    private LicenseModel licenseModelV2;

    /*
     * Additional information about the current lifecycle state.
     */
    private String lifecycleDetails;

    /*
     * The current state of the DB system.
     */
    private DbSystemLifecycleState lifecycleState;

    /*
     * The port number configured for the listener on the DB system.
     */
    private Integer listenerPort;

    /*
     * Memory allocated to the DB system, in gigabytes.
     */
    private Integer memorySizeInGbs;

    /*
     * The number of nodes in the DB system. For RAC DB systems, the value is greater than 1.
     */
    private Integer nodeCount;

    /*
     * The FQDN of the DNS record for the SCAN IP addresses that are associated with the DB system.
     */
    private String scanDnsName;

    /*
     * The list of Single Client Access Name (SCAN) IP addresses associated with the DB system. SCAN IP addresses are
     * typically used for load balancing and are not assigned to any interface. Oracle Clusterware directs the requests
     * to the appropriate nodes in the cluster. Note: For a single-node DB system, this list is empty.
     */
    private List<String> scanIps;

    /*
     * The shape of the DB system. The shape determines resources to allocate to the DB system. For virtual machine
     * shapes, the number of CPU cores and memory. For bare metal and Exadata shapes, the number of CPU cores, storage,
     * and memory.
     */
    private String shape;

    /*
     * The public key portion of one or more key pairs used for SSH access to the DB system.
     */
    private List<String> sshPublicKeys;

    /*
     * The block storage volume performance level. Valid values are Balanced and HighPerformance. See [Block Volume
     * Performance](/Content/Block/Concepts/blockvolumeperformance.htm) for more information.
     */
    private StorageVolumePerformanceMode storageVolumePerformanceMode;

    /*
     * The time zone of the DB system, e.g., UTC, to set the timeZone as UTC.
     */
    private String timeZone;

    /*
     * The Oracle Database version of the DB system.
     */
    private String version;

    /*
     * The compute model for Base Database Service. This is required if using the `computeCount` parameter. If using
     * `cpuCoreCount` then it is an error to specify `computeModel` to a non-null value. The ECPU compute model is the
     * recommended model, and the OCPU compute model is legacy.
     */
    private ComputeModel computeModel;

    /*
     * The number of compute servers for the DB system.
     */
    private Integer computeCount;

    /**
     * Creates an instance of DbSystemBaseProperties class.
     */
    public DbSystemBaseProperties() {
    }

    /**
     * Get the source property: The source of the database: Use `None` for creating a new database. The default is
     * `None`.
     * 
     * @return the source value.
     */
    public DbSystemSourceType source() {
        return this.source;
    }

    /**
     * Get the provisioningState property: dbSystem provisioning state.
     * 
     * @return the provisioningState value.
     */
    public AzureResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: dbSystem provisioning state.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    DbSystemBaseProperties withProvisioningState(AzureResourceProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the ociUrl property: HTTPS link to OCI resources exposed to Azure Customer via Azure Interface.
     * 
     * @return the ociUrl value.
     */
    public String ociUrl() {
        return this.ociUrl;
    }

    /**
     * Set the ociUrl property: HTTPS link to OCI resources exposed to Azure Customer via Azure Interface.
     * 
     * @param ociUrl the ociUrl value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    DbSystemBaseProperties withOciUrl(String ociUrl) {
        this.ociUrl = ociUrl;
        return this;
    }

    /**
     * Get the resourceAnchorId property: Azure Resource Anchor ID.
     * 
     * @return the resourceAnchorId value.
     */
    public String resourceAnchorId() {
        return this.resourceAnchorId;
    }

    /**
     * Set the resourceAnchorId property: Azure Resource Anchor ID.
     * 
     * @param resourceAnchorId the resourceAnchorId value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    public DbSystemBaseProperties withResourceAnchorId(String resourceAnchorId) {
        this.resourceAnchorId = resourceAnchorId;
        return this;
    }

    /**
     * Get the networkAnchorId property: Azure Network Anchor ID.
     * 
     * @return the networkAnchorId value.
     */
    public String networkAnchorId() {
        return this.networkAnchorId;
    }

    /**
     * Set the networkAnchorId property: Azure Network Anchor ID.
     * 
     * @param networkAnchorId the networkAnchorId value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    public DbSystemBaseProperties withNetworkAnchorId(String networkAnchorId) {
        this.networkAnchorId = networkAnchorId;
        return this;
    }

    /**
     * Get the clusterName property: The cluster name for Exadata and 2-node RAC virtual machine DB systems. The cluster
     * name must begin with an alphabetic character, and may contain hyphens (-). Underscores (_) are not permitted. The
     * cluster name can be no longer than 11 characters and is not case sensitive.
     * 
     * @return the clusterName value.
     */
    public String clusterName() {
        return this.clusterName;
    }

    /**
     * Set the clusterName property: The cluster name for Exadata and 2-node RAC virtual machine DB systems. The cluster
     * name must begin with an alphabetic character, and may contain hyphens (-). Underscores (_) are not permitted. The
     * cluster name can be no longer than 11 characters and is not case sensitive.
     * 
     * @param clusterName the clusterName value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    public DbSystemBaseProperties withClusterName(String clusterName) {
        this.clusterName = clusterName;
        return this;
    }

    /**
     * Get the displayName property: The user-friendly name for the DB system. The name does not have to be unique.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The user-friendly name for the DB system. The name does not have to be unique.
     * 
     * @param displayName the displayName value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    public DbSystemBaseProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the initialDataStorageSizeInGb property: Size in GB of the initial data volume that will be created and
     * attached to a virtual machine DB system. You can scale up storage after provisioning, as needed. Note that the
     * total storage size attached will be more than the amount you specify to allow for REDO/RECO space and software
     * volume.
     * 
     * @return the initialDataStorageSizeInGb value.
     */
    public Integer initialDataStorageSizeInGb() {
        return this.initialDataStorageSizeInGb;
    }

    /**
     * Set the initialDataStorageSizeInGb property: Size in GB of the initial data volume that will be created and
     * attached to a virtual machine DB system. You can scale up storage after provisioning, as needed. Note that the
     * total storage size attached will be more than the amount you specify to allow for REDO/RECO space and software
     * volume.
     * 
     * @param initialDataStorageSizeInGb the initialDataStorageSizeInGb value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    public DbSystemBaseProperties withInitialDataStorageSizeInGb(Integer initialDataStorageSizeInGb) {
        this.initialDataStorageSizeInGb = initialDataStorageSizeInGb;
        return this;
    }

    /**
     * Get the dataStorageSizeInGbs property: The data storage size, in gigabytes, that is currently available to the DB
     * system. Applies only for virtual machine DB systems.
     * 
     * @return the dataStorageSizeInGbs value.
     */
    public Integer dataStorageSizeInGbs() {
        return this.dataStorageSizeInGbs;
    }

    /**
     * Set the dataStorageSizeInGbs property: The data storage size, in gigabytes, that is currently available to the DB
     * system. Applies only for virtual machine DB systems.
     * 
     * @param dataStorageSizeInGbs the dataStorageSizeInGbs value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    DbSystemBaseProperties withDataStorageSizeInGbs(Integer dataStorageSizeInGbs) {
        this.dataStorageSizeInGbs = dataStorageSizeInGbs;
        return this;
    }

    /**
     * Get the dbSystemOptions property: The DB system options.
     * 
     * @return the dbSystemOptions value.
     */
    public DbSystemOptions dbSystemOptions() {
        return this.dbSystemOptions;
    }

    /**
     * Set the dbSystemOptions property: The DB system options.
     * 
     * @param dbSystemOptions the dbSystemOptions value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    public DbSystemBaseProperties withDbSystemOptions(DbSystemOptions dbSystemOptions) {
        this.dbSystemOptions = dbSystemOptions;
        return this;
    }

    /**
     * Get the diskRedundancy property: The type of redundancy configured for the DB system. NORMAL is 2-way redundancy.
     * HIGH is 3-way redundancy.
     * 
     * @return the diskRedundancy value.
     */
    public DiskRedundancyType diskRedundancy() {
        return this.diskRedundancy;
    }

    /**
     * Set the diskRedundancy property: The type of redundancy configured for the DB system. NORMAL is 2-way redundancy.
     * HIGH is 3-way redundancy.
     * 
     * @param diskRedundancy the diskRedundancy value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    public DbSystemBaseProperties withDiskRedundancy(DiskRedundancyType diskRedundancy) {
        this.diskRedundancy = diskRedundancy;
        return this;
    }

    /**
     * Get the domainV2 property: The domain name for the DB system.
     * 
     * @return the domainV2 value.
     */
    public String domainV2() {
        return this.domainV2;
    }

    /**
     * Set the domainV2 property: The domain name for the DB system.
     * 
     * @param domainV2 the domainV2 value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    public DbSystemBaseProperties withDomainV2(String domainV2) {
        this.domainV2 = domainV2;
        return this;
    }

    /**
     * Get the gridImageOcid property: The OCID of a grid infrastructure software image. This is a database software
     * image of the type GRID_IMAGE.
     * 
     * @return the gridImageOcid value.
     */
    public String gridImageOcid() {
        return this.gridImageOcid;
    }

    /**
     * Set the gridImageOcid property: The OCID of a grid infrastructure software image. This is a database software
     * image of the type GRID_IMAGE.
     * 
     * @param gridImageOcid the gridImageOcid value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    DbSystemBaseProperties withGridImageOcid(String gridImageOcid) {
        this.gridImageOcid = gridImageOcid;
        return this;
    }

    /**
     * Get the hostname property: The hostname for the DB system.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: The hostname for the DB system.
     * 
     * @param hostname the hostname value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    public DbSystemBaseProperties withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the ocid property: The OCID of the DB system.
     * 
     * @return the ocid value.
     */
    public String ocid() {
        return this.ocid;
    }

    /**
     * Set the ocid property: The OCID of the DB system.
     * 
     * @param ocid the ocid value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    DbSystemBaseProperties withOcid(String ocid) {
        this.ocid = ocid;
        return this;
    }

    /**
     * Get the licenseModelV2 property: The Oracle license model that applies to all the databases on the DB system. The
     * default is LicenseIncluded.
     * 
     * @return the licenseModelV2 value.
     */
    public LicenseModel licenseModelV2() {
        return this.licenseModelV2;
    }

    /**
     * Set the licenseModelV2 property: The Oracle license model that applies to all the databases on the DB system. The
     * default is LicenseIncluded.
     * 
     * @param licenseModelV2 the licenseModelV2 value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    public DbSystemBaseProperties withLicenseModelV2(LicenseModel licenseModelV2) {
        this.licenseModelV2 = licenseModelV2;
        return this;
    }

    /**
     * Get the lifecycleDetails property: Additional information about the current lifecycle state.
     * 
     * @return the lifecycleDetails value.
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }

    /**
     * Set the lifecycleDetails property: Additional information about the current lifecycle state.
     * 
     * @param lifecycleDetails the lifecycleDetails value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    DbSystemBaseProperties withLifecycleDetails(String lifecycleDetails) {
        this.lifecycleDetails = lifecycleDetails;
        return this;
    }

    /**
     * Get the lifecycleState property: The current state of the DB system.
     * 
     * @return the lifecycleState value.
     */
    public DbSystemLifecycleState lifecycleState() {
        return this.lifecycleState;
    }

    /**
     * Set the lifecycleState property: The current state of the DB system.
     * 
     * @param lifecycleState the lifecycleState value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    DbSystemBaseProperties withLifecycleState(DbSystemLifecycleState lifecycleState) {
        this.lifecycleState = lifecycleState;
        return this;
    }

    /**
     * Get the listenerPort property: The port number configured for the listener on the DB system.
     * 
     * @return the listenerPort value.
     */
    public Integer listenerPort() {
        return this.listenerPort;
    }

    /**
     * Set the listenerPort property: The port number configured for the listener on the DB system.
     * 
     * @param listenerPort the listenerPort value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    DbSystemBaseProperties withListenerPort(Integer listenerPort) {
        this.listenerPort = listenerPort;
        return this;
    }

    /**
     * Get the memorySizeInGbs property: Memory allocated to the DB system, in gigabytes.
     * 
     * @return the memorySizeInGbs value.
     */
    public Integer memorySizeInGbs() {
        return this.memorySizeInGbs;
    }

    /**
     * Set the memorySizeInGbs property: Memory allocated to the DB system, in gigabytes.
     * 
     * @param memorySizeInGbs the memorySizeInGbs value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    DbSystemBaseProperties withMemorySizeInGbs(Integer memorySizeInGbs) {
        this.memorySizeInGbs = memorySizeInGbs;
        return this;
    }

    /**
     * Get the nodeCount property: The number of nodes in the DB system. For RAC DB systems, the value is greater than
     * 1.
     * 
     * @return the nodeCount value.
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }

    /**
     * Set the nodeCount property: The number of nodes in the DB system. For RAC DB systems, the value is greater than
     * 1.
     * 
     * @param nodeCount the nodeCount value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    public DbSystemBaseProperties withNodeCount(Integer nodeCount) {
        this.nodeCount = nodeCount;
        return this;
    }

    /**
     * Get the scanDnsName property: The FQDN of the DNS record for the SCAN IP addresses that are associated with the
     * DB system.
     * 
     * @return the scanDnsName value.
     */
    public String scanDnsName() {
        return this.scanDnsName;
    }

    /**
     * Set the scanDnsName property: The FQDN of the DNS record for the SCAN IP addresses that are associated with the
     * DB system.
     * 
     * @param scanDnsName the scanDnsName value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    DbSystemBaseProperties withScanDnsName(String scanDnsName) {
        this.scanDnsName = scanDnsName;
        return this;
    }

    /**
     * Get the scanIps property: The list of Single Client Access Name (SCAN) IP addresses associated with the DB
     * system. SCAN IP addresses are typically used for load balancing and are not assigned to any interface. Oracle
     * Clusterware directs the requests to the appropriate nodes in the cluster. Note: For a single-node DB system, this
     * list is empty.
     * 
     * @return the scanIps value.
     */
    public List<String> scanIps() {
        return this.scanIps;
    }

    /**
     * Set the scanIps property: The list of Single Client Access Name (SCAN) IP addresses associated with the DB
     * system. SCAN IP addresses are typically used for load balancing and are not assigned to any interface. Oracle
     * Clusterware directs the requests to the appropriate nodes in the cluster. Note: For a single-node DB system, this
     * list is empty.
     * 
     * @param scanIps the scanIps value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    DbSystemBaseProperties withScanIps(List<String> scanIps) {
        this.scanIps = scanIps;
        return this;
    }

    /**
     * Get the shape property: The shape of the DB system. The shape determines resources to allocate to the DB system.
     * For virtual machine shapes, the number of CPU cores and memory. For bare metal and Exadata shapes, the number of
     * CPU cores, storage, and memory.
     * 
     * @return the shape value.
     */
    public String shape() {
        return this.shape;
    }

    /**
     * Set the shape property: The shape of the DB system. The shape determines resources to allocate to the DB system.
     * For virtual machine shapes, the number of CPU cores and memory. For bare metal and Exadata shapes, the number of
     * CPU cores, storage, and memory.
     * 
     * @param shape the shape value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    public DbSystemBaseProperties withShape(String shape) {
        this.shape = shape;
        return this;
    }

    /**
     * Get the sshPublicKeys property: The public key portion of one or more key pairs used for SSH access to the DB
     * system.
     * 
     * @return the sshPublicKeys value.
     */
    public List<String> sshPublicKeys() {
        return this.sshPublicKeys;
    }

    /**
     * Set the sshPublicKeys property: The public key portion of one or more key pairs used for SSH access to the DB
     * system.
     * 
     * @param sshPublicKeys the sshPublicKeys value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    public DbSystemBaseProperties withSshPublicKeys(List<String> sshPublicKeys) {
        this.sshPublicKeys = sshPublicKeys;
        return this;
    }

    /**
     * Get the storageVolumePerformanceMode property: The block storage volume performance level. Valid values are
     * Balanced and HighPerformance. See [Block Volume Performance](/Content/Block/Concepts/blockvolumeperformance.htm)
     * for more information.
     * 
     * @return the storageVolumePerformanceMode value.
     */
    public StorageVolumePerformanceMode storageVolumePerformanceMode() {
        return this.storageVolumePerformanceMode;
    }

    /**
     * Set the storageVolumePerformanceMode property: The block storage volume performance level. Valid values are
     * Balanced and HighPerformance. See [Block Volume Performance](/Content/Block/Concepts/blockvolumeperformance.htm)
     * for more information.
     * 
     * @param storageVolumePerformanceMode the storageVolumePerformanceMode value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    public DbSystemBaseProperties
        withStorageVolumePerformanceMode(StorageVolumePerformanceMode storageVolumePerformanceMode) {
        this.storageVolumePerformanceMode = storageVolumePerformanceMode;
        return this;
    }

    /**
     * Get the timeZone property: The time zone of the DB system, e.g., UTC, to set the timeZone as UTC.
     * 
     * @return the timeZone value.
     */
    public String timeZone() {
        return this.timeZone;
    }

    /**
     * Set the timeZone property: The time zone of the DB system, e.g., UTC, to set the timeZone as UTC.
     * 
     * @param timeZone the timeZone value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    public DbSystemBaseProperties withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }

    /**
     * Get the version property: The Oracle Database version of the DB system.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: The Oracle Database version of the DB system.
     * 
     * @param version the version value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    DbSystemBaseProperties withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the computeModel property: The compute model for Base Database Service. This is required if using the
     * `computeCount` parameter. If using `cpuCoreCount` then it is an error to specify `computeModel` to a non-null
     * value. The ECPU compute model is the recommended model, and the OCPU compute model is legacy.
     * 
     * @return the computeModel value.
     */
    public ComputeModel computeModel() {
        return this.computeModel;
    }

    /**
     * Set the computeModel property: The compute model for Base Database Service. This is required if using the
     * `computeCount` parameter. If using `cpuCoreCount` then it is an error to specify `computeModel` to a non-null
     * value. The ECPU compute model is the recommended model, and the OCPU compute model is legacy.
     * 
     * @param computeModel the computeModel value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    public DbSystemBaseProperties withComputeModel(ComputeModel computeModel) {
        this.computeModel = computeModel;
        return this;
    }

    /**
     * Get the computeCount property: The number of compute servers for the DB system.
     * 
     * @return the computeCount value.
     */
    public Integer computeCount() {
        return this.computeCount;
    }

    /**
     * Set the computeCount property: The number of compute servers for the DB system.
     * 
     * @param computeCount the computeCount value to set.
     * @return the DbSystemBaseProperties object itself.
     */
    public DbSystemBaseProperties withComputeCount(Integer computeCount) {
        this.computeCount = computeCount;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceAnchorId", this.resourceAnchorId);
        jsonWriter.writeStringField("networkAnchorId", this.networkAnchorId);
        jsonWriter.writeStringField("hostname", this.hostname);
        jsonWriter.writeStringField("shape", this.shape);
        jsonWriter.writeArrayField("sshPublicKeys", this.sshPublicKeys,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("source", this.source == null ? null : this.source.toString());
        jsonWriter.writeStringField("clusterName", this.clusterName);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeNumberField("initialDataStorageSizeInGb", this.initialDataStorageSizeInGb);
        jsonWriter.writeJsonField("dbSystemOptions", this.dbSystemOptions);
        jsonWriter.writeStringField("diskRedundancy",
            this.diskRedundancy == null ? null : this.diskRedundancy.toString());
        jsonWriter.writeStringField("domain", this.domainV2);
        jsonWriter.writeStringField("licenseModel",
            this.licenseModelV2 == null ? null : this.licenseModelV2.toString());
        jsonWriter.writeNumberField("nodeCount", this.nodeCount);
        jsonWriter.writeStringField("storageVolumePerformanceMode",
            this.storageVolumePerformanceMode == null ? null : this.storageVolumePerformanceMode.toString());
        jsonWriter.writeStringField("timeZone", this.timeZone);
        jsonWriter.writeStringField("computeModel", this.computeModel == null ? null : this.computeModel.toString());
        jsonWriter.writeNumberField("computeCount", this.computeCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DbSystemBaseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DbSystemBaseProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DbSystemBaseProperties.
     */
    public static DbSystemBaseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("source".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("None".equals(discriminatorValue)) {
                    return DbSystemProperties.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static DbSystemBaseProperties fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DbSystemBaseProperties deserializedDbSystemBaseProperties = new DbSystemBaseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceAnchorId".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.resourceAnchorId = reader.getString();
                } else if ("networkAnchorId".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.networkAnchorId = reader.getString();
                } else if ("hostname".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.hostname = reader.getString();
                } else if ("shape".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.shape = reader.getString();
                } else if ("sshPublicKeys".equals(fieldName)) {
                    List<String> sshPublicKeys = reader.readArray(reader1 -> reader1.getString());
                    deserializedDbSystemBaseProperties.sshPublicKeys = sshPublicKeys;
                } else if ("source".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.source = DbSystemSourceType.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.provisioningState
                        = AzureResourceProvisioningState.fromString(reader.getString());
                } else if ("ociUrl".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.ociUrl = reader.getString();
                } else if ("clusterName".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.clusterName = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.displayName = reader.getString();
                } else if ("initialDataStorageSizeInGb".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.initialDataStorageSizeInGb
                        = reader.getNullable(JsonReader::getInt);
                } else if ("dataStorageSizeInGbs".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.dataStorageSizeInGbs = reader.getNullable(JsonReader::getInt);
                } else if ("dbSystemOptions".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.dbSystemOptions = DbSystemOptions.fromJson(reader);
                } else if ("diskRedundancy".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.diskRedundancy
                        = DiskRedundancyType.fromString(reader.getString());
                } else if ("domain".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.domainV2 = reader.getString();
                } else if ("gridImageOcid".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.gridImageOcid = reader.getString();
                } else if ("ocid".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.ocid = reader.getString();
                } else if ("licenseModel".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.licenseModelV2 = LicenseModel.fromString(reader.getString());
                } else if ("lifecycleDetails".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.lifecycleDetails = reader.getString();
                } else if ("lifecycleState".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.lifecycleState
                        = DbSystemLifecycleState.fromString(reader.getString());
                } else if ("listenerPort".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.listenerPort = reader.getNullable(JsonReader::getInt);
                } else if ("memorySizeInGbs".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.memorySizeInGbs = reader.getNullable(JsonReader::getInt);
                } else if ("nodeCount".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.nodeCount = reader.getNullable(JsonReader::getInt);
                } else if ("scanDnsName".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.scanDnsName = reader.getString();
                } else if ("scanIps".equals(fieldName)) {
                    List<String> scanIps = reader.readArray(reader1 -> reader1.getString());
                    deserializedDbSystemBaseProperties.scanIps = scanIps;
                } else if ("storageVolumePerformanceMode".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.storageVolumePerformanceMode
                        = StorageVolumePerformanceMode.fromString(reader.getString());
                } else if ("timeZone".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.timeZone = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.version = reader.getString();
                } else if ("computeModel".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.computeModel = ComputeModel.fromString(reader.getString());
                } else if ("computeCount".equals(fieldName)) {
                    deserializedDbSystemBaseProperties.computeCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDbSystemBaseProperties;
        });
    }
}
