// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The updatable properties of the CloudExadataInfrastructure.
 */
@Fluent
public final class CloudExadataInfrastructureUpdateProperties {
    /*
     * The number of compute servers for the cloud Exadata infrastructure.
     */
    @JsonProperty(value = "computeCount")
    private Integer computeCount;

    /*
     * The number of storage servers for the cloud Exadata infrastructure.
     */
    @JsonProperty(value = "storageCount")
    private Integer storageCount;

    /*
     * maintenanceWindow property
     */
    @JsonProperty(value = "maintenanceWindow")
    private MaintenanceWindow maintenanceWindow;

    /*
     * The list of customer email addresses that receive information from Oracle about the specified OCI Database service resource. Oracle uses these email addresses to send notifications about planned and unplanned software maintenance updates, information about system hardware, and other information needed by administrators. Up to 10 email addresses can be added to the customer contacts for a cloud Exadata infrastructure instance. 
     */
    @JsonProperty(value = "customerContacts")
    private List<CustomerContact> customerContacts;

    /*
     * The name for the Exadata infrastructure.
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /**
     * Creates an instance of CloudExadataInfrastructureUpdateProperties class.
     */
    public CloudExadataInfrastructureUpdateProperties() {
    }

    /**
     * Get the computeCount property: The number of compute servers for the cloud Exadata infrastructure.
     * 
     * @return the computeCount value.
     */
    public Integer computeCount() {
        return this.computeCount;
    }

    /**
     * Set the computeCount property: The number of compute servers for the cloud Exadata infrastructure.
     * 
     * @param computeCount the computeCount value to set.
     * @return the CloudExadataInfrastructureUpdateProperties object itself.
     */
    public CloudExadataInfrastructureUpdateProperties withComputeCount(Integer computeCount) {
        this.computeCount = computeCount;
        return this;
    }

    /**
     * Get the storageCount property: The number of storage servers for the cloud Exadata infrastructure.
     * 
     * @return the storageCount value.
     */
    public Integer storageCount() {
        return this.storageCount;
    }

    /**
     * Set the storageCount property: The number of storage servers for the cloud Exadata infrastructure.
     * 
     * @param storageCount the storageCount value to set.
     * @return the CloudExadataInfrastructureUpdateProperties object itself.
     */
    public CloudExadataInfrastructureUpdateProperties withStorageCount(Integer storageCount) {
        this.storageCount = storageCount;
        return this;
    }

    /**
     * Get the maintenanceWindow property: maintenanceWindow property.
     * 
     * @return the maintenanceWindow value.
     */
    public MaintenanceWindow maintenanceWindow() {
        return this.maintenanceWindow;
    }

    /**
     * Set the maintenanceWindow property: maintenanceWindow property.
     * 
     * @param maintenanceWindow the maintenanceWindow value to set.
     * @return the CloudExadataInfrastructureUpdateProperties object itself.
     */
    public CloudExadataInfrastructureUpdateProperties withMaintenanceWindow(MaintenanceWindow maintenanceWindow) {
        this.maintenanceWindow = maintenanceWindow;
        return this;
    }

    /**
     * Get the customerContacts property: The list of customer email addresses that receive information from Oracle
     * about the specified OCI Database service resource. Oracle uses these email addresses to send notifications about
     * planned and unplanned software maintenance updates, information about system hardware, and other information
     * needed by administrators. Up to 10 email addresses can be added to the customer contacts for a cloud Exadata
     * infrastructure instance.
     * 
     * @return the customerContacts value.
     */
    public List<CustomerContact> customerContacts() {
        return this.customerContacts;
    }

    /**
     * Set the customerContacts property: The list of customer email addresses that receive information from Oracle
     * about the specified OCI Database service resource. Oracle uses these email addresses to send notifications about
     * planned and unplanned software maintenance updates, information about system hardware, and other information
     * needed by administrators. Up to 10 email addresses can be added to the customer contacts for a cloud Exadata
     * infrastructure instance.
     * 
     * @param customerContacts the customerContacts value to set.
     * @return the CloudExadataInfrastructureUpdateProperties object itself.
     */
    public CloudExadataInfrastructureUpdateProperties withCustomerContacts(List<CustomerContact> customerContacts) {
        this.customerContacts = customerContacts;
        return this;
    }

    /**
     * Get the displayName property: The name for the Exadata infrastructure.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The name for the Exadata infrastructure.
     * 
     * @param displayName the displayName value to set.
     * @return the CloudExadataInfrastructureUpdateProperties object itself.
     */
    public CloudExadataInfrastructureUpdateProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (maintenanceWindow() != null) {
            maintenanceWindow().validate();
        }
        if (customerContacts() != null) {
            customerContacts().forEach(e -> e.validate());
        }
    }
}
