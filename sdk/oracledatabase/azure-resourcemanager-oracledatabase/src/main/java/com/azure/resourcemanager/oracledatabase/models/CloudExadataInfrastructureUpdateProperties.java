// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The updatable properties of the CloudExadataInfrastructure.
 */
@Fluent
public final class CloudExadataInfrastructureUpdateProperties
    implements JsonSerializable<CloudExadataInfrastructureUpdateProperties> {
    /*
     * The number of compute servers for the cloud Exadata infrastructure.
     */
    private Integer computeCount;

    /*
     * The number of storage servers for the cloud Exadata infrastructure.
     */
    private Integer storageCount;

    /*
     * maintenanceWindow property
     */
    private MaintenanceWindow maintenanceWindow;

    /*
     * The list of customer email addresses that receive information from Oracle about the specified OCI Database
     * service resource. Oracle uses these email addresses to send notifications about planned and unplanned software
     * maintenance updates, information about system hardware, and other information needed by administrators. Up to 10
     * email addresses can be added to the customer contacts for a cloud Exadata infrastructure instance.
     */
    private List<CustomerContact> customerContacts;

    /*
     * The name for the Exadata infrastructure.
     */
    private String displayName;

    /**
     * Creates an instance of CloudExadataInfrastructureUpdateProperties class.
     */
    public CloudExadataInfrastructureUpdateProperties() {
    }

    /**
     * Get the computeCount property: The number of compute servers for the cloud Exadata infrastructure.
     * 
     * @return the computeCount value.
     */
    public Integer computeCount() {
        return this.computeCount;
    }

    /**
     * Set the computeCount property: The number of compute servers for the cloud Exadata infrastructure.
     * 
     * @param computeCount the computeCount value to set.
     * @return the CloudExadataInfrastructureUpdateProperties object itself.
     */
    public CloudExadataInfrastructureUpdateProperties withComputeCount(Integer computeCount) {
        this.computeCount = computeCount;
        return this;
    }

    /**
     * Get the storageCount property: The number of storage servers for the cloud Exadata infrastructure.
     * 
     * @return the storageCount value.
     */
    public Integer storageCount() {
        return this.storageCount;
    }

    /**
     * Set the storageCount property: The number of storage servers for the cloud Exadata infrastructure.
     * 
     * @param storageCount the storageCount value to set.
     * @return the CloudExadataInfrastructureUpdateProperties object itself.
     */
    public CloudExadataInfrastructureUpdateProperties withStorageCount(Integer storageCount) {
        this.storageCount = storageCount;
        return this;
    }

    /**
     * Get the maintenanceWindow property: maintenanceWindow property.
     * 
     * @return the maintenanceWindow value.
     */
    public MaintenanceWindow maintenanceWindow() {
        return this.maintenanceWindow;
    }

    /**
     * Set the maintenanceWindow property: maintenanceWindow property.
     * 
     * @param maintenanceWindow the maintenanceWindow value to set.
     * @return the CloudExadataInfrastructureUpdateProperties object itself.
     */
    public CloudExadataInfrastructureUpdateProperties withMaintenanceWindow(MaintenanceWindow maintenanceWindow) {
        this.maintenanceWindow = maintenanceWindow;
        return this;
    }

    /**
     * Get the customerContacts property: The list of customer email addresses that receive information from Oracle
     * about the specified OCI Database service resource. Oracle uses these email addresses to send notifications about
     * planned and unplanned software maintenance updates, information about system hardware, and other information
     * needed by administrators. Up to 10 email addresses can be added to the customer contacts for a cloud Exadata
     * infrastructure instance.
     * 
     * @return the customerContacts value.
     */
    public List<CustomerContact> customerContacts() {
        return this.customerContacts;
    }

    /**
     * Set the customerContacts property: The list of customer email addresses that receive information from Oracle
     * about the specified OCI Database service resource. Oracle uses these email addresses to send notifications about
     * planned and unplanned software maintenance updates, information about system hardware, and other information
     * needed by administrators. Up to 10 email addresses can be added to the customer contacts for a cloud Exadata
     * infrastructure instance.
     * 
     * @param customerContacts the customerContacts value to set.
     * @return the CloudExadataInfrastructureUpdateProperties object itself.
     */
    public CloudExadataInfrastructureUpdateProperties withCustomerContacts(List<CustomerContact> customerContacts) {
        this.customerContacts = customerContacts;
        return this;
    }

    /**
     * Get the displayName property: The name for the Exadata infrastructure.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The name for the Exadata infrastructure.
     * 
     * @param displayName the displayName value to set.
     * @return the CloudExadataInfrastructureUpdateProperties object itself.
     */
    public CloudExadataInfrastructureUpdateProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (maintenanceWindow() != null) {
            maintenanceWindow().validate();
        }
        if (customerContacts() != null) {
            customerContacts().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("computeCount", this.computeCount);
        jsonWriter.writeNumberField("storageCount", this.storageCount);
        jsonWriter.writeJsonField("maintenanceWindow", this.maintenanceWindow);
        jsonWriter.writeArrayField("customerContacts", this.customerContacts,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("displayName", this.displayName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CloudExadataInfrastructureUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CloudExadataInfrastructureUpdateProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CloudExadataInfrastructureUpdateProperties.
     */
    public static CloudExadataInfrastructureUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CloudExadataInfrastructureUpdateProperties deserializedCloudExadataInfrastructureUpdateProperties
                = new CloudExadataInfrastructureUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("computeCount".equals(fieldName)) {
                    deserializedCloudExadataInfrastructureUpdateProperties.computeCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("storageCount".equals(fieldName)) {
                    deserializedCloudExadataInfrastructureUpdateProperties.storageCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("maintenanceWindow".equals(fieldName)) {
                    deserializedCloudExadataInfrastructureUpdateProperties.maintenanceWindow
                        = MaintenanceWindow.fromJson(reader);
                } else if ("customerContacts".equals(fieldName)) {
                    List<CustomerContact> customerContacts
                        = reader.readArray(reader1 -> CustomerContact.fromJson(reader1));
                    deserializedCloudExadataInfrastructureUpdateProperties.customerContacts = customerContacts;
                } else if ("displayName".equals(fieldName)) {
                    deserializedCloudExadataInfrastructureUpdateProperties.displayName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCloudExadataInfrastructureUpdateProperties;
        });
    }
}
