// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Autonomous Disaster Recovery standby database details.
 */
@Fluent
public final class AutonomousDatabaseStandbySummary implements JsonSerializable<AutonomousDatabaseStandbySummary> {
    /*
     * The amount of time, in seconds, that the data of the standby database lags the data of the primary database. Can
     * be used to determine the potential data loss in the event of a failover.
     */
    private Integer lagTimeInSeconds;

    /*
     * The current state of the Autonomous Database.
     */
    private AutonomousDatabaseLifecycleState lifecycleState;

    /*
     * Additional information about the current lifecycle state.
     */
    private String lifecycleDetails;

    /*
     * The date and time the Autonomous Data Guard role was switched for the standby Autonomous Database.
     */
    private String timeDataGuardRoleChanged;

    /*
     * The date and time the Disaster Recovery role was switched for the standby Autonomous Database.
     */
    private String timeDisasterRecoveryRoleChanged;

    /**
     * Creates an instance of AutonomousDatabaseStandbySummary class.
     */
    public AutonomousDatabaseStandbySummary() {
    }

    /**
     * Get the lagTimeInSeconds property: The amount of time, in seconds, that the data of the standby database lags the
     * data of the primary database. Can be used to determine the potential data loss in the event of a failover.
     * 
     * @return the lagTimeInSeconds value.
     */
    public Integer lagTimeInSeconds() {
        return this.lagTimeInSeconds;
    }

    /**
     * Set the lagTimeInSeconds property: The amount of time, in seconds, that the data of the standby database lags the
     * data of the primary database. Can be used to determine the potential data loss in the event of a failover.
     * 
     * @param lagTimeInSeconds the lagTimeInSeconds value to set.
     * @return the AutonomousDatabaseStandbySummary object itself.
     */
    public AutonomousDatabaseStandbySummary withLagTimeInSeconds(Integer lagTimeInSeconds) {
        this.lagTimeInSeconds = lagTimeInSeconds;
        return this;
    }

    /**
     * Get the lifecycleState property: The current state of the Autonomous Database.
     * 
     * @return the lifecycleState value.
     */
    public AutonomousDatabaseLifecycleState lifecycleState() {
        return this.lifecycleState;
    }

    /**
     * Set the lifecycleState property: The current state of the Autonomous Database.
     * 
     * @param lifecycleState the lifecycleState value to set.
     * @return the AutonomousDatabaseStandbySummary object itself.
     */
    public AutonomousDatabaseStandbySummary withLifecycleState(AutonomousDatabaseLifecycleState lifecycleState) {
        this.lifecycleState = lifecycleState;
        return this;
    }

    /**
     * Get the lifecycleDetails property: Additional information about the current lifecycle state.
     * 
     * @return the lifecycleDetails value.
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }

    /**
     * Set the lifecycleDetails property: Additional information about the current lifecycle state.
     * 
     * @param lifecycleDetails the lifecycleDetails value to set.
     * @return the AutonomousDatabaseStandbySummary object itself.
     */
    public AutonomousDatabaseStandbySummary withLifecycleDetails(String lifecycleDetails) {
        this.lifecycleDetails = lifecycleDetails;
        return this;
    }

    /**
     * Get the timeDataGuardRoleChanged property: The date and time the Autonomous Data Guard role was switched for the
     * standby Autonomous Database.
     * 
     * @return the timeDataGuardRoleChanged value.
     */
    public String timeDataGuardRoleChanged() {
        return this.timeDataGuardRoleChanged;
    }

    /**
     * Set the timeDataGuardRoleChanged property: The date and time the Autonomous Data Guard role was switched for the
     * standby Autonomous Database.
     * 
     * @param timeDataGuardRoleChanged the timeDataGuardRoleChanged value to set.
     * @return the AutonomousDatabaseStandbySummary object itself.
     */
    public AutonomousDatabaseStandbySummary withTimeDataGuardRoleChanged(String timeDataGuardRoleChanged) {
        this.timeDataGuardRoleChanged = timeDataGuardRoleChanged;
        return this;
    }

    /**
     * Get the timeDisasterRecoveryRoleChanged property: The date and time the Disaster Recovery role was switched for
     * the standby Autonomous Database.
     * 
     * @return the timeDisasterRecoveryRoleChanged value.
     */
    public String timeDisasterRecoveryRoleChanged() {
        return this.timeDisasterRecoveryRoleChanged;
    }

    /**
     * Set the timeDisasterRecoveryRoleChanged property: The date and time the Disaster Recovery role was switched for
     * the standby Autonomous Database.
     * 
     * @param timeDisasterRecoveryRoleChanged the timeDisasterRecoveryRoleChanged value to set.
     * @return the AutonomousDatabaseStandbySummary object itself.
     */
    public AutonomousDatabaseStandbySummary
        withTimeDisasterRecoveryRoleChanged(String timeDisasterRecoveryRoleChanged) {
        this.timeDisasterRecoveryRoleChanged = timeDisasterRecoveryRoleChanged;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("lagTimeInSeconds", this.lagTimeInSeconds);
        jsonWriter.writeStringField("lifecycleState",
            this.lifecycleState == null ? null : this.lifecycleState.toString());
        jsonWriter.writeStringField("lifecycleDetails", this.lifecycleDetails);
        jsonWriter.writeStringField("timeDataGuardRoleChanged", this.timeDataGuardRoleChanged);
        jsonWriter.writeStringField("timeDisasterRecoveryRoleChanged", this.timeDisasterRecoveryRoleChanged);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutonomousDatabaseStandbySummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutonomousDatabaseStandbySummary if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AutonomousDatabaseStandbySummary.
     */
    public static AutonomousDatabaseStandbySummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutonomousDatabaseStandbySummary deserializedAutonomousDatabaseStandbySummary
                = new AutonomousDatabaseStandbySummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lagTimeInSeconds".equals(fieldName)) {
                    deserializedAutonomousDatabaseStandbySummary.lagTimeInSeconds
                        = reader.getNullable(JsonReader::getInt);
                } else if ("lifecycleState".equals(fieldName)) {
                    deserializedAutonomousDatabaseStandbySummary.lifecycleState
                        = AutonomousDatabaseLifecycleState.fromString(reader.getString());
                } else if ("lifecycleDetails".equals(fieldName)) {
                    deserializedAutonomousDatabaseStandbySummary.lifecycleDetails = reader.getString();
                } else if ("timeDataGuardRoleChanged".equals(fieldName)) {
                    deserializedAutonomousDatabaseStandbySummary.timeDataGuardRoleChanged = reader.getString();
                } else if ("timeDisasterRecoveryRoleChanged".equals(fieldName)) {
                    deserializedAutonomousDatabaseStandbySummary.timeDisasterRecoveryRoleChanged = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutonomousDatabaseStandbySummary;
        });
    }
}
