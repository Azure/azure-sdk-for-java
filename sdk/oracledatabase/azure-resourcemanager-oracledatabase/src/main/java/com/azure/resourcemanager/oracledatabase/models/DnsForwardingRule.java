// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DNS forwarding rule properties.
 */
@Fluent
public final class DnsForwardingRule implements JsonSerializable<DnsForwardingRule> {
    /*
     * Comma-separated domain names
     */
    private String domainNames;

    /*
     * Forwarding ip address
     */
    private String forwardingIpAddress;

    /**
     * Creates an instance of DnsForwardingRule class.
     */
    public DnsForwardingRule() {
    }

    /**
     * Get the domainNames property: Comma-separated domain names.
     * 
     * @return the domainNames value.
     */
    public String domainNames() {
        return this.domainNames;
    }

    /**
     * Set the domainNames property: Comma-separated domain names.
     * 
     * @param domainNames the domainNames value to set.
     * @return the DnsForwardingRule object itself.
     */
    public DnsForwardingRule withDomainNames(String domainNames) {
        this.domainNames = domainNames;
        return this;
    }

    /**
     * Get the forwardingIpAddress property: Forwarding ip address.
     * 
     * @return the forwardingIpAddress value.
     */
    public String forwardingIpAddress() {
        return this.forwardingIpAddress;
    }

    /**
     * Set the forwardingIpAddress property: Forwarding ip address.
     * 
     * @param forwardingIpAddress the forwardingIpAddress value to set.
     * @return the DnsForwardingRule object itself.
     */
    public DnsForwardingRule withForwardingIpAddress(String forwardingIpAddress) {
        this.forwardingIpAddress = forwardingIpAddress;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("domainNames", this.domainNames);
        jsonWriter.writeStringField("forwardingIpAddress", this.forwardingIpAddress);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DnsForwardingRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DnsForwardingRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DnsForwardingRule.
     */
    public static DnsForwardingRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DnsForwardingRule deserializedDnsForwardingRule = new DnsForwardingRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("domainNames".equals(fieldName)) {
                    deserializedDnsForwardingRule.domainNames = reader.getString();
                } else if ("forwardingIpAddress".equals(fieldName)) {
                    deserializedDnsForwardingRule.forwardingIpAddress = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDnsForwardingRule;
        });
    }
}
