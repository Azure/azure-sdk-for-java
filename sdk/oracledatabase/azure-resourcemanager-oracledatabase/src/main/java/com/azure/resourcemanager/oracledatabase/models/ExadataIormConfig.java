// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * ExadataIormConfig for cloud vm cluster.
 */
@Fluent
public final class ExadataIormConfig implements JsonSerializable<ExadataIormConfig> {
    /*
     * An array of IORM settings for all the database in the Exadata DB system.
     */
    private List<DbIormConfig> dbPlans;

    /*
     * Additional information about the current lifecycleState.
     */
    private String lifecycleDetails;

    /*
     * The current state of IORM configuration for the Exadata DB system.
     */
    private IormLifecycleState lifecycleState;

    /*
     * The current value for the IORM objective. The default is AUTO.
     */
    private Objective objective;

    /**
     * Creates an instance of ExadataIormConfig class.
     */
    public ExadataIormConfig() {
    }

    /**
     * Get the dbPlans property: An array of IORM settings for all the database in the Exadata DB system.
     * 
     * @return the dbPlans value.
     */
    public List<DbIormConfig> dbPlans() {
        return this.dbPlans;
    }

    /**
     * Set the dbPlans property: An array of IORM settings for all the database in the Exadata DB system.
     * 
     * @param dbPlans the dbPlans value to set.
     * @return the ExadataIormConfig object itself.
     */
    public ExadataIormConfig withDbPlans(List<DbIormConfig> dbPlans) {
        this.dbPlans = dbPlans;
        return this;
    }

    /**
     * Get the lifecycleDetails property: Additional information about the current lifecycleState.
     * 
     * @return the lifecycleDetails value.
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }

    /**
     * Set the lifecycleDetails property: Additional information about the current lifecycleState.
     * 
     * @param lifecycleDetails the lifecycleDetails value to set.
     * @return the ExadataIormConfig object itself.
     */
    public ExadataIormConfig withLifecycleDetails(String lifecycleDetails) {
        this.lifecycleDetails = lifecycleDetails;
        return this;
    }

    /**
     * Get the lifecycleState property: The current state of IORM configuration for the Exadata DB system.
     * 
     * @return the lifecycleState value.
     */
    public IormLifecycleState lifecycleState() {
        return this.lifecycleState;
    }

    /**
     * Set the lifecycleState property: The current state of IORM configuration for the Exadata DB system.
     * 
     * @param lifecycleState the lifecycleState value to set.
     * @return the ExadataIormConfig object itself.
     */
    public ExadataIormConfig withLifecycleState(IormLifecycleState lifecycleState) {
        this.lifecycleState = lifecycleState;
        return this;
    }

    /**
     * Get the objective property: The current value for the IORM objective. The default is AUTO.
     * 
     * @return the objective value.
     */
    public Objective objective() {
        return this.objective;
    }

    /**
     * Set the objective property: The current value for the IORM objective. The default is AUTO.
     * 
     * @param objective the objective value to set.
     * @return the ExadataIormConfig object itself.
     */
    public ExadataIormConfig withObjective(Objective objective) {
        this.objective = objective;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dbPlans() != null) {
            dbPlans().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("dbPlans", this.dbPlans, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("lifecycleDetails", this.lifecycleDetails);
        jsonWriter.writeStringField("lifecycleState",
            this.lifecycleState == null ? null : this.lifecycleState.toString());
        jsonWriter.writeStringField("objective", this.objective == null ? null : this.objective.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExadataIormConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExadataIormConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExadataIormConfig.
     */
    public static ExadataIormConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExadataIormConfig deserializedExadataIormConfig = new ExadataIormConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dbPlans".equals(fieldName)) {
                    List<DbIormConfig> dbPlans = reader.readArray(reader1 -> DbIormConfig.fromJson(reader1));
                    deserializedExadataIormConfig.dbPlans = dbPlans;
                } else if ("lifecycleDetails".equals(fieldName)) {
                    deserializedExadataIormConfig.lifecycleDetails = reader.getString();
                } else if ("lifecycleState".equals(fieldName)) {
                    deserializedExadataIormConfig.lifecycleState = IormLifecycleState.fromString(reader.getString());
                } else if ("objective".equals(fieldName)) {
                    deserializedExadataIormConfig.objective = Objective.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExadataIormConfig;
        });
    }
}
