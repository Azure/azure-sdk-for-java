// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.oracledatabase.fluent.DbNodesClient;
import com.azure.resourcemanager.oracledatabase.fluent.models.DbNodeInner;
import com.azure.resourcemanager.oracledatabase.models.DbNodeAction;
import com.azure.resourcemanager.oracledatabase.models.DbNodeListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DbNodesClient.
 */
public final class DbNodesClientImpl implements DbNodesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DbNodesService service;

    /**
     * The service client containing this operation class.
     */
    private final OracleDatabaseResourceManagerImpl client;

    /**
     * Initializes an instance of DbNodesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DbNodesClientImpl(OracleDatabaseResourceManagerImpl client) {
        this.service = RestProxy.create(DbNodesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for OracleDatabaseResourceManagerDbNodes to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "OracleDatabaseResour")
    public interface DbNodesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/cloudVmClusters/{cloudvmclustername}/dbNodes")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DbNodeListResult>> listByCloudVmCluster(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("cloudvmclustername") String cloudvmclustername, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/cloudVmClusters/{cloudvmclustername}/dbNodes/{dbnodeocid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DbNodeInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("cloudvmclustername") String cloudvmclustername, @PathParam("dbnodeocid") String dbnodeocid,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/cloudVmClusters/{cloudvmclustername}/dbNodes/{dbnodeocid}/action")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> action(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("cloudvmclustername") String cloudvmclustername, @PathParam("dbnodeocid") String dbnodeocid,
            @BodyParam("application/json") DbNodeAction body, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DbNodeListResult>> listByCloudVmClusterNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List DbNode resources by CloudVmCluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudvmclustername CloudVmCluster name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbNode list operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DbNodeInner>> listByCloudVmClusterSinglePageAsync(String resourceGroupName,
        String cloudvmclustername) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudvmclustername == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudvmclustername is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByCloudVmCluster(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, cloudvmclustername, accept, context))
            .<PagedResponse<DbNodeInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List DbNode resources by CloudVmCluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudvmclustername CloudVmCluster name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbNode list operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DbNodeInner>> listByCloudVmClusterSinglePageAsync(String resourceGroupName,
        String cloudvmclustername, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudvmclustername == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudvmclustername is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByCloudVmCluster(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, cloudvmclustername, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List DbNode resources by CloudVmCluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudvmclustername CloudVmCluster name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbNode list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DbNodeInner> listByCloudVmClusterAsync(String resourceGroupName, String cloudvmclustername) {
        return new PagedFlux<>(() -> listByCloudVmClusterSinglePageAsync(resourceGroupName, cloudvmclustername),
            nextLink -> listByCloudVmClusterNextSinglePageAsync(nextLink));
    }

    /**
     * List DbNode resources by CloudVmCluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudvmclustername CloudVmCluster name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbNode list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DbNodeInner> listByCloudVmClusterAsync(String resourceGroupName, String cloudvmclustername,
        Context context) {
        return new PagedFlux<>(
            () -> listByCloudVmClusterSinglePageAsync(resourceGroupName, cloudvmclustername, context),
            nextLink -> listByCloudVmClusterNextSinglePageAsync(nextLink, context));
    }

    /**
     * List DbNode resources by CloudVmCluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudvmclustername CloudVmCluster name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbNode list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DbNodeInner> listByCloudVmCluster(String resourceGroupName, String cloudvmclustername) {
        return new PagedIterable<>(listByCloudVmClusterAsync(resourceGroupName, cloudvmclustername));
    }

    /**
     * List DbNode resources by CloudVmCluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudvmclustername CloudVmCluster name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbNode list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DbNodeInner> listByCloudVmCluster(String resourceGroupName, String cloudvmclustername,
        Context context) {
        return new PagedIterable<>(listByCloudVmClusterAsync(resourceGroupName, cloudvmclustername, context));
    }

    /**
     * Get a DbNode.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudvmclustername CloudVmCluster name.
     * @param dbnodeocid DbNode OCID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DbNode along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DbNodeInner>> getWithResponseAsync(String resourceGroupName, String cloudvmclustername,
        String dbnodeocid) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudvmclustername == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudvmclustername is required and cannot be null."));
        }
        if (dbnodeocid == null) {
            return Mono.error(new IllegalArgumentException("Parameter dbnodeocid is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, cloudvmclustername, dbnodeocid, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a DbNode.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudvmclustername CloudVmCluster name.
     * @param dbnodeocid DbNode OCID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DbNode along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DbNodeInner>> getWithResponseAsync(String resourceGroupName, String cloudvmclustername,
        String dbnodeocid, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudvmclustername == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudvmclustername is required and cannot be null."));
        }
        if (dbnodeocid == null) {
            return Mono.error(new IllegalArgumentException("Parameter dbnodeocid is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, cloudvmclustername, dbnodeocid, accept, context);
    }

    /**
     * Get a DbNode.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudvmclustername CloudVmCluster name.
     * @param dbnodeocid DbNode OCID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DbNode on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DbNodeInner> getAsync(String resourceGroupName, String cloudvmclustername, String dbnodeocid) {
        return getWithResponseAsync(resourceGroupName, cloudvmclustername, dbnodeocid)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a DbNode.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudvmclustername CloudVmCluster name.
     * @param dbnodeocid DbNode OCID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DbNode along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DbNodeInner> getWithResponse(String resourceGroupName, String cloudvmclustername, String dbnodeocid,
        Context context) {
        return getWithResponseAsync(resourceGroupName, cloudvmclustername, dbnodeocid, context).block();
    }

    /**
     * Get a DbNode.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudvmclustername CloudVmCluster name.
     * @param dbnodeocid DbNode OCID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DbNode.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DbNodeInner get(String resourceGroupName, String cloudvmclustername, String dbnodeocid) {
        return getWithResponse(resourceGroupName, cloudvmclustername, dbnodeocid, Context.NONE).getValue();
    }

    /**
     * VM actions on DbNode of VM Cluster by the provided filter.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudvmclustername CloudVmCluster name.
     * @param dbnodeocid DbNode OCID.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DbNode resource belonging to vmCluster along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> actionWithResponseAsync(String resourceGroupName,
        String cloudvmclustername, String dbnodeocid, DbNodeAction body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudvmclustername == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudvmclustername is required and cannot be null."));
        }
        if (dbnodeocid == null) {
            return Mono.error(new IllegalArgumentException("Parameter dbnodeocid is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.action(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, cloudvmclustername, dbnodeocid, body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * VM actions on DbNode of VM Cluster by the provided filter.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudvmclustername CloudVmCluster name.
     * @param dbnodeocid DbNode OCID.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DbNode resource belonging to vmCluster along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> actionWithResponseAsync(String resourceGroupName,
        String cloudvmclustername, String dbnodeocid, DbNodeAction body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (cloudvmclustername == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudvmclustername is required and cannot be null."));
        }
        if (dbnodeocid == null) {
            return Mono.error(new IllegalArgumentException("Parameter dbnodeocid is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.action(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, cloudvmclustername, dbnodeocid, body, accept, context);
    }

    /**
     * VM actions on DbNode of VM Cluster by the provided filter.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudvmclustername CloudVmCluster name.
     * @param dbnodeocid DbNode OCID.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the DbNode resource belonging to vmCluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DbNodeInner>, DbNodeInner> beginActionAsync(String resourceGroupName,
        String cloudvmclustername, String dbnodeocid, DbNodeAction body) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = actionWithResponseAsync(resourceGroupName, cloudvmclustername, dbnodeocid, body);
        return this.client.<DbNodeInner, DbNodeInner>getLroResult(mono, this.client.getHttpPipeline(),
            DbNodeInner.class, DbNodeInner.class, this.client.getContext());
    }

    /**
     * VM actions on DbNode of VM Cluster by the provided filter.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudvmclustername CloudVmCluster name.
     * @param dbnodeocid DbNode OCID.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the DbNode resource belonging to vmCluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DbNodeInner>, DbNodeInner> beginActionAsync(String resourceGroupName,
        String cloudvmclustername, String dbnodeocid, DbNodeAction body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = actionWithResponseAsync(resourceGroupName, cloudvmclustername, dbnodeocid, body, context);
        return this.client.<DbNodeInner, DbNodeInner>getLroResult(mono, this.client.getHttpPipeline(),
            DbNodeInner.class, DbNodeInner.class, context);
    }

    /**
     * VM actions on DbNode of VM Cluster by the provided filter.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudvmclustername CloudVmCluster name.
     * @param dbnodeocid DbNode OCID.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the DbNode resource belonging to vmCluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DbNodeInner>, DbNodeInner> beginAction(String resourceGroupName,
        String cloudvmclustername, String dbnodeocid, DbNodeAction body) {
        return this.beginActionAsync(resourceGroupName, cloudvmclustername, dbnodeocid, body).getSyncPoller();
    }

    /**
     * VM actions on DbNode of VM Cluster by the provided filter.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudvmclustername CloudVmCluster name.
     * @param dbnodeocid DbNode OCID.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the DbNode resource belonging to vmCluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DbNodeInner>, DbNodeInner> beginAction(String resourceGroupName,
        String cloudvmclustername, String dbnodeocid, DbNodeAction body, Context context) {
        return this.beginActionAsync(resourceGroupName, cloudvmclustername, dbnodeocid, body, context).getSyncPoller();
    }

    /**
     * VM actions on DbNode of VM Cluster by the provided filter.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudvmclustername CloudVmCluster name.
     * @param dbnodeocid DbNode OCID.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DbNode resource belonging to vmCluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DbNodeInner> actionAsync(String resourceGroupName, String cloudvmclustername, String dbnodeocid,
        DbNodeAction body) {
        return beginActionAsync(resourceGroupName, cloudvmclustername, dbnodeocid, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * VM actions on DbNode of VM Cluster by the provided filter.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudvmclustername CloudVmCluster name.
     * @param dbnodeocid DbNode OCID.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DbNode resource belonging to vmCluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DbNodeInner> actionAsync(String resourceGroupName, String cloudvmclustername, String dbnodeocid,
        DbNodeAction body, Context context) {
        return beginActionAsync(resourceGroupName, cloudvmclustername, dbnodeocid, body, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * VM actions on DbNode of VM Cluster by the provided filter.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudvmclustername CloudVmCluster name.
     * @param dbnodeocid DbNode OCID.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DbNode resource belonging to vmCluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DbNodeInner action(String resourceGroupName, String cloudvmclustername, String dbnodeocid,
        DbNodeAction body) {
        return actionAsync(resourceGroupName, cloudvmclustername, dbnodeocid, body).block();
    }

    /**
     * VM actions on DbNode of VM Cluster by the provided filter.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cloudvmclustername CloudVmCluster name.
     * @param dbnodeocid DbNode OCID.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DbNode resource belonging to vmCluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DbNodeInner action(String resourceGroupName, String cloudvmclustername, String dbnodeocid, DbNodeAction body,
        Context context) {
        return actionAsync(resourceGroupName, cloudvmclustername, dbnodeocid, body, context).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbNode list operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DbNodeInner>> listByCloudVmClusterNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByCloudVmClusterNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DbNodeInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbNode list operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DbNodeInner>> listByCloudVmClusterNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByCloudVmClusterNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
