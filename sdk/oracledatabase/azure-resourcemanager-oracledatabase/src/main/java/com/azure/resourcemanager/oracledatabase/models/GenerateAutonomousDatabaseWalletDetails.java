// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Autonomous Database Generate Wallet resource model.
 */
@Fluent
public final class GenerateAutonomousDatabaseWalletDetails
    implements JsonSerializable<GenerateAutonomousDatabaseWalletDetails> {
    /*
     * The type of wallet to generate.
     */
    private GenerateType generateType;

    /*
     * True when requesting regional connection strings in PDB connect info, applicable to cross-region DG only.
     */
    private Boolean isRegional;

    /*
     * The password to encrypt the keys inside the wallet
     */
    private String password;

    /**
     * Creates an instance of GenerateAutonomousDatabaseWalletDetails class.
     */
    public GenerateAutonomousDatabaseWalletDetails() {
    }

    /**
     * Get the generateType property: The type of wallet to generate.
     * 
     * @return the generateType value.
     */
    public GenerateType generateType() {
        return this.generateType;
    }

    /**
     * Set the generateType property: The type of wallet to generate.
     * 
     * @param generateType the generateType value to set.
     * @return the GenerateAutonomousDatabaseWalletDetails object itself.
     */
    public GenerateAutonomousDatabaseWalletDetails withGenerateType(GenerateType generateType) {
        this.generateType = generateType;
        return this;
    }

    /**
     * Get the isRegional property: True when requesting regional connection strings in PDB connect info, applicable to
     * cross-region DG only.
     * 
     * @return the isRegional value.
     */
    public Boolean isRegional() {
        return this.isRegional;
    }

    /**
     * Set the isRegional property: True when requesting regional connection strings in PDB connect info, applicable to
     * cross-region DG only.
     * 
     * @param isRegional the isRegional value to set.
     * @return the GenerateAutonomousDatabaseWalletDetails object itself.
     */
    public GenerateAutonomousDatabaseWalletDetails withIsRegional(Boolean isRegional) {
        this.isRegional = isRegional;
        return this;
    }

    /**
     * Get the password property: The password to encrypt the keys inside the wallet.
     * 
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: The password to encrypt the keys inside the wallet.
     * 
     * @param password the password value to set.
     * @return the GenerateAutonomousDatabaseWalletDetails object itself.
     */
    public GenerateAutonomousDatabaseWalletDetails withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (password() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property password in model GenerateAutonomousDatabaseWalletDetails"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GenerateAutonomousDatabaseWalletDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("password", this.password);
        jsonWriter.writeStringField("generateType", this.generateType == null ? null : this.generateType.toString());
        jsonWriter.writeBooleanField("isRegional", this.isRegional);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GenerateAutonomousDatabaseWalletDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GenerateAutonomousDatabaseWalletDetails if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GenerateAutonomousDatabaseWalletDetails.
     */
    public static GenerateAutonomousDatabaseWalletDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GenerateAutonomousDatabaseWalletDetails deserializedGenerateAutonomousDatabaseWalletDetails
                = new GenerateAutonomousDatabaseWalletDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("password".equals(fieldName)) {
                    deserializedGenerateAutonomousDatabaseWalletDetails.password = reader.getString();
                } else if ("generateType".equals(fieldName)) {
                    deserializedGenerateAutonomousDatabaseWalletDetails.generateType
                        = GenerateType.fromString(reader.getString());
                } else if ("isRegional".equals(fieldName)) {
                    deserializedGenerateAutonomousDatabaseWalletDetails.isRegional
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGenerateAutonomousDatabaseWalletDetails;
        });
    }
}
