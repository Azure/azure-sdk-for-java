// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.oracledatabase.fluent.models.NetworkAnchorInner;
import com.azure.resourcemanager.oracledatabase.models.NetworkAnchorUpdate;

/**
 * An instance of this class provides access to all the operations defined in NetworkAnchorsClient.
 */
public interface NetworkAnchorsClient {
    /**
     * List NetworkAnchor resources by subscription ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NetworkAnchor list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NetworkAnchorInner> list();

    /**
     * List NetworkAnchor resources by subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NetworkAnchor list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NetworkAnchorInner> list(Context context);

    /**
     * Create a NetworkAnchor.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkAnchorName The name of the NetworkAnchor.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of network Anchor resource model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NetworkAnchorInner>, NetworkAnchorInner> beginCreateOrUpdate(String resourceGroupName,
        String networkAnchorName, NetworkAnchorInner resource);

    /**
     * Create a NetworkAnchor.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkAnchorName The name of the NetworkAnchor.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of network Anchor resource model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NetworkAnchorInner>, NetworkAnchorInner> beginCreateOrUpdate(String resourceGroupName,
        String networkAnchorName, NetworkAnchorInner resource, Context context);

    /**
     * Create a NetworkAnchor.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkAnchorName The name of the NetworkAnchor.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network Anchor resource model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NetworkAnchorInner createOrUpdate(String resourceGroupName, String networkAnchorName, NetworkAnchorInner resource);

    /**
     * Create a NetworkAnchor.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkAnchorName The name of the NetworkAnchor.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network Anchor resource model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NetworkAnchorInner createOrUpdate(String resourceGroupName, String networkAnchorName, NetworkAnchorInner resource,
        Context context);

    /**
     * Get a NetworkAnchor.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkAnchorName The name of the NetworkAnchor.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a NetworkAnchor along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<NetworkAnchorInner> getByResourceGroupWithResponse(String resourceGroupName, String networkAnchorName,
        Context context);

    /**
     * Get a NetworkAnchor.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkAnchorName The name of the NetworkAnchor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a NetworkAnchor.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NetworkAnchorInner getByResourceGroup(String resourceGroupName, String networkAnchorName);

    /**
     * Update a NetworkAnchor.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkAnchorName The name of the NetworkAnchor.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of network Anchor resource model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NetworkAnchorInner>, NetworkAnchorInner> beginUpdate(String resourceGroupName,
        String networkAnchorName, NetworkAnchorUpdate properties);

    /**
     * Update a NetworkAnchor.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkAnchorName The name of the NetworkAnchor.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of network Anchor resource model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NetworkAnchorInner>, NetworkAnchorInner> beginUpdate(String resourceGroupName,
        String networkAnchorName, NetworkAnchorUpdate properties, Context context);

    /**
     * Update a NetworkAnchor.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkAnchorName The name of the NetworkAnchor.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network Anchor resource model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NetworkAnchorInner update(String resourceGroupName, String networkAnchorName, NetworkAnchorUpdate properties);

    /**
     * Update a NetworkAnchor.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkAnchorName The name of the NetworkAnchor.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network Anchor resource model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NetworkAnchorInner update(String resourceGroupName, String networkAnchorName, NetworkAnchorUpdate properties,
        Context context);

    /**
     * Delete a NetworkAnchor.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkAnchorName The name of the NetworkAnchor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String networkAnchorName);

    /**
     * Delete a NetworkAnchor.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkAnchorName The name of the NetworkAnchor.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String networkAnchorName, Context context);

    /**
     * Delete a NetworkAnchor.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkAnchorName The name of the NetworkAnchor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String networkAnchorName);

    /**
     * Delete a NetworkAnchor.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkAnchorName The name of the NetworkAnchor.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String networkAnchorName, Context context);

    /**
     * List NetworkAnchor resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NetworkAnchor list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NetworkAnchorInner> listByResourceGroup(String resourceGroupName);

    /**
     * List NetworkAnchor resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NetworkAnchor list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NetworkAnchorInner> listByResourceGroup(String resourceGroupName, Context context);
}
