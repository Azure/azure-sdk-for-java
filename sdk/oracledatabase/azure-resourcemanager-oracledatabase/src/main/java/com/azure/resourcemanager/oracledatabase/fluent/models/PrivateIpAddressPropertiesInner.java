// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PrivateIpAddress resource properties.
 */
@Fluent
public final class PrivateIpAddressPropertiesInner {
    /*
     * PrivateIpAddresses displayName
     */
    @JsonProperty(value = "displayName", required = true)
    private String displayName;

    /*
     * PrivateIpAddresses hostnameLabel
     */
    @JsonProperty(value = "hostnameLabel", required = true)
    private String hostnameLabel;

    /*
     * PrivateIpAddresses Id
     */
    @JsonProperty(value = "ocid", required = true)
    private String ocid;

    /*
     * PrivateIpAddresses ipAddress
     */
    @JsonProperty(value = "ipAddress", required = true)
    private String ipAddress;

    /*
     * PrivateIpAddresses subnetId
     */
    @JsonProperty(value = "subnetId", required = true)
    private String subnetId;

    /**
     * Creates an instance of PrivateIpAddressPropertiesInner class.
     */
    public PrivateIpAddressPropertiesInner() {
    }

    /**
     * Get the displayName property: PrivateIpAddresses displayName.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: PrivateIpAddresses displayName.
     * 
     * @param displayName the displayName value to set.
     * @return the PrivateIpAddressPropertiesInner object itself.
     */
    public PrivateIpAddressPropertiesInner withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the hostnameLabel property: PrivateIpAddresses hostnameLabel.
     * 
     * @return the hostnameLabel value.
     */
    public String hostnameLabel() {
        return this.hostnameLabel;
    }

    /**
     * Set the hostnameLabel property: PrivateIpAddresses hostnameLabel.
     * 
     * @param hostnameLabel the hostnameLabel value to set.
     * @return the PrivateIpAddressPropertiesInner object itself.
     */
    public PrivateIpAddressPropertiesInner withHostnameLabel(String hostnameLabel) {
        this.hostnameLabel = hostnameLabel;
        return this;
    }

    /**
     * Get the ocid property: PrivateIpAddresses Id.
     * 
     * @return the ocid value.
     */
    public String ocid() {
        return this.ocid;
    }

    /**
     * Set the ocid property: PrivateIpAddresses Id.
     * 
     * @param ocid the ocid value to set.
     * @return the PrivateIpAddressPropertiesInner object itself.
     */
    public PrivateIpAddressPropertiesInner withOcid(String ocid) {
        this.ocid = ocid;
        return this;
    }

    /**
     * Get the ipAddress property: PrivateIpAddresses ipAddress.
     * 
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Set the ipAddress property: PrivateIpAddresses ipAddress.
     * 
     * @param ipAddress the ipAddress value to set.
     * @return the PrivateIpAddressPropertiesInner object itself.
     */
    public PrivateIpAddressPropertiesInner withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }

    /**
     * Get the subnetId property: PrivateIpAddresses subnetId.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: PrivateIpAddresses subnetId.
     * 
     * @param subnetId the subnetId value to set.
     * @return the PrivateIpAddressPropertiesInner object itself.
     */
    public PrivateIpAddressPropertiesInner withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (displayName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property displayName in model PrivateIpAddressPropertiesInner"));
        }
        if (hostnameLabel() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property hostnameLabel in model PrivateIpAddressPropertiesInner"));
        }
        if (ocid() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property ocid in model PrivateIpAddressPropertiesInner"));
        }
        if (ipAddress() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property ipAddress in model PrivateIpAddressPropertiesInner"));
        }
        if (subnetId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property subnetId in model PrivateIpAddressPropertiesInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PrivateIpAddressPropertiesInner.class);
}
