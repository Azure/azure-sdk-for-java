// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * PrivateIpAddress resource properties.
 */
@Immutable
public final class PrivateIpAddressPropertiesInner implements JsonSerializable<PrivateIpAddressPropertiesInner> {
    /*
     * PrivateIpAddresses displayName
     */
    private String displayName;

    /*
     * PrivateIpAddresses hostnameLabel
     */
    private String hostnameLabel;

    /*
     * PrivateIpAddresses Id
     */
    private String ocid;

    /*
     * PrivateIpAddresses ipAddress
     */
    private String ipAddress;

    /*
     * PrivateIpAddresses subnetId
     */
    private String subnetId;

    /**
     * Creates an instance of PrivateIpAddressPropertiesInner class.
     */
    private PrivateIpAddressPropertiesInner() {
    }

    /**
     * Get the displayName property: PrivateIpAddresses displayName.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the hostnameLabel property: PrivateIpAddresses hostnameLabel.
     * 
     * @return the hostnameLabel value.
     */
    public String hostnameLabel() {
        return this.hostnameLabel;
    }

    /**
     * Get the ocid property: PrivateIpAddresses Id.
     * 
     * @return the ocid value.
     */
    public String ocid() {
        return this.ocid;
    }

    /**
     * Get the ipAddress property: PrivateIpAddresses ipAddress.
     * 
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Get the subnetId property: PrivateIpAddresses subnetId.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (displayName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property displayName in model PrivateIpAddressPropertiesInner"));
        }
        if (hostnameLabel() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property hostnameLabel in model PrivateIpAddressPropertiesInner"));
        }
        if (ocid() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property ocid in model PrivateIpAddressPropertiesInner"));
        }
        if (ipAddress() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property ipAddress in model PrivateIpAddressPropertiesInner"));
        }
        if (subnetId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property subnetId in model PrivateIpAddressPropertiesInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PrivateIpAddressPropertiesInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("hostnameLabel", this.hostnameLabel);
        jsonWriter.writeStringField("ocid", this.ocid);
        jsonWriter.writeStringField("ipAddress", this.ipAddress);
        jsonWriter.writeStringField("subnetId", this.subnetId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PrivateIpAddressPropertiesInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PrivateIpAddressPropertiesInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PrivateIpAddressPropertiesInner.
     */
    public static PrivateIpAddressPropertiesInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PrivateIpAddressPropertiesInner deserializedPrivateIpAddressPropertiesInner
                = new PrivateIpAddressPropertiesInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedPrivateIpAddressPropertiesInner.displayName = reader.getString();
                } else if ("hostnameLabel".equals(fieldName)) {
                    deserializedPrivateIpAddressPropertiesInner.hostnameLabel = reader.getString();
                } else if ("ocid".equals(fieldName)) {
                    deserializedPrivateIpAddressPropertiesInner.ocid = reader.getString();
                } else if ("ipAddress".equals(fieldName)) {
                    deserializedPrivateIpAddressPropertiesInner.ipAddress = reader.getString();
                } else if ("subnetId".equals(fieldName)) {
                    deserializedPrivateIpAddressPropertiesInner.subnetId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPrivateIpAddressPropertiesInner;
        });
    }
}
