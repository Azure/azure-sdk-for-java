// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.oracledatabase.fluent.DbVersionsClient;
import com.azure.resourcemanager.oracledatabase.fluent.models.DbVersionInner;
import com.azure.resourcemanager.oracledatabase.implementation.models.DbVersionListResult;
import com.azure.resourcemanager.oracledatabase.models.BaseDbSystemShapes;
import com.azure.resourcemanager.oracledatabase.models.ShapeFamilyType;
import com.azure.resourcemanager.oracledatabase.models.StorageManagementType;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DbVersionsClient.
 */
public final class DbVersionsClientImpl implements DbVersionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DbVersionsService service;

    /**
     * The service client containing this operation class.
     */
    private final OracleDatabaseManagementClientImpl client;

    /**
     * Initializes an instance of DbVersionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DbVersionsClientImpl(OracleDatabaseManagementClientImpl client) {
        this.service
            = RestProxy.create(DbVersionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for OracleDatabaseManagementClientDbVersions to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "OracleDatabaseManagementClientDbVersions")
    public interface DbVersionsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/dbSystemDbVersions/{dbversionsname}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DbVersionInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @PathParam("dbversionsname") String dbversionsname,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/dbSystemDbVersions/{dbversionsname}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DbVersionInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @PathParam("dbversionsname") String dbversionsname,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/dbSystemDbVersions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DbVersionListResult>> listByLocation(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @QueryParam("dbSystemShape") BaseDbSystemShapes dbSystemShape,
            @QueryParam("dbSystemId") String dbSystemId,
            @QueryParam("storageManagement") StorageManagementType storageManagement,
            @QueryParam("isUpgradeSupported") Boolean isUpgradeSupported,
            @QueryParam("isDatabaseSoftwareImageSupported") Boolean isDatabaseSoftwareImageSupported,
            @QueryParam("shapeFamily") ShapeFamilyType shapeFamily, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/dbSystemDbVersions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DbVersionListResult> listByLocationSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @QueryParam("dbSystemShape") BaseDbSystemShapes dbSystemShape,
            @QueryParam("dbSystemId") String dbSystemId,
            @QueryParam("storageManagement") StorageManagementType storageManagement,
            @QueryParam("isUpgradeSupported") Boolean isUpgradeSupported,
            @QueryParam("isDatabaseSoftwareImageSupported") Boolean isDatabaseSoftwareImageSupported,
            @QueryParam("shapeFamily") ShapeFamilyType shapeFamily, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DbVersionListResult>> listByLocationNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DbVersionListResult> listByLocationNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a DbVersion.
     * 
     * @param location The name of the Azure region.
     * @param dbversionsname DbVersion name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DbVersion along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DbVersionInner>> getWithResponseAsync(String location, String dbversionsname) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), location, dbversionsname, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a DbVersion.
     * 
     * @param location The name of the Azure region.
     * @param dbversionsname DbVersion name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DbVersion on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DbVersionInner> getAsync(String location, String dbversionsname) {
        return getWithResponseAsync(location, dbversionsname).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a DbVersion.
     * 
     * @param location The name of the Azure region.
     * @param dbversionsname DbVersion name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DbVersion along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DbVersionInner> getWithResponse(String location, String dbversionsname, Context context) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            location, dbversionsname, accept, context);
    }

    /**
     * Get a DbVersion.
     * 
     * @param location The name of the Azure region.
     * @param dbversionsname DbVersion name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DbVersion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DbVersionInner get(String location, String dbversionsname) {
        return getWithResponse(location, dbversionsname, Context.NONE).getValue();
    }

    /**
     * List DbVersion resources by SubscriptionLocationResource.
     * 
     * @param location The name of the Azure region.
     * @param dbSystemShape If provided, filters the results to the set of database versions which are supported for the
     * given shape. e.g., VM.Standard.E5.Flex.
     * @param dbSystemId The DB system AzureId. If provided, filters the results to the set of database versions which
     * are supported for the DB system.
     * @param storageManagement The DB system storage management option. Used to list database versions available for
     * that storage manager. Valid values are ASM and LVM.
     * @param isUpgradeSupported If true, filters the results to the set of database versions which are supported for
     * Upgrade.
     * @param isDatabaseSoftwareImageSupported If true, filters the results to the set of Oracle Database versions that
     * are supported for the database software images.
     * @param shapeFamily If provided, filters the results to the set of database versions which are supported for the
     * given shape family.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbVersion list operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DbVersionInner>> listByLocationSinglePageAsync(String location,
        BaseDbSystemShapes dbSystemShape, String dbSystemId, StorageManagementType storageManagement,
        Boolean isUpgradeSupported, Boolean isDatabaseSoftwareImageSupported, ShapeFamilyType shapeFamily) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByLocation(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), location, dbSystemShape, dbSystemId, storageManagement,
                isUpgradeSupported, isDatabaseSoftwareImageSupported, shapeFamily, accept, context))
            .<PagedResponse<DbVersionInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List DbVersion resources by SubscriptionLocationResource.
     * 
     * @param location The name of the Azure region.
     * @param dbSystemShape If provided, filters the results to the set of database versions which are supported for the
     * given shape. e.g., VM.Standard.E5.Flex.
     * @param dbSystemId The DB system AzureId. If provided, filters the results to the set of database versions which
     * are supported for the DB system.
     * @param storageManagement The DB system storage management option. Used to list database versions available for
     * that storage manager. Valid values are ASM and LVM.
     * @param isUpgradeSupported If true, filters the results to the set of database versions which are supported for
     * Upgrade.
     * @param isDatabaseSoftwareImageSupported If true, filters the results to the set of Oracle Database versions that
     * are supported for the database software images.
     * @param shapeFamily If provided, filters the results to the set of database versions which are supported for the
     * given shape family.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbVersion list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DbVersionInner> listByLocationAsync(String location, BaseDbSystemShapes dbSystemShape,
        String dbSystemId, StorageManagementType storageManagement, Boolean isUpgradeSupported,
        Boolean isDatabaseSoftwareImageSupported, ShapeFamilyType shapeFamily) {
        return new PagedFlux<>(
            () -> listByLocationSinglePageAsync(location, dbSystemShape, dbSystemId, storageManagement,
                isUpgradeSupported, isDatabaseSoftwareImageSupported, shapeFamily),
            nextLink -> listByLocationNextSinglePageAsync(nextLink));
    }

    /**
     * List DbVersion resources by SubscriptionLocationResource.
     * 
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbVersion list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DbVersionInner> listByLocationAsync(String location) {
        final BaseDbSystemShapes dbSystemShape = null;
        final String dbSystemId = null;
        final StorageManagementType storageManagement = null;
        final Boolean isUpgradeSupported = null;
        final Boolean isDatabaseSoftwareImageSupported = null;
        final ShapeFamilyType shapeFamily = null;
        return new PagedFlux<>(
            () -> listByLocationSinglePageAsync(location, dbSystemShape, dbSystemId, storageManagement,
                isUpgradeSupported, isDatabaseSoftwareImageSupported, shapeFamily),
            nextLink -> listByLocationNextSinglePageAsync(nextLink));
    }

    /**
     * List DbVersion resources by SubscriptionLocationResource.
     * 
     * @param location The name of the Azure region.
     * @param dbSystemShape If provided, filters the results to the set of database versions which are supported for the
     * given shape. e.g., VM.Standard.E5.Flex.
     * @param dbSystemId The DB system AzureId. If provided, filters the results to the set of database versions which
     * are supported for the DB system.
     * @param storageManagement The DB system storage management option. Used to list database versions available for
     * that storage manager. Valid values are ASM and LVM.
     * @param isUpgradeSupported If true, filters the results to the set of database versions which are supported for
     * Upgrade.
     * @param isDatabaseSoftwareImageSupported If true, filters the results to the set of Oracle Database versions that
     * are supported for the database software images.
     * @param shapeFamily If provided, filters the results to the set of database versions which are supported for the
     * given shape family.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbVersion list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DbVersionInner> listByLocationSinglePage(String location, BaseDbSystemShapes dbSystemShape,
        String dbSystemId, StorageManagementType storageManagement, Boolean isUpgradeSupported,
        Boolean isDatabaseSoftwareImageSupported, ShapeFamilyType shapeFamily) {
        final String accept = "application/json";
        Response<DbVersionListResult> res = service.listByLocationSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), location, dbSystemShape, dbSystemId,
            storageManagement, isUpgradeSupported, isDatabaseSoftwareImageSupported, shapeFamily, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List DbVersion resources by SubscriptionLocationResource.
     * 
     * @param location The name of the Azure region.
     * @param dbSystemShape If provided, filters the results to the set of database versions which are supported for the
     * given shape. e.g., VM.Standard.E5.Flex.
     * @param dbSystemId The DB system AzureId. If provided, filters the results to the set of database versions which
     * are supported for the DB system.
     * @param storageManagement The DB system storage management option. Used to list database versions available for
     * that storage manager. Valid values are ASM and LVM.
     * @param isUpgradeSupported If true, filters the results to the set of database versions which are supported for
     * Upgrade.
     * @param isDatabaseSoftwareImageSupported If true, filters the results to the set of Oracle Database versions that
     * are supported for the database software images.
     * @param shapeFamily If provided, filters the results to the set of database versions which are supported for the
     * given shape family.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbVersion list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DbVersionInner> listByLocationSinglePage(String location, BaseDbSystemShapes dbSystemShape,
        String dbSystemId, StorageManagementType storageManagement, Boolean isUpgradeSupported,
        Boolean isDatabaseSoftwareImageSupported, ShapeFamilyType shapeFamily, Context context) {
        final String accept = "application/json";
        Response<DbVersionListResult> res = service.listByLocationSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), location, dbSystemShape, dbSystemId,
            storageManagement, isUpgradeSupported, isDatabaseSoftwareImageSupported, shapeFamily, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List DbVersion resources by SubscriptionLocationResource.
     * 
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbVersion list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DbVersionInner> listByLocation(String location) {
        final BaseDbSystemShapes dbSystemShape = null;
        final String dbSystemId = null;
        final StorageManagementType storageManagement = null;
        final Boolean isUpgradeSupported = null;
        final Boolean isDatabaseSoftwareImageSupported = null;
        final ShapeFamilyType shapeFamily = null;
        return new PagedIterable<>(() -> listByLocationSinglePage(location, dbSystemShape, dbSystemId,
            storageManagement, isUpgradeSupported, isDatabaseSoftwareImageSupported, shapeFamily),
            nextLink -> listByLocationNextSinglePage(nextLink));
    }

    /**
     * List DbVersion resources by SubscriptionLocationResource.
     * 
     * @param location The name of the Azure region.
     * @param dbSystemShape If provided, filters the results to the set of database versions which are supported for the
     * given shape. e.g., VM.Standard.E5.Flex.
     * @param dbSystemId The DB system AzureId. If provided, filters the results to the set of database versions which
     * are supported for the DB system.
     * @param storageManagement The DB system storage management option. Used to list database versions available for
     * that storage manager. Valid values are ASM and LVM.
     * @param isUpgradeSupported If true, filters the results to the set of database versions which are supported for
     * Upgrade.
     * @param isDatabaseSoftwareImageSupported If true, filters the results to the set of Oracle Database versions that
     * are supported for the database software images.
     * @param shapeFamily If provided, filters the results to the set of database versions which are supported for the
     * given shape family.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbVersion list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DbVersionInner> listByLocation(String location, BaseDbSystemShapes dbSystemShape,
        String dbSystemId, StorageManagementType storageManagement, Boolean isUpgradeSupported,
        Boolean isDatabaseSoftwareImageSupported, ShapeFamilyType shapeFamily, Context context) {
        return new PagedIterable<>(
            () -> listByLocationSinglePage(location, dbSystemShape, dbSystemId, storageManagement, isUpgradeSupported,
                isDatabaseSoftwareImageSupported, shapeFamily, context),
            nextLink -> listByLocationNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbVersion list operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DbVersionInner>> listByLocationNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByLocationNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DbVersionInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbVersion list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DbVersionInner> listByLocationNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<DbVersionListResult> res
            = service.listByLocationNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DbVersion list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DbVersionInner> listByLocationNextSinglePage(String nextLink, Context context) {
        final String accept = "application/json";
        Response<DbVersionListResult> res
            = service.listByLocationNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }
}
