// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.oracledatabase.OracleDatabaseManager;
import com.azure.resourcemanager.oracledatabase.models.DnsPrivateView;
import com.azure.resourcemanager.oracledatabase.models.DnsPrivateViewsLifecycleState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DnsPrivateViewsListByLocationMockTests {
    @Test
    public void testListByLocation() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"ocid\":\"l\",\"displayName\":\"wumuaslzk\",\"isProtected\":true,\"lifecycleState\":\"Deleting\",\"self\":\"woycqucwyha\",\"timeCreated\":\"2021-12-05T11:23:21Z\",\"timeUpdated\":\"2021-04-19T13:38:03Z\",\"provisioningState\":\"Failed\"},\"id\":\"kywuhpsvfuu\",\"name\":\"utlwexxwla\",\"type\":\"niexzsrzpgepq\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        OracleDatabaseManager manager = OracleDatabaseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DnsPrivateView> response
            = manager.dnsPrivateViews().listByLocation("zab", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("l", response.iterator().next().properties().ocid());
        Assertions.assertEquals("wumuaslzk", response.iterator().next().properties().displayName());
        Assertions.assertEquals(true, response.iterator().next().properties().isProtected());
        Assertions.assertEquals(DnsPrivateViewsLifecycleState.DELETING,
            response.iterator().next().properties().lifecycleState());
        Assertions.assertEquals("woycqucwyha", response.iterator().next().properties().self());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-05T11:23:21Z"),
            response.iterator().next().properties().timeCreated());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-19T13:38:03Z"),
            response.iterator().next().properties().timeUpdated());
    }
}
