// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.oracledatabase.models.DbSystemSourceType;
import com.azure.resourcemanager.oracledatabase.models.DbSystemUpdate;
import com.azure.resourcemanager.oracledatabase.models.DbSystemUpdateProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DbSystemUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DbSystemUpdate model = BinaryData.fromString(
            "{\"zones\":[\"fbkgozxwopdby\",\"p\",\"zqaclna\"],\"tags\":{\"xuuyilflqoiquvr\":\"iygnugjknfsmfctt\",\"tczytqjtwh\":\"hmrnjhvsuj\",\"pddouifamowaziyn\":\"uunfprnjletlxsm\",\"szdtmaajquh\":\"nlqwzdvpiwhx\"},\"properties\":{\"source\":\"None\"}}")
            .toObject(DbSystemUpdate.class);
        Assertions.assertEquals("fbkgozxwopdby", model.zones().get(0));
        Assertions.assertEquals("iygnugjknfsmfctt", model.tags().get("xuuyilflqoiquvr"));
        Assertions.assertEquals(DbSystemSourceType.NONE, model.properties().source());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DbSystemUpdate model = new DbSystemUpdate().withZones(Arrays.asList("fbkgozxwopdby", "p", "zqaclna"))
            .withTags(mapOf("xuuyilflqoiquvr", "iygnugjknfsmfctt", "tczytqjtwh", "hmrnjhvsuj", "pddouifamowaziyn",
                "uunfprnjletlxsm", "szdtmaajquh", "nlqwzdvpiwhx"))
            .withProperties(new DbSystemUpdateProperties().withSource(DbSystemSourceType.NONE));
        model = BinaryData.fromObject(model).toObject(DbSystemUpdate.class);
        Assertions.assertEquals("fbkgozxwopdby", model.zones().get(0));
        Assertions.assertEquals("iygnugjknfsmfctt", model.tags().get("xuuyilflqoiquvr"));
        Assertions.assertEquals(DbSystemSourceType.NONE, model.properties().source());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
