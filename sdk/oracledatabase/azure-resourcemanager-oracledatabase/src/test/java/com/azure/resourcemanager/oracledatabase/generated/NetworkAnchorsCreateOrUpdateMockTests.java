// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.oracledatabase.OracleDatabaseManager;
import com.azure.resourcemanager.oracledatabase.models.DnsForwardingRule;
import com.azure.resourcemanager.oracledatabase.models.NetworkAnchor;
import com.azure.resourcemanager.oracledatabase.models.NetworkAnchorProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NetworkAnchorsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"resourceAnchorId\":\"to\",\"provisioningState\":\"Succeeded\",\"vnetId\":\"quvwsxbgn\",\"subnetId\":\"kerv\",\"cidrBlock\":\"hoadhrsxqvzv\",\"ociVcnId\":\"abdsr\",\"ociVcnDnsLabel\":\"ajglzrsubklr\",\"ociSubnetId\":\"jnltcetjdvqydi\",\"ociBackupCidrBlock\":\"qkwaruwd\",\"isOracleToAzureDnsZoneSyncEnabled\":true,\"isOracleDnsListeningEndpointEnabled\":false,\"isOracleDnsForwardingEndpointEnabled\":false,\"dnsForwardingRules\":[{\"domainNames\":\"gjxb\",\"forwardingIpAddress\":\"banbaupwtzv\"}],\"dnsListeningEndpointAllowedCidrs\":\"klozkxbz\",\"dnsListeningEndpointIpAddress\":\"ejpl\",\"dnsForwardingEndpointIpAddress\":\"anbtttkgsu\",\"dnsForwardingRulesUrl\":\"nrswgkpjhboyik\",\"dnsListeningEndpointNsgRulesUrl\":\"huhkslgwlok\",\"dnsForwardingEndpointNsgRulesUrl\":\"eoijyzcqypzqzufg\"},\"zones\":[\"ej\",\"vdwtfxptpqayamk\",\"cf\",\"ybmx\"],\"location\":\"xocuullojkpoyhgw\",\"tags\":{\"sgzlrqhb\":\"uxdbdljzgdyrcvuq\"},\"id\":\"nq\",\"name\":\"gdxwbsfpyxx\",\"type\":\"jlf\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        OracleDatabaseManager manager = OracleDatabaseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        NetworkAnchor response = manager.networkAnchors()
            .define("pqadagrhrdicxdwy")
            .withRegion("vzipbwxgo")
            .withExistingResourceGroup("gmsfepxyi")
            .withTags(mapOf("admskx", "zp"))
            .withProperties(new NetworkAnchorProperties().withResourceAnchorId("owxwyovcxjsgbip")
                .withSubnetId("crdpibfdyjduss")
                .withOciVcnDnsLabel("rnuybffljfii")
                .withOciBackupCidrBlock("usrexxf")
                .withIsOracleToAzureDnsZoneSyncEnabled(true)
                .withIsOracleDnsListeningEndpointEnabled(true)
                .withIsOracleDnsForwardingEndpointEnabled(false)
                .withDnsForwardingRules(Arrays.asList(
                    new DnsForwardingRule().withDomainNames("zilfmnlikps").withForwardingIpAddress("msfeypofqpm"),
                    new DnsForwardingRule().withDomainNames("hyqgsdrmmttjx").withForwardingIpAddress("phgerhsmvgoh")))
                .withDnsListeningEndpointAllowedCidrs("zmqilrixysfnim"))
            .withZones(Arrays.asList("iedfsbwcei"))
            .create();

        Assertions.assertEquals("xocuullojkpoyhgw", response.location());
        Assertions.assertEquals("uxdbdljzgdyrcvuq", response.tags().get("sgzlrqhb"));
        Assertions.assertEquals("to", response.properties().resourceAnchorId());
        Assertions.assertEquals("kerv", response.properties().subnetId());
        Assertions.assertEquals("ajglzrsubklr", response.properties().ociVcnDnsLabel());
        Assertions.assertEquals("qkwaruwd", response.properties().ociBackupCidrBlock());
        Assertions.assertTrue(response.properties().isOracleToAzureDnsZoneSyncEnabled());
        Assertions.assertFalse(response.properties().isOracleDnsListeningEndpointEnabled());
        Assertions.assertFalse(response.properties().isOracleDnsForwardingEndpointEnabled());
        Assertions.assertEquals("gjxb", response.properties().dnsForwardingRules().get(0).domainNames());
        Assertions.assertEquals("banbaupwtzv", response.properties().dnsForwardingRules().get(0).forwardingIpAddress());
        Assertions.assertEquals("klozkxbz", response.properties().dnsListeningEndpointAllowedCidrs());
        Assertions.assertEquals("ej", response.zones().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
