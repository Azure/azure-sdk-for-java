// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.oracledatabase.models.DnsForwardingRule;
import com.azure.resourcemanager.oracledatabase.models.NetworkAnchorProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkAnchorPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkAnchorProperties model = BinaryData.fromString(
            "{\"resourceAnchorId\":\"bmikost\",\"provisioningState\":\"Succeeded\",\"vnetId\":\"iwbuqny\",\"subnetId\":\"phzfylsgcrp\",\"cidrBlock\":\"cunezzcezelfw\",\"ociVcnId\":\"wl\",\"ociVcnDnsLabel\":\"jwetnpsihcla\",\"ociSubnetId\":\"va\",\"ociBackupCidrBlock\":\"pt\",\"isOracleToAzureDnsZoneSyncEnabled\":false,\"isOracleDnsListeningEndpointEnabled\":true,\"isOracleDnsForwardingEndpointEnabled\":true,\"dnsForwardingRules\":[{\"domainNames\":\"w\",\"forwardingIpAddress\":\"kchcxwa\"},{\"domainNames\":\"fewz\",\"forwardingIpAddress\":\"kjexfdeqvhp\"},{\"domainNames\":\"ylkkshkbffmbm\",\"forwardingIpAddress\":\"zjrgyww\"}],\"dnsListeningEndpointAllowedCidrs\":\"jx\",\"dnsListeningEndpointIpAddress\":\"ptfujgicgaaoept\",\"dnsForwardingEndpointIpAddress\":\"qutdewemxs\",\"dnsForwardingRulesUrl\":\"ruunzzjgehkf\",\"dnsListeningEndpointNsgRulesUrl\":\"m\",\"dnsForwardingEndpointNsgRulesUrl\":\"ixokffqyin\"}")
            .toObject(NetworkAnchorProperties.class);
        Assertions.assertEquals("bmikost", model.resourceAnchorId());
        Assertions.assertEquals("phzfylsgcrp", model.subnetId());
        Assertions.assertEquals("jwetnpsihcla", model.ociVcnDnsLabel());
        Assertions.assertEquals("pt", model.ociBackupCidrBlock());
        Assertions.assertFalse(model.isOracleToAzureDnsZoneSyncEnabled());
        Assertions.assertTrue(model.isOracleDnsListeningEndpointEnabled());
        Assertions.assertTrue(model.isOracleDnsForwardingEndpointEnabled());
        Assertions.assertEquals("w", model.dnsForwardingRules().get(0).domainNames());
        Assertions.assertEquals("kchcxwa", model.dnsForwardingRules().get(0).forwardingIpAddress());
        Assertions.assertEquals("jx", model.dnsListeningEndpointAllowedCidrs());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkAnchorProperties model = new NetworkAnchorProperties().withResourceAnchorId("bmikost")
            .withSubnetId("phzfylsgcrp")
            .withOciVcnDnsLabel("jwetnpsihcla")
            .withOciBackupCidrBlock("pt")
            .withIsOracleToAzureDnsZoneSyncEnabled(false)
            .withIsOracleDnsListeningEndpointEnabled(true)
            .withIsOracleDnsForwardingEndpointEnabled(true)
            .withDnsForwardingRules(
                Arrays.asList(new DnsForwardingRule().withDomainNames("w").withForwardingIpAddress("kchcxwa"),
                    new DnsForwardingRule().withDomainNames("fewz").withForwardingIpAddress("kjexfdeqvhp"),
                    new DnsForwardingRule().withDomainNames("ylkkshkbffmbm").withForwardingIpAddress("zjrgyww")))
            .withDnsListeningEndpointAllowedCidrs("jx");
        model = BinaryData.fromObject(model).toObject(NetworkAnchorProperties.class);
        Assertions.assertEquals("bmikost", model.resourceAnchorId());
        Assertions.assertEquals("phzfylsgcrp", model.subnetId());
        Assertions.assertEquals("jwetnpsihcla", model.ociVcnDnsLabel());
        Assertions.assertEquals("pt", model.ociBackupCidrBlock());
        Assertions.assertFalse(model.isOracleToAzureDnsZoneSyncEnabled());
        Assertions.assertTrue(model.isOracleDnsListeningEndpointEnabled());
        Assertions.assertTrue(model.isOracleDnsForwardingEndpointEnabled());
        Assertions.assertEquals("w", model.dnsForwardingRules().get(0).domainNames());
        Assertions.assertEquals("kchcxwa", model.dnsForwardingRules().get(0).forwardingIpAddress());
        Assertions.assertEquals("jx", model.dnsListeningEndpointAllowedCidrs());
    }
}
