// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructureUpdateProperties;
import com.azure.resourcemanager.oracledatabase.models.CustomerContact;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeek;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeekName;
import com.azure.resourcemanager.oracledatabase.models.MaintenanceWindow;
import com.azure.resourcemanager.oracledatabase.models.Month;
import com.azure.resourcemanager.oracledatabase.models.MonthName;
import com.azure.resourcemanager.oracledatabase.models.PatchingMode;
import com.azure.resourcemanager.oracledatabase.models.Preference;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class CloudExadataInfrastructureUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CloudExadataInfrastructureUpdateProperties model = BinaryData.fromString(
            "{\"computeCount\":861887507,\"storageCount\":802895356,\"maintenanceWindow\":{\"preference\":\"NoPreference\",\"months\":[{\"name\":\"March\"},{\"name\":\"July\"},{\"name\":\"June\"},{\"name\":\"May\"}],\"weeksOfMonth\":[1569245436,2056764824],\"daysOfWeek\":[{\"name\":\"Friday\"}],\"hoursOfDay\":[885439585],\"leadTimeInWeeks\":270423154,\"patchingMode\":\"Rolling\",\"customActionTimeoutInMins\":1943663819,\"isCustomActionTimeoutEnabled\":true,\"isMonthlyPatchingEnabled\":false},\"customerContacts\":[{\"email\":\"bdunygaeqid\"},{\"email\":\"qfatpxllrxcyjm\"}],\"displayName\":\"dsuvarmywdmjsjqb\"}")
            .toObject(CloudExadataInfrastructureUpdateProperties.class);
        Assertions.assertEquals(861887507, model.computeCount());
        Assertions.assertEquals(802895356, model.storageCount());
        Assertions.assertEquals(Preference.NO_PREFERENCE, model.maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.MARCH, model.maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(1569245436, model.maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.FRIDAY, model.maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(885439585, model.maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(270423154, model.maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.ROLLING, model.maintenanceWindow().patchingMode());
        Assertions.assertEquals(1943663819, model.maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertEquals(true, model.maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertEquals(false, model.maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("bdunygaeqid", model.customerContacts().get(0).email());
        Assertions.assertEquals("dsuvarmywdmjsjqb", model.displayName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CloudExadataInfrastructureUpdateProperties model = new CloudExadataInfrastructureUpdateProperties()
            .withComputeCount(861887507)
            .withStorageCount(802895356)
            .withMaintenanceWindow(new MaintenanceWindow().withPreference(Preference.NO_PREFERENCE)
                .withMonths(Arrays.asList(new Month().withName(MonthName.MARCH), new Month().withName(MonthName.JULY),
                    new Month().withName(MonthName.JUNE), new Month().withName(MonthName.MAY)))
                .withWeeksOfMonth(Arrays.asList(1569245436, 2056764824))
                .withDaysOfWeek(Arrays.asList(new DayOfWeek().withName(DayOfWeekName.FRIDAY)))
                .withHoursOfDay(Arrays.asList(885439585))
                .withLeadTimeInWeeks(270423154)
                .withPatchingMode(PatchingMode.ROLLING)
                .withCustomActionTimeoutInMins(1943663819)
                .withIsCustomActionTimeoutEnabled(true)
                .withIsMonthlyPatchingEnabled(false))
            .withCustomerContacts(Arrays.asList(new CustomerContact().withEmail("bdunygaeqid"),
                new CustomerContact().withEmail("qfatpxllrxcyjm")))
            .withDisplayName("dsuvarmywdmjsjqb");
        model = BinaryData.fromObject(model).toObject(CloudExadataInfrastructureUpdateProperties.class);
        Assertions.assertEquals(861887507, model.computeCount());
        Assertions.assertEquals(802895356, model.storageCount());
        Assertions.assertEquals(Preference.NO_PREFERENCE, model.maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.MARCH, model.maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(1569245436, model.maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.FRIDAY, model.maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(885439585, model.maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(270423154, model.maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.ROLLING, model.maintenanceWindow().patchingMode());
        Assertions.assertEquals(1943663819, model.maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertEquals(true, model.maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertEquals(false, model.maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("bdunygaeqid", model.customerContacts().get(0).email());
        Assertions.assertEquals("dsuvarmywdmjsjqb", model.displayName());
    }
}
