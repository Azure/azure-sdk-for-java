// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.oracledatabase.models.AllConnectionStringType;
import com.azure.resourcemanager.oracledatabase.models.ConnectionStringType;
import com.azure.resourcemanager.oracledatabase.models.ConsumerGroup;
import com.azure.resourcemanager.oracledatabase.models.HostFormatType;
import com.azure.resourcemanager.oracledatabase.models.ProfileType;
import com.azure.resourcemanager.oracledatabase.models.ProtocolType;
import com.azure.resourcemanager.oracledatabase.models.SessionModeType;
import com.azure.resourcemanager.oracledatabase.models.SyntaxFormatType;
import com.azure.resourcemanager.oracledatabase.models.TlsAuthenticationType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ConnectionStringTypeTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConnectionStringType model = BinaryData.fromString(
            "{\"allConnectionStrings\":{\"high\":\"zyde\",\"low\":\"jwyahuxinpmqnja\",\"medium\":\"ixjsprozvcputeg\"},\"dedicated\":\"wmfdatscmdvpjhul\",\"high\":\"uvm\",\"low\":\"ozkrwfndiodjpslw\",\"medium\":\"dpvwryoqpsoaccta\",\"profiles\":[{\"consumerGroup\":\"Medium\",\"displayName\":\"lahbcryff\",\"hostFormat\":\"Fqdn\",\"isRegional\":false,\"protocol\":\"TCP\",\"sessionMode\":\"Redirect\",\"syntaxFormat\":\"Ezconnect\",\"tlsAuthentication\":\"Mutual\",\"value\":\"paojakhmsbzjh\"},{\"consumerGroup\":\"Medium\",\"displayName\":\"evdphlxaol\",\"hostFormat\":\"Ip\",\"isRegional\":false,\"protocol\":\"TCPS\",\"sessionMode\":\"Redirect\",\"syntaxFormat\":\"Long\",\"tlsAuthentication\":\"Server\",\"value\":\"pfzfsinzgvfc\"}]}")
            .toObject(ConnectionStringType.class);
        Assertions.assertEquals("zyde", model.allConnectionStrings().high());
        Assertions.assertEquals("jwyahuxinpmqnja", model.allConnectionStrings().low());
        Assertions.assertEquals("ixjsprozvcputeg", model.allConnectionStrings().medium());
        Assertions.assertEquals("wmfdatscmdvpjhul", model.dedicated());
        Assertions.assertEquals("uvm", model.high());
        Assertions.assertEquals("ozkrwfndiodjpslw", model.low());
        Assertions.assertEquals("dpvwryoqpsoaccta", model.medium());
        Assertions.assertEquals(ConsumerGroup.MEDIUM, model.profiles().get(0).consumerGroup());
        Assertions.assertEquals("lahbcryff", model.profiles().get(0).displayName());
        Assertions.assertEquals(HostFormatType.FQDN, model.profiles().get(0).hostFormat());
        Assertions.assertEquals(false, model.profiles().get(0).isRegional());
        Assertions.assertEquals(ProtocolType.TCP, model.profiles().get(0).protocol());
        Assertions.assertEquals(SessionModeType.REDIRECT, model.profiles().get(0).sessionMode());
        Assertions.assertEquals(SyntaxFormatType.EZCONNECT, model.profiles().get(0).syntaxFormat());
        Assertions.assertEquals(TlsAuthenticationType.MUTUAL, model.profiles().get(0).tlsAuthentication());
        Assertions.assertEquals("paojakhmsbzjh", model.profiles().get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConnectionStringType model = new ConnectionStringType()
            .withAllConnectionStrings(
                new AllConnectionStringType().withHigh("zyde").withLow("jwyahuxinpmqnja").withMedium("ixjsprozvcputeg"))
            .withDedicated("wmfdatscmdvpjhul")
            .withHigh("uvm")
            .withLow("ozkrwfndiodjpslw")
            .withMedium("dpvwryoqpsoaccta")
            .withProfiles(Arrays.asList(
                new ProfileType().withConsumerGroup(ConsumerGroup.MEDIUM)
                    .withDisplayName("lahbcryff")
                    .withHostFormat(HostFormatType.FQDN)
                    .withIsRegional(false)
                    .withProtocol(ProtocolType.TCP)
                    .withSessionMode(SessionModeType.REDIRECT)
                    .withSyntaxFormat(SyntaxFormatType.EZCONNECT)
                    .withTlsAuthentication(TlsAuthenticationType.MUTUAL)
                    .withValue("paojakhmsbzjh"),
                new ProfileType().withConsumerGroup(ConsumerGroup.MEDIUM)
                    .withDisplayName("evdphlxaol")
                    .withHostFormat(HostFormatType.IP)
                    .withIsRegional(false)
                    .withProtocol(ProtocolType.TCPS)
                    .withSessionMode(SessionModeType.REDIRECT)
                    .withSyntaxFormat(SyntaxFormatType.LONG)
                    .withTlsAuthentication(TlsAuthenticationType.SERVER)
                    .withValue("pfzfsinzgvfc")));
        model = BinaryData.fromObject(model).toObject(ConnectionStringType.class);
        Assertions.assertEquals("zyde", model.allConnectionStrings().high());
        Assertions.assertEquals("jwyahuxinpmqnja", model.allConnectionStrings().low());
        Assertions.assertEquals("ixjsprozvcputeg", model.allConnectionStrings().medium());
        Assertions.assertEquals("wmfdatscmdvpjhul", model.dedicated());
        Assertions.assertEquals("uvm", model.high());
        Assertions.assertEquals("ozkrwfndiodjpslw", model.low());
        Assertions.assertEquals("dpvwryoqpsoaccta", model.medium());
        Assertions.assertEquals(ConsumerGroup.MEDIUM, model.profiles().get(0).consumerGroup());
        Assertions.assertEquals("lahbcryff", model.profiles().get(0).displayName());
        Assertions.assertEquals(HostFormatType.FQDN, model.profiles().get(0).hostFormat());
        Assertions.assertEquals(false, model.profiles().get(0).isRegional());
        Assertions.assertEquals(ProtocolType.TCP, model.profiles().get(0).protocol());
        Assertions.assertEquals(SessionModeType.REDIRECT, model.profiles().get(0).sessionMode());
        Assertions.assertEquals(SyntaxFormatType.EZCONNECT, model.profiles().get(0).syntaxFormat());
        Assertions.assertEquals(TlsAuthenticationType.MUTUAL, model.profiles().get(0).tlsAuthentication());
        Assertions.assertEquals("paojakhmsbzjh", model.profiles().get(0).value());
    }
}
