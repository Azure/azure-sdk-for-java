// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.oracledatabase.OracleDatabaseManager;
import com.azure.resourcemanager.oracledatabase.models.ExascaleDbStorageInputDetails;
import com.azure.resourcemanager.oracledatabase.models.ExascaleDbStorageVault;
import com.azure.resourcemanager.oracledatabase.models.ExascaleDbStorageVaultProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ExascaleDbStorageVaultsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"additionalFlashCacheInPercent\":64736512,\"description\":\"edev\",\"displayName\":\"bo\",\"highCapacityDatabaseStorageInput\":{\"totalSizeInGbs\":222208753},\"highCapacityDatabaseStorage\":{\"availableSizeInGbs\":112594464,\"totalSizeInGbs\":9633412},\"timeZone\":\"kkhminqcymczngn\",\"provisioningState\":\"Succeeded\",\"lifecycleState\":\"Terminating\",\"lifecycleDetails\":\"unin\",\"vmClusterCount\":290904524,\"ocid\":\"chaqdtvqec\",\"ociUrl\":\"ct\"},\"zones\":[\"dtddmflh\",\"ytxzvtznapxbanno\",\"voxczytpr\",\"nwvroevytlyokrr\"],\"location\":\"uuxvnsasbcry\",\"tags\":{\"xnazpmkml\":\"izrxklob\"},\"id\":\"vevfxz\",\"name\":\"pj\",\"type\":\"bzxliohrdddtfgxq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        OracleDatabaseManager manager = OracleDatabaseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ExascaleDbStorageVault response = manager.exascaleDbStorageVaults()
            .define("uuuybnchrsziz")
            .withRegion("bvqt")
            .withExistingResourceGroup("sjgqrsxyp")
            .withTags(mapOf("ukhpyrneizjcp", "rfdl", "uxddbhfh", "ogkhnmgbr", "lontacnpq", "fpazjzoywjxhpd", "xh",
                "tehtuevrhrljyoog"))
            .withProperties(new ExascaleDbStorageVaultProperties().withAdditionalFlashCacheInPercent(327117456)
                .withDescription("yetnd")
                .withDisplayName("bf")
                .withHighCapacityDatabaseStorageInput(new ExascaleDbStorageInputDetails().withTotalSizeInGbs(834158684))
                .withTimeZone("nlgmtrwahzjmu"))
            .withZones(Arrays.asList("hjnhgwydyynfsvk"))
            .create();

        Assertions.assertEquals("uuxvnsasbcry", response.location());
        Assertions.assertEquals("izrxklob", response.tags().get("xnazpmkml"));
        Assertions.assertEquals(64736512, response.properties().additionalFlashCacheInPercent());
        Assertions.assertEquals("edev", response.properties().description());
        Assertions.assertEquals("bo", response.properties().displayName());
        Assertions.assertEquals(222208753, response.properties().highCapacityDatabaseStorageInput().totalSizeInGbs());
        Assertions.assertEquals("kkhminqcymczngn", response.properties().timeZone());
        Assertions.assertEquals("dtddmflh", response.zones().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
