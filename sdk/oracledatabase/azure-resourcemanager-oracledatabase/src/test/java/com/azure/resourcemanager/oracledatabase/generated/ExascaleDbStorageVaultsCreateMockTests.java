// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.oracledatabase.OracleDatabaseManager;
import com.azure.resourcemanager.oracledatabase.models.ExascaleDbStorageInputDetails;
import com.azure.resourcemanager.oracledatabase.models.ExascaleDbStorageVault;
import com.azure.resourcemanager.oracledatabase.models.ExascaleDbStorageVaultProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ExascaleDbStorageVaultsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"additionalFlashCacheInPercent\":1364413531,\"description\":\"kutycyarnroohgua\",\"displayName\":\"zoghktdpyczhc\",\"highCapacityDatabaseStorageInput\":{\"totalSizeInGbs\":1051216196},\"highCapacityDatabaseStorage\":{\"availableSizeInGbs\":1280508716,\"totalSizeInGbs\":953952910},\"timeZone\":\"rottjzcfyjzptw\",\"provisioningState\":\"Succeeded\",\"lifecycleState\":\"Terminating\",\"lifecycleDetails\":\"qinfszpyglqd\",\"vmClusterCount\":1992477161,\"ocid\":\"zralcxpjbyyps\",\"ociUrl\":\"qcjenkyhf\",\"exadataInfrastructureId\":\"vsqxfxjelgcmpzqj\",\"attachedShapeAttributes\":[\"SMART_STORAGE\"]},\"zones\":[\"w\",\"vcacoyv\",\"vbsizusjszlbscm\"],\"location\":\"zijiufehgmv\",\"tags\":{\"xrerlniylylyf\":\"wyvq\",\"yjtcdxabbujftab\":\"xzutgqztwhghmupg\"},\"id\":\"nbbklqpxzucafed\",\"name\":\"wwnlzafwxudgnh\",\"type\":\"ookrtalvnbw\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        OracleDatabaseManager manager = OracleDatabaseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ExascaleDbStorageVault response = manager.exascaleDbStorageVaults()
            .define("ttxpnrupza")
            .withRegion("bkezn")
            .withExistingResourceGroup("zjknyuxg")
            .withTags(mapOf("aawxwfeka", "jvaannggiycwkd", "xwbjs", "mrrqmbzmqkratb", "ewijymrhbguz", "dbirkfpksokdgo"))
            .withProperties(new ExascaleDbStorageVaultProperties().withAdditionalFlashCacheInPercent(2127079482)
                .withDescription("xtrekidswys")
                .withDisplayName("br")
                .withHighCapacityDatabaseStorageInput(new ExascaleDbStorageInputDetails().withTotalSizeInGbs(697388940))
                .withTimeZone("kutvlxhrpqhv")
                .withExadataInfrastructureId("ygaolnjpnnb"))
            .withZones(Arrays.asList("sjjx", "ahmrnadzyqegxyi", "pinbmhwbjijkgqxn"))
            .create();

        Assertions.assertEquals("zijiufehgmv", response.location());
        Assertions.assertEquals("wyvq", response.tags().get("xrerlniylylyf"));
        Assertions.assertEquals(1364413531, response.properties().additionalFlashCacheInPercent());
        Assertions.assertEquals("kutycyarnroohgua", response.properties().description());
        Assertions.assertEquals("zoghktdpyczhc", response.properties().displayName());
        Assertions.assertEquals(1051216196, response.properties().highCapacityDatabaseStorageInput().totalSizeInGbs());
        Assertions.assertEquals("rottjzcfyjzptw", response.properties().timeZone());
        Assertions.assertEquals("vsqxfxjelgcmpzqj", response.properties().exadataInfrastructureId());
        Assertions.assertEquals("w", response.zones().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
