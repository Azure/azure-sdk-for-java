// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.oracledatabase.OracleDatabaseManager;
import com.azure.resourcemanager.oracledatabase.models.VirtualNetworkAddress;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class VirtualNetworkAddressesListByCloudVmClusterMockTests {
    @Test
    public void testListByCloudVmCluster() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"ipAddress\":\"fpgpicrmnzhrgm\",\"vmOcid\":\"j\",\"ocid\":\"vpqcb\",\"domain\":\"mbodthsqqgvri\",\"lifecycleDetails\":\"a\",\"provisioningState\":\"Canceled\",\"lifecycleState\":\"Terminated\",\"timeAssigned\":\"2021-05-28T16:52:57Z\"},\"id\":\"nxo\",\"name\":\"sxauzlwvsgmwohqf\",\"type\":\"izvu\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        OracleDatabaseManager manager = OracleDatabaseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<VirtualNetworkAddress> response = manager.virtualNetworkAddresses()
            .listByCloudVmCluster("zqkzszuwi", "tglxx", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("fpgpicrmnzhrgm", response.iterator().next().properties().ipAddress());
        Assertions.assertEquals("j", response.iterator().next().properties().vmOcid());
    }
}
