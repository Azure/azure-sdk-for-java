// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.oracledatabase.OracleDatabaseManager;
import com.azure.resourcemanager.oracledatabase.models.BaseDbSystemShapes;
import com.azure.resourcemanager.oracledatabase.models.DbVersion;
import com.azure.resourcemanager.oracledatabase.models.ShapeFamilyType;
import com.azure.resourcemanager.oracledatabase.models.StorageManagementType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DbVersionsListByLocationMockTests {
    @Test
    public void testListByLocation() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"version\":\"qfaqnvzoqg\",\"isLatestForMajorVersion\":false,\"isPreviewDbVersion\":true,\"isUpgradeSupported\":false,\"supportsPdb\":true},\"id\":\"sczuejdtxptlghwz\",\"name\":\"omew\",\"type\":\"j\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        OracleDatabaseManager manager = OracleDatabaseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<DbVersion> response = manager.dbVersions()
            .listByLocation("pbeme", BaseDbSystemShapes.VMSTANDARD_X86, "clvdjjukyrdnqod", StorageManagementType.LVM,
                false, false, ShapeFamilyType.EXADATA, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("qfaqnvzoqg", response.iterator().next().properties().version());
        Assertions.assertFalse(response.iterator().next().properties().isLatestForMajorVersion());
        Assertions.assertTrue(response.iterator().next().properties().isPreviewDbVersion());
        Assertions.assertFalse(response.iterator().next().properties().isUpgradeSupported());
        Assertions.assertTrue(response.iterator().next().properties().supportsPdb());
    }
}
