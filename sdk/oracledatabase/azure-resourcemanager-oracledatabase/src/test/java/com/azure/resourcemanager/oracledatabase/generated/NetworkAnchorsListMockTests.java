// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.oracledatabase.OracleDatabaseManager;
import com.azure.resourcemanager.oracledatabase.models.NetworkAnchor;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NetworkAnchorsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"resourceAnchorId\":\"igvjrktp\",\"provisioningState\":\"Failed\",\"vnetId\":\"kya\",\"subnetId\":\"ohpmwhqn\",\"cidrBlock\":\"sklhsidsjtdlp\",\"ociVcnId\":\"injgazlsvbzfcpuo\",\"ociVcnDnsLabel\":\"dwjcciklhs\",\"ociSubnetId\":\"krdre\",\"ociBackupCidrBlock\":\"olr\",\"isOracleToAzureDnsZoneSyncEnabled\":true,\"isOracleDnsListeningEndpointEnabled\":false,\"isOracleDnsForwardingEndpointEnabled\":false,\"dnsForwardingRules\":[{\"domainNames\":\"dlh\",\"forwardingIpAddress\":\"d\"},{\"domainNames\":\"bdbfgrlp\",\"forwardingIpAddress\":\"nytjlk\"},{\"domainNames\":\"smmpathubt\",\"forwardingIpAddress\":\"h\"},{\"domainNames\":\"e\",\"forwardingIpAddress\":\"niiwllbvgwz\"}],\"dnsListeningEndpointAllowedCidrs\":\"ft\",\"dnsListeningEndpointIpAddress\":\"ousnktjt\",\"dnsForwardingEndpointIpAddress\":\"avaqogfkbebau\",\"dnsForwardingRulesUrl\":\"qbtxxwpf\",\"dnsListeningEndpointNsgRulesUrl\":\"jzudrtpzk\",\"dnsForwardingEndpointNsgRulesUrl\":\"eboywhczzqrhm\"},\"zones\":[\"be\",\"ygisrz\",\"nykdi\"],\"location\":\"chl\",\"tags\":{\"xkbrfg\":\"wctofldseacdhz\",\"fj\":\"rwjiyew\"},\"id\":\"rwq\",\"name\":\"xet\",\"type\":\"gcwvrrmdqntycna\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        OracleDatabaseManager manager = OracleDatabaseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<NetworkAnchor> response = manager.networkAnchors().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("chl", response.iterator().next().location());
        Assertions.assertEquals("wctofldseacdhz", response.iterator().next().tags().get("xkbrfg"));
        Assertions.assertEquals("igvjrktp", response.iterator().next().properties().resourceAnchorId());
        Assertions.assertEquals("ohpmwhqn", response.iterator().next().properties().subnetId());
        Assertions.assertEquals("dwjcciklhs", response.iterator().next().properties().ociVcnDnsLabel());
        Assertions.assertEquals("olr", response.iterator().next().properties().ociBackupCidrBlock());
        Assertions.assertTrue(response.iterator().next().properties().isOracleToAzureDnsZoneSyncEnabled());
        Assertions.assertFalse(response.iterator().next().properties().isOracleDnsListeningEndpointEnabled());
        Assertions.assertFalse(response.iterator().next().properties().isOracleDnsForwardingEndpointEnabled());
        Assertions.assertEquals("dlh",
            response.iterator().next().properties().dnsForwardingRules().get(0).domainNames());
        Assertions.assertEquals("d",
            response.iterator().next().properties().dnsForwardingRules().get(0).forwardingIpAddress());
        Assertions.assertEquals("ft", response.iterator().next().properties().dnsListeningEndpointAllowedCidrs());
        Assertions.assertEquals("be", response.iterator().next().zones().get(0));
    }
}
