// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.oracledatabase.fluent.models.ResourceAnchorInner;
import com.azure.resourcemanager.oracledatabase.models.ResourceAnchorProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ResourceAnchorInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ResourceAnchorInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"linkedCompartmentId\":\"eta\"},\"location\":\"tsxoatftgz\",\"tags\":{\"vefloccsrmozihmi\":\"bs\",\"wtxxpkyjcx\":\"g\",\"ycilrmcaykggnox\":\"jxgrytfmp\",\"pfnznthjtwkj\":\"ztrksxwpndf\"},\"id\":\"osrxuzvoa\",\"name\":\"ktcqio\",\"type\":\"mgbzahgxqdlyrtl\"}")
            .toObject(ResourceAnchorInner.class);
        Assertions.assertEquals("tsxoatftgz", model.location());
        Assertions.assertEquals("bs", model.tags().get("vefloccsrmozihmi"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ResourceAnchorInner model = new ResourceAnchorInner().withLocation("tsxoatftgz")
            .withTags(mapOf("vefloccsrmozihmi", "bs", "wtxxpkyjcx", "g", "ycilrmcaykggnox", "jxgrytfmp", "pfnznthjtwkj",
                "ztrksxwpndf"))
            .withProperties(new ResourceAnchorProperties());
        model = BinaryData.fromObject(model).toObject(ResourceAnchorInner.class);
        Assertions.assertEquals("tsxoatftgz", model.location());
        Assertions.assertEquals("bs", model.tags().get("vefloccsrmozihmi"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
