// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.oracledatabase.OracleDatabaseManager;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructure;
import com.azure.resourcemanager.oracledatabase.models.ConfigureExascaleCloudExadataInfrastructureDetails;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeekName;
import com.azure.resourcemanager.oracledatabase.models.MonthName;
import com.azure.resourcemanager.oracledatabase.models.PatchingMode;
import com.azure.resourcemanager.oracledatabase.models.Preference;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CloudExadataInfrastructuresConfigureExascaleMockTests {
    @Test
    public void testConfigureExascale() throws Exception {
        String responseStr
            = "{\"properties\":{\"definedFileSystemConfiguration\":[{\"isBackupPartition\":true,\"isResizable\":true,\"minSizeGb\":1425095527,\"mountPoint\":\"afgfugsnn\"},{\"isBackupPartition\":false,\"isResizable\":true,\"minSizeGb\":1268019829,\"mountPoint\":\"pococtfjgt\"},{\"isBackupPartition\":false,\"isResizable\":true,\"minSizeGb\":1870960882,\"mountPoint\":\"turmlmuow\"}],\"ocid\":\"bauiropi\",\"computeCount\":1230102122,\"storageCount\":1732176470,\"totalStorageSizeInGbs\":1067511250,\"availableStorageSizeInGbs\":1957887263,\"timeCreated\":\"ajinnixjawrtmjfj\",\"lifecycleDetails\":\"ccxlzhcoxovnek\",\"maintenanceWindow\":{\"preference\":\"CustomPreference\",\"months\":[{\"name\":\"November\"},{\"name\":\"October\"},{\"name\":\"February\"}],\"weeksOfMonth\":[1821687022,1290692047],\"daysOfWeek\":[{\"name\":\"Friday\"},{\"name\":\"Saturday\"}],\"hoursOfDay\":[1479706729],\"leadTimeInWeeks\":1755183867,\"patchingMode\":\"Rolling\",\"customActionTimeoutInMins\":2075890507,\"isCustomActionTimeoutEnabled\":false,\"isMonthlyPatchingEnabled\":true},\"estimatedPatchingTime\":{\"estimatedDbServerPatchingTime\":1721166118,\"estimatedNetworkSwitchesPatchingTime\":1512391060,\"estimatedStorageServerPatchingTime\":125310603,\"totalEstimatedPatchingTime\":1750462834},\"customerContacts\":[{\"email\":\"asiz\"},{\"email\":\"esfuught\"}],\"provisioningState\":\"Succeeded\",\"lifecycleState\":\"Available\",\"shape\":\"jxeygtuhxu\",\"ociUrl\":\"buew\",\"cpuCount\":42177599,\"maxCpuCount\":936340073,\"memorySizeInGbs\":397140554,\"maxMemoryInGbs\":1405699851,\"dbNodeStorageSizeInGbs\":1448304051,\"maxDbNodeStorageSizeInGbs\":900937379,\"dataStorageSizeInTbs\":62.09839766818396,\"maxDataStorageInTbs\":67.3049204995256,\"dbServerVersion\":\"qehgpd\",\"storageServerVersion\":\"zjqatucoig\",\"activatedStorageCount\":1658827458,\"additionalStorageCount\":1751850154,\"displayName\":\"nwfepbnwg\",\"lastMaintenanceRunId\":\"xjg\",\"nextMaintenanceRunId\":\"bjb\",\"monthlyDbServerVersion\":\"lfgtdysnaquflqbc\",\"monthlyStorageServerVersion\":\"hamzjrwdkqze\",\"databaseServerType\":\"jleziunjx\",\"storageServerType\":\"zantkwceg\",\"computeModel\":\"ECPU\",\"exascaleConfig\":{\"totalStorageInGbs\":1515245419,\"availableStorageInGbs\":1066254231}},\"zones\":[\"qa\",\"jjvpilguooqja\",\"m\",\"itgueiookjbs\"],\"location\":\"rtdtpdelq\",\"tags\":{\"gdirazf\":\"lmotoebnfxofvcj\",\"bmdujtmvcopexc\":\"xejw\"},\"id\":\"jurbuhhlkyqltqsr\",\"name\":\"gtuwkff\",\"type\":\"jk\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        OracleDatabaseManager manager = OracleDatabaseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CloudExadataInfrastructure response = manager.cloudExadataInfrastructures()
            .configureExascale("phwpnulaiywzej", "whslwkoj",
                new ConfigureExascaleCloudExadataInfrastructureDetails().withTotalStorageInGbs(1835022726),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("rtdtpdelq", response.location());
        Assertions.assertEquals("lmotoebnfxofvcj", response.tags().get("gdirazf"));
        Assertions.assertEquals(1230102122, response.properties().computeCount());
        Assertions.assertEquals(1732176470, response.properties().storageCount());
        Assertions.assertEquals(Preference.CUSTOM_PREFERENCE, response.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.NOVEMBER, response.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(1821687022, response.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.FRIDAY,
            response.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(1479706729, response.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(1755183867, response.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.ROLLING, response.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(2075890507, response.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertFalse(response.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertTrue(response.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("asiz", response.properties().customerContacts().get(0).email());
        Assertions.assertEquals("jxeygtuhxu", response.properties().shape());
        Assertions.assertEquals("nwfepbnwg", response.properties().displayName());
        Assertions.assertEquals("jleziunjx", response.properties().databaseServerType());
        Assertions.assertEquals("zantkwceg", response.properties().storageServerType());
        Assertions.assertEquals("qa", response.zones().get(0));
    }
}
