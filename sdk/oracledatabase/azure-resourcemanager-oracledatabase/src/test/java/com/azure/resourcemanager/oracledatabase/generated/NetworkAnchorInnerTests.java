// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.oracledatabase.fluent.models.NetworkAnchorInner;
import com.azure.resourcemanager.oracledatabase.models.DnsForwardingRule;
import com.azure.resourcemanager.oracledatabase.models.NetworkAnchorProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkAnchorInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkAnchorInner model = BinaryData.fromString(
            "{\"properties\":{\"resourceAnchorId\":\"mxelnwcltyjed\",\"provisioningState\":\"Succeeded\",\"vnetId\":\"lfmk\",\"subnetId\":\"scazuawxtzxpu\",\"cidrBlock\":\"wabzxrvxcushsp\",\"ociVcnId\":\"ivmxyasfl\",\"ociVcnDnsLabel\":\"sgzwywakoihknsm\",\"ociSubnetId\":\"lmljhlnymzotq\",\"ociBackupCidrBlock\":\"yuzcbmqqvxmvw\",\"isOracleToAzureDnsZoneSyncEnabled\":false,\"isOracleDnsListeningEndpointEnabled\":false,\"isOracleDnsForwardingEndpointEnabled\":true,\"dnsForwardingRules\":[{\"domainNames\":\"upeujlzqnhcvsq\",\"forwardingIpAddress\":\"tnzoibgsxgnxfy\"}],\"dnsListeningEndpointAllowedCidrs\":\"nmpqoxwdofdb\",\"dnsListeningEndpointIpAddress\":\"qxeiiqbimhtmwwi\",\"dnsForwardingEndpointIpAddress\":\"ehfqpofvwbc\",\"dnsForwardingRulesUrl\":\"embnkbw\",\"dnsListeningEndpointNsgRulesUrl\":\"vxkdivqihebwtswb\",\"dnsForwardingEndpointNsgRulesUrl\":\"wfmdurage\"},\"zones\":[\"vcjfelisdjubggb\",\"igkxkbsazga\",\"gacyrcmjdmspo\",\"apvu\"],\"location\":\"ylnio\",\"tags\":{\"l\":\"gbzjedmstkv\"},\"id\":\"xbcuiiznkt\",\"name\":\"f\",\"type\":\"nsnvpd\"}")
            .toObject(NetworkAnchorInner.class);
        Assertions.assertEquals("ylnio", model.location());
        Assertions.assertEquals("gbzjedmstkv", model.tags().get("l"));
        Assertions.assertEquals("mxelnwcltyjed", model.properties().resourceAnchorId());
        Assertions.assertEquals("scazuawxtzxpu", model.properties().subnetId());
        Assertions.assertEquals("sgzwywakoihknsm", model.properties().ociVcnDnsLabel());
        Assertions.assertEquals("yuzcbmqqvxmvw", model.properties().ociBackupCidrBlock());
        Assertions.assertFalse(model.properties().isOracleToAzureDnsZoneSyncEnabled());
        Assertions.assertFalse(model.properties().isOracleDnsListeningEndpointEnabled());
        Assertions.assertTrue(model.properties().isOracleDnsForwardingEndpointEnabled());
        Assertions.assertEquals("upeujlzqnhcvsq", model.properties().dnsForwardingRules().get(0).domainNames());
        Assertions.assertEquals("tnzoibgsxgnxfy", model.properties().dnsForwardingRules().get(0).forwardingIpAddress());
        Assertions.assertEquals("nmpqoxwdofdb", model.properties().dnsListeningEndpointAllowedCidrs());
        Assertions.assertEquals("vcjfelisdjubggb", model.zones().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkAnchorInner model = new NetworkAnchorInner().withLocation("ylnio")
            .withTags(mapOf("l", "gbzjedmstkv"))
            .withProperties(new NetworkAnchorProperties().withResourceAnchorId("mxelnwcltyjed")
                .withSubnetId("scazuawxtzxpu")
                .withOciVcnDnsLabel("sgzwywakoihknsm")
                .withOciBackupCidrBlock("yuzcbmqqvxmvw")
                .withIsOracleToAzureDnsZoneSyncEnabled(false)
                .withIsOracleDnsListeningEndpointEnabled(false)
                .withIsOracleDnsForwardingEndpointEnabled(true)
                .withDnsForwardingRules(Arrays.asList(new DnsForwardingRule().withDomainNames("upeujlzqnhcvsq")
                    .withForwardingIpAddress("tnzoibgsxgnxfy")))
                .withDnsListeningEndpointAllowedCidrs("nmpqoxwdofdb"))
            .withZones(Arrays.asList("vcjfelisdjubggb", "igkxkbsazga", "gacyrcmjdmspo", "apvu"));
        model = BinaryData.fromObject(model).toObject(NetworkAnchorInner.class);
        Assertions.assertEquals("ylnio", model.location());
        Assertions.assertEquals("gbzjedmstkv", model.tags().get("l"));
        Assertions.assertEquals("mxelnwcltyjed", model.properties().resourceAnchorId());
        Assertions.assertEquals("scazuawxtzxpu", model.properties().subnetId());
        Assertions.assertEquals("sgzwywakoihknsm", model.properties().ociVcnDnsLabel());
        Assertions.assertEquals("yuzcbmqqvxmvw", model.properties().ociBackupCidrBlock());
        Assertions.assertFalse(model.properties().isOracleToAzureDnsZoneSyncEnabled());
        Assertions.assertFalse(model.properties().isOracleDnsListeningEndpointEnabled());
        Assertions.assertTrue(model.properties().isOracleDnsForwardingEndpointEnabled());
        Assertions.assertEquals("upeujlzqnhcvsq", model.properties().dnsForwardingRules().get(0).domainNames());
        Assertions.assertEquals("tnzoibgsxgnxfy", model.properties().dnsForwardingRules().get(0).forwardingIpAddress());
        Assertions.assertEquals("nmpqoxwdofdb", model.properties().dnsListeningEndpointAllowedCidrs());
        Assertions.assertEquals("vcjfelisdjubggb", model.zones().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
