// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.oracledatabase.models.NetworkAnchorUpdate;
import com.azure.resourcemanager.oracledatabase.models.NetworkAnchorUpdateProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkAnchorUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkAnchorUpdate model = BinaryData.fromString(
            "{\"zones\":[\"lduccbi\",\"ds\"],\"tags\":{\"i\":\"cobiegstmninwjiz\",\"tbxqmuluxlxq\":\"nghgshej\"},\"properties\":{\"ociBackupCidrBlock\":\"ers\",\"isOracleToAzureDnsZoneSyncEnabled\":true,\"isOracleDnsListeningEndpointEnabled\":true,\"isOracleDnsForwardingEndpointEnabled\":false}}")
            .toObject(NetworkAnchorUpdate.class);
        Assertions.assertEquals("lduccbi", model.zones().get(0));
        Assertions.assertEquals("cobiegstmninwjiz", model.tags().get("i"));
        Assertions.assertEquals("ers", model.properties().ociBackupCidrBlock());
        Assertions.assertTrue(model.properties().isOracleToAzureDnsZoneSyncEnabled());
        Assertions.assertTrue(model.properties().isOracleDnsListeningEndpointEnabled());
        Assertions.assertFalse(model.properties().isOracleDnsForwardingEndpointEnabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkAnchorUpdate model = new NetworkAnchorUpdate().withZones(Arrays.asList("lduccbi", "ds"))
            .withTags(mapOf("i", "cobiegstmninwjiz", "tbxqmuluxlxq", "nghgshej"))
            .withProperties(new NetworkAnchorUpdateProperties().withOciBackupCidrBlock("ers")
                .withIsOracleToAzureDnsZoneSyncEnabled(true)
                .withIsOracleDnsListeningEndpointEnabled(true)
                .withIsOracleDnsForwardingEndpointEnabled(false));
        model = BinaryData.fromObject(model).toObject(NetworkAnchorUpdate.class);
        Assertions.assertEquals("lduccbi", model.zones().get(0));
        Assertions.assertEquals("cobiegstmninwjiz", model.tags().get("i"));
        Assertions.assertEquals("ers", model.properties().ociBackupCidrBlock());
        Assertions.assertTrue(model.properties().isOracleToAzureDnsZoneSyncEnabled());
        Assertions.assertTrue(model.properties().isOracleDnsListeningEndpointEnabled());
        Assertions.assertFalse(model.properties().isOracleDnsForwardingEndpointEnabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
