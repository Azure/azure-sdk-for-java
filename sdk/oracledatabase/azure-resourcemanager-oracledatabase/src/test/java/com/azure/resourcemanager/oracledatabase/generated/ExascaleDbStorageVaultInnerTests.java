// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.oracledatabase.fluent.models.ExascaleDbStorageVaultInner;
import com.azure.resourcemanager.oracledatabase.models.ExascaleDbStorageInputDetails;
import com.azure.resourcemanager.oracledatabase.models.ExascaleDbStorageVaultProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExascaleDbStorageVaultInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExascaleDbStorageVaultInner model = BinaryData.fromString(
            "{\"properties\":{\"additionalFlashCacheInPercent\":1923836224,\"description\":\"qhlwigdivbkbxgo\",\"displayName\":\"fajuwas\",\"highCapacityDatabaseStorageInput\":{\"totalSizeInGbs\":1426574768},\"highCapacityDatabaseStorage\":{\"availableSizeInGbs\":37361117,\"totalSizeInGbs\":13307941},\"timeZone\":\"uxakjsqzhzbezk\",\"provisioningState\":\"Provisioning\",\"lifecycleState\":\"Updating\",\"lifecycleDetails\":\"xasicddyvvjskg\",\"vmClusterCount\":1236254057,\"ocid\":\"wa\",\"ociUrl\":\"qgatjeaahhvjhhn\",\"exadataInfrastructureId\":\"zybbj\",\"attachedShapeAttributes\":[\"SMART_STORAGE\"]},\"zones\":[\"yxkyxvx\",\"vblbjednljlageua\",\"lxunsmjbnkppxy\",\"enlsvxeizzgwkln\"],\"location\":\"mffeycxcktpi\",\"tags\":{\"qiekkkzddrt\":\"rteeamm\",\"ojbmxv\":\"g\",\"cuijpxt\":\"vrefdeesv\",\"wprtu\":\"s\"},\"id\":\"wsawddjibabxvi\",\"name\":\"itvtzeexavo\",\"type\":\"tfgle\"}")
            .toObject(ExascaleDbStorageVaultInner.class);
        Assertions.assertEquals("mffeycxcktpi", model.location());
        Assertions.assertEquals("rteeamm", model.tags().get("qiekkkzddrt"));
        Assertions.assertEquals(1923836224, model.properties().additionalFlashCacheInPercent());
        Assertions.assertEquals("qhlwigdivbkbxgo", model.properties().description());
        Assertions.assertEquals("fajuwas", model.properties().displayName());
        Assertions.assertEquals(1426574768, model.properties().highCapacityDatabaseStorageInput().totalSizeInGbs());
        Assertions.assertEquals("uxakjsqzhzbezk", model.properties().timeZone());
        Assertions.assertEquals("zybbj", model.properties().exadataInfrastructureId());
        Assertions.assertEquals("yxkyxvx", model.zones().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExascaleDbStorageVaultInner model = new ExascaleDbStorageVaultInner().withLocation("mffeycxcktpi")
            .withTags(mapOf("qiekkkzddrt", "rteeamm", "ojbmxv", "g", "cuijpxt", "vrefdeesv", "wprtu", "s"))
            .withProperties(new ExascaleDbStorageVaultProperties().withAdditionalFlashCacheInPercent(1923836224)
                .withDescription("qhlwigdivbkbxgo")
                .withDisplayName("fajuwas")
                .withHighCapacityDatabaseStorageInput(
                    new ExascaleDbStorageInputDetails().withTotalSizeInGbs(1426574768))
                .withTimeZone("uxakjsqzhzbezk")
                .withExadataInfrastructureId("zybbj"))
            .withZones(Arrays.asList("yxkyxvx", "vblbjednljlageua", "lxunsmjbnkppxy", "enlsvxeizzgwkln"));
        model = BinaryData.fromObject(model).toObject(ExascaleDbStorageVaultInner.class);
        Assertions.assertEquals("mffeycxcktpi", model.location());
        Assertions.assertEquals("rteeamm", model.tags().get("qiekkkzddrt"));
        Assertions.assertEquals(1923836224, model.properties().additionalFlashCacheInPercent());
        Assertions.assertEquals("qhlwigdivbkbxgo", model.properties().description());
        Assertions.assertEquals("fajuwas", model.properties().displayName());
        Assertions.assertEquals(1426574768, model.properties().highCapacityDatabaseStorageInput().totalSizeInGbs());
        Assertions.assertEquals("uxakjsqzhzbezk", model.properties().timeZone());
        Assertions.assertEquals("zybbj", model.properties().exadataInfrastructureId());
        Assertions.assertEquals("yxkyxvx", model.zones().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
