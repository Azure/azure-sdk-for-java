// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.oracledatabase.fluent.models.ExascaleDbStorageVaultInner;
import com.azure.resourcemanager.oracledatabase.models.ExascaleDbStorageInputDetails;
import com.azure.resourcemanager.oracledatabase.models.ExascaleDbStorageVaultProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExascaleDbStorageVaultInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExascaleDbStorageVaultInner model = BinaryData.fromString(
            "{\"properties\":{\"additionalFlashCacheInPercent\":2118376270,\"description\":\"wpchwahf\",\"displayName\":\"ousnfepgfewe\",\"highCapacityDatabaseStorageInput\":{\"totalSizeInGbs\":290872207},\"highCapacityDatabaseStorage\":{\"availableSizeInGbs\":1791330628,\"totalSizeInGbs\":1415327096},\"timeZone\":\"xykxhdj\",\"provisioningState\":\"Failed\",\"lifecycleState\":\"Provisioning\",\"lifecycleDetails\":\"cxfhbcporxv\",\"vmClusterCount\":637127144,\"ocid\":\"hqizxfpxtgqscj\",\"ociUrl\":\"ftjuh\"},\"zones\":[\"zkmtgguwpijrajci\",\"m\",\"ghfcfiwrxgkneuvy\"],\"location\":\"zqodfvpgshox\",\"tags\":{\"xvzflbqv\":\"bpfgzdj\",\"vetnwsdtutn\":\"aqvlgafcqusr\"},\"id\":\"lduycv\",\"name\":\"zhyrmewipmve\",\"type\":\"dxukuqgsjjxundxg\"}")
            .toObject(ExascaleDbStorageVaultInner.class);
        Assertions.assertEquals("zqodfvpgshox", model.location());
        Assertions.assertEquals("bpfgzdj", model.tags().get("xvzflbqv"));
        Assertions.assertEquals(2118376270, model.properties().additionalFlashCacheInPercent());
        Assertions.assertEquals("wpchwahf", model.properties().description());
        Assertions.assertEquals("ousnfepgfewe", model.properties().displayName());
        Assertions.assertEquals(290872207, model.properties().highCapacityDatabaseStorageInput().totalSizeInGbs());
        Assertions.assertEquals("xykxhdj", model.properties().timeZone());
        Assertions.assertEquals("zkmtgguwpijrajci", model.zones().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExascaleDbStorageVaultInner model = new ExascaleDbStorageVaultInner().withLocation("zqodfvpgshox")
            .withTags(mapOf("xvzflbqv", "bpfgzdj", "vetnwsdtutn", "aqvlgafcqusr"))
            .withProperties(new ExascaleDbStorageVaultProperties().withAdditionalFlashCacheInPercent(2118376270)
                .withDescription("wpchwahf")
                .withDisplayName("ousnfepgfewe")
                .withHighCapacityDatabaseStorageInput(new ExascaleDbStorageInputDetails().withTotalSizeInGbs(290872207))
                .withTimeZone("xykxhdj"))
            .withZones(Arrays.asList("zkmtgguwpijrajci", "m", "ghfcfiwrxgkneuvy"));
        model = BinaryData.fromObject(model).toObject(ExascaleDbStorageVaultInner.class);
        Assertions.assertEquals("zqodfvpgshox", model.location());
        Assertions.assertEquals("bpfgzdj", model.tags().get("xvzflbqv"));
        Assertions.assertEquals(2118376270, model.properties().additionalFlashCacheInPercent());
        Assertions.assertEquals("wpchwahf", model.properties().description());
        Assertions.assertEquals("ousnfepgfewe", model.properties().displayName());
        Assertions.assertEquals(290872207, model.properties().highCapacityDatabaseStorageInput().totalSizeInGbs());
        Assertions.assertEquals("xykxhdj", model.properties().timeZone());
        Assertions.assertEquals("zkmtgguwpijrajci", model.zones().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
