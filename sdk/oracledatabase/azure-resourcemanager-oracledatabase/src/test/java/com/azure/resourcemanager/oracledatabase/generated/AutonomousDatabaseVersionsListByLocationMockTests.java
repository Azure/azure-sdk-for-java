// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.oracledatabase.OracleDatabaseManager;
import com.azure.resourcemanager.oracledatabase.models.AutonomousDbVersion;
import com.azure.resourcemanager.oracledatabase.models.WorkloadType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AutonomousDatabaseVersionsListByLocationMockTests {
    @Test
    public void testListByLocation() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"version\":\"ghwzhomewjjstli\",\"dbWorkload\":\"AJD\",\"isDefaultForFree\":true,\"isDefaultForPaid\":true,\"isFreeTierEnabled\":false,\"isPaidEnabled\":true},\"id\":\"znvodrrslblxydk\",\"name\":\"rxvvbxi\",\"type\":\"kgfbqljnqkhy\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        OracleDatabaseManager manager = OracleDatabaseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<AutonomousDbVersion> response
            = manager.autonomousDatabaseVersions().listByLocation("avsczuejdtxp", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ghwzhomewjjstli", response.iterator().next().properties().version());
        Assertions.assertEquals(WorkloadType.AJD, response.iterator().next().properties().dbWorkload());
        Assertions.assertTrue(response.iterator().next().properties().isDefaultForFree());
        Assertions.assertTrue(response.iterator().next().properties().isDefaultForPaid());
        Assertions.assertFalse(response.iterator().next().properties().isFreeTierEnabled());
        Assertions.assertTrue(response.iterator().next().properties().isPaidEnabled());
    }
}
