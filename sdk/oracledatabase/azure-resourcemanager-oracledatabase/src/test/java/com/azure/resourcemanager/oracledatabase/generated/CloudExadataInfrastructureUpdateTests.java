// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructureUpdate;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructureUpdateProperties;
import com.azure.resourcemanager.oracledatabase.models.CustomerContact;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeek;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeekName;
import com.azure.resourcemanager.oracledatabase.models.MaintenanceWindow;
import com.azure.resourcemanager.oracledatabase.models.Month;
import com.azure.resourcemanager.oracledatabase.models.MonthName;
import com.azure.resourcemanager.oracledatabase.models.PatchingMode;
import com.azure.resourcemanager.oracledatabase.models.Preference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CloudExadataInfrastructureUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CloudExadataInfrastructureUpdate model = BinaryData.fromString(
            "{\"zones\":[\"ooaojkniodkooebw\",\"ujhemmsbvdkcrodt\",\"infwjlfltkacjve\",\"kdlfoa\"],\"tags\":{\"pulpqblylsyxk\":\"kfpagao\",\"zuempsbzkf\":\"jnsjervtiagxsd\"},\"properties\":{\"computeCount\":1586502304,\"storageCount\":946127719,\"maintenanceWindow\":{\"preference\":\"NoPreference\",\"months\":[{\"name\":\"February\"},{\"name\":\"January\"}],\"weeksOfMonth\":[887231612],\"daysOfWeek\":[{\"name\":\"Thursday\"}],\"hoursOfDay\":[1187892327,1127292795,1636536893,2049841705],\"leadTimeInWeeks\":1867961627,\"patchingMode\":\"Rolling\",\"customActionTimeoutInMins\":553106392,\"isCustomActionTimeoutEnabled\":false,\"isMonthlyPatchingEnabled\":false},\"customerContacts\":[{\"email\":\"ztzp\"}],\"displayName\":\"ncckw\"}}")
            .toObject(CloudExadataInfrastructureUpdate.class);
        Assertions.assertEquals("ooaojkniodkooebw", model.zones().get(0));
        Assertions.assertEquals("kfpagao", model.tags().get("pulpqblylsyxk"));
        Assertions.assertEquals(1586502304, model.properties().computeCount());
        Assertions.assertEquals(946127719, model.properties().storageCount());
        Assertions.assertEquals(Preference.NO_PREFERENCE, model.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.FEBRUARY, model.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(887231612, model.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.THURSDAY,
            model.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(1187892327, model.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(1867961627, model.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.ROLLING, model.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(553106392, model.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertEquals(false, model.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertEquals(false, model.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("ztzp", model.properties().customerContacts().get(0).email());
        Assertions.assertEquals("ncckw", model.properties().displayName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CloudExadataInfrastructureUpdate model = new CloudExadataInfrastructureUpdate()
            .withZones(Arrays.asList("ooaojkniodkooebw", "ujhemmsbvdkcrodt", "infwjlfltkacjve", "kdlfoa"))
            .withTags(mapOf("pulpqblylsyxk", "kfpagao", "zuempsbzkf", "jnsjervtiagxsd"))
            .withProperties(new CloudExadataInfrastructureUpdateProperties().withComputeCount(1586502304)
                .withStorageCount(946127719)
                .withMaintenanceWindow(new MaintenanceWindow().withPreference(Preference.NO_PREFERENCE)
                    .withMonths(Arrays.asList(new Month().withName(MonthName.FEBRUARY),
                        new Month().withName(MonthName.JANUARY)))
                    .withWeeksOfMonth(Arrays.asList(887231612))
                    .withDaysOfWeek(Arrays.asList(new DayOfWeek().withName(DayOfWeekName.THURSDAY)))
                    .withHoursOfDay(Arrays.asList(1187892327, 1127292795, 1636536893, 2049841705))
                    .withLeadTimeInWeeks(1867961627)
                    .withPatchingMode(PatchingMode.ROLLING)
                    .withCustomActionTimeoutInMins(553106392)
                    .withIsCustomActionTimeoutEnabled(false)
                    .withIsMonthlyPatchingEnabled(false))
                .withCustomerContacts(Arrays.asList(new CustomerContact().withEmail("ztzp")))
                .withDisplayName("ncckw"));
        model = BinaryData.fromObject(model).toObject(CloudExadataInfrastructureUpdate.class);
        Assertions.assertEquals("ooaojkniodkooebw", model.zones().get(0));
        Assertions.assertEquals("kfpagao", model.tags().get("pulpqblylsyxk"));
        Assertions.assertEquals(1586502304, model.properties().computeCount());
        Assertions.assertEquals(946127719, model.properties().storageCount());
        Assertions.assertEquals(Preference.NO_PREFERENCE, model.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.FEBRUARY, model.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(887231612, model.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.THURSDAY,
            model.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(1187892327, model.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(1867961627, model.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.ROLLING, model.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(553106392, model.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertEquals(false, model.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertEquals(false, model.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("ztzp", model.properties().customerContacts().get(0).email());
        Assertions.assertEquals("ncckw", model.properties().displayName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
