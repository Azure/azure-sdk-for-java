// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructureUpdate;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructureUpdateProperties;
import com.azure.resourcemanager.oracledatabase.models.CustomerContact;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeek;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeekName;
import com.azure.resourcemanager.oracledatabase.models.MaintenanceWindow;
import com.azure.resourcemanager.oracledatabase.models.Month;
import com.azure.resourcemanager.oracledatabase.models.MonthName;
import com.azure.resourcemanager.oracledatabase.models.PatchingMode;
import com.azure.resourcemanager.oracledatabase.models.Preference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CloudExadataInfrastructureUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CloudExadataInfrastructureUpdate model = BinaryData.fromString(
            "{\"zones\":[\"jnsjervtiagxsd\",\"zuempsbzkf\",\"beyvpnqicvinvkjj\"],\"tags\":{\"ztzp\":\"rbuukzclewyhmlwp\",\"ckw\":\"fn\",\"whxxbuyqax\":\"fz\"},\"properties\":{\"computeCount\":1280631673,\"storageCount\":608343994,\"maintenanceWindow\":{\"preference\":\"CustomPreference\",\"months\":[{\"name\":\"March\"}],\"weeksOfMonth\":[621148688],\"daysOfWeek\":[{\"name\":\"Thursday\"},{\"name\":\"Sunday\"}],\"hoursOfDay\":[1325987050,1400936289],\"leadTimeInWeeks\":618891293,\"patchingMode\":\"NonRolling\",\"customActionTimeoutInMins\":1528480283,\"isCustomActionTimeoutEnabled\":true,\"isMonthlyPatchingEnabled\":false},\"customerContacts\":[{\"email\":\"wdcfhucqdpfuv\"},{\"email\":\"lsbjjcanvxbv\"}],\"displayName\":\"udutnco\"}}")
            .toObject(CloudExadataInfrastructureUpdate.class);
        Assertions.assertEquals("jnsjervtiagxsd", model.zones().get(0));
        Assertions.assertEquals("rbuukzclewyhmlwp", model.tags().get("ztzp"));
        Assertions.assertEquals(1280631673, model.properties().computeCount());
        Assertions.assertEquals(608343994, model.properties().storageCount());
        Assertions.assertEquals(Preference.CUSTOM_PREFERENCE, model.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.MARCH, model.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(621148688, model.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.THURSDAY,
            model.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(1325987050, model.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(618891293, model.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.NON_ROLLING, model.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(1528480283, model.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertEquals(true, model.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertEquals(false, model.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("wdcfhucqdpfuv", model.properties().customerContacts().get(0).email());
        Assertions.assertEquals("udutnco", model.properties().displayName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CloudExadataInfrastructureUpdate model = new CloudExadataInfrastructureUpdate()
            .withZones(Arrays.asList("jnsjervtiagxsd", "zuempsbzkf", "beyvpnqicvinvkjj"))
            .withTags(mapOf("ztzp", "rbuukzclewyhmlwp", "ckw", "fn", "whxxbuyqax", "fz"))
            .withProperties(new CloudExadataInfrastructureUpdateProperties().withComputeCount(1280631673)
                .withStorageCount(608343994)
                .withMaintenanceWindow(new MaintenanceWindow().withPreference(Preference.CUSTOM_PREFERENCE)
                    .withMonths(Arrays.asList(new Month().withName(MonthName.MARCH)))
                    .withWeeksOfMonth(Arrays.asList(621148688))
                    .withDaysOfWeek(Arrays.asList(new DayOfWeek().withName(DayOfWeekName.THURSDAY),
                        new DayOfWeek().withName(DayOfWeekName.SUNDAY)))
                    .withHoursOfDay(Arrays.asList(1325987050, 1400936289))
                    .withLeadTimeInWeeks(618891293)
                    .withPatchingMode(PatchingMode.NON_ROLLING)
                    .withCustomActionTimeoutInMins(1528480283)
                    .withIsCustomActionTimeoutEnabled(true)
                    .withIsMonthlyPatchingEnabled(false))
                .withCustomerContacts(Arrays.asList(new CustomerContact().withEmail("wdcfhucqdpfuv"),
                    new CustomerContact().withEmail("lsbjjcanvxbv")))
                .withDisplayName("udutnco"));
        model = BinaryData.fromObject(model).toObject(CloudExadataInfrastructureUpdate.class);
        Assertions.assertEquals("jnsjervtiagxsd", model.zones().get(0));
        Assertions.assertEquals("rbuukzclewyhmlwp", model.tags().get("ztzp"));
        Assertions.assertEquals(1280631673, model.properties().computeCount());
        Assertions.assertEquals(608343994, model.properties().storageCount());
        Assertions.assertEquals(Preference.CUSTOM_PREFERENCE, model.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.MARCH, model.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(621148688, model.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.THURSDAY,
            model.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(1325987050, model.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(618891293, model.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.NON_ROLLING, model.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(1528480283, model.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertEquals(true, model.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertEquals(false, model.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("wdcfhucqdpfuv", model.properties().customerContacts().get(0).email());
        Assertions.assertEquals("udutnco", model.properties().displayName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
