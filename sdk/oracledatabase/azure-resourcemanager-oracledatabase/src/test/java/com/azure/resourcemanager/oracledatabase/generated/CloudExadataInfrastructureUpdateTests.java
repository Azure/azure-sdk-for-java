// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructureUpdate;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructureUpdateProperties;
import com.azure.resourcemanager.oracledatabase.models.CustomerContact;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeek;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeekName;
import com.azure.resourcemanager.oracledatabase.models.MaintenanceWindow;
import com.azure.resourcemanager.oracledatabase.models.Month;
import com.azure.resourcemanager.oracledatabase.models.MonthName;
import com.azure.resourcemanager.oracledatabase.models.PatchingMode;
import com.azure.resourcemanager.oracledatabase.models.Preference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CloudExadataInfrastructureUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CloudExadataInfrastructureUpdate model = BinaryData.fromString(
            "{\"zones\":[\"rmjmwvvjektc\",\"senhwlrs\",\"frzpwvlqdqgb\",\"qylihkaetckt\"],\"tags\":{\"m\":\"ivfsnk\",\"jf\":\"ctq\",\"fuwutttxf\":\"ebrjcxe\",\"hfnljkyq\":\"jrbirphxepcyv\"},\"properties\":{\"computeCount\":1640197955,\"storageCount\":9347197,\"maintenanceWindow\":{\"preference\":\"NoPreference\",\"months\":[{\"name\":\"July\"}],\"weeksOfMonth\":[792619615,10143119],\"daysOfWeek\":[{\"name\":\"Sunday\"},{\"name\":\"Sunday\"}],\"hoursOfDay\":[784453000,384639682,1773557410,1059812914],\"leadTimeInWeeks\":1745548413,\"patchingMode\":\"NonRolling\",\"customActionTimeoutInMins\":1435851366,\"isCustomActionTimeoutEnabled\":false,\"isMonthlyPatchingEnabled\":false},\"customerContacts\":[{\"email\":\"bijhtxfvgxbf\"},{\"email\":\"mxnehmp\"},{\"email\":\"ec\"}],\"displayName\":\"odebfqkkrbmpu\"}}")
            .toObject(CloudExadataInfrastructureUpdate.class);
        Assertions.assertEquals("rmjmwvvjektc", model.zones().get(0));
        Assertions.assertEquals("ivfsnk", model.tags().get("m"));
        Assertions.assertEquals(1640197955, model.properties().computeCount());
        Assertions.assertEquals(9347197, model.properties().storageCount());
        Assertions.assertEquals(Preference.NO_PREFERENCE, model.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.JULY, model.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(792619615, model.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.SUNDAY,
            model.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(784453000, model.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(1745548413, model.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.NON_ROLLING, model.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(1435851366, model.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertFalse(model.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertFalse(model.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("bijhtxfvgxbf", model.properties().customerContacts().get(0).email());
        Assertions.assertEquals("odebfqkkrbmpu", model.properties().displayName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CloudExadataInfrastructureUpdate model = new CloudExadataInfrastructureUpdate()
            .withZones(Arrays.asList("rmjmwvvjektc", "senhwlrs", "frzpwvlqdqgb", "qylihkaetckt"))
            .withTags(mapOf("m", "ivfsnk", "jf", "ctq", "fuwutttxf", "ebrjcxe", "hfnljkyq", "jrbirphxepcyv"))
            .withProperties(new CloudExadataInfrastructureUpdateProperties().withComputeCount(1640197955)
                .withStorageCount(9347197)
                .withMaintenanceWindow(new MaintenanceWindow().withPreference(Preference.NO_PREFERENCE)
                    .withMonths(Arrays.asList(new Month().withName(MonthName.JULY)))
                    .withWeeksOfMonth(Arrays.asList(792619615, 10143119))
                    .withDaysOfWeek(Arrays.asList(new DayOfWeek().withName(DayOfWeekName.SUNDAY),
                        new DayOfWeek().withName(DayOfWeekName.SUNDAY)))
                    .withHoursOfDay(Arrays.asList(784453000, 384639682, 1773557410, 1059812914))
                    .withLeadTimeInWeeks(1745548413)
                    .withPatchingMode(PatchingMode.NON_ROLLING)
                    .withCustomActionTimeoutInMins(1435851366)
                    .withIsCustomActionTimeoutEnabled(false)
                    .withIsMonthlyPatchingEnabled(false))
                .withCustomerContacts(Arrays.asList(new CustomerContact().withEmail("bijhtxfvgxbf"),
                    new CustomerContact().withEmail("mxnehmp"), new CustomerContact().withEmail("ec")))
                .withDisplayName("odebfqkkrbmpu"));
        model = BinaryData.fromObject(model).toObject(CloudExadataInfrastructureUpdate.class);
        Assertions.assertEquals("rmjmwvvjektc", model.zones().get(0));
        Assertions.assertEquals("ivfsnk", model.tags().get("m"));
        Assertions.assertEquals(1640197955, model.properties().computeCount());
        Assertions.assertEquals(9347197, model.properties().storageCount());
        Assertions.assertEquals(Preference.NO_PREFERENCE, model.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.JULY, model.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(792619615, model.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.SUNDAY,
            model.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(784453000, model.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(1745548413, model.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.NON_ROLLING, model.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(1435851366, model.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertFalse(model.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertFalse(model.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("bijhtxfvgxbf", model.properties().customerContacts().get(0).email());
        Assertions.assertEquals("odebfqkkrbmpu", model.properties().displayName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
