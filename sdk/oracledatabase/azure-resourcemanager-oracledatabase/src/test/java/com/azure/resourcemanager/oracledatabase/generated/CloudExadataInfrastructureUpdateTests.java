// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructureUpdate;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructureUpdateProperties;
import com.azure.resourcemanager.oracledatabase.models.CustomerContact;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeek;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeekName;
import com.azure.resourcemanager.oracledatabase.models.MaintenanceWindow;
import com.azure.resourcemanager.oracledatabase.models.Month;
import com.azure.resourcemanager.oracledatabase.models.MonthName;
import com.azure.resourcemanager.oracledatabase.models.PatchingMode;
import com.azure.resourcemanager.oracledatabase.models.Preference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CloudExadataInfrastructureUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CloudExadataInfrastructureUpdate model = BinaryData.fromString(
            "{\"zones\":[\"qzntypm\",\"bpizcdrqjsdpydn\",\"yhxdeoejzicwi\",\"sjttgzfbish\"],\"tags\":{\"alpbuxwgipwhon\":\"hajdeyeamdpha\"},\"properties\":{\"computeCount\":353771493,\"storageCount\":1714142157,\"maintenanceWindow\":{\"preference\":\"CustomPreference\",\"months\":[{\"name\":\"January\"},{\"name\":\"February\"},{\"name\":\"December\"},{\"name\":\"June\"}],\"weeksOfMonth\":[1868038426,491108548,1363231227],\"daysOfWeek\":[{\"name\":\"Sunday\"},{\"name\":\"Friday\"}],\"hoursOfDay\":[998969185,1563071511,2134987728,1133422967],\"leadTimeInWeeks\":643142457,\"patchingMode\":\"Rolling\",\"customActionTimeoutInMins\":1348586485,\"isCustomActionTimeoutEnabled\":true,\"isMonthlyPatchingEnabled\":false},\"customerContacts\":[{\"email\":\"vyxlwhzlsicohoqq\"},{\"email\":\"wvl\"},{\"email\":\"yav\"},{\"email\":\"hheunmmqhgyx\"}],\"displayName\":\"onocukok\"}}")
            .toObject(CloudExadataInfrastructureUpdate.class);
        Assertions.assertEquals("qzntypm", model.zones().get(0));
        Assertions.assertEquals("hajdeyeamdpha", model.tags().get("alpbuxwgipwhon"));
        Assertions.assertEquals(353771493, model.properties().computeCount());
        Assertions.assertEquals(1714142157, model.properties().storageCount());
        Assertions.assertEquals(Preference.CUSTOM_PREFERENCE, model.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.JANUARY, model.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(1868038426, model.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.SUNDAY,
            model.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(998969185, model.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(643142457, model.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.ROLLING, model.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(1348586485, model.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertTrue(model.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertFalse(model.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("vyxlwhzlsicohoqq", model.properties().customerContacts().get(0).email());
        Assertions.assertEquals("onocukok", model.properties().displayName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CloudExadataInfrastructureUpdate model
            = new CloudExadataInfrastructureUpdate()
                .withZones(Arrays.asList("qzntypm", "bpizcdrqjsdpydn", "yhxdeoejzicwi", "sjttgzfbish"))
                .withTags(mapOf("alpbuxwgipwhon", "hajdeyeamdpha"))
                .withProperties(new CloudExadataInfrastructureUpdateProperties().withComputeCount(353771493)
                    .withStorageCount(1714142157)
                    .withMaintenanceWindow(new MaintenanceWindow().withPreference(Preference.CUSTOM_PREFERENCE)
                        .withMonths(Arrays.asList(new Month().withName(MonthName.JANUARY),
                            new Month().withName(MonthName.FEBRUARY), new Month().withName(MonthName.DECEMBER),
                            new Month().withName(MonthName.JUNE)))
                        .withWeeksOfMonth(Arrays.asList(1868038426, 491108548, 1363231227))
                        .withDaysOfWeek(Arrays.asList(new DayOfWeek().withName(DayOfWeekName.SUNDAY),
                            new DayOfWeek().withName(DayOfWeekName.FRIDAY)))
                        .withHoursOfDay(Arrays.asList(998969185, 1563071511, 2134987728, 1133422967))
                        .withLeadTimeInWeeks(643142457)
                        .withPatchingMode(PatchingMode.ROLLING)
                        .withCustomActionTimeoutInMins(1348586485)
                        .withIsCustomActionTimeoutEnabled(true)
                        .withIsMonthlyPatchingEnabled(false))
                    .withCustomerContacts(Arrays.asList(new CustomerContact().withEmail("vyxlwhzlsicohoqq"),
                        new CustomerContact().withEmail("wvl"), new CustomerContact().withEmail("yav"),
                        new CustomerContact().withEmail("hheunmmqhgyx")))
                    .withDisplayName("onocukok"));
        model = BinaryData.fromObject(model).toObject(CloudExadataInfrastructureUpdate.class);
        Assertions.assertEquals("qzntypm", model.zones().get(0));
        Assertions.assertEquals("hajdeyeamdpha", model.tags().get("alpbuxwgipwhon"));
        Assertions.assertEquals(353771493, model.properties().computeCount());
        Assertions.assertEquals(1714142157, model.properties().storageCount());
        Assertions.assertEquals(Preference.CUSTOM_PREFERENCE, model.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.JANUARY, model.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(1868038426, model.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.SUNDAY,
            model.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(998969185, model.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(643142457, model.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.ROLLING, model.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(1348586485, model.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertTrue(model.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertFalse(model.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("vyxlwhzlsicohoqq", model.properties().customerContacts().get(0).email());
        Assertions.assertEquals("onocukok", model.properties().displayName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
