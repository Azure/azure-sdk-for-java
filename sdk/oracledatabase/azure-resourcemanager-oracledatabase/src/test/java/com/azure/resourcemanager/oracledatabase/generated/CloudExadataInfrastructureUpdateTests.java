// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructureUpdate;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructureUpdateProperties;
import com.azure.resourcemanager.oracledatabase.models.CustomerContact;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeek;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeekName;
import com.azure.resourcemanager.oracledatabase.models.MaintenanceWindow;
import com.azure.resourcemanager.oracledatabase.models.Month;
import com.azure.resourcemanager.oracledatabase.models.MonthName;
import com.azure.resourcemanager.oracledatabase.models.PatchingMode;
import com.azure.resourcemanager.oracledatabase.models.Preference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CloudExadataInfrastructureUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CloudExadataInfrastructureUpdate model = BinaryData.fromString(
            "{\"zones\":[\"zkzivgvvcnay\",\"hyrnxxmu\"],\"tags\":{\"tchealmf\":\"ndrdvstkwq\",\"iohgwxrtfud\":\"tdaaygdvwvg\",\"mnpkukghimdblxg\":\"epxgyqagvr\",\"mszkkfo\":\"imfnjhfjx\"},\"properties\":{\"computeCount\":1563203885,\"storageCount\":1941529863,\"maintenanceWindow\":{\"preference\":\"NoPreference\",\"months\":[{\"name\":\"February\"},{\"name\":\"September\"}],\"weeksOfMonth\":[113630721,693357808,841259449],\"daysOfWeek\":[{\"name\":\"Tuesday\"},{\"name\":\"Sunday\"}],\"hoursOfDay\":[1038031643,26283223,1240770029],\"leadTimeInWeeks\":1974208739,\"patchingMode\":\"NonRolling\",\"customActionTimeoutInMins\":561356651,\"isCustomActionTimeoutEnabled\":true,\"isMonthlyPatchingEnabled\":false},\"customerContacts\":[{\"email\":\"fatkld\"},{\"email\":\"xbjhwuaanozjosph\"},{\"email\":\"oulpjrv\"},{\"email\":\"ag\"}],\"displayName\":\"vimjwos\"}}")
            .toObject(CloudExadataInfrastructureUpdate.class);
        Assertions.assertEquals("zkzivgvvcnay", model.zones().get(0));
        Assertions.assertEquals("ndrdvstkwq", model.tags().get("tchealmf"));
        Assertions.assertEquals(1563203885, model.properties().computeCount());
        Assertions.assertEquals(1941529863, model.properties().storageCount());
        Assertions.assertEquals(Preference.NO_PREFERENCE, model.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.FEBRUARY, model.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(113630721, model.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.TUESDAY,
            model.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(1038031643, model.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(1974208739, model.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.NON_ROLLING, model.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(561356651, model.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertEquals(true, model.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertEquals(false, model.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("fatkld", model.properties().customerContacts().get(0).email());
        Assertions.assertEquals("vimjwos", model.properties().displayName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CloudExadataInfrastructureUpdate model
            = new CloudExadataInfrastructureUpdate().withZones(Arrays.asList("zkzivgvvcnay", "hyrnxxmu"))
                .withTags(mapOf("tchealmf", "ndrdvstkwq", "iohgwxrtfud", "tdaaygdvwvg", "mnpkukghimdblxg", "epxgyqagvr",
                    "mszkkfo", "imfnjhfjx"))
                .withProperties(new CloudExadataInfrastructureUpdateProperties().withComputeCount(1563203885)
                    .withStorageCount(1941529863)
                    .withMaintenanceWindow(new MaintenanceWindow().withPreference(Preference.NO_PREFERENCE)
                        .withMonths(Arrays.asList(new Month().withName(MonthName.FEBRUARY),
                            new Month().withName(MonthName.SEPTEMBER)))
                        .withWeeksOfMonth(Arrays.asList(113630721, 693357808, 841259449))
                        .withDaysOfWeek(Arrays.asList(new DayOfWeek().withName(DayOfWeekName.TUESDAY),
                            new DayOfWeek().withName(DayOfWeekName.SUNDAY)))
                        .withHoursOfDay(Arrays.asList(1038031643, 26283223, 1240770029))
                        .withLeadTimeInWeeks(1974208739)
                        .withPatchingMode(PatchingMode.NON_ROLLING)
                        .withCustomActionTimeoutInMins(561356651)
                        .withIsCustomActionTimeoutEnabled(true)
                        .withIsMonthlyPatchingEnabled(false))
                    .withCustomerContacts(Arrays.asList(new CustomerContact().withEmail("fatkld"),
                        new CustomerContact().withEmail("xbjhwuaanozjosph"), new CustomerContact().withEmail("oulpjrv"),
                        new CustomerContact().withEmail("ag")))
                    .withDisplayName("vimjwos"));
        model = BinaryData.fromObject(model).toObject(CloudExadataInfrastructureUpdate.class);
        Assertions.assertEquals("zkzivgvvcnay", model.zones().get(0));
        Assertions.assertEquals("ndrdvstkwq", model.tags().get("tchealmf"));
        Assertions.assertEquals(1563203885, model.properties().computeCount());
        Assertions.assertEquals(1941529863, model.properties().storageCount());
        Assertions.assertEquals(Preference.NO_PREFERENCE, model.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.FEBRUARY, model.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(113630721, model.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.TUESDAY,
            model.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(1038031643, model.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(1974208739, model.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.NON_ROLLING, model.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(561356651, model.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertEquals(true, model.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertEquals(false, model.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("fatkld", model.properties().customerContacts().get(0).email());
        Assertions.assertEquals("vimjwos", model.properties().displayName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
