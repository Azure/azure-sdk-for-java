// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.oracledatabase.OracleDatabaseManager;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructure;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructureProperties;
import com.azure.resourcemanager.oracledatabase.models.CustomerContact;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeek;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeekName;
import com.azure.resourcemanager.oracledatabase.models.MaintenanceWindow;
import com.azure.resourcemanager.oracledatabase.models.Month;
import com.azure.resourcemanager.oracledatabase.models.MonthName;
import com.azure.resourcemanager.oracledatabase.models.PatchingMode;
import com.azure.resourcemanager.oracledatabase.models.Preference;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CloudExadataInfrastructuresCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"ocid\":\"ocxvdfffwafqr\",\"computeCount\":1019115621,\"storageCount\":1181286444,\"totalStorageSizeInGbs\":1222177326,\"availableStorageSizeInGbs\":983319002,\"timeCreated\":\"hrv\",\"lifecycleDetails\":\"unzo\",\"maintenanceWindow\":{\"preference\":\"CustomPreference\",\"months\":[{\"name\":\"December\"}],\"weeksOfMonth\":[12251409],\"daysOfWeek\":[{\"name\":\"Monday\"},{\"name\":\"Monday\"},{\"name\":\"Sunday\"},{\"name\":\"Sunday\"}],\"hoursOfDay\":[1860267114,1002212342],\"leadTimeInWeeks\":1110569499,\"patchingMode\":\"NonRolling\",\"customActionTimeoutInMins\":566054970,\"isCustomActionTimeoutEnabled\":false,\"isMonthlyPatchingEnabled\":true},\"estimatedPatchingTime\":{\"estimatedDbServerPatchingTime\":1700872320,\"estimatedNetworkSwitchesPatchingTime\":1922486723,\"estimatedStorageServerPatchingTime\":1078649712,\"totalEstimatedPatchingTime\":1298484504},\"customerContacts\":[{\"email\":\"hmgorffukiscv\"},{\"email\":\"mzhwplefaxvxi\"},{\"email\":\"cbtgnhnz\"}],\"provisioningState\":\"Succeeded\",\"lifecycleState\":\"Provisioning\",\"shape\":\"jjfzqlqhycavo\",\"ociUrl\":\"gxdbeesmie\",\"cpuCount\":426944858,\"maxCpuCount\":1641970858,\"memorySizeInGbs\":659400127,\"maxMemoryInGbs\":2070170024,\"dbNodeStorageSizeInGbs\":1897469256,\"maxDbNodeStorageSizeInGbs\":617369001,\"dataStorageSizeInTbs\":637306893,\"maxDataStorageInTbs\":82.2556334689888,\"dbServerVersion\":\"bylyrfgia\",\"storageServerVersion\":\"cojocqwogfnzjvus\",\"activatedStorageCount\":359002746,\"additionalStorageCount\":526987950,\"displayName\":\"ozuxylfsbtkadpys\",\"lastMaintenanceRunId\":\"nbtgkbugrjqctoj\",\"nextMaintenanceRunId\":\"isofieypefojyqd\",\"monthlyDbServerVersion\":\"u\",\"monthlyStorageServerVersion\":\"cp\"},\"zones\":[\"wkhihihlhzdsqt\",\"bsrgnowc\"],\"location\":\"fgmvecactxmwo\",\"tags\":{\"ekqvgqouwif\":\"owcluqo\"},\"id\":\"mpjw\",\"name\":\"ivqikfxcvhr\",\"type\":\"sphuagrttikteus\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        OracleDatabaseManager manager = OracleDatabaseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CloudExadataInfrastructure response = manager.cloudExadataInfrastructures()
            .define("rqzz")
            .withRegion("krsgsgb")
            .withExistingResourceGroup("qedcgzulwm")
            .withZones(Arrays.asList("wmn", "sttijfybvp"))
            .withTags(mapOf("njdgkynscliq", "zq", "mtk", "zvhxnk", "ppnvdxz", "bo", "hlfkqojpy", "hihfrbbcevqagtlt"))
            .withProperties(new CloudExadataInfrastructureProperties().withComputeCount(1736841336)
                .withStorageCount(1076182839)
                .withMaintenanceWindow(new MaintenanceWindow().withPreference(Preference.CUSTOM_PREFERENCE)
                    .withMonths(
                        Arrays.asList(new Month().withName(MonthName.OCTOBER), new Month().withName(MonthName.AUGUST)))
                    .withWeeksOfMonth(Arrays.asList(2114166955, 289007834, 1887734722, 408345247))
                    .withDaysOfWeek(Arrays.asList(new DayOfWeek().withName(DayOfWeekName.TUESDAY),
                        new DayOfWeek().withName(DayOfWeekName.SUNDAY)))
                    .withHoursOfDay(Arrays.asList(1921390640, 230826239))
                    .withLeadTimeInWeeks(1584203762)
                    .withPatchingMode(PatchingMode.ROLLING)
                    .withCustomActionTimeoutInMins(1869010035)
                    .withIsCustomActionTimeoutEnabled(true)
                    .withIsMonthlyPatchingEnabled(false))
                .withCustomerContacts(Arrays.asList(new CustomerContact().withEmail("zmlqtmldgxo")))
                .withShape("lnpkciay")
                .withDisplayName("dz"))
            .create();

        Assertions.assertEquals("fgmvecactxmwo", response.location());
        Assertions.assertEquals("owcluqo", response.tags().get("ekqvgqouwif"));
        Assertions.assertEquals(1019115621, response.properties().computeCount());
        Assertions.assertEquals(1181286444, response.properties().storageCount());
        Assertions.assertEquals(Preference.CUSTOM_PREFERENCE, response.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.DECEMBER, response.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(12251409, response.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.MONDAY,
            response.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(1860267114, response.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(1110569499, response.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.NON_ROLLING, response.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(566054970, response.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertEquals(false, response.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertEquals(true, response.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("hmgorffukiscv", response.properties().customerContacts().get(0).email());
        Assertions.assertEquals("jjfzqlqhycavo", response.properties().shape());
        Assertions.assertEquals("ozuxylfsbtkadpys", response.properties().displayName());
        Assertions.assertEquals("wkhihihlhzdsqt", response.zones().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
