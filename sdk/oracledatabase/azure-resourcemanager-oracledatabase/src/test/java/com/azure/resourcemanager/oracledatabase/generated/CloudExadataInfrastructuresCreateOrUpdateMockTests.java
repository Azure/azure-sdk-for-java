// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.oracledatabase.OracleDatabaseManager;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructure;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructureProperties;
import com.azure.resourcemanager.oracledatabase.models.CustomerContact;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeek;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeekName;
import com.azure.resourcemanager.oracledatabase.models.MaintenanceWindow;
import com.azure.resourcemanager.oracledatabase.models.Month;
import com.azure.resourcemanager.oracledatabase.models.MonthName;
import com.azure.resourcemanager.oracledatabase.models.PatchingMode;
import com.azure.resourcemanager.oracledatabase.models.Preference;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CloudExadataInfrastructuresCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"definedFileSystemConfiguration\":[{\"isBackupPartition\":false,\"isResizable\":false,\"minSizeGb\":2106682244,\"mountPoint\":\"k\"}],\"ocid\":\"ve\",\"computeCount\":789888473,\"storageCount\":1201328527,\"totalStorageSizeInGbs\":664192070,\"availableStorageSizeInGbs\":133046174,\"timeCreated\":\"rnfxtgddp\",\"lifecycleDetails\":\"hehnmnaoya\",\"maintenanceWindow\":{\"preference\":\"NoPreference\",\"months\":[{\"name\":\"March\"},{\"name\":\"July\"},{\"name\":\"September\"},{\"name\":\"January\"}],\"weeksOfMonth\":[41999694,2076319922],\"daysOfWeek\":[{\"name\":\"Tuesday\"},{\"name\":\"Tuesday\"},{\"name\":\"Wednesday\"},{\"name\":\"Thursday\"}],\"hoursOfDay\":[769796066,1705440283],\"leadTimeInWeeks\":673142894,\"patchingMode\":\"Rolling\",\"customActionTimeoutInMins\":750712079,\"isCustomActionTimeoutEnabled\":true,\"isMonthlyPatchingEnabled\":true},\"estimatedPatchingTime\":{\"estimatedDbServerPatchingTime\":1025559588,\"estimatedNetworkSwitchesPatchingTime\":718100150,\"estimatedStorageServerPatchingTime\":1431974621,\"totalEstimatedPatchingTime\":13572541},\"customerContacts\":[{\"email\":\"eeczgfbu\"}],\"provisioningState\":\"Succeeded\",\"lifecycleState\":\"MaintenanceInProgress\",\"shape\":\"s\",\"ociUrl\":\"blycsxzujksr\",\"cpuCount\":1416694484,\"maxCpuCount\":1476026923,\"memorySizeInGbs\":2007657169,\"maxMemoryInGbs\":1385495234,\"dbNodeStorageSizeInGbs\":240034814,\"maxDbNodeStorageSizeInGbs\":1725604269,\"dataStorageSizeInTbs\":62.25711902969204,\"maxDataStorageInTbs\":10.052213521418807,\"dbServerVersion\":\"dyvt\",\"storageServerVersion\":\"wxvgpiudeugfsxze\",\"activatedStorageCount\":1024094635,\"additionalStorageCount\":1582290810,\"displayName\":\"kufykhvu\",\"lastMaintenanceRunId\":\"epmrut\",\"nextMaintenanceRunId\":\"abaobnslujdjltym\",\"monthlyDbServerVersion\":\"vguihywar\",\"monthlyStorageServerVersion\":\"pphkixkykxds\",\"databaseServerType\":\"pemmucfxhik\",\"storageServerType\":\"lrmymyincqlhri\",\"computeModel\":\"ECPU\",\"exascaleConfig\":{\"totalStorageInGbs\":1018402550,\"availableStorageInGbs\":521413145}},\"zones\":[\"ovgqcgxuugqkctot\"],\"location\":\"wlxte\",\"tags\":{\"anblwphqlkccu\":\"tjgwdtguk\",\"iul\":\"gygqwah\"},\"id\":\"gniiprglvaw\",\"name\":\"wzdufypivlsbb\",\"type\":\"pmcubkmifoxxkub\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        OracleDatabaseManager manager = OracleDatabaseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CloudExadataInfrastructure response = manager.cloudExadataInfrastructures()
            .define("mltx")
            .withRegion("rseqwjksghudgz")
            .withExistingResourceGroup("chl")
            .withZones(Arrays.asList("bbmpxdlvykfre"))
            .withTags(mapOf("u", "gjggsv", "kmdyomkxfbvfbh", "kxibdafh", "rhpw", "y", "o", "gddeimaw"))
            .withProperties(new CloudExadataInfrastructureProperties().withComputeCount(1282661494)
                .withStorageCount(369643942)
                .withMaintenanceWindow(new MaintenanceWindow().withPreference(Preference.NO_PREFERENCE)
                    .withMonths(Arrays.asList(new Month().withName(MonthName.DECEMBER)))
                    .withWeeksOfMonth(Arrays.asList(1605415287, 60991993, 1628791507))
                    .withDaysOfWeek(Arrays.asList(new DayOfWeek().withName(DayOfWeekName.FRIDAY)))
                    .withHoursOfDay(Arrays.asList(224237712, 105087140, 496590668, 755954714))
                    .withLeadTimeInWeeks(1031040752)
                    .withPatchingMode(PatchingMode.NON_ROLLING)
                    .withCustomActionTimeoutInMins(283342736)
                    .withIsCustomActionTimeoutEnabled(true)
                    .withIsMonthlyPatchingEnabled(true))
                .withCustomerContacts(Arrays.asList(new CustomerContact().withEmail("gj")))
                .withShape("irwgdnqzbrf")
                .withDisplayName("cxnmskwhqjjyslu")
                .withDatabaseServerType("rrleaesinuqt")
                .withStorageServerType("qobbpihehcec"))
            .create();

        Assertions.assertEquals("wlxte", response.location());
        Assertions.assertEquals("tjgwdtguk", response.tags().get("anblwphqlkccu"));
        Assertions.assertEquals(789888473, response.properties().computeCount());
        Assertions.assertEquals(1201328527, response.properties().storageCount());
        Assertions.assertEquals(Preference.NO_PREFERENCE, response.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.MARCH, response.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(41999694, response.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.TUESDAY,
            response.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(769796066, response.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(673142894, response.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.ROLLING, response.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(750712079, response.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertTrue(response.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertTrue(response.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("eeczgfbu", response.properties().customerContacts().get(0).email());
        Assertions.assertEquals("s", response.properties().shape());
        Assertions.assertEquals("kufykhvu", response.properties().displayName());
        Assertions.assertEquals("pemmucfxhik", response.properties().databaseServerType());
        Assertions.assertEquals("lrmymyincqlhri", response.properties().storageServerType());
        Assertions.assertEquals("ovgqcgxuugqkctot", response.zones().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
