// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.oracledatabase.OracleDatabaseManager;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructure;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructureProperties;
import com.azure.resourcemanager.oracledatabase.models.CustomerContact;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeek;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeekName;
import com.azure.resourcemanager.oracledatabase.models.MaintenanceWindow;
import com.azure.resourcemanager.oracledatabase.models.Month;
import com.azure.resourcemanager.oracledatabase.models.MonthName;
import com.azure.resourcemanager.oracledatabase.models.PatchingMode;
import com.azure.resourcemanager.oracledatabase.models.Preference;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CloudExadataInfrastructuresCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"definedFileSystemConfiguration\":[{\"isBackupPartition\":false,\"isResizable\":true,\"minSizeGb\":497291047,\"mountPoint\":\"nptfujgi\"},{\"isBackupPartition\":true,\"isResizable\":false,\"minSizeGb\":2031389525,\"mountPoint\":\"taqutdewem\"},{\"isBackupPartition\":true,\"isResizable\":true,\"minSizeGb\":140983404,\"mountPoint\":\"zzjgehkfki\"},{\"isBackupPartition\":false,\"isResizable\":true,\"minSizeGb\":1844192797,\"mountPoint\":\"fqyinljqepqw\"}],\"ocid\":\"xmonstshi\",\"computeCount\":1369464715,\"storageCount\":211589475,\"totalStorageSizeInGbs\":1196099059,\"availableStorageSizeInGbs\":1732481769,\"timeCreated\":\"uccbirdsvuw\",\"lifecycleDetails\":\"b\",\"maintenanceWindow\":{\"preference\":\"CustomPreference\",\"months\":[{\"name\":\"July\"},{\"name\":\"December\"},{\"name\":\"May\"},{\"name\":\"October\"}],\"weeksOfMonth\":[2100756233,1305077670],\"daysOfWeek\":[{\"name\":\"Thursday\"},{\"name\":\"Sunday\"},{\"name\":\"Monday\"},{\"name\":\"Thursday\"}],\"hoursOfDay\":[403294934],\"leadTimeInWeeks\":884114239,\"patchingMode\":\"Rolling\",\"customActionTimeoutInMins\":428803930,\"isCustomActionTimeoutEnabled\":false,\"isMonthlyPatchingEnabled\":true},\"estimatedPatchingTime\":{\"estimatedDbServerPatchingTime\":934679534,\"estimatedNetworkSwitchesPatchingTime\":1588574812,\"estimatedStorageServerPatchingTime\":1178102371,\"totalEstimatedPatchingTime\":411885173},\"customerContacts\":[{\"email\":\"ycucrwnamikzeb\"},{\"email\":\"qbsms\"},{\"email\":\"ziqgfuh\"},{\"email\":\"kzruswh\"}],\"provisioningState\":\"Succeeded\",\"lifecycleState\":\"Available\",\"shape\":\"n\",\"ociUrl\":\"bycjsxjwwix\",\"cpuCount\":156341242,\"maxCpuCount\":1790440808,\"memorySizeInGbs\":1286205076,\"maxMemoryInGbs\":1685347257,\"dbNodeStorageSizeInGbs\":1978421071,\"maxDbNodeStorageSizeInGbs\":1385229994,\"dataStorageSizeInTbs\":40.05324193033235,\"maxDataStorageInTbs\":89.90167363208273,\"dbServerVersion\":\"haohdjhhflzokxc\",\"storageServerVersion\":\"pelnjetag\",\"activatedStorageCount\":1066573650,\"additionalStorageCount\":1886970927,\"displayName\":\"atftgzpnpbsw\",\"lastMaintenanceRunId\":\"floccsrmozih\",\"nextMaintenanceRunId\":\"pgawtxxpkyjcxcjx\",\"monthlyDbServerVersion\":\"ytfmpc\",\"monthlyStorageServerVersion\":\"ilrmcaykggnox\",\"databaseServerType\":\"t\",\"storageServerType\":\"sxwpndfcpfnznthj\",\"computeModel\":\"OCPU\"},\"zones\":[\"aosrxuz\",\"oamktcq\",\"os\"],\"location\":\"bzahgxqd\",\"tags\":{\"ap\":\"tlt\",\"oqeq\":\"ltzkatbhjmznnb\"},\"id\":\"larvlagunbtg\",\"name\":\"ebwlnbmhyreeudzq\",\"type\":\"vbpdqmjxlyyzglgo\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        OracleDatabaseManager manager = OracleDatabaseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CloudExadataInfrastructure response = manager.cloudExadataInfrastructures()
            .define("wcltyjede")
            .withRegion("n")
            .withExistingResourceGroup("cpopmxel")
            .withZones(Arrays.asList("snvpdibmi", "ostbzbkiwb"))
            .withTags(
                mapOf("nezzcezelfwyfwlw", "hzfylsgcrpfbc", "zvaylptrsqqw", "jwetnpsihcla", "waxfewzjkj", "tcmwqkchc"))
            .withProperties(new CloudExadataInfrastructureProperties().withComputeCount(967398069)
                .withStorageCount(1448410077)
                .withMaintenanceWindow(new MaintenanceWindow().withPreference(Preference.NO_PREFERENCE)
                    .withMonths(Arrays.asList(new Month().withName(MonthName.MAY)))
                    .withWeeksOfMonth(Arrays.asList(669649169, 1331204401, 1461231451, 351004258))
                    .withDaysOfWeek(Arrays.asList(new DayOfWeek().withName(DayOfWeekName.SATURDAY),
                        new DayOfWeek().withName(DayOfWeekName.SATURDAY),
                        new DayOfWeek().withName(DayOfWeekName.SUNDAY)))
                    .withHoursOfDay(Arrays.asList(488941852, 414360047))
                    .withLeadTimeInWeeks(1016884622)
                    .withPatchingMode(PatchingMode.ROLLING)
                    .withCustomActionTimeoutInMins(1417437720)
                    .withIsCustomActionTimeoutEnabled(false)
                    .withIsMonthlyPatchingEnabled(true))
                .withCustomerContacts(Arrays.asList(new CustomerContact().withEmail("ibg"),
                    new CustomerContact().withEmail("xgnxfyqonmpqoxwd")))
                .withShape("iqxeiiqbimht")
                .withDisplayName("jfelisdjubggbqig")
                .withDatabaseServerType("jed")
                .withStorageServerType("tkvnlvxbcuiiznkt"))
            .create();

        Assertions.assertEquals("bzahgxqd", response.location());
        Assertions.assertEquals("tlt", response.tags().get("ap"));
        Assertions.assertEquals(1369464715, response.properties().computeCount());
        Assertions.assertEquals(211589475, response.properties().storageCount());
        Assertions.assertEquals(Preference.CUSTOM_PREFERENCE, response.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.JULY, response.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(2100756233, response.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.THURSDAY,
            response.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(403294934, response.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(884114239, response.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.ROLLING, response.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(428803930, response.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertFalse(response.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertTrue(response.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("ycucrwnamikzeb", response.properties().customerContacts().get(0).email());
        Assertions.assertEquals("n", response.properties().shape());
        Assertions.assertEquals("atftgzpnpbsw", response.properties().displayName());
        Assertions.assertEquals("t", response.properties().databaseServerType());
        Assertions.assertEquals("sxwpndfcpfnznthj", response.properties().storageServerType());
        Assertions.assertEquals("aosrxuz", response.zones().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
