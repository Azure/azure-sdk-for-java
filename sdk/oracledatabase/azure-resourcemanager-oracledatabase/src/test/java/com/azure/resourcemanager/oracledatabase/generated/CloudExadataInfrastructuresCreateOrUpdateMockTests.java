// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.oracledatabase.OracleDatabaseManager;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructure;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructureProperties;
import com.azure.resourcemanager.oracledatabase.models.CustomerContact;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeek;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeekName;
import com.azure.resourcemanager.oracledatabase.models.MaintenanceWindow;
import com.azure.resourcemanager.oracledatabase.models.Month;
import com.azure.resourcemanager.oracledatabase.models.MonthName;
import com.azure.resourcemanager.oracledatabase.models.PatchingMode;
import com.azure.resourcemanager.oracledatabase.models.Preference;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CloudExadataInfrastructuresCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"ocid\":\"kmoyxcdyuibh\",\"computeCount\":1110569499,\"storageCount\":485824562,\"totalStorageSizeInGbs\":566054970,\"availableStorageSizeInGbs\":1454417647,\"timeCreated\":\"vfcjnaeoisrvhmg\",\"lifecycleDetails\":\"ffukiscvw\",\"maintenanceWindow\":{\"preference\":\"CustomPreference\",\"months\":[{\"name\":\"December\"},{\"name\":\"November\"},{\"name\":\"December\"},{\"name\":\"March\"}],\"weeksOfMonth\":[1880007503,261950952,1897852291,888292553],\"daysOfWeek\":[{\"name\":\"Thursday\"},{\"name\":\"Sunday\"}],\"hoursOfDay\":[544217258,417337580,1529157680,1521773196],\"leadTimeInWeeks\":1207398675,\"patchingMode\":\"NonRolling\",\"customActionTimeoutInMins\":715633855,\"isCustomActionTimeoutEnabled\":true,\"isMonthlyPatchingEnabled\":true},\"estimatedPatchingTime\":{\"estimatedDbServerPatchingTime\":486580824,\"estimatedNetworkSwitchesPatchingTime\":557856056,\"estimatedStorageServerPatchingTime\":281911697,\"totalEstimatedPatchingTime\":1896221438},\"customerContacts\":[{\"email\":\"esmi\"}],\"provisioningState\":\"Succeeded\",\"lifecycleState\":\"Failed\",\"shape\":\"ariaawi\",\"ociUrl\":\"gy\",\"cpuCount\":846289749,\"maxCpuCount\":225178915,\"memorySizeInGbs\":803078065,\"maxMemoryInGbs\":902070673,\"dbNodeStorageSizeInGbs\":122910827,\"maxDbNodeStorageSizeInGbs\":690539216,\"dataStorageSizeInTbs\":50.07212602456753,\"maxDataStorageInTbs\":87.74515056919178,\"dbServerVersion\":\"qwogfnzjvus\",\"storageServerVersion\":\"ld\",\"activatedStorageCount\":1956453984,\"additionalStorageCount\":1516168564,\"displayName\":\"ylfsbtk\",\"lastMaintenanceRunId\":\"pysownbt\",\"nextMaintenanceRunId\":\"bugrj\",\"monthlyDbServerVersion\":\"to\",\"monthlyStorageServerVersion\":\"mi\"},\"zones\":[\"fieypefojyqdhcup\"],\"location\":\"plcwkhi\",\"tags\":{\"rgnowcjhfgm\":\"lhzdsqtzb\",\"wotey\":\"ecactx\",\"uwifzmpjwyiv\":\"wcluqovekqvgq\",\"cvhrfsp\":\"ikf\"},\"id\":\"uagrttikteusqc\",\"name\":\"kvyklxubyjaffmm\",\"type\":\"bl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        OracleDatabaseManager manager = OracleDatabaseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CloudExadataInfrastructure response = manager.cloudExadataInfrastructures()
            .define("vf")
            .withRegion("ckh")
            .withExistingResourceGroup("yutnwytpzdmov")
            .withZones(Arrays.asList("ihfrbbcevqa", "tltdhlfkqojpy", "vgtrdcnifmzzs", "ymbrnysuxmpraf"))
            .withTags(mapOf("wafqroud", "vdff"))
            .withProperties(new CloudExadataInfrastructureProperties().withComputeCount(1787423883)
                .withStorageCount(97417905)
                .withMaintenanceWindow(new MaintenanceWindow().withPreference(Preference.NO_PREFERENCE)
                    .withMonths(Arrays.asList(new Month().withName(MonthName.AUGUST)))
                    .withWeeksOfMonth(Arrays.asList(403916626))
                    .withDaysOfWeek(Arrays.asList(new DayOfWeek().withName(DayOfWeekName.FRIDAY),
                        new DayOfWeek().withName(DayOfWeekName.WEDNESDAY),
                        new DayOfWeek().withName(DayOfWeekName.WEDNESDAY),
                        new DayOfWeek().withName(DayOfWeekName.FRIDAY)))
                    .withHoursOfDay(Arrays.asList(2017122463))
                    .withLeadTimeInWeeks(816651113)
                    .withPatchingMode(PatchingMode.ROLLING)
                    .withCustomActionTimeoutInMins(1808660907)
                    .withIsCustomActionTimeoutEnabled(true)
                    .withIsMonthlyPatchingEnabled(false))
                .withCustomerContacts(Arrays.asList(new CustomerContact().withEmail("vkjlmxhom"),
                    new CustomerContact().withEmail("ynhdwdigum"), new CustomerContact().withEmail("nraauzz")))
                .withShape("ysdzhez")
                .withDisplayName("huzqgn"))
            .create();

        Assertions.assertEquals("plcwkhi", response.location());
        Assertions.assertEquals("lhzdsqtzb", response.tags().get("rgnowcjhfgm"));
        Assertions.assertEquals(1110569499, response.properties().computeCount());
        Assertions.assertEquals(485824562, response.properties().storageCount());
        Assertions.assertEquals(Preference.CUSTOM_PREFERENCE, response.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.DECEMBER, response.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(1880007503, response.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.THURSDAY,
            response.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(544217258, response.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(1207398675, response.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.NON_ROLLING, response.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(715633855, response.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertEquals(true, response.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertEquals(true, response.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("esmi", response.properties().customerContacts().get(0).email());
        Assertions.assertEquals("ariaawi", response.properties().shape());
        Assertions.assertEquals("ylfsbtk", response.properties().displayName());
        Assertions.assertEquals("fieypefojyqdhcup", response.zones().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
