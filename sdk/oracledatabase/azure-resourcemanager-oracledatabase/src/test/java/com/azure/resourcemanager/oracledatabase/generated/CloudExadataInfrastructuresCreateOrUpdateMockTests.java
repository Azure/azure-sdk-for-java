// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.oracledatabase.OracleDatabaseManager;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructure;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructureProperties;
import com.azure.resourcemanager.oracledatabase.models.CustomerContact;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeek;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeekName;
import com.azure.resourcemanager.oracledatabase.models.MaintenanceWindow;
import com.azure.resourcemanager.oracledatabase.models.Month;
import com.azure.resourcemanager.oracledatabase.models.MonthName;
import com.azure.resourcemanager.oracledatabase.models.PatchingMode;
import com.azure.resourcemanager.oracledatabase.models.Preference;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CloudExadataInfrastructuresCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"ocid\":\"petogebjox\",\"computeCount\":1031395843,\"storageCount\":555122455,\"totalStorageSizeInGbs\":1688671703,\"availableStorageSizeInGbs\":568174025,\"timeCreated\":\"q\",\"lifecycleDetails\":\"kzjcjbtrgae\",\"maintenanceWindow\":{\"preference\":\"NoPreference\",\"months\":[{\"name\":\"April\"},{\"name\":\"December\"},{\"name\":\"February\"},{\"name\":\"December\"}],\"weeksOfMonth\":[1344524900,1668662925,480275151],\"daysOfWeek\":[{\"name\":\"Monday\"},{\"name\":\"Monday\"},{\"name\":\"Tuesday\"},{\"name\":\"Monday\"}],\"hoursOfDay\":[1499217253],\"leadTimeInWeeks\":2143901348,\"patchingMode\":\"NonRolling\",\"customActionTimeoutInMins\":2060626839,\"isCustomActionTimeoutEnabled\":false,\"isMonthlyPatchingEnabled\":false},\"estimatedPatchingTime\":{\"estimatedDbServerPatchingTime\":913661496,\"estimatedNetworkSwitchesPatchingTime\":1328800252,\"estimatedStorageServerPatchingTime\":658740777,\"totalEstimatedPatchingTime\":1479549397},\"customerContacts\":[{\"email\":\"hemjy\"}],\"provisioningState\":\"Succeeded\",\"lifecycleState\":\"Terminating\",\"shape\":\"swtwkozzwc\",\"ociUrl\":\"kb\",\"cpuCount\":1523794500,\"maxCpuCount\":809021863,\"memorySizeInGbs\":984461759,\"maxMemoryInGbs\":1824615307,\"dbNodeStorageSizeInGbs\":1819890486,\"maxDbNodeStorageSizeInGbs\":1345254039,\"dataStorageSizeInTbs\":86.42103679495649,\"maxDataStorageInTbs\":89.44727752010733,\"dbServerVersion\":\"alhsnvkc\",\"storageServerVersion\":\"xzrpo\",\"activatedStorageCount\":1897689605,\"additionalStorageCount\":27533686,\"displayName\":\"wiaaomylweaz\",\"lastMaintenanceRunId\":\"cse\",\"nextMaintenanceRunId\":\"wwnpj\",\"monthlyDbServerVersion\":\"fz\",\"monthlyStorageServerVersion\":\"pchwa\"},\"zones\":[\"bousn\"],\"location\":\"pgfewetwlyx\",\"tags\":{\"limmbcxf\":\"xykxhdj\"},\"id\":\"bcporxvxcjzhqizx\",\"name\":\"pxtgqscjav\",\"type\":\"t\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        OracleDatabaseManager manager = OracleDatabaseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CloudExadataInfrastructure response = manager.cloudExadataInfrastructures()
            .define("roud")
            .withRegion("vekqvgqo")
            .withExistingResourceGroup("khocxvdfffwaf")
            .withZones(Arrays.asList("hlhzdsqtzbsrgno", "cjhfgmvecactxmw", "teyowclu"))
            .withTags(mapOf("kfxcvhrfs", "fzmpjwyivq", "kvyklxubyjaffmm", "huagrttikteusqc", "qcuubgqibrta", "bl"))
            .withProperties(new CloudExadataInfrastructureProperties().withComputeCount(35410717)
                .withStorageCount(1288828831)
                .withMaintenanceWindow(new MaintenanceWindow().withPreference(Preference.NO_PREFERENCE)
                    .withMonths(
                        Arrays.asList(new Month().withName(MonthName.MARCH), new Month().withName(MonthName.MAY)))
                    .withWeeksOfMonth(Arrays.asList(1738473188, 885445974, 1226403170, 716191050))
                    .withDaysOfWeek(Arrays.asList(new DayOfWeek().withName(DayOfWeekName.MONDAY),
                        new DayOfWeek().withName(DayOfWeekName.TUESDAY),
                        new DayOfWeek().withName(DayOfWeekName.MONDAY)))
                    .withHoursOfDay(Arrays.asList(327168368, 993644488, 934107577))
                    .withLeadTimeInWeeks(112940611)
                    .withPatchingMode(PatchingMode.NON_ROLLING)
                    .withCustomActionTimeoutInMins(728101598)
                    .withIsCustomActionTimeoutEnabled(true)
                    .withIsMonthlyPatchingEnabled(false))
                .withCustomerContacts(Arrays.asList(new CustomerContact().withEmail("hnze"),
                    new CustomerContact().withEmail("qxtjjfzqlqhyca"), new CustomerContact().withEmail("odggx")))
                .withShape("mieknlraria")
                .withDisplayName("bugrj"))
            .create();

        Assertions.assertEquals("pgfewetwlyx", response.location());
        Assertions.assertEquals("xykxhdj", response.tags().get("limmbcxf"));
        Assertions.assertEquals(1031395843, response.properties().computeCount());
        Assertions.assertEquals(555122455, response.properties().storageCount());
        Assertions.assertEquals(Preference.NO_PREFERENCE, response.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.APRIL, response.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(1344524900, response.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.MONDAY,
            response.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(1499217253, response.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(2143901348, response.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.NON_ROLLING, response.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(2060626839, response.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertEquals(false, response.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertEquals(false, response.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("hemjy", response.properties().customerContacts().get(0).email());
        Assertions.assertEquals("swtwkozzwc", response.properties().shape());
        Assertions.assertEquals("wiaaomylweaz", response.properties().displayName());
        Assertions.assertEquals("bousn", response.zones().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
