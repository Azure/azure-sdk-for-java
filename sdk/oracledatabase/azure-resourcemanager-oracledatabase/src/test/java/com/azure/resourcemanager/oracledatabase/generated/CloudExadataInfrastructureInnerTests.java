// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.oracledatabase.fluent.models.CloudExadataInfrastructureInner;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructureProperties;
import com.azure.resourcemanager.oracledatabase.models.CustomerContact;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeek;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeekName;
import com.azure.resourcemanager.oracledatabase.models.MaintenanceWindow;
import com.azure.resourcemanager.oracledatabase.models.Month;
import com.azure.resourcemanager.oracledatabase.models.MonthName;
import com.azure.resourcemanager.oracledatabase.models.PatchingMode;
import com.azure.resourcemanager.oracledatabase.models.Preference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CloudExadataInfrastructureInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CloudExadataInfrastructureInner model = BinaryData.fromString(
            "{\"properties\":{\"definedFileSystemConfiguration\":[{\"isBackupPartition\":true,\"isResizable\":false,\"minSizeGb\":86962705,\"mountPoint\":\"aqw\"},{\"isBackupPartition\":true,\"isResizable\":false,\"minSizeGb\":804356907,\"mountPoint\":\"qvpkvlrxnjeaseip\"},{\"isBackupPartition\":false,\"isResizable\":false,\"minSizeGb\":1111118193,\"mountPoint\":\"yyien\"}],\"ocid\":\"dlwtgrhpdj\",\"computeCount\":523400535,\"storageCount\":1984471736,\"totalStorageSizeInGbs\":1012728769,\"availableStorageSizeInGbs\":271162944,\"timeCreated\":\"pqyegualhbxxh\",\"lifecycleDetails\":\"jzzvdud\",\"maintenanceWindow\":{\"preference\":\"NoPreference\",\"months\":[{\"name\":\"December\"},{\"name\":\"June\"}],\"weeksOfMonth\":[743935236],\"daysOfWeek\":[{\"name\":\"Monday\"},{\"name\":\"Friday\"}],\"hoursOfDay\":[1264549438,991937495,420824086,1848552059],\"leadTimeInWeeks\":1185214536,\"patchingMode\":\"NonRolling\",\"customActionTimeoutInMins\":1348050771,\"isCustomActionTimeoutEnabled\":true,\"isMonthlyPatchingEnabled\":true},\"estimatedPatchingTime\":{\"estimatedDbServerPatchingTime\":1194387790,\"estimatedNetworkSwitchesPatchingTime\":1099330569,\"estimatedStorageServerPatchingTime\":737203180,\"totalEstimatedPatchingTime\":1772029927},\"customerContacts\":[{\"email\":\"uesnzwdejbavo\"},{\"email\":\"xzdmohctb\"}],\"provisioningState\":\"Provisioning\",\"lifecycleState\":\"MaintenanceInProgress\",\"shape\":\"xdn\",\"ociUrl\":\"vo\",\"cpuCount\":999513360,\"maxCpuCount\":884625398,\"memorySizeInGbs\":408024361,\"maxMemoryInGbs\":1929800645,\"dbNodeStorageSizeInGbs\":1738162864,\"maxDbNodeStorageSizeInGbs\":1440300304,\"dataStorageSizeInTbs\":45.07384888214448,\"maxDataStorageInTbs\":12.228123099703847,\"dbServerVersion\":\"yggdtjixh\",\"storageServerVersion\":\"uofqwe\",\"activatedStorageCount\":1965159297,\"additionalStorageCount\":1807410645,\"displayName\":\"n\",\"lastMaintenanceRunId\":\"fyexfwhy\",\"nextMaintenanceRunId\":\"i\",\"monthlyDbServerVersion\":\"yvdcsitynnaa\",\"monthlyStorageServerVersion\":\"ectehf\",\"databaseServerType\":\"scjeypv\",\"storageServerType\":\"zrkgqhcjrefovg\",\"computeModel\":\"ECPU\"},\"zones\":[\"leyyvx\"],\"location\":\"jpkcattpng\",\"tags\":{\"jh\":\"cczsq\",\"ysou\":\"mdajv\",\"canoaeupf\":\"q\"},\"id\":\"yhltrpmopjmcm\",\"name\":\"tuo\",\"type\":\"thfuiuaodsfcpkvx\"}")
            .toObject(CloudExadataInfrastructureInner.class);
        Assertions.assertEquals("jpkcattpng", model.location());
        Assertions.assertEquals("cczsq", model.tags().get("jh"));
        Assertions.assertEquals(523400535, model.properties().computeCount());
        Assertions.assertEquals(1984471736, model.properties().storageCount());
        Assertions.assertEquals(Preference.NO_PREFERENCE, model.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.DECEMBER, model.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(743935236, model.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.MONDAY,
            model.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(1264549438, model.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(1185214536, model.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.NON_ROLLING, model.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(1348050771, model.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertTrue(model.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertTrue(model.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("uesnzwdejbavo", model.properties().customerContacts().get(0).email());
        Assertions.assertEquals("xdn", model.properties().shape());
        Assertions.assertEquals("n", model.properties().displayName());
        Assertions.assertEquals("scjeypv", model.properties().databaseServerType());
        Assertions.assertEquals("zrkgqhcjrefovg", model.properties().storageServerType());
        Assertions.assertEquals("leyyvx", model.zones().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CloudExadataInfrastructureInner model = new CloudExadataInfrastructureInner().withLocation("jpkcattpng")
            .withTags(mapOf("jh", "cczsq", "ysou", "mdajv", "canoaeupf", "q"))
            .withProperties(new CloudExadataInfrastructureProperties().withComputeCount(523400535)
                .withStorageCount(1984471736)
                .withMaintenanceWindow(new MaintenanceWindow().withPreference(Preference.NO_PREFERENCE)
                    .withMonths(
                        Arrays.asList(new Month().withName(MonthName.DECEMBER), new Month().withName(MonthName.JUNE)))
                    .withWeeksOfMonth(Arrays.asList(743935236))
                    .withDaysOfWeek(Arrays.asList(new DayOfWeek().withName(DayOfWeekName.MONDAY),
                        new DayOfWeek().withName(DayOfWeekName.FRIDAY)))
                    .withHoursOfDay(Arrays.asList(1264549438, 991937495, 420824086, 1848552059))
                    .withLeadTimeInWeeks(1185214536)
                    .withPatchingMode(PatchingMode.NON_ROLLING)
                    .withCustomActionTimeoutInMins(1348050771)
                    .withIsCustomActionTimeoutEnabled(true)
                    .withIsMonthlyPatchingEnabled(true))
                .withCustomerContacts(Arrays.asList(new CustomerContact().withEmail("uesnzwdejbavo"),
                    new CustomerContact().withEmail("xzdmohctb")))
                .withShape("xdn")
                .withDisplayName("n")
                .withDatabaseServerType("scjeypv")
                .withStorageServerType("zrkgqhcjrefovg"))
            .withZones(Arrays.asList("leyyvx"));
        model = BinaryData.fromObject(model).toObject(CloudExadataInfrastructureInner.class);
        Assertions.assertEquals("jpkcattpng", model.location());
        Assertions.assertEquals("cczsq", model.tags().get("jh"));
        Assertions.assertEquals(523400535, model.properties().computeCount());
        Assertions.assertEquals(1984471736, model.properties().storageCount());
        Assertions.assertEquals(Preference.NO_PREFERENCE, model.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.DECEMBER, model.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(743935236, model.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.MONDAY,
            model.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(1264549438, model.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(1185214536, model.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.NON_ROLLING, model.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(1348050771, model.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertTrue(model.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertTrue(model.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("uesnzwdejbavo", model.properties().customerContacts().get(0).email());
        Assertions.assertEquals("xdn", model.properties().shape());
        Assertions.assertEquals("n", model.properties().displayName());
        Assertions.assertEquals("scjeypv", model.properties().databaseServerType());
        Assertions.assertEquals("zrkgqhcjrefovg", model.properties().storageServerType());
        Assertions.assertEquals("leyyvx", model.zones().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
