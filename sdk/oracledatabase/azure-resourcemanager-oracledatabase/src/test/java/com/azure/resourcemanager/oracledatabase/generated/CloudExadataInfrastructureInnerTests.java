// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.oracledatabase.fluent.models.CloudExadataInfrastructureInner;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructureProperties;
import com.azure.resourcemanager.oracledatabase.models.CustomerContact;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeek;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeekName;
import com.azure.resourcemanager.oracledatabase.models.MaintenanceWindow;
import com.azure.resourcemanager.oracledatabase.models.Month;
import com.azure.resourcemanager.oracledatabase.models.MonthName;
import com.azure.resourcemanager.oracledatabase.models.PatchingMode;
import com.azure.resourcemanager.oracledatabase.models.Preference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CloudExadataInfrastructureInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CloudExadataInfrastructureInner model = BinaryData.fromString(
            "{\"properties\":{\"ocid\":\"uesnzwdejbavo\",\"computeCount\":669466066,\"storageCount\":1432436623,\"totalStorageSizeInGbs\":810501696,\"availableStorageSizeInGbs\":1623917209,\"timeCreated\":\"qvudwxdndnvowgu\",\"lifecycleDetails\":\"ugw\",\"maintenanceWindow\":{\"preference\":\"NoPreference\",\"months\":[{\"name\":\"October\"},{\"name\":\"November\"},{\"name\":\"December\"},{\"name\":\"September\"}],\"weeksOfMonth\":[24046342,791284673,2006960320,1731046264],\"daysOfWeek\":[{\"name\":\"Sunday\"},{\"name\":\"Wednesday\"}],\"hoursOfDay\":[878642575],\"leadTimeInWeeks\":2140516005,\"patchingMode\":\"NonRolling\",\"customActionTimeoutInMins\":194127225,\"isCustomActionTimeoutEnabled\":false,\"isMonthlyPatchingEnabled\":true},\"estimatedPatchingTime\":{\"estimatedDbServerPatchingTime\":1520793095,\"estimatedNetworkSwitchesPatchingTime\":1963784255,\"estimatedStorageServerPatchingTime\":1569477308,\"totalEstimatedPatchingTime\":393211595},\"customerContacts\":[{\"email\":\"ybcibvyvdcsit\"},{\"email\":\"nnaamdectehfiqsc\"}],\"provisioningState\":\"Canceled\",\"lifecycleState\":\"Available\",\"shape\":\"hezrkgq\",\"ociUrl\":\"jrefovgmkqsle\",\"cpuCount\":2031463120,\"maxCpuCount\":24684943,\"memorySizeInGbs\":440516085,\"maxMemoryInGbs\":152662254,\"dbNodeStorageSizeInGbs\":1493374876,\"maxDbNodeStorageSizeInGbs\":1721979703,\"dataStorageSizeInTbs\":738552235,\"maxDataStorageInTbs\":89.54885021656311,\"dbServerVersion\":\"cczsq\",\"storageServerVersion\":\"hvmdajvnysounq\",\"activatedStorageCount\":97546857,\"additionalStorageCount\":1709538743,\"displayName\":\"ae\",\"lastMaintenanceRunId\":\"fhyhltrpmopjmcma\",\"nextMaintenanceRunId\":\"okth\",\"monthlyDbServerVersion\":\"iuaod\",\"monthlyStorageServerVersion\":\"cpkvxodp\"},\"zones\":[\"zmyzydagf\",\"axbezyiuo\",\"ktwh\"],\"location\":\"xw\",\"tags\":{\"mbsureximo\":\"q\",\"fksymddystki\":\"yocf\"},\"id\":\"uxh\",\"name\":\"yudxorrqnbp\",\"type\":\"czvyifq\"}")
            .toObject(CloudExadataInfrastructureInner.class);
        Assertions.assertEquals("xw", model.location());
        Assertions.assertEquals("q", model.tags().get("mbsureximo"));
        Assertions.assertEquals(669466066, model.properties().computeCount());
        Assertions.assertEquals(1432436623, model.properties().storageCount());
        Assertions.assertEquals(Preference.NO_PREFERENCE, model.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.OCTOBER, model.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(24046342, model.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.SUNDAY,
            model.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(878642575, model.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(2140516005, model.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.NON_ROLLING, model.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(194127225, model.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertEquals(false, model.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertEquals(true, model.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("ybcibvyvdcsit", model.properties().customerContacts().get(0).email());
        Assertions.assertEquals("hezrkgq", model.properties().shape());
        Assertions.assertEquals("ae", model.properties().displayName());
        Assertions.assertEquals("zmyzydagf", model.zones().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CloudExadataInfrastructureInner model
            = new CloudExadataInfrastructureInner().withLocation("xw")
                .withTags(mapOf("mbsureximo", "q", "fksymddystki", "yocf"))
                .withProperties(new CloudExadataInfrastructureProperties().withComputeCount(669466066)
                    .withStorageCount(1432436623)
                    .withMaintenanceWindow(new MaintenanceWindow().withPreference(Preference.NO_PREFERENCE)
                        .withMonths(Arrays.asList(new Month().withName(MonthName.OCTOBER),
                            new Month().withName(MonthName.NOVEMBER), new Month().withName(MonthName.DECEMBER),
                            new Month().withName(MonthName.SEPTEMBER)))
                        .withWeeksOfMonth(Arrays.asList(24046342, 791284673, 2006960320, 1731046264))
                        .withDaysOfWeek(Arrays.asList(new DayOfWeek().withName(DayOfWeekName.SUNDAY),
                            new DayOfWeek().withName(DayOfWeekName.WEDNESDAY)))
                        .withHoursOfDay(Arrays.asList(878642575))
                        .withLeadTimeInWeeks(2140516005)
                        .withPatchingMode(PatchingMode.NON_ROLLING)
                        .withCustomActionTimeoutInMins(194127225)
                        .withIsCustomActionTimeoutEnabled(false)
                        .withIsMonthlyPatchingEnabled(true))
                    .withCustomerContacts(Arrays.asList(new CustomerContact().withEmail("ybcibvyvdcsit"),
                        new CustomerContact().withEmail("nnaamdectehfiqsc")))
                    .withShape("hezrkgq")
                    .withDisplayName("ae"))
                .withZones(Arrays.asList("zmyzydagf", "axbezyiuo", "ktwh"));
        model = BinaryData.fromObject(model).toObject(CloudExadataInfrastructureInner.class);
        Assertions.assertEquals("xw", model.location());
        Assertions.assertEquals("q", model.tags().get("mbsureximo"));
        Assertions.assertEquals(669466066, model.properties().computeCount());
        Assertions.assertEquals(1432436623, model.properties().storageCount());
        Assertions.assertEquals(Preference.NO_PREFERENCE, model.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.OCTOBER, model.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(24046342, model.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.SUNDAY,
            model.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(878642575, model.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(2140516005, model.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.NON_ROLLING, model.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(194127225, model.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertEquals(false, model.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertEquals(true, model.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("ybcibvyvdcsit", model.properties().customerContacts().get(0).email());
        Assertions.assertEquals("hezrkgq", model.properties().shape());
        Assertions.assertEquals("ae", model.properties().displayName());
        Assertions.assertEquals("zmyzydagf", model.zones().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
