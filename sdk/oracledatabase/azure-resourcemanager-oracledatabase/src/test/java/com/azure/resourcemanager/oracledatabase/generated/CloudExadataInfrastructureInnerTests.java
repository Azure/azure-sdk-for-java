// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.oracledatabase.fluent.models.CloudExadataInfrastructureInner;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructureProperties;
import com.azure.resourcemanager.oracledatabase.models.CustomerContact;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeek;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeekName;
import com.azure.resourcemanager.oracledatabase.models.MaintenanceWindow;
import com.azure.resourcemanager.oracledatabase.models.Month;
import com.azure.resourcemanager.oracledatabase.models.MonthName;
import com.azure.resourcemanager.oracledatabase.models.PatchingMode;
import com.azure.resourcemanager.oracledatabase.models.Preference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CloudExadataInfrastructureInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CloudExadataInfrastructureInner model = BinaryData.fromString(
            "{\"properties\":{\"definedFileSystemConfiguration\":[{\"isBackupPartition\":false,\"isResizable\":false,\"minSizeGb\":635672501,\"mountPoint\":\"eipheoflokeyy\"},{\"isBackupPartition\":false,\"isResizable\":true,\"minSizeGb\":147839675,\"mountPoint\":\"tgrhpdjpjumas\"},{\"isBackupPartition\":false,\"isResizable\":true,\"minSizeGb\":1063088657,\"mountPoint\":\"gual\"},{\"isBackupPartition\":true,\"isResizable\":false,\"minSizeGb\":344964368,\"mountPoint\":\"zzvdudgwds\"}],\"ocid\":\"hotwmcynpwlbjnp\",\"computeCount\":1690822953,\"storageCount\":1625524147,\"totalStorageSizeInGbs\":1405360141,\"availableStorageSizeInGbs\":55863349,\"timeCreated\":\"nltyfsoppusuesnz\",\"lifecycleDetails\":\"ej\",\"maintenanceWindow\":{\"preference\":\"CustomPreference\",\"months\":[{\"name\":\"October\"},{\"name\":\"February\"},{\"name\":\"April\"}],\"weeksOfMonth\":[226877862,1623917209,780236043],\"daysOfWeek\":[{\"name\":\"Sunday\"},{\"name\":\"Tuesday\"}],\"hoursOfDay\":[1758852414],\"leadTimeInWeeks\":1492638603,\"patchingMode\":\"Rolling\",\"customActionTimeoutInMins\":202688177,\"isCustomActionTimeoutEnabled\":true,\"isMonthlyPatchingEnabled\":true},\"estimatedPatchingTime\":{\"estimatedDbServerPatchingTime\":247911704,\"estimatedNetworkSwitchesPatchingTime\":175400299,\"estimatedStorageServerPatchingTime\":2105007169,\"totalEstimatedPatchingTime\":1100840258},\"customerContacts\":[{\"email\":\"azjdyggd\"},{\"email\":\"jixhbk\"},{\"email\":\"ofqweykhmenevfye\"},{\"email\":\"fwhybcibvy\"}],\"provisioningState\":\"Succeeded\",\"lifecycleState\":\"Terminating\",\"shape\":\"tynnaamdectehfi\",\"ociUrl\":\"cj\",\"cpuCount\":1266013577,\"maxCpuCount\":1797610507,\"memorySizeInGbs\":1363658384,\"maxMemoryInGbs\":902064602,\"dbNodeStorageSizeInGbs\":177141497,\"maxDbNodeStorageSizeInGbs\":61185346,\"dataStorageSizeInTbs\":93.9889586513849,\"maxDataStorageInTbs\":3.033752731716688,\"dbServerVersion\":\"mkqsleyyv\",\"storageServerVersion\":\"qjpkcattpngjcrc\",\"activatedStorageCount\":957799467,\"additionalStorageCount\":822789925,\"displayName\":\"jh\",\"lastMaintenanceRunId\":\"daj\",\"nextMaintenanceRunId\":\"ysou\",\"monthlyDbServerVersion\":\"e\",\"monthlyStorageServerVersion\":\"noae\",\"databaseServerType\":\"fhyhltrpmopjmcma\",\"storageServerType\":\"okth\",\"computeModel\":\"ECPU\",\"exascaleConfig\":{\"totalStorageInGbs\":94424945,\"availableStorageInGbs\":1445775245}},\"zones\":[\"fcp\",\"vxodpu\",\"zmyzydagf\",\"axbezyiuo\"],\"location\":\"twhrdxwzywqsm\",\"tags\":{\"ksymd\":\"reximoryocfs\",\"kiiuxhqyudxor\":\"ys\",\"poczvyifqrvkdvjs\":\"qn\",\"d\":\"lrmv\"},\"id\":\"watkpnpulexxb\",\"name\":\"zwtruwiqzbqjvsov\",\"type\":\"yokacspkw\"}")
            .toObject(CloudExadataInfrastructureInner.class);
        Assertions.assertEquals("twhrdxwzywqsm", model.location());
        Assertions.assertEquals("reximoryocfs", model.tags().get("ksymd"));
        Assertions.assertEquals(1690822953, model.properties().computeCount());
        Assertions.assertEquals(1625524147, model.properties().storageCount());
        Assertions.assertEquals(Preference.CUSTOM_PREFERENCE, model.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.OCTOBER, model.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(226877862, model.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.SUNDAY,
            model.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(1758852414, model.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(1492638603, model.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.ROLLING, model.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(202688177, model.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertTrue(model.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertTrue(model.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("azjdyggd", model.properties().customerContacts().get(0).email());
        Assertions.assertEquals("tynnaamdectehfi", model.properties().shape());
        Assertions.assertEquals("jh", model.properties().displayName());
        Assertions.assertEquals("fhyhltrpmopjmcma", model.properties().databaseServerType());
        Assertions.assertEquals("okth", model.properties().storageServerType());
        Assertions.assertEquals("fcp", model.zones().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CloudExadataInfrastructureInner model = new CloudExadataInfrastructureInner().withLocation("twhrdxwzywqsm")
            .withTags(mapOf("ksymd", "reximoryocfs", "kiiuxhqyudxor", "ys", "poczvyifqrvkdvjs", "qn", "d", "lrmv"))
            .withProperties(new CloudExadataInfrastructureProperties().withComputeCount(1690822953)
                .withStorageCount(1625524147)
                .withMaintenanceWindow(new MaintenanceWindow().withPreference(Preference.CUSTOM_PREFERENCE)
                    .withMonths(Arrays.asList(new Month().withName(MonthName.OCTOBER),
                        new Month().withName(MonthName.FEBRUARY), new Month().withName(MonthName.APRIL)))
                    .withWeeksOfMonth(Arrays.asList(226877862, 1623917209, 780236043))
                    .withDaysOfWeek(Arrays.asList(new DayOfWeek().withName(DayOfWeekName.SUNDAY),
                        new DayOfWeek().withName(DayOfWeekName.TUESDAY)))
                    .withHoursOfDay(Arrays.asList(1758852414))
                    .withLeadTimeInWeeks(1492638603)
                    .withPatchingMode(PatchingMode.ROLLING)
                    .withCustomActionTimeoutInMins(202688177)
                    .withIsCustomActionTimeoutEnabled(true)
                    .withIsMonthlyPatchingEnabled(true))
                .withCustomerContacts(Arrays.asList(new CustomerContact().withEmail("azjdyggd"),
                    new CustomerContact().withEmail("jixhbk"), new CustomerContact().withEmail("ofqweykhmenevfye"),
                    new CustomerContact().withEmail("fwhybcibvy")))
                .withShape("tynnaamdectehfi")
                .withDisplayName("jh")
                .withDatabaseServerType("fhyhltrpmopjmcma")
                .withStorageServerType("okth"))
            .withZones(Arrays.asList("fcp", "vxodpu", "zmyzydagf", "axbezyiuo"));
        model = BinaryData.fromObject(model).toObject(CloudExadataInfrastructureInner.class);
        Assertions.assertEquals("twhrdxwzywqsm", model.location());
        Assertions.assertEquals("reximoryocfs", model.tags().get("ksymd"));
        Assertions.assertEquals(1690822953, model.properties().computeCount());
        Assertions.assertEquals(1625524147, model.properties().storageCount());
        Assertions.assertEquals(Preference.CUSTOM_PREFERENCE, model.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.OCTOBER, model.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(226877862, model.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.SUNDAY,
            model.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(1758852414, model.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(1492638603, model.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.ROLLING, model.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(202688177, model.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertTrue(model.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertTrue(model.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("azjdyggd", model.properties().customerContacts().get(0).email());
        Assertions.assertEquals("tynnaamdectehfi", model.properties().shape());
        Assertions.assertEquals("jh", model.properties().displayName());
        Assertions.assertEquals("fhyhltrpmopjmcma", model.properties().databaseServerType());
        Assertions.assertEquals("okth", model.properties().storageServerType());
        Assertions.assertEquals("fcp", model.zones().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
