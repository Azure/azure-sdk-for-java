// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.oracledatabase.fluent.models.CloudExadataInfrastructureInner;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructureProperties;
import com.azure.resourcemanager.oracledatabase.models.CustomerContact;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeek;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeekName;
import com.azure.resourcemanager.oracledatabase.models.MaintenanceWindow;
import com.azure.resourcemanager.oracledatabase.models.Month;
import com.azure.resourcemanager.oracledatabase.models.MonthName;
import com.azure.resourcemanager.oracledatabase.models.PatchingMode;
import com.azure.resourcemanager.oracledatabase.models.Preference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CloudExadataInfrastructureInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CloudExadataInfrastructureInner model = BinaryData.fromString(
            "{\"properties\":{\"ocid\":\"oaeupfhyhltrpmo\",\"computeCount\":1593902435,\"storageCount\":1490971149,\"totalStorageSizeInGbs\":557848148,\"availableStorageSizeInGbs\":860799201,\"timeCreated\":\"thfuiuaodsfcpkvx\",\"lifecycleDetails\":\"puozmyzydag\",\"maintenanceWindow\":{\"preference\":\"CustomPreference\",\"months\":[{\"name\":\"September\"},{\"name\":\"June\"},{\"name\":\"July\"},{\"name\":\"May\"}],\"weeksOfMonth\":[962649448,1285068717,1627689194],\"daysOfWeek\":[{\"name\":\"Friday\"},{\"name\":\"Sunday\"},{\"name\":\"Friday\"}],\"hoursOfDay\":[2101673805,180468800,512563876,436585772],\"leadTimeInWeeks\":1170430043,\"patchingMode\":\"NonRolling\",\"customActionTimeoutInMins\":760240945,\"isCustomActionTimeoutEnabled\":true,\"isMonthlyPatchingEnabled\":true},\"estimatedPatchingTime\":{\"estimatedDbServerPatchingTime\":1027022233,\"estimatedNetworkSwitchesPatchingTime\":1162722818,\"estimatedStorageServerPatchingTime\":1075133602,\"totalEstimatedPatchingTime\":1510965337},\"customerContacts\":[{\"email\":\"dystkiiuxhqyud\"},{\"email\":\"o\"},{\"email\":\"rq\"},{\"email\":\"b\"}],\"provisioningState\":\"Failed\",\"lifecycleState\":\"MaintenanceInProgress\",\"shape\":\"yifqrvkdvjsllrmv\",\"ociUrl\":\"f\",\"cpuCount\":122021588,\"maxCpuCount\":1825333220,\"memorySizeInGbs\":500448783,\"maxMemoryInGbs\":608072417,\"dbNodeStorageSizeInGbs\":1948903121,\"maxDbNodeStorageSizeInGbs\":825397815,\"dataStorageSizeInTbs\":99.91485616589475,\"maxDataStorageInTbs\":80.49183536969151,\"dbServerVersion\":\"iqzbq\",\"storageServerVersion\":\"sovmyokacspkwl\",\"activatedStorageCount\":1196709774,\"additionalStorageCount\":1687920757,\"displayName\":\"pxjmflbvvnchr\",\"lastMaintenanceRunId\":\"ciwwzjuqkhr\",\"nextMaintenanceRunId\":\"jiwkuofoskghsau\",\"monthlyDbServerVersion\":\"mjmvxieduugidyjr\",\"monthlyStorageServerVersion\":\"byao\"},\"zones\":[\"e\"],\"location\":\"sonpclhocohs\",\"tags\":{\"ffeii\":\"vleggzfbuhfmvfax\"},\"id\":\"hl\",\"name\":\"m\",\"type\":\"zy\"}")
            .toObject(CloudExadataInfrastructureInner.class);
        Assertions.assertEquals("sonpclhocohs", model.location());
        Assertions.assertEquals("vleggzfbuhfmvfax", model.tags().get("ffeii"));
        Assertions.assertEquals(1593902435, model.properties().computeCount());
        Assertions.assertEquals(1490971149, model.properties().storageCount());
        Assertions.assertEquals(Preference.CUSTOM_PREFERENCE, model.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.SEPTEMBER, model.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(962649448, model.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.FRIDAY,
            model.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(2101673805, model.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(1170430043, model.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.NON_ROLLING, model.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(760240945, model.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertEquals(true, model.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertEquals(true, model.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("dystkiiuxhqyud", model.properties().customerContacts().get(0).email());
        Assertions.assertEquals("yifqrvkdvjsllrmv", model.properties().shape());
        Assertions.assertEquals("pxjmflbvvnchr", model.properties().displayName());
        Assertions.assertEquals("e", model.zones().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CloudExadataInfrastructureInner model = new CloudExadataInfrastructureInner().withLocation("sonpclhocohs")
            .withTags(mapOf("ffeii", "vleggzfbuhfmvfax"))
            .withProperties(new CloudExadataInfrastructureProperties().withComputeCount(1593902435)
                .withStorageCount(1490971149)
                .withMaintenanceWindow(new MaintenanceWindow().withPreference(Preference.CUSTOM_PREFERENCE)
                    .withMonths(
                        Arrays.asList(new Month().withName(MonthName.SEPTEMBER), new Month().withName(MonthName.JUNE),
                            new Month().withName(MonthName.JULY), new Month().withName(MonthName.MAY)))
                    .withWeeksOfMonth(Arrays.asList(962649448, 1285068717, 1627689194))
                    .withDaysOfWeek(Arrays.asList(new DayOfWeek().withName(DayOfWeekName.FRIDAY),
                        new DayOfWeek().withName(DayOfWeekName.SUNDAY), new DayOfWeek().withName(DayOfWeekName.FRIDAY)))
                    .withHoursOfDay(Arrays.asList(2101673805, 180468800, 512563876, 436585772))
                    .withLeadTimeInWeeks(1170430043)
                    .withPatchingMode(PatchingMode.NON_ROLLING)
                    .withCustomActionTimeoutInMins(760240945)
                    .withIsCustomActionTimeoutEnabled(true)
                    .withIsMonthlyPatchingEnabled(true))
                .withCustomerContacts(Arrays.asList(new CustomerContact().withEmail("dystkiiuxhqyud"),
                    new CustomerContact().withEmail("o"), new CustomerContact().withEmail("rq"),
                    new CustomerContact().withEmail("b")))
                .withShape("yifqrvkdvjsllrmv")
                .withDisplayName("pxjmflbvvnchr"))
            .withZones(Arrays.asList("e"));
        model = BinaryData.fromObject(model).toObject(CloudExadataInfrastructureInner.class);
        Assertions.assertEquals("sonpclhocohs", model.location());
        Assertions.assertEquals("vleggzfbuhfmvfax", model.tags().get("ffeii"));
        Assertions.assertEquals(1593902435, model.properties().computeCount());
        Assertions.assertEquals(1490971149, model.properties().storageCount());
        Assertions.assertEquals(Preference.CUSTOM_PREFERENCE, model.properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.SEPTEMBER, model.properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(962649448, model.properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.FRIDAY,
            model.properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(2101673805, model.properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(1170430043, model.properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.NON_ROLLING, model.properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(760240945, model.properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions.assertEquals(true, model.properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertEquals(true, model.properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("dystkiiuxhqyud", model.properties().customerContacts().get(0).email());
        Assertions.assertEquals("yifqrvkdvjsllrmv", model.properties().shape());
        Assertions.assertEquals("pxjmflbvvnchr", model.properties().displayName());
        Assertions.assertEquals("e", model.zones().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
