// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.oracledatabase.OracleDatabaseManager;
import com.azure.resourcemanager.oracledatabase.models.CloudExadataInfrastructure;
import com.azure.resourcemanager.oracledatabase.models.DayOfWeekName;
import com.azure.resourcemanager.oracledatabase.models.MonthName;
import com.azure.resourcemanager.oracledatabase.models.PatchingMode;
import com.azure.resourcemanager.oracledatabase.models.Preference;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CloudExadataInfrastructuresListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"definedFileSystemConfiguration\":[{\"isBackupPartition\":true,\"isResizable\":false,\"minSizeGb\":1632871841,\"mountPoint\":\"txfkfweg\"},{\"isBackupPartition\":false,\"isResizable\":true,\"minSizeGb\":756597053,\"mountPoint\":\"ucb\"},{\"isBackupPartition\":true,\"isResizable\":false,\"minSizeGb\":2010820897,\"mountPoint\":\"mcwsldrizetpwb\"}],\"ocid\":\"lllibph\",\"computeCount\":449888460,\"storageCount\":1515253868,\"totalStorageSizeInGbs\":739440726,\"availableStorageSizeInGbs\":223363577,\"timeCreated\":\"ankjpdnjzh\",\"lifecycleDetails\":\"oylhjlmuoyxprimr\",\"maintenanceWindow\":{\"preference\":\"CustomPreference\",\"months\":[{\"name\":\"July\"}],\"weeksOfMonth\":[1323964253,1372597728],\"daysOfWeek\":[{\"name\":\"Thursday\"}],\"hoursOfDay\":[1491198323,1672946681,605795253],\"leadTimeInWeeks\":1529136023,\"patchingMode\":\"NonRolling\",\"customActionTimeoutInMins\":1212726658,\"isCustomActionTimeoutEnabled\":false,\"isMonthlyPatchingEnabled\":true},\"estimatedPatchingTime\":{\"estimatedDbServerPatchingTime\":1221518768,\"estimatedNetworkSwitchesPatchingTime\":1150817005,\"estimatedStorageServerPatchingTime\":2139878069,\"totalEstimatedPatchingTime\":457716497},\"customerContacts\":[{\"email\":\"yjathwtzo\"},{\"email\":\"b\"},{\"email\":\"emwmdxmebwjs\"}],\"provisioningState\":\"Succeeded\",\"lifecycleState\":\"Failed\",\"shape\":\"lxveabfqx\",\"ociUrl\":\"wmqtibx\",\"cpuCount\":2042495225,\"maxCpuCount\":462307774,\"memorySizeInGbs\":460830566,\"maxMemoryInGbs\":1410442260,\"dbNodeStorageSizeInGbs\":747956494,\"maxDbNodeStorageSizeInGbs\":930197061,\"dataStorageSizeInTbs\":83.97233674042096,\"maxDataStorageInTbs\":12.647700579937604,\"dbServerVersion\":\"rsiee\",\"storageServerVersion\":\"ndzaapmudq\",\"activatedStorageCount\":1473376981,\"additionalStorageCount\":1760107744,\"displayName\":\"gp\",\"lastMaintenanceRunId\":\"udqwyxebeybpmzz\",\"nextMaintenanceRunId\":\"tffyaqit\",\"monthlyDbServerVersion\":\"heioqa\",\"monthlyStorageServerVersion\":\"v\",\"databaseServerType\":\"ufuqyrx\",\"storageServerType\":\"lcgqlsismj\",\"computeModel\":\"ECPU\"},\"zones\":[\"dgamquhiosrsj\",\"ivfcdisyirnx\",\"hcz\"],\"location\":\"rxzbujr\",\"tags\":{\"khgn\":\"qvwre\",\"piqywnc\":\"nzonzl\",\"zehtdhgb\":\"jtszcof\",\"reljeamur\":\"k\"},\"id\":\"zmlovuanash\",\"name\":\"xlpm\",\"type\":\"erbdk\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        OracleDatabaseManager manager = OracleDatabaseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<CloudExadataInfrastructure> response
            = manager.cloudExadataInfrastructures().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("rxzbujr", response.iterator().next().location());
        Assertions.assertEquals("qvwre", response.iterator().next().tags().get("khgn"));
        Assertions.assertEquals(449888460, response.iterator().next().properties().computeCount());
        Assertions.assertEquals(1515253868, response.iterator().next().properties().storageCount());
        Assertions.assertEquals(Preference.CUSTOM_PREFERENCE,
            response.iterator().next().properties().maintenanceWindow().preference());
        Assertions.assertEquals(MonthName.JULY,
            response.iterator().next().properties().maintenanceWindow().months().get(0).name());
        Assertions.assertEquals(1323964253,
            response.iterator().next().properties().maintenanceWindow().weeksOfMonth().get(0));
        Assertions.assertEquals(DayOfWeekName.THURSDAY,
            response.iterator().next().properties().maintenanceWindow().daysOfWeek().get(0).name());
        Assertions.assertEquals(1491198323,
            response.iterator().next().properties().maintenanceWindow().hoursOfDay().get(0));
        Assertions.assertEquals(1529136023,
            response.iterator().next().properties().maintenanceWindow().leadTimeInWeeks());
        Assertions.assertEquals(PatchingMode.NON_ROLLING,
            response.iterator().next().properties().maintenanceWindow().patchingMode());
        Assertions.assertEquals(1212726658,
            response.iterator().next().properties().maintenanceWindow().customActionTimeoutInMins());
        Assertions
            .assertFalse(response.iterator().next().properties().maintenanceWindow().isCustomActionTimeoutEnabled());
        Assertions.assertTrue(response.iterator().next().properties().maintenanceWindow().isMonthlyPatchingEnabled());
        Assertions.assertEquals("yjathwtzo", response.iterator().next().properties().customerContacts().get(0).email());
        Assertions.assertEquals("lxveabfqx", response.iterator().next().properties().shape());
        Assertions.assertEquals("gp", response.iterator().next().properties().displayName());
        Assertions.assertEquals("ufuqyrx", response.iterator().next().properties().databaseServerType());
        Assertions.assertEquals("lcgqlsismj", response.iterator().next().properties().storageServerType());
        Assertions.assertEquals("dgamquhiosrsj", response.iterator().next().zones().get(0));
    }
}
