// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.oracledatabase.OracleDatabaseManager;
import com.azure.resourcemanager.oracledatabase.models.NetworkAnchor;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NetworkAnchorsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"resourceAnchorId\":\"ntghyksarcdr\",\"provisioningState\":\"Provisioning\",\"vnetId\":\"u\",\"subnetId\":\"lzladltxkpbqh\",\"cidrBlock\":\"dqqjwkrhwzdano\",\"ociVcnId\":\"sgglmv\",\"ociVcnDnsLabel\":\"atuztjct\",\"ociSubnetId\":\"pvbkaehxsmzyg\",\"ociBackupCidrBlock\":\"wakwseivmakxhys\",\"isOracleToAzureDnsZoneSyncEnabled\":false,\"isOracleDnsListeningEndpointEnabled\":false,\"isOracleDnsForwardingEndpointEnabled\":true,\"dnsForwardingRules\":[{\"domainNames\":\"ect\",\"forwardingIpAddress\":\"tfjmskdchmaiub\"},{\"domainNames\":\"vlzw\",\"forwardingIpAddress\":\"vgmfalkzazmgok\"},{\"domainNames\":\"dgjqafkmkro\",\"forwardingIpAddress\":\"zrthqet\"},{\"domainNames\":\"pqrtvaoznqni\",\"forwardingIpAddress\":\"iezeagm\"}],\"dnsListeningEndpointAllowedCidrs\":\"it\",\"dnsListeningEndpointIpAddress\":\"gedhfpjstlzm\",\"dnsForwardingEndpointIpAddress\":\"syjdeolctae\",\"dnsForwardingRulesUrl\":\"syrled\",\"dnsListeningEndpointNsgRulesUrl\":\"ustbvtqigdx\",\"dnsForwardingEndpointNsgRulesUrl\":\"sgeafgfosehx\"},\"zones\":[\"xezppk\",\"waaeskyfjl\",\"zeqtoyrplixlajml\"],\"location\":\"quevham\",\"tags\":{\"mkekxpkzwaqxo\":\"gwb\"},\"id\":\"qovchiqbp\",\"name\":\"vf\",\"type\":\"dusztekxby\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        OracleDatabaseManager manager = OracleDatabaseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<NetworkAnchor> response
            = manager.networkAnchors().listByResourceGroup("tuadxkxeqb", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("quevham", response.iterator().next().location());
        Assertions.assertEquals("gwb", response.iterator().next().tags().get("mkekxpkzwaqxo"));
        Assertions.assertEquals("ntghyksarcdr", response.iterator().next().properties().resourceAnchorId());
        Assertions.assertEquals("lzladltxkpbqh", response.iterator().next().properties().subnetId());
        Assertions.assertEquals("atuztjct", response.iterator().next().properties().ociVcnDnsLabel());
        Assertions.assertEquals("wakwseivmakxhys", response.iterator().next().properties().ociBackupCidrBlock());
        Assertions.assertFalse(response.iterator().next().properties().isOracleToAzureDnsZoneSyncEnabled());
        Assertions.assertFalse(response.iterator().next().properties().isOracleDnsListeningEndpointEnabled());
        Assertions.assertTrue(response.iterator().next().properties().isOracleDnsForwardingEndpointEnabled());
        Assertions.assertEquals("ect",
            response.iterator().next().properties().dnsForwardingRules().get(0).domainNames());
        Assertions.assertEquals("tfjmskdchmaiub",
            response.iterator().next().properties().dnsForwardingRules().get(0).forwardingIpAddress());
        Assertions.assertEquals("it", response.iterator().next().properties().dnsListeningEndpointAllowedCidrs());
        Assertions.assertEquals("xezppk", response.iterator().next().zones().get(0));
    }
}
