// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.oracledatabase.OracleDatabaseManager;
import com.azure.resourcemanager.oracledatabase.models.VirtualNetworkAddress;
import com.azure.resourcemanager.oracledatabase.models.VirtualNetworkAddressProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class VirtualNetworkAddressesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"ipAddress\":\"iswskuk\",\"vmOcid\":\"asbvw\",\"ocid\":\"pkxkdtxfk\",\"domain\":\"lq\",\"lifecycleDetails\":\"w\",\"provisioningState\":\"Succeeded\",\"lifecycleState\":\"Provisioning\",\"timeAssigned\":\"2021-06-28T03:53:06Z\"},\"id\":\"gtywatmqaqkue\",\"name\":\"tgroesh\",\"type\":\"ygzc\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        OracleDatabaseManager manager = OracleDatabaseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        VirtualNetworkAddress response = manager.virtualNetworkAddresses()
            .define("ycblevpmcl")
            .withExistingCloudVmCluster("j", "bajbuscgduusi")
            .withProperties(new VirtualNetworkAddressProperties().withIpAddress("xkyxlzgs").withVmOcid("kzzltafhbzf"))
            .create();

        Assertions.assertEquals("iswskuk", response.properties().ipAddress());
        Assertions.assertEquals("asbvw", response.properties().vmOcid());
    }
}
