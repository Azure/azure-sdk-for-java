// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.oracledatabase.OracleDatabaseManager;
import com.azure.resourcemanager.oracledatabase.models.VirtualNetworkAddress;
import com.azure.resourcemanager.oracledatabase.models.VirtualNetworkAddressProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class VirtualNetworkAddressesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"ipAddress\":\"ghtuqfecjxey\",\"vmOcid\":\"uhxu\",\"ocid\":\"buew\",\"domain\":\"s\",\"lifecycleDetails\":\"jlxuz\",\"provisioningState\":\"Succeeded\",\"lifecycleState\":\"Terminating\",\"timeAssigned\":\"2021-07-24T18:32:54Z\"},\"id\":\"baqehgpdoh\",\"name\":\"jqatucoigebxn\",\"type\":\"nwfepbnwg\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        OracleDatabaseManager manager = OracleDatabaseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        VirtualNetworkAddress response = manager.virtualNetworkAddresses()
            .define("nszonwpngaj")
            .withExistingCloudVmCluster("rmlmuowo", "bauiropi")
            .withProperties(
                new VirtualNetworkAddressProperties().withIpAddress("ixjawrtm").withVmOcid("jmyccxlzhcoxov"))
            .create();

        Assertions.assertEquals("ghtuqfecjxey", response.properties().ipAddress());
        Assertions.assertEquals("uhxu", response.properties().vmOcid());
    }
}
