// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.oracledatabase.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.oracledatabase.models.ExadbVmClusterUpdate;
import com.azure.resourcemanager.oracledatabase.models.ExadbVmClusterUpdateProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExadbVmClusterUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExadbVmClusterUpdate model = BinaryData.fromString(
            "{\"zones\":[\"slhvnhlab\",\"q\",\"kkzjcjbtrga\",\"hvv\"],\"tags\":{\"oqbeitpkxzt\":\"xjjs\",\"pimaqxzhemjyh\":\"oobklftidgfcwq\",\"bawpfajnjwltlwt\":\"hujswtwkozzwcul\",\"uktalhsnvkcdmxz\":\"j\"},\"properties\":{\"nodeCount\":596889388}}")
            .toObject(ExadbVmClusterUpdate.class);
        Assertions.assertEquals("slhvnhlab", model.zones().get(0));
        Assertions.assertEquals("xjjs", model.tags().get("oqbeitpkxzt"));
        Assertions.assertEquals(596889388, model.properties().nodeCount());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExadbVmClusterUpdate model
            = new ExadbVmClusterUpdate().withZones(Arrays.asList("slhvnhlab", "q", "kkzjcjbtrga", "hvv"))
                .withTags(mapOf("oqbeitpkxzt", "xjjs", "pimaqxzhemjyh", "oobklftidgfcwq", "bawpfajnjwltlwt",
                    "hujswtwkozzwcul", "uktalhsnvkcdmxz", "j"))
                .withProperties(new ExadbVmClusterUpdateProperties().withNodeCount(596889388));
        model = BinaryData.fromObject(model).toObject(ExadbVmClusterUpdate.class);
        Assertions.assertEquals("slhvnhlab", model.zones().get(0));
        Assertions.assertEquals("xjjs", model.tags().get("oqbeitpkxzt"));
        Assertions.assertEquals(596889388, model.properties().nodeCount());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
