// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sphere.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.sphere.fluent.models.ImageInner;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The properties of deployment.
 */
@Fluent
public final class DeploymentProperties implements JsonSerializable<DeploymentProperties> {
    /*
     * Deployment ID
     */
    private String deploymentId;

    /*
     * Images deployed
     */
    private List<ImageInner> deployedImages;

    /*
     * Deployment date UTC
     */
    private OffsetDateTime deploymentDateUtc;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of DeploymentProperties class.
     */
    public DeploymentProperties() {
    }

    /**
     * Get the deploymentId property: Deployment ID.
     * 
     * @return the deploymentId value.
     */
    public String deploymentId() {
        return this.deploymentId;
    }

    /**
     * Set the deploymentId property: Deployment ID.
     * 
     * @param deploymentId the deploymentId value to set.
     * @return the DeploymentProperties object itself.
     */
    public DeploymentProperties withDeploymentId(String deploymentId) {
        this.deploymentId = deploymentId;
        return this;
    }

    /**
     * Get the deployedImages property: Images deployed.
     * 
     * @return the deployedImages value.
     */
    public List<ImageInner> deployedImages() {
        return this.deployedImages;
    }

    /**
     * Set the deployedImages property: Images deployed.
     * 
     * @param deployedImages the deployedImages value to set.
     * @return the DeploymentProperties object itself.
     */
    public DeploymentProperties withDeployedImages(List<ImageInner> deployedImages) {
        this.deployedImages = deployedImages;
        return this;
    }

    /**
     * Get the deploymentDateUtc property: Deployment date UTC.
     * 
     * @return the deploymentDateUtc value.
     */
    public OffsetDateTime deploymentDateUtc() {
        return this.deploymentDateUtc;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (deployedImages() != null) {
            deployedImages().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deploymentId", this.deploymentId);
        jsonWriter.writeArrayField("deployedImages", this.deployedImages,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeploymentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeploymentProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeploymentProperties.
     */
    public static DeploymentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeploymentProperties deserializedDeploymentProperties = new DeploymentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deploymentId".equals(fieldName)) {
                    deserializedDeploymentProperties.deploymentId = reader.getString();
                } else if ("deployedImages".equals(fieldName)) {
                    List<ImageInner> deployedImages = reader.readArray(reader1 -> ImageInner.fromJson(reader1));
                    deserializedDeploymentProperties.deployedImages = deployedImages;
                } else if ("deploymentDateUtc".equals(fieldName)) {
                    deserializedDeploymentProperties.deploymentDateUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDeploymentProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeploymentProperties;
        });
    }
}
