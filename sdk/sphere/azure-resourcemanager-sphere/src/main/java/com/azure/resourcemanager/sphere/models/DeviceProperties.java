// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sphere.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The properties of device.
 */
@Fluent
public final class DeviceProperties implements JsonSerializable<DeviceProperties> {
    /*
     * Device ID
     */
    private String deviceId;

    /*
     * SKU of the chip
     */
    private String chipSku;

    /*
     * OS version available for installation when update requested
     */
    private String lastAvailableOsVersion;

    /*
     * OS version running on device when update requested
     */
    private String lastInstalledOsVersion;

    /*
     * Time when update requested and new OS version available
     */
    private OffsetDateTime lastOsUpdateUtc;

    /*
     * Time when update was last requested
     */
    private OffsetDateTime lastUpdateRequestUtc;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of DeviceProperties class.
     */
    public DeviceProperties() {
    }

    /**
     * Get the deviceId property: Device ID.
     * 
     * @return the deviceId value.
     */
    public String deviceId() {
        return this.deviceId;
    }

    /**
     * Set the deviceId property: Device ID.
     * 
     * @param deviceId the deviceId value to set.
     * @return the DeviceProperties object itself.
     */
    public DeviceProperties withDeviceId(String deviceId) {
        this.deviceId = deviceId;
        return this;
    }

    /**
     * Get the chipSku property: SKU of the chip.
     * 
     * @return the chipSku value.
     */
    public String chipSku() {
        return this.chipSku;
    }

    /**
     * Get the lastAvailableOsVersion property: OS version available for installation when update requested.
     * 
     * @return the lastAvailableOsVersion value.
     */
    public String lastAvailableOsVersion() {
        return this.lastAvailableOsVersion;
    }

    /**
     * Get the lastInstalledOsVersion property: OS version running on device when update requested.
     * 
     * @return the lastInstalledOsVersion value.
     */
    public String lastInstalledOsVersion() {
        return this.lastInstalledOsVersion;
    }

    /**
     * Get the lastOsUpdateUtc property: Time when update requested and new OS version available.
     * 
     * @return the lastOsUpdateUtc value.
     */
    public OffsetDateTime lastOsUpdateUtc() {
        return this.lastOsUpdateUtc;
    }

    /**
     * Get the lastUpdateRequestUtc property: Time when update was last requested.
     * 
     * @return the lastUpdateRequestUtc value.
     */
    public OffsetDateTime lastUpdateRequestUtc() {
        return this.lastUpdateRequestUtc;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deviceId", this.deviceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeviceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeviceProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeviceProperties.
     */
    public static DeviceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeviceProperties deserializedDeviceProperties = new DeviceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deviceId".equals(fieldName)) {
                    deserializedDeviceProperties.deviceId = reader.getString();
                } else if ("chipSku".equals(fieldName)) {
                    deserializedDeviceProperties.chipSku = reader.getString();
                } else if ("lastAvailableOsVersion".equals(fieldName)) {
                    deserializedDeviceProperties.lastAvailableOsVersion = reader.getString();
                } else if ("lastInstalledOsVersion".equals(fieldName)) {
                    deserializedDeviceProperties.lastInstalledOsVersion = reader.getString();
                } else if ("lastOsUpdateUtc".equals(fieldName)) {
                    deserializedDeviceProperties.lastOsUpdateUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastUpdateRequestUtc".equals(fieldName)) {
                    deserializedDeviceProperties.lastUpdateRequestUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDeviceProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeviceProperties;
        });
    }
}
