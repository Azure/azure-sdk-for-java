// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sphere.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.sphere.fluent.models.ImageInner;
import com.azure.resourcemanager.sphere.models.Image;
import com.azure.resourcemanager.sphere.models.ImageProperties;

public final class ImageImpl implements Image, Image.Definition, Image.Update {
    private ImageInner innerObject;

    private final com.azure.resourcemanager.sphere.AzureSphereManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public ImageProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ImageInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.sphere.AzureSphereManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String catalogName;

    private String imageName;

    public ImageImpl withExistingCatalog(String resourceGroupName, String catalogName) {
        this.resourceGroupName = resourceGroupName;
        this.catalogName = catalogName;
        return this;
    }

    public Image create() {
        this.innerObject = serviceManager.serviceClient().getImages().createOrUpdate(resourceGroupName, catalogName,
            imageName, this.innerModel(), Context.NONE);
        return this;
    }

    public Image create(Context context) {
        this.innerObject = serviceManager.serviceClient().getImages().createOrUpdate(resourceGroupName, catalogName,
            imageName, this.innerModel(), context);
        return this;
    }

    ImageImpl(String name, com.azure.resourcemanager.sphere.AzureSphereManager serviceManager) {
        this.innerObject = new ImageInner();
        this.serviceManager = serviceManager;
        this.imageName = name;
    }

    public ImageImpl update() {
        return this;
    }

    public Image apply() {
        this.innerObject = serviceManager.serviceClient().getImages().createOrUpdate(resourceGroupName, catalogName,
            imageName, this.innerModel(), Context.NONE);
        return this;
    }

    public Image apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getImages().createOrUpdate(resourceGroupName, catalogName,
            imageName, this.innerModel(), context);
        return this;
    }

    ImageImpl(ImageInner innerObject, com.azure.resourcemanager.sphere.AzureSphereManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.catalogName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "catalogs");
        this.imageName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "images");
    }

    public Image refresh() {
        this.innerObject = serviceManager.serviceClient().getImages()
            .getWithResponse(resourceGroupName, catalogName, imageName, Context.NONE).getValue();
        return this;
    }

    public Image refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getImages()
            .getWithResponse(resourceGroupName, catalogName, imageName, context).getValue();
        return this;
    }

    public ImageImpl withProperties(ImageProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
