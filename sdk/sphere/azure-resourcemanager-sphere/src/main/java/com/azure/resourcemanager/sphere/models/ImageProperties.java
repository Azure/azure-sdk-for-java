// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sphere.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of image.
 */
@Fluent
public final class ImageProperties implements JsonSerializable<ImageProperties> {
    /*
     * Image as a UTF-8 encoded base 64 string on image create. This field contains the image URI on image reads.
     */
    private String image;

    /*
     * Image ID
     */
    private String imageId;

    /*
     * Image name
     */
    private String imageName;

    /*
     * Regional data boundary for an image
     */
    private RegionalDataBoundary regionalDataBoundary;

    /*
     * Location the image
     */
    private String uri;

    /*
     * The image description.
     */
    private String description;

    /*
     * The image component id.
     */
    private String componentId;

    /*
     * The image type.
     */
    private ImageType imageType;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of ImageProperties class.
     */
    public ImageProperties() {
    }

    /**
     * Get the image property: Image as a UTF-8 encoded base 64 string on image create. This field contains the image
     * URI on image reads.
     * 
     * @return the image value.
     */
    public String image() {
        return this.image;
    }

    /**
     * Set the image property: Image as a UTF-8 encoded base 64 string on image create. This field contains the image
     * URI on image reads.
     * 
     * @param image the image value to set.
     * @return the ImageProperties object itself.
     */
    public ImageProperties withImage(String image) {
        this.image = image;
        return this;
    }

    /**
     * Get the imageId property: Image ID.
     * 
     * @return the imageId value.
     */
    public String imageId() {
        return this.imageId;
    }

    /**
     * Set the imageId property: Image ID.
     * 
     * @param imageId the imageId value to set.
     * @return the ImageProperties object itself.
     */
    public ImageProperties withImageId(String imageId) {
        this.imageId = imageId;
        return this;
    }

    /**
     * Get the imageName property: Image name.
     * 
     * @return the imageName value.
     */
    public String imageName() {
        return this.imageName;
    }

    /**
     * Get the regionalDataBoundary property: Regional data boundary for an image.
     * 
     * @return the regionalDataBoundary value.
     */
    public RegionalDataBoundary regionalDataBoundary() {
        return this.regionalDataBoundary;
    }

    /**
     * Set the regionalDataBoundary property: Regional data boundary for an image.
     * 
     * @param regionalDataBoundary the regionalDataBoundary value to set.
     * @return the ImageProperties object itself.
     */
    public ImageProperties withRegionalDataBoundary(RegionalDataBoundary regionalDataBoundary) {
        this.regionalDataBoundary = regionalDataBoundary;
        return this;
    }

    /**
     * Get the uri property: Location the image.
     * 
     * @return the uri value.
     */
    public String uri() {
        return this.uri;
    }

    /**
     * Get the description property: The image description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the componentId property: The image component id.
     * 
     * @return the componentId value.
     */
    public String componentId() {
        return this.componentId;
    }

    /**
     * Get the imageType property: The image type.
     * 
     * @return the imageType value.
     */
    public ImageType imageType() {
        return this.imageType;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("image", this.image);
        jsonWriter.writeStringField("imageId", this.imageId);
        jsonWriter.writeStringField("regionalDataBoundary",
            this.regionalDataBoundary == null ? null : this.regionalDataBoundary.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImageProperties.
     */
    public static ImageProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageProperties deserializedImageProperties = new ImageProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("image".equals(fieldName)) {
                    deserializedImageProperties.image = reader.getString();
                } else if ("imageId".equals(fieldName)) {
                    deserializedImageProperties.imageId = reader.getString();
                } else if ("imageName".equals(fieldName)) {
                    deserializedImageProperties.imageName = reader.getString();
                } else if ("regionalDataBoundary".equals(fieldName)) {
                    deserializedImageProperties.regionalDataBoundary
                        = RegionalDataBoundary.fromString(reader.getString());
                } else if ("uri".equals(fieldName)) {
                    deserializedImageProperties.uri = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedImageProperties.description = reader.getString();
                } else if ("componentId".equals(fieldName)) {
                    deserializedImageProperties.componentId = reader.getString();
                } else if ("imageType".equals(fieldName)) {
                    deserializedImageProperties.imageType = ImageType.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedImageProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageProperties;
        });
    }
}
