// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sphere.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sphere.fluent.CertificatesClient;
import com.azure.resourcemanager.sphere.fluent.models.CertificateChainResponseInner;
import com.azure.resourcemanager.sphere.fluent.models.CertificateInner;
import com.azure.resourcemanager.sphere.fluent.models.ProofOfPossessionNonceResponseInner;
import com.azure.resourcemanager.sphere.models.Certificate;
import com.azure.resourcemanager.sphere.models.CertificateChainResponse;
import com.azure.resourcemanager.sphere.models.Certificates;
import com.azure.resourcemanager.sphere.models.ProofOfPossessionNonceRequest;
import com.azure.resourcemanager.sphere.models.ProofOfPossessionNonceResponse;

public final class CertificatesImpl implements Certificates {
    private static final ClientLogger LOGGER = new ClientLogger(CertificatesImpl.class);

    private final CertificatesClient innerClient;

    private final com.azure.resourcemanager.sphere.AzureSphereManager serviceManager;

    public CertificatesImpl(
        CertificatesClient innerClient, com.azure.resourcemanager.sphere.AzureSphereManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Certificate> listByCatalog(String resourceGroupName, String catalogName) {
        PagedIterable<CertificateInner> inner = this.serviceClient().listByCatalog(resourceGroupName, catalogName);
        return Utils.mapPage(inner, inner1 -> new CertificateImpl(inner1, this.manager()));
    }

    public PagedIterable<Certificate> listByCatalog(
        String resourceGroupName,
        String catalogName,
        String filter,
        Integer top,
        Integer skip,
        Integer maxpagesize,
        Context context) {
        PagedIterable<CertificateInner> inner =
            this.serviceClient().listByCatalog(resourceGroupName, catalogName, filter, top, skip, maxpagesize, context);
        return Utils.mapPage(inner, inner1 -> new CertificateImpl(inner1, this.manager()));
    }

    public Response<Certificate> getWithResponse(
        String resourceGroupName, String catalogName, String serialNumber, Context context) {
        Response<CertificateInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, catalogName, serialNumber, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CertificateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Certificate get(String resourceGroupName, String catalogName, String serialNumber) {
        CertificateInner inner = this.serviceClient().get(resourceGroupName, catalogName, serialNumber);
        if (inner != null) {
            return new CertificateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CertificateChainResponse> retrieveCertChainWithResponse(
        String resourceGroupName, String catalogName, String serialNumber, Context context) {
        Response<CertificateChainResponseInner> inner =
            this.serviceClient().retrieveCertChainWithResponse(resourceGroupName, catalogName, serialNumber, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CertificateChainResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CertificateChainResponse retrieveCertChain(
        String resourceGroupName, String catalogName, String serialNumber) {
        CertificateChainResponseInner inner =
            this.serviceClient().retrieveCertChain(resourceGroupName, catalogName, serialNumber);
        if (inner != null) {
            return new CertificateChainResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ProofOfPossessionNonceResponse> retrieveProofOfPossessionNonceWithResponse(
        String resourceGroupName,
        String catalogName,
        String serialNumber,
        ProofOfPossessionNonceRequest proofOfPossessionNonceRequest,
        Context context) {
        Response<ProofOfPossessionNonceResponseInner> inner =
            this
                .serviceClient()
                .retrieveProofOfPossessionNonceWithResponse(
                    resourceGroupName, catalogName, serialNumber, proofOfPossessionNonceRequest, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ProofOfPossessionNonceResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ProofOfPossessionNonceResponse retrieveProofOfPossessionNonce(
        String resourceGroupName,
        String catalogName,
        String serialNumber,
        ProofOfPossessionNonceRequest proofOfPossessionNonceRequest) {
        ProofOfPossessionNonceResponseInner inner =
            this
                .serviceClient()
                .retrieveProofOfPossessionNonce(
                    resourceGroupName, catalogName, serialNumber, proofOfPossessionNonceRequest);
        if (inner != null) {
            return new ProofOfPossessionNonceResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private CertificatesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sphere.AzureSphereManager manager() {
        return this.serviceManager;
    }
}
