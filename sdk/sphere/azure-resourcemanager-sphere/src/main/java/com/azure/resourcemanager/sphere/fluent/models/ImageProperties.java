// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sphere.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.sphere.models.ImageType;
import com.azure.resourcemanager.sphere.models.ProvisioningState;
import com.azure.resourcemanager.sphere.models.RegionalDataBoundary;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The properties of image. */
@Fluent
public final class ImageProperties {
    /*
     * Image as a UTF-8 encoded base 64 string on image create. This field contains the image URI on image reads.
     */
    @JsonProperty(value = "image")
    private String image;

    /*
     * Image ID
     */
    @JsonProperty(value = "imageId")
    private String imageId;

    /*
     * Image name
     */
    @JsonProperty(value = "imageName", access = JsonProperty.Access.WRITE_ONLY)
    private String imageName;

    /*
     * Regional data boundary for an image
     */
    @JsonProperty(value = "regionalDataBoundary")
    private RegionalDataBoundary regionalDataBoundary;

    /*
     * Location the image
     */
    @JsonProperty(value = "uri", access = JsonProperty.Access.WRITE_ONLY)
    private String uri;

    /*
     * The image description.
     */
    @JsonProperty(value = "description", access = JsonProperty.Access.WRITE_ONLY)
    private String description;

    /*
     * The image component id.
     */
    @JsonProperty(value = "componentId", access = JsonProperty.Access.WRITE_ONLY)
    private String componentId;

    /*
     * The image type.
     */
    @JsonProperty(value = "imageType", access = JsonProperty.Access.WRITE_ONLY)
    private ImageType imageType;

    /*
     * The status of the last operation.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /** Creates an instance of ImageProperties class. */
    public ImageProperties() {
    }

    /**
     * Get the image property: Image as a UTF-8 encoded base 64 string on image create. This field contains the image
     * URI on image reads.
     *
     * @return the image value.
     */
    public String image() {
        return this.image;
    }

    /**
     * Set the image property: Image as a UTF-8 encoded base 64 string on image create. This field contains the image
     * URI on image reads.
     *
     * @param image the image value to set.
     * @return the ImageProperties object itself.
     */
    public ImageProperties withImage(String image) {
        this.image = image;
        return this;
    }

    /**
     * Get the imageId property: Image ID.
     *
     * @return the imageId value.
     */
    public String imageId() {
        return this.imageId;
    }

    /**
     * Set the imageId property: Image ID.
     *
     * @param imageId the imageId value to set.
     * @return the ImageProperties object itself.
     */
    public ImageProperties withImageId(String imageId) {
        this.imageId = imageId;
        return this;
    }

    /**
     * Get the imageName property: Image name.
     *
     * @return the imageName value.
     */
    public String imageName() {
        return this.imageName;
    }

    /**
     * Get the regionalDataBoundary property: Regional data boundary for an image.
     *
     * @return the regionalDataBoundary value.
     */
    public RegionalDataBoundary regionalDataBoundary() {
        return this.regionalDataBoundary;
    }

    /**
     * Set the regionalDataBoundary property: Regional data boundary for an image.
     *
     * @param regionalDataBoundary the regionalDataBoundary value to set.
     * @return the ImageProperties object itself.
     */
    public ImageProperties withRegionalDataBoundary(RegionalDataBoundary regionalDataBoundary) {
        this.regionalDataBoundary = regionalDataBoundary;
        return this;
    }

    /**
     * Get the uri property: Location the image.
     *
     * @return the uri value.
     */
    public String uri() {
        return this.uri;
    }

    /**
     * Get the description property: The image description.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the componentId property: The image component id.
     *
     * @return the componentId value.
     */
    public String componentId() {
        return this.componentId;
    }

    /**
     * Get the imageType property: The image type.
     *
     * @return the imageType value.
     */
    public ImageType imageType() {
        return this.imageType;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
