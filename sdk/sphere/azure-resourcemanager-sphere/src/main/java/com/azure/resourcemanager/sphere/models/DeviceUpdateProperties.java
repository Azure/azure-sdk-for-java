// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sphere.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The updatable properties of the Device.
 */
@Fluent
public final class DeviceUpdateProperties implements JsonSerializable<DeviceUpdateProperties> {
    /*
     * Device group id
     */
    private String deviceGroupId;

    /**
     * Creates an instance of DeviceUpdateProperties class.
     */
    public DeviceUpdateProperties() {
    }

    /**
     * Get the deviceGroupId property: Device group id.
     * 
     * @return the deviceGroupId value.
     */
    public String deviceGroupId() {
        return this.deviceGroupId;
    }

    /**
     * Set the deviceGroupId property: Device group id.
     * 
     * @param deviceGroupId the deviceGroupId value to set.
     * @return the DeviceUpdateProperties object itself.
     */
    public DeviceUpdateProperties withDeviceGroupId(String deviceGroupId) {
        this.deviceGroupId = deviceGroupId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deviceGroupId", this.deviceGroupId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeviceUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeviceUpdateProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeviceUpdateProperties.
     */
    public static DeviceUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeviceUpdateProperties deserializedDeviceUpdateProperties = new DeviceUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deviceGroupId".equals(fieldName)) {
                    deserializedDeviceUpdateProperties.deviceGroupId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeviceUpdateProperties;
        });
    }
}
