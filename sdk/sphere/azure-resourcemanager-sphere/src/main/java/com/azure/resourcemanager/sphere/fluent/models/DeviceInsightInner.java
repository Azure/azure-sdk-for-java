// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sphere.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Device insight report.
 */
@Fluent
public final class DeviceInsightInner implements JsonSerializable<DeviceInsightInner> {
    /*
     * Device ID
     */
    private String deviceId;

    /*
     * Event description
     */
    private String description;

    /*
     * Event start timestamp
     */
    private OffsetDateTime startTimestampUtc;

    /*
     * Event end timestamp
     */
    private OffsetDateTime endTimestampUtc;

    /*
     * Event category
     */
    private String eventCategory;

    /*
     * Event class
     */
    private String eventClass;

    /*
     * Event type
     */
    private String eventType;

    /*
     * Event count
     */
    private int eventCount;

    /**
     * Creates an instance of DeviceInsightInner class.
     */
    public DeviceInsightInner() {
    }

    /**
     * Get the deviceId property: Device ID.
     * 
     * @return the deviceId value.
     */
    public String deviceId() {
        return this.deviceId;
    }

    /**
     * Set the deviceId property: Device ID.
     * 
     * @param deviceId the deviceId value to set.
     * @return the DeviceInsightInner object itself.
     */
    public DeviceInsightInner withDeviceId(String deviceId) {
        this.deviceId = deviceId;
        return this;
    }

    /**
     * Get the description property: Event description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Event description.
     * 
     * @param description the description value to set.
     * @return the DeviceInsightInner object itself.
     */
    public DeviceInsightInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the startTimestampUtc property: Event start timestamp.
     * 
     * @return the startTimestampUtc value.
     */
    public OffsetDateTime startTimestampUtc() {
        return this.startTimestampUtc;
    }

    /**
     * Set the startTimestampUtc property: Event start timestamp.
     * 
     * @param startTimestampUtc the startTimestampUtc value to set.
     * @return the DeviceInsightInner object itself.
     */
    public DeviceInsightInner withStartTimestampUtc(OffsetDateTime startTimestampUtc) {
        this.startTimestampUtc = startTimestampUtc;
        return this;
    }

    /**
     * Get the endTimestampUtc property: Event end timestamp.
     * 
     * @return the endTimestampUtc value.
     */
    public OffsetDateTime endTimestampUtc() {
        return this.endTimestampUtc;
    }

    /**
     * Set the endTimestampUtc property: Event end timestamp.
     * 
     * @param endTimestampUtc the endTimestampUtc value to set.
     * @return the DeviceInsightInner object itself.
     */
    public DeviceInsightInner withEndTimestampUtc(OffsetDateTime endTimestampUtc) {
        this.endTimestampUtc = endTimestampUtc;
        return this;
    }

    /**
     * Get the eventCategory property: Event category.
     * 
     * @return the eventCategory value.
     */
    public String eventCategory() {
        return this.eventCategory;
    }

    /**
     * Set the eventCategory property: Event category.
     * 
     * @param eventCategory the eventCategory value to set.
     * @return the DeviceInsightInner object itself.
     */
    public DeviceInsightInner withEventCategory(String eventCategory) {
        this.eventCategory = eventCategory;
        return this;
    }

    /**
     * Get the eventClass property: Event class.
     * 
     * @return the eventClass value.
     */
    public String eventClass() {
        return this.eventClass;
    }

    /**
     * Set the eventClass property: Event class.
     * 
     * @param eventClass the eventClass value to set.
     * @return the DeviceInsightInner object itself.
     */
    public DeviceInsightInner withEventClass(String eventClass) {
        this.eventClass = eventClass;
        return this;
    }

    /**
     * Get the eventType property: Event type.
     * 
     * @return the eventType value.
     */
    public String eventType() {
        return this.eventType;
    }

    /**
     * Set the eventType property: Event type.
     * 
     * @param eventType the eventType value to set.
     * @return the DeviceInsightInner object itself.
     */
    public DeviceInsightInner withEventType(String eventType) {
        this.eventType = eventType;
        return this;
    }

    /**
     * Get the eventCount property: Event count.
     * 
     * @return the eventCount value.
     */
    public int eventCount() {
        return this.eventCount;
    }

    /**
     * Set the eventCount property: Event count.
     * 
     * @param eventCount the eventCount value to set.
     * @return the DeviceInsightInner object itself.
     */
    public DeviceInsightInner withEventCount(int eventCount) {
        this.eventCount = eventCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (deviceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property deviceId in model DeviceInsightInner"));
        }
        if (description() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property description in model DeviceInsightInner"));
        }
        if (startTimestampUtc() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property startTimestampUtc in model DeviceInsightInner"));
        }
        if (endTimestampUtc() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property endTimestampUtc in model DeviceInsightInner"));
        }
        if (eventCategory() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property eventCategory in model DeviceInsightInner"));
        }
        if (eventClass() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property eventClass in model DeviceInsightInner"));
        }
        if (eventType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property eventType in model DeviceInsightInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DeviceInsightInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deviceId", this.deviceId);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("startTimestampUtc",
            this.startTimestampUtc == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTimestampUtc));
        jsonWriter.writeStringField("endTimestampUtc",
            this.endTimestampUtc == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTimestampUtc));
        jsonWriter.writeStringField("eventCategory", this.eventCategory);
        jsonWriter.writeStringField("eventClass", this.eventClass);
        jsonWriter.writeStringField("eventType", this.eventType);
        jsonWriter.writeIntField("eventCount", this.eventCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeviceInsightInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeviceInsightInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeviceInsightInner.
     */
    public static DeviceInsightInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeviceInsightInner deserializedDeviceInsightInner = new DeviceInsightInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deviceId".equals(fieldName)) {
                    deserializedDeviceInsightInner.deviceId = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedDeviceInsightInner.description = reader.getString();
                } else if ("startTimestampUtc".equals(fieldName)) {
                    deserializedDeviceInsightInner.startTimestampUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTimestampUtc".equals(fieldName)) {
                    deserializedDeviceInsightInner.endTimestampUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("eventCategory".equals(fieldName)) {
                    deserializedDeviceInsightInner.eventCategory = reader.getString();
                } else if ("eventClass".equals(fieldName)) {
                    deserializedDeviceInsightInner.eventClass = reader.getString();
                } else if ("eventType".equals(fieldName)) {
                    deserializedDeviceInsightInner.eventType = reader.getString();
                } else if ("eventCount".equals(fieldName)) {
                    deserializedDeviceInsightInner.eventCount = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeviceInsightInner;
        });
    }
}
