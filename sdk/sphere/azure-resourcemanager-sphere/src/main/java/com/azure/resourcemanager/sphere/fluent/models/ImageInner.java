// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sphere.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.resourcemanager.sphere.models.ImageType;
import com.azure.resourcemanager.sphere.models.ProvisioningState;
import com.azure.resourcemanager.sphere.models.RegionalDataBoundary;
import com.fasterxml.jackson.annotation.JsonProperty;

/** An image resource belonging to a catalog resource. */
@Fluent
public final class ImageInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    @JsonProperty(value = "properties")
    private ImageProperties innerProperties;

    /** Creates an instance of ImageInner class. */
    public ImageInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     *
     * @return the innerProperties value.
     */
    private ImageProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the image property: Image as a UTF-8 encoded base 64 string on image create. This field contains the image
     * URI on image reads.
     *
     * @return the image value.
     */
    public String image() {
        return this.innerProperties() == null ? null : this.innerProperties().image();
    }

    /**
     * Set the image property: Image as a UTF-8 encoded base 64 string on image create. This field contains the image
     * URI on image reads.
     *
     * @param image the image value to set.
     * @return the ImageInner object itself.
     */
    public ImageInner withImage(String image) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ImageProperties();
        }
        this.innerProperties().withImage(image);
        return this;
    }

    /**
     * Get the imageId property: Image ID.
     *
     * @return the imageId value.
     */
    public String imageId() {
        return this.innerProperties() == null ? null : this.innerProperties().imageId();
    }

    /**
     * Set the imageId property: Image ID.
     *
     * @param imageId the imageId value to set.
     * @return the ImageInner object itself.
     */
    public ImageInner withImageId(String imageId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ImageProperties();
        }
        this.innerProperties().withImageId(imageId);
        return this;
    }

    /**
     * Get the imageName property: Image name.
     *
     * @return the imageName value.
     */
    public String imageName() {
        return this.innerProperties() == null ? null : this.innerProperties().imageName();
    }

    /**
     * Get the regionalDataBoundary property: Regional data boundary for an image.
     *
     * @return the regionalDataBoundary value.
     */
    public RegionalDataBoundary regionalDataBoundary() {
        return this.innerProperties() == null ? null : this.innerProperties().regionalDataBoundary();
    }

    /**
     * Set the regionalDataBoundary property: Regional data boundary for an image.
     *
     * @param regionalDataBoundary the regionalDataBoundary value to set.
     * @return the ImageInner object itself.
     */
    public ImageInner withRegionalDataBoundary(RegionalDataBoundary regionalDataBoundary) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ImageProperties();
        }
        this.innerProperties().withRegionalDataBoundary(regionalDataBoundary);
        return this;
    }

    /**
     * Get the uri property: Location the image.
     *
     * @return the uri value.
     */
    public String uri() {
        return this.innerProperties() == null ? null : this.innerProperties().uri();
    }

    /**
     * Get the description property: The image description.
     *
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Get the componentId property: The image component id.
     *
     * @return the componentId value.
     */
    public String componentId() {
        return this.innerProperties() == null ? null : this.innerProperties().componentId();
    }

    /**
     * Get the imageType property: The image type.
     *
     * @return the imageType value.
     */
    public ImageType imageType() {
        return this.innerProperties() == null ? null : this.innerProperties().imageType();
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
