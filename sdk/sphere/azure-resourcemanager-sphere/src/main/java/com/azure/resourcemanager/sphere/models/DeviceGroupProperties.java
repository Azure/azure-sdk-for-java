// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sphere.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of deviceGroup.
 */
@Fluent
public final class DeviceGroupProperties implements JsonSerializable<DeviceGroupProperties> {
    /*
     * Description of the device group.
     */
    private String description;

    /*
     * Operating system feed type of the device group.
     */
    private OSFeedType osFeedType;

    /*
     * Update policy of the device group.
     */
    private UpdatePolicy updatePolicy;

    /*
     * Flag to define if the user allows for crash dump collection.
     */
    private AllowCrashDumpCollection allowCrashDumpsCollection;

    /*
     * Regional data boundary for the device group.
     */
    private RegionalDataBoundary regionalDataBoundary;

    /*
     * Deployment status for the device group.
     */
    private Boolean hasDeployment;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of DeviceGroupProperties class.
     */
    public DeviceGroupProperties() {
    }

    /**
     * Get the description property: Description of the device group.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the device group.
     * 
     * @param description the description value to set.
     * @return the DeviceGroupProperties object itself.
     */
    public DeviceGroupProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the osFeedType property: Operating system feed type of the device group.
     * 
     * @return the osFeedType value.
     */
    public OSFeedType osFeedType() {
        return this.osFeedType;
    }

    /**
     * Set the osFeedType property: Operating system feed type of the device group.
     * 
     * @param osFeedType the osFeedType value to set.
     * @return the DeviceGroupProperties object itself.
     */
    public DeviceGroupProperties withOsFeedType(OSFeedType osFeedType) {
        this.osFeedType = osFeedType;
        return this;
    }

    /**
     * Get the updatePolicy property: Update policy of the device group.
     * 
     * @return the updatePolicy value.
     */
    public UpdatePolicy updatePolicy() {
        return this.updatePolicy;
    }

    /**
     * Set the updatePolicy property: Update policy of the device group.
     * 
     * @param updatePolicy the updatePolicy value to set.
     * @return the DeviceGroupProperties object itself.
     */
    public DeviceGroupProperties withUpdatePolicy(UpdatePolicy updatePolicy) {
        this.updatePolicy = updatePolicy;
        return this;
    }

    /**
     * Get the allowCrashDumpsCollection property: Flag to define if the user allows for crash dump collection.
     * 
     * @return the allowCrashDumpsCollection value.
     */
    public AllowCrashDumpCollection allowCrashDumpsCollection() {
        return this.allowCrashDumpsCollection;
    }

    /**
     * Set the allowCrashDumpsCollection property: Flag to define if the user allows for crash dump collection.
     * 
     * @param allowCrashDumpsCollection the allowCrashDumpsCollection value to set.
     * @return the DeviceGroupProperties object itself.
     */
    public DeviceGroupProperties withAllowCrashDumpsCollection(AllowCrashDumpCollection allowCrashDumpsCollection) {
        this.allowCrashDumpsCollection = allowCrashDumpsCollection;
        return this;
    }

    /**
     * Get the regionalDataBoundary property: Regional data boundary for the device group.
     * 
     * @return the regionalDataBoundary value.
     */
    public RegionalDataBoundary regionalDataBoundary() {
        return this.regionalDataBoundary;
    }

    /**
     * Set the regionalDataBoundary property: Regional data boundary for the device group.
     * 
     * @param regionalDataBoundary the regionalDataBoundary value to set.
     * @return the DeviceGroupProperties object itself.
     */
    public DeviceGroupProperties withRegionalDataBoundary(RegionalDataBoundary regionalDataBoundary) {
        this.regionalDataBoundary = regionalDataBoundary;
        return this;
    }

    /**
     * Get the hasDeployment property: Deployment status for the device group.
     * 
     * @return the hasDeployment value.
     */
    public Boolean hasDeployment() {
        return this.hasDeployment;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("osFeedType", this.osFeedType == null ? null : this.osFeedType.toString());
        jsonWriter.writeStringField("updatePolicy", this.updatePolicy == null ? null : this.updatePolicy.toString());
        jsonWriter.writeStringField("allowCrashDumpsCollection",
            this.allowCrashDumpsCollection == null ? null : this.allowCrashDumpsCollection.toString());
        jsonWriter.writeStringField("regionalDataBoundary",
            this.regionalDataBoundary == null ? null : this.regionalDataBoundary.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeviceGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeviceGroupProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeviceGroupProperties.
     */
    public static DeviceGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeviceGroupProperties deserializedDeviceGroupProperties = new DeviceGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedDeviceGroupProperties.description = reader.getString();
                } else if ("osFeedType".equals(fieldName)) {
                    deserializedDeviceGroupProperties.osFeedType = OSFeedType.fromString(reader.getString());
                } else if ("updatePolicy".equals(fieldName)) {
                    deserializedDeviceGroupProperties.updatePolicy = UpdatePolicy.fromString(reader.getString());
                } else if ("allowCrashDumpsCollection".equals(fieldName)) {
                    deserializedDeviceGroupProperties.allowCrashDumpsCollection
                        = AllowCrashDumpCollection.fromString(reader.getString());
                } else if ("regionalDataBoundary".equals(fieldName)) {
                    deserializedDeviceGroupProperties.regionalDataBoundary
                        = RegionalDataBoundary.fromString(reader.getString());
                } else if ("hasDeployment".equals(fieldName)) {
                    deserializedDeviceGroupProperties.hasDeployment = reader.getNullable(JsonReader::getBoolean);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDeviceGroupProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeviceGroupProperties;
        });
    }
}
