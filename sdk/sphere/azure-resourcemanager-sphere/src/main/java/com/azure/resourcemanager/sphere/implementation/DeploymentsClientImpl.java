// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sphere.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.sphere.fluent.DeploymentsClient;
import com.azure.resourcemanager.sphere.fluent.models.DeploymentInner;
import com.azure.resourcemanager.sphere.models.DeploymentListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in DeploymentsClient. */
public final class DeploymentsClientImpl implements DeploymentsClient {
    /** The proxy service used to perform REST calls. */
    private final DeploymentsService service;

    /** The service client containing this operation class. */
    private final AzureSphereManagementClientImpl client;

    /**
     * Initializes an instance of DeploymentsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    DeploymentsClientImpl(AzureSphereManagementClientImpl client) {
        this.service =
            RestProxy.create(DeploymentsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureSphereManagementClientDeployments to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureSphereManagemen")
    public interface DeploymentsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/products/{productName}/deviceGroups/{deviceGroupName}/deployments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeploymentListResult>> listByDeviceGroup(
            @HostParam("$host") String endpoint,
            @QueryParam("$filter") String filter,
            @QueryParam("$top") Integer top,
            @QueryParam("$skip") Integer skip,
            @QueryParam("$maxpagesize") Integer maxpagesize,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("catalogName") String catalogName,
            @PathParam("productName") String productName,
            @PathParam("deviceGroupName") String deviceGroupName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/products/{productName}/deviceGroups/{deviceGroupName}/deployments/{deploymentName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeploymentInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("catalogName") String catalogName,
            @PathParam("productName") String productName,
            @PathParam("deviceGroupName") String deviceGroupName,
            @PathParam("deploymentName") String deploymentName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/products/{productName}/deviceGroups/{deviceGroupName}/deployments/{deploymentName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("catalogName") String catalogName,
            @PathParam("productName") String productName,
            @PathParam("deviceGroupName") String deviceGroupName,
            @PathParam("deploymentName") String deploymentName,
            @BodyParam("application/json") DeploymentInner resource,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/products/{productName}/deviceGroups/{deviceGroupName}/deployments/{deploymentName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("catalogName") String catalogName,
            @PathParam("productName") String productName,
            @PathParam("deviceGroupName") String deviceGroupName,
            @PathParam("deploymentName") String deploymentName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeploymentListResult>> listByDeviceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * List Deployment resources by DeviceGroup. '.default' and '.unassigned' are system defined values and cannot be
     * used for product or device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param filter Filter the result list using the given expression.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxpagesize The maximum number of result items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Deployment list operation along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeploymentInner>> listByDeviceGroupSinglePageAsync(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String filter,
        Integer top,
        Integer skip,
        Integer maxpagesize) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (catalogName == null) {
            return Mono.error(new IllegalArgumentException("Parameter catalogName is required and cannot be null."));
        }
        if (productName == null) {
            return Mono.error(new IllegalArgumentException("Parameter productName is required and cannot be null."));
        }
        if (deviceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter deviceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByDeviceGroup(
                            this.client.getEndpoint(),
                            filter,
                            top,
                            skip,
                            maxpagesize,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            catalogName,
                            productName,
                            deviceGroupName,
                            accept,
                            context))
            .<PagedResponse<DeploymentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List Deployment resources by DeviceGroup. '.default' and '.unassigned' are system defined values and cannot be
     * used for product or device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param filter Filter the result list using the given expression.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxpagesize The maximum number of result items per page.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Deployment list operation along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeploymentInner>> listByDeviceGroupSinglePageAsync(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String filter,
        Integer top,
        Integer skip,
        Integer maxpagesize,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (catalogName == null) {
            return Mono.error(new IllegalArgumentException("Parameter catalogName is required and cannot be null."));
        }
        if (productName == null) {
            return Mono.error(new IllegalArgumentException("Parameter productName is required and cannot be null."));
        }
        if (deviceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter deviceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByDeviceGroup(
                this.client.getEndpoint(),
                filter,
                top,
                skip,
                maxpagesize,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                catalogName,
                productName,
                deviceGroupName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List Deployment resources by DeviceGroup. '.default' and '.unassigned' are system defined values and cannot be
     * used for product or device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param filter Filter the result list using the given expression.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxpagesize The maximum number of result items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Deployment list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DeploymentInner> listByDeviceGroupAsync(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String filter,
        Integer top,
        Integer skip,
        Integer maxpagesize) {
        return new PagedFlux<>(
            () ->
                listByDeviceGroupSinglePageAsync(
                    resourceGroupName, catalogName, productName, deviceGroupName, filter, top, skip, maxpagesize),
            nextLink -> listByDeviceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * List Deployment resources by DeviceGroup. '.default' and '.unassigned' are system defined values and cannot be
     * used for product or device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Deployment list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DeploymentInner> listByDeviceGroupAsync(
        String resourceGroupName, String catalogName, String productName, String deviceGroupName) {
        final String filter = null;
        final Integer top = null;
        final Integer skip = null;
        final Integer maxpagesize = null;
        return new PagedFlux<>(
            () ->
                listByDeviceGroupSinglePageAsync(
                    resourceGroupName, catalogName, productName, deviceGroupName, filter, top, skip, maxpagesize),
            nextLink -> listByDeviceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * List Deployment resources by DeviceGroup. '.default' and '.unassigned' are system defined values and cannot be
     * used for product or device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param filter Filter the result list using the given expression.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxpagesize The maximum number of result items per page.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Deployment list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DeploymentInner> listByDeviceGroupAsync(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String filter,
        Integer top,
        Integer skip,
        Integer maxpagesize,
        Context context) {
        return new PagedFlux<>(
            () ->
                listByDeviceGroupSinglePageAsync(
                    resourceGroupName,
                    catalogName,
                    productName,
                    deviceGroupName,
                    filter,
                    top,
                    skip,
                    maxpagesize,
                    context),
            nextLink -> listByDeviceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * List Deployment resources by DeviceGroup. '.default' and '.unassigned' are system defined values and cannot be
     * used for product or device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Deployment list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentInner> listByDeviceGroup(
        String resourceGroupName, String catalogName, String productName, String deviceGroupName) {
        final String filter = null;
        final Integer top = null;
        final Integer skip = null;
        final Integer maxpagesize = null;
        return new PagedIterable<>(
            listByDeviceGroupAsync(
                resourceGroupName, catalogName, productName, deviceGroupName, filter, top, skip, maxpagesize));
    }

    /**
     * List Deployment resources by DeviceGroup. '.default' and '.unassigned' are system defined values and cannot be
     * used for product or device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param filter Filter the result list using the given expression.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param maxpagesize The maximum number of result items per page.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Deployment list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentInner> listByDeviceGroup(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String filter,
        Integer top,
        Integer skip,
        Integer maxpagesize,
        Context context) {
        return new PagedIterable<>(
            listByDeviceGroupAsync(
                resourceGroupName, catalogName, productName, deviceGroupName, filter, top, skip, maxpagesize, context));
    }

    /**
     * Get a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or device
     * group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Deployment along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeploymentInner>> getWithResponseAsync(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (catalogName == null) {
            return Mono.error(new IllegalArgumentException("Parameter catalogName is required and cannot be null."));
        }
        if (productName == null) {
            return Mono.error(new IllegalArgumentException("Parameter productName is required and cannot be null."));
        }
        if (deviceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter deviceGroupName is required and cannot be null."));
        }
        if (deploymentName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deploymentName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            catalogName,
                            productName,
                            deviceGroupName,
                            deploymentName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or device
     * group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Deployment along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeploymentInner>> getWithResponseAsync(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (catalogName == null) {
            return Mono.error(new IllegalArgumentException("Parameter catalogName is required and cannot be null."));
        }
        if (productName == null) {
            return Mono.error(new IllegalArgumentException("Parameter productName is required and cannot be null."));
        }
        if (deviceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter deviceGroupName is required and cannot be null."));
        }
        if (deploymentName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deploymentName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                catalogName,
                productName,
                deviceGroupName,
                deploymentName,
                accept,
                context);
    }

    /**
     * Get a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or device
     * group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Deployment on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeploymentInner> getAsync(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName) {
        return getWithResponseAsync(resourceGroupName, catalogName, productName, deviceGroupName, deploymentName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or device
     * group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Deployment along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeploymentInner> getWithResponse(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName,
        Context context) {
        return getWithResponseAsync(
                resourceGroupName, catalogName, productName, deviceGroupName, deploymentName, context)
            .block();
    }

    /**
     * Get a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or device
     * group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentInner get(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName) {
        return getWithResponse(
                resourceGroupName, catalogName, productName, deviceGroupName, deploymentName, Context.NONE)
            .getValue();
    }

    /**
     * Create a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or
     * device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an deployment resource belonging to a device group resource along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName,
        DeploymentInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (catalogName == null) {
            return Mono.error(new IllegalArgumentException("Parameter catalogName is required and cannot be null."));
        }
        if (productName == null) {
            return Mono.error(new IllegalArgumentException("Parameter productName is required and cannot be null."));
        }
        if (deviceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter deviceGroupName is required and cannot be null."));
        }
        if (deploymentName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deploymentName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            catalogName,
                            productName,
                            deviceGroupName,
                            deploymentName,
                            resource,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or
     * device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an deployment resource belonging to a device group resource along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName,
        DeploymentInner resource,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (catalogName == null) {
            return Mono.error(new IllegalArgumentException("Parameter catalogName is required and cannot be null."));
        }
        if (productName == null) {
            return Mono.error(new IllegalArgumentException("Parameter productName is required and cannot be null."));
        }
        if (deviceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter deviceGroupName is required and cannot be null."));
        }
        if (deploymentName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deploymentName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                catalogName,
                productName,
                deviceGroupName,
                deploymentName,
                resource,
                accept,
                context);
    }

    /**
     * Create a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or
     * device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of an deployment resource belonging to a device group resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DeploymentInner>, DeploymentInner> beginCreateOrUpdateAsync(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName,
        DeploymentInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(
                resourceGroupName, catalogName, productName, deviceGroupName, deploymentName, resource);
        return this
            .client
            .<DeploymentInner, DeploymentInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                DeploymentInner.class,
                DeploymentInner.class,
                this.client.getContext());
    }

    /**
     * Create a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or
     * device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of an deployment resource belonging to a device group resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DeploymentInner>, DeploymentInner> beginCreateOrUpdateAsync(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName,
        DeploymentInner resource,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(
                resourceGroupName, catalogName, productName, deviceGroupName, deploymentName, resource, context);
        return this
            .client
            .<DeploymentInner, DeploymentInner>getLroResult(
                mono, this.client.getHttpPipeline(), DeploymentInner.class, DeploymentInner.class, context);
    }

    /**
     * Create a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or
     * device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an deployment resource belonging to a device group resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DeploymentInner>, DeploymentInner> beginCreateOrUpdate(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName,
        DeploymentInner resource) {
        return this
            .beginCreateOrUpdateAsync(
                resourceGroupName, catalogName, productName, deviceGroupName, deploymentName, resource)
            .getSyncPoller();
    }

    /**
     * Create a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or
     * device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an deployment resource belonging to a device group resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DeploymentInner>, DeploymentInner> beginCreateOrUpdate(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName,
        DeploymentInner resource,
        Context context) {
        return this
            .beginCreateOrUpdateAsync(
                resourceGroupName, catalogName, productName, deviceGroupName, deploymentName, resource, context)
            .getSyncPoller();
    }

    /**
     * Create a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or
     * device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an deployment resource belonging to a device group resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeploymentInner> createOrUpdateAsync(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName,
        DeploymentInner resource) {
        return beginCreateOrUpdateAsync(
                resourceGroupName, catalogName, productName, deviceGroupName, deploymentName, resource)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or
     * device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an deployment resource belonging to a device group resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeploymentInner> createOrUpdateAsync(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName,
        DeploymentInner resource,
        Context context) {
        return beginCreateOrUpdateAsync(
                resourceGroupName, catalogName, productName, deviceGroupName, deploymentName, resource, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or
     * device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an deployment resource belonging to a device group resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentInner createOrUpdate(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName,
        DeploymentInner resource) {
        return createOrUpdateAsync(
                resourceGroupName, catalogName, productName, deviceGroupName, deploymentName, resource)
            .block();
    }

    /**
     * Create a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or
     * device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an deployment resource belonging to a device group resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentInner createOrUpdate(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName,
        DeploymentInner resource,
        Context context) {
        return createOrUpdateAsync(
                resourceGroupName, catalogName, productName, deviceGroupName, deploymentName, resource, context)
            .block();
    }

    /**
     * Delete a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or
     * device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (catalogName == null) {
            return Mono.error(new IllegalArgumentException("Parameter catalogName is required and cannot be null."));
        }
        if (productName == null) {
            return Mono.error(new IllegalArgumentException("Parameter productName is required and cannot be null."));
        }
        if (deviceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter deviceGroupName is required and cannot be null."));
        }
        if (deploymentName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deploymentName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            catalogName,
                            productName,
                            deviceGroupName,
                            deploymentName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or
     * device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (catalogName == null) {
            return Mono.error(new IllegalArgumentException("Parameter catalogName is required and cannot be null."));
        }
        if (productName == null) {
            return Mono.error(new IllegalArgumentException("Parameter productName is required and cannot be null."));
        }
        if (deviceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter deviceGroupName is required and cannot be null."));
        }
        if (deploymentName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deploymentName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                catalogName,
                productName,
                deviceGroupName,
                deploymentName,
                accept,
                context);
    }

    /**
     * Delete a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or
     * device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, catalogName, productName, deviceGroupName, deploymentName);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Delete a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or
     * device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(
                resourceGroupName, catalogName, productName, deviceGroupName, deploymentName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Delete a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or
     * device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName) {
        return this
            .beginDeleteAsync(resourceGroupName, catalogName, productName, deviceGroupName, deploymentName)
            .getSyncPoller();
    }

    /**
     * Delete a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or
     * device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName,
        Context context) {
        return this
            .beginDeleteAsync(resourceGroupName, catalogName, productName, deviceGroupName, deploymentName, context)
            .getSyncPoller();
    }

    /**
     * Delete a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or
     * device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName) {
        return beginDeleteAsync(resourceGroupName, catalogName, productName, deviceGroupName, deploymentName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or
     * device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName,
        Context context) {
        return beginDeleteAsync(resourceGroupName, catalogName, productName, deviceGroupName, deploymentName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or
     * device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName) {
        deleteAsync(resourceGroupName, catalogName, productName, deviceGroupName, deploymentName).block();
    }

    /**
     * Delete a Deployment. '.default' and '.unassigned' are system defined values and cannot be used for product or
     * device group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param catalogName Name of catalog.
     * @param productName Name of product.
     * @param deviceGroupName Name of device group.
     * @param deploymentName Deployment name. Use .default for deployment creation and to get the current deployment for
     *     the associated device group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String resourceGroupName,
        String catalogName,
        String productName,
        String deviceGroupName,
        String deploymentName,
        Context context) {
        deleteAsync(resourceGroupName, catalogName, productName, deviceGroupName, deploymentName, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Deployment list operation along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeploymentInner>> listByDeviceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByDeviceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DeploymentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Deployment list operation along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeploymentInner>> listByDeviceGroupNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByDeviceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
