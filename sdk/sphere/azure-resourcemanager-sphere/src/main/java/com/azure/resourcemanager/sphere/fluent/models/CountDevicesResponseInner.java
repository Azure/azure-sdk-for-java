// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sphere.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.sphere.models.CountElementsResponse;
import java.io.IOException;

/**
 * Response to the action call for count devices in a catalog.
 */
@Fluent
public final class CountDevicesResponseInner extends CountElementsResponse {
    /**
     * Creates an instance of CountDevicesResponseInner class.
     */
    public CountDevicesResponseInner() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CountDevicesResponseInner withValue(int value) {
        super.withValue(value);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("value", value());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CountDevicesResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CountDevicesResponseInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CountDevicesResponseInner.
     */
    public static CountDevicesResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CountDevicesResponseInner deserializedCountDevicesResponseInner = new CountDevicesResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    deserializedCountDevicesResponseInner.withValue(reader.getInt());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCountDevicesResponseInner;
        });
    }
}
