// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sphere.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.sphere.fluent.models.DeploymentInner;
import com.azure.resourcemanager.sphere.fluent.models.ImageInner;
import com.azure.resourcemanager.sphere.models.Deployment;
import com.azure.resourcemanager.sphere.models.Image;
import com.azure.resourcemanager.sphere.models.ProvisioningState;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public final class DeploymentImpl implements Deployment, Deployment.Definition, Deployment.Update {
    private DeploymentInner innerObject;

    private final com.azure.resourcemanager.sphere.AzureSphereManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String deploymentId() {
        return this.innerModel().deploymentId();
    }

    public List<Image> deployedImages() {
        List<ImageInner> inner = this.innerModel().deployedImages();
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner.stream().map(inner1 -> new ImageImpl(inner1, this.manager())).collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public OffsetDateTime deploymentDateUtc() {
        return this.innerModel().deploymentDateUtc();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public DeploymentInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.sphere.AzureSphereManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String catalogName;

    private String productName;

    private String deviceGroupName;

    private String deploymentName;

    public DeploymentImpl withExistingDeviceGroup(
        String resourceGroupName, String catalogName, String productName, String deviceGroupName) {
        this.resourceGroupName = resourceGroupName;
        this.catalogName = catalogName;
        this.productName = productName;
        this.deviceGroupName = deviceGroupName;
        return this;
    }

    public Deployment create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDeployments()
                .createOrUpdate(
                    resourceGroupName,
                    catalogName,
                    productName,
                    deviceGroupName,
                    deploymentName,
                    this.innerModel(),
                    Context.NONE);
        return this;
    }

    public Deployment create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDeployments()
                .createOrUpdate(
                    resourceGroupName,
                    catalogName,
                    productName,
                    deviceGroupName,
                    deploymentName,
                    this.innerModel(),
                    context);
        return this;
    }

    DeploymentImpl(String name, com.azure.resourcemanager.sphere.AzureSphereManager serviceManager) {
        this.innerObject = new DeploymentInner();
        this.serviceManager = serviceManager;
        this.deploymentName = name;
    }

    public DeploymentImpl update() {
        return this;
    }

    public Deployment apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDeployments()
                .createOrUpdate(
                    resourceGroupName,
                    catalogName,
                    productName,
                    deviceGroupName,
                    deploymentName,
                    this.innerModel(),
                    Context.NONE);
        return this;
    }

    public Deployment apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDeployments()
                .createOrUpdate(
                    resourceGroupName,
                    catalogName,
                    productName,
                    deviceGroupName,
                    deploymentName,
                    this.innerModel(),
                    context);
        return this;
    }

    DeploymentImpl(DeploymentInner innerObject, com.azure.resourcemanager.sphere.AzureSphereManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.catalogName = Utils.getValueFromIdByName(innerObject.id(), "catalogs");
        this.productName = Utils.getValueFromIdByName(innerObject.id(), "products");
        this.deviceGroupName = Utils.getValueFromIdByName(innerObject.id(), "deviceGroups");
        this.deploymentName = Utils.getValueFromIdByName(innerObject.id(), "deployments");
    }

    public Deployment refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDeployments()
                .getWithResponse(
                    resourceGroupName, catalogName, productName, deviceGroupName, deploymentName, Context.NONE)
                .getValue();
        return this;
    }

    public Deployment refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDeployments()
                .getWithResponse(resourceGroupName, catalogName, productName, deviceGroupName, deploymentName, context)
                .getValue();
        return this;
    }

    public DeploymentImpl withDeploymentId(String deploymentId) {
        this.innerModel().withDeploymentId(deploymentId);
        return this;
    }

    public DeploymentImpl withDeployedImages(List<ImageInner> deployedImages) {
        this.innerModel().withDeployedImages(deployedImages);
        return this;
    }
}
