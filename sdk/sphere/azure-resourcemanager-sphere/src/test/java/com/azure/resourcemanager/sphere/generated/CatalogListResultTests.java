// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sphere.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.sphere.fluent.models.CatalogInner;
import com.azure.resourcemanager.sphere.models.CatalogListResult;
import com.azure.resourcemanager.sphere.models.CatalogProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CatalogListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CatalogListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"tenantId\":\"ithxqhabifpi\",\"provisioningState\":\"Accepted\"},\"location\":\"zb\",\"tags\":{\"vyq\":\"npqxuh\",\"tfwvukxgaudc\":\"iwbybrkxvdumjg\",\"napczwlokjy\":\"snhsjcnyejhkryh\",\"oxzjnchgejspod\":\"mkkvnip\"},\"id\":\"ailzydehojwyahu\",\"name\":\"inpm\",\"type\":\"njaqwixjspro\"}],\"nextLink\":\"cputegjvwmfdats\"}")
            .toObject(CatalogListResult.class);
        Assertions.assertEquals("zb", model.value().get(0).location());
        Assertions.assertEquals("npqxuh", model.value().get(0).tags().get("vyq"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CatalogListResult model
            = new CatalogListResult()
                .withValue(
                    Arrays.asList(new CatalogInner()
                        .withLocation("zb").withTags(mapOf("vyq", "npqxuh", "tfwvukxgaudc", "iwbybrkxvdumjg",
                            "napczwlokjy", "snhsjcnyejhkryh", "oxzjnchgejspod", "mkkvnip"))
                        .withProperties(new CatalogProperties())));
        model = BinaryData.fromObject(model).toObject(CatalogListResult.class);
        Assertions.assertEquals("zb", model.value().get(0).location());
        Assertions.assertEquals("npqxuh", model.value().get(0).tags().get("vyq"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
