// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sphere.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.sphere.fluent.models.CatalogInner;
import com.azure.resourcemanager.sphere.models.CatalogListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CatalogListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CatalogListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"provisioningState\":\"Updating\"},\"location\":\"hxqh\",\"tags\":{\"scnpqxuhivy\":\"fpikxwczb\",\"wby\":\"n\",\"grtfwvu\":\"rkxvdum\"},\"id\":\"xgaudccs\",\"name\":\"h\",\"type\":\"jcny\"}],\"nextLink\":\"hkryhtn\"}")
                .toObject(CatalogListResult.class);
        Assertions.assertEquals("hxqh", model.value().get(0).location());
        Assertions.assertEquals("fpikxwczb", model.value().get(0).tags().get("scnpqxuhivy"));
        Assertions.assertEquals("hkryhtn", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CatalogListResult model =
            new CatalogListResult()
                .withValue(
                    Arrays
                        .asList(
                            new CatalogInner()
                                .withLocation("hxqh")
                                .withTags(mapOf("scnpqxuhivy", "fpikxwczb", "wby", "n", "grtfwvu", "rkxvdum"))))
                .withNextLink("hkryhtn");
        model = BinaryData.fromObject(model).toObject(CatalogListResult.class);
        Assertions.assertEquals("hxqh", model.value().get(0).location());
        Assertions.assertEquals("fpikxwczb", model.value().get(0).tags().get("scnpqxuhivy"));
        Assertions.assertEquals("hkryhtn", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
