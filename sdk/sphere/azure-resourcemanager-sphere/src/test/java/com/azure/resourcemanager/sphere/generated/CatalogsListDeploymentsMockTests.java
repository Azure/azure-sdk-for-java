// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sphere.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.sphere.AzureSphereManager;
import com.azure.resourcemanager.sphere.models.Deployment;
import com.azure.resourcemanager.sphere.models.RegionalDataBoundary;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class CatalogsListDeploymentsMockTests {
    @Test
    public void testListDeployments() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"deploymentId\":\"v\",\"deployedImages\":[{\"properties\":{\"image\":\"slhs\",\"imageId\":\"deemao\",\"imageName\":\"xagkvtmelmqkrh\",\"regionalDataBoundary\":\"None\",\"uri\":\"juahaquhcdhmdual\",\"description\":\"xqpvfadmw\",\"componentId\":\"crgvxpvgom\",\"imageType\":\"WifiFirmware\",\"provisioningState\":\"Canceled\"},\"id\":\"sgwbnbbeld\",\"name\":\"wkz\",\"type\":\"ali\"},{\"properties\":{\"image\":\"qhakauhashsf\",\"imageId\":\"osow\",\"imageName\":\"cugicjoox\",\"regionalDataBoundary\":\"EU\",\"uri\":\"wpucwwfvovbv\",\"description\":\"uecivyhz\",\"componentId\":\"uojgj\",\"imageType\":\"SecurityMonitor\",\"provisioningState\":\"Succeeded\"},\"id\":\"iotwmcdytdxwit\",\"name\":\"nrjawgqwg\",\"type\":\"hniskxfbkpyc\"},{\"properties\":{\"image\":\"wndnhj\",\"imageId\":\"uwhvylwzbtdhxujz\",\"imageName\":\"mpowuwpr\",\"regionalDataBoundary\":\"None\",\"uri\":\"eualupjmkhf\",\"description\":\"bbcswsrtjri\",\"componentId\":\"rbpbewtghfgblcg\",\"imageType\":\"OneBl\",\"provisioningState\":\"Canceled\"},\"id\":\"v\",\"name\":\"hjkbegibtnmxieb\",\"type\":\"waloayqcgwr\"},{\"properties\":{\"image\":\"uzgwyzmhtx\",\"imageId\":\"gmtsavjcbpwxqpsr\",\"imageName\":\"ftguv\",\"regionalDataBoundary\":\"EU\",\"uri\":\"prwmdyvxqt\",\"description\":\"riwwroy\",\"componentId\":\"exrmcqibycnojvk\",\"imageType\":\"PlutonRuntime\",\"provisioningState\":\"Updating\"},\"id\":\"sgzvahapjyzhpv\",\"name\":\"qzcjrvxdj\",\"type\":\"lmwlxkvugfhzo\"}],\"deploymentDateUtc\":\"2021-09-30T03:16:16Z\",\"provisioningState\":\"Canceled\"},\"id\":\"zunlu\",\"name\":\"hnnpr\",\"type\":\"xipeilpjzuaejx\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AzureSphereManager manager =
            AzureSphereManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Deployment> response =
            manager
                .catalogs()
                .listDeployments(
                    "z", "p", "kafkuwbcrnwbm", 1542253292, 1688496747, 1198251199, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("v", response.iterator().next().deploymentId());
        Assertions.assertEquals("slhs", response.iterator().next().deployedImages().get(0).image());
        Assertions.assertEquals("deemao", response.iterator().next().deployedImages().get(0).imageId());
        Assertions
            .assertEquals(
                RegionalDataBoundary.NONE, response.iterator().next().deployedImages().get(0).regionalDataBoundary());
    }
}
