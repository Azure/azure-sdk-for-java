// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sphere.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.sphere.fluent.models.CatalogInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CatalogInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CatalogInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"Accepted\"},\"location\":\"lokjyemkk\",\"tags\":{\"ejspodmail\":\"pjoxzjnch\",\"yahux\":\"ydehoj\",\"vcputegj\":\"npmqnjaqwixjspro\",\"uuvmkjozkrwfnd\":\"wmfdatscmdvpjhul\"},\"id\":\"odjpslwejd\",\"name\":\"vwryoqpso\",\"type\":\"cctazakljlahbc\"}")
                .toObject(CatalogInner.class);
        Assertions.assertEquals("lokjyemkk", model.location());
        Assertions.assertEquals("pjoxzjnch", model.tags().get("ejspodmail"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CatalogInner model =
            new CatalogInner()
                .withLocation("lokjyemkk")
                .withTags(
                    mapOf(
                        "ejspodmail",
                        "pjoxzjnch",
                        "yahux",
                        "ydehoj",
                        "vcputegj",
                        "npmqnjaqwixjspro",
                        "uuvmkjozkrwfnd",
                        "wmfdatscmdvpjhul"));
        model = BinaryData.fromObject(model).toObject(CatalogInner.class);
        Assertions.assertEquals("lokjyemkk", model.location());
        Assertions.assertEquals("pjoxzjnch", model.tags().get("ejspodmail"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
