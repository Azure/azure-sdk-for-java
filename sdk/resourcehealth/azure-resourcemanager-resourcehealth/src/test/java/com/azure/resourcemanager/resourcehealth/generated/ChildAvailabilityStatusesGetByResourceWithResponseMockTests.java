// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.resourcehealth.ResourceHealthManager;
import com.azure.resourcemanager.resourcehealth.models.AvailabilityStateValues;
import com.azure.resourcemanager.resourcehealth.models.AvailabilityStatus;
import com.azure.resourcemanager.resourcehealth.models.ReasonChronicityTypes;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ChildAvailabilityStatusesGetByResourceWithResponseMockTests {
    @Test
    public void testGetByResourceWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"id\":\"fujg\",\"name\":\"gaao\",\"type\":\"ttaqutdew\",\"location\":\"xswvru\",\"properties\":{\"availabilityState\":\"Degraded\",\"title\":\"gehkfkimrtixokff\",\"summary\":\"inljqepqwhixmo\",\"detailedStatus\":\"tshi\",\"reasonType\":\"gvelfc\",\"context\":\"uccbirdsvuw\",\"category\":\"b\",\"articleId\":\"gstmninwjizciln\",\"rootCauseAttributionTime\":\"2021-03-04T09:32:03Z\",\"healthEventType\":\"h\",\"healthEventCause\":\"jtbxqmuluxlx\",\"healthEventCategory\":\"vnersbycucrw\",\"healthEventId\":\"mikzeb\",\"resolutionETA\":\"2021-10-04T09:07:46Z\",\"occuredTime\":\"2021-08-14T09:18:40Z\",\"reasonChronicity\":\"Persistent\",\"reportedTime\":\"2021-07-12T06:31:29Z\",\"recentlyResolved\":{\"unavailableOccuredTime\":\"2021-09-02T04:51:34Z\",\"resolvedTime\":\"2021-02-04T13:53:52Z\",\"unavailableSummary\":\"kzruswh\"},\"recommendedActions\":[{\"action\":\"znvfbycjsxjww\",\"actionUrl\":\"z\",\"_ActionUrl.Comment\":\"mwmxqhndvnoamld\",\"actionUrlText\":\"haohdjhhflzokxc\"},{\"action\":\"pelnjetag\",\"actionUrl\":\"sxoa\",\"_ActionUrl.Comment\":\"tgzpnpb\",\"actionUrlText\":\"vefloccsrmozihmi\"},{\"action\":\"awtxxpk\",\"actionUrl\":\"cxcjxgry\",\"_ActionUrl.Comment\":\"mpcycilrmcaykgg\",\"actionUrlText\":\"xu\"},{\"action\":\"rksxwpndfc\",\"actionUrl\":\"nznthjtw\",\"_ActionUrl.Comment\":\"aosrxuz\",\"actionUrlText\":\"amktcqiosmgbzah\"}],\"serviceImpactingEvents\":[{\"eventStartTime\":\"2021-03-27T13:24:01Z\",\"eventStatusLastModifiedTime\":\"2021-10-01T04:20:56Z\",\"correlationId\":\"ltlaprltzkatbhj\",\"status\":{\"value\":\"nbsoqeqalarv\"},\"incidentProperties\":{\"title\":\"un\",\"service\":\"gfebwlnb\",\"region\":\"yreeudz\",\"incidentType\":\"vbpdqmjxlyyzglgo\"}},{\"eventStartTime\":\"2021-04-10T20:18:26Z\",\"eventStatusLastModifiedTime\":\"2020-12-22T17:43:39Z\",\"correlationId\":\"jyuojqtobaxkjeyt\",\"status\":{\"value\":\"bfjkw\"},\"incidentProperties\":{\"title\":\"nkqbhsyrq\",\"service\":\"jqhden\",\"region\":\"ulkpakd\",\"incidentType\":\"fmjnnawtqa\"}}]}}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ResourceHealthManager manager =
            ResourceHealthManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        AvailabilityStatus response =
            manager
                .childAvailabilityStatuses()
                .getByResourceWithResponse(
                    "zjkjexfdeqv", "psylkkshkbffmbmx", "jrgywwpgjxsn", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("fujg", response.id());
        Assertions.assertEquals("gaao", response.name());
        Assertions.assertEquals("ttaqutdew", response.type());
        Assertions.assertEquals("xswvru", response.location());
        Assertions.assertEquals(AvailabilityStateValues.DEGRADED, response.properties().availabilityState());
        Assertions.assertEquals("gehkfkimrtixokff", response.properties().title());
        Assertions.assertEquals("inljqepqwhixmo", response.properties().summary());
        Assertions.assertEquals("tshi", response.properties().detailedStatus());
        Assertions.assertEquals("gvelfc", response.properties().reasonType());
        Assertions.assertEquals("uccbirdsvuw", response.properties().context());
        Assertions.assertEquals("b", response.properties().category());
        Assertions.assertEquals("gstmninwjizciln", response.properties().articleId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-04T09:32:03Z"), response.properties().rootCauseAttributionTime());
        Assertions.assertEquals("h", response.properties().healthEventType());
        Assertions.assertEquals("jtbxqmuluxlx", response.properties().healthEventCause());
        Assertions.assertEquals("vnersbycucrw", response.properties().healthEventCategory());
        Assertions.assertEquals("mikzeb", response.properties().healthEventId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-04T09:07:46Z"), response.properties().resolutionEta());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-14T09:18:40Z"), response.properties().occuredTime());
        Assertions.assertEquals(ReasonChronicityTypes.PERSISTENT, response.properties().reasonChronicity());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-12T06:31:29Z"), response.properties().reportedTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-09-02T04:51:34Z"),
                response.properties().recentlyResolved().unavailableOccuredTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-02-04T13:53:52Z"), response.properties().recentlyResolved().resolvedTime());
        Assertions.assertEquals("kzruswh", response.properties().recentlyResolved().unavailableSummary());
        Assertions.assertEquals("znvfbycjsxjww", response.properties().recommendedActions().get(0).action());
        Assertions.assertEquals("z", response.properties().recommendedActions().get(0).actionUrl());
        Assertions.assertEquals("haohdjhhflzokxc", response.properties().recommendedActions().get(0).actionUrlText());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-27T13:24:01Z"),
                response.properties().serviceImpactingEvents().get(0).eventStartTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-10-01T04:20:56Z"),
                response.properties().serviceImpactingEvents().get(0).eventStatusLastModifiedTime());
        Assertions
            .assertEquals("ltlaprltzkatbhj", response.properties().serviceImpactingEvents().get(0).correlationId());
        Assertions.assertEquals("nbsoqeqalarv", response.properties().serviceImpactingEvents().get(0).status().value());
        Assertions
            .assertEquals("un", response.properties().serviceImpactingEvents().get(0).incidentProperties().title());
        Assertions
            .assertEquals(
                "gfebwlnb", response.properties().serviceImpactingEvents().get(0).incidentProperties().service());
        Assertions
            .assertEquals(
                "yreeudz", response.properties().serviceImpactingEvents().get(0).incidentProperties().region());
        Assertions
            .assertEquals(
                "vbpdqmjxlyyzglgo",
                response.properties().serviceImpactingEvents().get(0).incidentProperties().incidentType());
    }
}
