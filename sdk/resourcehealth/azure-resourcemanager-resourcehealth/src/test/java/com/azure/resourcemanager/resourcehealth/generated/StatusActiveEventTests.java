// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.resourcehealth.models.EmergingIssueImpact;
import com.azure.resourcemanager.resourcehealth.models.ImpactedRegion;
import com.azure.resourcemanager.resourcehealth.models.SeverityValues;
import com.azure.resourcemanager.resourcehealth.models.StageValues;
import com.azure.resourcemanager.resourcehealth.models.StatusActiveEvent;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class StatusActiveEventTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StatusActiveEvent model =
            BinaryData
                .fromString(
                    "{\"title\":\"ahhxvrh\",\"description\":\"kwpjgwwspughftqs\",\"trackingId\":\"qxujxukndxd\",\"startTime\":\"2021-02-07T08:06:06Z\",\"cloud\":\"guufzd\",\"severity\":\"Information\",\"stage\":\"Active\",\"published\":true,\"lastModifiedTime\":\"2021-02-25T10:39:49Z\",\"impacts\":[{\"id\":\"tzingamvpph\",\"name\":\"zqzudph\",\"regions\":[{\"id\":\"dkfw\",\"name\":\"wcvtbvkayhmtnvyq\"}]},{\"id\":\"tkzwpcnpwzc\",\"name\":\"esgvvsccyaj\",\"regions\":[{\"id\":\"hwyg\",\"name\":\"vdnkfxusem\"},{\"id\":\"zrmuhapfcqdps\",\"name\":\"qvpsvuoymg\"}]},{\"id\":\"elvezrypq\",\"name\":\"feo\",\"regions\":[{\"id\":\"wkyhkobopgxe\",\"name\":\"owepbqpcrfkb\"},{\"id\":\"csnjvcdwxlpqekft\",\"name\":\"htjsying\"}]},{\"id\":\"qatmtdhtmdvy\",\"name\":\"ikdgszywkbir\",\"regions\":[{\"id\":\"hlhkjoqrvqqaatj\",\"name\":\"rv\"},{\"id\":\"upmfiibfg\",\"name\":\"ioolvrwxkvtkkgll\"},{\"id\":\"jygvjayvbl\",\"name\":\"vkzuhbxvvyhgso\"}]}]}")
                .toObject(StatusActiveEvent.class);
        Assertions.assertEquals("ahhxvrh", model.title());
        Assertions.assertEquals("kwpjgwwspughftqs", model.description());
        Assertions.assertEquals("qxujxukndxd", model.trackingId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-07T08:06:06Z"), model.startTime());
        Assertions.assertEquals("guufzd", model.cloud());
        Assertions.assertEquals(SeverityValues.INFORMATION, model.severity());
        Assertions.assertEquals(StageValues.ACTIVE, model.stage());
        Assertions.assertEquals(true, model.published());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-25T10:39:49Z"), model.lastModifiedTime());
        Assertions.assertEquals("tzingamvpph", model.impacts().get(0).id());
        Assertions.assertEquals("zqzudph", model.impacts().get(0).name());
        Assertions.assertEquals("dkfw", model.impacts().get(0).regions().get(0).id());
        Assertions.assertEquals("wcvtbvkayhmtnvyq", model.impacts().get(0).regions().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StatusActiveEvent model =
            new StatusActiveEvent()
                .withTitle("ahhxvrh")
                .withDescription("kwpjgwwspughftqs")
                .withTrackingId("qxujxukndxd")
                .withStartTime(OffsetDateTime.parse("2021-02-07T08:06:06Z"))
                .withCloud("guufzd")
                .withSeverity(SeverityValues.INFORMATION)
                .withStage(StageValues.ACTIVE)
                .withPublished(true)
                .withLastModifiedTime(OffsetDateTime.parse("2021-02-25T10:39:49Z"))
                .withImpacts(
                    Arrays
                        .asList(
                            new EmergingIssueImpact()
                                .withId("tzingamvpph")
                                .withName("zqzudph")
                                .withRegions(
                                    Arrays.asList(new ImpactedRegion().withId("dkfw").withName("wcvtbvkayhmtnvyq"))),
                            new EmergingIssueImpact()
                                .withId("tkzwpcnpwzc")
                                .withName("esgvvsccyaj")
                                .withRegions(
                                    Arrays
                                        .asList(
                                            new ImpactedRegion().withId("hwyg").withName("vdnkfxusem"),
                                            new ImpactedRegion().withId("zrmuhapfcqdps").withName("qvpsvuoymg"))),
                            new EmergingIssueImpact()
                                .withId("elvezrypq")
                                .withName("feo")
                                .withRegions(
                                    Arrays
                                        .asList(
                                            new ImpactedRegion().withId("wkyhkobopgxe").withName("owepbqpcrfkb"),
                                            new ImpactedRegion().withId("csnjvcdwxlpqekft").withName("htjsying"))),
                            new EmergingIssueImpact()
                                .withId("qatmtdhtmdvy")
                                .withName("ikdgszywkbir")
                                .withRegions(
                                    Arrays
                                        .asList(
                                            new ImpactedRegion().withId("hlhkjoqrvqqaatj").withName("rv"),
                                            new ImpactedRegion().withId("upmfiibfg").withName("ioolvrwxkvtkkgll"),
                                            new ImpactedRegion().withId("jygvjayvbl").withName("vkzuhbxvvyhgso")))));
        model = BinaryData.fromObject(model).toObject(StatusActiveEvent.class);
        Assertions.assertEquals("ahhxvrh", model.title());
        Assertions.assertEquals("kwpjgwwspughftqs", model.description());
        Assertions.assertEquals("qxujxukndxd", model.trackingId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-07T08:06:06Z"), model.startTime());
        Assertions.assertEquals("guufzd", model.cloud());
        Assertions.assertEquals(SeverityValues.INFORMATION, model.severity());
        Assertions.assertEquals(StageValues.ACTIVE, model.stage());
        Assertions.assertEquals(true, model.published());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-25T10:39:49Z"), model.lastModifiedTime());
        Assertions.assertEquals("tzingamvpph", model.impacts().get(0).id());
        Assertions.assertEquals("zqzudph", model.impacts().get(0).name());
        Assertions.assertEquals("dkfw", model.impacts().get(0).regions().get(0).id());
        Assertions.assertEquals("wcvtbvkayhmtnvyq", model.impacts().get(0).regions().get(0).name());
    }
}
