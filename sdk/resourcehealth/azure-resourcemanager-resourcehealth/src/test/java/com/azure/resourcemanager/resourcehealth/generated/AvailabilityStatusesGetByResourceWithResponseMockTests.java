// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.resourcehealth.ResourceHealthManager;
import com.azure.resourcemanager.resourcehealth.models.AvailabilityStateValues;
import com.azure.resourcemanager.resourcehealth.models.AvailabilityStatus;
import com.azure.resourcemanager.resourcehealth.models.ReasonChronicityTypes;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AvailabilityStatusesGetByResourceWithResponseMockTests {
    @Test
    public void testGetByResourceWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"id\":\"xsbkyvpyca\",\"name\":\"z\",\"type\":\"zka\",\"location\":\"uwbc\",\"properties\":{\"availabilityState\":\"Unavailable\",\"title\":\"ehhseyvjusrts\",\"summary\":\"spkdee\",\"detailedStatus\":\"ofmxagkvtmelmqkr\",\"reasonType\":\"hvljuahaquh\",\"rootCauseAttributionTime\":\"2021-04-17T12:34:25Z\",\"healthEventType\":\"duala\",\"healthEventCause\":\"qpv\",\"healthEventCategory\":\"dmwsrcrgvxpvgomz\",\"healthEventId\":\"misgwbnb\",\"resolutionETA\":\"2021-11-15T23:08:14Z\",\"occuredTime\":\"2021-04-09T03:27:31Z\",\"reasonChronicity\":\"Transient\",\"reportedTime\":\"2021-10-31T17:36:15Z\",\"recentlyResolved\":{\"unavailableOccuredTime\":\"2021-02-02T16:45:23Z\",\"resolvedTime\":\"2021-10-15T08:45:58Z\",\"unavailableSummary\":\"qhakauhashsf\"},\"recommendedActions\":[],\"serviceImpactingEvents\":[]}}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ResourceHealthManager manager =
            ResourceHealthManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        AvailabilityStatus response =
            manager
                .availabilityStatuses()
                .getByResourceWithResponse("pz", "txhdzh", "rqjbhckfrl", Context.NONE)
                .getValue();

        Assertions.assertEquals("xsbkyvpyca", response.id());
        Assertions.assertEquals("z", response.name());
        Assertions.assertEquals("zka", response.type());
        Assertions.assertEquals("uwbc", response.location());
        Assertions.assertEquals(AvailabilityStateValues.UNAVAILABLE, response.properties().availabilityState());
        Assertions.assertEquals("ehhseyvjusrts", response.properties().title());
        Assertions.assertEquals("spkdee", response.properties().summary());
        Assertions.assertEquals("ofmxagkvtmelmqkr", response.properties().detailedStatus());
        Assertions.assertEquals("hvljuahaquh", response.properties().reasonType());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-17T12:34:25Z"), response.properties().rootCauseAttributionTime());
        Assertions.assertEquals("duala", response.properties().healthEventType());
        Assertions.assertEquals("qpv", response.properties().healthEventCause());
        Assertions.assertEquals("dmwsrcrgvxpvgomz", response.properties().healthEventCategory());
        Assertions.assertEquals("misgwbnb", response.properties().healthEventId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-15T23:08:14Z"), response.properties().resolutionEta());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-09T03:27:31Z"), response.properties().occuredTime());
        Assertions.assertEquals(ReasonChronicityTypes.TRANSIENT, response.properties().reasonChronicity());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-31T17:36:15Z"), response.properties().reportedTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-02-02T16:45:23Z"),
                response.properties().recentlyResolved().unavailableOccuredTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-10-15T08:45:58Z"), response.properties().recentlyResolved().resolvedTime());
        Assertions.assertEquals("qhakauhashsf", response.properties().recentlyResolved().unavailableSummary());
    }
}
