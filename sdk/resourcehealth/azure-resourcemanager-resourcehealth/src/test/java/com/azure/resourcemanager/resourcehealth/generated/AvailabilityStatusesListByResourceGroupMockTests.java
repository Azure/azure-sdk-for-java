// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.resourcehealth.ResourceHealthManager;
import com.azure.resourcemanager.resourcehealth.models.AvailabilityStateValues;
import com.azure.resourcemanager.resourcehealth.models.AvailabilityStatus;
import com.azure.resourcemanager.resourcehealth.models.ReasonChronicityTypes;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AvailabilityStatusesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"id\":\"vdfgiotk\",\"name\":\"utqxlngx\",\"type\":\"fgugnxkrxdqmid\",\"location\":\"hzrvqd\",\"properties\":{\"availabilityState\":\"Unknown\",\"title\":\"yb\",\"summary\":\"ehoqfbowskan\",\"detailedStatus\":\"tzlcuiywgqywgn\",\"reasonType\":\"vynhzgpphrcg\",\"rootCauseAttributionTime\":\"2021-08-18T07:24:05Z\",\"healthEventType\":\"cpecfvmmcoofs\",\"healthEventCause\":\"zevgb\",\"healthEventCategory\":\"jqabcypmivkwlzuv\",\"healthEventId\":\"fwnfnb\",\"resolutionETA\":\"2021-04-04T07:21:26Z\",\"occuredTime\":\"2021-04-16T12:59:12Z\",\"reasonChronicity\":\"Transient\",\"reportedTime\":\"2021-03-20T17:28:20Z\",\"recentlyResolved\":{\"unavailableOccuredTime\":\"2021-04-06T03:12:38Z\",\"resolvedTime\":\"2021-11-29T00:22:10Z\",\"unavailableSummary\":\"zxdpnqbqqw\"},\"recommendedActions\":[],\"serviceImpactingEvents\":[]}}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ResourceHealthManager manager =
            ResourceHealthManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AvailabilityStatus> response =
            manager.availabilityStatuses().listByResourceGroup("u", "m", "uhrzayvvt", Context.NONE);

        Assertions.assertEquals("vdfgiotk", response.iterator().next().id());
        Assertions.assertEquals("utqxlngx", response.iterator().next().name());
        Assertions.assertEquals("fgugnxkrxdqmid", response.iterator().next().type());
        Assertions.assertEquals("hzrvqd", response.iterator().next().location());
        Assertions
            .assertEquals(AvailabilityStateValues.UNKNOWN, response.iterator().next().properties().availabilityState());
        Assertions.assertEquals("yb", response.iterator().next().properties().title());
        Assertions.assertEquals("ehoqfbowskan", response.iterator().next().properties().summary());
        Assertions.assertEquals("tzlcuiywgqywgn", response.iterator().next().properties().detailedStatus());
        Assertions.assertEquals("vynhzgpphrcg", response.iterator().next().properties().reasonType());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-18T07:24:05Z"),
                response.iterator().next().properties().rootCauseAttributionTime());
        Assertions.assertEquals("cpecfvmmcoofs", response.iterator().next().properties().healthEventType());
        Assertions.assertEquals("zevgb", response.iterator().next().properties().healthEventCause());
        Assertions.assertEquals("jqabcypmivkwlzuv", response.iterator().next().properties().healthEventCategory());
        Assertions.assertEquals("fwnfnb", response.iterator().next().properties().healthEventId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-04T07:21:26Z"), response.iterator().next().properties().resolutionEta());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-16T12:59:12Z"), response.iterator().next().properties().occuredTime());
        Assertions
            .assertEquals(ReasonChronicityTypes.TRANSIENT, response.iterator().next().properties().reasonChronicity());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-20T17:28:20Z"), response.iterator().next().properties().reportedTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-06T03:12:38Z"),
                response.iterator().next().properties().recentlyResolved().unavailableOccuredTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-11-29T00:22:10Z"),
                response.iterator().next().properties().recentlyResolved().resolvedTime());
        Assertions
            .assertEquals(
                "zxdpnqbqqw", response.iterator().next().properties().recentlyResolved().unavailableSummary());
    }
}
