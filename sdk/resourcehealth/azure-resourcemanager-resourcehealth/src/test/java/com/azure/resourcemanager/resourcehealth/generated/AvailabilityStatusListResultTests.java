// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.resourcehealth.fluent.models.AvailabilityStatusInner;
import com.azure.resourcemanager.resourcehealth.models.AvailabilityStateValues;
import com.azure.resourcemanager.resourcehealth.models.AvailabilityStatusListResult;
import com.azure.resourcemanager.resourcehealth.models.AvailabilityStatusProperties;
import com.azure.resourcemanager.resourcehealth.models.ReasonChronicityTypes;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AvailabilityStatusListResultTests {
    @Test
    public void testDeserialize() {
        AvailabilityStatusListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"id\":\"hq\",\"name\":\"gjxpybczmehmt\",\"type\":\"pbsphrupidgs\",\"location\":\"bejhphoycmsxa\",\"properties\":{\"availabilityState\":\"Degraded\",\"title\":\"bmtqioq\",\"summary\":\"ehtbm\",\"detailedStatus\":\"p\",\"reasonType\":\"noi\",\"rootCauseAttributionTime\":\"2021-08-05T07:19:53Z\",\"healthEventType\":\"rxybqsoq\",\"healthEventCause\":\"gkdmb\",\"healthEventCategory\":\"zlobcufpd\",\"healthEventId\":\"rbt\",\"resolutionETA\":\"2021-09-11T14:00:46Z\",\"occuredTime\":\"2021-05-11T18:58:09Z\",\"reasonChronicity\":\"Transient\",\"reportedTime\":\"2021-03-31T06:52:57Z\",\"recommendedActions\":[],\"serviceImpactingEvents\":[]}},{\"id\":\"foooj\",\"name\":\"ifsqesaagdfmg\",\"type\":\"lhjxr\",\"location\":\"kwm\",\"properties\":{\"availabilityState\":\"Unknown\",\"title\":\"izntocipao\",\"summary\":\"jpsq\",\"detailedStatus\":\"mpoyfd\",\"reasonType\":\"ogknygjofjdd\",\"rootCauseAttributionTime\":\"2021-08-21T00:07:14Z\",\"healthEventType\":\"deupewnwrei\",\"healthEventCause\":\"zyf\",\"healthEventCategory\":\"sarhmofc\",\"healthEventId\":\"smy\",\"resolutionETA\":\"2021-02-14T18:03:27Z\",\"occuredTime\":\"2021-01-31T22:58:09Z\",\"reasonChronicity\":\"Transient\",\"reportedTime\":\"2021-10-06T17:56:05Z\",\"recommendedActions\":[],\"serviceImpactingEvents\":[]}},{\"id\":\"sjtxukcdmp\",\"name\":\"cryuan\",\"type\":\"uxzdxtay\",\"location\":\"hmwhfpmrqo\",\"properties\":{\"availabilityState\":\"Available\",\"title\":\"knryrtihfxtij\",\"summary\":\"zvgnwzs\",\"detailedStatus\":\"glzufc\",\"reasonType\":\"kohdbiha\",\"rootCauseAttributionTime\":\"2021-07-21T15:51:12Z\",\"healthEventType\":\"fcbjysagithxqha\",\"healthEventCause\":\"fpikxwczb\",\"healthEventCategory\":\"cnpqxuhivyqniwby\",\"healthEventId\":\"k\",\"resolutionETA\":\"2021-04-25T05:12:43Z\",\"occuredTime\":\"2021-06-29T10:27:04Z\",\"reasonChronicity\":\"Transient\",\"reportedTime\":\"2021-10-16T19:19:35Z\",\"recommendedActions\":[],\"serviceImpactingEvents\":[]}}],\"nextLink\":\"k\"}")
                .toObject(AvailabilityStatusListResult.class);
        Assertions.assertEquals("hq", model.value().get(0).id());
        Assertions.assertEquals("gjxpybczmehmt", model.value().get(0).name());
        Assertions.assertEquals("pbsphrupidgs", model.value().get(0).type());
        Assertions.assertEquals("bejhphoycmsxa", model.value().get(0).location());
        Assertions
            .assertEquals(AvailabilityStateValues.DEGRADED, model.value().get(0).properties().availabilityState());
        Assertions.assertEquals("bmtqioq", model.value().get(0).properties().title());
        Assertions.assertEquals("ehtbm", model.value().get(0).properties().summary());
        Assertions.assertEquals("p", model.value().get(0).properties().detailedStatus());
        Assertions.assertEquals("noi", model.value().get(0).properties().reasonType());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-05T07:19:53Z"),
                model.value().get(0).properties().rootCauseAttributionTime());
        Assertions.assertEquals("rxybqsoq", model.value().get(0).properties().healthEventType());
        Assertions.assertEquals("gkdmb", model.value().get(0).properties().healthEventCause());
        Assertions.assertEquals("zlobcufpd", model.value().get(0).properties().healthEventCategory());
        Assertions.assertEquals("rbt", model.value().get(0).properties().healthEventId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-09-11T14:00:46Z"), model.value().get(0).properties().resolutionEta());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-05-11T18:58:09Z"), model.value().get(0).properties().occuredTime());
        Assertions.assertEquals(ReasonChronicityTypes.TRANSIENT, model.value().get(0).properties().reasonChronicity());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-31T06:52:57Z"), model.value().get(0).properties().reportedTime());
        Assertions.assertEquals("k", model.nextLink());
    }

    @Test
    public void testSerialize() {
        AvailabilityStatusListResult model =
            new AvailabilityStatusListResult()
                .withValue(
                    Arrays
                        .asList(
                            new AvailabilityStatusInner()
                                .withId("hq")
                                .withName("gjxpybczmehmt")
                                .withType("pbsphrupidgs")
                                .withLocation("bejhphoycmsxa")
                                .withProperties(
                                    new AvailabilityStatusProperties()
                                        .withAvailabilityState(AvailabilityStateValues.DEGRADED)
                                        .withTitle("bmtqioq")
                                        .withSummary("ehtbm")
                                        .withDetailedStatus("p")
                                        .withReasonType("noi")
                                        .withRootCauseAttributionTime(OffsetDateTime.parse("2021-08-05T07:19:53Z"))
                                        .withHealthEventType("rxybqsoq")
                                        .withHealthEventCause("gkdmb")
                                        .withHealthEventCategory("zlobcufpd")
                                        .withHealthEventId("rbt")
                                        .withResolutionEta(OffsetDateTime.parse("2021-09-11T14:00:46Z"))
                                        .withOccuredTime(OffsetDateTime.parse("2021-05-11T18:58:09Z"))
                                        .withReasonChronicity(ReasonChronicityTypes.TRANSIENT)
                                        .withReportedTime(OffsetDateTime.parse("2021-03-31T06:52:57Z"))
                                        .withRecommendedActions(Arrays.asList())
                                        .withServiceImpactingEvents(Arrays.asList())),
                            new AvailabilityStatusInner()
                                .withId("foooj")
                                .withName("ifsqesaagdfmg")
                                .withType("lhjxr")
                                .withLocation("kwm")
                                .withProperties(
                                    new AvailabilityStatusProperties()
                                        .withAvailabilityState(AvailabilityStateValues.UNKNOWN)
                                        .withTitle("izntocipao")
                                        .withSummary("jpsq")
                                        .withDetailedStatus("mpoyfd")
                                        .withReasonType("ogknygjofjdd")
                                        .withRootCauseAttributionTime(OffsetDateTime.parse("2021-08-21T00:07:14Z"))
                                        .withHealthEventType("deupewnwrei")
                                        .withHealthEventCause("zyf")
                                        .withHealthEventCategory("sarhmofc")
                                        .withHealthEventId("smy")
                                        .withResolutionEta(OffsetDateTime.parse("2021-02-14T18:03:27Z"))
                                        .withOccuredTime(OffsetDateTime.parse("2021-01-31T22:58:09Z"))
                                        .withReasonChronicity(ReasonChronicityTypes.TRANSIENT)
                                        .withReportedTime(OffsetDateTime.parse("2021-10-06T17:56:05Z"))
                                        .withRecommendedActions(Arrays.asList())
                                        .withServiceImpactingEvents(Arrays.asList())),
                            new AvailabilityStatusInner()
                                .withId("sjtxukcdmp")
                                .withName("cryuan")
                                .withType("uxzdxtay")
                                .withLocation("hmwhfpmrqo")
                                .withProperties(
                                    new AvailabilityStatusProperties()
                                        .withAvailabilityState(AvailabilityStateValues.AVAILABLE)
                                        .withTitle("knryrtihfxtij")
                                        .withSummary("zvgnwzs")
                                        .withDetailedStatus("glzufc")
                                        .withReasonType("kohdbiha")
                                        .withRootCauseAttributionTime(OffsetDateTime.parse("2021-07-21T15:51:12Z"))
                                        .withHealthEventType("fcbjysagithxqha")
                                        .withHealthEventCause("fpikxwczb")
                                        .withHealthEventCategory("cnpqxuhivyqniwby")
                                        .withHealthEventId("k")
                                        .withResolutionEta(OffsetDateTime.parse("2021-04-25T05:12:43Z"))
                                        .withOccuredTime(OffsetDateTime.parse("2021-06-29T10:27:04Z"))
                                        .withReasonChronicity(ReasonChronicityTypes.TRANSIENT)
                                        .withReportedTime(OffsetDateTime.parse("2021-10-16T19:19:35Z"))
                                        .withRecommendedActions(Arrays.asList())
                                        .withServiceImpactingEvents(Arrays.asList()))))
                .withNextLink("k");
        model = BinaryData.fromObject(model).toObject(AvailabilityStatusListResult.class);
        Assertions.assertEquals("hq", model.value().get(0).id());
        Assertions.assertEquals("gjxpybczmehmt", model.value().get(0).name());
        Assertions.assertEquals("pbsphrupidgs", model.value().get(0).type());
        Assertions.assertEquals("bejhphoycmsxa", model.value().get(0).location());
        Assertions
            .assertEquals(AvailabilityStateValues.DEGRADED, model.value().get(0).properties().availabilityState());
        Assertions.assertEquals("bmtqioq", model.value().get(0).properties().title());
        Assertions.assertEquals("ehtbm", model.value().get(0).properties().summary());
        Assertions.assertEquals("p", model.value().get(0).properties().detailedStatus());
        Assertions.assertEquals("noi", model.value().get(0).properties().reasonType());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-05T07:19:53Z"),
                model.value().get(0).properties().rootCauseAttributionTime());
        Assertions.assertEquals("rxybqsoq", model.value().get(0).properties().healthEventType());
        Assertions.assertEquals("gkdmb", model.value().get(0).properties().healthEventCause());
        Assertions.assertEquals("zlobcufpd", model.value().get(0).properties().healthEventCategory());
        Assertions.assertEquals("rbt", model.value().get(0).properties().healthEventId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-09-11T14:00:46Z"), model.value().get(0).properties().resolutionEta());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-05-11T18:58:09Z"), model.value().get(0).properties().occuredTime());
        Assertions.assertEquals(ReasonChronicityTypes.TRANSIENT, model.value().get(0).properties().reasonChronicity());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-31T06:52:57Z"), model.value().get(0).properties().reportedTime());
        Assertions.assertEquals("k", model.nextLink());
    }
}
