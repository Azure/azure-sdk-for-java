// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.resourcehealth.models.AvailabilityStateValues;
import com.azure.resourcemanager.resourcehealth.models.AvailabilityStatusProperties;
import com.azure.resourcemanager.resourcehealth.models.AvailabilityStatusPropertiesRecentlyResolved;
import com.azure.resourcemanager.resourcehealth.models.ReasonChronicityTypes;
import com.azure.resourcemanager.resourcehealth.models.RecommendedAction;
import com.azure.resourcemanager.resourcehealth.models.ServiceImpactingEvent;
import com.azure.resourcemanager.resourcehealth.models.ServiceImpactingEventIncidentProperties;
import com.azure.resourcemanager.resourcehealth.models.ServiceImpactingEventStatus;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AvailabilityStatusPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AvailabilityStatusProperties model =
            BinaryData
                .fromString(
                    "{\"availabilityState\":\"Unavailable\",\"title\":\"orcjxvsnby\",\"summary\":\"abnmocpcyshu\",\"detailedStatus\":\"afbljjgpbtoqcjmk\",\"reasonType\":\"a\",\"context\":\"qidtqajzyu\",\"category\":\"kudjkrlkhb\",\"articleId\":\"fepgzgq\",\"rootCauseAttributionTime\":\"2021-03-12T18:43:43Z\",\"healthEventType\":\"ocxscpaierhhbcs\",\"healthEventCause\":\"ummajtjaod\",\"healthEventCategory\":\"bnbdxkqpxokajion\",\"healthEventId\":\"mexgstxgcp\",\"resolutionETA\":\"2021-04-23T14:47:55Z\",\"occuredTime\":\"2020-12-20T13:07:36Z\",\"reasonChronicity\":\"Persistent\",\"reportedTime\":\"2021-03-19T19:19:25Z\",\"recentlyResolved\":{\"unavailableOccuredTime\":\"2021-03-11T04:53:43Z\",\"resolvedTime\":\"2021-09-11T20:00:02Z\",\"unavailableSummary\":\"lovmclwhijcoe\"},\"recommendedActions\":[{\"action\":\"zaqsqsycbkbfk\",\"actionUrl\":\"kdkexxp\",\"_ActionUrl.Comment\":\"fmxa\",\"actionUrlText\":\"fjpgddtocjjxhvp\"},{\"action\":\"uexhdzx\",\"actionUrl\":\"qeojnxqbzvddntw\",\"_ActionUrl.Comment\":\"eic\",\"actionUrlText\":\"w\"},{\"action\":\"zao\",\"actionUrl\":\"uhrhcffcyddgl\",\"_ActionUrl.Comment\":\"t\",\"actionUrlText\":\"qkwpyeicxmqc\"},{\"action\":\"q\",\"actionUrl\":\"khixuigdtopbo\",\"_ActionUrl.Comment\":\"og\",\"actionUrlText\":\"e\"}],\"serviceImpactingEvents\":[{\"eventStartTime\":\"2021-01-02T08:53:50Z\",\"eventStatusLastModifiedTime\":\"2021-01-27T21:23:24Z\",\"correlationId\":\"z\",\"status\":{\"value\":\"vtpgvdfgiotkf\"},\"incidentProperties\":{\"title\":\"qxlngx\",\"service\":\"fgugnxkrxdqmid\",\"region\":\"hzrvqd\",\"incidentType\":\"bhj\"}}]}")
                .toObject(AvailabilityStatusProperties.class);
        Assertions.assertEquals(AvailabilityStateValues.UNAVAILABLE, model.availabilityState());
        Assertions.assertEquals("orcjxvsnby", model.title());
        Assertions.assertEquals("abnmocpcyshu", model.summary());
        Assertions.assertEquals("afbljjgpbtoqcjmk", model.detailedStatus());
        Assertions.assertEquals("a", model.reasonType());
        Assertions.assertEquals("qidtqajzyu", model.context());
        Assertions.assertEquals("kudjkrlkhb", model.category());
        Assertions.assertEquals("fepgzgq", model.articleId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-12T18:43:43Z"), model.rootCauseAttributionTime());
        Assertions.assertEquals("ocxscpaierhhbcs", model.healthEventType());
        Assertions.assertEquals("ummajtjaod", model.healthEventCause());
        Assertions.assertEquals("bnbdxkqpxokajion", model.healthEventCategory());
        Assertions.assertEquals("mexgstxgcp", model.healthEventId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-23T14:47:55Z"), model.resolutionEta());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-20T13:07:36Z"), model.occuredTime());
        Assertions.assertEquals(ReasonChronicityTypes.PERSISTENT, model.reasonChronicity());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-19T19:19:25Z"), model.reportedTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-11T04:53:43Z"), model.recentlyResolved().unavailableOccuredTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-11T20:00:02Z"), model.recentlyResolved().resolvedTime());
        Assertions.assertEquals("lovmclwhijcoe", model.recentlyResolved().unavailableSummary());
        Assertions.assertEquals("zaqsqsycbkbfk", model.recommendedActions().get(0).action());
        Assertions.assertEquals("kdkexxp", model.recommendedActions().get(0).actionUrl());
        Assertions.assertEquals("fjpgddtocjjxhvp", model.recommendedActions().get(0).actionUrlText());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-02T08:53:50Z"), model.serviceImpactingEvents().get(0).eventStartTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-27T21:23:24Z"),
                model.serviceImpactingEvents().get(0).eventStatusLastModifiedTime());
        Assertions.assertEquals("z", model.serviceImpactingEvents().get(0).correlationId());
        Assertions.assertEquals("vtpgvdfgiotkf", model.serviceImpactingEvents().get(0).status().value());
        Assertions.assertEquals("qxlngx", model.serviceImpactingEvents().get(0).incidentProperties().title());
        Assertions.assertEquals("fgugnxkrxdqmid", model.serviceImpactingEvents().get(0).incidentProperties().service());
        Assertions.assertEquals("hzrvqd", model.serviceImpactingEvents().get(0).incidentProperties().region());
        Assertions.assertEquals("bhj", model.serviceImpactingEvents().get(0).incidentProperties().incidentType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AvailabilityStatusProperties model =
            new AvailabilityStatusProperties()
                .withAvailabilityState(AvailabilityStateValues.UNAVAILABLE)
                .withTitle("orcjxvsnby")
                .withSummary("abnmocpcyshu")
                .withDetailedStatus("afbljjgpbtoqcjmk")
                .withReasonType("a")
                .withContext("qidtqajzyu")
                .withCategory("kudjkrlkhb")
                .withArticleId("fepgzgq")
                .withRootCauseAttributionTime(OffsetDateTime.parse("2021-03-12T18:43:43Z"))
                .withHealthEventType("ocxscpaierhhbcs")
                .withHealthEventCause("ummajtjaod")
                .withHealthEventCategory("bnbdxkqpxokajion")
                .withHealthEventId("mexgstxgcp")
                .withResolutionEta(OffsetDateTime.parse("2021-04-23T14:47:55Z"))
                .withOccuredTime(OffsetDateTime.parse("2020-12-20T13:07:36Z"))
                .withReasonChronicity(ReasonChronicityTypes.PERSISTENT)
                .withReportedTime(OffsetDateTime.parse("2021-03-19T19:19:25Z"))
                .withRecentlyResolved(
                    new AvailabilityStatusPropertiesRecentlyResolved()
                        .withUnavailableOccuredTime(OffsetDateTime.parse("2021-03-11T04:53:43Z"))
                        .withResolvedTime(OffsetDateTime.parse("2021-09-11T20:00:02Z"))
                        .withUnavailableSummary("lovmclwhijcoe"))
                .withRecommendedActions(
                    Arrays
                        .asList(
                            new RecommendedAction()
                                .withAction("zaqsqsycbkbfk")
                                .withActionUrl("kdkexxp")
                                .withActionUrlText("fjpgddtocjjxhvp"),
                            new RecommendedAction()
                                .withAction("uexhdzx")
                                .withActionUrl("qeojnxqbzvddntw")
                                .withActionUrlText("w"),
                            new RecommendedAction()
                                .withAction("zao")
                                .withActionUrl("uhrhcffcyddgl")
                                .withActionUrlText("qkwpyeicxmqc"),
                            new RecommendedAction()
                                .withAction("q")
                                .withActionUrl("khixuigdtopbo")
                                .withActionUrlText("e")))
                .withServiceImpactingEvents(
                    Arrays
                        .asList(
                            new ServiceImpactingEvent()
                                .withEventStartTime(OffsetDateTime.parse("2021-01-02T08:53:50Z"))
                                .withEventStatusLastModifiedTime(OffsetDateTime.parse("2021-01-27T21:23:24Z"))
                                .withCorrelationId("z")
                                .withStatus(new ServiceImpactingEventStatus().withValue("vtpgvdfgiotkf"))
                                .withIncidentProperties(
                                    new ServiceImpactingEventIncidentProperties()
                                        .withTitle("qxlngx")
                                        .withService("fgugnxkrxdqmid")
                                        .withRegion("hzrvqd")
                                        .withIncidentType("bhj"))));
        model = BinaryData.fromObject(model).toObject(AvailabilityStatusProperties.class);
        Assertions.assertEquals(AvailabilityStateValues.UNAVAILABLE, model.availabilityState());
        Assertions.assertEquals("orcjxvsnby", model.title());
        Assertions.assertEquals("abnmocpcyshu", model.summary());
        Assertions.assertEquals("afbljjgpbtoqcjmk", model.detailedStatus());
        Assertions.assertEquals("a", model.reasonType());
        Assertions.assertEquals("qidtqajzyu", model.context());
        Assertions.assertEquals("kudjkrlkhb", model.category());
        Assertions.assertEquals("fepgzgq", model.articleId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-12T18:43:43Z"), model.rootCauseAttributionTime());
        Assertions.assertEquals("ocxscpaierhhbcs", model.healthEventType());
        Assertions.assertEquals("ummajtjaod", model.healthEventCause());
        Assertions.assertEquals("bnbdxkqpxokajion", model.healthEventCategory());
        Assertions.assertEquals("mexgstxgcp", model.healthEventId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-23T14:47:55Z"), model.resolutionEta());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-20T13:07:36Z"), model.occuredTime());
        Assertions.assertEquals(ReasonChronicityTypes.PERSISTENT, model.reasonChronicity());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-19T19:19:25Z"), model.reportedTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-11T04:53:43Z"), model.recentlyResolved().unavailableOccuredTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-11T20:00:02Z"), model.recentlyResolved().resolvedTime());
        Assertions.assertEquals("lovmclwhijcoe", model.recentlyResolved().unavailableSummary());
        Assertions.assertEquals("zaqsqsycbkbfk", model.recommendedActions().get(0).action());
        Assertions.assertEquals("kdkexxp", model.recommendedActions().get(0).actionUrl());
        Assertions.assertEquals("fjpgddtocjjxhvp", model.recommendedActions().get(0).actionUrlText());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-02T08:53:50Z"), model.serviceImpactingEvents().get(0).eventStartTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-27T21:23:24Z"),
                model.serviceImpactingEvents().get(0).eventStatusLastModifiedTime());
        Assertions.assertEquals("z", model.serviceImpactingEvents().get(0).correlationId());
        Assertions.assertEquals("vtpgvdfgiotkf", model.serviceImpactingEvents().get(0).status().value());
        Assertions.assertEquals("qxlngx", model.serviceImpactingEvents().get(0).incidentProperties().title());
        Assertions.assertEquals("fgugnxkrxdqmid", model.serviceImpactingEvents().get(0).incidentProperties().service());
        Assertions.assertEquals("hzrvqd", model.serviceImpactingEvents().get(0).incidentProperties().region());
        Assertions.assertEquals("bhj", model.serviceImpactingEvents().get(0).incidentProperties().incidentType());
    }
}
