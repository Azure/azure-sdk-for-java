// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.resourcehealth.ResourceHealthManager;
import com.azure.resourcemanager.resourcehealth.models.EmergingIssuesGetResult;
import com.azure.resourcemanager.resourcehealth.models.IssueNameParameter;
import com.azure.resourcemanager.resourcehealth.models.SeverityValues;
import com.azure.resourcemanager.resourcehealth.models.StageValues;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class EmergingIssuesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"refreshTimestamp\":\"2021-03-02T08:23:47Z\",\"statusBanners\":[{\"title\":\"tu\",\"message\":\"igebxncnwfepb\",\"cloud\":\"gfmx\",\"lastModifiedTime\":\"2021-04-20T03:41:42Z\"},{\"title\":\"bjb\",\"message\":\"lfgtdysnaquflqbc\",\"cloud\":\"hamzjrwdkqze\",\"lastModifiedTime\":\"2021-01-23T02:59:42Z\"},{\"title\":\"eziunjxdfzant\",\"message\":\"cegyamlbnseqacj\",\"cloud\":\"pilguooqjag\",\"lastModifiedTime\":\"2021-03-27T08:14:43Z\"},{\"title\":\"gueiookjbsahrtdt\",\"message\":\"elqacslmot\",\"cloud\":\"bnfxofvc\",\"lastModifiedTime\":\"2021-06-12T15:09:08Z\"}],\"statusActiveEvents\":[{\"title\":\"azftxejwabmdujtm\",\"description\":\"op\",\"trackingId\":\"c\",\"startTime\":\"2021-02-26T19:05:59Z\",\"cloud\":\"buhhlkyqlt\",\"severity\":\"Information\",\"stage\":\"Resolve\",\"published\":true,\"lastModifiedTime\":\"2020-12-26T17:33:42Z\",\"impacts\":[{},{},{},{}]},{\"title\":\"jk\",\"description\":\"ysidfvclgl\",\"trackingId\":\"fuijtkbus\",\"startTime\":\"2021-02-11T13:08:58Z\",\"cloud\":\"fikayiansharujtj\",\"severity\":\"Information\",\"stage\":\"Active\",\"published\":false,\"lastModifiedTime\":\"2021-08-06T22:44:52Z\",\"impacts\":[{},{}]},{\"title\":\"kpqhjpenuygbq\",\"description\":\"qekewvnqvcd\",\"trackingId\":\"uaucmf\",\"startTime\":\"2021-12-08T13:34:35Z\",\"cloud\":\"laxpunj\",\"severity\":\"Information\",\"stage\":\"Archived\",\"published\":false,\"lastModifiedTime\":\"2021-03-20T12:18Z\",\"impacts\":[{}]},{\"title\":\"xmfcsserxhtv\",\"description\":\"xhlw\",\"trackingId\":\"sjgqrsxyp\",\"startTime\":\"2021-02-02T03:22:38Z\",\"cloud\":\"y\",\"severity\":\"Error\",\"stage\":\"Active\",\"published\":true,\"lastModifiedTime\":\"2021-06-21T14:23:10Z\",\"impacts\":[{}]}]},\"id\":\"elyetndnbf\",\"name\":\"yggagflnlgmt\",\"type\":\"wahzjmucftbyr\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ResourceHealthManager manager =
            ResourceHealthManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        EmergingIssuesGetResult response =
            manager
                .emergingIssues()
                .getWithResponse(IssueNameParameter.DEFAULT, com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals(OffsetDateTime.parse("2021-03-02T08:23:47Z"), response.refreshTimestamp());
        Assertions.assertEquals("tu", response.statusBanners().get(0).title());
        Assertions.assertEquals("igebxncnwfepb", response.statusBanners().get(0).message());
        Assertions.assertEquals("gfmx", response.statusBanners().get(0).cloud());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-20T03:41:42Z"), response.statusBanners().get(0).lastModifiedTime());
        Assertions.assertEquals("azftxejwabmdujtm", response.statusActiveEvents().get(0).title());
        Assertions.assertEquals("op", response.statusActiveEvents().get(0).description());
        Assertions.assertEquals("c", response.statusActiveEvents().get(0).trackingId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-02-26T19:05:59Z"), response.statusActiveEvents().get(0).startTime());
        Assertions.assertEquals("buhhlkyqlt", response.statusActiveEvents().get(0).cloud());
        Assertions.assertEquals(SeverityValues.INFORMATION, response.statusActiveEvents().get(0).severity());
        Assertions.assertEquals(StageValues.RESOLVE, response.statusActiveEvents().get(0).stage());
        Assertions.assertEquals(true, response.statusActiveEvents().get(0).published());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2020-12-26T17:33:42Z"), response.statusActiveEvents().get(0).lastModifiedTime());
    }
}
