// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.resourcehealth.models.EventStatusValues;
import com.azure.resourcemanager.resourcehealth.models.ImpactedServiceRegion;
import com.azure.resourcemanager.resourcehealth.models.Update;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ImpactedServiceRegionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ImpactedServiceRegion model =
            BinaryData
                .fromString(
                    "{\"impactedRegion\":\"dtlwwrlkd\",\"status\":\"Resolved\",\"impactedSubscriptions\":[\"ok\",\"tllxdyhgsyocogj\",\"tdtbnnhadooc\"],\"impactedTenants\":[\"cikhnv\",\"amqgxqquezikyw\",\"gxk\",\"lla\"],\"lastUpdateTime\":\"2021-05-13T13:09:28Z\",\"updates\":[{\"summary\":\"ipicc\",\"updateDateTime\":\"2021-07-16T14:13:55Z\"},{\"summary\":\"ivgvvcna\",\"updateDateTime\":\"2021-09-08T02:15:33Z\"},{\"summary\":\"rnxxmueed\",\"updateDateTime\":\"2021-02-18T21:20:21Z\"},{\"summary\":\"v\",\"updateDateTime\":\"2021-12-09T17:48:53Z\"}]}")
                .toObject(ImpactedServiceRegion.class);
        Assertions.assertEquals("dtlwwrlkd", model.impactedRegion());
        Assertions.assertEquals(EventStatusValues.RESOLVED, model.status());
        Assertions.assertEquals("ok", model.impactedSubscriptions().get(0));
        Assertions.assertEquals("cikhnv", model.impactedTenants().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-13T13:09:28Z"), model.lastUpdateTime());
        Assertions.assertEquals("ipicc", model.updates().get(0).summary());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-16T14:13:55Z"), model.updates().get(0).updateDateTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ImpactedServiceRegion model =
            new ImpactedServiceRegion()
                .withImpactedRegion("dtlwwrlkd")
                .withStatus(EventStatusValues.RESOLVED)
                .withImpactedSubscriptions(Arrays.asList("ok", "tllxdyhgsyocogj", "tdtbnnhadooc"))
                .withImpactedTenants(Arrays.asList("cikhnv", "amqgxqquezikyw", "gxk", "lla"))
                .withLastUpdateTime(OffsetDateTime.parse("2021-05-13T13:09:28Z"))
                .withUpdates(
                    Arrays
                        .asList(
                            new Update()
                                .withSummary("ipicc")
                                .withUpdateDateTime(OffsetDateTime.parse("2021-07-16T14:13:55Z")),
                            new Update()
                                .withSummary("ivgvvcna")
                                .withUpdateDateTime(OffsetDateTime.parse("2021-09-08T02:15:33Z")),
                            new Update()
                                .withSummary("rnxxmueed")
                                .withUpdateDateTime(OffsetDateTime.parse("2021-02-18T21:20:21Z")),
                            new Update()
                                .withSummary("v")
                                .withUpdateDateTime(OffsetDateTime.parse("2021-12-09T17:48:53Z"))));
        model = BinaryData.fromObject(model).toObject(ImpactedServiceRegion.class);
        Assertions.assertEquals("dtlwwrlkd", model.impactedRegion());
        Assertions.assertEquals(EventStatusValues.RESOLVED, model.status());
        Assertions.assertEquals("ok", model.impactedSubscriptions().get(0));
        Assertions.assertEquals("cikhnv", model.impactedTenants().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-13T13:09:28Z"), model.lastUpdateTime());
        Assertions.assertEquals("ipicc", model.updates().get(0).summary());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-16T14:13:55Z"), model.updates().get(0).updateDateTime());
    }
}
