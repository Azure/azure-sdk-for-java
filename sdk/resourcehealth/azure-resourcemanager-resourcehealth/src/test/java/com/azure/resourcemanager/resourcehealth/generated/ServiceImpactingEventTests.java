// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.resourcehealth.models.ServiceImpactingEvent;
import com.azure.resourcemanager.resourcehealth.models.ServiceImpactingEventIncidentProperties;
import com.azure.resourcemanager.resourcehealth.models.ServiceImpactingEventStatus;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class ServiceImpactingEventTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceImpactingEvent model =
            BinaryData
                .fromString(
                    "{\"eventStartTime\":\"2021-06-17T08:19:14Z\",\"eventStatusLastModifiedTime\":\"2021-03-26T22:43:42Z\",\"correlationId\":\"c\",\"status\":{\"value\":\"ivkwlzuvccfwnfnb\"},\"incidentProperties\":{\"title\":\"ionle\",\"service\":\"etqgtzxdpnq\",\"region\":\"qwxrjfeallnw\",\"incidentType\":\"bisnja\"}}")
                .toObject(ServiceImpactingEvent.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-17T08:19:14Z"), model.eventStartTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-26T22:43:42Z"), model.eventStatusLastModifiedTime());
        Assertions.assertEquals("c", model.correlationId());
        Assertions.assertEquals("ivkwlzuvccfwnfnb", model.status().value());
        Assertions.assertEquals("ionle", model.incidentProperties().title());
        Assertions.assertEquals("etqgtzxdpnq", model.incidentProperties().service());
        Assertions.assertEquals("qwxrjfeallnw", model.incidentProperties().region());
        Assertions.assertEquals("bisnja", model.incidentProperties().incidentType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceImpactingEvent model =
            new ServiceImpactingEvent()
                .withEventStartTime(OffsetDateTime.parse("2021-06-17T08:19:14Z"))
                .withEventStatusLastModifiedTime(OffsetDateTime.parse("2021-03-26T22:43:42Z"))
                .withCorrelationId("c")
                .withStatus(new ServiceImpactingEventStatus().withValue("ivkwlzuvccfwnfnb"))
                .withIncidentProperties(
                    new ServiceImpactingEventIncidentProperties()
                        .withTitle("ionle")
                        .withService("etqgtzxdpnq")
                        .withRegion("qwxrjfeallnw")
                        .withIncidentType("bisnja"));
        model = BinaryData.fromObject(model).toObject(ServiceImpactingEvent.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-17T08:19:14Z"), model.eventStartTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-26T22:43:42Z"), model.eventStatusLastModifiedTime());
        Assertions.assertEquals("c", model.correlationId());
        Assertions.assertEquals("ivkwlzuvccfwnfnb", model.status().value());
        Assertions.assertEquals("ionle", model.incidentProperties().title());
        Assertions.assertEquals("etqgtzxdpnq", model.incidentProperties().service());
        Assertions.assertEquals("qwxrjfeallnw", model.incidentProperties().region());
        Assertions.assertEquals("bisnja", model.incidentProperties().incidentType());
    }
}
