// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.resourcehealth.ResourceHealthManager;
import com.azure.resourcemanager.resourcehealth.models.AvailabilityStateValues;
import com.azure.resourcemanager.resourcehealth.models.AvailabilityStatus;
import com.azure.resourcemanager.resourcehealth.models.ReasonChronicityTypes;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ChildAvailabilityStatusesListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"id\":\"wfl\",\"name\":\"mpizru\",\"type\":\"pqxpx\",\"location\":\"fcngjsa\",\"properties\":{\"availabilityState\":\"Unknown\",\"title\":\"tmkzjvkviirhgfgr\",\"summary\":\"dpgra\",\"detailedStatus\":\"vzbglbyvi\",\"reasonType\":\"ctbrxkjzwrgxffm\",\"context\":\"kwfbkgo\",\"category\":\"wopdbydpiz\",\"articleId\":\"clnapxbiygnugjkn\",\"rootCauseAttributionTime\":\"2021-02-25T12:06:10Z\",\"healthEventType\":\"cttuxuu\",\"healthEventCause\":\"lflqoiqu\",\"healthEventCategory\":\"ehmrn\",\"healthEventId\":\"vsujztczytqjtwh\",\"resolutionETA\":\"2021-08-12T09:47:08Z\",\"occuredTime\":\"2021-10-31T16:43:41Z\",\"reasonChronicity\":\"Transient\",\"reportedTime\":\"2021-06-26T15:30:29Z\",\"recentlyResolved\":{\"unavailableOccuredTime\":\"2021-05-26T04:45:22Z\",\"resolvedTime\":\"2021-03-23T16:05:03Z\",\"unavailableSummary\":\"mr\"},\"recommendedActions\":[{\"action\":\"uifamowaziynknlq\",\"actionUrl\":\"dvpiwh\",\"_ActionUrl.Comment\":\"szdtmaajquh\",\"actionUrlText\":\"ylr\"}],\"serviceImpactingEvents\":[{\"eventStartTime\":\"2021-10-02T10:25:29Z\",\"eventStatusLastModifiedTime\":\"2021-01-13T02:27:50Z\",\"correlationId\":\"mzyospspshck\",\"status\":{\"value\":\"jpmspbpssdfppy\"},\"incidentProperties\":{\"title\":\"ieyujtvc\",\"service\":\"cnyxrxmunjd\",\"region\":\"glnkvxlxpagl\",\"incidentType\":\"vbgkcvkhpzv\"}}]}}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ResourceHealthManager manager =
            ResourceHealthManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AvailabilityStatus> response =
            manager.childAvailabilityStatuses().list("pxuckpggq", "wey", "rdhlis", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wfl", response.iterator().next().id());
        Assertions.assertEquals("mpizru", response.iterator().next().name());
        Assertions.assertEquals("pqxpx", response.iterator().next().type());
        Assertions.assertEquals("fcngjsa", response.iterator().next().location());
        Assertions
            .assertEquals(AvailabilityStateValues.UNKNOWN, response.iterator().next().properties().availabilityState());
        Assertions.assertEquals("tmkzjvkviirhgfgr", response.iterator().next().properties().title());
        Assertions.assertEquals("dpgra", response.iterator().next().properties().summary());
        Assertions.assertEquals("vzbglbyvi", response.iterator().next().properties().detailedStatus());
        Assertions.assertEquals("ctbrxkjzwrgxffm", response.iterator().next().properties().reasonType());
        Assertions.assertEquals("kwfbkgo", response.iterator().next().properties().context());
        Assertions.assertEquals("wopdbydpiz", response.iterator().next().properties().category());
        Assertions.assertEquals("clnapxbiygnugjkn", response.iterator().next().properties().articleId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-02-25T12:06:10Z"),
                response.iterator().next().properties().rootCauseAttributionTime());
        Assertions.assertEquals("cttuxuu", response.iterator().next().properties().healthEventType());
        Assertions.assertEquals("lflqoiqu", response.iterator().next().properties().healthEventCause());
        Assertions.assertEquals("ehmrn", response.iterator().next().properties().healthEventCategory());
        Assertions.assertEquals("vsujztczytqjtwh", response.iterator().next().properties().healthEventId());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-12T09:47:08Z"), response.iterator().next().properties().resolutionEta());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-10-31T16:43:41Z"), response.iterator().next().properties().occuredTime());
        Assertions
            .assertEquals(ReasonChronicityTypes.TRANSIENT, response.iterator().next().properties().reasonChronicity());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-26T15:30:29Z"), response.iterator().next().properties().reportedTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-05-26T04:45:22Z"),
                response.iterator().next().properties().recentlyResolved().unavailableOccuredTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-23T16:05:03Z"),
                response.iterator().next().properties().recentlyResolved().resolvedTime());
        Assertions.assertEquals("mr", response.iterator().next().properties().recentlyResolved().unavailableSummary());
        Assertions
            .assertEquals(
                "uifamowaziynknlq", response.iterator().next().properties().recommendedActions().get(0).action());
        Assertions
            .assertEquals("dvpiwh", response.iterator().next().properties().recommendedActions().get(0).actionUrl());
        Assertions
            .assertEquals("ylr", response.iterator().next().properties().recommendedActions().get(0).actionUrlText());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-10-02T10:25:29Z"),
                response.iterator().next().properties().serviceImpactingEvents().get(0).eventStartTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-13T02:27:50Z"),
                response.iterator().next().properties().serviceImpactingEvents().get(0).eventStatusLastModifiedTime());
        Assertions
            .assertEquals(
                "mzyospspshck",
                response.iterator().next().properties().serviceImpactingEvents().get(0).correlationId());
        Assertions
            .assertEquals(
                "jpmspbpssdfppy",
                response.iterator().next().properties().serviceImpactingEvents().get(0).status().value());
        Assertions
            .assertEquals(
                "ieyujtvc",
                response.iterator().next().properties().serviceImpactingEvents().get(0).incidentProperties().title());
        Assertions
            .assertEquals(
                "cnyxrxmunjd",
                response.iterator().next().properties().serviceImpactingEvents().get(0).incidentProperties().service());
        Assertions
            .assertEquals(
                "glnkvxlxpagl",
                response.iterator().next().properties().serviceImpactingEvents().get(0).incidentProperties().region());
        Assertions
            .assertEquals(
                "vbgkcvkhpzv",
                response
                    .iterator()
                    .next()
                    .properties()
                    .serviceImpactingEvents()
                    .get(0)
                    .incidentProperties()
                    .incidentType());
    }
}
