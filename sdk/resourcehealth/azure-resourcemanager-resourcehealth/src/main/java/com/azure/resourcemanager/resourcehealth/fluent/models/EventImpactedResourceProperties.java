// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.resourcehealth.models.KeyValueItem;
import java.io.IOException;
import java.util.List;

/**
 * Properties of impacted resource.
 */
@Fluent
public final class EventImpactedResourceProperties implements JsonSerializable<EventImpactedResourceProperties> {
    /*
     * Resource type within Microsoft cloud.
     */
    private String targetResourceType;

    /*
     * Identity for resource within Microsoft cloud.
     */
    private String targetResourceId;

    /*
     * Impacted resource region name.
     */
    private String targetRegion;

    /*
     * Resource name of the impacted resource.
     */
    private String resourceName;

    /*
     * Resource group name of the impacted resource.
     */
    private String resourceGroup;

    /*
     * Status of the impacted resource.
     */
    private String status;

    /*
     * Start time of maintenance for the impacted resource.
     */
    private String maintenanceStartTime;

    /*
     * End time of maintenance for the impacted resource.
     */
    private String maintenanceEndTime;

    /*
     * Additional information.
     */
    private List<KeyValueItem> info;

    /**
     * Creates an instance of EventImpactedResourceProperties class.
     */
    public EventImpactedResourceProperties() {
    }

    /**
     * Get the targetResourceType property: Resource type within Microsoft cloud.
     * 
     * @return the targetResourceType value.
     */
    public String targetResourceType() {
        return this.targetResourceType;
    }

    /**
     * Get the targetResourceId property: Identity for resource within Microsoft cloud.
     * 
     * @return the targetResourceId value.
     */
    public String targetResourceId() {
        return this.targetResourceId;
    }

    /**
     * Get the targetRegion property: Impacted resource region name.
     * 
     * @return the targetRegion value.
     */
    public String targetRegion() {
        return this.targetRegion;
    }

    /**
     * Get the resourceName property: Resource name of the impacted resource.
     * 
     * @return the resourceName value.
     */
    public String resourceName() {
        return this.resourceName;
    }

    /**
     * Get the resourceGroup property: Resource group name of the impacted resource.
     * 
     * @return the resourceGroup value.
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }

    /**
     * Get the status property: Status of the impacted resource.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the maintenanceStartTime property: Start time of maintenance for the impacted resource.
     * 
     * @return the maintenanceStartTime value.
     */
    public String maintenanceStartTime() {
        return this.maintenanceStartTime;
    }

    /**
     * Get the maintenanceEndTime property: End time of maintenance for the impacted resource.
     * 
     * @return the maintenanceEndTime value.
     */
    public String maintenanceEndTime() {
        return this.maintenanceEndTime;
    }

    /**
     * Get the info property: Additional information.
     * 
     * @return the info value.
     */
    public List<KeyValueItem> info() {
        return this.info;
    }

    /**
     * Set the info property: Additional information.
     * 
     * @param info the info value to set.
     * @return the EventImpactedResourceProperties object itself.
     */
    public EventImpactedResourceProperties withInfo(List<KeyValueItem> info) {
        this.info = info;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (info() != null) {
            info().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("info", this.info, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EventImpactedResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EventImpactedResourceProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EventImpactedResourceProperties.
     */
    public static EventImpactedResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EventImpactedResourceProperties deserializedEventImpactedResourceProperties
                = new EventImpactedResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetResourceType".equals(fieldName)) {
                    deserializedEventImpactedResourceProperties.targetResourceType = reader.getString();
                } else if ("targetResourceId".equals(fieldName)) {
                    deserializedEventImpactedResourceProperties.targetResourceId = reader.getString();
                } else if ("targetRegion".equals(fieldName)) {
                    deserializedEventImpactedResourceProperties.targetRegion = reader.getString();
                } else if ("resourceName".equals(fieldName)) {
                    deserializedEventImpactedResourceProperties.resourceName = reader.getString();
                } else if ("resourceGroup".equals(fieldName)) {
                    deserializedEventImpactedResourceProperties.resourceGroup = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedEventImpactedResourceProperties.status = reader.getString();
                } else if ("maintenanceStartTime".equals(fieldName)) {
                    deserializedEventImpactedResourceProperties.maintenanceStartTime = reader.getString();
                } else if ("maintenanceEndTime".equals(fieldName)) {
                    deserializedEventImpactedResourceProperties.maintenanceEndTime = reader.getString();
                } else if ("info".equals(fieldName)) {
                    List<KeyValueItem> info = reader.readArray(reader1 -> KeyValueItem.fromJson(reader1));
                    deserializedEventImpactedResourceProperties.info = info;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEventImpactedResourceProperties;
        });
    }
}
