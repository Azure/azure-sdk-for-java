// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Azure region impacted by the service health event.
 */
@Fluent
public final class ImpactedServiceRegion implements JsonSerializable<ImpactedServiceRegion> {
    /*
     * Impacted region name.
     */
    private String impactedRegion;

    /*
     * Current status of event in the region.
     */
    private EventStatusValues status;

    /*
     * List subscription impacted by the service health event.
     */
    private List<String> impactedSubscriptions;

    /*
     * List tenant impacted by the service health event.
     */
    private List<String> impactedTenants;

    /*
     * It provides the Timestamp for when the last update for the service health event.
     */
    private OffsetDateTime lastUpdateTime;

    /*
     * List of updates for given service health event.
     */
    private List<Update> updates;

    /**
     * Creates an instance of ImpactedServiceRegion class.
     */
    public ImpactedServiceRegion() {
    }

    /**
     * Get the impactedRegion property: Impacted region name.
     * 
     * @return the impactedRegion value.
     */
    public String impactedRegion() {
        return this.impactedRegion;
    }

    /**
     * Set the impactedRegion property: Impacted region name.
     * 
     * @param impactedRegion the impactedRegion value to set.
     * @return the ImpactedServiceRegion object itself.
     */
    public ImpactedServiceRegion withImpactedRegion(String impactedRegion) {
        this.impactedRegion = impactedRegion;
        return this;
    }

    /**
     * Get the status property: Current status of event in the region.
     * 
     * @return the status value.
     */
    public EventStatusValues status() {
        return this.status;
    }

    /**
     * Set the status property: Current status of event in the region.
     * 
     * @param status the status value to set.
     * @return the ImpactedServiceRegion object itself.
     */
    public ImpactedServiceRegion withStatus(EventStatusValues status) {
        this.status = status;
        return this;
    }

    /**
     * Get the impactedSubscriptions property: List subscription impacted by the service health event.
     * 
     * @return the impactedSubscriptions value.
     */
    public List<String> impactedSubscriptions() {
        return this.impactedSubscriptions;
    }

    /**
     * Set the impactedSubscriptions property: List subscription impacted by the service health event.
     * 
     * @param impactedSubscriptions the impactedSubscriptions value to set.
     * @return the ImpactedServiceRegion object itself.
     */
    public ImpactedServiceRegion withImpactedSubscriptions(List<String> impactedSubscriptions) {
        this.impactedSubscriptions = impactedSubscriptions;
        return this;
    }

    /**
     * Get the impactedTenants property: List tenant impacted by the service health event.
     * 
     * @return the impactedTenants value.
     */
    public List<String> impactedTenants() {
        return this.impactedTenants;
    }

    /**
     * Set the impactedTenants property: List tenant impacted by the service health event.
     * 
     * @param impactedTenants the impactedTenants value to set.
     * @return the ImpactedServiceRegion object itself.
     */
    public ImpactedServiceRegion withImpactedTenants(List<String> impactedTenants) {
        this.impactedTenants = impactedTenants;
        return this;
    }

    /**
     * Get the lastUpdateTime property: It provides the Timestamp for when the last update for the service health event.
     * 
     * @return the lastUpdateTime value.
     */
    public OffsetDateTime lastUpdateTime() {
        return this.lastUpdateTime;
    }

    /**
     * Set the lastUpdateTime property: It provides the Timestamp for when the last update for the service health event.
     * 
     * @param lastUpdateTime the lastUpdateTime value to set.
     * @return the ImpactedServiceRegion object itself.
     */
    public ImpactedServiceRegion withLastUpdateTime(OffsetDateTime lastUpdateTime) {
        this.lastUpdateTime = lastUpdateTime;
        return this;
    }

    /**
     * Get the updates property: List of updates for given service health event.
     * 
     * @return the updates value.
     */
    public List<Update> updates() {
        return this.updates;
    }

    /**
     * Set the updates property: List of updates for given service health event.
     * 
     * @param updates the updates value to set.
     * @return the ImpactedServiceRegion object itself.
     */
    public ImpactedServiceRegion withUpdates(List<Update> updates) {
        this.updates = updates;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (updates() != null) {
            updates().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("impactedRegion", this.impactedRegion);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeArrayField("impactedSubscriptions", this.impactedSubscriptions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("impactedTenants", this.impactedTenants,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("lastUpdateTime",
            this.lastUpdateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastUpdateTime));
        jsonWriter.writeArrayField("updates", this.updates, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImpactedServiceRegion from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImpactedServiceRegion if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImpactedServiceRegion.
     */
    public static ImpactedServiceRegion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImpactedServiceRegion deserializedImpactedServiceRegion = new ImpactedServiceRegion();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("impactedRegion".equals(fieldName)) {
                    deserializedImpactedServiceRegion.impactedRegion = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedImpactedServiceRegion.status = EventStatusValues.fromString(reader.getString());
                } else if ("impactedSubscriptions".equals(fieldName)) {
                    List<String> impactedSubscriptions = reader.readArray(reader1 -> reader1.getString());
                    deserializedImpactedServiceRegion.impactedSubscriptions = impactedSubscriptions;
                } else if ("impactedTenants".equals(fieldName)) {
                    List<String> impactedTenants = reader.readArray(reader1 -> reader1.getString());
                    deserializedImpactedServiceRegion.impactedTenants = impactedTenants;
                } else if ("lastUpdateTime".equals(fieldName)) {
                    deserializedImpactedServiceRegion.lastUpdateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updates".equals(fieldName)) {
                    List<Update> updates = reader.readArray(reader1 -> Update.fromJson(reader1));
                    deserializedImpactedServiceRegion.updates = updates;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImpactedServiceRegion;
        });
    }
}
