// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Article of event.
 */
@Fluent
public final class EventPropertiesArticle implements JsonSerializable<EventPropertiesArticle> {
    /*
     * Article content of event.
     */
    private String articleContent;

    /*
     * Article Id
     */
    private String articleId;

    /*
     * It provides a map of parameter name and value
     */
    private Object parameters;

    /**
     * Creates an instance of EventPropertiesArticle class.
     */
    public EventPropertiesArticle() {
    }

    /**
     * Get the articleContent property: Article content of event.
     * 
     * @return the articleContent value.
     */
    public String articleContent() {
        return this.articleContent;
    }

    /**
     * Set the articleContent property: Article content of event.
     * 
     * @param articleContent the articleContent value to set.
     * @return the EventPropertiesArticle object itself.
     */
    public EventPropertiesArticle withArticleContent(String articleContent) {
        this.articleContent = articleContent;
        return this;
    }

    /**
     * Get the articleId property: Article Id.
     * 
     * @return the articleId value.
     */
    public String articleId() {
        return this.articleId;
    }

    /**
     * Set the articleId property: Article Id.
     * 
     * @param articleId the articleId value to set.
     * @return the EventPropertiesArticle object itself.
     */
    public EventPropertiesArticle withArticleId(String articleId) {
        this.articleId = articleId;
        return this;
    }

    /**
     * Get the parameters property: It provides a map of parameter name and value.
     * 
     * @return the parameters value.
     */
    public Object parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: It provides a map of parameter name and value.
     * 
     * @param parameters the parameters value to set.
     * @return the EventPropertiesArticle object itself.
     */
    public EventPropertiesArticle withParameters(Object parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("articleContent", this.articleContent);
        jsonWriter.writeStringField("articleId", this.articleId);
        jsonWriter.writeUntypedField("parameters", this.parameters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EventPropertiesArticle from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EventPropertiesArticle if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EventPropertiesArticle.
     */
    public static EventPropertiesArticle fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EventPropertiesArticle deserializedEventPropertiesArticle = new EventPropertiesArticle();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("articleContent".equals(fieldName)) {
                    deserializedEventPropertiesArticle.articleContent = reader.getString();
                } else if ("articleId".equals(fieldName)) {
                    deserializedEventPropertiesArticle.articleId = reader.getString();
                } else if ("parameters".equals(fieldName)) {
                    deserializedEventPropertiesArticle.parameters = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEventPropertiesArticle;
        });
    }
}
