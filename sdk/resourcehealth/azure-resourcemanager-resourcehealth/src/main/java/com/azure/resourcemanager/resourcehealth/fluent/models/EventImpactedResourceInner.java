// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.resourcehealth.models.KeyValueItem;
import java.io.IOException;
import java.util.List;

/**
 * Impacted resource for an event.
 */
@Fluent
public final class EventImpactedResourceInner extends ProxyResource {
    /*
     * Properties of impacted resource.
     */
    private EventImpactedResourceProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of EventImpactedResourceInner class.
     */
    public EventImpactedResourceInner() {
    }

    /**
     * Get the innerProperties property: Properties of impacted resource.
     * 
     * @return the innerProperties value.
     */
    private EventImpactedResourceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the targetResourceType property: Resource type within Microsoft cloud.
     * 
     * @return the targetResourceType value.
     */
    public String targetResourceType() {
        return this.innerProperties() == null ? null : this.innerProperties().targetResourceType();
    }

    /**
     * Get the targetResourceId property: Identity for resource within Microsoft cloud.
     * 
     * @return the targetResourceId value.
     */
    public String targetResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().targetResourceId();
    }

    /**
     * Get the targetRegion property: Impacted resource region name.
     * 
     * @return the targetRegion value.
     */
    public String targetRegion() {
        return this.innerProperties() == null ? null : this.innerProperties().targetRegion();
    }

    /**
     * Get the resourceName property: Resource name of the impacted resource.
     * 
     * @return the resourceName value.
     */
    public String resourceName() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceName();
    }

    /**
     * Get the resourceGroup property: Resource group name of the impacted resource.
     * 
     * @return the resourceGroup value.
     */
    public String resourceGroup() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceGroup();
    }

    /**
     * Get the status property: Status of the impacted resource.
     * 
     * @return the status value.
     */
    public String status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the maintenanceStartTime property: Start time of maintenance for the impacted resource.
     * 
     * @return the maintenanceStartTime value.
     */
    public String maintenanceStartTime() {
        return this.innerProperties() == null ? null : this.innerProperties().maintenanceStartTime();
    }

    /**
     * Get the maintenanceEndTime property: End time of maintenance for the impacted resource.
     * 
     * @return the maintenanceEndTime value.
     */
    public String maintenanceEndTime() {
        return this.innerProperties() == null ? null : this.innerProperties().maintenanceEndTime();
    }

    /**
     * Get the info property: Additional information.
     * 
     * @return the info value.
     */
    public List<KeyValueItem> info() {
        return this.innerProperties() == null ? null : this.innerProperties().info();
    }

    /**
     * Set the info property: Additional information.
     * 
     * @param info the info value to set.
     * @return the EventImpactedResourceInner object itself.
     */
    public EventImpactedResourceInner withInfo(List<KeyValueItem> info) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EventImpactedResourceProperties();
        }
        this.innerProperties().withInfo(info);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EventImpactedResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EventImpactedResourceInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EventImpactedResourceInner.
     */
    public static EventImpactedResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EventImpactedResourceInner deserializedEventImpactedResourceInner = new EventImpactedResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedEventImpactedResourceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedEventImpactedResourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedEventImpactedResourceInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedEventImpactedResourceInner.innerProperties
                        = EventImpactedResourceProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedEventImpactedResourceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEventImpactedResourceInner;
        });
    }
}
