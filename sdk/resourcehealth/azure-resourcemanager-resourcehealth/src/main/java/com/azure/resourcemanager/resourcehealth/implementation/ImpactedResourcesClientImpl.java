// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.resourcehealth.fluent.ImpactedResourcesClient;
import com.azure.resourcemanager.resourcehealth.fluent.models.EventImpactedResourceInner;
import com.azure.resourcemanager.resourcehealth.models.EventImpactedResourceListResult;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ImpactedResourcesClient. */
public final class ImpactedResourcesClientImpl implements ImpactedResourcesClient {
    /** The proxy service used to perform REST calls. */
    private final ImpactedResourcesService service;

    /** The service client containing this operation class. */
    private final MicrosoftResourceHealthImpl client;

    /**
     * Initializes an instance of ImpactedResourcesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ImpactedResourcesClientImpl(MicrosoftResourceHealthImpl client) {
        this.service =
            RestProxy.create(ImpactedResourcesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftResourceHealthImpactedResources to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftResourceHea")
    public interface ImpactedResourcesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/impactedResources")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EventImpactedResourceListResult>> listBySubscriptionIdAndEventId(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("eventTrackingId") String eventTrackingId,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/impactedResources/{impactedResourceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EventImpactedResourceInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("eventTrackingId") String eventTrackingId,
            @PathParam("impactedResourceName") String impactedResourceName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/impactedResources")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EventImpactedResourceListResult>> listByTenantIdAndEventId(
            @HostParam("$host") String endpoint,
            @PathParam("eventTrackingId") String eventTrackingId,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/impactedResources/{impactedResourceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EventImpactedResourceInner>> getByTenantId(
            @HostParam("$host") String endpoint,
            @PathParam("eventTrackingId") String eventTrackingId,
            @PathParam("impactedResourceName") String impactedResourceName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EventImpactedResourceListResult>> listBySubscriptionIdAndEventIdNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EventImpactedResourceListResult>> listByTenantIdAndEventIdNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Lists impacted resources in the subscription by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     *     https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EventImpactedResourceInner>> listBySubscriptionIdAndEventIdSinglePageAsync(
        String eventTrackingId, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (eventTrackingId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter eventTrackingId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listBySubscriptionIdAndEventId(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            eventTrackingId,
                            this.client.getApiVersion(),
                            filter,
                            accept,
                            context))
            .<PagedResponse<EventImpactedResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists impacted resources in the subscription by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     *     https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EventImpactedResourceInner>> listBySubscriptionIdAndEventIdSinglePageAsync(
        String eventTrackingId, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (eventTrackingId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter eventTrackingId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySubscriptionIdAndEventId(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                eventTrackingId,
                this.client.getApiVersion(),
                filter,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists impacted resources in the subscription by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     *     https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EventImpactedResourceInner> listBySubscriptionIdAndEventIdAsync(
        String eventTrackingId, String filter) {
        return new PagedFlux<>(
            () -> listBySubscriptionIdAndEventIdSinglePageAsync(eventTrackingId, filter),
            nextLink -> listBySubscriptionIdAndEventIdNextSinglePageAsync(nextLink));
    }

    /**
     * Lists impacted resources in the subscription by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EventImpactedResourceInner> listBySubscriptionIdAndEventIdAsync(String eventTrackingId) {
        final String filter = null;
        return new PagedFlux<>(
            () -> listBySubscriptionIdAndEventIdSinglePageAsync(eventTrackingId, filter),
            nextLink -> listBySubscriptionIdAndEventIdNextSinglePageAsync(nextLink));
    }

    /**
     * Lists impacted resources in the subscription by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     *     https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EventImpactedResourceInner> listBySubscriptionIdAndEventIdAsync(
        String eventTrackingId, String filter, Context context) {
        return new PagedFlux<>(
            () -> listBySubscriptionIdAndEventIdSinglePageAsync(eventTrackingId, filter, context),
            nextLink -> listBySubscriptionIdAndEventIdNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists impacted resources in the subscription by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EventImpactedResourceInner> listBySubscriptionIdAndEventId(String eventTrackingId) {
        final String filter = null;
        return new PagedIterable<>(listBySubscriptionIdAndEventIdAsync(eventTrackingId, filter));
    }

    /**
     * Lists impacted resources in the subscription by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     *     https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EventImpactedResourceInner> listBySubscriptionIdAndEventId(
        String eventTrackingId, String filter, Context context) {
        return new PagedIterable<>(listBySubscriptionIdAndEventIdAsync(eventTrackingId, filter, context));
    }

    /**
     * Gets the specific impacted resource in the subscription by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param impactedResourceName Name of the Impacted Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific impacted resource in the subscription by an event along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<EventImpactedResourceInner>> getWithResponseAsync(
        String eventTrackingId, String impactedResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (eventTrackingId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter eventTrackingId is required and cannot be null."));
        }
        if (impactedResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter impactedResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            eventTrackingId,
                            impactedResourceName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the specific impacted resource in the subscription by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param impactedResourceName Name of the Impacted Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific impacted resource in the subscription by an event along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<EventImpactedResourceInner>> getWithResponseAsync(
        String eventTrackingId, String impactedResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (eventTrackingId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter eventTrackingId is required and cannot be null."));
        }
        if (impactedResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter impactedResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                eventTrackingId,
                impactedResourceName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets the specific impacted resource in the subscription by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param impactedResourceName Name of the Impacted Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific impacted resource in the subscription by an event on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EventImpactedResourceInner> getAsync(String eventTrackingId, String impactedResourceName) {
        return getWithResponseAsync(eventTrackingId, impactedResourceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the specific impacted resource in the subscription by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param impactedResourceName Name of the Impacted Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific impacted resource in the subscription by an event along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<EventImpactedResourceInner> getWithResponse(
        String eventTrackingId, String impactedResourceName, Context context) {
        return getWithResponseAsync(eventTrackingId, impactedResourceName, context).block();
    }

    /**
     * Gets the specific impacted resource in the subscription by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param impactedResourceName Name of the Impacted Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific impacted resource in the subscription by an event.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EventImpactedResourceInner get(String eventTrackingId, String impactedResourceName) {
        return getWithResponse(eventTrackingId, impactedResourceName, Context.NONE).getValue();
    }

    /**
     * Lists impacted resources in the tenant by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     *     https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EventImpactedResourceInner>> listByTenantIdAndEventIdSinglePageAsync(
        String eventTrackingId, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (eventTrackingId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter eventTrackingId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByTenantIdAndEventId(
                            this.client.getEndpoint(),
                            eventTrackingId,
                            this.client.getApiVersion(),
                            filter,
                            accept,
                            context))
            .<PagedResponse<EventImpactedResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists impacted resources in the tenant by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     *     https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EventImpactedResourceInner>> listByTenantIdAndEventIdSinglePageAsync(
        String eventTrackingId, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (eventTrackingId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter eventTrackingId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByTenantIdAndEventId(
                this.client.getEndpoint(), eventTrackingId, this.client.getApiVersion(), filter, accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists impacted resources in the tenant by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     *     https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EventImpactedResourceInner> listByTenantIdAndEventIdAsync(String eventTrackingId, String filter) {
        return new PagedFlux<>(
            () -> listByTenantIdAndEventIdSinglePageAsync(eventTrackingId, filter),
            nextLink -> listByTenantIdAndEventIdNextSinglePageAsync(nextLink));
    }

    /**
     * Lists impacted resources in the tenant by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EventImpactedResourceInner> listByTenantIdAndEventIdAsync(String eventTrackingId) {
        final String filter = null;
        return new PagedFlux<>(
            () -> listByTenantIdAndEventIdSinglePageAsync(eventTrackingId, filter),
            nextLink -> listByTenantIdAndEventIdNextSinglePageAsync(nextLink));
    }

    /**
     * Lists impacted resources in the tenant by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     *     https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EventImpactedResourceInner> listByTenantIdAndEventIdAsync(
        String eventTrackingId, String filter, Context context) {
        return new PagedFlux<>(
            () -> listByTenantIdAndEventIdSinglePageAsync(eventTrackingId, filter, context),
            nextLink -> listByTenantIdAndEventIdNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists impacted resources in the tenant by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EventImpactedResourceInner> listByTenantIdAndEventId(String eventTrackingId) {
        final String filter = null;
        return new PagedIterable<>(listByTenantIdAndEventIdAsync(eventTrackingId, filter));
    }

    /**
     * Lists impacted resources in the tenant by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     *     https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EventImpactedResourceInner> listByTenantIdAndEventId(
        String eventTrackingId, String filter, Context context) {
        return new PagedIterable<>(listByTenantIdAndEventIdAsync(eventTrackingId, filter, context));
    }

    /**
     * Gets the specific impacted resource in the tenant by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param impactedResourceName Name of the Impacted Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific impacted resource in the tenant by an event along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<EventImpactedResourceInner>> getByTenantIdWithResponseAsync(
        String eventTrackingId, String impactedResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (eventTrackingId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter eventTrackingId is required and cannot be null."));
        }
        if (impactedResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter impactedResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByTenantId(
                            this.client.getEndpoint(),
                            eventTrackingId,
                            impactedResourceName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the specific impacted resource in the tenant by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param impactedResourceName Name of the Impacted Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific impacted resource in the tenant by an event along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<EventImpactedResourceInner>> getByTenantIdWithResponseAsync(
        String eventTrackingId, String impactedResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (eventTrackingId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter eventTrackingId is required and cannot be null."));
        }
        if (impactedResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter impactedResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getByTenantId(
                this.client.getEndpoint(),
                eventTrackingId,
                impactedResourceName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets the specific impacted resource in the tenant by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param impactedResourceName Name of the Impacted Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific impacted resource in the tenant by an event on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EventImpactedResourceInner> getByTenantIdAsync(String eventTrackingId, String impactedResourceName) {
        return getByTenantIdWithResponseAsync(eventTrackingId, impactedResourceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the specific impacted resource in the tenant by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param impactedResourceName Name of the Impacted Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific impacted resource in the tenant by an event along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<EventImpactedResourceInner> getByTenantIdWithResponse(
        String eventTrackingId, String impactedResourceName, Context context) {
        return getByTenantIdWithResponseAsync(eventTrackingId, impactedResourceName, context).block();
    }

    /**
     * Gets the specific impacted resource in the tenant by an event.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param impactedResourceName Name of the Impacted Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specific impacted resource in the tenant by an event.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EventImpactedResourceInner getByTenantId(String eventTrackingId, String impactedResourceName) {
        return getByTenantIdWithResponse(eventTrackingId, impactedResourceName, Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EventImpactedResourceInner>> listBySubscriptionIdAndEventIdNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.listBySubscriptionIdAndEventIdNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<EventImpactedResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EventImpactedResourceInner>> listBySubscriptionIdAndEventIdNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySubscriptionIdAndEventIdNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EventImpactedResourceInner>> listByTenantIdAndEventIdNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByTenantIdAndEventIdNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<EventImpactedResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List of eventImpactedResources operation response along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EventImpactedResourceInner>> listByTenantIdAndEventIdNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByTenantIdAndEventIdNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
