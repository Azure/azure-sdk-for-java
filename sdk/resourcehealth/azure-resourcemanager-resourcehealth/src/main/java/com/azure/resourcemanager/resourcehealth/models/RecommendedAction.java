// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Lists actions the user can take based on the current availabilityState of the resource.
 */
@Fluent
public final class RecommendedAction implements JsonSerializable<RecommendedAction> {
    /*
     * Recommended action.
     */
    private String action;

    /*
     * Link to the action
     */
    private String actionUrl;

    /*
     * the comment for the Action
     */
    private String actionUrlComment;

    /*
     * Substring of action, it describes which text should host the action URL.
     */
    private String actionUrlText;

    /**
     * Creates an instance of RecommendedAction class.
     */
    public RecommendedAction() {
    }

    /**
     * Get the action property: Recommended action.
     * 
     * @return the action value.
     */
    public String action() {
        return this.action;
    }

    /**
     * Set the action property: Recommended action.
     * 
     * @param action the action value to set.
     * @return the RecommendedAction object itself.
     */
    public RecommendedAction withAction(String action) {
        this.action = action;
        return this;
    }

    /**
     * Get the actionUrl property: Link to the action.
     * 
     * @return the actionUrl value.
     */
    public String actionUrl() {
        return this.actionUrl;
    }

    /**
     * Set the actionUrl property: Link to the action.
     * 
     * @param actionUrl the actionUrl value to set.
     * @return the RecommendedAction object itself.
     */
    public RecommendedAction withActionUrl(String actionUrl) {
        this.actionUrl = actionUrl;
        return this;
    }

    /**
     * Get the actionUrlComment property: the comment for the Action.
     * 
     * @return the actionUrlComment value.
     */
    public String actionUrlComment() {
        return this.actionUrlComment;
    }

    /**
     * Set the actionUrlComment property: the comment for the Action.
     * 
     * @param actionUrlComment the actionUrlComment value to set.
     * @return the RecommendedAction object itself.
     */
    public RecommendedAction withActionUrlComment(String actionUrlComment) {
        this.actionUrlComment = actionUrlComment;
        return this;
    }

    /**
     * Get the actionUrlText property: Substring of action, it describes which text should host the action URL.
     * 
     * @return the actionUrlText value.
     */
    public String actionUrlText() {
        return this.actionUrlText;
    }

    /**
     * Set the actionUrlText property: Substring of action, it describes which text should host the action URL.
     * 
     * @param actionUrlText the actionUrlText value to set.
     * @return the RecommendedAction object itself.
     */
    public RecommendedAction withActionUrlText(String actionUrlText) {
        this.actionUrlText = actionUrlText;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("action", this.action);
        jsonWriter.writeStringField("actionUrl", this.actionUrl);
        jsonWriter.writeStringField("_ActionUrl.Comment", this.actionUrlComment);
        jsonWriter.writeStringField("actionUrlText", this.actionUrlText);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecommendedAction from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecommendedAction if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RecommendedAction.
     */
    public static RecommendedAction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecommendedAction deserializedRecommendedAction = new RecommendedAction();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("action".equals(fieldName)) {
                    deserializedRecommendedAction.action = reader.getString();
                } else if ("actionUrl".equals(fieldName)) {
                    deserializedRecommendedAction.actionUrl = reader.getString();
                } else if ("_ActionUrl.Comment".equals(fieldName)) {
                    deserializedRecommendedAction.actionUrlComment = reader.getString();
                } else if ("actionUrlText".equals(fieldName)) {
                    deserializedRecommendedAction.actionUrlText = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecommendedAction;
        });
    }
}
