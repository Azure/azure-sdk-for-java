// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.resourcehealth.fluent.models.EventInner;

/** An instance of this class provides access to all the operations defined in EventOperationsClient. */
public interface EventOperationsClient {
    /**
     * Service health event in the subscription by event tracking id.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     *     https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @param queryStartTime Specifies from when to return events, based on the lastUpdateTime property. For example,
     *     queryStartTime = 7/24/2020 OR queryStartTime=7%2F24%2F2020.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service health event along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<EventInner> getBySubscriptionIdAndTrackingIdWithResponse(
        String eventTrackingId, String filter, String queryStartTime, Context context);

    /**
     * Service health event in the subscription by event tracking id.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service health event.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EventInner getBySubscriptionIdAndTrackingId(String eventTrackingId);

    /**
     * Service health event details in the subscription by event tracking id. This can be used to fetch sensitive
     * properties for Security Advisory events.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service health event along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<EventInner> fetchDetailsBySubscriptionIdAndTrackingIdWithResponse(String eventTrackingId, Context context);

    /**
     * Service health event details in the subscription by event tracking id. This can be used to fetch sensitive
     * properties for Security Advisory events.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service health event.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EventInner fetchDetailsBySubscriptionIdAndTrackingId(String eventTrackingId);

    /**
     * Service health event in the tenant by event tracking id.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param filter The filter to apply on the operation. For more information please see
     *     https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN.
     * @param queryStartTime Specifies from when to return events, based on the lastUpdateTime property. For example,
     *     queryStartTime = 7/24/2020 OR queryStartTime=7%2F24%2F2020.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service health event along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<EventInner> getByTenantIdAndTrackingIdWithResponse(
        String eventTrackingId, String filter, String queryStartTime, Context context);

    /**
     * Service health event in the tenant by event tracking id.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service health event.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EventInner getByTenantIdAndTrackingId(String eventTrackingId);

    /**
     * Service health event details in the tenant by event tracking id. This can be used to fetch sensitive properties
     * for Security Advisory events.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service health event along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<EventInner> fetchDetailsByTenantIdAndTrackingIdWithResponse(String eventTrackingId, Context context);

    /**
     * Service health event details in the tenant by event tracking id. This can be used to fetch sensitive properties
     * for Security Advisory events.
     *
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service health event.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EventInner fetchDetailsByTenantIdAndTrackingId(String eventTrackingId);
}
