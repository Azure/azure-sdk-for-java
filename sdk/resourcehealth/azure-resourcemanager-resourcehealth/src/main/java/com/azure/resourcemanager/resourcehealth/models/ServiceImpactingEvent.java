// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Lists the service impacting events that may be affecting the health of the resource.
 */
@Fluent
public final class ServiceImpactingEvent implements JsonSerializable<ServiceImpactingEvent> {
    /*
     * Timestamp for when the event started.
     */
    private OffsetDateTime eventStartTime;

    /*
     * Timestamp for when event was submitted/detected.
     */
    private OffsetDateTime eventStatusLastModifiedTime;

    /*
     * Correlation id for the event
     */
    private String correlationId;

    /*
     * Status of the service impacting event.
     */
    private ServiceImpactingEventStatus status;

    /*
     * Properties of the service impacting event.
     */
    private ServiceImpactingEventIncidentProperties incidentProperties;

    /**
     * Creates an instance of ServiceImpactingEvent class.
     */
    public ServiceImpactingEvent() {
    }

    /**
     * Get the eventStartTime property: Timestamp for when the event started.
     * 
     * @return the eventStartTime value.
     */
    public OffsetDateTime eventStartTime() {
        return this.eventStartTime;
    }

    /**
     * Set the eventStartTime property: Timestamp for when the event started.
     * 
     * @param eventStartTime the eventStartTime value to set.
     * @return the ServiceImpactingEvent object itself.
     */
    public ServiceImpactingEvent withEventStartTime(OffsetDateTime eventStartTime) {
        this.eventStartTime = eventStartTime;
        return this;
    }

    /**
     * Get the eventStatusLastModifiedTime property: Timestamp for when event was submitted/detected.
     * 
     * @return the eventStatusLastModifiedTime value.
     */
    public OffsetDateTime eventStatusLastModifiedTime() {
        return this.eventStatusLastModifiedTime;
    }

    /**
     * Set the eventStatusLastModifiedTime property: Timestamp for when event was submitted/detected.
     * 
     * @param eventStatusLastModifiedTime the eventStatusLastModifiedTime value to set.
     * @return the ServiceImpactingEvent object itself.
     */
    public ServiceImpactingEvent withEventStatusLastModifiedTime(OffsetDateTime eventStatusLastModifiedTime) {
        this.eventStatusLastModifiedTime = eventStatusLastModifiedTime;
        return this;
    }

    /**
     * Get the correlationId property: Correlation id for the event.
     * 
     * @return the correlationId value.
     */
    public String correlationId() {
        return this.correlationId;
    }

    /**
     * Set the correlationId property: Correlation id for the event.
     * 
     * @param correlationId the correlationId value to set.
     * @return the ServiceImpactingEvent object itself.
     */
    public ServiceImpactingEvent withCorrelationId(String correlationId) {
        this.correlationId = correlationId;
        return this;
    }

    /**
     * Get the status property: Status of the service impacting event.
     * 
     * @return the status value.
     */
    public ServiceImpactingEventStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the service impacting event.
     * 
     * @param status the status value to set.
     * @return the ServiceImpactingEvent object itself.
     */
    public ServiceImpactingEvent withStatus(ServiceImpactingEventStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the incidentProperties property: Properties of the service impacting event.
     * 
     * @return the incidentProperties value.
     */
    public ServiceImpactingEventIncidentProperties incidentProperties() {
        return this.incidentProperties;
    }

    /**
     * Set the incidentProperties property: Properties of the service impacting event.
     * 
     * @param incidentProperties the incidentProperties value to set.
     * @return the ServiceImpactingEvent object itself.
     */
    public ServiceImpactingEvent withIncidentProperties(ServiceImpactingEventIncidentProperties incidentProperties) {
        this.incidentProperties = incidentProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (status() != null) {
            status().validate();
        }
        if (incidentProperties() != null) {
            incidentProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("eventStartTime",
            this.eventStartTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.eventStartTime));
        jsonWriter.writeStringField("eventStatusLastModifiedTime",
            this.eventStatusLastModifiedTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.eventStatusLastModifiedTime));
        jsonWriter.writeStringField("correlationId", this.correlationId);
        jsonWriter.writeJsonField("status", this.status);
        jsonWriter.writeJsonField("incidentProperties", this.incidentProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceImpactingEvent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceImpactingEvent if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceImpactingEvent.
     */
    public static ServiceImpactingEvent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceImpactingEvent deserializedServiceImpactingEvent = new ServiceImpactingEvent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("eventStartTime".equals(fieldName)) {
                    deserializedServiceImpactingEvent.eventStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("eventStatusLastModifiedTime".equals(fieldName)) {
                    deserializedServiceImpactingEvent.eventStatusLastModifiedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("correlationId".equals(fieldName)) {
                    deserializedServiceImpactingEvent.correlationId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedServiceImpactingEvent.status = ServiceImpactingEventStatus.fromJson(reader);
                } else if ("incidentProperties".equals(fieldName)) {
                    deserializedServiceImpactingEvent.incidentProperties
                        = ServiceImpactingEventIncidentProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceImpactingEvent;
        });
    }
}
