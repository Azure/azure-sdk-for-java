// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of EmergingIssues. */
public interface EmergingIssues {
    /**
     * Lists Azure services' emerging issues.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of emerging issues as paginated response with {@link PagedIterable}.
     */
    PagedIterable<EmergingIssuesGetResult> list();

    /**
     * Lists Azure services' emerging issues.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of emerging issues as paginated response with {@link PagedIterable}.
     */
    PagedIterable<EmergingIssuesGetResult> list(Context context);

    /**
     * Gets Azure services' emerging issues.
     *
     * @param issueName The name of the emerging issue.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure services' emerging issues along with {@link Response}.
     */
    Response<EmergingIssuesGetResult> getWithResponse(IssueNameParameter issueName, Context context);

    /**
     * Gets Azure services' emerging issues.
     *
     * @param issueName The name of the emerging issue.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure services' emerging issues.
     */
    EmergingIssuesGetResult get(IssueNameParameter issueName);
}
