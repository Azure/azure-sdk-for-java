// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of the service impacting event.
 */
@Fluent
public final class ServiceImpactingEventIncidentProperties
    implements JsonSerializable<ServiceImpactingEventIncidentProperties> {
    /*
     * Title of the incident.
     */
    private String title;

    /*
     * Service impacted by the event.
     */
    private String service;

    /*
     * Region impacted by the event.
     */
    private String region;

    /*
     * Type of Event.
     */
    private String incidentType;

    /**
     * Creates an instance of ServiceImpactingEventIncidentProperties class.
     */
    public ServiceImpactingEventIncidentProperties() {
    }

    /**
     * Get the title property: Title of the incident.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: Title of the incident.
     * 
     * @param title the title value to set.
     * @return the ServiceImpactingEventIncidentProperties object itself.
     */
    public ServiceImpactingEventIncidentProperties withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the service property: Service impacted by the event.
     * 
     * @return the service value.
     */
    public String service() {
        return this.service;
    }

    /**
     * Set the service property: Service impacted by the event.
     * 
     * @param service the service value to set.
     * @return the ServiceImpactingEventIncidentProperties object itself.
     */
    public ServiceImpactingEventIncidentProperties withService(String service) {
        this.service = service;
        return this;
    }

    /**
     * Get the region property: Region impacted by the event.
     * 
     * @return the region value.
     */
    public String region() {
        return this.region;
    }

    /**
     * Set the region property: Region impacted by the event.
     * 
     * @param region the region value to set.
     * @return the ServiceImpactingEventIncidentProperties object itself.
     */
    public ServiceImpactingEventIncidentProperties withRegion(String region) {
        this.region = region;
        return this;
    }

    /**
     * Get the incidentType property: Type of Event.
     * 
     * @return the incidentType value.
     */
    public String incidentType() {
        return this.incidentType;
    }

    /**
     * Set the incidentType property: Type of Event.
     * 
     * @param incidentType the incidentType value to set.
     * @return the ServiceImpactingEventIncidentProperties object itself.
     */
    public ServiceImpactingEventIncidentProperties withIncidentType(String incidentType) {
        this.incidentType = incidentType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("service", this.service);
        jsonWriter.writeStringField("region", this.region);
        jsonWriter.writeStringField("incidentType", this.incidentType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceImpactingEventIncidentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceImpactingEventIncidentProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceImpactingEventIncidentProperties.
     */
    public static ServiceImpactingEventIncidentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceImpactingEventIncidentProperties deserializedServiceImpactingEventIncidentProperties
                = new ServiceImpactingEventIncidentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("title".equals(fieldName)) {
                    deserializedServiceImpactingEventIncidentProperties.title = reader.getString();
                } else if ("service".equals(fieldName)) {
                    deserializedServiceImpactingEventIncidentProperties.service = reader.getString();
                } else if ("region".equals(fieldName)) {
                    deserializedServiceImpactingEventIncidentProperties.region = reader.getString();
                } else if ("incidentType".equals(fieldName)) {
                    deserializedServiceImpactingEventIncidentProperties.incidentType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceImpactingEventIncidentProperties;
        });
    }
}
