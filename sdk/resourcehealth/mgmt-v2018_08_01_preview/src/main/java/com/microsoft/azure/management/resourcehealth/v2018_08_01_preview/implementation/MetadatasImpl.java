/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.Metadatas;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.MetadataEntity;

class MetadatasImpl extends WrapperImpl<MetadatasInner> implements Metadatas {
    private final ResourceHealthManager manager;

    MetadatasImpl(ResourceHealthManager manager) {
        super(manager.inner().metadatas());
        this.manager = manager;
    }

    public ResourceHealthManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Object> getAsync(String name) {
        MetadatasInner client = this.inner();
        return client.getAsync(name)
    ;}

    @Override
    public Observable<MetadataEntity> listAsync() {
        MetadatasInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<MetadataEntityInner>, Iterable<MetadataEntityInner>>() {
            @Override
            public Iterable<MetadataEntityInner> call(Page<MetadataEntityInner> page) {
                return page.items();
            }
        })
        .map(new Func1<MetadataEntityInner, MetadataEntity>() {
            @Override
            public MetadataEntity call(MetadataEntityInner inner) {
                return new MetadataEntityImpl(inner, manager());
            }
        });
    }

}
