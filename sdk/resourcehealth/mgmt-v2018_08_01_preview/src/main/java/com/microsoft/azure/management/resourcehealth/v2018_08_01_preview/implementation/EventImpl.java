/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.implementation;

import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.Event;
import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import rx.Observable;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.EventPropertiesArticle;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.EventLevelValues;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.EventSourceValues;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.EventTypeValues;
import java.util.List;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.Faq;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.Impact;
import org.joda.time.DateTime;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.LevelValues;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.Link;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.EventPropertiesRecommendedActions;
import com.microsoft.azure.management.resourcehealth.v2018_08_01_preview.EventStatusValues;

class EventImpl extends WrapperImpl<EventInner> implements Event {
    private final ResourceHealthManager manager;

    EventImpl(EventInner inner,  ResourceHealthManager manager) {
        super(inner);
        this.manager = manager;
    }

    @Override
    public ResourceHealthManager manager() {
        return this.manager;
    }



    @Override
    public EventPropertiesArticle article() {
        return this.inner().article();
    }

    @Override
    public Boolean enableChatWithUs() {
        return this.inner().enableChatWithUs();
    }

    @Override
    public Boolean enableMicrosoftSupport() {
        return this.inner().enableMicrosoftSupport();
    }

    @Override
    public EventLevelValues eventLevel() {
        return this.inner().eventLevel();
    }

    @Override
    public EventSourceValues eventSource() {
        return this.inner().eventSource();
    }

    @Override
    public EventTypeValues eventType() {
        return this.inner().eventType();
    }

    @Override
    public List<Faq> faqs() {
        return this.inner().faqs();
    }

    @Override
    public String headerProperty() {
        return this.inner().headerProperty();
    }

    @Override
    public String hirStage() {
        return this.inner().hirStage();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public List<Impact> impact() {
        return this.inner().impact();
    }

    @Override
    public DateTime impactMitigationTime() {
        return this.inner().impactMitigationTime();
    }

    @Override
    public DateTime impactStartTime() {
        return this.inner().impactStartTime();
    }

    @Override
    public Boolean isHIR() {
        return this.inner().isHIR();
    }

    @Override
    public DateTime lastUpdateTime() {
        return this.inner().lastUpdateTime();
    }

    @Override
    public LevelValues level() {
        return this.inner().level();
    }

    @Override
    public List<Link> links() {
        return this.inner().links();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Integer priority() {
        return this.inner().priority();
    }

    @Override
    public EventPropertiesRecommendedActions recommendedActions() {
        return this.inner().recommendedActions();
    }

    @Override
    public EventStatusValues status() {
        return this.inner().status();
    }

    @Override
    public String summary() {
        return this.inner().summary();
    }

    @Override
    public String title() {
        return this.inner().title();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

}
