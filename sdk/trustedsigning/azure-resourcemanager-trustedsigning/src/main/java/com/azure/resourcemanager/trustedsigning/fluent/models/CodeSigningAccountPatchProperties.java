// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.trustedsigning.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.trustedsigning.models.AccountSku;
import java.io.IOException;

/**
 * Properties of the trusted signing account.
 */
@Fluent
public final class CodeSigningAccountPatchProperties implements JsonSerializable<CodeSigningAccountPatchProperties> {
    /*
     * SKU of the trusted signing account.
     */
    private AccountSku sku;

    /**
     * Creates an instance of CodeSigningAccountPatchProperties class.
     */
    public CodeSigningAccountPatchProperties() {
    }

    /**
     * Get the sku property: SKU of the trusted signing account.
     * 
     * @return the sku value.
     */
    public AccountSku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: SKU of the trusted signing account.
     * 
     * @param sku the sku value to set.
     * @return the CodeSigningAccountPatchProperties object itself.
     */
    public CodeSigningAccountPatchProperties withSku(AccountSku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sku() != null) {
            sku().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("sku", this.sku);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CodeSigningAccountPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CodeSigningAccountPatchProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CodeSigningAccountPatchProperties.
     */
    public static CodeSigningAccountPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CodeSigningAccountPatchProperties deserializedCodeSigningAccountPatchProperties
                = new CodeSigningAccountPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sku".equals(fieldName)) {
                    deserializedCodeSigningAccountPatchProperties.sku = AccountSku.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCodeSigningAccountPatchProperties;
        });
    }
}
