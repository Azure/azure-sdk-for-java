// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.trustedsigning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Defines the certificate revocation properties.
 */
@Fluent
public final class RevokeCertificate implements JsonSerializable<RevokeCertificate> {
    /*
     * Serial number of the certificate.
     */
    private String serialNumber;

    /*
     * Thumbprint of the certificate.
     */
    private String thumbprint;

    /*
     * The timestamp when the revocation is effective.
     */
    private OffsetDateTime effectiveAt;

    /*
     * Reason for the revocation.
     */
    private String reason;

    /*
     * Remarks for the revocation.
     */
    private String remarks;

    /**
     * Creates an instance of RevokeCertificate class.
     */
    public RevokeCertificate() {
    }

    /**
     * Get the serialNumber property: Serial number of the certificate.
     * 
     * @return the serialNumber value.
     */
    public String serialNumber() {
        return this.serialNumber;
    }

    /**
     * Set the serialNumber property: Serial number of the certificate.
     * 
     * @param serialNumber the serialNumber value to set.
     * @return the RevokeCertificate object itself.
     */
    public RevokeCertificate withSerialNumber(String serialNumber) {
        this.serialNumber = serialNumber;
        return this;
    }

    /**
     * Get the thumbprint property: Thumbprint of the certificate.
     * 
     * @return the thumbprint value.
     */
    public String thumbprint() {
        return this.thumbprint;
    }

    /**
     * Set the thumbprint property: Thumbprint of the certificate.
     * 
     * @param thumbprint the thumbprint value to set.
     * @return the RevokeCertificate object itself.
     */
    public RevokeCertificate withThumbprint(String thumbprint) {
        this.thumbprint = thumbprint;
        return this;
    }

    /**
     * Get the effectiveAt property: The timestamp when the revocation is effective.
     * 
     * @return the effectiveAt value.
     */
    public OffsetDateTime effectiveAt() {
        return this.effectiveAt;
    }

    /**
     * Set the effectiveAt property: The timestamp when the revocation is effective.
     * 
     * @param effectiveAt the effectiveAt value to set.
     * @return the RevokeCertificate object itself.
     */
    public RevokeCertificate withEffectiveAt(OffsetDateTime effectiveAt) {
        this.effectiveAt = effectiveAt;
        return this;
    }

    /**
     * Get the reason property: Reason for the revocation.
     * 
     * @return the reason value.
     */
    public String reason() {
        return this.reason;
    }

    /**
     * Set the reason property: Reason for the revocation.
     * 
     * @param reason the reason value to set.
     * @return the RevokeCertificate object itself.
     */
    public RevokeCertificate withReason(String reason) {
        this.reason = reason;
        return this;
    }

    /**
     * Get the remarks property: Remarks for the revocation.
     * 
     * @return the remarks value.
     */
    public String remarks() {
        return this.remarks;
    }

    /**
     * Set the remarks property: Remarks for the revocation.
     * 
     * @param remarks the remarks value to set.
     * @return the RevokeCertificate object itself.
     */
    public RevokeCertificate withRemarks(String remarks) {
        this.remarks = remarks;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (serialNumber() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property serialNumber in model RevokeCertificate"));
        }
        if (thumbprint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property thumbprint in model RevokeCertificate"));
        }
        if (effectiveAt() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property effectiveAt in model RevokeCertificate"));
        }
        if (reason() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property reason in model RevokeCertificate"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RevokeCertificate.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serialNumber", this.serialNumber);
        jsonWriter.writeStringField("thumbprint", this.thumbprint);
        jsonWriter.writeStringField("effectiveAt",
            this.effectiveAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.effectiveAt));
        jsonWriter.writeStringField("reason", this.reason);
        jsonWriter.writeStringField("remarks", this.remarks);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RevokeCertificate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RevokeCertificate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RevokeCertificate.
     */
    public static RevokeCertificate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RevokeCertificate deserializedRevokeCertificate = new RevokeCertificate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serialNumber".equals(fieldName)) {
                    deserializedRevokeCertificate.serialNumber = reader.getString();
                } else if ("thumbprint".equals(fieldName)) {
                    deserializedRevokeCertificate.thumbprint = reader.getString();
                } else if ("effectiveAt".equals(fieldName)) {
                    deserializedRevokeCertificate.effectiveAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("reason".equals(fieldName)) {
                    deserializedRevokeCertificate.reason = reader.getString();
                } else if ("remarks".equals(fieldName)) {
                    deserializedRevokeCertificate.remarks = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRevokeCertificate;
        });
    }
}
