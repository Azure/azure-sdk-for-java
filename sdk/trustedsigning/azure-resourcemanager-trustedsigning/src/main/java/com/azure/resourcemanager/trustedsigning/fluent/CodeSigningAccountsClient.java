// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.trustedsigning.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.trustedsigning.fluent.models.CheckNameAvailabilityResultInner;
import com.azure.resourcemanager.trustedsigning.fluent.models.CodeSigningAccountInner;
import com.azure.resourcemanager.trustedsigning.models.CheckNameAvailability;
import com.azure.resourcemanager.trustedsigning.models.CodeSigningAccountPatch;

/**
 * An instance of this class provides access to all the operations defined in CodeSigningAccountsClient.
 */
public interface CodeSigningAccountsClient {
    /**
     * Get a trusted Signing Account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a trusted Signing Account along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CodeSigningAccountInner> getByResourceGroupWithResponse(String resourceGroupName, String accountName,
        Context context);

    /**
     * Get a trusted Signing Account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a trusted Signing Account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CodeSigningAccountInner getByResourceGroup(String resourceGroupName, String accountName);

    /**
     * Create a trusted Signing Account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param resource Parameters to create the trusted signing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of trusted signing account resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CodeSigningAccountInner>, CodeSigningAccountInner> beginCreate(String resourceGroupName,
        String accountName, CodeSigningAccountInner resource);

    /**
     * Create a trusted Signing Account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param resource Parameters to create the trusted signing account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of trusted signing account resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CodeSigningAccountInner>, CodeSigningAccountInner> beginCreate(String resourceGroupName,
        String accountName, CodeSigningAccountInner resource, Context context);

    /**
     * Create a trusted Signing Account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param resource Parameters to create the trusted signing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return trusted signing account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CodeSigningAccountInner create(String resourceGroupName, String accountName, CodeSigningAccountInner resource);

    /**
     * Create a trusted Signing Account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param resource Parameters to create the trusted signing account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return trusted signing account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CodeSigningAccountInner create(String resourceGroupName, String accountName, CodeSigningAccountInner resource,
        Context context);

    /**
     * Update a trusted signing account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param properties Parameters supplied to update the trusted signing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of trusted signing account resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CodeSigningAccountInner>, CodeSigningAccountInner> beginUpdate(String resourceGroupName,
        String accountName, CodeSigningAccountPatch properties);

    /**
     * Update a trusted signing account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param properties Parameters supplied to update the trusted signing account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of trusted signing account resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CodeSigningAccountInner>, CodeSigningAccountInner> beginUpdate(String resourceGroupName,
        String accountName, CodeSigningAccountPatch properties, Context context);

    /**
     * Update a trusted signing account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param properties Parameters supplied to update the trusted signing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return trusted signing account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CodeSigningAccountInner update(String resourceGroupName, String accountName, CodeSigningAccountPatch properties);

    /**
     * Update a trusted signing account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param properties Parameters supplied to update the trusted signing account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return trusted signing account resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CodeSigningAccountInner update(String resourceGroupName, String accountName, CodeSigningAccountPatch properties,
        Context context);

    /**
     * Delete a trusted signing account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String accountName);

    /**
     * Delete a trusted signing account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String accountName, Context context);

    /**
     * Delete a trusted signing account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String accountName);

    /**
     * Delete a trusted signing account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String accountName, Context context);

    /**
     * Lists trusted signing accounts within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a CodeSigningAccount list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CodeSigningAccountInner> listByResourceGroup(String resourceGroupName);

    /**
     * Lists trusted signing accounts within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a CodeSigningAccount list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CodeSigningAccountInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Lists trusted signing accounts within a subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a CodeSigningAccount list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CodeSigningAccountInner> list();

    /**
     * Lists trusted signing accounts within a subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a CodeSigningAccount list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CodeSigningAccountInner> list(Context context);

    /**
     * Checks that the trusted signing account name is valid and is not already in use.
     * 
     * @param body The CheckAvailability request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CheckNameAvailability operation response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CheckNameAvailabilityResultInner> checkNameAvailabilityWithResponse(CheckNameAvailability body,
        Context context);

    /**
     * Checks that the trusted signing account name is valid and is not already in use.
     * 
     * @param body The CheckAvailability request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CheckNameAvailability operation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CheckNameAvailabilityResultInner checkNameAvailability(CheckNameAvailability body);
}
