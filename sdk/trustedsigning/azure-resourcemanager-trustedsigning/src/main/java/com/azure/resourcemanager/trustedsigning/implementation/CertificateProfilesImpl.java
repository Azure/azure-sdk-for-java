// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.trustedsigning.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.trustedsigning.fluent.CertificateProfilesClient;
import com.azure.resourcemanager.trustedsigning.fluent.models.CertificateProfileInner;
import com.azure.resourcemanager.trustedsigning.models.CertificateProfile;
import com.azure.resourcemanager.trustedsigning.models.CertificateProfiles;
import com.azure.resourcemanager.trustedsigning.models.RevokeCertificate;

public final class CertificateProfilesImpl implements CertificateProfiles {
    private static final ClientLogger LOGGER = new ClientLogger(CertificateProfilesImpl.class);

    private final CertificateProfilesClient innerClient;

    private final com.azure.resourcemanager.trustedsigning.TrustedSigningManager serviceManager;

    public CertificateProfilesImpl(CertificateProfilesClient innerClient,
        com.azure.resourcemanager.trustedsigning.TrustedSigningManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<CertificateProfile> getWithResponse(String resourceGroupName, String accountName,
        String profileName, Context context) {
        Response<CertificateProfileInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, accountName, profileName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CertificateProfileImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CertificateProfile get(String resourceGroupName, String accountName, String profileName) {
        CertificateProfileInner inner = this.serviceClient().get(resourceGroupName, accountName, profileName);
        if (inner != null) {
            return new CertificateProfileImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String accountName, String profileName) {
        this.serviceClient().delete(resourceGroupName, accountName, profileName);
    }

    public void delete(String resourceGroupName, String accountName, String profileName, Context context) {
        this.serviceClient().delete(resourceGroupName, accountName, profileName, context);
    }

    public PagedIterable<CertificateProfile> listByCodeSigningAccount(String resourceGroupName, String accountName) {
        PagedIterable<CertificateProfileInner> inner
            = this.serviceClient().listByCodeSigningAccount(resourceGroupName, accountName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CertificateProfileImpl(inner1, this.manager()));
    }

    public PagedIterable<CertificateProfile> listByCodeSigningAccount(String resourceGroupName, String accountName,
        Context context) {
        PagedIterable<CertificateProfileInner> inner
            = this.serviceClient().listByCodeSigningAccount(resourceGroupName, accountName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CertificateProfileImpl(inner1, this.manager()));
    }

    public Response<Void> revokeCertificateWithResponse(String resourceGroupName, String accountName,
        String profileName, RevokeCertificate body, Context context) {
        return this.serviceClient()
            .revokeCertificateWithResponse(resourceGroupName, accountName, profileName, body, context);
    }

    public void revokeCertificate(String resourceGroupName, String accountName, String profileName,
        RevokeCertificate body) {
        this.serviceClient().revokeCertificate(resourceGroupName, accountName, profileName, body);
    }

    public CertificateProfile getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "codeSigningAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'codeSigningAccounts'.", id)));
        }
        String profileName = ResourceManagerUtils.getValueFromIdByName(id, "certificateProfiles");
        if (profileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'certificateProfiles'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, profileName, Context.NONE).getValue();
    }

    public Response<CertificateProfile> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "codeSigningAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'codeSigningAccounts'.", id)));
        }
        String profileName = ResourceManagerUtils.getValueFromIdByName(id, "certificateProfiles");
        if (profileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'certificateProfiles'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, profileName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "codeSigningAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'codeSigningAccounts'.", id)));
        }
        String profileName = ResourceManagerUtils.getValueFromIdByName(id, "certificateProfiles");
        if (profileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'certificateProfiles'.", id)));
        }
        this.delete(resourceGroupName, accountName, profileName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "codeSigningAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'codeSigningAccounts'.", id)));
        }
        String profileName = ResourceManagerUtils.getValueFromIdByName(id, "certificateProfiles");
        if (profileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'certificateProfiles'.", id)));
        }
        this.delete(resourceGroupName, accountName, profileName, context);
    }

    private CertificateProfilesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.trustedsigning.TrustedSigningManager manager() {
        return this.serviceManager;
    }

    public CertificateProfileImpl define(String name) {
        return new CertificateProfileImpl(name, this.manager());
    }
}
