// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.trustedsigning.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.trustedsigning.fluent.models.CertificateProfileInner;
import com.azure.resourcemanager.trustedsigning.models.RevokeCertificate;

/**
 * An instance of this class provides access to all the operations defined in CertificateProfilesClient.
 */
public interface CertificateProfilesClient {
    /**
     * Get details of a certificate profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param profileName Certificate profile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a certificate profile along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CertificateProfileInner> getWithResponse(String resourceGroupName, String accountName, String profileName,
        Context context);

    /**
     * Get details of a certificate profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param profileName Certificate profile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a certificate profile.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CertificateProfileInner get(String resourceGroupName, String accountName, String profileName);

    /**
     * Create a certificate profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param profileName Certificate profile name.
     * @param resource Parameters to create the certificate profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of certificate profile resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CertificateProfileInner>, CertificateProfileInner> beginCreate(String resourceGroupName,
        String accountName, String profileName, CertificateProfileInner resource);

    /**
     * Create a certificate profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param profileName Certificate profile name.
     * @param resource Parameters to create the certificate profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of certificate profile resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CertificateProfileInner>, CertificateProfileInner> beginCreate(String resourceGroupName,
        String accountName, String profileName, CertificateProfileInner resource, Context context);

    /**
     * Create a certificate profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param profileName Certificate profile name.
     * @param resource Parameters to create the certificate profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return certificate profile resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CertificateProfileInner create(String resourceGroupName, String accountName, String profileName,
        CertificateProfileInner resource);

    /**
     * Create a certificate profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param profileName Certificate profile name.
     * @param resource Parameters to create the certificate profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return certificate profile resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CertificateProfileInner create(String resourceGroupName, String accountName, String profileName,
        CertificateProfileInner resource, Context context);

    /**
     * Delete a certificate profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param profileName Certificate profile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String accountName, String profileName);

    /**
     * Delete a certificate profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param profileName Certificate profile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String accountName, String profileName,
        Context context);

    /**
     * Delete a certificate profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param profileName Certificate profile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String accountName, String profileName);

    /**
     * Delete a certificate profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param profileName Certificate profile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String accountName, String profileName, Context context);

    /**
     * List certificate profiles under a trusted signing account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a CertificateProfile list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CertificateProfileInner> listByCodeSigningAccount(String resourceGroupName, String accountName);

    /**
     * List certificate profiles under a trusted signing account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a CertificateProfile list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CertificateProfileInner> listByCodeSigningAccount(String resourceGroupName, String accountName,
        Context context);

    /**
     * Revoke a certificate under a certificate profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param profileName Certificate profile name.
     * @param body Parameters to revoke the certificate profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> revokeCertificateWithResponse(String resourceGroupName, String accountName, String profileName,
        RevokeCertificate body, Context context);

    /**
     * Revoke a certificate under a certificate profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param profileName Certificate profile name.
     * @param body Parameters to revoke the certificate profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void revokeCertificate(String resourceGroupName, String accountName, String profileName, RevokeCertificate body);
}
