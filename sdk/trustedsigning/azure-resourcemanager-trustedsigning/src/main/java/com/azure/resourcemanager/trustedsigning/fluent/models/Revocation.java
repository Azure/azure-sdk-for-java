// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.trustedsigning.fluent.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.trustedsigning.models.RevocationStatus;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Revocation details of the certificate.
 */
@Immutable
public final class Revocation implements JsonSerializable<Revocation> {
    /*
     * The timestamp when the revocation is requested.
     */
    @Generated
    private OffsetDateTime requestedAt;

    /*
     * The timestamp when the revocation is effective.
     */
    @Generated
    private OffsetDateTime effectiveAt;

    /*
     * Reason for revocation.
     */
    @Generated
    private String reason;

    /*
     * Remarks for the revocation.
     */
    @Generated
    private String remarks;

    /*
     * Status of the revocation.
     */
    @Generated
    private RevocationStatus status;

    /*
     * Reason for the revocation failure.
     */
    @Generated
    private String failureReason;

    /**
     * Creates an instance of Revocation class.
     */
    @Generated
    private Revocation() {
    }

    /**
     * Get the requestedAt property: The timestamp when the revocation is requested.
     * 
     * @return the requestedAt value.
     */
    @Generated
    public OffsetDateTime requestedAt() {
        return this.requestedAt;
    }

    /**
     * Get the effectiveAt property: The timestamp when the revocation is effective.
     * 
     * @return the effectiveAt value.
     */
    @Generated
    public OffsetDateTime effectiveAt() {
        return this.effectiveAt;
    }

    /**
     * Get the reason property: Reason for revocation.
     * 
     * @return the reason value.
     */
    @Generated
    public String reason() {
        return this.reason;
    }

    /**
     * Get the remarks property: Remarks for the revocation.
     * 
     * @return the remarks value.
     */
    @Generated
    public String remarks() {
        return this.remarks;
    }

    /**
     * Get the status property: Status of the revocation.
     * 
     * @return the status value.
     */
    @Generated
    public RevocationStatus status() {
        return this.status;
    }

    /**
     * Get the failureReason property: Reason for the revocation failure.
     * 
     * @return the failureReason value.
     */
    @Generated
    public String failureReason() {
        return this.failureReason;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("requestedAt",
            this.requestedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.requestedAt));
        jsonWriter.writeStringField("effectiveAt",
            this.effectiveAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.effectiveAt));
        jsonWriter.writeStringField("reason", this.reason);
        jsonWriter.writeStringField("remarks", this.remarks);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("failureReason", this.failureReason);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Revocation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Revocation if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Revocation.
     */
    public static Revocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Revocation deserializedRevocation = new Revocation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("requestedAt".equals(fieldName)) {
                    deserializedRevocation.requestedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("effectiveAt".equals(fieldName)) {
                    deserializedRevocation.effectiveAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("reason".equals(fieldName)) {
                    deserializedRevocation.reason = reader.getString();
                } else if ("remarks".equals(fieldName)) {
                    deserializedRevocation.remarks = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedRevocation.status = RevocationStatus.fromString(reader.getString());
                } else if ("failureReason".equals(fieldName)) {
                    deserializedRevocation.failureReason = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRevocation;
        });
    }
}
