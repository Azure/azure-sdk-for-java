// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.trustedsigning.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.trustedsigning.fluent.models.Revocation;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Properties of the certificate.
 */
@Immutable
public final class Certificate implements JsonSerializable<Certificate> {
    /*
     * Serial number of the certificate.
     */
    @Generated
    private String serialNumber;

    /*
     * Enhanced key usage of the certificate.
     */
    @Generated
    private String enhancedKeyUsage;

    /*
     * Subject name of the certificate.
     */
    @Generated
    private String subjectName;

    /*
     * Thumbprint of the certificate.
     */
    @Generated
    private String thumbprint;

    /*
     * Certificate created date.
     */
    @Generated
    private String createdDate;

    /*
     * Certificate expiry date.
     */
    @Generated
    private String expiryDate;

    /*
     * Status of the certificate.
     */
    @Generated
    private CertificateStatus status;

    /*
     * Revocations history of a certificate.
     */
    @Generated
    private Revocation innerRevocation;

    /**
     * Creates an instance of Certificate class.
     */
    @Generated
    private Certificate() {
    }

    /**
     * Get the serialNumber property: Serial number of the certificate.
     * 
     * @return the serialNumber value.
     */
    @Generated
    public String serialNumber() {
        return this.serialNumber;
    }

    /**
     * Get the enhancedKeyUsage property: Enhanced key usage of the certificate.
     * 
     * @return the enhancedKeyUsage value.
     */
    @Generated
    public String enhancedKeyUsage() {
        return this.enhancedKeyUsage;
    }

    /**
     * Get the subjectName property: Subject name of the certificate.
     * 
     * @return the subjectName value.
     */
    @Generated
    public String subjectName() {
        return this.subjectName;
    }

    /**
     * Get the thumbprint property: Thumbprint of the certificate.
     * 
     * @return the thumbprint value.
     */
    @Generated
    public String thumbprint() {
        return this.thumbprint;
    }

    /**
     * Get the createdDate property: Certificate created date.
     * 
     * @return the createdDate value.
     */
    @Generated
    public String createdDate() {
        return this.createdDate;
    }

    /**
     * Get the expiryDate property: Certificate expiry date.
     * 
     * @return the expiryDate value.
     */
    @Generated
    public String expiryDate() {
        return this.expiryDate;
    }

    /**
     * Get the status property: Status of the certificate.
     * 
     * @return the status value.
     */
    @Generated
    public CertificateStatus status() {
        return this.status;
    }

    /**
     * Get the innerRevocation property: Revocations history of a certificate.
     * 
     * @return the innerRevocation value.
     */
    @Generated
    private Revocation innerRevocation() {
        return this.innerRevocation;
    }

    /**
     * Get the requestedAt property: The timestamp when the revocation is requested.
     * 
     * @return the requestedAt value.
     */
    @Generated
    public OffsetDateTime requestedAt() {
        return this.innerRevocation() == null ? null : this.innerRevocation().requestedAt();
    }

    /**
     * Get the effectiveAt property: The timestamp when the revocation is effective.
     * 
     * @return the effectiveAt value.
     */
    @Generated
    public OffsetDateTime effectiveAt() {
        return this.innerRevocation() == null ? null : this.innerRevocation().effectiveAt();
    }

    /**
     * Get the reason property: Reason for revocation.
     * 
     * @return the reason value.
     */
    @Generated
    public String reason() {
        return this.innerRevocation() == null ? null : this.innerRevocation().reason();
    }

    /**
     * Get the remarks property: Remarks for the revocation.
     * 
     * @return the remarks value.
     */
    @Generated
    public String remarks() {
        return this.innerRevocation() == null ? null : this.innerRevocation().remarks();
    }

    /**
     * Get the status property: Status of the revocation.
     * 
     * @return the status value.
     */
    @Generated
    public RevocationStatus statusRevocationStatus() {
        return this.innerRevocation() == null ? null : this.innerRevocation().status();
    }

    /**
     * Get the failureReason property: Reason for the revocation failure.
     * 
     * @return the failureReason value.
     */
    @Generated
    public String failureReason() {
        return this.innerRevocation() == null ? null : this.innerRevocation().failureReason();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerRevocation() != null) {
            innerRevocation().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serialNumber", this.serialNumber);
        jsonWriter.writeStringField("enhancedKeyUsage", this.enhancedKeyUsage);
        jsonWriter.writeStringField("subjectName", this.subjectName);
        jsonWriter.writeStringField("thumbprint", this.thumbprint);
        jsonWriter.writeStringField("createdDate", this.createdDate);
        jsonWriter.writeStringField("expiryDate", this.expiryDate);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeJsonField("revocation", this.innerRevocation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Certificate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Certificate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the Certificate.
     */
    public static Certificate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Certificate deserializedCertificate = new Certificate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serialNumber".equals(fieldName)) {
                    deserializedCertificate.serialNumber = reader.getString();
                } else if ("enhancedKeyUsage".equals(fieldName)) {
                    deserializedCertificate.enhancedKeyUsage = reader.getString();
                } else if ("subjectName".equals(fieldName)) {
                    deserializedCertificate.subjectName = reader.getString();
                } else if ("thumbprint".equals(fieldName)) {
                    deserializedCertificate.thumbprint = reader.getString();
                } else if ("createdDate".equals(fieldName)) {
                    deserializedCertificate.createdDate = reader.getString();
                } else if ("expiryDate".equals(fieldName)) {
                    deserializedCertificate.expiryDate = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedCertificate.status = CertificateStatus.fromString(reader.getString());
                } else if ("revocation".equals(fieldName)) {
                    deserializedCertificate.innerRevocation = Revocation.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCertificate;
        });
    }
}
