// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.trustedsigning.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of CodeSigningAccounts.
 */
public interface CodeSigningAccounts {
    /**
     * Get a trusted Signing Account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a trusted Signing Account along with {@link Response}.
     */
    Response<CodeSigningAccount> getByResourceGroupWithResponse(String resourceGroupName, String accountName,
        Context context);

    /**
     * Get a trusted Signing Account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a trusted Signing Account.
     */
    CodeSigningAccount getByResourceGroup(String resourceGroupName, String accountName);

    /**
     * Delete a trusted signing account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String accountName);

    /**
     * Delete a trusted signing account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Trusted Signing account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String accountName, Context context);

    /**
     * Lists trusted signing accounts within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a CodeSigningAccount list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<CodeSigningAccount> listByResourceGroup(String resourceGroupName);

    /**
     * Lists trusted signing accounts within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a CodeSigningAccount list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<CodeSigningAccount> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Lists trusted signing accounts within a subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a CodeSigningAccount list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<CodeSigningAccount> list();

    /**
     * Lists trusted signing accounts within a subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a CodeSigningAccount list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<CodeSigningAccount> list(Context context);

    /**
     * Checks that the trusted signing account name is valid and is not already in use.
     * 
     * @param body The CheckAvailability request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CheckNameAvailability operation response along with {@link Response}.
     */
    Response<CheckNameAvailabilityResult> checkNameAvailabilityWithResponse(CheckNameAvailability body,
        Context context);

    /**
     * Checks that the trusted signing account name is valid and is not already in use.
     * 
     * @param body The CheckAvailability request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CheckNameAvailability operation response.
     */
    CheckNameAvailabilityResult checkNameAvailability(CheckNameAvailability body);

    /**
     * Get a trusted Signing Account.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a trusted Signing Account along with {@link Response}.
     */
    CodeSigningAccount getById(String id);

    /**
     * Get a trusted Signing Account.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a trusted Signing Account along with {@link Response}.
     */
    Response<CodeSigningAccount> getByIdWithResponse(String id, Context context);

    /**
     * Delete a trusted signing account.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a trusted signing account.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new CodeSigningAccount resource.
     * 
     * @param name resource name.
     * @return the first stage of the new CodeSigningAccount definition.
     */
    CodeSigningAccount.DefinitionStages.Blank define(String name);
}
