// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.trustedsigning.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties of the certificate profile.
 */
@Fluent
public final class CertificateProfileProperties implements JsonSerializable<CertificateProfileProperties> {
    /*
     * Profile type of the certificate.
     */
    private ProfileType profileType;

    /*
     * Whether to include STREET in the certificate subject name.
     */
    private Boolean includeStreetAddress;

    /*
     * Whether to include L in the certificate subject name. Applicable only for private trust, private trust ci profile
     * types
     */
    private Boolean includeCity;

    /*
     * Whether to include S in the certificate subject name. Applicable only for private trust, private trust ci profile
     * types
     */
    private Boolean includeState;

    /*
     * Whether to include C in the certificate subject name. Applicable only for private trust, private trust ci profile
     * types
     */
    private Boolean includeCountry;

    /*
     * Whether to include PC in the certificate subject name.
     */
    private Boolean includePostalCode;

    /*
     * Identity validation id used for the certificate subject name.
     */
    private String identityValidationId;

    /*
     * Status of the current operation on certificate profile.
     */
    private ProvisioningState provisioningState;

    /*
     * Status of the certificate profile.
     */
    private CertificateProfileStatus status;

    /*
     * List of renewed certificates.
     */
    private List<Certificate> certificates;

    /**
     * Creates an instance of CertificateProfileProperties class.
     */
    public CertificateProfileProperties() {
    }

    /**
     * Get the profileType property: Profile type of the certificate.
     * 
     * @return the profileType value.
     */
    public ProfileType profileType() {
        return this.profileType;
    }

    /**
     * Set the profileType property: Profile type of the certificate.
     * 
     * @param profileType the profileType value to set.
     * @return the CertificateProfileProperties object itself.
     */
    public CertificateProfileProperties withProfileType(ProfileType profileType) {
        this.profileType = profileType;
        return this;
    }

    /**
     * Get the includeStreetAddress property: Whether to include STREET in the certificate subject name.
     * 
     * @return the includeStreetAddress value.
     */
    public Boolean includeStreetAddress() {
        return this.includeStreetAddress;
    }

    /**
     * Set the includeStreetAddress property: Whether to include STREET in the certificate subject name.
     * 
     * @param includeStreetAddress the includeStreetAddress value to set.
     * @return the CertificateProfileProperties object itself.
     */
    public CertificateProfileProperties withIncludeStreetAddress(Boolean includeStreetAddress) {
        this.includeStreetAddress = includeStreetAddress;
        return this;
    }

    /**
     * Get the includeCity property: Whether to include L in the certificate subject name. Applicable only for private
     * trust, private trust ci profile types.
     * 
     * @return the includeCity value.
     */
    public Boolean includeCity() {
        return this.includeCity;
    }

    /**
     * Set the includeCity property: Whether to include L in the certificate subject name. Applicable only for private
     * trust, private trust ci profile types.
     * 
     * @param includeCity the includeCity value to set.
     * @return the CertificateProfileProperties object itself.
     */
    public CertificateProfileProperties withIncludeCity(Boolean includeCity) {
        this.includeCity = includeCity;
        return this;
    }

    /**
     * Get the includeState property: Whether to include S in the certificate subject name. Applicable only for private
     * trust, private trust ci profile types.
     * 
     * @return the includeState value.
     */
    public Boolean includeState() {
        return this.includeState;
    }

    /**
     * Set the includeState property: Whether to include S in the certificate subject name. Applicable only for private
     * trust, private trust ci profile types.
     * 
     * @param includeState the includeState value to set.
     * @return the CertificateProfileProperties object itself.
     */
    public CertificateProfileProperties withIncludeState(Boolean includeState) {
        this.includeState = includeState;
        return this;
    }

    /**
     * Get the includeCountry property: Whether to include C in the certificate subject name. Applicable only for
     * private trust, private trust ci profile types.
     * 
     * @return the includeCountry value.
     */
    public Boolean includeCountry() {
        return this.includeCountry;
    }

    /**
     * Set the includeCountry property: Whether to include C in the certificate subject name. Applicable only for
     * private trust, private trust ci profile types.
     * 
     * @param includeCountry the includeCountry value to set.
     * @return the CertificateProfileProperties object itself.
     */
    public CertificateProfileProperties withIncludeCountry(Boolean includeCountry) {
        this.includeCountry = includeCountry;
        return this;
    }

    /**
     * Get the includePostalCode property: Whether to include PC in the certificate subject name.
     * 
     * @return the includePostalCode value.
     */
    public Boolean includePostalCode() {
        return this.includePostalCode;
    }

    /**
     * Set the includePostalCode property: Whether to include PC in the certificate subject name.
     * 
     * @param includePostalCode the includePostalCode value to set.
     * @return the CertificateProfileProperties object itself.
     */
    public CertificateProfileProperties withIncludePostalCode(Boolean includePostalCode) {
        this.includePostalCode = includePostalCode;
        return this;
    }

    /**
     * Get the identityValidationId property: Identity validation id used for the certificate subject name.
     * 
     * @return the identityValidationId value.
     */
    public String identityValidationId() {
        return this.identityValidationId;
    }

    /**
     * Set the identityValidationId property: Identity validation id used for the certificate subject name.
     * 
     * @param identityValidationId the identityValidationId value to set.
     * @return the CertificateProfileProperties object itself.
     */
    public CertificateProfileProperties withIdentityValidationId(String identityValidationId) {
        this.identityValidationId = identityValidationId;
        return this;
    }

    /**
     * Get the provisioningState property: Status of the current operation on certificate profile.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: Status of the certificate profile.
     * 
     * @return the status value.
     */
    public CertificateProfileStatus status() {
        return this.status;
    }

    /**
     * Get the certificates property: List of renewed certificates.
     * 
     * @return the certificates value.
     */
    public List<Certificate> certificates() {
        return this.certificates;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (profileType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property profileType in model CertificateProfileProperties"));
        }
        if (identityValidationId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property identityValidationId in model CertificateProfileProperties"));
        }
        if (certificates() != null) {
            certificates().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CertificateProfileProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("profileType", this.profileType == null ? null : this.profileType.toString());
        jsonWriter.writeStringField("identityValidationId", this.identityValidationId);
        jsonWriter.writeBooleanField("includeStreetAddress", this.includeStreetAddress);
        jsonWriter.writeBooleanField("includeCity", this.includeCity);
        jsonWriter.writeBooleanField("includeState", this.includeState);
        jsonWriter.writeBooleanField("includeCountry", this.includeCountry);
        jsonWriter.writeBooleanField("includePostalCode", this.includePostalCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CertificateProfileProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CertificateProfileProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CertificateProfileProperties.
     */
    public static CertificateProfileProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CertificateProfileProperties deserializedCertificateProfileProperties = new CertificateProfileProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("profileType".equals(fieldName)) {
                    deserializedCertificateProfileProperties.profileType = ProfileType.fromString(reader.getString());
                } else if ("identityValidationId".equals(fieldName)) {
                    deserializedCertificateProfileProperties.identityValidationId = reader.getString();
                } else if ("includeStreetAddress".equals(fieldName)) {
                    deserializedCertificateProfileProperties.includeStreetAddress
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("includeCity".equals(fieldName)) {
                    deserializedCertificateProfileProperties.includeCity = reader.getNullable(JsonReader::getBoolean);
                } else if ("includeState".equals(fieldName)) {
                    deserializedCertificateProfileProperties.includeState = reader.getNullable(JsonReader::getBoolean);
                } else if ("includeCountry".equals(fieldName)) {
                    deserializedCertificateProfileProperties.includeCountry
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("includePostalCode".equals(fieldName)) {
                    deserializedCertificateProfileProperties.includePostalCode
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedCertificateProfileProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedCertificateProfileProperties.status
                        = CertificateProfileStatus.fromString(reader.getString());
                } else if ("certificates".equals(fieldName)) {
                    List<Certificate> certificates = reader.readArray(reader1 -> Certificate.fromJson(reader1));
                    deserializedCertificateProfileProperties.certificates = certificates;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCertificateProfileProperties;
        });
    }
}
