// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automanage.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;
import java.util.List;

/**
 * Data related to the report detail.
 */
@Fluent
public final class AssignmentReportProperties implements JsonSerializable<AssignmentReportProperties> {
    /*
     * Start time of the configuration profile assignment processing.
     */
    private String startTime;

    /*
     * End time of the configuration profile assignment processing.
     */
    private String endTime;

    /*
     * Last modified time of the configuration profile assignment processing.
     */
    private String lastModifiedTime;

    /*
     * Duration of the configuration profile assignment processing.
     */
    private Duration duration;

    /*
     * Type of the configuration profile assignment processing (Initial/Consistency).
     */
    private String type;

    /*
     * The status of the configuration profile assignment.
     */
    private String status;

    /*
     * The configurationProfile linked to the assignment.
     */
    private String configurationProfile;

    /*
     * List of resources processed by the configuration profile assignment.
     */
    private List<ReportResource> resources;

    /*
     * Error message, if any, returned by the configuration profile assignment processing.
     */
    private ManagementError error;

    /*
     * Version of the report format
     */
    private String reportFormatVersion;

    /**
     * Creates an instance of AssignmentReportProperties class.
     */
    public AssignmentReportProperties() {
    }

    /**
     * Get the startTime property: Start time of the configuration profile assignment processing.
     * 
     * @return the startTime value.
     */
    public String startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: Start time of the configuration profile assignment processing.
     * 
     * @param startTime the startTime value to set.
     * @return the AssignmentReportProperties object itself.
     */
    public AssignmentReportProperties withStartTime(String startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: End time of the configuration profile assignment processing.
     * 
     * @return the endTime value.
     */
    public String endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: End time of the configuration profile assignment processing.
     * 
     * @param endTime the endTime value to set.
     * @return the AssignmentReportProperties object itself.
     */
    public AssignmentReportProperties withEndTime(String endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the lastModifiedTime property: Last modified time of the configuration profile assignment processing.
     * 
     * @return the lastModifiedTime value.
     */
    public String lastModifiedTime() {
        return this.lastModifiedTime;
    }

    /**
     * Get the duration property: Duration of the configuration profile assignment processing.
     * 
     * @return the duration value.
     */
    public Duration duration() {
        return this.duration;
    }

    /**
     * Get the type property: Type of the configuration profile assignment processing (Initial/Consistency).
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the status property: The status of the configuration profile assignment.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the configurationProfile property: The configurationProfile linked to the assignment.
     * 
     * @return the configurationProfile value.
     */
    public String configurationProfile() {
        return this.configurationProfile;
    }

    /**
     * Get the resources property: List of resources processed by the configuration profile assignment.
     * 
     * @return the resources value.
     */
    public List<ReportResource> resources() {
        return this.resources;
    }

    /**
     * Get the error property: Error message, if any, returned by the configuration profile assignment processing.
     * 
     * @return the error value.
     */
    public ManagementError error() {
        return this.error;
    }

    /**
     * Get the reportFormatVersion property: Version of the report format.
     * 
     * @return the reportFormatVersion value.
     */
    public String reportFormatVersion() {
        return this.reportFormatVersion;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resources() != null) {
            resources().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startTime", this.startTime);
        jsonWriter.writeStringField("endTime", this.endTime);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssignmentReportProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssignmentReportProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssignmentReportProperties.
     */
    public static AssignmentReportProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssignmentReportProperties deserializedAssignmentReportProperties = new AssignmentReportProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startTime".equals(fieldName)) {
                    deserializedAssignmentReportProperties.startTime = reader.getString();
                } else if ("endTime".equals(fieldName)) {
                    deserializedAssignmentReportProperties.endTime = reader.getString();
                } else if ("lastModifiedTime".equals(fieldName)) {
                    deserializedAssignmentReportProperties.lastModifiedTime = reader.getString();
                } else if ("duration".equals(fieldName)) {
                    deserializedAssignmentReportProperties.duration
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("type".equals(fieldName)) {
                    deserializedAssignmentReportProperties.type = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedAssignmentReportProperties.status = reader.getString();
                } else if ("configurationProfile".equals(fieldName)) {
                    deserializedAssignmentReportProperties.configurationProfile = reader.getString();
                } else if ("resources".equals(fieldName)) {
                    List<ReportResource> resources = reader.readArray(reader1 -> ReportResource.fromJson(reader1));
                    deserializedAssignmentReportProperties.resources = resources;
                } else if ("error".equals(fieldName)) {
                    deserializedAssignmentReportProperties.error = ManagementError.fromJson(reader);
                } else if ("reportFormatVersion".equals(fieldName)) {
                    deserializedAssignmentReportProperties.reportFormatVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssignmentReportProperties;
        });
    }
}
