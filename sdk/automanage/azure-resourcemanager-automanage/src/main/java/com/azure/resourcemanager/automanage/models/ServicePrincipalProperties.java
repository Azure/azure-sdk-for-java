// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automanage.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Service Principal properties for the subscription.
 */
@Immutable
public final class ServicePrincipalProperties implements JsonSerializable<ServicePrincipalProperties> {
    /*
     * The Service Principal Id for the subscription.
     */
    private String servicePrincipalId;

    /*
     * Returns the contributor RBAC Role exist or not for the Service Principal Id.
     */
    private Boolean authorizationSet;

    /**
     * Creates an instance of ServicePrincipalProperties class.
     */
    public ServicePrincipalProperties() {
    }

    /**
     * Get the servicePrincipalId property: The Service Principal Id for the subscription.
     * 
     * @return the servicePrincipalId value.
     */
    public String servicePrincipalId() {
        return this.servicePrincipalId;
    }

    /**
     * Get the authorizationSet property: Returns the contributor RBAC Role exist or not for the Service Principal Id.
     * 
     * @return the authorizationSet value.
     */
    public Boolean authorizationSet() {
        return this.authorizationSet;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServicePrincipalProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServicePrincipalProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServicePrincipalProperties.
     */
    public static ServicePrincipalProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServicePrincipalProperties deserializedServicePrincipalProperties = new ServicePrincipalProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("servicePrincipalId".equals(fieldName)) {
                    deserializedServicePrincipalProperties.servicePrincipalId = reader.getString();
                } else if ("authorizationSet".equals(fieldName)) {
                    deserializedServicePrincipalProperties.authorizationSet
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServicePrincipalProperties;
        });
    }
}
