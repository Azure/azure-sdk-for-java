// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automanage.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.automanage.fluent.models.BestPracticeInner;

/** An instance of this class provides access to all the operations defined in BestPracticesVersionsClient. */
public interface BestPracticesVersionsClient {
    /**
     * Get information about a Automanage best practice version.
     *
     * @param bestPracticeName The Automanage best practice name.
     * @param versionName The Automanage best practice version name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a Automanage best practice version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BestPracticeInner get(String bestPracticeName, String versionName);

    /**
     * Get information about a Automanage best practice version.
     *
     * @param bestPracticeName The Automanage best practice name.
     * @param versionName The Automanage best practice version name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a Automanage best practice version along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BestPracticeInner> getWithResponse(String bestPracticeName, String versionName, Context context);

    /**
     * Retrieve a list of Automanage best practices versions.
     *
     * @param bestPracticeName The Automanage best practice name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the list best practice operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BestPracticeInner> listByTenant(String bestPracticeName);

    /**
     * Retrieve a list of Automanage best practices versions.
     *
     * @param bestPracticeName The Automanage best practice name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the list best practice operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BestPracticeInner> listByTenant(String bestPracticeName, Context context);
}
