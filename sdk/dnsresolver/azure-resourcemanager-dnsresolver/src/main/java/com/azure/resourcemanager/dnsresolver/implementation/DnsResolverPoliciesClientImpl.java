// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.SubResource;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.dnsresolver.fluent.DnsResolverPoliciesClient;
import com.azure.resourcemanager.dnsresolver.fluent.models.DnsResolverPolicyInner;
import com.azure.resourcemanager.dnsresolver.models.DnsResolverPolicyListResult;
import com.azure.resourcemanager.dnsresolver.models.DnsResolverPolicyPatch;
import com.azure.resourcemanager.dnsresolver.models.SubResourceListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DnsResolverPoliciesClient.
 */
public final class DnsResolverPoliciesClientImpl implements DnsResolverPoliciesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DnsResolverPoliciesService service;

    /**
     * The service client containing this operation class.
     */
    private final DnsResolverManagementClientImpl client;

    /**
     * Initializes an instance of DnsResolverPoliciesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DnsResolverPoliciesClientImpl(DnsResolverManagementClientImpl client) {
        this.service = RestProxy.create(DnsResolverPoliciesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DnsResolverManagementClientDnsResolverPolicies to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DnsResolverManagemen")
    public interface DnsResolverPoliciesService {
        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolverPolicies/{dnsResolverPolicyName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsResolverPolicyName") String dnsResolverPolicyName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @BodyParam("application/json") DnsResolverPolicyInner parameters, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolverPolicies/{dnsResolverPolicyName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsResolverPolicyName") String dnsResolverPolicyName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("If-Match") String ifMatch,
            @BodyParam("application/json") DnsResolverPolicyPatch parameters, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolverPolicies/{dnsResolverPolicyName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsResolverPolicyName") String dnsResolverPolicyName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolverPolicies/{dnsResolverPolicyName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DnsResolverPolicyInner>> getByResourceGroup(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsResolverPolicyName") String dnsResolverPolicyName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolverPolicies")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DnsResolverPolicyListResult>> listByResourceGroup(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("api-version") String apiVersion,
            @QueryParam("$top") Integer top, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Network/dnsResolverPolicies")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DnsResolverPolicyListResult>> list(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion,
            @QueryParam("$top") Integer top, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/listDnsResolverPolicies")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubResourceListResult>> listByVirtualNetwork(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualNetworkName") String virtualNetworkName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DnsResolverPolicyListResult>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DnsResolverPolicyListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubResourceListResult>> listByVirtualNetworkNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Creates or updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String dnsResolverPolicyName, DnsResolverPolicyInner parameters, String ifMatch, String ifNoneMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dnsResolverPolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dnsResolverPolicyName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, dnsResolverPolicyName, this.client.getApiVersion(), ifMatch, ifNoneMatch, parameters,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String dnsResolverPolicyName, DnsResolverPolicyInner parameters, String ifMatch, String ifNoneMatch,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dnsResolverPolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dnsResolverPolicyName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            dnsResolverPolicyName, this.client.getApiVersion(), ifMatch, ifNoneMatch, parameters, accept, context);
    }

    /**
     * Creates or updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a DNS resolver policy.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DnsResolverPolicyInner>, DnsResolverPolicyInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String dnsResolverPolicyName, DnsResolverPolicyInner parameters, String ifMatch,
        String ifNoneMatch) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName,
            dnsResolverPolicyName, parameters, ifMatch, ifNoneMatch);
        return this.client.<DnsResolverPolicyInner, DnsResolverPolicyInner>getLroResult(mono,
            this.client.getHttpPipeline(), DnsResolverPolicyInner.class, DnsResolverPolicyInner.class,
            this.client.getContext());
    }

    /**
     * Creates or updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a DNS resolver policy.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DnsResolverPolicyInner>, DnsResolverPolicyInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String dnsResolverPolicyName, DnsResolverPolicyInner parameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName,
            dnsResolverPolicyName, parameters, ifMatch, ifNoneMatch);
        return this.client.<DnsResolverPolicyInner, DnsResolverPolicyInner>getLroResult(mono,
            this.client.getHttpPipeline(), DnsResolverPolicyInner.class, DnsResolverPolicyInner.class,
            this.client.getContext());
    }

    /**
     * Creates or updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a DNS resolver policy.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DnsResolverPolicyInner>, DnsResolverPolicyInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String dnsResolverPolicyName, DnsResolverPolicyInner parameters, String ifMatch,
        String ifNoneMatch, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName,
            dnsResolverPolicyName, parameters, ifMatch, ifNoneMatch, context);
        return this.client.<DnsResolverPolicyInner, DnsResolverPolicyInner>getLroResult(mono,
            this.client.getHttpPipeline(), DnsResolverPolicyInner.class, DnsResolverPolicyInner.class, context);
    }

    /**
     * Creates or updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a DNS resolver policy.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DnsResolverPolicyInner>, DnsResolverPolicyInner>
        beginCreateOrUpdate(String resourceGroupName, String dnsResolverPolicyName, DnsResolverPolicyInner parameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return this.beginCreateOrUpdateAsync(resourceGroupName, dnsResolverPolicyName, parameters, ifMatch, ifNoneMatch)
            .getSyncPoller();
    }

    /**
     * Creates or updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a DNS resolver policy.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DnsResolverPolicyInner>, DnsResolverPolicyInner> beginCreateOrUpdate(
        String resourceGroupName, String dnsResolverPolicyName, DnsResolverPolicyInner parameters, String ifMatch,
        String ifNoneMatch, Context context) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, dnsResolverPolicyName, parameters, ifMatch, ifNoneMatch,
                context)
            .getSyncPoller();
    }

    /**
     * Creates or updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DnsResolverPolicyInner> createOrUpdateAsync(String resourceGroupName, String dnsResolverPolicyName,
        DnsResolverPolicyInner parameters, String ifMatch, String ifNoneMatch) {
        return beginCreateOrUpdateAsync(resourceGroupName, dnsResolverPolicyName, parameters, ifMatch, ifNoneMatch)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DnsResolverPolicyInner> createOrUpdateAsync(String resourceGroupName, String dnsResolverPolicyName,
        DnsResolverPolicyInner parameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return beginCreateOrUpdateAsync(resourceGroupName, dnsResolverPolicyName, parameters, ifMatch, ifNoneMatch)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DnsResolverPolicyInner> createOrUpdateAsync(String resourceGroupName, String dnsResolverPolicyName,
        DnsResolverPolicyInner parameters, String ifMatch, String ifNoneMatch, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, dnsResolverPolicyName, parameters, ifMatch, ifNoneMatch,
            context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DnsResolverPolicyInner createOrUpdate(String resourceGroupName, String dnsResolverPolicyName,
        DnsResolverPolicyInner parameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return createOrUpdateAsync(resourceGroupName, dnsResolverPolicyName, parameters, ifMatch, ifNoneMatch).block();
    }

    /**
     * Creates or updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DnsResolverPolicyInner createOrUpdate(String resourceGroupName, String dnsResolverPolicyName,
        DnsResolverPolicyInner parameters, String ifMatch, String ifNoneMatch, Context context) {
        return createOrUpdateAsync(resourceGroupName, dnsResolverPolicyName, parameters, ifMatch, ifNoneMatch, context)
            .block();
    }

    /**
     * Updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String dnsResolverPolicyName, DnsResolverPolicyPatch parameters, String ifMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dnsResolverPolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dnsResolverPolicyName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.update(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    dnsResolverPolicyName, this.client.getApiVersion(), ifMatch, parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String dnsResolverPolicyName, DnsResolverPolicyPatch parameters, String ifMatch, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dnsResolverPolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dnsResolverPolicyName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            dnsResolverPolicyName, this.client.getApiVersion(), ifMatch, parameters, accept, context);
    }

    /**
     * Updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a DNS resolver policy.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DnsResolverPolicyInner>, DnsResolverPolicyInner> beginUpdateAsync(
        String resourceGroupName, String dnsResolverPolicyName, DnsResolverPolicyPatch parameters, String ifMatch) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, dnsResolverPolicyName, parameters, ifMatch);
        return this.client.<DnsResolverPolicyInner, DnsResolverPolicyInner>getLroResult(mono,
            this.client.getHttpPipeline(), DnsResolverPolicyInner.class, DnsResolverPolicyInner.class,
            this.client.getContext());
    }

    /**
     * Updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a DNS resolver policy.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DnsResolverPolicyInner>, DnsResolverPolicyInner>
        beginUpdateAsync(String resourceGroupName, String dnsResolverPolicyName, DnsResolverPolicyPatch parameters) {
        final String ifMatch = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, dnsResolverPolicyName, parameters, ifMatch);
        return this.client.<DnsResolverPolicyInner, DnsResolverPolicyInner>getLroResult(mono,
            this.client.getHttpPipeline(), DnsResolverPolicyInner.class, DnsResolverPolicyInner.class,
            this.client.getContext());
    }

    /**
     * Updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a DNS resolver policy.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DnsResolverPolicyInner>, DnsResolverPolicyInner> beginUpdateAsync(
        String resourceGroupName, String dnsResolverPolicyName, DnsResolverPolicyPatch parameters, String ifMatch,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, dnsResolverPolicyName, parameters, ifMatch, context);
        return this.client.<DnsResolverPolicyInner, DnsResolverPolicyInner>getLroResult(mono,
            this.client.getHttpPipeline(), DnsResolverPolicyInner.class, DnsResolverPolicyInner.class, context);
    }

    /**
     * Updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a DNS resolver policy.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DnsResolverPolicyInner>, DnsResolverPolicyInner> beginUpdate(String resourceGroupName,
        String dnsResolverPolicyName, DnsResolverPolicyPatch parameters) {
        final String ifMatch = null;
        return this.beginUpdateAsync(resourceGroupName, dnsResolverPolicyName, parameters, ifMatch).getSyncPoller();
    }

    /**
     * Updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a DNS resolver policy.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DnsResolverPolicyInner>, DnsResolverPolicyInner> beginUpdate(String resourceGroupName,
        String dnsResolverPolicyName, DnsResolverPolicyPatch parameters, String ifMatch, Context context) {
        return this.beginUpdateAsync(resourceGroupName, dnsResolverPolicyName, parameters, ifMatch, context)
            .getSyncPoller();
    }

    /**
     * Updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DnsResolverPolicyInner> updateAsync(String resourceGroupName, String dnsResolverPolicyName,
        DnsResolverPolicyPatch parameters, String ifMatch) {
        return beginUpdateAsync(resourceGroupName, dnsResolverPolicyName, parameters, ifMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DnsResolverPolicyInner> updateAsync(String resourceGroupName, String dnsResolverPolicyName,
        DnsResolverPolicyPatch parameters) {
        final String ifMatch = null;
        return beginUpdateAsync(resourceGroupName, dnsResolverPolicyName, parameters, ifMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DnsResolverPolicyInner> updateAsync(String resourceGroupName, String dnsResolverPolicyName,
        DnsResolverPolicyPatch parameters, String ifMatch, Context context) {
        return beginUpdateAsync(resourceGroupName, dnsResolverPolicyName, parameters, ifMatch, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DnsResolverPolicyInner update(String resourceGroupName, String dnsResolverPolicyName,
        DnsResolverPolicyPatch parameters) {
        final String ifMatch = null;
        return updateAsync(resourceGroupName, dnsResolverPolicyName, parameters, ifMatch).block();
    }

    /**
     * Updates a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DnsResolverPolicyInner update(String resourceGroupName, String dnsResolverPolicyName,
        DnsResolverPolicyPatch parameters, String ifMatch, Context context) {
        return updateAsync(resourceGroupName, dnsResolverPolicyName, parameters, ifMatch, context).block();
    }

    /**
     * Deletes a DNS resolver policy. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String dnsResolverPolicyName, String ifMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dnsResolverPolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dnsResolverPolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, dnsResolverPolicyName, this.client.getApiVersion(), ifMatch, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes a DNS resolver policy. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String dnsResolverPolicyName, String ifMatch, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dnsResolverPolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dnsResolverPolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            dnsResolverPolicyName, this.client.getApiVersion(), ifMatch, accept, context);
    }

    /**
     * Deletes a DNS resolver policy. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String dnsResolverPolicyName,
        String ifMatch) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, dnsResolverPolicyName, ifMatch);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes a DNS resolver policy. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName,
        String dnsResolverPolicyName) {
        final String ifMatch = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, dnsResolverPolicyName, ifMatch);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes a DNS resolver policy. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String dnsResolverPolicyName,
        String ifMatch, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, dnsResolverPolicyName, ifMatch, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Deletes a DNS resolver policy. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String dnsResolverPolicyName) {
        final String ifMatch = null;
        return this.beginDeleteAsync(resourceGroupName, dnsResolverPolicyName, ifMatch).getSyncPoller();
    }

    /**
     * Deletes a DNS resolver policy. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String dnsResolverPolicyName,
        String ifMatch, Context context) {
        return this.beginDeleteAsync(resourceGroupName, dnsResolverPolicyName, ifMatch, context).getSyncPoller();
    }

    /**
     * Deletes a DNS resolver policy. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String dnsResolverPolicyName, String ifMatch) {
        return beginDeleteAsync(resourceGroupName, dnsResolverPolicyName, ifMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a DNS resolver policy. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String dnsResolverPolicyName) {
        final String ifMatch = null;
        return beginDeleteAsync(resourceGroupName, dnsResolverPolicyName, ifMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a DNS resolver policy. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String dnsResolverPolicyName, String ifMatch,
        Context context) {
        return beginDeleteAsync(resourceGroupName, dnsResolverPolicyName, ifMatch, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a DNS resolver policy. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String dnsResolverPolicyName) {
        final String ifMatch = null;
        deleteAsync(resourceGroupName, dnsResolverPolicyName, ifMatch).block();
    }

    /**
     * Deletes a DNS resolver policy. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String dnsResolverPolicyName, String ifMatch, Context context) {
        deleteAsync(resourceGroupName, dnsResolverPolicyName, ifMatch, context).block();
    }

    /**
     * Gets properties of a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a DNS resolver policy along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DnsResolverPolicyInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String dnsResolverPolicyName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dnsResolverPolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dnsResolverPolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.getByResourceGroup(this.client.getEndpoint(), this.client.getSubscriptionId(),
                    resourceGroupName, dnsResolverPolicyName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets properties of a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a DNS resolver policy along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DnsResolverPolicyInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String dnsResolverPolicyName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dnsResolverPolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dnsResolverPolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getByResourceGroup(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            dnsResolverPolicyName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets properties of a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a DNS resolver policy on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DnsResolverPolicyInner> getByResourceGroupAsync(String resourceGroupName,
        String dnsResolverPolicyName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, dnsResolverPolicyName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets properties of a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a DNS resolver policy along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DnsResolverPolicyInner> getByResourceGroupWithResponse(String resourceGroupName,
        String dnsResolverPolicyName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, dnsResolverPolicyName, context).block();
    }

    /**
     * Gets properties of a DNS resolver policy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a DNS resolver policy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DnsResolverPolicyInner getByResourceGroup(String resourceGroupName, String dnsResolverPolicyName) {
        return getByResourceGroupWithResponse(resourceGroupName, dnsResolverPolicyName, Context.NONE).getValue();
    }

    /**
     * Lists DNS resolver policies within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on DNS resolver policies along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DnsResolverPolicyInner>> listByResourceGroupSinglePageAsync(String resourceGroupName,
        Integer top) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByResourceGroup(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, this.client.getApiVersion(), top, accept, context))
            .<PagedResponse<DnsResolverPolicyInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists DNS resolver policies within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on DNS resolver policies along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DnsResolverPolicyInner>> listByResourceGroupSinglePageAsync(String resourceGroupName,
        Integer top, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                this.client.getApiVersion(), top, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Lists DNS resolver policies within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on DNS resolver policies as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DnsResolverPolicyInner> listByResourceGroupAsync(String resourceGroupName, Integer top) {
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName, top),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Lists DNS resolver policies within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on DNS resolver policies as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DnsResolverPolicyInner> listByResourceGroupAsync(String resourceGroupName) {
        final Integer top = null;
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName, top),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Lists DNS resolver policies within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on DNS resolver policies as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DnsResolverPolicyInner> listByResourceGroupAsync(String resourceGroupName, Integer top,
        Context context) {
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName, top, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists DNS resolver policies within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on DNS resolver policies as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DnsResolverPolicyInner> listByResourceGroup(String resourceGroupName) {
        final Integer top = null;
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, top));
    }

    /**
     * Lists DNS resolver policies within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on DNS resolver policies as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DnsResolverPolicyInner> listByResourceGroup(String resourceGroupName, Integer top,
        Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, top, context));
    }

    /**
     * Lists DNS resolver policies in all resource groups of a subscription.
     * 
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on DNS resolver policies along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DnsResolverPolicyInner>> listSinglePageAsync(Integer top) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getSubscriptionId(),
                this.client.getApiVersion(), top, accept, context))
            .<PagedResponse<DnsResolverPolicyInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists DNS resolver policies in all resource groups of a subscription.
     * 
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on DNS resolver policies along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DnsResolverPolicyInner>> listSinglePageAsync(Integer top, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getSubscriptionId(), this.client.getApiVersion(), top, accept,
                context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Lists DNS resolver policies in all resource groups of a subscription.
     * 
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on DNS resolver policies as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DnsResolverPolicyInner> listAsync(Integer top) {
        return new PagedFlux<>(() -> listSinglePageAsync(top), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists DNS resolver policies in all resource groups of a subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on DNS resolver policies as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DnsResolverPolicyInner> listAsync() {
        final Integer top = null;
        return new PagedFlux<>(() -> listSinglePageAsync(top), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists DNS resolver policies in all resource groups of a subscription.
     * 
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on DNS resolver policies as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DnsResolverPolicyInner> listAsync(Integer top, Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(top, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists DNS resolver policies in all resource groups of a subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on DNS resolver policies as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DnsResolverPolicyInner> list() {
        final Integer top = null;
        return new PagedIterable<>(listAsync(top));
    }

    /**
     * Lists DNS resolver policies in all resource groups of a subscription.
     * 
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on DNS resolver policies as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DnsResolverPolicyInner> list(Integer top, Context context) {
        return new PagedIterable<>(listAsync(top, context));
    }

    /**
     * Lists DNS resolver policy resource IDs linked to a virtual network.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the virtual network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on sub-resources along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubResource>> listByVirtualNetworkSinglePageAsync(String resourceGroupName,
        String virtualNetworkName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (virtualNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter virtualNetworkName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByVirtualNetwork(this.client.getEndpoint(), this.client.getSubscriptionId(),
                    resourceGroupName, virtualNetworkName, this.client.getApiVersion(), accept, context))
            .<PagedResponse<SubResource>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists DNS resolver policy resource IDs linked to a virtual network.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the virtual network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on sub-resources along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubResource>> listByVirtualNetworkSinglePageAsync(String resourceGroupName,
        String virtualNetworkName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (virtualNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter virtualNetworkName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByVirtualNetwork(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                virtualNetworkName, this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Lists DNS resolver policy resource IDs linked to a virtual network.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the virtual network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on sub-resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SubResource> listByVirtualNetworkAsync(String resourceGroupName, String virtualNetworkName) {
        return new PagedFlux<>(() -> listByVirtualNetworkSinglePageAsync(resourceGroupName, virtualNetworkName),
            nextLink -> listByVirtualNetworkNextSinglePageAsync(nextLink));
    }

    /**
     * Lists DNS resolver policy resource IDs linked to a virtual network.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the virtual network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on sub-resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SubResource> listByVirtualNetworkAsync(String resourceGroupName, String virtualNetworkName,
        Context context) {
        return new PagedFlux<>(
            () -> listByVirtualNetworkSinglePageAsync(resourceGroupName, virtualNetworkName, context),
            nextLink -> listByVirtualNetworkNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists DNS resolver policy resource IDs linked to a virtual network.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the virtual network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on sub-resources as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SubResource> listByVirtualNetwork(String resourceGroupName, String virtualNetworkName) {
        return new PagedIterable<>(listByVirtualNetworkAsync(resourceGroupName, virtualNetworkName));
    }

    /**
     * Lists DNS resolver policy resource IDs linked to a virtual network.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the virtual network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on sub-resources as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SubResource> listByVirtualNetwork(String resourceGroupName, String virtualNetworkName,
        Context context) {
        return new PagedIterable<>(listByVirtualNetworkAsync(resourceGroupName, virtualNetworkName, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on DNS resolver policies along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DnsResolverPolicyInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DnsResolverPolicyInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on DNS resolver policies along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DnsResolverPolicyInner>> listByResourceGroupNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on DNS resolver policies along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DnsResolverPolicyInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DnsResolverPolicyInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on DNS resolver policies along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DnsResolverPolicyInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on sub-resources along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubResource>> listByVirtualNetworkNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByVirtualNetworkNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SubResource>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on sub-resources along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubResource>> listByVirtualNetworkNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByVirtualNetworkNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
