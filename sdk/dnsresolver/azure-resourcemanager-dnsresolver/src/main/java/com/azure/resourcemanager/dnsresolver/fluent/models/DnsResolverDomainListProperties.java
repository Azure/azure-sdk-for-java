// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dnsresolver.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.dnsresolver.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * Represents the properties of a DNS resolver domain list.
 */
@Fluent
public final class DnsResolverDomainListProperties implements JsonSerializable<DnsResolverDomainListProperties> {
    /*
     * The domains in the domain list. Will be null if user is using large domain list.
     */
    private List<String> domains;

    /*
     * The URL for bulk upload or download for domain lists containing larger set of domains. This will be populated if
     * domains is empty or null.
     */
    private String domainsUrl;

    /*
     * The current provisioning state of the DNS resolver domain list. This is a read-only property and any attempt to
     * set this value will be ignored.
     */
    private ProvisioningState provisioningState;

    /*
     * The resourceGuid property of the DNS resolver domain list resource.
     */
    private String resourceGuid;

    /**
     * Creates an instance of DnsResolverDomainListProperties class.
     */
    public DnsResolverDomainListProperties() {
    }

    /**
     * Get the domains property: The domains in the domain list. Will be null if user is using large domain list.
     * 
     * @return the domains value.
     */
    public List<String> domains() {
        return this.domains;
    }

    /**
     * Set the domains property: The domains in the domain list. Will be null if user is using large domain list.
     * 
     * @param domains the domains value to set.
     * @return the DnsResolverDomainListProperties object itself.
     */
    public DnsResolverDomainListProperties withDomains(List<String> domains) {
        this.domains = domains;
        return this;
    }

    /**
     * Get the domainsUrl property: The URL for bulk upload or download for domain lists containing larger set of
     * domains. This will be populated if domains is empty or null.
     * 
     * @return the domainsUrl value.
     */
    public String domainsUrl() {
        return this.domainsUrl;
    }

    /**
     * Get the provisioningState property: The current provisioning state of the DNS resolver domain list. This is a
     * read-only property and any attempt to set this value will be ignored.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the resourceGuid property: The resourceGuid property of the DNS resolver domain list resource.
     * 
     * @return the resourceGuid value.
     */
    public String resourceGuid() {
        return this.resourceGuid;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("domains", this.domains, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DnsResolverDomainListProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DnsResolverDomainListProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DnsResolverDomainListProperties.
     */
    public static DnsResolverDomainListProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DnsResolverDomainListProperties deserializedDnsResolverDomainListProperties
                = new DnsResolverDomainListProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("domains".equals(fieldName)) {
                    List<String> domains = reader.readArray(reader1 -> reader1.getString());
                    deserializedDnsResolverDomainListProperties.domains = domains;
                } else if ("domainsUrl".equals(fieldName)) {
                    deserializedDnsResolverDomainListProperties.domainsUrl = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDnsResolverDomainListProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("resourceGuid".equals(fieldName)) {
                    deserializedDnsResolverDomainListProperties.resourceGuid = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDnsResolverDomainListProperties;
        });
    }
}
