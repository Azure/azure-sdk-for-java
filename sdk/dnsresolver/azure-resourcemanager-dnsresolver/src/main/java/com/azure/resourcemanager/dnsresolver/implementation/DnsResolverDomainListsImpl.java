// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.dnsresolver.fluent.DnsResolverDomainListsClient;
import com.azure.resourcemanager.dnsresolver.fluent.models.DnsResolverDomainListInner;
import com.azure.resourcemanager.dnsresolver.models.DnsResolverDomainList;
import com.azure.resourcemanager.dnsresolver.models.DnsResolverDomainLists;

public final class DnsResolverDomainListsImpl implements DnsResolverDomainLists {
    private static final ClientLogger LOGGER = new ClientLogger(DnsResolverDomainListsImpl.class);

    private final DnsResolverDomainListsClient innerClient;

    private final com.azure.resourcemanager.dnsresolver.DnsResolverManager serviceManager;

    public DnsResolverDomainListsImpl(DnsResolverDomainListsClient innerClient,
        com.azure.resourcemanager.dnsresolver.DnsResolverManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String dnsResolverDomainListName) {
        this.serviceClient().delete(resourceGroupName, dnsResolverDomainListName);
    }

    public void delete(String resourceGroupName, String dnsResolverDomainListName, String ifMatch, Context context) {
        this.serviceClient().delete(resourceGroupName, dnsResolverDomainListName, ifMatch, context);
    }

    public Response<DnsResolverDomainList> getByResourceGroupWithResponse(String resourceGroupName,
        String dnsResolverDomainListName, Context context) {
        Response<DnsResolverDomainListInner> inner = this.serviceClient()
            .getByResourceGroupWithResponse(resourceGroupName, dnsResolverDomainListName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DnsResolverDomainListImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DnsResolverDomainList getByResourceGroup(String resourceGroupName, String dnsResolverDomainListName) {
        DnsResolverDomainListInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, dnsResolverDomainListName);
        if (inner != null) {
            return new DnsResolverDomainListImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<DnsResolverDomainList> listByResourceGroup(String resourceGroupName) {
        PagedIterable<DnsResolverDomainListInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DnsResolverDomainListImpl(inner1, this.manager()));
    }

    public PagedIterable<DnsResolverDomainList> listByResourceGroup(String resourceGroupName, Integer top,
        Context context) {
        PagedIterable<DnsResolverDomainListInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, top, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DnsResolverDomainListImpl(inner1, this.manager()));
    }

    public PagedIterable<DnsResolverDomainList> list() {
        PagedIterable<DnsResolverDomainListInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DnsResolverDomainListImpl(inner1, this.manager()));
    }

    public PagedIterable<DnsResolverDomainList> list(Integer top, Context context) {
        PagedIterable<DnsResolverDomainListInner> inner = this.serviceClient().list(top, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DnsResolverDomainListImpl(inner1, this.manager()));
    }

    public DnsResolverDomainList getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dnsResolverDomainListName = ResourceManagerUtils.getValueFromIdByName(id, "dnsResolverDomainLists");
        if (dnsResolverDomainListName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'dnsResolverDomainLists'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, dnsResolverDomainListName, Context.NONE)
            .getValue();
    }

    public Response<DnsResolverDomainList> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dnsResolverDomainListName = ResourceManagerUtils.getValueFromIdByName(id, "dnsResolverDomainLists");
        if (dnsResolverDomainListName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'dnsResolverDomainLists'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, dnsResolverDomainListName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dnsResolverDomainListName = ResourceManagerUtils.getValueFromIdByName(id, "dnsResolverDomainLists");
        if (dnsResolverDomainListName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'dnsResolverDomainLists'.", id)));
        }
        String localIfMatch = null;
        this.delete(resourceGroupName, dnsResolverDomainListName, localIfMatch, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, String ifMatch, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dnsResolverDomainListName = ResourceManagerUtils.getValueFromIdByName(id, "dnsResolverDomainLists");
        if (dnsResolverDomainListName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'dnsResolverDomainLists'.", id)));
        }
        this.delete(resourceGroupName, dnsResolverDomainListName, ifMatch, context);
    }

    private DnsResolverDomainListsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.dnsresolver.DnsResolverManager manager() {
        return this.serviceManager;
    }

    public DnsResolverDomainListImpl define(String name) {
        return new DnsResolverDomainListImpl(name, this.manager());
    }
}
