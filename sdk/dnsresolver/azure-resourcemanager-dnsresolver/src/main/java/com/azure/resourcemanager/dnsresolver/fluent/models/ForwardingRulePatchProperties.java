// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.dnsresolver.models.ForwardingRuleState;
import com.azure.resourcemanager.dnsresolver.models.TargetDnsServer;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Represents the updatable properties of a forwarding rule within a DNS forwarding ruleset.
 */
@Fluent
public final class ForwardingRulePatchProperties implements JsonSerializable<ForwardingRulePatchProperties> {
    /*
     * DNS servers to forward the DNS query to.
     */
    private List<TargetDnsServer> targetDnsServers;

    /*
     * Metadata attached to the forwarding rule.
     */
    private Map<String, String> metadata;

    /*
     * The state of forwarding rule.
     */
    private ForwardingRuleState forwardingRuleState;

    /**
     * Creates an instance of ForwardingRulePatchProperties class.
     */
    public ForwardingRulePatchProperties() {
    }

    /**
     * Get the targetDnsServers property: DNS servers to forward the DNS query to.
     * 
     * @return the targetDnsServers value.
     */
    public List<TargetDnsServer> targetDnsServers() {
        return this.targetDnsServers;
    }

    /**
     * Set the targetDnsServers property: DNS servers to forward the DNS query to.
     * 
     * @param targetDnsServers the targetDnsServers value to set.
     * @return the ForwardingRulePatchProperties object itself.
     */
    public ForwardingRulePatchProperties withTargetDnsServers(List<TargetDnsServer> targetDnsServers) {
        this.targetDnsServers = targetDnsServers;
        return this;
    }

    /**
     * Get the metadata property: Metadata attached to the forwarding rule.
     * 
     * @return the metadata value.
     */
    public Map<String, String> metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Metadata attached to the forwarding rule.
     * 
     * @param metadata the metadata value to set.
     * @return the ForwardingRulePatchProperties object itself.
     */
    public ForwardingRulePatchProperties withMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the forwardingRuleState property: The state of forwarding rule.
     * 
     * @return the forwardingRuleState value.
     */
    public ForwardingRuleState forwardingRuleState() {
        return this.forwardingRuleState;
    }

    /**
     * Set the forwardingRuleState property: The state of forwarding rule.
     * 
     * @param forwardingRuleState the forwardingRuleState value to set.
     * @return the ForwardingRulePatchProperties object itself.
     */
    public ForwardingRulePatchProperties withForwardingRuleState(ForwardingRuleState forwardingRuleState) {
        this.forwardingRuleState = forwardingRuleState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetDnsServers() != null) {
            targetDnsServers().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("targetDnsServers", this.targetDnsServers,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("forwardingRuleState",
            this.forwardingRuleState == null ? null : this.forwardingRuleState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ForwardingRulePatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ForwardingRulePatchProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ForwardingRulePatchProperties.
     */
    public static ForwardingRulePatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ForwardingRulePatchProperties deserializedForwardingRulePatchProperties
                = new ForwardingRulePatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetDnsServers".equals(fieldName)) {
                    List<TargetDnsServer> targetDnsServers
                        = reader.readArray(reader1 -> TargetDnsServer.fromJson(reader1));
                    deserializedForwardingRulePatchProperties.targetDnsServers = targetDnsServers;
                } else if ("metadata".equals(fieldName)) {
                    Map<String, String> metadata = reader.readMap(reader1 -> reader1.getString());
                    deserializedForwardingRulePatchProperties.metadata = metadata;
                } else if ("forwardingRuleState".equals(fieldName)) {
                    deserializedForwardingRulePatchProperties.forwardingRuleState
                        = ForwardingRuleState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedForwardingRulePatchProperties;
        });
    }
}
