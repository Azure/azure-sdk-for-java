// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.models;

import com.azure.core.management.Region;
import com.azure.core.management.SubResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.dnsresolver.fluent.models.DnsSecurityRuleInner;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of DnsSecurityRule.
 */
public interface DnsSecurityRule {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the etag property: ETag of the DNS security rule.
     * 
     * @return the etag value.
     */
    String etag();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the priority property: The priority of the DNS security rule.
     * 
     * @return the priority value.
     */
    int priority();

    /**
     * Gets the action property: The action to take on DNS requests that match the DNS security rule.
     * 
     * @return the action value.
     */
    DnsSecurityRuleAction action();

    /**
     * Gets the dnsResolverDomainLists property: DNS resolver policy domains lists that the DNS security rule applies
     * to.
     * 
     * @return the dnsResolverDomainLists value.
     */
    List<SubResource> dnsResolverDomainLists();

    /**
     * Gets the dnsSecurityRuleState property: The state of DNS security rule.
     * 
     * @return the dnsSecurityRuleState value.
     */
    DnsSecurityRuleState dnsSecurityRuleState();

    /**
     * Gets the provisioningState property: The current provisioning state of the DNS security rule. This is a read-only
     * property and any attempt to set this value will be ignored.
     * 
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.dnsresolver.fluent.models.DnsSecurityRuleInner object.
     * 
     * @return the inner object.
     */
    DnsSecurityRuleInner innerModel();

    /**
     * The entirety of the DnsSecurityRule definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithParentResource, DefinitionStages.WithPriority, DefinitionStages.WithAction,
        DefinitionStages.WithDnsResolverDomainLists, DefinitionStages.WithCreate {
    }

    /**
     * The DnsSecurityRule definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the DnsSecurityRule definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the DnsSecurityRule definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }

        /**
         * The stage of the DnsSecurityRule definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, dnsResolverPolicyName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param dnsResolverPolicyName The name of the DNS resolver policy.
             * @return the next definition stage.
             */
            WithPriority withExistingDnsResolverPolicy(String resourceGroupName, String dnsResolverPolicyName);
        }

        /**
         * The stage of the DnsSecurityRule definition allowing to specify priority.
         */
        interface WithPriority {
            /**
             * Specifies the priority property: The priority of the DNS security rule..
             * 
             * @param priority The priority of the DNS security rule.
             * @return the next definition stage.
             */
            WithAction withPriority(int priority);
        }

        /**
         * The stage of the DnsSecurityRule definition allowing to specify action.
         */
        interface WithAction {
            /**
             * Specifies the action property: The action to take on DNS requests that match the DNS security rule..
             * 
             * @param action The action to take on DNS requests that match the DNS security rule.
             * @return the next definition stage.
             */
            WithDnsResolverDomainLists withAction(DnsSecurityRuleAction action);
        }

        /**
         * The stage of the DnsSecurityRule definition allowing to specify dnsResolverDomainLists.
         */
        interface WithDnsResolverDomainLists {
            /**
             * Specifies the dnsResolverDomainLists property: DNS resolver policy domains lists that the DNS security
             * rule applies to..
             * 
             * @param dnsResolverDomainLists DNS resolver policy domains lists that the DNS security rule applies to.
             * @return the next definition stage.
             */
            WithCreate withDnsResolverDomainLists(List<SubResource> dnsResolverDomainLists);
        }

        /**
         * The stage of the DnsSecurityRule definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithDnsSecurityRuleState,
            DefinitionStages.WithIfMatch, DefinitionStages.WithIfNoneMatch {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            DnsSecurityRule create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            DnsSecurityRule create(Context context);
        }

        /**
         * The stage of the DnsSecurityRule definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the DnsSecurityRule definition allowing to specify dnsSecurityRuleState.
         */
        interface WithDnsSecurityRuleState {
            /**
             * Specifies the dnsSecurityRuleState property: The state of DNS security rule..
             * 
             * @param dnsSecurityRuleState The state of DNS security rule.
             * @return the next definition stage.
             */
            WithCreate withDnsSecurityRuleState(DnsSecurityRuleState dnsSecurityRuleState);
        }

        /**
         * The stage of the DnsSecurityRule definition allowing to specify ifMatch.
         */
        interface WithIfMatch {
            /**
             * Specifies the ifMatch property: ETag of the resource. Omit this value to always overwrite the current
             * resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes..
             * 
             * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify
             * the last-seen ETag value to prevent accidentally overwriting any concurrent changes.
             * @return the next definition stage.
             */
            WithCreate withIfMatch(String ifMatch);
        }

        /**
         * The stage of the DnsSecurityRule definition allowing to specify ifNoneMatch.
         */
        interface WithIfNoneMatch {
            /**
             * Specifies the ifNoneMatch property: Set to '*' to allow a new resource to be created, but to prevent
             * updating an existing resource. Other values will be ignored..
             * 
             * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
             * resource. Other values will be ignored.
             * @return the next definition stage.
             */
            WithCreate withIfNoneMatch(String ifNoneMatch);
        }
    }

    /**
     * Begins update for the DnsSecurityRule resource.
     * 
     * @return the stage of resource update.
     */
    DnsSecurityRule.Update update();

    /**
     * The template for DnsSecurityRule update.
     */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithAction, UpdateStages.WithDnsResolverDomainLists,
        UpdateStages.WithDnsSecurityRuleState, UpdateStages.WithPriority, UpdateStages.WithIfMatch {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        DnsSecurityRule apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        DnsSecurityRule apply(Context context);
    }

    /**
     * The DnsSecurityRule update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the DnsSecurityRule update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Tags for DNS security rule..
             * 
             * @param tags Tags for DNS security rule.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the DnsSecurityRule update allowing to specify action.
         */
        interface WithAction {
            /**
             * Specifies the action property: The action to take on DNS requests that match the DNS security rule..
             * 
             * @param action The action to take on DNS requests that match the DNS security rule.
             * @return the next definition stage.
             */
            Update withAction(DnsSecurityRuleAction action);
        }

        /**
         * The stage of the DnsSecurityRule update allowing to specify dnsResolverDomainLists.
         */
        interface WithDnsResolverDomainLists {
            /**
             * Specifies the dnsResolverDomainLists property: DNS resolver policy domains lists that the DNS security
             * rule applies to..
             * 
             * @param dnsResolverDomainLists DNS resolver policy domains lists that the DNS security rule applies to.
             * @return the next definition stage.
             */
            Update withDnsResolverDomainLists(List<SubResource> dnsResolverDomainLists);
        }

        /**
         * The stage of the DnsSecurityRule update allowing to specify dnsSecurityRuleState.
         */
        interface WithDnsSecurityRuleState {
            /**
             * Specifies the dnsSecurityRuleState property: The state of DNS security rule..
             * 
             * @param dnsSecurityRuleState The state of DNS security rule.
             * @return the next definition stage.
             */
            Update withDnsSecurityRuleState(DnsSecurityRuleState dnsSecurityRuleState);
        }

        /**
         * The stage of the DnsSecurityRule update allowing to specify priority.
         */
        interface WithPriority {
            /**
             * Specifies the priority property: The priority of the DNS security rule..
             * 
             * @param priority The priority of the DNS security rule.
             * @return the next definition stage.
             */
            Update withPriority(Integer priority);
        }

        /**
         * The stage of the DnsSecurityRule update allowing to specify ifMatch.
         */
        interface WithIfMatch {
            /**
             * Specifies the ifMatch property: ETag of the resource. Omit this value to always overwrite the current
             * resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes..
             * 
             * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify
             * the last-seen ETag value to prevent accidentally overwriting any concurrent changes.
             * @return the next definition stage.
             */
            Update withIfMatch(String ifMatch);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    DnsSecurityRule refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    DnsSecurityRule refresh(Context context);
}
