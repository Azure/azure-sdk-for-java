// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SubResource;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The reference to the virtual network link that associates between the DNS forwarding ruleset and virtual network.
 */
@Fluent
public final class VirtualNetworkLinkSubResourceProperties
    implements JsonSerializable<VirtualNetworkLinkSubResourceProperties> {
    /*
     * The reference to the virtual network link.
     */
    private SubResource virtualNetworkLink;

    /**
     * Creates an instance of VirtualNetworkLinkSubResourceProperties class.
     */
    public VirtualNetworkLinkSubResourceProperties() {
    }

    /**
     * Get the virtualNetworkLink property: The reference to the virtual network link.
     * 
     * @return the virtualNetworkLink value.
     */
    public SubResource virtualNetworkLink() {
        return this.virtualNetworkLink;
    }

    /**
     * Set the virtualNetworkLink property: The reference to the virtual network link.
     * 
     * @param virtualNetworkLink the virtualNetworkLink value to set.
     * @return the VirtualNetworkLinkSubResourceProperties object itself.
     */
    public VirtualNetworkLinkSubResourceProperties withVirtualNetworkLink(SubResource virtualNetworkLink) {
        this.virtualNetworkLink = virtualNetworkLink;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("virtualNetworkLink", this.virtualNetworkLink);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualNetworkLinkSubResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualNetworkLinkSubResourceProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualNetworkLinkSubResourceProperties.
     */
    public static VirtualNetworkLinkSubResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualNetworkLinkSubResourceProperties deserializedVirtualNetworkLinkSubResourceProperties
                = new VirtualNetworkLinkSubResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("virtualNetworkLink".equals(fieldName)) {
                    deserializedVirtualNetworkLinkSubResourceProperties.virtualNetworkLink
                        = SubResource.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualNetworkLinkSubResourceProperties;
        });
    }
}
