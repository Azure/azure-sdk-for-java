// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.dnsresolver.models.Action;
import java.io.IOException;

/**
 * Describes DNS resolver domain list properties for bulk UPLOAD or DOWNLOAD operations.
 */
@Fluent
public final class DnsResolverDomainListBulkProperties
    implements JsonSerializable<DnsResolverDomainListBulkProperties> {
    /*
     * The storage account blob file URL to be used in the bulk upload or download request of DNS resolver domain list.
     */
    private String storageUrl;

    /*
     * The action to take in the request, Upload or Download.
     */
    private Action action;

    /**
     * Creates an instance of DnsResolverDomainListBulkProperties class.
     */
    public DnsResolverDomainListBulkProperties() {
    }

    /**
     * Get the storageUrl property: The storage account blob file URL to be used in the bulk upload or download request
     * of DNS resolver domain list.
     * 
     * @return the storageUrl value.
     */
    public String storageUrl() {
        return this.storageUrl;
    }

    /**
     * Set the storageUrl property: The storage account blob file URL to be used in the bulk upload or download request
     * of DNS resolver domain list.
     * 
     * @param storageUrl the storageUrl value to set.
     * @return the DnsResolverDomainListBulkProperties object itself.
     */
    public DnsResolverDomainListBulkProperties withStorageUrl(String storageUrl) {
        this.storageUrl = storageUrl;
        return this;
    }

    /**
     * Get the action property: The action to take in the request, Upload or Download.
     * 
     * @return the action value.
     */
    public Action action() {
        return this.action;
    }

    /**
     * Set the action property: The action to take in the request, Upload or Download.
     * 
     * @param action the action value to set.
     * @return the DnsResolverDomainListBulkProperties object itself.
     */
    public DnsResolverDomainListBulkProperties withAction(Action action) {
        this.action = action;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (storageUrl() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property storageUrl in model DnsResolverDomainListBulkProperties"));
        }
        if (action() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property action in model DnsResolverDomainListBulkProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DnsResolverDomainListBulkProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("storageUrl", this.storageUrl);
        jsonWriter.writeStringField("action", this.action == null ? null : this.action.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DnsResolverDomainListBulkProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DnsResolverDomainListBulkProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DnsResolverDomainListBulkProperties.
     */
    public static DnsResolverDomainListBulkProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DnsResolverDomainListBulkProperties deserializedDnsResolverDomainListBulkProperties
                = new DnsResolverDomainListBulkProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageUrl".equals(fieldName)) {
                    deserializedDnsResolverDomainListBulkProperties.storageUrl = reader.getString();
                } else if ("action".equals(fieldName)) {
                    deserializedDnsResolverDomainListBulkProperties.action = Action.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDnsResolverDomainListBulkProperties;
        });
    }
}
