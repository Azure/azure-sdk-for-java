// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SubResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.dnsresolver.fluent.models.OutboundEndpointInner;
import com.azure.resourcemanager.dnsresolver.models.OutboundEndpoint;
import com.azure.resourcemanager.dnsresolver.models.OutboundEndpointPatch;
import com.azure.resourcemanager.dnsresolver.models.ProvisioningState;
import java.util.Collections;
import java.util.Map;

public final class OutboundEndpointImpl
    implements OutboundEndpoint, OutboundEndpoint.Definition, OutboundEndpoint.Update {
    private OutboundEndpointInner innerObject;

    private final com.azure.resourcemanager.dnsresolver.DnsResolverManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public SubResource subnet() {
        return this.innerModel().subnet();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String resourceGuid() {
        return this.innerModel().resourceGuid();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public OutboundEndpointInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.dnsresolver.DnsResolverManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String dnsResolverName;

    private String outboundEndpointName;

    private String createIfMatch;

    private String createIfNoneMatch;

    private String updateIfMatch;

    private OutboundEndpointPatch updateParameters;

    public OutboundEndpointImpl withExistingDnsResolver(String resourceGroupName, String dnsResolverName) {
        this.resourceGroupName = resourceGroupName;
        this.dnsResolverName = dnsResolverName;
        return this;
    }

    public OutboundEndpoint create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getOutboundEndpoints()
                .createOrUpdate(
                    resourceGroupName,
                    dnsResolverName,
                    outboundEndpointName,
                    this.innerModel(),
                    createIfMatch,
                    createIfNoneMatch,
                    Context.NONE);
        return this;
    }

    public OutboundEndpoint create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getOutboundEndpoints()
                .createOrUpdate(
                    resourceGroupName,
                    dnsResolverName,
                    outboundEndpointName,
                    this.innerModel(),
                    createIfMatch,
                    createIfNoneMatch,
                    context);
        return this;
    }

    OutboundEndpointImpl(String name, com.azure.resourcemanager.dnsresolver.DnsResolverManager serviceManager) {
        this.innerObject = new OutboundEndpointInner();
        this.serviceManager = serviceManager;
        this.outboundEndpointName = name;
        this.createIfMatch = null;
        this.createIfNoneMatch = null;
    }

    public OutboundEndpointImpl update() {
        this.updateIfMatch = null;
        this.updateParameters = new OutboundEndpointPatch();
        return this;
    }

    public OutboundEndpoint apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getOutboundEndpoints()
                .update(
                    resourceGroupName,
                    dnsResolverName,
                    outboundEndpointName,
                    updateParameters,
                    updateIfMatch,
                    Context.NONE);
        return this;
    }

    public OutboundEndpoint apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getOutboundEndpoints()
                .update(
                    resourceGroupName, dnsResolverName, outboundEndpointName, updateParameters, updateIfMatch, context);
        return this;
    }

    OutboundEndpointImpl(
        OutboundEndpointInner innerObject, com.azure.resourcemanager.dnsresolver.DnsResolverManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.dnsResolverName = Utils.getValueFromIdByName(innerObject.id(), "dnsResolvers");
        this.outboundEndpointName = Utils.getValueFromIdByName(innerObject.id(), "outboundEndpoints");
    }

    public OutboundEndpoint refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getOutboundEndpoints()
                .getWithResponse(resourceGroupName, dnsResolverName, outboundEndpointName, Context.NONE)
                .getValue();
        return this;
    }

    public OutboundEndpoint refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getOutboundEndpoints()
                .getWithResponse(resourceGroupName, dnsResolverName, outboundEndpointName, context)
                .getValue();
        return this;
    }

    public OutboundEndpointImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public OutboundEndpointImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public OutboundEndpointImpl withSubnet(SubResource subnet) {
        this.innerModel().withSubnet(subnet);
        return this;
    }

    public OutboundEndpointImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public OutboundEndpointImpl withIfMatch(String ifMatch) {
        if (isInCreateMode()) {
            this.createIfMatch = ifMatch;
            return this;
        } else {
            this.updateIfMatch = ifMatch;
            return this;
        }
    }

    public OutboundEndpointImpl withIfNoneMatch(String ifNoneMatch) {
        this.createIfNoneMatch = ifNoneMatch;
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
