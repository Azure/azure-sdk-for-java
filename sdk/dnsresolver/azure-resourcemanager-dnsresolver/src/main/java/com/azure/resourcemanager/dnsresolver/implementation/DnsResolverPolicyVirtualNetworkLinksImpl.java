// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.dnsresolver.fluent.DnsResolverPolicyVirtualNetworkLinksClient;
import com.azure.resourcemanager.dnsresolver.fluent.models.DnsResolverPolicyVirtualNetworkLinkInner;
import com.azure.resourcemanager.dnsresolver.models.DnsResolverPolicyVirtualNetworkLink;
import com.azure.resourcemanager.dnsresolver.models.DnsResolverPolicyVirtualNetworkLinks;

public final class DnsResolverPolicyVirtualNetworkLinksImpl implements DnsResolverPolicyVirtualNetworkLinks {
    private static final ClientLogger LOGGER = new ClientLogger(DnsResolverPolicyVirtualNetworkLinksImpl.class);

    private final DnsResolverPolicyVirtualNetworkLinksClient innerClient;

    private final com.azure.resourcemanager.dnsresolver.DnsResolverManager serviceManager;

    public DnsResolverPolicyVirtualNetworkLinksImpl(DnsResolverPolicyVirtualNetworkLinksClient innerClient,
        com.azure.resourcemanager.dnsresolver.DnsResolverManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String dnsResolverPolicyName,
        String dnsResolverPolicyVirtualNetworkLinkName) {
        this.serviceClient().delete(resourceGroupName, dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName);
    }

    public void delete(String resourceGroupName, String dnsResolverPolicyName,
        String dnsResolverPolicyVirtualNetworkLinkName, String ifMatch, Context context) {
        this.serviceClient()
            .delete(resourceGroupName, dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName, ifMatch,
                context);
    }

    public Response<DnsResolverPolicyVirtualNetworkLink> getWithResponse(String resourceGroupName,
        String dnsResolverPolicyName, String dnsResolverPolicyVirtualNetworkLinkName, Context context) {
        Response<DnsResolverPolicyVirtualNetworkLinkInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName,
                context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DnsResolverPolicyVirtualNetworkLinkImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DnsResolverPolicyVirtualNetworkLink get(String resourceGroupName, String dnsResolverPolicyName,
        String dnsResolverPolicyVirtualNetworkLinkName) {
        DnsResolverPolicyVirtualNetworkLinkInner inner = this.serviceClient()
            .get(resourceGroupName, dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName);
        if (inner != null) {
            return new DnsResolverPolicyVirtualNetworkLinkImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<DnsResolverPolicyVirtualNetworkLink> list(String resourceGroupName,
        String dnsResolverPolicyName) {
        PagedIterable<DnsResolverPolicyVirtualNetworkLinkInner> inner
            = this.serviceClient().list(resourceGroupName, dnsResolverPolicyName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new DnsResolverPolicyVirtualNetworkLinkImpl(inner1, this.manager()));
    }

    public PagedIterable<DnsResolverPolicyVirtualNetworkLink> list(String resourceGroupName,
        String dnsResolverPolicyName, Integer top, Context context) {
        PagedIterable<DnsResolverPolicyVirtualNetworkLinkInner> inner
            = this.serviceClient().list(resourceGroupName, dnsResolverPolicyName, top, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new DnsResolverPolicyVirtualNetworkLinkImpl(inner1, this.manager()));
    }

    public DnsResolverPolicyVirtualNetworkLink getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dnsResolverPolicyName = ResourceManagerUtils.getValueFromIdByName(id, "dnsResolverPolicies");
        if (dnsResolverPolicyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dnsResolverPolicies'.", id)));
        }
        String dnsResolverPolicyVirtualNetworkLinkName
            = ResourceManagerUtils.getValueFromIdByName(id, "virtualNetworkLinks");
        if (dnsResolverPolicyVirtualNetworkLinkName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualNetworkLinks'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName,
                Context.NONE)
            .getValue();
    }

    public Response<DnsResolverPolicyVirtualNetworkLink> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dnsResolverPolicyName = ResourceManagerUtils.getValueFromIdByName(id, "dnsResolverPolicies");
        if (dnsResolverPolicyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dnsResolverPolicies'.", id)));
        }
        String dnsResolverPolicyVirtualNetworkLinkName
            = ResourceManagerUtils.getValueFromIdByName(id, "virtualNetworkLinks");
        if (dnsResolverPolicyVirtualNetworkLinkName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualNetworkLinks'.", id)));
        }
        return this.getWithResponse(resourceGroupName, dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName,
            context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dnsResolverPolicyName = ResourceManagerUtils.getValueFromIdByName(id, "dnsResolverPolicies");
        if (dnsResolverPolicyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dnsResolverPolicies'.", id)));
        }
        String dnsResolverPolicyVirtualNetworkLinkName
            = ResourceManagerUtils.getValueFromIdByName(id, "virtualNetworkLinks");
        if (dnsResolverPolicyVirtualNetworkLinkName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualNetworkLinks'.", id)));
        }
        String localIfMatch = null;
        this.delete(resourceGroupName, dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName, localIfMatch,
            Context.NONE);
    }

    public void deleteByIdWithResponse(String id, String ifMatch, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dnsResolverPolicyName = ResourceManagerUtils.getValueFromIdByName(id, "dnsResolverPolicies");
        if (dnsResolverPolicyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dnsResolverPolicies'.", id)));
        }
        String dnsResolverPolicyVirtualNetworkLinkName
            = ResourceManagerUtils.getValueFromIdByName(id, "virtualNetworkLinks");
        if (dnsResolverPolicyVirtualNetworkLinkName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualNetworkLinks'.", id)));
        }
        this.delete(resourceGroupName, dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName, ifMatch,
            context);
    }

    private DnsResolverPolicyVirtualNetworkLinksClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.dnsresolver.DnsResolverManager manager() {
        return this.serviceManager;
    }

    public DnsResolverPolicyVirtualNetworkLinkImpl define(String name) {
        return new DnsResolverPolicyVirtualNetworkLinkImpl(name, this.manager());
    }
}
