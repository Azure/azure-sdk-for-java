// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dnsresolver.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.dnsresolver.fluent.models.DnsResolverDomainListBulkProperties;
import java.io.IOException;

/**
 * Describes a DNS resolver domain list for bulk UPLOAD or DOWNLOAD operations.
 */
@Fluent
public final class DnsResolverDomainListBulk implements JsonSerializable<DnsResolverDomainListBulk> {
    /*
     * Properties of the DNS resolver domain list upload or download request.
     */
    private DnsResolverDomainListBulkProperties innerProperties = new DnsResolverDomainListBulkProperties();

    /**
     * Creates an instance of DnsResolverDomainListBulk class.
     */
    public DnsResolverDomainListBulk() {
    }

    /**
     * Get the innerProperties property: Properties of the DNS resolver domain list upload or download request.
     * 
     * @return the innerProperties value.
     */
    private DnsResolverDomainListBulkProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the storageUrl property: The storage account blob file URL to be used in the bulk upload or download request
     * of DNS resolver domain list.
     * 
     * @return the storageUrl value.
     */
    public String storageUrl() {
        return this.innerProperties() == null ? null : this.innerProperties().storageUrl();
    }

    /**
     * Set the storageUrl property: The storage account blob file URL to be used in the bulk upload or download request
     * of DNS resolver domain list.
     * 
     * @param storageUrl the storageUrl value to set.
     * @return the DnsResolverDomainListBulk object itself.
     */
    public DnsResolverDomainListBulk withStorageUrl(String storageUrl) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DnsResolverDomainListBulkProperties();
        }
        this.innerProperties().withStorageUrl(storageUrl);
        return this;
    }

    /**
     * Get the action property: The action to take in the request, Upload or Download.
     * 
     * @return the action value.
     */
    public Action action() {
        return this.innerProperties() == null ? null : this.innerProperties().action();
    }

    /**
     * Set the action property: The action to take in the request, Upload or Download.
     * 
     * @param action the action value to set.
     * @return the DnsResolverDomainListBulk object itself.
     */
    public DnsResolverDomainListBulk withAction(Action action) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DnsResolverDomainListBulkProperties();
        }
        this.innerProperties().withAction(action);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DnsResolverDomainListBulk from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DnsResolverDomainListBulk if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DnsResolverDomainListBulk.
     */
    public static DnsResolverDomainListBulk fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DnsResolverDomainListBulk deserializedDnsResolverDomainListBulk = new DnsResolverDomainListBulk();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedDnsResolverDomainListBulk.innerProperties
                        = DnsResolverDomainListBulkProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDnsResolverDomainListBulk;
        });
    }
}
