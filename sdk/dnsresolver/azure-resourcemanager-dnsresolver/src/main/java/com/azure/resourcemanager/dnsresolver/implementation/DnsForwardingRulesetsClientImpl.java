// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dnsresolver.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.dnsresolver.fluent.DnsForwardingRulesetsClient;
import com.azure.resourcemanager.dnsresolver.fluent.models.DnsForwardingRulesetInner;
import com.azure.resourcemanager.dnsresolver.fluent.models.VirtualNetworkDnsForwardingRulesetInner;
import com.azure.resourcemanager.dnsresolver.implementation.models.DnsForwardingRulesetListResult;
import com.azure.resourcemanager.dnsresolver.implementation.models.VirtualNetworkDnsForwardingRulesetListResult;
import com.azure.resourcemanager.dnsresolver.models.DnsForwardingRulesetPatch;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DnsForwardingRulesetsClient.
 */
public final class DnsForwardingRulesetsClientImpl implements DnsForwardingRulesetsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DnsForwardingRulesetsService service;

    /**
     * The service client containing this operation class.
     */
    private final DnsResolverManagementClientImpl client;

    /**
     * Initializes an instance of DnsForwardingRulesetsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DnsForwardingRulesetsClientImpl(DnsResolverManagementClientImpl client) {
        this.service = RestProxy.create(DnsForwardingRulesetsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DnsResolverManagementClientDnsForwardingRulesets to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "DnsResolverManagementClientDnsForwardingRulesets")
    public interface DnsForwardingRulesetsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DnsForwardingRulesetInner>> getByResourceGroup(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsForwardingRulesetName") String dnsForwardingRulesetName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DnsForwardingRulesetInner> getByResourceGroupSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsForwardingRulesetName") String dnsForwardingRulesetName,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}")
        @ExpectedResponses({ 200, 201, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsForwardingRulesetName") String dnsForwardingRulesetName,
            @HeaderParam("if-match") String ifMatch, @HeaderParam("if-none-match") String ifNoneMatch,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") DnsForwardingRulesetInner parameters, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}")
        @ExpectedResponses({ 200, 201, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsForwardingRulesetName") String dnsForwardingRulesetName,
            @HeaderParam("if-match") String ifMatch, @HeaderParam("if-none-match") String ifNoneMatch,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") DnsForwardingRulesetInner parameters, Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsForwardingRulesetName") String dnsForwardingRulesetName,
            @HeaderParam("if-match") String ifMatch, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") DnsForwardingRulesetPatch parameters,
            Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsForwardingRulesetName") String dnsForwardingRulesetName,
            @HeaderParam("if-match") String ifMatch, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") DnsForwardingRulesetPatch parameters,
            Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsForwardingRulesetName") String dnsForwardingRulesetName,
            @HeaderParam("if-match") String ifMatch, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsForwardingRulesetName") String dnsForwardingRulesetName,
            @HeaderParam("if-match") String ifMatch, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DnsForwardingRulesetListResult>> listByResourceGroup(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("$top") Integer top,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DnsForwardingRulesetListResult> listByResourceGroupSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("$top") Integer top,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Network/dnsForwardingRulesets")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DnsForwardingRulesetListResult>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("$top") Integer top, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Network/dnsForwardingRulesets")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DnsForwardingRulesetListResult> listSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("$top") Integer top, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/listDnsForwardingRulesets")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<VirtualNetworkDnsForwardingRulesetListResult>> listByVirtualNetwork(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualNetworkName") String virtualNetworkName, @QueryParam("$top") Integer top,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/listDnsForwardingRulesets")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<VirtualNetworkDnsForwardingRulesetListResult> listByVirtualNetworkSync(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualNetworkName") String virtualNetworkName, @QueryParam("$top") Integer top,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DnsForwardingRulesetListResult>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DnsForwardingRulesetListResult> listByResourceGroupNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DnsForwardingRulesetListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DnsForwardingRulesetListResult> listNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<VirtualNetworkDnsForwardingRulesetListResult>> listByVirtualNetworkNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<VirtualNetworkDnsForwardingRulesetListResult> listByVirtualNetworkNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets a DNS forwarding ruleset properties.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DNS forwarding ruleset properties along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DnsForwardingRulesetInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String dnsForwardingRulesetName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, dnsForwardingRulesetName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a DNS forwarding ruleset properties.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DNS forwarding ruleset properties on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DnsForwardingRulesetInner> getByResourceGroupAsync(String resourceGroupName,
        String dnsForwardingRulesetName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, dnsForwardingRulesetName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a DNS forwarding ruleset properties.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DNS forwarding ruleset properties along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DnsForwardingRulesetInner> getByResourceGroupWithResponse(String resourceGroupName,
        String dnsForwardingRulesetName, Context context) {
        final String accept = "application/json";
        return service.getByResourceGroupSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, dnsForwardingRulesetName, accept, context);
    }

    /**
     * Gets a DNS forwarding ruleset properties.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DNS forwarding ruleset properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DnsForwardingRulesetInner getByResourceGroup(String resourceGroupName, String dnsForwardingRulesetName) {
        return getByResourceGroupWithResponse(resourceGroupName, dnsForwardingRulesetName, Context.NONE).getValue();
    }

    /**
     * Creates or updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS forwarding ruleset along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String dnsForwardingRulesetName, DnsForwardingRulesetInner parameters, String ifMatch, String ifNoneMatch) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, dnsForwardingRulesetName, ifMatch, ifNoneMatch,
                contentType, accept, parameters, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS forwarding ruleset along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String dnsForwardingRulesetName,
        DnsForwardingRulesetInner parameters, String ifMatch, String ifNoneMatch) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, dnsForwardingRulesetName, ifMatch, ifNoneMatch,
            contentType, accept, parameters, Context.NONE);
    }

    /**
     * Creates or updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS forwarding ruleset along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String dnsForwardingRulesetName,
        DnsForwardingRulesetInner parameters, String ifMatch, String ifNoneMatch, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, dnsForwardingRulesetName, ifMatch, ifNoneMatch,
            contentType, accept, parameters, context);
    }

    /**
     * Creates or updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a DNS forwarding ruleset.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DnsForwardingRulesetInner>, DnsForwardingRulesetInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String dnsForwardingRulesetName, DnsForwardingRulesetInner parameters, String ifMatch,
        String ifNoneMatch) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName,
            dnsForwardingRulesetName, parameters, ifMatch, ifNoneMatch);
        return this.client.<DnsForwardingRulesetInner, DnsForwardingRulesetInner>getLroResult(mono,
            this.client.getHttpPipeline(), DnsForwardingRulesetInner.class, DnsForwardingRulesetInner.class,
            this.client.getContext());
    }

    /**
     * Creates or updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a DNS forwarding ruleset.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DnsForwardingRulesetInner>, DnsForwardingRulesetInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String dnsForwardingRulesetName, DnsForwardingRulesetInner parameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName,
            dnsForwardingRulesetName, parameters, ifMatch, ifNoneMatch);
        return this.client.<DnsForwardingRulesetInner, DnsForwardingRulesetInner>getLroResult(mono,
            this.client.getHttpPipeline(), DnsForwardingRulesetInner.class, DnsForwardingRulesetInner.class,
            this.client.getContext());
    }

    /**
     * Creates or updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a DNS forwarding ruleset.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DnsForwardingRulesetInner>, DnsForwardingRulesetInner> beginCreateOrUpdate(
        String resourceGroupName, String dnsForwardingRulesetName, DnsForwardingRulesetInner parameters, String ifMatch,
        String ifNoneMatch) {
        Response<BinaryData> response
            = createOrUpdateWithResponse(resourceGroupName, dnsForwardingRulesetName, parameters, ifMatch, ifNoneMatch);
        return this.client.<DnsForwardingRulesetInner, DnsForwardingRulesetInner>getLroResult(response,
            DnsForwardingRulesetInner.class, DnsForwardingRulesetInner.class, Context.NONE);
    }

    /**
     * Creates or updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a DNS forwarding ruleset.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DnsForwardingRulesetInner>, DnsForwardingRulesetInner> beginCreateOrUpdate(
        String resourceGroupName, String dnsForwardingRulesetName, DnsForwardingRulesetInner parameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        Response<BinaryData> response
            = createOrUpdateWithResponse(resourceGroupName, dnsForwardingRulesetName, parameters, ifMatch, ifNoneMatch);
        return this.client.<DnsForwardingRulesetInner, DnsForwardingRulesetInner>getLroResult(response,
            DnsForwardingRulesetInner.class, DnsForwardingRulesetInner.class, Context.NONE);
    }

    /**
     * Creates or updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a DNS forwarding ruleset.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DnsForwardingRulesetInner>, DnsForwardingRulesetInner> beginCreateOrUpdate(
        String resourceGroupName, String dnsForwardingRulesetName, DnsForwardingRulesetInner parameters, String ifMatch,
        String ifNoneMatch, Context context) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, dnsForwardingRulesetName,
            parameters, ifMatch, ifNoneMatch, context);
        return this.client.<DnsForwardingRulesetInner, DnsForwardingRulesetInner>getLroResult(response,
            DnsForwardingRulesetInner.class, DnsForwardingRulesetInner.class, context);
    }

    /**
     * Creates or updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS forwarding ruleset on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DnsForwardingRulesetInner> createOrUpdateAsync(String resourceGroupName,
        String dnsForwardingRulesetName, DnsForwardingRulesetInner parameters, String ifMatch, String ifNoneMatch) {
        return beginCreateOrUpdateAsync(resourceGroupName, dnsForwardingRulesetName, parameters, ifMatch, ifNoneMatch)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS forwarding ruleset on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DnsForwardingRulesetInner> createOrUpdateAsync(String resourceGroupName,
        String dnsForwardingRulesetName, DnsForwardingRulesetInner parameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return beginCreateOrUpdateAsync(resourceGroupName, dnsForwardingRulesetName, parameters, ifMatch, ifNoneMatch)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS forwarding ruleset.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DnsForwardingRulesetInner createOrUpdate(String resourceGroupName, String dnsForwardingRulesetName,
        DnsForwardingRulesetInner parameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return beginCreateOrUpdate(resourceGroupName, dnsForwardingRulesetName, parameters, ifMatch, ifNoneMatch)
            .getFinalResult();
    }

    /**
     * Creates or updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS forwarding ruleset.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DnsForwardingRulesetInner createOrUpdate(String resourceGroupName, String dnsForwardingRulesetName,
        DnsForwardingRulesetInner parameters, String ifMatch, String ifNoneMatch, Context context) {
        return beginCreateOrUpdate(resourceGroupName, dnsForwardingRulesetName, parameters, ifMatch, ifNoneMatch,
            context).getFinalResult();
    }

    /**
     * Updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS forwarding ruleset along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String dnsForwardingRulesetName, DnsForwardingRulesetPatch parameters, String ifMatch) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, dnsForwardingRulesetName, ifMatch, contentType,
                accept, parameters, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS forwarding ruleset along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String dnsForwardingRulesetName,
        DnsForwardingRulesetPatch parameters, String ifMatch) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, dnsForwardingRulesetName, ifMatch, contentType, accept,
            parameters, Context.NONE);
    }

    /**
     * Updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS forwarding ruleset along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String dnsForwardingRulesetName,
        DnsForwardingRulesetPatch parameters, String ifMatch, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, dnsForwardingRulesetName, ifMatch, contentType, accept,
            parameters, context);
    }

    /**
     * Updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a DNS forwarding ruleset.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DnsForwardingRulesetInner>, DnsForwardingRulesetInner> beginUpdateAsync(
        String resourceGroupName, String dnsForwardingRulesetName, DnsForwardingRulesetPatch parameters,
        String ifMatch) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, dnsForwardingRulesetName, parameters, ifMatch);
        return this.client.<DnsForwardingRulesetInner, DnsForwardingRulesetInner>getLroResult(mono,
            this.client.getHttpPipeline(), DnsForwardingRulesetInner.class, DnsForwardingRulesetInner.class,
            this.client.getContext());
    }

    /**
     * Updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the Update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a DNS forwarding ruleset.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DnsForwardingRulesetInner>, DnsForwardingRulesetInner> beginUpdateAsync(
        String resourceGroupName, String dnsForwardingRulesetName, DnsForwardingRulesetPatch parameters) {
        final String ifMatch = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, dnsForwardingRulesetName, parameters, ifMatch);
        return this.client.<DnsForwardingRulesetInner, DnsForwardingRulesetInner>getLroResult(mono,
            this.client.getHttpPipeline(), DnsForwardingRulesetInner.class, DnsForwardingRulesetInner.class,
            this.client.getContext());
    }

    /**
     * Updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a DNS forwarding ruleset.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DnsForwardingRulesetInner>, DnsForwardingRulesetInner> beginUpdate(
        String resourceGroupName, String dnsForwardingRulesetName, DnsForwardingRulesetPatch parameters,
        String ifMatch) {
        Response<BinaryData> response
            = updateWithResponse(resourceGroupName, dnsForwardingRulesetName, parameters, ifMatch);
        return this.client.<DnsForwardingRulesetInner, DnsForwardingRulesetInner>getLroResult(response,
            DnsForwardingRulesetInner.class, DnsForwardingRulesetInner.class, Context.NONE);
    }

    /**
     * Updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the Update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a DNS forwarding ruleset.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DnsForwardingRulesetInner>, DnsForwardingRulesetInner>
        beginUpdate(String resourceGroupName, String dnsForwardingRulesetName, DnsForwardingRulesetPatch parameters) {
        final String ifMatch = null;
        Response<BinaryData> response
            = updateWithResponse(resourceGroupName, dnsForwardingRulesetName, parameters, ifMatch);
        return this.client.<DnsForwardingRulesetInner, DnsForwardingRulesetInner>getLroResult(response,
            DnsForwardingRulesetInner.class, DnsForwardingRulesetInner.class, Context.NONE);
    }

    /**
     * Updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a DNS forwarding ruleset.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DnsForwardingRulesetInner>, DnsForwardingRulesetInner> beginUpdate(
        String resourceGroupName, String dnsForwardingRulesetName, DnsForwardingRulesetPatch parameters, String ifMatch,
        Context context) {
        Response<BinaryData> response
            = updateWithResponse(resourceGroupName, dnsForwardingRulesetName, parameters, ifMatch, context);
        return this.client.<DnsForwardingRulesetInner, DnsForwardingRulesetInner>getLroResult(response,
            DnsForwardingRulesetInner.class, DnsForwardingRulesetInner.class, context);
    }

    /**
     * Updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS forwarding ruleset on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DnsForwardingRulesetInner> updateAsync(String resourceGroupName, String dnsForwardingRulesetName,
        DnsForwardingRulesetPatch parameters, String ifMatch) {
        return beginUpdateAsync(resourceGroupName, dnsForwardingRulesetName, parameters, ifMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the Update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS forwarding ruleset on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DnsForwardingRulesetInner> updateAsync(String resourceGroupName, String dnsForwardingRulesetName,
        DnsForwardingRulesetPatch parameters) {
        final String ifMatch = null;
        return beginUpdateAsync(resourceGroupName, dnsForwardingRulesetName, parameters, ifMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the Update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS forwarding ruleset.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DnsForwardingRulesetInner update(String resourceGroupName, String dnsForwardingRulesetName,
        DnsForwardingRulesetPatch parameters) {
        final String ifMatch = null;
        return beginUpdate(resourceGroupName, dnsForwardingRulesetName, parameters, ifMatch).getFinalResult();
    }

    /**
     * Updates a DNS forwarding ruleset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS forwarding ruleset.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DnsForwardingRulesetInner update(String resourceGroupName, String dnsForwardingRulesetName,
        DnsForwardingRulesetPatch parameters, String ifMatch, Context context) {
        return beginUpdate(resourceGroupName, dnsForwardingRulesetName, parameters, ifMatch, context).getFinalResult();
    }

    /**
     * Deletes a DNS forwarding ruleset. WARNING: This operation cannot be undone. All forwarding rules within the
     * ruleset will be deleted.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String dnsForwardingRulesetName, String ifMatch) {
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, dnsForwardingRulesetName, ifMatch, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes a DNS forwarding ruleset. WARNING: This operation cannot be undone. All forwarding rules within the
     * ruleset will be deleted.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String dnsForwardingRulesetName,
        String ifMatch) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, dnsForwardingRulesetName, ifMatch, Context.NONE);
    }

    /**
     * Deletes a DNS forwarding ruleset. WARNING: This operation cannot be undone. All forwarding rules within the
     * ruleset will be deleted.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String dnsForwardingRulesetName,
        String ifMatch, Context context) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, dnsForwardingRulesetName, ifMatch, context);
    }

    /**
     * Deletes a DNS forwarding ruleset. WARNING: This operation cannot be undone. All forwarding rules within the
     * ruleset will be deleted.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName,
        String dnsForwardingRulesetName, String ifMatch) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, dnsForwardingRulesetName, ifMatch);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes a DNS forwarding ruleset. WARNING: This operation cannot be undone. All forwarding rules within the
     * ruleset will be deleted.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName,
        String dnsForwardingRulesetName) {
        final String ifMatch = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, dnsForwardingRulesetName, ifMatch);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes a DNS forwarding ruleset. WARNING: This operation cannot be undone. All forwarding rules within the
     * ruleset will be deleted.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String dnsForwardingRulesetName,
        String ifMatch) {
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, dnsForwardingRulesetName, ifMatch);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Deletes a DNS forwarding ruleset. WARNING: This operation cannot be undone. All forwarding rules within the
     * ruleset will be deleted.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String dnsForwardingRulesetName) {
        final String ifMatch = null;
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, dnsForwardingRulesetName, ifMatch);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Deletes a DNS forwarding ruleset. WARNING: This operation cannot be undone. All forwarding rules within the
     * ruleset will be deleted.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String dnsForwardingRulesetName,
        String ifMatch, Context context) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, dnsForwardingRulesetName, ifMatch, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Deletes a DNS forwarding ruleset. WARNING: This operation cannot be undone. All forwarding rules within the
     * ruleset will be deleted.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String dnsForwardingRulesetName, String ifMatch) {
        return beginDeleteAsync(resourceGroupName, dnsForwardingRulesetName, ifMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a DNS forwarding ruleset. WARNING: This operation cannot be undone. All forwarding rules within the
     * ruleset will be deleted.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String dnsForwardingRulesetName) {
        final String ifMatch = null;
        return beginDeleteAsync(resourceGroupName, dnsForwardingRulesetName, ifMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a DNS forwarding ruleset. WARNING: This operation cannot be undone. All forwarding rules within the
     * ruleset will be deleted.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String dnsForwardingRulesetName) {
        final String ifMatch = null;
        beginDelete(resourceGroupName, dnsForwardingRulesetName, ifMatch).getFinalResult();
    }

    /**
     * Deletes a DNS forwarding ruleset. WARNING: This operation cannot be undone. All forwarding rules within the
     * ruleset will be deleted.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String dnsForwardingRulesetName, String ifMatch, Context context) {
        beginDelete(resourceGroupName, dnsForwardingRulesetName, ifMatch, context).getFinalResult();
    }

    /**
     * Lists DNS forwarding rulesets within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsForwardingRuleset list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DnsForwardingRulesetInner>> listByResourceGroupSinglePageAsync(String resourceGroupName,
        Integer top) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, top, accept, context))
            .<PagedResponse<DnsForwardingRulesetInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists DNS forwarding rulesets within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsForwardingRuleset list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DnsForwardingRulesetInner> listByResourceGroupAsync(String resourceGroupName, Integer top) {
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName, top),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Lists DNS forwarding rulesets within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsForwardingRuleset list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DnsForwardingRulesetInner> listByResourceGroupAsync(String resourceGroupName) {
        final Integer top = null;
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName, top),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Lists DNS forwarding rulesets within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsForwardingRuleset list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DnsForwardingRulesetInner> listByResourceGroupSinglePage(String resourceGroupName,
        Integer top) {
        final String accept = "application/json";
        Response<DnsForwardingRulesetListResult> res = service.listByResourceGroupSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, top, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists DNS forwarding rulesets within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsForwardingRuleset list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DnsForwardingRulesetInner> listByResourceGroupSinglePage(String resourceGroupName,
        Integer top, Context context) {
        final String accept = "application/json";
        Response<DnsForwardingRulesetListResult> res = service.listByResourceGroupSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, top, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists DNS forwarding rulesets within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsForwardingRuleset list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DnsForwardingRulesetInner> listByResourceGroup(String resourceGroupName) {
        final Integer top = null;
        return new PagedIterable<>(() -> listByResourceGroupSinglePage(resourceGroupName, top),
            nextLink -> listByResourceGroupNextSinglePage(nextLink));
    }

    /**
     * Lists DNS forwarding rulesets within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsForwardingRuleset list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DnsForwardingRulesetInner> listByResourceGroup(String resourceGroupName, Integer top,
        Context context) {
        return new PagedIterable<>(() -> listByResourceGroupSinglePage(resourceGroupName, top, context),
            nextLink -> listByResourceGroupNextSinglePage(nextLink, context));
    }

    /**
     * Lists DNS forwarding rulesets in all resource groups of a subscription.
     * 
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsForwardingRuleset list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DnsForwardingRulesetInner>> listSinglePageAsync(Integer top) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), top, accept, context))
            .<PagedResponse<DnsForwardingRulesetInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists DNS forwarding rulesets in all resource groups of a subscription.
     * 
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsForwardingRuleset list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DnsForwardingRulesetInner> listAsync(Integer top) {
        return new PagedFlux<>(() -> listSinglePageAsync(top), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists DNS forwarding rulesets in all resource groups of a subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsForwardingRuleset list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DnsForwardingRulesetInner> listAsync() {
        final Integer top = null;
        return new PagedFlux<>(() -> listSinglePageAsync(top), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists DNS forwarding rulesets in all resource groups of a subscription.
     * 
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsForwardingRuleset list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DnsForwardingRulesetInner> listSinglePage(Integer top) {
        final String accept = "application/json";
        Response<DnsForwardingRulesetListResult> res = service.listSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), top, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists DNS forwarding rulesets in all resource groups of a subscription.
     * 
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsForwardingRuleset list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DnsForwardingRulesetInner> listSinglePage(Integer top, Context context) {
        final String accept = "application/json";
        Response<DnsForwardingRulesetListResult> res = service.listSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), top, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists DNS forwarding rulesets in all resource groups of a subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsForwardingRuleset list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DnsForwardingRulesetInner> list() {
        final Integer top = null;
        return new PagedIterable<>(() -> listSinglePage(top), nextLink -> listNextSinglePage(nextLink));
    }

    /**
     * Lists DNS forwarding rulesets in all resource groups of a subscription.
     * 
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsForwardingRuleset list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DnsForwardingRulesetInner> list(Integer top, Context context) {
        return new PagedIterable<>(() -> listSinglePage(top, context),
            nextLink -> listNextSinglePage(nextLink, context));
    }

    /**
     * Lists DNS forwarding ruleset resource IDs attached to a virtual network.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the VirtualNetwork.
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on Virtual Network DNS Forwarding Ruleset along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<VirtualNetworkDnsForwardingRulesetInner>>
        listByVirtualNetworkSinglePageAsync(String resourceGroupName, String virtualNetworkName, Integer top) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByVirtualNetwork(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, virtualNetworkName, top, accept, context))
            .<PagedResponse<VirtualNetworkDnsForwardingRulesetInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists DNS forwarding ruleset resource IDs attached to a virtual network.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the VirtualNetwork.
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on Virtual Network DNS Forwarding Ruleset as paginated response
     * with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<VirtualNetworkDnsForwardingRulesetInner> listByVirtualNetworkAsync(String resourceGroupName,
        String virtualNetworkName, Integer top) {
        return new PagedFlux<>(() -> listByVirtualNetworkSinglePageAsync(resourceGroupName, virtualNetworkName, top),
            nextLink -> listByVirtualNetworkNextSinglePageAsync(nextLink));
    }

    /**
     * Lists DNS forwarding ruleset resource IDs attached to a virtual network.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the VirtualNetwork.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on Virtual Network DNS Forwarding Ruleset as paginated response
     * with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<VirtualNetworkDnsForwardingRulesetInner> listByVirtualNetworkAsync(String resourceGroupName,
        String virtualNetworkName) {
        final Integer top = null;
        return new PagedFlux<>(() -> listByVirtualNetworkSinglePageAsync(resourceGroupName, virtualNetworkName, top),
            nextLink -> listByVirtualNetworkNextSinglePageAsync(nextLink));
    }

    /**
     * Lists DNS forwarding ruleset resource IDs attached to a virtual network.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the VirtualNetwork.
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on Virtual Network DNS Forwarding Ruleset along with
     * {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<VirtualNetworkDnsForwardingRulesetInner>
        listByVirtualNetworkSinglePage(String resourceGroupName, String virtualNetworkName, Integer top) {
        final String accept = "application/json";
        Response<VirtualNetworkDnsForwardingRulesetListResult> res
            = service.listByVirtualNetworkSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, virtualNetworkName, top, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists DNS forwarding ruleset resource IDs attached to a virtual network.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the VirtualNetwork.
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on Virtual Network DNS Forwarding Ruleset along with
     * {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<VirtualNetworkDnsForwardingRulesetInner> listByVirtualNetworkSinglePage(
        String resourceGroupName, String virtualNetworkName, Integer top, Context context) {
        final String accept = "application/json";
        Response<VirtualNetworkDnsForwardingRulesetListResult> res
            = service.listByVirtualNetworkSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, virtualNetworkName, top, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists DNS forwarding ruleset resource IDs attached to a virtual network.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the VirtualNetwork.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on Virtual Network DNS Forwarding Ruleset as paginated response
     * with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<VirtualNetworkDnsForwardingRulesetInner> listByVirtualNetwork(String resourceGroupName,
        String virtualNetworkName) {
        final Integer top = null;
        return new PagedIterable<>(() -> listByVirtualNetworkSinglePage(resourceGroupName, virtualNetworkName, top),
            nextLink -> listByVirtualNetworkNextSinglePage(nextLink));
    }

    /**
     * Lists DNS forwarding ruleset resource IDs attached to a virtual network.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualNetworkName The name of the VirtualNetwork.
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on Virtual Network DNS Forwarding Ruleset as paginated response
     * with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<VirtualNetworkDnsForwardingRulesetInner> listByVirtualNetwork(String resourceGroupName,
        String virtualNetworkName, Integer top, Context context) {
        return new PagedIterable<>(
            () -> listByVirtualNetworkSinglePage(resourceGroupName, virtualNetworkName, top, context),
            nextLink -> listByVirtualNetworkNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsForwardingRuleset list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DnsForwardingRulesetInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DnsForwardingRulesetInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsForwardingRuleset list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DnsForwardingRulesetInner> listByResourceGroupNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<DnsForwardingRulesetListResult> res
            = service.listByResourceGroupNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsForwardingRuleset list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DnsForwardingRulesetInner> listByResourceGroupNextSinglePage(String nextLink,
        Context context) {
        final String accept = "application/json";
        Response<DnsForwardingRulesetListResult> res
            = service.listByResourceGroupNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsForwardingRuleset list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DnsForwardingRulesetInner>> listNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DnsForwardingRulesetInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsForwardingRuleset list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DnsForwardingRulesetInner> listNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<DnsForwardingRulesetListResult> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsForwardingRuleset list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DnsForwardingRulesetInner> listNextSinglePage(String nextLink, Context context) {
        final String accept = "application/json";
        Response<DnsForwardingRulesetListResult> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on Virtual Network DNS Forwarding Ruleset along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<VirtualNetworkDnsForwardingRulesetInner>>
        listByVirtualNetworkNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByVirtualNetworkNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<VirtualNetworkDnsForwardingRulesetInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on Virtual Network DNS Forwarding Ruleset along with
     * {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<VirtualNetworkDnsForwardingRulesetInner> listByVirtualNetworkNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<VirtualNetworkDnsForwardingRulesetListResult> res
            = service.listByVirtualNetworkNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an enumeration operation on Virtual Network DNS Forwarding Ruleset along with
     * {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<VirtualNetworkDnsForwardingRulesetInner> listByVirtualNetworkNextSinglePage(String nextLink,
        Context context) {
        final String accept = "application/json";
        Response<VirtualNetworkDnsForwardingRulesetListResult> res
            = service.listByVirtualNetworkNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }
}
