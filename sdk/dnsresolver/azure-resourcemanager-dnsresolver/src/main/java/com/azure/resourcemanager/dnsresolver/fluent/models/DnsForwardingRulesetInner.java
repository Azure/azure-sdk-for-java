// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SubResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.dnsresolver.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Describes a DNS forwarding ruleset. */
@Fluent
public final class DnsForwardingRulesetInner extends Resource {
    /*
     * ETag of the DNS forwarding ruleset.
     */
    @JsonProperty(value = "etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /*
     * Properties of the DNS forwarding ruleset.
     */
    @JsonProperty(value = "properties", required = true)
    private DnsForwardingRulesetProperties innerProperties = new DnsForwardingRulesetProperties();

    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Get the etag property: ETag of the DNS forwarding ruleset.
     *
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get the innerProperties property: Properties of the DNS forwarding ruleset.
     *
     * @return the innerProperties value.
     */
    private DnsForwardingRulesetProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public DnsForwardingRulesetInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DnsForwardingRulesetInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the dnsResolverOutboundEndpoints property: The reference to the DNS resolver outbound endpoints that are used
     * to route DNS queries matching the forwarding rules in the ruleset to the target DNS servers.
     *
     * @return the dnsResolverOutboundEndpoints value.
     */
    public List<SubResource> dnsResolverOutboundEndpoints() {
        return this.innerProperties() == null ? null : this.innerProperties().dnsResolverOutboundEndpoints();
    }

    /**
     * Set the dnsResolverOutboundEndpoints property: The reference to the DNS resolver outbound endpoints that are used
     * to route DNS queries matching the forwarding rules in the ruleset to the target DNS servers.
     *
     * @param dnsResolverOutboundEndpoints the dnsResolverOutboundEndpoints value to set.
     * @return the DnsForwardingRulesetInner object itself.
     */
    public DnsForwardingRulesetInner withDnsResolverOutboundEndpoints(List<SubResource> dnsResolverOutboundEndpoints) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DnsForwardingRulesetProperties();
        }
        this.innerProperties().withDnsResolverOutboundEndpoints(dnsResolverOutboundEndpoints);
        return this;
    }

    /**
     * Get the provisioningState property: The current provisioning state of the DNS forwarding ruleset. This is a
     * read-only property and any attempt to set this value will be ignored.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the resourceGuid property: The resourceGuid for the DNS forwarding ruleset.
     *
     * @return the resourceGuid value.
     */
    public String resourceGuid() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceGuid();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property innerProperties in model DnsForwardingRulesetInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DnsForwardingRulesetInner.class);
}
