// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dnsresolver.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.dnsresolver.fluent.DnsResolverPolicyVirtualNetworkLinksClient;
import com.azure.resourcemanager.dnsresolver.fluent.models.DnsResolverPolicyVirtualNetworkLinkInner;
import com.azure.resourcemanager.dnsresolver.implementation.models.DnsResolverPolicyVirtualNetworkLinkListResult;
import com.azure.resourcemanager.dnsresolver.models.DnsResolverPolicyVirtualNetworkLinkPatch;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * DnsResolverPolicyVirtualNetworkLinksClient.
 */
public final class DnsResolverPolicyVirtualNetworkLinksClientImpl
    implements DnsResolverPolicyVirtualNetworkLinksClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DnsResolverPolicyVirtualNetworkLinksService service;

    /**
     * The service client containing this operation class.
     */
    private final DnsResolverManagementClientImpl client;

    /**
     * Initializes an instance of DnsResolverPolicyVirtualNetworkLinksClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DnsResolverPolicyVirtualNetworkLinksClientImpl(DnsResolverManagementClientImpl client) {
        this.service = RestProxy.create(DnsResolverPolicyVirtualNetworkLinksService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DnsResolverManagementClientDnsResolverPolicyVirtualNetworkLinks to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "DnsResolverManagementClientDnsResolverPolicyVirtualNetworkLinks")
    public interface DnsResolverPolicyVirtualNetworkLinksService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolverPolicies/{dnsResolverPolicyName}/virtualNetworkLinks/{dnsResolverPolicyVirtualNetworkLinkName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DnsResolverPolicyVirtualNetworkLinkInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsResolverPolicyName") String dnsResolverPolicyName,
            @PathParam("dnsResolverPolicyVirtualNetworkLinkName") String dnsResolverPolicyVirtualNetworkLinkName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolverPolicies/{dnsResolverPolicyName}/virtualNetworkLinks/{dnsResolverPolicyVirtualNetworkLinkName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DnsResolverPolicyVirtualNetworkLinkInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsResolverPolicyName") String dnsResolverPolicyName,
            @PathParam("dnsResolverPolicyVirtualNetworkLinkName") String dnsResolverPolicyVirtualNetworkLinkName,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolverPolicies/{dnsResolverPolicyName}/virtualNetworkLinks/{dnsResolverPolicyVirtualNetworkLinkName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsResolverPolicyName") String dnsResolverPolicyName,
            @PathParam("dnsResolverPolicyVirtualNetworkLinkName") String dnsResolverPolicyVirtualNetworkLinkName,
            @HeaderParam("if-match") String ifMatch, @HeaderParam("if-none-match") String ifNoneMatch,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") DnsResolverPolicyVirtualNetworkLinkInner parameters, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolverPolicies/{dnsResolverPolicyName}/virtualNetworkLinks/{dnsResolverPolicyVirtualNetworkLinkName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsResolverPolicyName") String dnsResolverPolicyName,
            @PathParam("dnsResolverPolicyVirtualNetworkLinkName") String dnsResolverPolicyVirtualNetworkLinkName,
            @HeaderParam("if-match") String ifMatch, @HeaderParam("if-none-match") String ifNoneMatch,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") DnsResolverPolicyVirtualNetworkLinkInner parameters, Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolverPolicies/{dnsResolverPolicyName}/virtualNetworkLinks/{dnsResolverPolicyVirtualNetworkLinkName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsResolverPolicyName") String dnsResolverPolicyName,
            @PathParam("dnsResolverPolicyVirtualNetworkLinkName") String dnsResolverPolicyVirtualNetworkLinkName,
            @HeaderParam("if-match") String ifMatch, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") DnsResolverPolicyVirtualNetworkLinkPatch parameters, Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolverPolicies/{dnsResolverPolicyName}/virtualNetworkLinks/{dnsResolverPolicyVirtualNetworkLinkName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsResolverPolicyName") String dnsResolverPolicyName,
            @PathParam("dnsResolverPolicyVirtualNetworkLinkName") String dnsResolverPolicyVirtualNetworkLinkName,
            @HeaderParam("if-match") String ifMatch, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") DnsResolverPolicyVirtualNetworkLinkPatch parameters, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolverPolicies/{dnsResolverPolicyName}/virtualNetworkLinks/{dnsResolverPolicyVirtualNetworkLinkName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsResolverPolicyName") String dnsResolverPolicyName,
            @PathParam("dnsResolverPolicyVirtualNetworkLinkName") String dnsResolverPolicyVirtualNetworkLinkName,
            @HeaderParam("if-match") String ifMatch, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolverPolicies/{dnsResolverPolicyName}/virtualNetworkLinks/{dnsResolverPolicyVirtualNetworkLinkName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsResolverPolicyName") String dnsResolverPolicyName,
            @PathParam("dnsResolverPolicyVirtualNetworkLinkName") String dnsResolverPolicyVirtualNetworkLinkName,
            @HeaderParam("if-match") String ifMatch, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolverPolicies/{dnsResolverPolicyName}/virtualNetworkLinks")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DnsResolverPolicyVirtualNetworkLinkListResult>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsResolverPolicyName") String dnsResolverPolicyName, @QueryParam("$top") Integer top,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolverPolicies/{dnsResolverPolicyName}/virtualNetworkLinks")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DnsResolverPolicyVirtualNetworkLinkListResult> listSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dnsResolverPolicyName") String dnsResolverPolicyName, @QueryParam("$top") Integer top,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DnsResolverPolicyVirtualNetworkLinkListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DnsResolverPolicyVirtualNetworkLinkListResult> listNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets properties of a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a DNS resolver policy virtual network link along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DnsResolverPolicyVirtualNetworkLinkInner>> getWithResponseAsync(String resourceGroupName,
        String dnsResolverPolicyName, String dnsResolverPolicyVirtualNetworkLinkName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, dnsResolverPolicyName,
                dnsResolverPolicyVirtualNetworkLinkName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets properties of a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a DNS resolver policy virtual network link on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DnsResolverPolicyVirtualNetworkLinkInner> getAsync(String resourceGroupName,
        String dnsResolverPolicyName, String dnsResolverPolicyVirtualNetworkLinkName) {
        return getWithResponseAsync(resourceGroupName, dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets properties of a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a DNS resolver policy virtual network link along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DnsResolverPolicyVirtualNetworkLinkInner> getWithResponse(String resourceGroupName,
        String dnsResolverPolicyName, String dnsResolverPolicyVirtualNetworkLinkName, Context context) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName, accept, context);
    }

    /**
     * Gets properties of a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a DNS resolver policy virtual network link.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DnsResolverPolicyVirtualNetworkLinkInner get(String resourceGroupName, String dnsResolverPolicyName,
        String dnsResolverPolicyVirtualNetworkLinkName) {
        return getWithResponse(resourceGroupName, dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName,
            Context.NONE).getValue();
    }

    /**
     * Creates or updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy virtual network link along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String dnsResolverPolicyName, String dnsResolverPolicyVirtualNetworkLinkName,
        DnsResolverPolicyVirtualNetworkLinkInner parameters, String ifMatch, String ifNoneMatch) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createOrUpdate(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, ifMatch, ifNoneMatch, contentType, accept, parameters, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy virtual network link along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String dnsResolverPolicyName,
        String dnsResolverPolicyVirtualNetworkLinkName, DnsResolverPolicyVirtualNetworkLinkInner parameters,
        String ifMatch, String ifNoneMatch) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, ifMatch, ifNoneMatch, contentType, accept, parameters,
            Context.NONE);
    }

    /**
     * Creates or updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy virtual network link along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String dnsResolverPolicyName,
        String dnsResolverPolicyVirtualNetworkLinkName, DnsResolverPolicyVirtualNetworkLinkInner parameters,
        String ifMatch, String ifNoneMatch, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, ifMatch, ifNoneMatch, contentType, accept, parameters, context);
    }

    /**
     * Creates or updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a DNS resolver policy virtual network link.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DnsResolverPolicyVirtualNetworkLinkInner>, DnsResolverPolicyVirtualNetworkLinkInner>
        beginCreateOrUpdateAsync(String resourceGroupName, String dnsResolverPolicyName,
            String dnsResolverPolicyVirtualNetworkLinkName, DnsResolverPolicyVirtualNetworkLinkInner parameters,
            String ifMatch, String ifNoneMatch) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName,
            dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName, parameters, ifMatch, ifNoneMatch);
        return this.client
            .<DnsResolverPolicyVirtualNetworkLinkInner, DnsResolverPolicyVirtualNetworkLinkInner>getLroResult(mono,
                this.client.getHttpPipeline(), DnsResolverPolicyVirtualNetworkLinkInner.class,
                DnsResolverPolicyVirtualNetworkLinkInner.class, this.client.getContext());
    }

    /**
     * Creates or updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a DNS resolver policy virtual network link.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DnsResolverPolicyVirtualNetworkLinkInner>, DnsResolverPolicyVirtualNetworkLinkInner>
        beginCreateOrUpdateAsync(String resourceGroupName, String dnsResolverPolicyName,
            String dnsResolverPolicyVirtualNetworkLinkName, DnsResolverPolicyVirtualNetworkLinkInner parameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName,
            dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName, parameters, ifMatch, ifNoneMatch);
        return this.client
            .<DnsResolverPolicyVirtualNetworkLinkInner, DnsResolverPolicyVirtualNetworkLinkInner>getLroResult(mono,
                this.client.getHttpPipeline(), DnsResolverPolicyVirtualNetworkLinkInner.class,
                DnsResolverPolicyVirtualNetworkLinkInner.class, this.client.getContext());
    }

    /**
     * Creates or updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a DNS resolver policy virtual network link.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DnsResolverPolicyVirtualNetworkLinkInner>, DnsResolverPolicyVirtualNetworkLinkInner>
        beginCreateOrUpdate(String resourceGroupName, String dnsResolverPolicyName,
            String dnsResolverPolicyVirtualNetworkLinkName, DnsResolverPolicyVirtualNetworkLinkInner parameters,
            String ifMatch, String ifNoneMatch) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, parameters, ifMatch, ifNoneMatch);
        return this.client
            .<DnsResolverPolicyVirtualNetworkLinkInner, DnsResolverPolicyVirtualNetworkLinkInner>getLroResult(response,
                DnsResolverPolicyVirtualNetworkLinkInner.class, DnsResolverPolicyVirtualNetworkLinkInner.class,
                Context.NONE);
    }

    /**
     * Creates or updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a DNS resolver policy virtual network link.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DnsResolverPolicyVirtualNetworkLinkInner>, DnsResolverPolicyVirtualNetworkLinkInner>
        beginCreateOrUpdate(String resourceGroupName, String dnsResolverPolicyName,
            String dnsResolverPolicyVirtualNetworkLinkName, DnsResolverPolicyVirtualNetworkLinkInner parameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, parameters, ifMatch, ifNoneMatch);
        return this.client
            .<DnsResolverPolicyVirtualNetworkLinkInner, DnsResolverPolicyVirtualNetworkLinkInner>getLroResult(response,
                DnsResolverPolicyVirtualNetworkLinkInner.class, DnsResolverPolicyVirtualNetworkLinkInner.class,
                Context.NONE);
    }

    /**
     * Creates or updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a DNS resolver policy virtual network link.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DnsResolverPolicyVirtualNetworkLinkInner>, DnsResolverPolicyVirtualNetworkLinkInner>
        beginCreateOrUpdate(String resourceGroupName, String dnsResolverPolicyName,
            String dnsResolverPolicyVirtualNetworkLinkName, DnsResolverPolicyVirtualNetworkLinkInner parameters,
            String ifMatch, String ifNoneMatch, Context context) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, parameters, ifMatch, ifNoneMatch, context);
        return this.client
            .<DnsResolverPolicyVirtualNetworkLinkInner, DnsResolverPolicyVirtualNetworkLinkInner>getLroResult(response,
                DnsResolverPolicyVirtualNetworkLinkInner.class, DnsResolverPolicyVirtualNetworkLinkInner.class,
                context);
    }

    /**
     * Creates or updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy virtual network link on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DnsResolverPolicyVirtualNetworkLinkInner> createOrUpdateAsync(String resourceGroupName,
        String dnsResolverPolicyName, String dnsResolverPolicyVirtualNetworkLinkName,
        DnsResolverPolicyVirtualNetworkLinkInner parameters, String ifMatch, String ifNoneMatch) {
        return beginCreateOrUpdateAsync(resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, parameters, ifMatch, ifNoneMatch).last()
                .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy virtual network link on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DnsResolverPolicyVirtualNetworkLinkInner> createOrUpdateAsync(String resourceGroupName,
        String dnsResolverPolicyName, String dnsResolverPolicyVirtualNetworkLinkName,
        DnsResolverPolicyVirtualNetworkLinkInner parameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return beginCreateOrUpdateAsync(resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, parameters, ifMatch, ifNoneMatch).last()
                .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy virtual network link.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DnsResolverPolicyVirtualNetworkLinkInner createOrUpdate(String resourceGroupName,
        String dnsResolverPolicyName, String dnsResolverPolicyVirtualNetworkLinkName,
        DnsResolverPolicyVirtualNetworkLinkInner parameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return beginCreateOrUpdate(resourceGroupName, dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName,
            parameters, ifMatch, ifNoneMatch).getFinalResult();
    }

    /**
     * Creates or updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing
     * resource. Other values will be ignored.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy virtual network link.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DnsResolverPolicyVirtualNetworkLinkInner createOrUpdate(String resourceGroupName,
        String dnsResolverPolicyName, String dnsResolverPolicyVirtualNetworkLinkName,
        DnsResolverPolicyVirtualNetworkLinkInner parameters, String ifMatch, String ifNoneMatch, Context context) {
        return beginCreateOrUpdate(resourceGroupName, dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName,
            parameters, ifMatch, ifNoneMatch, context).getFinalResult();
    }

    /**
     * Updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy virtual network link along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String dnsResolverPolicyName, String dnsResolverPolicyVirtualNetworkLinkName,
        DnsResolverPolicyVirtualNetworkLinkPatch parameters, String ifMatch) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, dnsResolverPolicyName,
                dnsResolverPolicyVirtualNetworkLinkName, ifMatch, contentType, accept, parameters, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy virtual network link along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String dnsResolverPolicyName,
        String dnsResolverPolicyVirtualNetworkLinkName, DnsResolverPolicyVirtualNetworkLinkPatch parameters,
        String ifMatch) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, ifMatch, contentType, accept, parameters, Context.NONE);
    }

    /**
     * Updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy virtual network link along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String dnsResolverPolicyName,
        String dnsResolverPolicyVirtualNetworkLinkName, DnsResolverPolicyVirtualNetworkLinkPatch parameters,
        String ifMatch, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, ifMatch, contentType, accept, parameters, context);
    }

    /**
     * Updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a DNS resolver policy virtual network link.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DnsResolverPolicyVirtualNetworkLinkInner>, DnsResolverPolicyVirtualNetworkLinkInner>
        beginUpdateAsync(String resourceGroupName, String dnsResolverPolicyName,
            String dnsResolverPolicyVirtualNetworkLinkName, DnsResolverPolicyVirtualNetworkLinkPatch parameters,
            String ifMatch) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, parameters, ifMatch);
        return this.client
            .<DnsResolverPolicyVirtualNetworkLinkInner, DnsResolverPolicyVirtualNetworkLinkInner>getLroResult(mono,
                this.client.getHttpPipeline(), DnsResolverPolicyVirtualNetworkLinkInner.class,
                DnsResolverPolicyVirtualNetworkLinkInner.class, this.client.getContext());
    }

    /**
     * Updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes a DNS resolver policy virtual network link.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DnsResolverPolicyVirtualNetworkLinkInner>, DnsResolverPolicyVirtualNetworkLinkInner>
        beginUpdateAsync(String resourceGroupName, String dnsResolverPolicyName,
            String dnsResolverPolicyVirtualNetworkLinkName, DnsResolverPolicyVirtualNetworkLinkPatch parameters) {
        final String ifMatch = null;
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, parameters, ifMatch);
        return this.client
            .<DnsResolverPolicyVirtualNetworkLinkInner, DnsResolverPolicyVirtualNetworkLinkInner>getLroResult(mono,
                this.client.getHttpPipeline(), DnsResolverPolicyVirtualNetworkLinkInner.class,
                DnsResolverPolicyVirtualNetworkLinkInner.class, this.client.getContext());
    }

    /**
     * Updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a DNS resolver policy virtual network link.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DnsResolverPolicyVirtualNetworkLinkInner>, DnsResolverPolicyVirtualNetworkLinkInner>
        beginUpdate(String resourceGroupName, String dnsResolverPolicyName,
            String dnsResolverPolicyVirtualNetworkLinkName, DnsResolverPolicyVirtualNetworkLinkPatch parameters,
            String ifMatch) {
        Response<BinaryData> response = updateWithResponse(resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, parameters, ifMatch);
        return this.client
            .<DnsResolverPolicyVirtualNetworkLinkInner, DnsResolverPolicyVirtualNetworkLinkInner>getLroResult(response,
                DnsResolverPolicyVirtualNetworkLinkInner.class, DnsResolverPolicyVirtualNetworkLinkInner.class,
                Context.NONE);
    }

    /**
     * Updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a DNS resolver policy virtual network link.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DnsResolverPolicyVirtualNetworkLinkInner>, DnsResolverPolicyVirtualNetworkLinkInner>
        beginUpdate(String resourceGroupName, String dnsResolverPolicyName,
            String dnsResolverPolicyVirtualNetworkLinkName, DnsResolverPolicyVirtualNetworkLinkPatch parameters) {
        final String ifMatch = null;
        Response<BinaryData> response = updateWithResponse(resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, parameters, ifMatch);
        return this.client
            .<DnsResolverPolicyVirtualNetworkLinkInner, DnsResolverPolicyVirtualNetworkLinkInner>getLroResult(response,
                DnsResolverPolicyVirtualNetworkLinkInner.class, DnsResolverPolicyVirtualNetworkLinkInner.class,
                Context.NONE);
    }

    /**
     * Updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a DNS resolver policy virtual network link.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DnsResolverPolicyVirtualNetworkLinkInner>, DnsResolverPolicyVirtualNetworkLinkInner>
        beginUpdate(String resourceGroupName, String dnsResolverPolicyName,
            String dnsResolverPolicyVirtualNetworkLinkName, DnsResolverPolicyVirtualNetworkLinkPatch parameters,
            String ifMatch, Context context) {
        Response<BinaryData> response = updateWithResponse(resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, parameters, ifMatch, context);
        return this.client
            .<DnsResolverPolicyVirtualNetworkLinkInner, DnsResolverPolicyVirtualNetworkLinkInner>getLroResult(response,
                DnsResolverPolicyVirtualNetworkLinkInner.class, DnsResolverPolicyVirtualNetworkLinkInner.class,
                context);
    }

    /**
     * Updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy virtual network link on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DnsResolverPolicyVirtualNetworkLinkInner> updateAsync(String resourceGroupName,
        String dnsResolverPolicyName, String dnsResolverPolicyVirtualNetworkLinkName,
        DnsResolverPolicyVirtualNetworkLinkPatch parameters, String ifMatch) {
        return beginUpdateAsync(resourceGroupName, dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName,
            parameters, ifMatch).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy virtual network link on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DnsResolverPolicyVirtualNetworkLinkInner> updateAsync(String resourceGroupName,
        String dnsResolverPolicyName, String dnsResolverPolicyVirtualNetworkLinkName,
        DnsResolverPolicyVirtualNetworkLinkPatch parameters) {
        final String ifMatch = null;
        return beginUpdateAsync(resourceGroupName, dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName,
            parameters, ifMatch).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy virtual network link.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DnsResolverPolicyVirtualNetworkLinkInner update(String resourceGroupName, String dnsResolverPolicyName,
        String dnsResolverPolicyVirtualNetworkLinkName, DnsResolverPolicyVirtualNetworkLinkPatch parameters) {
        final String ifMatch = null;
        return beginUpdate(resourceGroupName, dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName,
            parameters, ifMatch).getFinalResult();
    }

    /**
     * Updates a DNS resolver policy virtual network link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a DNS resolver policy virtual network link.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DnsResolverPolicyVirtualNetworkLinkInner update(String resourceGroupName, String dnsResolverPolicyName,
        String dnsResolverPolicyVirtualNetworkLinkName, DnsResolverPolicyVirtualNetworkLinkPatch parameters,
        String ifMatch, Context context) {
        return beginUpdate(resourceGroupName, dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName,
            parameters, ifMatch, context).getFinalResult();
    }

    /**
     * Deletes a DNS resolver policy virtual network link. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String dnsResolverPolicyName, String dnsResolverPolicyVirtualNetworkLinkName, String ifMatch) {
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, dnsResolverPolicyName,
                dnsResolverPolicyVirtualNetworkLinkName, ifMatch, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes a DNS resolver policy virtual network link. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String dnsResolverPolicyName,
        String dnsResolverPolicyVirtualNetworkLinkName, String ifMatch) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, ifMatch, Context.NONE);
    }

    /**
     * Deletes a DNS resolver policy virtual network link. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String dnsResolverPolicyName,
        String dnsResolverPolicyVirtualNetworkLinkName, String ifMatch, Context context) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, ifMatch, context);
    }

    /**
     * Deletes a DNS resolver policy virtual network link. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String dnsResolverPolicyName,
        String dnsResolverPolicyVirtualNetworkLinkName, String ifMatch) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, ifMatch);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes a DNS resolver policy virtual network link. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String dnsResolverPolicyName,
        String dnsResolverPolicyVirtualNetworkLinkName) {
        final String ifMatch = null;
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, ifMatch);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes a DNS resolver policy virtual network link. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String dnsResolverPolicyName,
        String dnsResolverPolicyVirtualNetworkLinkName, String ifMatch) {
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, ifMatch);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Deletes a DNS resolver policy virtual network link. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String dnsResolverPolicyName,
        String dnsResolverPolicyVirtualNetworkLinkName) {
        final String ifMatch = null;
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, ifMatch);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Deletes a DNS resolver policy virtual network link. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String dnsResolverPolicyName,
        String dnsResolverPolicyVirtualNetworkLinkName, String ifMatch, Context context) {
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, dnsResolverPolicyName,
            dnsResolverPolicyVirtualNetworkLinkName, ifMatch, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Deletes a DNS resolver policy virtual network link. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String dnsResolverPolicyName,
        String dnsResolverPolicyVirtualNetworkLinkName, String ifMatch) {
        return beginDeleteAsync(resourceGroupName, dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName,
            ifMatch).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a DNS resolver policy virtual network link. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String dnsResolverPolicyName,
        String dnsResolverPolicyVirtualNetworkLinkName) {
        final String ifMatch = null;
        return beginDeleteAsync(resourceGroupName, dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName,
            ifMatch).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a DNS resolver policy virtual network link. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String dnsResolverPolicyName,
        String dnsResolverPolicyVirtualNetworkLinkName) {
        final String ifMatch = null;
        beginDelete(resourceGroupName, dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName, ifMatch)
            .getFinalResult();
    }

    /**
     * Deletes a DNS resolver policy virtual network link. WARNING: This operation cannot be undone.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param dnsResolverPolicyVirtualNetworkLinkName The name of the DNS resolver policy virtual network link for the
     * DNS resolver policy.
     * @param ifMatch ETag of the resource. Omit this value to always overwrite the current resource. Specify the
     * last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String dnsResolverPolicyName,
        String dnsResolverPolicyVirtualNetworkLinkName, String ifMatch, Context context) {
        beginDelete(resourceGroupName, dnsResolverPolicyName, dnsResolverPolicyVirtualNetworkLinkName, ifMatch, context)
            .getFinalResult();
    }

    /**
     * Lists DNS resolver policy virtual network links.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsResolverPolicyVirtualNetworkLink list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DnsResolverPolicyVirtualNetworkLinkInner>> listSinglePageAsync(String resourceGroupName,
        String dnsResolverPolicyName, Integer top) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, dnsResolverPolicyName, top, accept, context))
            .<PagedResponse<DnsResolverPolicyVirtualNetworkLinkInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists DNS resolver policy virtual network links.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsResolverPolicyVirtualNetworkLink list operation as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DnsResolverPolicyVirtualNetworkLinkInner> listAsync(String resourceGroupName,
        String dnsResolverPolicyName, Integer top) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, dnsResolverPolicyName, top),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists DNS resolver policy virtual network links.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsResolverPolicyVirtualNetworkLink list operation as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DnsResolverPolicyVirtualNetworkLinkInner> listAsync(String resourceGroupName,
        String dnsResolverPolicyName) {
        final Integer top = null;
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, dnsResolverPolicyName, top),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists DNS resolver policy virtual network links.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsResolverPolicyVirtualNetworkLink list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DnsResolverPolicyVirtualNetworkLinkInner> listSinglePage(String resourceGroupName,
        String dnsResolverPolicyName, Integer top) {
        final String accept = "application/json";
        Response<DnsResolverPolicyVirtualNetworkLinkListResult> res
            = service.listSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
                resourceGroupName, dnsResolverPolicyName, top, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists DNS resolver policy virtual network links.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsResolverPolicyVirtualNetworkLink list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DnsResolverPolicyVirtualNetworkLinkInner> listSinglePage(String resourceGroupName,
        String dnsResolverPolicyName, Integer top, Context context) {
        final String accept = "application/json";
        Response<DnsResolverPolicyVirtualNetworkLinkListResult> res
            = service.listSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
                resourceGroupName, dnsResolverPolicyName, top, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists DNS resolver policy virtual network links.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsResolverPolicyVirtualNetworkLink list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DnsResolverPolicyVirtualNetworkLinkInner> list(String resourceGroupName,
        String dnsResolverPolicyName) {
        final Integer top = null;
        return new PagedIterable<>(() -> listSinglePage(resourceGroupName, dnsResolverPolicyName, top),
            nextLink -> listNextSinglePage(nextLink));
    }

    /**
     * Lists DNS resolver policy virtual network links.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsResolverPolicyName The name of the DNS resolver policy.
     * @param top The maximum number of results to return. If not specified, returns up to 100 results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsResolverPolicyVirtualNetworkLink list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DnsResolverPolicyVirtualNetworkLinkInner> list(String resourceGroupName,
        String dnsResolverPolicyName, Integer top, Context context) {
        return new PagedIterable<>(() -> listSinglePage(resourceGroupName, dnsResolverPolicyName, top, context),
            nextLink -> listNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsResolverPolicyVirtualNetworkLink list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DnsResolverPolicyVirtualNetworkLinkInner>> listNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DnsResolverPolicyVirtualNetworkLinkInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsResolverPolicyVirtualNetworkLink list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DnsResolverPolicyVirtualNetworkLinkInner> listNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<DnsResolverPolicyVirtualNetworkLinkListResult> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DnsResolverPolicyVirtualNetworkLink list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DnsResolverPolicyVirtualNetworkLinkInner> listNextSinglePage(String nextLink,
        Context context) {
        final String accept = "application/json";
        Response<DnsResolverPolicyVirtualNetworkLinkListResult> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }
}
