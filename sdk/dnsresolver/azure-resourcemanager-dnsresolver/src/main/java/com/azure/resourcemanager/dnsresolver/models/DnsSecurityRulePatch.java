// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SubResource;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.dnsresolver.fluent.models.DnsSecurityRulePatchProperties;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Describes a DNS security rule for PATCH operation.
 */
@Fluent
public final class DnsSecurityRulePatch implements JsonSerializable<DnsSecurityRulePatch> {
    /*
     * Updatable properties of the DNS security rule.
     */
    private DnsSecurityRulePatchProperties innerProperties;

    /*
     * Tags for DNS security rule.
     */
    private Map<String, String> tags;

    /**
     * Creates an instance of DnsSecurityRulePatch class.
     */
    public DnsSecurityRulePatch() {
    }

    /**
     * Get the innerProperties property: Updatable properties of the DNS security rule.
     * 
     * @return the innerProperties value.
     */
    private DnsSecurityRulePatchProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the tags property: Tags for DNS security rule.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Tags for DNS security rule.
     * 
     * @param tags the tags value to set.
     * @return the DnsSecurityRulePatch object itself.
     */
    public DnsSecurityRulePatch withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the action property: The action to take on DNS requests that match the DNS security rule.
     * 
     * @return the action value.
     */
    public DnsSecurityRuleAction action() {
        return this.innerProperties() == null ? null : this.innerProperties().action();
    }

    /**
     * Set the action property: The action to take on DNS requests that match the DNS security rule.
     * 
     * @param action the action value to set.
     * @return the DnsSecurityRulePatch object itself.
     */
    public DnsSecurityRulePatch withAction(DnsSecurityRuleAction action) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DnsSecurityRulePatchProperties();
        }
        this.innerProperties().withAction(action);
        return this;
    }

    /**
     * Get the dnsResolverDomainLists property: DNS resolver policy domains lists that the DNS security rule applies to.
     * 
     * @return the dnsResolverDomainLists value.
     */
    public List<SubResource> dnsResolverDomainLists() {
        return this.innerProperties() == null ? null : this.innerProperties().dnsResolverDomainLists();
    }

    /**
     * Set the dnsResolverDomainLists property: DNS resolver policy domains lists that the DNS security rule applies to.
     * 
     * @param dnsResolverDomainLists the dnsResolverDomainLists value to set.
     * @return the DnsSecurityRulePatch object itself.
     */
    public DnsSecurityRulePatch withDnsResolverDomainLists(List<SubResource> dnsResolverDomainLists) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DnsSecurityRulePatchProperties();
        }
        this.innerProperties().withDnsResolverDomainLists(dnsResolverDomainLists);
        return this;
    }

    /**
     * Get the dnsSecurityRuleState property: The state of DNS security rule.
     * 
     * @return the dnsSecurityRuleState value.
     */
    public DnsSecurityRuleState dnsSecurityRuleState() {
        return this.innerProperties() == null ? null : this.innerProperties().dnsSecurityRuleState();
    }

    /**
     * Set the dnsSecurityRuleState property: The state of DNS security rule.
     * 
     * @param dnsSecurityRuleState the dnsSecurityRuleState value to set.
     * @return the DnsSecurityRulePatch object itself.
     */
    public DnsSecurityRulePatch withDnsSecurityRuleState(DnsSecurityRuleState dnsSecurityRuleState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DnsSecurityRulePatchProperties();
        }
        this.innerProperties().withDnsSecurityRuleState(dnsSecurityRuleState);
        return this;
    }

    /**
     * Get the priority property: The priority of the DNS security rule.
     * 
     * @return the priority value.
     */
    public Integer priority() {
        return this.innerProperties() == null ? null : this.innerProperties().priority();
    }

    /**
     * Set the priority property: The priority of the DNS security rule.
     * 
     * @param priority the priority value to set.
     * @return the DnsSecurityRulePatch object itself.
     */
    public DnsSecurityRulePatch withPriority(Integer priority) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DnsSecurityRulePatchProperties();
        }
        this.innerProperties().withPriority(priority);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DnsSecurityRulePatch from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DnsSecurityRulePatch if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DnsSecurityRulePatch.
     */
    public static DnsSecurityRulePatch fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DnsSecurityRulePatch deserializedDnsSecurityRulePatch = new DnsSecurityRulePatch();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedDnsSecurityRulePatch.innerProperties = DnsSecurityRulePatchProperties.fromJson(reader);
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedDnsSecurityRulePatch.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDnsSecurityRulePatch;
        });
    }
}
