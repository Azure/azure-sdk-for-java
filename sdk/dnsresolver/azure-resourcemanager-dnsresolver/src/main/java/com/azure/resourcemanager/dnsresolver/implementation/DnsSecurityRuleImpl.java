// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SubResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.dnsresolver.fluent.models.DnsSecurityRuleInner;
import com.azure.resourcemanager.dnsresolver.models.DnsSecurityRule;
import com.azure.resourcemanager.dnsresolver.models.DnsSecurityRuleAction;
import com.azure.resourcemanager.dnsresolver.models.DnsSecurityRulePatch;
import com.azure.resourcemanager.dnsresolver.models.DnsSecurityRuleState;
import com.azure.resourcemanager.dnsresolver.models.ProvisioningState;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class DnsSecurityRuleImpl implements DnsSecurityRule, DnsSecurityRule.Definition, DnsSecurityRule.Update {
    private DnsSecurityRuleInner innerObject;

    private final com.azure.resourcemanager.dnsresolver.DnsResolverManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public int priority() {
        return this.innerModel().priority();
    }

    public DnsSecurityRuleAction action() {
        return this.innerModel().action();
    }

    public List<SubResource> dnsResolverDomainLists() {
        List<SubResource> inner = this.innerModel().dnsResolverDomainLists();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public DnsSecurityRuleState dnsSecurityRuleState() {
        return this.innerModel().dnsSecurityRuleState();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public DnsSecurityRuleInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.dnsresolver.DnsResolverManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String dnsResolverPolicyName;

    private String dnsSecurityRuleName;

    private String createIfMatch;

    private String createIfNoneMatch;

    private String updateIfMatch;

    private DnsSecurityRulePatch updateParameters;

    public DnsSecurityRuleImpl withExistingDnsResolverPolicy(String resourceGroupName, String dnsResolverPolicyName) {
        this.resourceGroupName = resourceGroupName;
        this.dnsResolverPolicyName = dnsResolverPolicyName;
        return this;
    }

    public DnsSecurityRule create() {
        this.innerObject = serviceManager.serviceClient()
            .getDnsSecurityRules()
            .createOrUpdate(resourceGroupName, dnsResolverPolicyName, dnsSecurityRuleName, this.innerModel(),
                createIfMatch, createIfNoneMatch, Context.NONE);
        return this;
    }

    public DnsSecurityRule create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getDnsSecurityRules()
            .createOrUpdate(resourceGroupName, dnsResolverPolicyName, dnsSecurityRuleName, this.innerModel(),
                createIfMatch, createIfNoneMatch, context);
        return this;
    }

    DnsSecurityRuleImpl(String name, com.azure.resourcemanager.dnsresolver.DnsResolverManager serviceManager) {
        this.innerObject = new DnsSecurityRuleInner();
        this.serviceManager = serviceManager;
        this.dnsSecurityRuleName = name;
        this.createIfMatch = null;
        this.createIfNoneMatch = null;
    }

    public DnsSecurityRuleImpl update() {
        this.updateIfMatch = null;
        this.updateParameters = new DnsSecurityRulePatch();
        return this;
    }

    public DnsSecurityRule apply() {
        this.innerObject = serviceManager.serviceClient()
            .getDnsSecurityRules()
            .update(resourceGroupName, dnsResolverPolicyName, dnsSecurityRuleName, updateParameters, updateIfMatch,
                Context.NONE);
        return this;
    }

    public DnsSecurityRule apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getDnsSecurityRules()
            .update(resourceGroupName, dnsResolverPolicyName, dnsSecurityRuleName, updateParameters, updateIfMatch,
                context);
        return this;
    }

    DnsSecurityRuleImpl(DnsSecurityRuleInner innerObject,
        com.azure.resourcemanager.dnsresolver.DnsResolverManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.dnsResolverPolicyName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "dnsResolverPolicies");
        this.dnsSecurityRuleName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "dnsSecurityRules");
    }

    public DnsSecurityRule refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getDnsSecurityRules()
            .getWithResponse(resourceGroupName, dnsResolverPolicyName, dnsSecurityRuleName, Context.NONE)
            .getValue();
        return this;
    }

    public DnsSecurityRule refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getDnsSecurityRules()
            .getWithResponse(resourceGroupName, dnsResolverPolicyName, dnsSecurityRuleName, context)
            .getValue();
        return this;
    }

    public DnsSecurityRuleImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public DnsSecurityRuleImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public DnsSecurityRuleImpl withPriority(int priority) {
        this.innerModel().withPriority(priority);
        return this;
    }

    public DnsSecurityRuleImpl withAction(DnsSecurityRuleAction action) {
        if (isInCreateMode()) {
            this.innerModel().withAction(action);
            return this;
        } else {
            this.updateParameters.withAction(action);
            return this;
        }
    }

    public DnsSecurityRuleImpl withDnsResolverDomainLists(List<SubResource> dnsResolverDomainLists) {
        if (isInCreateMode()) {
            this.innerModel().withDnsResolverDomainLists(dnsResolverDomainLists);
            return this;
        } else {
            this.updateParameters.withDnsResolverDomainLists(dnsResolverDomainLists);
            return this;
        }
    }

    public DnsSecurityRuleImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public DnsSecurityRuleImpl withDnsSecurityRuleState(DnsSecurityRuleState dnsSecurityRuleState) {
        if (isInCreateMode()) {
            this.innerModel().withDnsSecurityRuleState(dnsSecurityRuleState);
            return this;
        } else {
            this.updateParameters.withDnsSecurityRuleState(dnsSecurityRuleState);
            return this;
        }
    }

    public DnsSecurityRuleImpl withIfMatch(String ifMatch) {
        if (isInCreateMode()) {
            this.createIfMatch = ifMatch;
            return this;
        } else {
            this.updateIfMatch = ifMatch;
            return this;
        }
    }

    public DnsSecurityRuleImpl withIfNoneMatch(String ifNoneMatch) {
        this.createIfNoneMatch = ifNoneMatch;
        return this;
    }

    public DnsSecurityRuleImpl withPriority(Integer priority) {
        this.updateParameters.withPriority(priority);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
