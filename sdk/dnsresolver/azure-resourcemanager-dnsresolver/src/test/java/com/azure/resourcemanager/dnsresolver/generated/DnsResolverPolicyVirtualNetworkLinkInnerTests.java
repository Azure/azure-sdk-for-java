// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dnsresolver.fluent.models.DnsResolverPolicyVirtualNetworkLinkInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DnsResolverPolicyVirtualNetworkLinkInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DnsResolverPolicyVirtualNetworkLinkInner model = BinaryData.fromString(
            "{\"properties\":{\"virtualNetwork\":{\"id\":\"taakc\"},\"provisioningState\":\"Failed\"},\"etag\":\"zvqtmnubexkp\",\"location\":\"smond\",\"tags\":{\"jvp\":\"uxvypomgkopkwh\",\"ysmocmbqfqvmkcxo\":\"jqg\",\"tddckcb\":\"apvhelxprgly\"},\"id\":\"uejrjxgc\",\"name\":\"qibrhosxsdqrhzoy\",\"type\":\"i\"}")
            .toObject(DnsResolverPolicyVirtualNetworkLinkInner.class);
        Assertions.assertEquals("smond", model.location());
        Assertions.assertEquals("uxvypomgkopkwh", model.tags().get("jvp"));
        Assertions.assertEquals("taakc", model.virtualNetwork().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DnsResolverPolicyVirtualNetworkLinkInner model
            = new DnsResolverPolicyVirtualNetworkLinkInner().withLocation("smond")
                .withTags(mapOf("jvp", "uxvypomgkopkwh", "ysmocmbqfqvmkcxo", "jqg", "tddckcb", "apvhelxprgly"))
                .withVirtualNetwork(new SubResource().withId("taakc"));
        model = BinaryData.fromObject(model).toObject(DnsResolverPolicyVirtualNetworkLinkInner.class);
        Assertions.assertEquals("smond", model.location());
        Assertions.assertEquals("uxvypomgkopkwh", model.tags().get("jvp"));
        Assertions.assertEquals("taakc", model.virtualNetwork().id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
