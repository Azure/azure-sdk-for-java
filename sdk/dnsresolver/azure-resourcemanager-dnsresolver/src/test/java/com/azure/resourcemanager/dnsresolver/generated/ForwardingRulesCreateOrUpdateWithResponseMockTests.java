// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.dnsresolver.DnsResolverManager;
import com.azure.resourcemanager.dnsresolver.models.ForwardingRule;
import com.azure.resourcemanager.dnsresolver.models.ForwardingRuleState;
import com.azure.resourcemanager.dnsresolver.models.TargetDnsServer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ForwardingRulesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"etag\":\"fdntwjchrdgoih\",\"properties\":{\"domainName\":\"umwctondz\",\"targetDnsServers\":[{\"ipAddress\":\"uu\",\"port\":1575839239},{\"ipAddress\":\"lwg\",\"port\":950264717},{\"ipAddress\":\"sb\",\"port\":1284513946},{\"ipAddress\":\"vvt\",\"port\":1304318948}],\"metadata\":{\"fxqknpirgneptt\":\"qfi\",\"lpijnkrxfrd\":\"qmsniffcdmqnro\",\"zzronasx\":\"hcrat\"},\"forwardingRuleState\":\"Disabled\",\"provisioningState\":\"Creating\"},\"id\":\"yzhftwesgogczh\",\"name\":\"nnxk\",\"type\":\"lgnyhmo\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DnsResolverManager manager = DnsResolverManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ForwardingRule response = manager.forwardingRules()
            .define("j")
            .withExistingDnsForwardingRuleset("qjjlwuen", "rkpyouaibrebqaay")
            .withDomainName("tezlwff")
            .withTargetDnsServers(
                Arrays.asList(new TargetDnsServer().withIpAddress("akpjpqqmtedlt").withPort(997938264)))
            .withMetadata(mapOf("upkvipmdsc", "yeozphvwauyqncy", "totxhojujb", "xqupevzhf", "n", "pelmcuvhixbjxyf"))
            .withForwardingRuleState(ForwardingRuleState.ENABLED)
            .withIfMatch("iwii")
            .withIfNoneMatch("htywubxcbihwq")
            .create();

        Assertions.assertEquals("umwctondz", response.domainName());
        Assertions.assertEquals("uu", response.targetDnsServers().get(0).ipAddress());
        Assertions.assertEquals(1575839239, response.targetDnsServers().get(0).port());
        Assertions.assertEquals("qfi", response.metadata().get("fxqknpirgneptt"));
        Assertions.assertEquals(ForwardingRuleState.DISABLED, response.forwardingRuleState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
