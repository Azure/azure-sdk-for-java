// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.dnsresolver.DnsResolverManager;
import com.azure.resourcemanager.dnsresolver.models.ForwardingRule;
import com.azure.resourcemanager.dnsresolver.models.ForwardingRuleState;
import com.azure.resourcemanager.dnsresolver.models.TargetDnsServer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ForwardingRulesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"domainName\":\"g\",\"targetDnsServers\":[{\"ipAddress\":\"drihpfhoqcaaewda\",\"port\":1360898265},{\"ipAddress\":\"jvlpjxxkzbr\",\"port\":1373073585}],\"metadata\":{\"zoggculapz\":\"vsiykzkdncjdxon\",\"pgogtqxepny\":\"y\"},\"forwardingRuleState\":\"Enabled\",\"provisioningState\":\"Creating\"},\"etag\":\"lyjt\",\"id\":\"of\",\"name\":\"zhvfcibyfmowuxr\",\"type\":\"jpvd\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DnsResolverManager manager = DnsResolverManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ForwardingRule response = manager.forwardingRules()
            .define("t")
            .withExistingDnsForwardingRuleset("il", "yw")
            .withDomainName("gkxnyedabg")
            .withTargetDnsServers(Arrays.asList(new TargetDnsServer().withIpAddress("udtjuewbc").withPort(1871891438),
                new TargetDnsServer().withIpAddress("uuwhcjyxcc").withPort(970870399),
                new TargetDnsServer().withIpAddress("payakkud").withPort(1773964666),
                new TargetDnsServer().withIpAddress("gwjplmag").withPort(1164278403)))
            .withMetadata(
                mapOf("gsj", "hpfkyrkdbdgi", "obaiyhddviaceg", "mnwqj", "ntfpmvmemfnc", "n", "xlllchp", "dwvvba"))
            .withForwardingRuleState(ForwardingRuleState.ENABLED)
            .withIfMatch("widf")
            .withIfNoneMatch("xsspuunnoxyhk")
            .create();

        Assertions.assertEquals("g", response.domainName());
        Assertions.assertEquals("drihpfhoqcaaewda", response.targetDnsServers().get(0).ipAddress());
        Assertions.assertEquals(1360898265, response.targetDnsServers().get(0).port());
        Assertions.assertEquals("vsiykzkdncjdxon", response.metadata().get("zoggculapz"));
        Assertions.assertEquals(ForwardingRuleState.ENABLED, response.forwardingRuleState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
