// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.dnsresolver.DnsResolverManager;
import com.azure.resourcemanager.dnsresolver.models.InboundEndpoint;
import com.azure.resourcemanager.dnsresolver.models.IpAllocationMethod;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InboundEndpointsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"etag\":\"dmoizpostmg\",\"properties\":{\"ipConfigurations\":[{\"subnet\":{\"id\":\"bunrmfqjhhk\"},\"privateIpAddress\":\"pvjymjhxxjyng\",\"privateIpAllocationMethod\":\"Static\"}],\"provisioningState\":\"Updating\",\"resourceGuid\":\"tswb\"},\"location\":\"zvszj\",\"tags\":{\"ivetvtcq\":\"vjfdx\",\"mcbxvwvxysl\":\"qtdo\",\"ytkblmpew\":\"bhsfxob\"},\"id\":\"wfbkrvrns\",\"name\":\"shqjohxcrsbf\",\"type\":\"vasrruvwb\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DnsResolverManager manager = DnsResolverManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        InboundEndpoint response = manager.inboundEndpoints()
            .getWithResponse("opppcqeq", "ol", "dahzxctobg", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("zvszj", response.location());
        Assertions.assertEquals("vjfdx", response.tags().get("ivetvtcq"));
        Assertions.assertEquals("bunrmfqjhhk", response.ipConfigurations().get(0).subnet().id());
        Assertions.assertEquals("pvjymjhxxjyng", response.ipConfigurations().get(0).privateIpAddress());
        Assertions.assertEquals(IpAllocationMethod.STATIC,
            response.ipConfigurations().get(0).privateIpAllocationMethod());
    }
}
