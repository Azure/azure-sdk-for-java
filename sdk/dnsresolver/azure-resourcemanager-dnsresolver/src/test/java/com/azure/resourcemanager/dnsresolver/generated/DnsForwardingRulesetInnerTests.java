// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dnsresolver.fluent.models.DnsForwardingRulesetInner;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DnsForwardingRulesetInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DnsForwardingRulesetInner model = BinaryData.fromString(
            "{\"etag\":\"s\",\"properties\":{\"dnsResolverOutboundEndpoints\":[{\"id\":\"cbkbfkg\"},{\"id\":\"dkexxppofm\"}],\"provisioningState\":\"Deleting\",\"resourceGuid\":\"fjpgddtocjjxhvp\"},\"location\":\"uexhdzx\",\"tags\":{\"wndeicbtwnp\":\"eojnxqbzvddn\",\"hcffcyddglmjthjq\":\"aoqvuh\",\"hix\":\"wpyeicxmqciwqvh\",\"og\":\"igdtopbob\"},\"id\":\"m\",\"name\":\"w\",\"type\":\"a\"}")
            .toObject(DnsForwardingRulesetInner.class);
        Assertions.assertEquals("uexhdzx", model.location());
        Assertions.assertEquals("eojnxqbzvddn", model.tags().get("wndeicbtwnp"));
        Assertions.assertEquals("cbkbfkg", model.dnsResolverOutboundEndpoints().get(0).id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DnsForwardingRulesetInner model = new DnsForwardingRulesetInner().withLocation("uexhdzx")
            .withTags(mapOf("wndeicbtwnp", "eojnxqbzvddn", "hcffcyddglmjthjq", "aoqvuh", "hix", "wpyeicxmqciwqvh", "og",
                "igdtopbob"))
            .withDnsResolverOutboundEndpoints(
                Arrays.asList(new SubResource().withId("cbkbfkg"), new SubResource().withId("dkexxppofm")));
        model = BinaryData.fromObject(model).toObject(DnsForwardingRulesetInner.class);
        Assertions.assertEquals("uexhdzx", model.location());
        Assertions.assertEquals("eojnxqbzvddn", model.tags().get("wndeicbtwnp"));
        Assertions.assertEquals("cbkbfkg", model.dnsResolverOutboundEndpoints().get(0).id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
