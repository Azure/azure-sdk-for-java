// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dnsresolver.fluent.models.DnsForwardingRulesetInner;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DnsForwardingRulesetInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DnsForwardingRulesetInner model = BinaryData.fromString(
            "{\"properties\":{\"dnsResolverOutboundEndpoints\":[{\"id\":\"fnba\"},{\"id\":\"ionle\"}],\"provisioningState\":\"Canceled\",\"resourceGuid\":\"qgtz\"},\"etag\":\"pnqbqqwxrjfe\",\"location\":\"lnwsubisn\",\"tags\":{\"zscxaqwo\":\"pmng\",\"ase\":\"chcbonqvpkvlrxnj\",\"enjbdlwtgrhp\":\"pheoflokeyy\",\"umasxazjpq\":\"jp\"},\"id\":\"e\",\"name\":\"ualhbxxhejj\",\"type\":\"zvdudgwdslfhotwm\"}")
            .toObject(DnsForwardingRulesetInner.class);
        Assertions.assertEquals("lnwsubisn", model.location());
        Assertions.assertEquals("pmng", model.tags().get("zscxaqwo"));
        Assertions.assertEquals("fnba", model.dnsResolverOutboundEndpoints().get(0).id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DnsForwardingRulesetInner model = new DnsForwardingRulesetInner().withLocation("lnwsubisn")
            .withTags(
                mapOf("zscxaqwo", "pmng", "ase", "chcbonqvpkvlrxnj", "enjbdlwtgrhp", "pheoflokeyy", "umasxazjpq", "jp"))
            .withDnsResolverOutboundEndpoints(
                Arrays.asList(new SubResource().withId("fnba"), new SubResource().withId("ionle")));
        model = BinaryData.fromObject(model).toObject(DnsForwardingRulesetInner.class);
        Assertions.assertEquals("lnwsubisn", model.location());
        Assertions.assertEquals("pmng", model.tags().get("zscxaqwo"));
        Assertions.assertEquals("fnba", model.dnsResolverOutboundEndpoints().get(0).id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
