// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.dnsresolver.DnsResolverManager;
import com.azure.resourcemanager.dnsresolver.models.DnsResolverDomainList;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DnsResolverDomainListsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"domains\":[\"usfzsvtuikzha\",\"qglcfhmlrqryxynq\",\"zrdpsovwxznptgoe\",\"ybbabpfhvfsl\"],\"domainsUrl\":\"ntjlr\",\"provisioningState\":\"Succeeded\",\"resourceGuid\":\"s\"},\"etag\":\"rioov\",\"location\":\"dsxwaab\",\"tags\":{\"izkzobgo\":\"frygznmmax\",\"ieixynllxe\":\"xlhslnel\"},\"id\":\"wcrojphslhcaw\",\"name\":\"u\",\"type\":\"i\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DnsResolverManager manager = DnsResolverManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        DnsResolverDomainList response = manager.dnsResolverDomainLists()
            .define("dlat")
            .withRegion("iuubwefqsf")
            .withExistingResourceGroup("sbostzel")
            .withTags(mapOf("apjwogqqnobpudcd", "qtferrqwexjkmf", "bucljgkyexaogu", "btqwpwyawbzas"))
            .withDomains(Arrays.asList("lbiojlvfhrb", "pn", "qvcww", "yurmochpprprs"))
            .withIfMatch("zqdqxt")
            .withIfNoneMatch("jw")
            .create();

        Assertions.assertEquals("dsxwaab", response.location());
        Assertions.assertEquals("frygznmmax", response.tags().get("izkzobgo"));
        Assertions.assertEquals("usfzsvtuikzha", response.domains().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
