// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dnsresolver.fluent.models.InboundEndpointInner;
import com.azure.resourcemanager.dnsresolver.models.InboundEndpointListResult;
import com.azure.resourcemanager.dnsresolver.models.IpAllocationMethod;
import com.azure.resourcemanager.dnsresolver.models.IpConfiguration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InboundEndpointListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InboundEndpointListResult model = BinaryData.fromString(
            "{\"value\":[{\"etag\":\"dfdosygexp\",\"properties\":{\"ipConfigurations\":[{\"subnet\":{},\"privateIpAddress\":\"akhmsbzjhcrz\",\"privateIpAllocationMethod\":\"Dynamic\"},{\"subnet\":{},\"privateIpAddress\":\"hlxaolthqtr\",\"privateIpAllocationMethod\":\"Static\"},{\"subnet\":{},\"privateIpAddress\":\"pfzfsinzgvfc\",\"privateIpAllocationMethod\":\"Static\"},{\"subnet\":{},\"privateIpAddress\":\"oxxjtfelluwf\",\"privateIpAllocationMethod\":\"Static\"}],\"provisioningState\":\"Failed\",\"resourceGuid\":\"eqfpj\"},\"location\":\"lxofpdvhpfxxypin\",\"tags\":{\"bkpodepooginuv\":\"ayhuy\",\"gnarxzxtheo\":\"mihe\",\"cciqihnhungbwjz\":\"usivye\",\"kufubljo\":\"nfygxgispemvtz\"},\"id\":\"xqeofjaeqjhqjba\",\"name\":\"v\",\"type\":\"smjqulngsntnbyb\"},{\"etag\":\"gc\",\"properties\":{\"ipConfigurations\":[{\"subnet\":{},\"privateIpAddress\":\"clxxwrljdo\",\"privateIpAllocationMethod\":\"Dynamic\"},{\"subnet\":{},\"privateIpAddress\":\"qvkoc\",\"privateIpAllocationMethod\":\"Dynamic\"},{\"subnet\":{},\"privateIpAddress\":\"kwt\",\"privateIpAllocationMethod\":\"Dynamic\"}],\"provisioningState\":\"Updating\",\"resourceGuid\":\"biksq\"},\"location\":\"lssai\",\"tags\":{\"eebvmgxsab\":\"jwnzlljfmp\"},\"id\":\"yqduujit\",\"name\":\"jczdzevndh\",\"type\":\"rwpdappdsbdkvwrw\"},{\"etag\":\"eusnhutj\",\"properties\":{\"ipConfigurations\":[{\"subnet\":{},\"privateIpAddress\":\"mrldhu\",\"privateIpAllocationMethod\":\"Static\"},{\"subnet\":{},\"privateIpAddress\":\"datqxhocdgeabl\",\"privateIpAllocationMethod\":\"Dynamic\"}],\"provisioningState\":\"Deleting\",\"resourceGuid\":\"cndvkaozwyiftyhx\"},\"location\":\"rokft\",\"tags\":{\"klryplwck\":\"lniwpwcukjfkgiaw\",\"pnddhsgcbacphejk\":\"asy\",\"ndlik\":\"tynqgoul\"},\"id\":\"yqkgfg\",\"name\":\"bmadgak\",\"type\":\"qsrxybzqqed\"},{\"etag\":\"tbciqfouflmm\",\"properties\":{\"ipConfigurations\":[{\"subnet\":{},\"privateIpAddress\":\"smodmgloug\",\"privateIpAllocationMethod\":\"Dynamic\"},{\"subnet\":{},\"privateIpAddress\":\"tmut\",\"privateIpAllocationMethod\":\"Dynamic\"}],\"provisioningState\":\"Creating\",\"resourceGuid\":\"pspwgcuertu\"},\"location\":\"dosvqwhbmdgbbjf\",\"tags\":{\"q\":\"mbmbexppbh\",\"algbquxigjyjg\":\"rolfpfp\",\"lnerkujysvleju\":\"jaoyfhrtx\"},\"id\":\"fqawrlyxw\",\"name\":\"kcprbnw\",\"type\":\"xgjvtbv\"}],\"nextLink\":\"sszdnru\"}")
            .toObject(InboundEndpointListResult.class);
        Assertions.assertEquals("lxofpdvhpfxxypin", model.value().get(0).location());
        Assertions.assertEquals("ayhuy", model.value().get(0).tags().get("bkpodepooginuv"));
        Assertions.assertEquals("akhmsbzjhcrz", model.value().get(0).ipConfigurations().get(0).privateIpAddress());
        Assertions.assertEquals(IpAllocationMethod.DYNAMIC,
            model.value().get(0).ipConfigurations().get(0).privateIpAllocationMethod());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InboundEndpointListResult model = new InboundEndpointListResult().withValue(Arrays.asList(
            new InboundEndpointInner().withLocation("lxofpdvhpfxxypin")
                .withTags(mapOf("bkpodepooginuv", "ayhuy", "gnarxzxtheo", "mihe", "cciqihnhungbwjz", "usivye",
                    "kufubljo", "nfygxgispemvtz"))
                .withIpConfigurations(Arrays.asList(
                    new IpConfiguration().withSubnet(new SubResource())
                        .withPrivateIpAddress("akhmsbzjhcrz")
                        .withPrivateIpAllocationMethod(IpAllocationMethod.DYNAMIC),
                    new IpConfiguration().withSubnet(new SubResource())
                        .withPrivateIpAddress("hlxaolthqtr")
                        .withPrivateIpAllocationMethod(IpAllocationMethod.STATIC),
                    new IpConfiguration().withSubnet(new SubResource())
                        .withPrivateIpAddress("pfzfsinzgvfc")
                        .withPrivateIpAllocationMethod(IpAllocationMethod.STATIC),
                    new IpConfiguration().withSubnet(new SubResource())
                        .withPrivateIpAddress("oxxjtfelluwf")
                        .withPrivateIpAllocationMethod(IpAllocationMethod.STATIC))),
            new InboundEndpointInner().withLocation("lssai")
                .withTags(mapOf("eebvmgxsab", "jwnzlljfmp"))
                .withIpConfigurations(Arrays.asList(
                    new IpConfiguration().withSubnet(new SubResource())
                        .withPrivateIpAddress("clxxwrljdo")
                        .withPrivateIpAllocationMethod(IpAllocationMethod.DYNAMIC),
                    new IpConfiguration().withSubnet(new SubResource())
                        .withPrivateIpAddress("qvkoc")
                        .withPrivateIpAllocationMethod(IpAllocationMethod.DYNAMIC),
                    new IpConfiguration().withSubnet(new SubResource())
                        .withPrivateIpAddress("kwt")
                        .withPrivateIpAllocationMethod(IpAllocationMethod.DYNAMIC))),
            new InboundEndpointInner().withLocation("rokft")
                .withTags(mapOf("klryplwck", "lniwpwcukjfkgiaw", "pnddhsgcbacphejk", "asy", "ndlik", "tynqgoul"))
                .withIpConfigurations(Arrays.asList(
                    new IpConfiguration().withSubnet(new SubResource())
                        .withPrivateIpAddress("mrldhu")
                        .withPrivateIpAllocationMethod(IpAllocationMethod.STATIC),
                    new IpConfiguration().withSubnet(new SubResource())
                        .withPrivateIpAddress("datqxhocdgeabl")
                        .withPrivateIpAllocationMethod(IpAllocationMethod.DYNAMIC))),
            new InboundEndpointInner().withLocation("dosvqwhbmdgbbjf")
                .withTags(mapOf("q", "mbmbexppbh", "algbquxigjyjg", "rolfpfp", "lnerkujysvleju", "jaoyfhrtx"))
                .withIpConfigurations(Arrays.asList(
                    new IpConfiguration().withSubnet(new SubResource())
                        .withPrivateIpAddress("smodmgloug")
                        .withPrivateIpAllocationMethod(IpAllocationMethod.DYNAMIC),
                    new IpConfiguration().withSubnet(new SubResource())
                        .withPrivateIpAddress("tmut")
                        .withPrivateIpAllocationMethod(IpAllocationMethod.DYNAMIC)))));
        model = BinaryData.fromObject(model).toObject(InboundEndpointListResult.class);
        Assertions.assertEquals("lxofpdvhpfxxypin", model.value().get(0).location());
        Assertions.assertEquals("ayhuy", model.value().get(0).tags().get("bkpodepooginuv"));
        Assertions.assertEquals("akhmsbzjhcrz", model.value().get(0).ipConfigurations().get(0).privateIpAddress());
        Assertions.assertEquals(IpAllocationMethod.DYNAMIC,
            model.value().get(0).ipConfigurations().get(0).privateIpAllocationMethod());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
