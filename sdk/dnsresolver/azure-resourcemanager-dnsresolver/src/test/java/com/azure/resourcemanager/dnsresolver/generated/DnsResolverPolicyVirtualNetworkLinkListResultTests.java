// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dnsresolver.fluent.models.DnsResolverPolicyVirtualNetworkLinkInner;
import com.azure.resourcemanager.dnsresolver.models.DnsResolverPolicyVirtualNetworkLinkListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DnsResolverPolicyVirtualNetworkLinkListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DnsResolverPolicyVirtualNetworkLinkListResult model = BinaryData.fromString(
            "{\"value\":[{\"etag\":\"ztfolhbnxk\",\"properties\":{\"virtualNetwork\":{\"id\":\"laulppg\"},\"provisioningState\":\"Succeeded\"},\"location\":\"napnyiropuhpigv\",\"tags\":{\"txmedj\":\"lgqg\",\"lynqwwncwzzh\":\"c\",\"ellwptfdy\":\"gktrmgucnapkte\",\"rhhuaopppcqeqx\":\"pfqbuaceopzf\"},\"id\":\"lzdahzxctobgbkdm\",\"name\":\"izpost\",\"type\":\"grcfb\"}],\"nextLink\":\"rmfqjhhkxbpvj\"}")
            .toObject(DnsResolverPolicyVirtualNetworkLinkListResult.class);
        Assertions.assertEquals("napnyiropuhpigv", model.value().get(0).location());
        Assertions.assertEquals("lgqg", model.value().get(0).tags().get("txmedj"));
        Assertions.assertEquals("laulppg", model.value().get(0).virtualNetwork().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DnsResolverPolicyVirtualNetworkLinkListResult model = new DnsResolverPolicyVirtualNetworkLinkListResult()
            .withValue(Arrays.asList(new DnsResolverPolicyVirtualNetworkLinkInner().withLocation("napnyiropuhpigv")
                .withTags(mapOf("txmedj", "lgqg", "lynqwwncwzzh", "c", "ellwptfdy", "gktrmgucnapkte", "rhhuaopppcqeqx",
                    "pfqbuaceopzf"))
                .withVirtualNetwork(new SubResource().withId("laulppg"))));
        model = BinaryData.fromObject(model).toObject(DnsResolverPolicyVirtualNetworkLinkListResult.class);
        Assertions.assertEquals("napnyiropuhpigv", model.value().get(0).location());
        Assertions.assertEquals("lgqg", model.value().get(0).tags().get("txmedj"));
        Assertions.assertEquals("laulppg", model.value().get(0).virtualNetwork().id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
