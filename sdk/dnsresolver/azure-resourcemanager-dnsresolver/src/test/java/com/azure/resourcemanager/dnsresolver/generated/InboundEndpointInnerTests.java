// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dnsresolver.fluent.models.InboundEndpointInner;
import com.azure.resourcemanager.dnsresolver.models.IpAllocationMethod;
import com.azure.resourcemanager.dnsresolver.models.IpConfiguration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InboundEndpointInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InboundEndpointInner model = BinaryData.fromString(
            "{\"etag\":\"fp\",\"properties\":{\"ipConfigurations\":[{\"subnet\":{\"id\":\"obmtukk\"},\"privateIpAddress\":\"yrtih\",\"privateIpAllocationMethod\":\"Dynamic\"},{\"subnet\":{\"id\":\"jbpzvgnwzsymg\"},\"privateIpAddress\":\"uf\",\"privateIpAllocationMethod\":\"Static\"}],\"provisioningState\":\"Deleting\",\"resourceGuid\":\"dbihanufhfcbj\"},\"location\":\"a\",\"tags\":{\"bifpikxwczb\":\"hxqh\"},\"id\":\"scnpqxuhivy\",\"name\":\"n\",\"type\":\"wby\"}")
            .toObject(InboundEndpointInner.class);
        Assertions.assertEquals("a", model.location());
        Assertions.assertEquals("hxqh", model.tags().get("bifpikxwczb"));
        Assertions.assertEquals("obmtukk", model.ipConfigurations().get(0).subnet().id());
        Assertions.assertEquals("yrtih", model.ipConfigurations().get(0).privateIpAddress());
        Assertions.assertEquals(IpAllocationMethod.DYNAMIC,
            model.ipConfigurations().get(0).privateIpAllocationMethod());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InboundEndpointInner model = new InboundEndpointInner().withLocation("a")
            .withTags(mapOf("bifpikxwczb", "hxqh"))
            .withIpConfigurations(Arrays.asList(
                new IpConfiguration().withSubnet(new SubResource().withId("obmtukk"))
                    .withPrivateIpAddress("yrtih")
                    .withPrivateIpAllocationMethod(IpAllocationMethod.DYNAMIC),
                new IpConfiguration().withSubnet(new SubResource().withId("jbpzvgnwzsymg"))
                    .withPrivateIpAddress("uf")
                    .withPrivateIpAllocationMethod(IpAllocationMethod.STATIC)));
        model = BinaryData.fromObject(model).toObject(InboundEndpointInner.class);
        Assertions.assertEquals("a", model.location());
        Assertions.assertEquals("hxqh", model.tags().get("bifpikxwczb"));
        Assertions.assertEquals("obmtukk", model.ipConfigurations().get(0).subnet().id());
        Assertions.assertEquals("yrtih", model.ipConfigurations().get(0).privateIpAddress());
        Assertions.assertEquals(IpAllocationMethod.DYNAMIC,
            model.ipConfigurations().get(0).privateIpAllocationMethod());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
