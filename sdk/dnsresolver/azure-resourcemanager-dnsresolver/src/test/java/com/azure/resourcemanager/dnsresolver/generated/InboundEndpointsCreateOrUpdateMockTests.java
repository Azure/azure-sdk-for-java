// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.SubResource;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.dnsresolver.DnsResolverManager;
import com.azure.resourcemanager.dnsresolver.models.InboundEndpoint;
import com.azure.resourcemanager.dnsresolver.models.IpAllocationMethod;
import com.azure.resourcemanager.dnsresolver.models.IpConfiguration;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InboundEndpointsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"etag\":\"ibqdxbxwakbogqx\",\"properties\":{\"ipConfigurations\":[{\"subnet\":{\"id\":\"kzgxhurip\"},\"privateIpAddress\":\"podxunkb\",\"privateIpAllocationMethod\":\"Dynamic\"},{\"subnet\":{\"id\":\"ubyyntw\"},\"privateIpAddress\":\"bqtkoievseotgqr\",\"privateIpAllocationMethod\":\"Dynamic\"},{\"subnet\":{\"id\":\"u\"},\"privateIpAddress\":\"auwzizxbmpgc\",\"privateIpAllocationMethod\":\"Dynamic\"}],\"provisioningState\":\"Succeeded\",\"resourceGuid\":\"uvpb\"},\"location\":\"d\",\"tags\":{\"xe\":\"rp\",\"bhjpglkfgohdne\":\"mnzb\",\"phsdyhto\":\"el\",\"v\":\"fikdowwqu\"},\"id\":\"zx\",\"name\":\"lvithhqzonosgg\",\"type\":\"hcohfwdsjnk\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DnsResolverManager manager = DnsResolverManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        InboundEndpoint response = manager.inboundEndpoints()
            .define("qlfmmdnbb")
            .withRegion("zdzucerscdntnevf")
            .withExistingDnsResolver("uie", "tgccymvaolpss")
            .withIpConfigurations(Arrays.asList(new IpConfiguration().withSubnet(new SubResource().withId("zdxss"))
                .withPrivateIpAddress("bzmnvdfznud")
                .withPrivateIpAllocationMethod(IpAllocationMethod.DYNAMIC)))
            .withTags(mapOf("tmweriofzpyq", "mygtdssls", "hhszh", "emwabnet", "lvwiwubmwmbesl", "d", "pp", "nkww"))
            .withIfMatch("v")
            .withIfNoneMatch("gureodkwobdag")
            .create();

        Assertions.assertEquals("d", response.location());
        Assertions.assertEquals("rp", response.tags().get("xe"));
        Assertions.assertEquals("kzgxhurip", response.ipConfigurations().get(0).subnet().id());
        Assertions.assertEquals("podxunkb", response.ipConfigurations().get(0).privateIpAddress());
        Assertions.assertEquals(IpAllocationMethod.DYNAMIC,
            response.ipConfigurations().get(0).privateIpAllocationMethod());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
