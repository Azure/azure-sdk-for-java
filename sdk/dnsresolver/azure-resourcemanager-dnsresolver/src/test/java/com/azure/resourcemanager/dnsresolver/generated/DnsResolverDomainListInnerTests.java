// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dnsresolver.fluent.models.DnsResolverDomainListInner;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DnsResolverDomainListInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DnsResolverDomainListInner model = BinaryData.fromString(
            "{\"properties\":{\"domains\":[\"qagvrvm\",\"pkukghi\"],\"domainsUrl\":\"blxgwimf\",\"provisioningState\":\"Updating\",\"resourceGuid\":\"j\"},\"etag\":\"mszkkfo\",\"location\":\"eyfkzikfja\",\"tags\":{\"vxwc\":\"a\",\"fatkld\":\"elpcirelsfeaenwa\",\"oulpjrv\":\"xbjhwuaanozjosph\"},\"id\":\"ag\",\"name\":\"rvimjwosytxitcsk\",\"type\":\"cktqumiekkezzi\"}")
            .toObject(DnsResolverDomainListInner.class);
        Assertions.assertEquals("eyfkzikfja", model.location());
        Assertions.assertEquals("a", model.tags().get("vxwc"));
        Assertions.assertEquals("qagvrvm", model.domains().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DnsResolverDomainListInner model = new DnsResolverDomainListInner().withLocation("eyfkzikfja")
            .withTags(mapOf("vxwc", "a", "fatkld", "elpcirelsfeaenwa", "oulpjrv", "xbjhwuaanozjosph"))
            .withDomains(Arrays.asList("qagvrvm", "pkukghi"));
        model = BinaryData.fromObject(model).toObject(DnsResolverDomainListInner.class);
        Assertions.assertEquals("eyfkzikfja", model.location());
        Assertions.assertEquals("a", model.tags().get("vxwc"));
        Assertions.assertEquals("qagvrvm", model.domains().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
