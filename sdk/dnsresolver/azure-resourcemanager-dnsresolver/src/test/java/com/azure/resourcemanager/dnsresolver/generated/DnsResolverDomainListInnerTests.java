// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dnsresolver.fluent.models.DnsResolverDomainListInner;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DnsResolverDomainListInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DnsResolverDomainListInner model = BinaryData.fromString(
            "{\"etag\":\"jhxxjyn\",\"properties\":{\"domains\":[\"divkrt\"],\"provisioningState\":\"Creating\",\"resourceGuid\":\"qzvszjf\"},\"location\":\"vjfdx\",\"tags\":{\"vtcqaqtdo\":\"e\",\"bhsfxob\":\"mcbxvwvxysl\"},\"id\":\"ytkblmpew\",\"name\":\"wfbkrvrns\",\"type\":\"shqjohxcrsbf\"}")
            .toObject(DnsResolverDomainListInner.class);
        Assertions.assertEquals("vjfdx", model.location());
        Assertions.assertEquals("e", model.tags().get("vtcqaqtdo"));
        Assertions.assertEquals("divkrt", model.domains().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DnsResolverDomainListInner model = new DnsResolverDomainListInner().withLocation("vjfdx")
            .withTags(mapOf("vtcqaqtdo", "e", "bhsfxob", "mcbxvwvxysl"))
            .withDomains(Arrays.asList("divkrt"));
        model = BinaryData.fromObject(model).toObject(DnsResolverDomainListInner.class);
        Assertions.assertEquals("vjfdx", model.location());
        Assertions.assertEquals("e", model.tags().get("vtcqaqtdo"));
        Assertions.assertEquals("divkrt", model.domains().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
