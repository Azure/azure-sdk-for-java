// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dnsresolver.models.ForwardingRulePatch;
import com.azure.resourcemanager.dnsresolver.models.ForwardingRuleState;
import com.azure.resourcemanager.dnsresolver.models.TargetDnsServer;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ForwardingRulePatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ForwardingRulePatch model = BinaryData.fromString(
            "{\"properties\":{\"targetDnsServers\":[{\"ipAddress\":\"fyexfwhy\",\"port\":148650220},{\"ipAddress\":\"bvyvdcsity\",\"port\":1750107554}],\"metadata\":{\"eypvhezrkg\":\"dectehfiqsc\",\"sle\":\"hcjrefovgmk\",\"cattpngjcrcczsq\":\"yvxyqjp\",\"mdajv\":\"jh\"},\"forwardingRuleState\":\"Disabled\"}}")
            .toObject(ForwardingRulePatch.class);
        Assertions.assertEquals("fyexfwhy", model.targetDnsServers().get(0).ipAddress());
        Assertions.assertEquals(148650220, model.targetDnsServers().get(0).port());
        Assertions.assertEquals("dectehfiqsc", model.metadata().get("eypvhezrkg"));
        Assertions.assertEquals(ForwardingRuleState.DISABLED, model.forwardingRuleState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ForwardingRulePatch model = new ForwardingRulePatch()
            .withTargetDnsServers(Arrays.asList(new TargetDnsServer().withIpAddress("fyexfwhy").withPort(148650220),
                new TargetDnsServer().withIpAddress("bvyvdcsity").withPort(1750107554)))
            .withMetadata(
                mapOf("eypvhezrkg", "dectehfiqsc", "sle", "hcjrefovgmk", "cattpngjcrcczsq", "yvxyqjp", "mdajv", "jh"))
            .withForwardingRuleState(ForwardingRuleState.DISABLED);
        model = BinaryData.fromObject(model).toObject(ForwardingRulePatch.class);
        Assertions.assertEquals("fyexfwhy", model.targetDnsServers().get(0).ipAddress());
        Assertions.assertEquals(148650220, model.targetDnsServers().get(0).port());
        Assertions.assertEquals("dectehfiqsc", model.metadata().get("eypvhezrkg"));
        Assertions.assertEquals(ForwardingRuleState.DISABLED, model.forwardingRuleState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
