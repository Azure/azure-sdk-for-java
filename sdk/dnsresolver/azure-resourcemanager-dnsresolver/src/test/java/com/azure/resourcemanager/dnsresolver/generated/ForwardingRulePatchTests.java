// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dnsresolver.models.ForwardingRulePatch;
import com.azure.resourcemanager.dnsresolver.models.ForwardingRuleState;
import com.azure.resourcemanager.dnsresolver.models.TargetDnsServer;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ForwardingRulePatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ForwardingRulePatch model = BinaryData.fromString(
            "{\"properties\":{\"targetDnsServers\":[{\"ipAddress\":\"yav\",\"port\":989865410},{\"ipAddress\":\"eun\",\"port\":1861834573},{\"ipAddress\":\"hgyxzkonoc\",\"port\":820959200},{\"ipAddress\":\"klyaxuconu\",\"port\":447504444}],\"metadata\":{\"vjektcxsenh\":\"beypewrmjmw\",\"rzpwvlqdqgbiq\":\"lrsf\"},\"forwardingRuleState\":\"Disabled\"}}")
            .toObject(ForwardingRulePatch.class);
        Assertions.assertEquals("yav", model.targetDnsServers().get(0).ipAddress());
        Assertions.assertEquals(989865410, model.targetDnsServers().get(0).port());
        Assertions.assertEquals("beypewrmjmw", model.metadata().get("vjektcxsenh"));
        Assertions.assertEquals(ForwardingRuleState.DISABLED, model.forwardingRuleState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ForwardingRulePatch model = new ForwardingRulePatch()
            .withTargetDnsServers(Arrays.asList(new TargetDnsServer().withIpAddress("yav").withPort(989865410),
                new TargetDnsServer().withIpAddress("eun").withPort(1861834573),
                new TargetDnsServer().withIpAddress("hgyxzkonoc").withPort(820959200),
                new TargetDnsServer().withIpAddress("klyaxuconu").withPort(447504444)))
            .withMetadata(mapOf("vjektcxsenh", "beypewrmjmw", "rzpwvlqdqgbiq", "lrsf"))
            .withForwardingRuleState(ForwardingRuleState.DISABLED);
        model = BinaryData.fromObject(model).toObject(ForwardingRulePatch.class);
        Assertions.assertEquals("yav", model.targetDnsServers().get(0).ipAddress());
        Assertions.assertEquals(989865410, model.targetDnsServers().get(0).port());
        Assertions.assertEquals("beypewrmjmw", model.metadata().get("vjektcxsenh"));
        Assertions.assertEquals(ForwardingRuleState.DISABLED, model.forwardingRuleState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
