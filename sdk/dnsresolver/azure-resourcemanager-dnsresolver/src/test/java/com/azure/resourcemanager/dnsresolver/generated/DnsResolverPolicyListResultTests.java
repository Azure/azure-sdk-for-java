// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dnsresolver.fluent.models.DnsResolverPolicyInner;
import com.azure.resourcemanager.dnsresolver.models.DnsResolverPolicyListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DnsResolverPolicyListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DnsResolverPolicyListResult model = BinaryData.fromString(
            "{\"value\":[{\"etag\":\"jbhckfrlhr\",\"properties\":{\"provisioningState\":\"Canceled\",\"resourceGuid\":\"vpycanuzbp\"},\"location\":\"afkuwb\",\"tags\":{\"hseyvju\":\"wbme\",\"hspkdeemao\":\"rts\"},\"id\":\"mx\",\"name\":\"gkvtmelmqkrhah\",\"type\":\"ljuahaquhcdh\"},{\"etag\":\"ualaexqpvfadmw\",\"properties\":{\"provisioningState\":\"Failed\",\"resourceGuid\":\"vxpvgomz\"},\"location\":\"misgwbnb\",\"tags\":{\"urqhaka\":\"dawkzbali\",\"xcug\":\"hashsfwxosow\",\"ovbvmeueciv\":\"cjooxdjebwpucwwf\",\"otwmcdyt\":\"hzceuojgjrwjue\"},\"id\":\"x\",\"name\":\"it\",\"type\":\"nrjawgqwg\"},{\"etag\":\"ni\",\"properties\":{\"provisioningState\":\"Updating\",\"resourceGuid\":\"kpycgklwndnhjd\"},\"location\":\"whvylw\",\"tags\":{\"uwprzql\":\"dhxujznbmpo\",\"obbc\":\"eualupjmkhf\",\"tghfgblcgwxzvl\":\"wsrtjriplrbpbe\",\"egibtnmxiebww\":\"qhjk\"},\"id\":\"loayqcgw\",\"name\":\"tzjuzgwyzmhtxo\",\"type\":\"gmtsavjcbpwxqpsr\"}],\"nextLink\":\"ftguv\"}")
            .toObject(DnsResolverPolicyListResult.class);
        Assertions.assertEquals("afkuwb", model.value().get(0).location());
        Assertions.assertEquals("wbme", model.value().get(0).tags().get("hseyvju"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DnsResolverPolicyListResult model = new DnsResolverPolicyListResult().withValue(Arrays.asList(
            new DnsResolverPolicyInner().withLocation("afkuwb").withTags(mapOf("hseyvju", "wbme", "hspkdeemao", "rts")),
            new DnsResolverPolicyInner().withLocation("misgwbnb")
                .withTags(mapOf("urqhaka", "dawkzbali", "xcug", "hashsfwxosow", "ovbvmeueciv", "cjooxdjebwpucwwf",
                    "otwmcdyt", "hzceuojgjrwjue")),
            new DnsResolverPolicyInner().withLocation("whvylw")
                .withTags(mapOf("uwprzql", "dhxujznbmpo", "obbc", "eualupjmkhf", "tghfgblcgwxzvl", "wsrtjriplrbpbe",
                    "egibtnmxiebww", "qhjk"))));
        model = BinaryData.fromObject(model).toObject(DnsResolverPolicyListResult.class);
        Assertions.assertEquals("afkuwb", model.value().get(0).location());
        Assertions.assertEquals("wbme", model.value().get(0).tags().get("hseyvju"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
