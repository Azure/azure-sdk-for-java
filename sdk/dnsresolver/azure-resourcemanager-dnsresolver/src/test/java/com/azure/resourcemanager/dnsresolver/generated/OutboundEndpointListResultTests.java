// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dnsresolver.fluent.models.OutboundEndpointInner;
import com.azure.resourcemanager.dnsresolver.models.OutboundEndpointListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OutboundEndpointListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OutboundEndpointListResult model = BinaryData.fromString(
            "{\"value\":[{\"etag\":\"hurzafblj\",\"properties\":{\"subnet\":{\"id\":\"pbtoqcjmkl\"},\"provisioningState\":\"Deleting\",\"resourceGuid\":\"qidtqajzyu\"},\"location\":\"kudjkrlkhb\",\"tags\":{\"ocxscpaierhhbcs\":\"epgzgqexz\",\"mmajtjaodx\":\"l\"},\"id\":\"bnbdxkqpxokajion\",\"name\":\"imexgstxgcpodgma\",\"type\":\"jrmvdjwzrlo\"}],\"nextLink\":\"clwhijcoejctbz\"}")
            .toObject(OutboundEndpointListResult.class);
        Assertions.assertEquals("kudjkrlkhb", model.value().get(0).location());
        Assertions.assertEquals("epgzgqexz", model.value().get(0).tags().get("ocxscpaierhhbcs"));
        Assertions.assertEquals("pbtoqcjmkl", model.value().get(0).subnet().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OutboundEndpointListResult model = new OutboundEndpointListResult()
            .withValue(Arrays.asList(new OutboundEndpointInner().withLocation("kudjkrlkhb")
                .withTags(mapOf("ocxscpaierhhbcs", "epgzgqexz", "mmajtjaodx", "l"))
                .withSubnet(new SubResource().withId("pbtoqcjmkl"))));
        model = BinaryData.fromObject(model).toObject(OutboundEndpointListResult.class);
        Assertions.assertEquals("kudjkrlkhb", model.value().get(0).location());
        Assertions.assertEquals("epgzgqexz", model.value().get(0).tags().get("ocxscpaierhhbcs"));
        Assertions.assertEquals("pbtoqcjmkl", model.value().get(0).subnet().id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
