// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.dnsresolver.DnsResolverManager;
import com.azure.resourcemanager.dnsresolver.models.OutboundEndpoint;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OutboundEndpointsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"subnet\":{\"id\":\"bsazejjoqka\"},\"provisioningState\":\"Succeeded\",\"resourceGuid\":\"xttaugzxnfaaz\"},\"etag\":\"dtnkdmkq\",\"location\":\"lwuenvrkp\",\"tags\":{\"nqttezl\":\"aibrebqaaysjkixq\",\"jpqqmted\":\"fffiak\",\"wau\":\"tmmjihyeozph\",\"mdscwxqupev\":\"qncygupkvi\"},\"id\":\"hfstotxhojujbyp\",\"name\":\"lmcuvhixb\",\"type\":\"xyfwnylrcool\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DnsResolverManager manager = DnsResolverManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<OutboundEndpoint> response
            = manager.outboundEndpoints().list("xeznoi", "brnjwmw", 490713776, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("lwuenvrkp", response.iterator().next().location());
        Assertions.assertEquals("aibrebqaaysjkixq", response.iterator().next().tags().get("nqttezl"));
        Assertions.assertEquals("bsazejjoqka", response.iterator().next().subnet().id());
    }
}
