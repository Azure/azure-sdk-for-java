// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dnsresolver.fluent.models.DnsResolverInner;
import com.azure.resourcemanager.dnsresolver.models.DnsResolverListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DnsResolverListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DnsResolverListResult model = BinaryData.fromString(
            "{\"value\":[{\"etag\":\"lhjxr\",\"properties\":{\"virtualNetwork\":{\"id\":\"kwm\"},\"dnsResolverState\":\"Disconnected\",\"provisioningState\":\"Canceled\",\"resourceGuid\":\"zntocipaouajps\"},\"location\":\"cmpoyfdkfogkny\",\"tags\":{\"deupewnwrei\":\"fjddeqs\",\"arhmofcqhsmy\":\"jzyflu\"},\"id\":\"rkdtmlxh\",\"name\":\"kuksjtxukcdm\",\"type\":\"arcryuanzwuxzdxt\"}],\"nextLink\":\"rlhm\"}")
            .toObject(DnsResolverListResult.class);
        Assertions.assertEquals("cmpoyfdkfogkny", model.value().get(0).location());
        Assertions.assertEquals("fjddeqs", model.value().get(0).tags().get("deupewnwrei"));
        Assertions.assertEquals("kwm", model.value().get(0).virtualNetwork().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DnsResolverListResult model
            = new DnsResolverListResult().withValue(Arrays.asList(new DnsResolverInner().withLocation("cmpoyfdkfogkny")
                .withTags(mapOf("deupewnwrei", "fjddeqs", "arhmofcqhsmy", "jzyflu"))
                .withVirtualNetwork(new SubResource().withId("kwm"))));
        model = BinaryData.fromObject(model).toObject(DnsResolverListResult.class);
        Assertions.assertEquals("cmpoyfdkfogkny", model.value().get(0).location());
        Assertions.assertEquals("fjddeqs", model.value().get(0).tags().get("deupewnwrei"));
        Assertions.assertEquals("kwm", model.value().get(0).virtualNetwork().id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
