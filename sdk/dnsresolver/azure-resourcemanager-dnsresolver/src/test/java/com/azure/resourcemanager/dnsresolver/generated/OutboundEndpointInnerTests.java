// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dnsresolver.fluent.models.OutboundEndpointInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OutboundEndpointInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OutboundEndpointInner model = BinaryData.fromString(
            "{\"etag\":\"guhmuouqfpr\",\"properties\":{\"subnet\":{\"id\":\"wbnguitnwui\"},\"provisioningState\":\"Creating\",\"resourceGuid\":\"x\"},\"location\":\"izuckyfihrfidfvz\",\"tags\":{\"mwisdkfthwxmnt\":\"uht\",\"aop\":\"i\",\"jcmmxdcufufsrp\":\"km\",\"sgfyccsnew\":\"mzidnsezcxtb\"},\"id\":\"dwzjeiach\",\"name\":\"oosflnr\",\"type\":\"sfqpteehz\"}")
            .toObject(OutboundEndpointInner.class);
        Assertions.assertEquals("izuckyfihrfidfvz", model.location());
        Assertions.assertEquals("uht", model.tags().get("mwisdkfthwxmnt"));
        Assertions.assertEquals("wbnguitnwui", model.subnet().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OutboundEndpointInner model = new OutboundEndpointInner().withLocation("izuckyfihrfidfvz")
            .withTags(mapOf("mwisdkfthwxmnt", "uht", "aop", "i", "jcmmxdcufufsrp", "km", "sgfyccsnew", "mzidnsezcxtb"))
            .withSubnet(new SubResource().withId("wbnguitnwui"));
        model = BinaryData.fromObject(model).toObject(OutboundEndpointInner.class);
        Assertions.assertEquals("izuckyfihrfidfvz", model.location());
        Assertions.assertEquals("uht", model.tags().get("mwisdkfthwxmnt"));
        Assertions.assertEquals("wbnguitnwui", model.subnet().id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
