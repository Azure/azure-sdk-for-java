// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dnsresolver.fluent.models.DnsResolverInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DnsResolverInnerTests {
    @Test
    public void testDeserialize() {
        DnsResolverInner model =
            BinaryData
                .fromString(
                    "{\"etag\":\"mhquvgjxp\",\"properties\":{\"virtualNetwork\":{\"id\":\"czmehmtzopbsp\"},\"dnsResolverState\":\"Connected\",\"provisioningState\":\"Canceled\",\"resourceGuid\":\"gsybbejhp\"},\"location\":\"ycm\",\"tags\":{\"tbmufpo\":\"obhdxbmtqioqjze\"},\"id\":\"noi\",\"name\":\"hwlrx\",\"type\":\"bqsoqijg\"}")
                .toObject(DnsResolverInner.class);
        Assertions.assertEquals("ycm", model.location());
        Assertions.assertEquals("obhdxbmtqioqjze", model.tags().get("tbmufpo"));
        Assertions.assertEquals("czmehmtzopbsp", model.virtualNetwork().id());
    }

    @Test
    public void testSerialize() {
        DnsResolverInner model =
            new DnsResolverInner()
                .withLocation("ycm")
                .withTags(mapOf("tbmufpo", "obhdxbmtqioqjze"))
                .withVirtualNetwork(new SubResource().withId("czmehmtzopbsp"));
        model = BinaryData.fromObject(model).toObject(DnsResolverInner.class);
        Assertions.assertEquals("ycm", model.location());
        Assertions.assertEquals("obhdxbmtqioqjze", model.tags().get("tbmufpo"));
        Assertions.assertEquals("czmehmtzopbsp", model.virtualNetwork().id());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
