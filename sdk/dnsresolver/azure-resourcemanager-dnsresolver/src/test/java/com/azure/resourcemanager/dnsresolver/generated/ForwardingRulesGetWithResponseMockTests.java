// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.dnsresolver.DnsResolverManager;
import com.azure.resourcemanager.dnsresolver.models.ForwardingRule;
import com.azure.resourcemanager.dnsresolver.models.ForwardingRuleState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ForwardingRulesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"etag\":\"ngitvgbmhrixkwm\",\"properties\":{\"domainName\":\"ijejvegrhbpn\",\"targetDnsServers\":[{\"ipAddress\":\"xexccbdreaxhcexd\",\"port\":894068250},{\"ipAddress\":\"qahqkghtpwijn\",\"port\":1759061120}],\"metadata\":{\"cxzbfvoowvr\":\"f\",\"qp\":\"mtg\"},\"forwardingRuleState\":\"Enabled\",\"provisioningState\":\"Creating\"},\"id\":\"on\",\"name\":\"myhgfipnsxkmc\",\"type\":\"a\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DnsResolverManager manager = DnsResolverManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ForwardingRule response = manager.forwardingRules()
            .getWithResponse("wz", "bnhlmc", "l", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("ijejvegrhbpn", response.domainName());
        Assertions.assertEquals("xexccbdreaxhcexd", response.targetDnsServers().get(0).ipAddress());
        Assertions.assertEquals(894068250, response.targetDnsServers().get(0).port());
        Assertions.assertEquals("f", response.metadata().get("cxzbfvoowvr"));
        Assertions.assertEquals(ForwardingRuleState.ENABLED, response.forwardingRuleState());
    }
}
