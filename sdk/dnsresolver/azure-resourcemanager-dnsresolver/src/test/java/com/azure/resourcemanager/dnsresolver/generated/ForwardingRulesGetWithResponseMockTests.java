// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.dnsresolver.DnsResolverManager;
import com.azure.resourcemanager.dnsresolver.models.ForwardingRule;
import com.azure.resourcemanager.dnsresolver.models.ForwardingRuleState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ForwardingRulesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"etag\":\"rjaltolmncw\",\"properties\":{\"domainName\":\"obqwcsdbnwdcfh\",\"targetDnsServers\":[{\"ipAddress\":\"qdpfuvglsbjjca\",\"port\":1995846414},{\"ipAddress\":\"bvtvudutncormr\",\"port\":1360670450}],\"metadata\":{\"dknnqvsazn\":\"cofudflvkgjub\",\"orudsgsa\":\"n\"},\"forwardingRuleState\":\"Disabled\",\"provisioningState\":\"Creating\"},\"id\":\"rauwjuetaebu\",\"name\":\"u\",\"type\":\"dmovsm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DnsResolverManager manager = DnsResolverManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ForwardingRule response = manager.forwardingRules()
            .getWithResponse("fz", "whxxbuyqax", "feqztppriol", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("obqwcsdbnwdcfh", response.domainName());
        Assertions.assertEquals("qdpfuvglsbjjca", response.targetDnsServers().get(0).ipAddress());
        Assertions.assertEquals(1995846414, response.targetDnsServers().get(0).port());
        Assertions.assertEquals("cofudflvkgjub", response.metadata().get("dknnqvsazn"));
        Assertions.assertEquals(ForwardingRuleState.DISABLED, response.forwardingRuleState());
    }
}
