// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.SubResource;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.dnsresolver.DnsResolverManager;
import com.azure.resourcemanager.dnsresolver.models.ActionType;
import com.azure.resourcemanager.dnsresolver.models.DnsSecurityRule;
import com.azure.resourcemanager.dnsresolver.models.DnsSecurityRuleAction;
import com.azure.resourcemanager.dnsresolver.models.DnsSecurityRuleState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DnsSecurityRulesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"etag\":\"cf\",\"properties\":{\"priority\":437881905,\"action\":{\"actionType\":\"Block\"},\"dnsResolverDomainLists\":[{\"id\":\"neuvyinzqod\"}],\"dnsSecurityRuleState\":\"Disabled\",\"provisioningState\":\"Succeeded\"},\"location\":\"oxgsgbpfgzdjtx\",\"tags\":{\"rdve\":\"lbqvgaqvlgafcqu\",\"uzhyrmewipmvekdx\":\"nwsdtutnwlduyc\"},\"id\":\"kuqgsjjxundxgket\",\"name\":\"zhhzjhfjmhvvmu\",\"type\":\"gpmuneqsxvmhfbuz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DnsResolverManager manager = DnsResolverManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        DnsSecurityRule response = manager.dnsSecurityRules()
            .define("jwltlwtjjgu")
            .withRegion("pchwa")
            .withExistingDnsResolverPolicy("lkb", "wpfaj")
            .withPriority(1732227907)
            .withAction(new DnsSecurityRuleAction().withActionType(ActionType.ALERT))
            .withDnsResolverDomainLists(Arrays.asList(new SubResource().withId("oaimlnw"),
                new SubResource().withId("aomylwea"), new SubResource().withId("lcsethwwnpj")))
            .withTags(mapOf("wlyxgncxyk", "ousnfepgfewe", "h", "hdjhlimmbcx"))
            .withDnsSecurityRuleState(DnsSecurityRuleState.ENABLED)
            .withIfMatch("r")
            .withIfNoneMatch("jcivmmg")
            .create();

        Assertions.assertEquals("oxgsgbpfgzdjtx", response.location());
        Assertions.assertEquals("lbqvgaqvlgafcqu", response.tags().get("rdve"));
        Assertions.assertEquals(437881905, response.priority());
        Assertions.assertEquals(ActionType.BLOCK, response.action().actionType());
        Assertions.assertEquals("neuvyinzqod", response.dnsResolverDomainLists().get(0).id());
        Assertions.assertEquals(DnsSecurityRuleState.DISABLED, response.dnsSecurityRuleState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
