// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.dnsresolver.DnsResolverManager;
import com.azure.resourcemanager.dnsresolver.models.InboundEndpoint;
import com.azure.resourcemanager.dnsresolver.models.IpAllocationMethod;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InboundEndpointsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"ipConfigurations\":[{\"subnet\":{\"id\":\"sj\"},\"privateIpAddress\":\"hszfjvfb\",\"privateIpAllocationMethod\":\"Dynamic\"},{\"subnet\":{\"id\":\"ljagrqmqhl\"},\"privateIpAddress\":\"riiiojnalghfkv\",\"privateIpAllocationMethod\":\"Static\"}],\"provisioningState\":\"Creating\",\"resourceGuid\":\"owueluqh\"},\"etag\":\"hhxvrhmzkwpj\",\"location\":\"wspughftqsxhqx\",\"tags\":{\"fzdm\":\"ukndxdigrjgu\",\"otzi\":\"yqtfihwh\",\"phoszqz\":\"gamv\"},\"id\":\"dphqamv\",\"name\":\"kfwynw\",\"type\":\"vtbvkayh\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DnsResolverManager manager = DnsResolverManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<InboundEndpoint> response
            = manager.inboundEndpoints().list("indfpwpjyl", "bt", 85653434, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wspughftqsxhqx", response.iterator().next().location());
        Assertions.assertEquals("ukndxdigrjgu", response.iterator().next().tags().get("fzdm"));
        Assertions.assertEquals("sj", response.iterator().next().ipConfigurations().get(0).subnet().id());
        Assertions.assertEquals("hszfjvfb", response.iterator().next().ipConfigurations().get(0).privateIpAddress());
        Assertions.assertEquals(IpAllocationMethod.DYNAMIC,
            response.iterator().next().ipConfigurations().get(0).privateIpAllocationMethod());
    }
}
