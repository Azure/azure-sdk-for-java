// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dnsresolver.fluent.models.DnsResolverDomainListInner;
import com.azure.resourcemanager.dnsresolver.models.DnsResolverDomainListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DnsResolverDomainListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DnsResolverDomainListResult model = BinaryData.fromString(
            "{\"value\":[{\"etag\":\"ygmi\",\"properties\":{\"domains\":[\"hnzdndslgnayqi\",\"ynduha\"],\"provisioningState\":\"Canceled\",\"resourceGuid\":\"kthumaqolbgycdui\"},\"location\":\"tgccymvaolpss\",\"tags\":{\"zpswiydmc\":\"fmmdnbbg\",\"xssadbzmnvdf\":\"yhz\",\"daodvxzbncblyl\":\"n\",\"erscdntne\":\"stdbhhxsrzdzu\"},\"id\":\"fiwjmygtdssls\",\"name\":\"tmweriofzpyq\",\"type\":\"emwabnet\"}],\"nextLink\":\"hszhedplvwiwu\"}")
            .toObject(DnsResolverDomainListResult.class);
        Assertions.assertEquals("tgccymvaolpss", model.value().get(0).location());
        Assertions.assertEquals("fmmdnbbg", model.value().get(0).tags().get("zpswiydmc"));
        Assertions.assertEquals("hnzdndslgnayqi", model.value().get(0).domains().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DnsResolverDomainListResult model = new DnsResolverDomainListResult()
            .withValue(Arrays.asList(new DnsResolverDomainListInner().withLocation("tgccymvaolpss")
                .withTags(mapOf("zpswiydmc", "fmmdnbbg", "xssadbzmnvdf", "yhz", "daodvxzbncblyl", "n", "erscdntne",
                    "stdbhhxsrzdzu"))
                .withDomains(Arrays.asList("hnzdndslgnayqi", "ynduha"))));
        model = BinaryData.fromObject(model).toObject(DnsResolverDomainListResult.class);
        Assertions.assertEquals("tgccymvaolpss", model.value().get(0).location());
        Assertions.assertEquals("fmmdnbbg", model.value().get(0).tags().get("zpswiydmc"));
        Assertions.assertEquals("hnzdndslgnayqi", model.value().get(0).domains().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
