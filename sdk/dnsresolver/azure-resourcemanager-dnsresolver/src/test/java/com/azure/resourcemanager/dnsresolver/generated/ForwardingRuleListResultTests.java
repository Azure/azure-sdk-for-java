// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dnsresolver.fluent.models.ForwardingRuleInner;
import com.azure.resourcemanager.dnsresolver.models.ForwardingRuleListResult;
import com.azure.resourcemanager.dnsresolver.models.ForwardingRuleState;
import com.azure.resourcemanager.dnsresolver.models.TargetDnsServer;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ForwardingRuleListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ForwardingRuleListResult model = BinaryData.fromString(
            "{\"value\":[{\"etag\":\"rrqnbpoczvyifqrv\",\"properties\":{\"domainName\":\"dvjsllrmvvdf\",\"targetDnsServers\":[{\"ipAddress\":\"t\",\"port\":207833423},{\"ipAddress\":\"pulexxbczw\",\"port\":1414548234}],\"metadata\":{\"yokacspkw\":\"qzbqjvsov\",\"rkcciwwzjuqk\":\"hzdobpxjmflbvvnc\"},\"forwardingRuleState\":\"Enabled\",\"provisioningState\":\"Failed\"},\"id\":\"wkuofoskghsauu\",\"name\":\"mjmvxieduugidyjr\",\"type\":\"f\"},{\"etag\":\"aos\",\"properties\":{\"domainName\":\"e\",\"targetDnsServers\":[{\"ipAddress\":\"sonpclhocohs\",\"port\":442163665},{\"ipAddress\":\"vleggzfbuhfmvfax\",\"port\":750094319},{\"ipAddress\":\"eiithlvmez\",\"port\":2122365511}],\"metadata\":{\"zoggigrxwburvjxx\":\"mzsb\",\"udwtiukbl\":\"nspydptkoenkoukn\",\"o\":\"ngkpocipazy\"},\"forwardingRuleState\":\"Disabled\",\"provisioningState\":\"Failed\"},\"id\":\"npiucgygevqznty\",\"name\":\"mrbpizcdrqj\",\"type\":\"dpydn\"}],\"nextLink\":\"hxdeoejz\"}")
            .toObject(ForwardingRuleListResult.class);
        Assertions.assertEquals("dvjsllrmvvdf", model.value().get(0).domainName());
        Assertions.assertEquals("t", model.value().get(0).targetDnsServers().get(0).ipAddress());
        Assertions.assertEquals(207833423, model.value().get(0).targetDnsServers().get(0).port());
        Assertions.assertEquals("qzbqjvsov", model.value().get(0).metadata().get("yokacspkw"));
        Assertions.assertEquals(ForwardingRuleState.ENABLED, model.value().get(0).forwardingRuleState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ForwardingRuleListResult model = new ForwardingRuleListResult().withValue(Arrays.asList(
            new ForwardingRuleInner().withDomainName("dvjsllrmvvdf")
                .withTargetDnsServers(Arrays.asList(new TargetDnsServer().withIpAddress("t").withPort(207833423),
                    new TargetDnsServer().withIpAddress("pulexxbczw").withPort(1414548234)))
                .withMetadata(mapOf("yokacspkw", "qzbqjvsov", "rkcciwwzjuqk", "hzdobpxjmflbvvnc"))
                .withForwardingRuleState(ForwardingRuleState.ENABLED),
            new ForwardingRuleInner().withDomainName("e")
                .withTargetDnsServers(
                    Arrays.asList(new TargetDnsServer().withIpAddress("sonpclhocohs").withPort(442163665),
                        new TargetDnsServer().withIpAddress("vleggzfbuhfmvfax").withPort(750094319),
                        new TargetDnsServer().withIpAddress("eiithlvmez").withPort(2122365511)))
                .withMetadata(mapOf("zoggigrxwburvjxx", "mzsb", "udwtiukbl", "nspydptkoenkoukn", "o", "ngkpocipazy"))
                .withForwardingRuleState(ForwardingRuleState.DISABLED)));
        model = BinaryData.fromObject(model).toObject(ForwardingRuleListResult.class);
        Assertions.assertEquals("dvjsllrmvvdf", model.value().get(0).domainName());
        Assertions.assertEquals("t", model.value().get(0).targetDnsServers().get(0).ipAddress());
        Assertions.assertEquals(207833423, model.value().get(0).targetDnsServers().get(0).port());
        Assertions.assertEquals("qzbqjvsov", model.value().get(0).metadata().get("yokacspkw"));
        Assertions.assertEquals(ForwardingRuleState.ENABLED, model.value().get(0).forwardingRuleState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
