// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dnsresolver.fluent.models.ForwardingRuleInner;
import com.azure.resourcemanager.dnsresolver.models.ForwardingRuleState;
import com.azure.resourcemanager.dnsresolver.models.TargetDnsServer;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ForwardingRuleInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ForwardingRuleInner model = BinaryData.fromString(
            "{\"etag\":\"pmng\",\"properties\":{\"domainName\":\"zscxaqwo\",\"targetDnsServers\":[{\"ipAddress\":\"hcbonqvpkvlr\",\"port\":1098577091},{\"ipAddress\":\"ea\",\"port\":1797788548},{\"ipAddress\":\"pheoflokeyy\",\"port\":354708232},{\"ipAddress\":\"jbdlwtgrhpdjpju\",\"port\":1786348929}],\"metadata\":{\"qyeg\":\"zj\",\"hejjz\":\"alhbx\",\"udgwdslfho\":\"v\",\"npwlbjnpg\":\"wmc\"},\"forwardingRuleState\":\"Disabled\",\"provisioningState\":\"Canceled\"},\"id\":\"ehxnltyfsop\",\"name\":\"usue\",\"type\":\"nzwdejba\"}")
            .toObject(ForwardingRuleInner.class);
        Assertions.assertEquals("zscxaqwo", model.domainName());
        Assertions.assertEquals("hcbonqvpkvlr", model.targetDnsServers().get(0).ipAddress());
        Assertions.assertEquals(1098577091, model.targetDnsServers().get(0).port());
        Assertions.assertEquals("zj", model.metadata().get("qyeg"));
        Assertions.assertEquals(ForwardingRuleState.DISABLED, model.forwardingRuleState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ForwardingRuleInner model = new ForwardingRuleInner().withDomainName("zscxaqwo")
            .withTargetDnsServers(
                Arrays.asList(new TargetDnsServer().withIpAddress("hcbonqvpkvlr").withPort(1098577091),
                    new TargetDnsServer().withIpAddress("ea").withPort(1797788548),
                    new TargetDnsServer().withIpAddress("pheoflokeyy").withPort(354708232),
                    new TargetDnsServer().withIpAddress("jbdlwtgrhpdjpju").withPort(1786348929)))
            .withMetadata(mapOf("qyeg", "zj", "hejjz", "alhbx", "udgwdslfho", "v", "npwlbjnpg", "wmc"))
            .withForwardingRuleState(ForwardingRuleState.DISABLED);
        model = BinaryData.fromObject(model).toObject(ForwardingRuleInner.class);
        Assertions.assertEquals("zscxaqwo", model.domainName());
        Assertions.assertEquals("hcbonqvpkvlr", model.targetDnsServers().get(0).ipAddress());
        Assertions.assertEquals(1098577091, model.targetDnsServers().get(0).port());
        Assertions.assertEquals("zj", model.metadata().get("qyeg"));
        Assertions.assertEquals(ForwardingRuleState.DISABLED, model.forwardingRuleState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
