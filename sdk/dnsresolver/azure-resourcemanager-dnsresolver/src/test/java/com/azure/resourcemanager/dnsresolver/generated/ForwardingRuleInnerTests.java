// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dnsresolver.fluent.models.ForwardingRuleInner;
import com.azure.resourcemanager.dnsresolver.models.ForwardingRuleState;
import com.azure.resourcemanager.dnsresolver.models.TargetDnsServer;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ForwardingRuleInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ForwardingRuleInner model = BinaryData.fromString(
            "{\"properties\":{\"domainName\":\"ffeii\",\"targetDnsServers\":[{\"ipAddress\":\"lvmezyvshxmzsbbz\",\"port\":852408036}],\"metadata\":{\"xxjnspydptk\":\"rxwburv\",\"iukbldngkpoci\":\"enkouknvudw\"},\"forwardingRuleState\":\"Enabled\",\"provisioningState\":\"Failed\"},\"etag\":\"egukgjnpiucg\",\"id\":\"evqzntypmrbp\",\"name\":\"zcdrqjsdpydnfyhx\",\"type\":\"eoejzic\"}")
            .toObject(ForwardingRuleInner.class);
        Assertions.assertEquals("ffeii", model.domainName());
        Assertions.assertEquals("lvmezyvshxmzsbbz", model.targetDnsServers().get(0).ipAddress());
        Assertions.assertEquals(852408036, model.targetDnsServers().get(0).port());
        Assertions.assertEquals("rxwburv", model.metadata().get("xxjnspydptk"));
        Assertions.assertEquals(ForwardingRuleState.ENABLED, model.forwardingRuleState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ForwardingRuleInner model = new ForwardingRuleInner().withDomainName("ffeii")
            .withTargetDnsServers(
                Arrays.asList(new TargetDnsServer().withIpAddress("lvmezyvshxmzsbbz").withPort(852408036)))
            .withMetadata(mapOf("xxjnspydptk", "rxwburv", "iukbldngkpoci", "enkouknvudw"))
            .withForwardingRuleState(ForwardingRuleState.ENABLED);
        model = BinaryData.fromObject(model).toObject(ForwardingRuleInner.class);
        Assertions.assertEquals("ffeii", model.domainName());
        Assertions.assertEquals("lvmezyvshxmzsbbz", model.targetDnsServers().get(0).ipAddress());
        Assertions.assertEquals(852408036, model.targetDnsServers().get(0).port());
        Assertions.assertEquals("rxwburv", model.metadata().get("xxjnspydptk"));
        Assertions.assertEquals(ForwardingRuleState.ENABLED, model.forwardingRuleState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
