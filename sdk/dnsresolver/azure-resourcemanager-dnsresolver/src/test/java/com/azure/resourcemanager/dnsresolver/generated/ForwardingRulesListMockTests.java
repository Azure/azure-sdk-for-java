// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.dnsresolver.DnsResolverManager;
import com.azure.resourcemanager.dnsresolver.models.ForwardingRule;
import com.azure.resourcemanager.dnsresolver.models.ForwardingRuleState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ForwardingRulesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"etag\":\"mhjglikkxwslolb\",\"properties\":{\"domainName\":\"pvuzlmv\",\"targetDnsServers\":[{\"ipAddress\":\"lfktgplcrpwjxe\",\"port\":282428927}],\"metadata\":{\"pn\":\"brnjwmw\"},\"forwardingRuleState\":\"Enabled\",\"provisioningState\":\"Updating\"},\"id\":\"joqkagfhsxt\",\"name\":\"augzxnfaazpxdtn\",\"type\":\"dm\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DnsResolverManager manager = DnsResolverManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ForwardingRule> response
            = manager.forwardingRules().list("krrjrea", "xt", 1090066080, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("pvuzlmv", response.iterator().next().domainName());
        Assertions.assertEquals("lfktgplcrpwjxe", response.iterator().next().targetDnsServers().get(0).ipAddress());
        Assertions.assertEquals(282428927, response.iterator().next().targetDnsServers().get(0).port());
        Assertions.assertEquals("brnjwmw", response.iterator().next().metadata().get("pn"));
        Assertions.assertEquals(ForwardingRuleState.ENABLED, response.iterator().next().forwardingRuleState());
    }
}
