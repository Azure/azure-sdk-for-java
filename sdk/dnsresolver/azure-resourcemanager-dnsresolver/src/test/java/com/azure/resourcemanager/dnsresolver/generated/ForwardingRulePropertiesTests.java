// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dnsresolver.fluent.models.ForwardingRuleProperties;
import com.azure.resourcemanager.dnsresolver.models.ForwardingRuleState;
import com.azure.resourcemanager.dnsresolver.models.TargetDnsServer;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ForwardingRulePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ForwardingRuleProperties model = BinaryData.fromString(
            "{\"domainName\":\"orxzdmohctbqvud\",\"targetDnsServers\":[{\"ipAddress\":\"dndnvow\",\"port\":1798708201}],\"metadata\":{\"zj\":\"gwdkcglhsl\"},\"forwardingRuleState\":\"Enabled\",\"provisioningState\":\"Deleting\"}")
            .toObject(ForwardingRuleProperties.class);
        Assertions.assertEquals("orxzdmohctbqvud", model.domainName());
        Assertions.assertEquals("dndnvow", model.targetDnsServers().get(0).ipAddress());
        Assertions.assertEquals(1798708201, model.targetDnsServers().get(0).port());
        Assertions.assertEquals("gwdkcglhsl", model.metadata().get("zj"));
        Assertions.assertEquals(ForwardingRuleState.ENABLED, model.forwardingRuleState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ForwardingRuleProperties model = new ForwardingRuleProperties().withDomainName("orxzdmohctbqvud")
            .withTargetDnsServers(Arrays.asList(new TargetDnsServer().withIpAddress("dndnvow").withPort(1798708201)))
            .withMetadata(mapOf("zj", "gwdkcglhsl"))
            .withForwardingRuleState(ForwardingRuleState.ENABLED);
        model = BinaryData.fromObject(model).toObject(ForwardingRuleProperties.class);
        Assertions.assertEquals("orxzdmohctbqvud", model.domainName());
        Assertions.assertEquals("dndnvow", model.targetDnsServers().get(0).ipAddress());
        Assertions.assertEquals(1798708201, model.targetDnsServers().get(0).port());
        Assertions.assertEquals("gwdkcglhsl", model.metadata().get("zj"));
        Assertions.assertEquals(ForwardingRuleState.ENABLED, model.forwardingRuleState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
