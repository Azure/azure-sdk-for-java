// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dnsresolver.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dnsresolver.fluent.models.InboundEndpointProperties;
import com.azure.resourcemanager.dnsresolver.models.IpAllocationMethod;
import com.azure.resourcemanager.dnsresolver.models.IpConfiguration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class InboundEndpointPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InboundEndpointProperties model = BinaryData.fromString(
            "{\"ipConfigurations\":[{\"subnet\":{\"id\":\"xvd\"},\"privateIpAddress\":\"jgrtfwvukxga\",\"privateIpAllocationMethod\":\"Static\"},{\"subnet\":{\"id\":\"snhsjcnyejhkryh\"},\"privateIpAddress\":\"apcz\",\"privateIpAllocationMethod\":\"Static\"}],\"provisioningState\":\"Creating\",\"resourceGuid\":\"emkkvnipjox\"}")
            .toObject(InboundEndpointProperties.class);
        Assertions.assertEquals("xvd", model.ipConfigurations().get(0).subnet().id());
        Assertions.assertEquals("jgrtfwvukxga", model.ipConfigurations().get(0).privateIpAddress());
        Assertions.assertEquals(IpAllocationMethod.STATIC, model.ipConfigurations().get(0).privateIpAllocationMethod());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InboundEndpointProperties model = new InboundEndpointProperties().withIpConfigurations(Arrays.asList(
            new IpConfiguration().withSubnet(new SubResource().withId("xvd"))
                .withPrivateIpAddress("jgrtfwvukxga")
                .withPrivateIpAllocationMethod(IpAllocationMethod.STATIC),
            new IpConfiguration().withSubnet(new SubResource().withId("snhsjcnyejhkryh"))
                .withPrivateIpAddress("apcz")
                .withPrivateIpAllocationMethod(IpAllocationMethod.STATIC)));
        model = BinaryData.fromObject(model).toObject(InboundEndpointProperties.class);
        Assertions.assertEquals("xvd", model.ipConfigurations().get(0).subnet().id());
        Assertions.assertEquals("jgrtfwvukxga", model.ipConfigurations().get(0).privateIpAddress());
        Assertions.assertEquals(IpAllocationMethod.STATIC, model.ipConfigurations().get(0).privateIpAllocationMethod());
    }
}
