// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.newrelic.generated;

import com.azure.resourcemanager.newrelic.models.AccountCreationSource;
import com.azure.resourcemanager.newrelic.models.AccountInfo;
import com.azure.resourcemanager.newrelic.models.BillingCycle;
import com.azure.resourcemanager.newrelic.models.ManagedServiceIdentity;
import com.azure.resourcemanager.newrelic.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.newrelic.models.NewRelicAccountProperties;
import com.azure.resourcemanager.newrelic.models.NewRelicMonitorResource;
import com.azure.resourcemanager.newrelic.models.NewRelicSingleSignOnProperties;
import com.azure.resourcemanager.newrelic.models.OrgCreationSource;
import com.azure.resourcemanager.newrelic.models.OrganizationInfo;
import com.azure.resourcemanager.newrelic.models.PlanData;
import com.azure.resourcemanager.newrelic.models.ProvisioningState;
import com.azure.resourcemanager.newrelic.models.SingleSignOnStates;
import com.azure.resourcemanager.newrelic.models.UsageType;
import com.azure.resourcemanager.newrelic.models.UserAssignedIdentity;
import com.azure.resourcemanager.newrelic.models.UserInfo;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;

/** Samples for Monitors Update. */
public final class MonitorsUpdateSamples {
    /*
     * x-ms-original-file: specification/newrelic/resource-manager/NewRelic.Observability/preview/2022-07-01-preview/examples/Monitors_Update_MaximumSet_Gen.json
     */
    /**
     * Sample code: Monitors_Update_MaximumSet_Gen.
     *
     * @param manager Entry point to NewRelicManager.
     */
    public static void monitorsUpdateMaximumSetGen(com.azure.resourcemanager.newrelic.NewRelicManager manager) {
        NewRelicMonitorResource resource =
            manager
                .monitors()
                .getByResourceGroupWithResponse("rgNewRelic", "cdlymktqw", com.azure.core.util.Context.NONE)
                .getValue();
        resource
            .update()
            .withTags(mapOf("key164", "jqakdrrmmyzytqu"))
            .withIdentity(
                new ManagedServiceIdentity()
                    .withType(ManagedServiceIdentityType.NONE)
                    .withUserAssignedIdentities(mapOf("key8903", new UserAssignedIdentity())))
            .withNewRelicAccountProperties(
                new NewRelicAccountProperties()
                    .withUserId("vcscxlncofcuduadesd")
                    .withAccountInfo(
                        new AccountInfo()
                            .withAccountId("xhqmg")
                            .withIngestionKey("fakeTokenPlaceholder")
                            .withRegion("ljcf"))
                    .withOrganizationInfo(new OrganizationInfo().withOrganizationId("k"))
                    .withSingleSignOnProperties(
                        new NewRelicSingleSignOnProperties()
                            .withSingleSignOnState(SingleSignOnStates.INITIAL)
                            .withEnterpriseAppId("kwiwfz")
                            .withSingleSignOnUrl("kvseueuljsxmfwpqctz")
                            .withProvisioningState(ProvisioningState.ACCEPTED)))
            .withUserInfo(
                new UserInfo()
                    .withFirstName("vdftzcggirefejajwahhwhyibutramdaotvnuf")
                    .withLastName("bcsztgqovdlmzfkjdrngidwzqsevagexzzilnlc")
                    .withEmailAddress("%6%@4-g.N1.3F-kI1.Ue-.lJso")
                    .withPhoneNumber("krf")
                    .withCountry("hslqnwdanrconqyekwbnttaetv"))
            .withPlanData(
                new PlanData()
                    .withUsageType(UsageType.PAYG)
                    .withBillingCycle(BillingCycle.YEARLY)
                    .withPlanDetails("tbbiaga")
                    .withEffectiveDate(OffsetDateTime.parse("2022-12-05T14:11:37.786Z")))
            .withOrgCreationSource(OrgCreationSource.LIFTR)
            .withAccountCreationSource(AccountCreationSource.LIFTR)
            .apply();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
