// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mixedreality.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mixedreality.fluent.models.SpatialAnchorsAccountInner;
import com.azure.resourcemanager.mixedreality.models.Identity;
import com.azure.resourcemanager.mixedreality.models.ResourceIdentityType;
import com.azure.resourcemanager.mixedreality.models.Sku;
import com.azure.resourcemanager.mixedreality.models.SkuTier;
import com.azure.resourcemanager.mixedreality.models.SpatialAnchorsAccountPage;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SpatialAnchorsAccountPageTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SpatialAnchorsAccountPage model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"storageAccountName\":\"yeicxmqciwqvhk\",\"accountId\":\"xuigdtopbobj\",\"accountDomain\":\"hm\"},\"identity\":{\"principalId\":\"a\",\"tenantId\":\"uhrzayvvt\",\"type\":\"SystemAssigned\"},\"plan\":{\"principalId\":\"giotkftutqxlngx\",\"tenantId\":\"fgugnxkrxdqmid\",\"type\":\"SystemAssigned\"},\"sku\":{\"name\":\"rvqdra\",\"tier\":\"Basic\",\"size\":\"big\",\"family\":\"oqfbowskanyk\",\"capacity\":1440760803},\"kind\":{\"name\":\"u\",\"tier\":\"Basic\",\"size\":\"qyw\",\"family\":\"drvyn\",\"capacity\":19075135},\"location\":\"phrcgyncoc\",\"tags\":{\"coofsxlzev\":\"fvm\",\"abcypmivk\":\"bmqj\"},\"id\":\"lzu\",\"name\":\"ccfwnfnbacfion\",\"type\":\"ebxetqgtzxdp\"}],\"nextLink\":\"bqqwxrj\"}")
            .toObject(SpatialAnchorsAccountPage.class);
        Assertions.assertEquals("phrcgyncoc", model.value().get(0).location());
        Assertions.assertEquals("fvm", model.value().get(0).tags().get("coofsxlzev"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).plan().type());
        Assertions.assertEquals("rvqdra", model.value().get(0).sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.value().get(0).sku().tier());
        Assertions.assertEquals("big", model.value().get(0).sku().size());
        Assertions.assertEquals("oqfbowskanyk", model.value().get(0).sku().family());
        Assertions.assertEquals(1440760803, model.value().get(0).sku().capacity());
        Assertions.assertEquals("u", model.value().get(0).kind().name());
        Assertions.assertEquals(SkuTier.BASIC, model.value().get(0).kind().tier());
        Assertions.assertEquals("qyw", model.value().get(0).kind().size());
        Assertions.assertEquals("drvyn", model.value().get(0).kind().family());
        Assertions.assertEquals(19075135, model.value().get(0).kind().capacity());
        Assertions.assertEquals("yeicxmqciwqvhk", model.value().get(0).storageAccountName());
        Assertions.assertEquals("bqqwxrj", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SpatialAnchorsAccountPage model = new SpatialAnchorsAccountPage()
            .withValue(Arrays.asList(new SpatialAnchorsAccountInner().withLocation("phrcgyncoc")
                .withTags(mapOf("coofsxlzev", "fvm", "abcypmivk", "bmqj"))
                .withIdentity(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
                .withPlan(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
                .withSku(new Sku().withName("rvqdra")
                    .withTier(SkuTier.BASIC)
                    .withSize("big")
                    .withFamily("oqfbowskanyk")
                    .withCapacity(1440760803))
                .withKind(new Sku().withName("u")
                    .withTier(SkuTier.BASIC)
                    .withSize("qyw")
                    .withFamily("drvyn")
                    .withCapacity(19075135))
                .withStorageAccountName("yeicxmqciwqvhk")))
            .withNextLink("bqqwxrj");
        model = BinaryData.fromObject(model).toObject(SpatialAnchorsAccountPage.class);
        Assertions.assertEquals("phrcgyncoc", model.value().get(0).location());
        Assertions.assertEquals("fvm", model.value().get(0).tags().get("coofsxlzev"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).plan().type());
        Assertions.assertEquals("rvqdra", model.value().get(0).sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.value().get(0).sku().tier());
        Assertions.assertEquals("big", model.value().get(0).sku().size());
        Assertions.assertEquals("oqfbowskanyk", model.value().get(0).sku().family());
        Assertions.assertEquals(1440760803, model.value().get(0).sku().capacity());
        Assertions.assertEquals("u", model.value().get(0).kind().name());
        Assertions.assertEquals(SkuTier.BASIC, model.value().get(0).kind().tier());
        Assertions.assertEquals("qyw", model.value().get(0).kind().size());
        Assertions.assertEquals("drvyn", model.value().get(0).kind().family());
        Assertions.assertEquals(19075135, model.value().get(0).kind().capacity());
        Assertions.assertEquals("yeicxmqciwqvhk", model.value().get(0).storageAccountName());
        Assertions.assertEquals("bqqwxrj", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
