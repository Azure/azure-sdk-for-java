// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mixedreality.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mixedreality.MixedRealityManager;
import com.azure.resourcemanager.mixedreality.models.ResourceIdentityType;
import com.azure.resourcemanager.mixedreality.models.SkuTier;
import com.azure.resourcemanager.mixedreality.models.SpatialAnchorsAccount;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SpatialAnchorsAccountsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"storageAccountName\":\"wwtppj\",\"accountId\":\"cxogaokonzm\",\"accountDomain\":\"ikvmkqzeqqk\"},\"identity\":{\"principalId\":\"fzxmhhvhgureodkw\",\"tenantId\":\"dagxtibqd\",\"type\":\"SystemAssigned\"},\"plan\":{\"principalId\":\"kbogqxndlkzgx\",\"tenantId\":\"ripl\",\"type\":\"SystemAssigned\"},\"sku\":{\"name\":\"xunkbebxmubyynt\",\"tier\":\"Basic\",\"size\":\"qtkoievs\",\"family\":\"tgqr\",\"capacity\":407342571},\"kind\":{\"name\":\"u\",\"tier\":\"Standard\",\"size\":\"wzizxbmpgcjefuzm\",\"family\":\"pbttdum\",\"capacity\":95905507},\"location\":\"xe\",\"tags\":{\"glkfg\":\"zbtbhj\",\"dyhtozfikdowwquu\":\"hdneuelfph\"},\"id\":\"xzxcl\",\"name\":\"ithhqzon\",\"type\":\"sg\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MixedRealityManager manager =
            MixedRealityManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SpatialAnchorsAccount response =
            manager
                .spatialAnchorsAccounts()
                .getByResourceGroupWithResponse("d", "lvwiwubmwmbesl", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("xe", response.location());
        Assertions.assertEquals("zbtbhj", response.tags().get("glkfg"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, response.plan().type());
        Assertions.assertEquals("xunkbebxmubyynt", response.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, response.sku().tier());
        Assertions.assertEquals("qtkoievs", response.sku().size());
        Assertions.assertEquals("tgqr", response.sku().family());
        Assertions.assertEquals(407342571, response.sku().capacity());
        Assertions.assertEquals("u", response.kind().name());
        Assertions.assertEquals(SkuTier.STANDARD, response.kind().tier());
        Assertions.assertEquals("wzizxbmpgcjefuzm", response.kind().size());
        Assertions.assertEquals("pbttdum", response.kind().family());
        Assertions.assertEquals(95905507, response.kind().capacity());
        Assertions.assertEquals("wwtppj", response.storageAccountName());
    }
}
