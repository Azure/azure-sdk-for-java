// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mixedreality.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mixedreality.fluent.models.SpatialAnchorsAccountInner;
import com.azure.resourcemanager.mixedreality.models.Identity;
import com.azure.resourcemanager.mixedreality.models.ResourceIdentityType;
import com.azure.resourcemanager.mixedreality.models.Sku;
import com.azure.resourcemanager.mixedreality.models.SkuTier;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SpatialAnchorsAccountInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SpatialAnchorsAccountInner model = BinaryData.fromString(
            "{\"properties\":{\"storageAccountName\":\"llnwsubi\",\"accountId\":\"jampmngnzscxaqw\",\"accountDomain\":\"chcbonqvpkvlrxnj\"},\"identity\":{\"principalId\":\"eipheoflokeyy\",\"tenantId\":\"nj\",\"type\":\"SystemAssigned\"},\"plan\":{\"principalId\":\"grhpdjpju\",\"tenantId\":\"sxazjpq\",\"type\":\"SystemAssigned\"},\"sku\":{\"name\":\"alhbx\",\"tier\":\"Free\",\"size\":\"jzzvdud\",\"family\":\"dslfhotwmcy\",\"capacity\":1581858778},\"kind\":{\"name\":\"bjnpg\",\"tier\":\"Premium\",\"size\":\"adehxnltyfsopp\",\"family\":\"uesnzwdejbavo\",\"capacity\":669466066},\"location\":\"mohctb\",\"tags\":{\"w\":\"dwxdndnv\",\"lazjdyggdtjixhbk\":\"ujjugwdkcglh\",\"fwhybcibvy\":\"ofqweykhmenevfye\",\"ynnaam\":\"dcsi\"},\"id\":\"ectehf\",\"name\":\"qsc\",\"type\":\"eypvhezrkg\"}")
            .toObject(SpatialAnchorsAccountInner.class);
        Assertions.assertEquals("mohctb", model.location());
        Assertions.assertEquals("dwxdndnv", model.tags().get("w"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.plan().type());
        Assertions.assertEquals("alhbx", model.sku().name());
        Assertions.assertEquals(SkuTier.FREE, model.sku().tier());
        Assertions.assertEquals("jzzvdud", model.sku().size());
        Assertions.assertEquals("dslfhotwmcy", model.sku().family());
        Assertions.assertEquals(1581858778, model.sku().capacity());
        Assertions.assertEquals("bjnpg", model.kind().name());
        Assertions.assertEquals(SkuTier.PREMIUM, model.kind().tier());
        Assertions.assertEquals("adehxnltyfsopp", model.kind().size());
        Assertions.assertEquals("uesnzwdejbavo", model.kind().family());
        Assertions.assertEquals(669466066, model.kind().capacity());
        Assertions.assertEquals("llnwsubi", model.storageAccountName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SpatialAnchorsAccountInner model = new SpatialAnchorsAccountInner().withLocation("mohctb")
            .withTags(mapOf("w", "dwxdndnv", "lazjdyggdtjixhbk", "ujjugwdkcglh", "fwhybcibvy", "ofqweykhmenevfye",
                "ynnaam", "dcsi"))
            .withIdentity(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
            .withPlan(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
            .withSku(new Sku().withName("alhbx")
                .withTier(SkuTier.FREE)
                .withSize("jzzvdud")
                .withFamily("dslfhotwmcy")
                .withCapacity(1581858778))
            .withKind(new Sku().withName("bjnpg")
                .withTier(SkuTier.PREMIUM)
                .withSize("adehxnltyfsopp")
                .withFamily("uesnzwdejbavo")
                .withCapacity(669466066))
            .withStorageAccountName("llnwsubi");
        model = BinaryData.fromObject(model).toObject(SpatialAnchorsAccountInner.class);
        Assertions.assertEquals("mohctb", model.location());
        Assertions.assertEquals("dwxdndnv", model.tags().get("w"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.plan().type());
        Assertions.assertEquals("alhbx", model.sku().name());
        Assertions.assertEquals(SkuTier.FREE, model.sku().tier());
        Assertions.assertEquals("jzzvdud", model.sku().size());
        Assertions.assertEquals("dslfhotwmcy", model.sku().family());
        Assertions.assertEquals(1581858778, model.sku().capacity());
        Assertions.assertEquals("bjnpg", model.kind().name());
        Assertions.assertEquals(SkuTier.PREMIUM, model.kind().tier());
        Assertions.assertEquals("adehxnltyfsopp", model.kind().size());
        Assertions.assertEquals("uesnzwdejbavo", model.kind().family());
        Assertions.assertEquals(669466066, model.kind().capacity());
        Assertions.assertEquals("llnwsubi", model.storageAccountName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
