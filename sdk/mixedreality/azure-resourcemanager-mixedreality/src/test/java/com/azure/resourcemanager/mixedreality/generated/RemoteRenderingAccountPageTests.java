// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mixedreality.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mixedreality.fluent.models.RemoteRenderingAccountInner;
import com.azure.resourcemanager.mixedreality.models.Identity;
import com.azure.resourcemanager.mixedreality.models.RemoteRenderingAccountPage;
import com.azure.resourcemanager.mixedreality.models.ResourceIdentityType;
import com.azure.resourcemanager.mixedreality.models.Sku;
import com.azure.resourcemanager.mixedreality.models.SkuTier;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RemoteRenderingAccountPageTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RemoteRenderingAccountPage model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"storageAccountName\":\"yzydagfuaxbezyi\",\"accountId\":\"kktwhrdxw\",\"accountDomain\":\"wqsmbsur\"},\"identity\":{\"principalId\":\"moryocfsfksym\",\"tenantId\":\"ys\",\"type\":\"SystemAssigned\"},\"plan\":{\"principalId\":\"xhqyudxorrqnb\",\"tenantId\":\"czvyifq\",\"type\":\"SystemAssigned\"},\"sku\":{\"name\":\"vjsllrmvvdfw\",\"tier\":\"Premium\",\"size\":\"n\",\"family\":\"lexxbczwtru\",\"capacity\":223654021},\"kind\":{\"name\":\"bq\",\"tier\":\"Premium\",\"size\":\"vmyokacspkwl\",\"family\":\"dobpxjmflbvvn\",\"capacity\":1044580515},\"location\":\"cciw\",\"tags\":{\"foskghsauuimj\":\"uqkhrsajiwku\"},\"id\":\"vxieduugidyj\",\"name\":\"rfbyaosvexcso\",\"type\":\"pclhocohslk\"},{\"properties\":{\"storageAccountName\":\"eggzfb\",\"accountId\":\"fmvfaxkffeiit\",\"accountDomain\":\"vmezy\"},\"identity\":{\"principalId\":\"xmzsbbzogg\",\"tenantId\":\"rxwburv\",\"type\":\"SystemAssigned\"},\"plan\":{\"principalId\":\"spyd\",\"tenantId\":\"koen\",\"type\":\"SystemAssigned\"},\"sku\":{\"name\":\"nvudwtiukb\",\"tier\":\"Standard\",\"size\":\"kpoc\",\"family\":\"azyxoegukg\",\"capacity\":642461794},\"kind\":{\"name\":\"ucgygevqz\",\"tier\":\"Free\",\"size\":\"mrbpizcdrqj\",\"family\":\"pyd\",\"capacity\":1305817330},\"location\":\"xdeoejzic\",\"tags\":{\"bkh\":\"sjttgzfbish\"},\"id\":\"jdeyeamdpha\",\"name\":\"alpbuxwgipwhon\",\"type\":\"wkgshwa\"},{\"properties\":{\"storageAccountName\":\"xzbinjeputt\",\"accountId\":\"ywnuzoq\",\"accountDomain\":\"iyqzrnk\"},\"identity\":{\"principalId\":\"yx\",\"tenantId\":\"hzls\",\"type\":\"SystemAssigned\"},\"plan\":{\"principalId\":\"qqn\",\"tenantId\":\"lryav\",\"type\":\"SystemAssigned\"},\"sku\":{\"name\":\"unmmq\",\"tier\":\"Free\",\"size\":\"zko\",\"family\":\"cukoklyaxuconu\",\"capacity\":447504444},\"kind\":{\"name\":\"kbeype\",\"tier\":\"Standard\",\"size\":\"mwvvjektcxsenhw\",\"family\":\"s\",\"capacity\":1160903159},\"location\":\"pwvlqdq\",\"tags\":{\"fcivfsnkym\":\"qylihkaetckt\",\"jf\":\"ctq\",\"fuwutttxf\":\"ebrjcxe\"},\"id\":\"jrbirphxepcyv\",\"name\":\"hfnljkyq\",\"type\":\"j\"}],\"nextLink\":\"ujqgidok\"}")
            .toObject(RemoteRenderingAccountPage.class);
        Assertions.assertEquals("cciw", model.value().get(0).location());
        Assertions.assertEquals("uqkhrsajiwku", model.value().get(0).tags().get("foskghsauuimj"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).plan().type());
        Assertions.assertEquals("vjsllrmvvdfw", model.value().get(0).sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, model.value().get(0).sku().tier());
        Assertions.assertEquals("n", model.value().get(0).sku().size());
        Assertions.assertEquals("lexxbczwtru", model.value().get(0).sku().family());
        Assertions.assertEquals(223654021, model.value().get(0).sku().capacity());
        Assertions.assertEquals("bq", model.value().get(0).kind().name());
        Assertions.assertEquals(SkuTier.PREMIUM, model.value().get(0).kind().tier());
        Assertions.assertEquals("vmyokacspkwl", model.value().get(0).kind().size());
        Assertions.assertEquals("dobpxjmflbvvn", model.value().get(0).kind().family());
        Assertions.assertEquals(1044580515, model.value().get(0).kind().capacity());
        Assertions.assertEquals("yzydagfuaxbezyi", model.value().get(0).storageAccountName());
        Assertions.assertEquals("ujqgidok", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RemoteRenderingAccountPage model = new RemoteRenderingAccountPage().withValue(Arrays.asList(
            new RemoteRenderingAccountInner().withLocation("cciw")
                .withTags(mapOf("foskghsauuimj", "uqkhrsajiwku"))
                .withIdentity(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
                .withPlan(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
                .withSku(new Sku().withName("vjsllrmvvdfw")
                    .withTier(SkuTier.PREMIUM)
                    .withSize("n")
                    .withFamily("lexxbczwtru")
                    .withCapacity(223654021))
                .withKind(new Sku().withName("bq")
                    .withTier(SkuTier.PREMIUM)
                    .withSize("vmyokacspkwl")
                    .withFamily("dobpxjmflbvvn")
                    .withCapacity(1044580515))
                .withStorageAccountName("yzydagfuaxbezyi"),
            new RemoteRenderingAccountInner().withLocation("xdeoejzic")
                .withTags(mapOf("bkh", "sjttgzfbish"))
                .withIdentity(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
                .withPlan(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
                .withSku(new Sku().withName("nvudwtiukb")
                    .withTier(SkuTier.STANDARD)
                    .withSize("kpoc")
                    .withFamily("azyxoegukg")
                    .withCapacity(642461794))
                .withKind(new Sku().withName("ucgygevqz")
                    .withTier(SkuTier.FREE)
                    .withSize("mrbpizcdrqj")
                    .withFamily("pyd")
                    .withCapacity(1305817330))
                .withStorageAccountName("eggzfb"),
            new RemoteRenderingAccountInner().withLocation("pwvlqdq")
                .withTags(mapOf("fcivfsnkym", "qylihkaetckt", "jf", "ctq", "fuwutttxf", "ebrjcxe"))
                .withIdentity(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
                .withPlan(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
                .withSku(new Sku().withName("unmmq")
                    .withTier(SkuTier.FREE)
                    .withSize("zko")
                    .withFamily("cukoklyaxuconu")
                    .withCapacity(447504444))
                .withKind(new Sku().withName("kbeype")
                    .withTier(SkuTier.STANDARD)
                    .withSize("mwvvjektcxsenhw")
                    .withFamily("s")
                    .withCapacity(1160903159))
                .withStorageAccountName("xzbinjeputt")))
            .withNextLink("ujqgidok");
        model = BinaryData.fromObject(model).toObject(RemoteRenderingAccountPage.class);
        Assertions.assertEquals("cciw", model.value().get(0).location());
        Assertions.assertEquals("uqkhrsajiwku", model.value().get(0).tags().get("foskghsauuimj"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).plan().type());
        Assertions.assertEquals("vjsllrmvvdfw", model.value().get(0).sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, model.value().get(0).sku().tier());
        Assertions.assertEquals("n", model.value().get(0).sku().size());
        Assertions.assertEquals("lexxbczwtru", model.value().get(0).sku().family());
        Assertions.assertEquals(223654021, model.value().get(0).sku().capacity());
        Assertions.assertEquals("bq", model.value().get(0).kind().name());
        Assertions.assertEquals(SkuTier.PREMIUM, model.value().get(0).kind().tier());
        Assertions.assertEquals("vmyokacspkwl", model.value().get(0).kind().size());
        Assertions.assertEquals("dobpxjmflbvvn", model.value().get(0).kind().family());
        Assertions.assertEquals(1044580515, model.value().get(0).kind().capacity());
        Assertions.assertEquals("yzydagfuaxbezyi", model.value().get(0).storageAccountName());
        Assertions.assertEquals("ujqgidok", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
