// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mixedreality.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mixedreality.MixedRealityManager;
import com.azure.resourcemanager.mixedreality.models.Identity;
import com.azure.resourcemanager.mixedreality.models.RemoteRenderingAccount;
import com.azure.resourcemanager.mixedreality.models.ResourceIdentityType;
import com.azure.resourcemanager.mixedreality.models.Sku;
import com.azure.resourcemanager.mixedreality.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RemoteRenderingAccountsCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"storageAccountName\":\"lyc\",\"accountId\":\"uhpkxkgymar\",\"accountDomain\":\"n\"},\"identity\":{\"principalId\":\"qugjhkycube\",\"tenantId\":\"gssofwq\",\"type\":\"SystemAssigned\"},\"plan\":{\"principalId\":\"krmnjijpxacqqud\",\"tenantId\":\"byxbaaabjy\",\"type\":\"SystemAssigned\"},\"sku\":{\"name\":\"fimrzrtuzqogse\",\"tier\":\"Standard\",\"size\":\"fdnw\",\"family\":\"mewzsyyc\",\"capacity\":1576556557},\"kind\":{\"name\":\"oibjudpfrxtrthz\",\"tier\":\"Free\",\"size\":\"dwkqbrq\",\"family\":\"paxh\",\"capacity\":1580176854},\"location\":\"livpdt\",\"tags\":{\"d\":\"q\"},\"id\":\"oaxoruzfgsqu\",\"name\":\"fxrxxle\",\"type\":\"tramxjez\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MixedRealityManager manager = MixedRealityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        RemoteRenderingAccount response = manager.remoteRenderingAccounts()
            .define("edndr")
            .withRegion("l")
            .withExistingResourceGroup("hyrnxxmu")
            .withTags(mapOf("ag", "v", "cktqumiekkezzi", "rvimjwosytxitcsk", "bdunygaeqid", "hlyfjhdgqgg", "a",
                "qfatpxllrxcyjm"))
            .withIdentity(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
            .withPlan(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
            .withSku(new Sku().withName("eyfkzikfja")
                .withTier(SkuTier.STANDARD)
                .withSize("ivx")
                .withFamily("zel")
                .withCapacity(1240770029))
            .withKind(new Sku().withName("elsfeaen")
                .withTier(SkuTier.PREMIUM)
                .withSize("atklddxbjhwuaa")
                .withFamily("zjosp")
                .withCapacity(1616817744))
            .withStorageAccountName("tkwqqtchealm")
            .create();

        Assertions.assertEquals("livpdt", response.location());
        Assertions.assertEquals("q", response.tags().get("d"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, response.plan().type());
        Assertions.assertEquals("fimrzrtuzqogse", response.sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, response.sku().tier());
        Assertions.assertEquals("fdnw", response.sku().size());
        Assertions.assertEquals("mewzsyyc", response.sku().family());
        Assertions.assertEquals(1576556557, response.sku().capacity());
        Assertions.assertEquals("oibjudpfrxtrthz", response.kind().name());
        Assertions.assertEquals(SkuTier.FREE, response.kind().tier());
        Assertions.assertEquals("dwkqbrq", response.kind().size());
        Assertions.assertEquals("paxh", response.kind().family());
        Assertions.assertEquals(1580176854, response.kind().capacity());
        Assertions.assertEquals("lyc", response.storageAccountName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
