// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mixedreality.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mixedreality.MixedRealityManager;
import com.azure.resourcemanager.mixedreality.models.Identity;
import com.azure.resourcemanager.mixedreality.models.RemoteRenderingAccount;
import com.azure.resourcemanager.mixedreality.models.ResourceIdentityType;
import com.azure.resourcemanager.mixedreality.models.Sku;
import com.azure.resourcemanager.mixedreality.models.SkuTier;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class RemoteRenderingAccountsCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"storageAccountName\":\"uetae\",\"accountId\":\"ruvdmov\",\"accountDomain\":\"zlxwabmqoefkifr\"},\"identity\":{\"principalId\":\"u\",\"tenantId\":\"jmqlgkfb\",\"type\":\"SystemAssigned\"},\"plan\":{\"principalId\":\"ongbjcnt\",\"tenantId\":\"i\",\"type\":\"SystemAssigned\"},\"sku\":{\"name\":\"df\",\"tier\":\"Standard\",\"size\":\"ezkojvdcp\",\"family\":\"oqouicybxarzgszu\",\"capacity\":37759464},\"kind\":{\"name\":\"iqopidoamciod\",\"tier\":\"Free\",\"size\":\"zxkhnzbonlwnto\",\"family\":\"okdwb\",\"capacity\":1161774579},\"location\":\"z\",\"tags\":{\"qgsfraoyzkoow\":\"rvexztvb\"},\"id\":\"lmnguxaw\",\"name\":\"aldsy\",\"type\":\"uximerqfobw\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MixedRealityManager manager =
            MixedRealityManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        RemoteRenderingAccount response =
            manager
                .remoteRenderingAccounts()
                .define("jnsjervtiagxsd")
                .withRegion("vcofudfl")
                .withExistingResourceGroup("pulpqblylsyxk")
                .withTags(mapOf("dknnqvsazn", "jub"))
                .withIdentity(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
                .withPlan(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
                .withSku(
                    new Sku()
                        .withName("qztpp")
                        .withTier(SkuTier.FREE)
                        .withSize("xorjaltolmncwsob")
                        .withFamily("csdbnwdcfhuc")
                        .withCapacity(895561091))
                .withKind(
                    new Sku()
                        .withName("uvglsbjjcanvx")
                        .withTier(SkuTier.FREE)
                        .withSize("udutnco")
                        .withFamily("r")
                        .withCapacity(1360670450))
                .withStorageAccountName("e")
                .create();

        Assertions.assertEquals("z", response.location());
        Assertions.assertEquals("rvexztvb", response.tags().get("qgsfraoyzkoow"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, response.plan().type());
        Assertions.assertEquals("df", response.sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, response.sku().tier());
        Assertions.assertEquals("ezkojvdcp", response.sku().size());
        Assertions.assertEquals("oqouicybxarzgszu", response.sku().family());
        Assertions.assertEquals(37759464, response.sku().capacity());
        Assertions.assertEquals("iqopidoamciod", response.kind().name());
        Assertions.assertEquals(SkuTier.FREE, response.kind().tier());
        Assertions.assertEquals("zxkhnzbonlwnto", response.kind().size());
        Assertions.assertEquals("okdwb", response.kind().family());
        Assertions.assertEquals(1161774579, response.kind().capacity());
        Assertions.assertEquals("uetae", response.storageAccountName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
