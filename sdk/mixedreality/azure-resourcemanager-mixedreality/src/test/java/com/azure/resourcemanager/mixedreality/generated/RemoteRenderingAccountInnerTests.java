// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mixedreality.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mixedreality.fluent.models.RemoteRenderingAccountInner;
import com.azure.resourcemanager.mixedreality.models.Identity;
import com.azure.resourcemanager.mixedreality.models.ResourceIdentityType;
import com.azure.resourcemanager.mixedreality.models.Sku;
import com.azure.resourcemanager.mixedreality.models.SkuTier;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RemoteRenderingAccountInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RemoteRenderingAccountInner model = BinaryData.fromString(
            "{\"properties\":{\"storageAccountName\":\"jyoxgvclt\",\"accountId\":\"sncghkjeszz\",\"accountDomain\":\"ijhtxf\"},\"identity\":{\"principalId\":\"bfs\",\"tenantId\":\"nehmpvecx\",\"type\":\"SystemAssigned\"},\"plan\":{\"principalId\":\"fqkkr\",\"tenantId\":\"pukgriwflzlfb\",\"type\":\"SystemAssigned\"},\"sku\":{\"name\":\"zycispn\",\"tier\":\"Basic\",\"size\":\"mgkbrpyydhibn\",\"family\":\"qkpikadrgvtqagnb\",\"capacity\":855671205},\"kind\":{\"name\":\"ijggmebfsiar\",\"tier\":\"Standard\",\"size\":\"cvpnazzmhjrunmpx\",\"family\":\"dbhrbnlankxm\",\"capacity\":266718281},\"location\":\"bhenbtkcxywnyt\",\"tags\":{\"qidybyx\":\"yn\",\"aaxdbabphlwrq\":\"zfcl\",\"hsucoc\":\"fkts\",\"ckzywbiexzfeyue\":\"nyyazttbtwwrqpue\"},\"id\":\"xibxujwbhqwalm\",\"name\":\"zyoxaepdkzjan\",\"type\":\"ux\"}")
            .toObject(RemoteRenderingAccountInner.class);
        Assertions.assertEquals("bhenbtkcxywnyt", model.location());
        Assertions.assertEquals("yn", model.tags().get("qidybyx"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.plan().type());
        Assertions.assertEquals("zycispn", model.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals("mgkbrpyydhibn", model.sku().size());
        Assertions.assertEquals("qkpikadrgvtqagnb", model.sku().family());
        Assertions.assertEquals(855671205, model.sku().capacity());
        Assertions.assertEquals("ijggmebfsiar", model.kind().name());
        Assertions.assertEquals(SkuTier.STANDARD, model.kind().tier());
        Assertions.assertEquals("cvpnazzmhjrunmpx", model.kind().size());
        Assertions.assertEquals("dbhrbnlankxm", model.kind().family());
        Assertions.assertEquals(266718281, model.kind().capacity());
        Assertions.assertEquals("jyoxgvclt", model.storageAccountName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RemoteRenderingAccountInner model = new RemoteRenderingAccountInner().withLocation("bhenbtkcxywnyt")
            .withTags(mapOf("qidybyx", "yn", "aaxdbabphlwrq", "zfcl", "hsucoc", "fkts", "ckzywbiexzfeyue",
                "nyyazttbtwwrqpue"))
            .withIdentity(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
            .withPlan(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
            .withSku(new Sku().withName("zycispn")
                .withTier(SkuTier.BASIC)
                .withSize("mgkbrpyydhibn")
                .withFamily("qkpikadrgvtqagnb")
                .withCapacity(855671205))
            .withKind(new Sku().withName("ijggmebfsiar")
                .withTier(SkuTier.STANDARD)
                .withSize("cvpnazzmhjrunmpx")
                .withFamily("dbhrbnlankxm")
                .withCapacity(266718281))
            .withStorageAccountName("jyoxgvclt");
        model = BinaryData.fromObject(model).toObject(RemoteRenderingAccountInner.class);
        Assertions.assertEquals("bhenbtkcxywnyt", model.location());
        Assertions.assertEquals("yn", model.tags().get("qidybyx"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.plan().type());
        Assertions.assertEquals("zycispn", model.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals("mgkbrpyydhibn", model.sku().size());
        Assertions.assertEquals("qkpikadrgvtqagnb", model.sku().family());
        Assertions.assertEquals(855671205, model.sku().capacity());
        Assertions.assertEquals("ijggmebfsiar", model.kind().name());
        Assertions.assertEquals(SkuTier.STANDARD, model.kind().tier());
        Assertions.assertEquals("cvpnazzmhjrunmpx", model.kind().size());
        Assertions.assertEquals("dbhrbnlankxm", model.kind().family());
        Assertions.assertEquals(266718281, model.kind().capacity());
        Assertions.assertEquals("jyoxgvclt", model.storageAccountName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
