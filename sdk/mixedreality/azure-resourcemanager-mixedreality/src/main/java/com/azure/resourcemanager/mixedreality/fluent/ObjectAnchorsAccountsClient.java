// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mixedreality.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mixedreality.fluent.models.AccountKeysInner;
import com.azure.resourcemanager.mixedreality.fluent.models.ObjectAnchorsAccountInner;
import com.azure.resourcemanager.mixedreality.models.AccountKeyRegenerateRequest;

/** An instance of this class provides access to all the operations defined in ObjectAnchorsAccountsClient. */
public interface ObjectAnchorsAccountsClient {
    /**
     * List Object Anchors Accounts by Subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to get resource collection.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ObjectAnchorsAccountInner> list();

    /**
     * List Object Anchors Accounts by Subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to get resource collection.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ObjectAnchorsAccountInner> list(Context context);

    /**
     * List Resources by Resource Group.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to get resource collection.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ObjectAnchorsAccountInner> listByResourceGroup(String resourceGroupName);

    /**
     * List Resources by Resource Group.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to get resource collection.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ObjectAnchorsAccountInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Delete an Object Anchors Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String accountName);

    /**
     * Delete an Object Anchors Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceGroupName, String accountName, Context context);

    /**
     * Retrieve an Object Anchors Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return objectAnchorsAccount Response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ObjectAnchorsAccountInner getByResourceGroup(String resourceGroupName, String accountName);

    /**
     * Retrieve an Object Anchors Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return objectAnchorsAccount Response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ObjectAnchorsAccountInner> getByResourceGroupWithResponse(
        String resourceGroupName, String accountName, Context context);

    /**
     * Updating an Object Anchors Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param objectAnchorsAccount Object Anchors Account parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return objectAnchorsAccount Response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ObjectAnchorsAccountInner update(
        String resourceGroupName, String accountName, ObjectAnchorsAccountInner objectAnchorsAccount);

    /**
     * Updating an Object Anchors Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param objectAnchorsAccount Object Anchors Account parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return objectAnchorsAccount Response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ObjectAnchorsAccountInner> updateWithResponse(
        String resourceGroupName, String accountName, ObjectAnchorsAccountInner objectAnchorsAccount, Context context);

    /**
     * Creating or Updating an object anchors Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param objectAnchorsAccount Object Anchors Account parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return objectAnchorsAccount Response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ObjectAnchorsAccountInner create(
        String resourceGroupName, String accountName, ObjectAnchorsAccountInner objectAnchorsAccount);

    /**
     * Creating or Updating an object anchors Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param objectAnchorsAccount Object Anchors Account parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return objectAnchorsAccount Response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ObjectAnchorsAccountInner> createWithResponse(
        String resourceGroupName, String accountName, ObjectAnchorsAccountInner objectAnchorsAccount, Context context);

    /**
     * List Both of the 2 Keys of an object anchors Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return developer Keys of account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AccountKeysInner listKeys(String resourceGroupName, String accountName);

    /**
     * List Both of the 2 Keys of an object anchors Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return developer Keys of account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AccountKeysInner> listKeysWithResponse(String resourceGroupName, String accountName, Context context);

    /**
     * Regenerate specified Key of an object anchors Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param regenerate Required information for key regeneration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return developer Keys of account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AccountKeysInner regenerateKeys(
        String resourceGroupName, String accountName, AccountKeyRegenerateRequest regenerate);

    /**
     * Regenerate specified Key of an object anchors Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param regenerate Required information for key regeneration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return developer Keys of account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AccountKeysInner> regenerateKeysWithResponse(
        String resourceGroupName, String accountName, AccountKeyRegenerateRequest regenerate, Context context);
}
