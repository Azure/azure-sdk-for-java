// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mixedreality.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mixedreality.fluent.models.ObjectAnchorsAccountInner;
import com.azure.resourcemanager.mixedreality.models.AccountKeyRegenerateRequest;
import com.azure.resourcemanager.mixedreality.models.AccountKeys;
import com.azure.resourcemanager.mixedreality.models.Identity;
import com.azure.resourcemanager.mixedreality.models.ObjectAnchorsAccount;
import com.azure.resourcemanager.mixedreality.models.ObjectAnchorsAccountIdentity;
import com.azure.resourcemanager.mixedreality.models.Sku;
import java.util.Collections;
import java.util.Map;

public final class ObjectAnchorsAccountImpl
    implements ObjectAnchorsAccount, ObjectAnchorsAccount.Definition, ObjectAnchorsAccount.Update {
    private ObjectAnchorsAccountInner innerObject;

    private final com.azure.resourcemanager.mixedreality.MixedRealityManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ObjectAnchorsAccountIdentity identity() {
        return this.innerModel().identity();
    }

    public Identity plan() {
        return this.innerModel().plan();
    }

    public Sku sku() {
        return this.innerModel().sku();
    }

    public Sku kind() {
        return this.innerModel().kind();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String storageAccountName() {
        return this.innerModel().storageAccountName();
    }

    public String accountId() {
        return this.innerModel().accountId();
    }

    public String accountDomain() {
        return this.innerModel().accountDomain();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public ObjectAnchorsAccountInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.mixedreality.MixedRealityManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String accountName;

    public ObjectAnchorsAccountImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public ObjectAnchorsAccount create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getObjectAnchorsAccounts()
                .createWithResponse(resourceGroupName, accountName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public ObjectAnchorsAccount create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getObjectAnchorsAccounts()
                .createWithResponse(resourceGroupName, accountName, this.innerModel(), context)
                .getValue();
        return this;
    }

    ObjectAnchorsAccountImpl(String name, com.azure.resourcemanager.mixedreality.MixedRealityManager serviceManager) {
        this.innerObject = new ObjectAnchorsAccountInner();
        this.serviceManager = serviceManager;
        this.accountName = name;
    }

    public ObjectAnchorsAccountImpl update() {
        return this;
    }

    public ObjectAnchorsAccount apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getObjectAnchorsAccounts()
                .updateWithResponse(resourceGroupName, accountName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public ObjectAnchorsAccount apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getObjectAnchorsAccounts()
                .updateWithResponse(resourceGroupName, accountName, this.innerModel(), context)
                .getValue();
        return this;
    }

    ObjectAnchorsAccountImpl(
        ObjectAnchorsAccountInner innerObject,
        com.azure.resourcemanager.mixedreality.MixedRealityManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.accountName = Utils.getValueFromIdByName(innerObject.id(), "objectAnchorsAccounts");
    }

    public ObjectAnchorsAccount refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getObjectAnchorsAccounts()
                .getByResourceGroupWithResponse(resourceGroupName, accountName, Context.NONE)
                .getValue();
        return this;
    }

    public ObjectAnchorsAccount refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getObjectAnchorsAccounts()
                .getByResourceGroupWithResponse(resourceGroupName, accountName, context)
                .getValue();
        return this;
    }

    public AccountKeys listKeys() {
        return serviceManager.objectAnchorsAccounts().listKeys(resourceGroupName, accountName);
    }

    public Response<AccountKeys> listKeysWithResponse(Context context) {
        return serviceManager.objectAnchorsAccounts().listKeysWithResponse(resourceGroupName, accountName, context);
    }

    public AccountKeys regenerateKeys(AccountKeyRegenerateRequest regenerate) {
        return serviceManager.objectAnchorsAccounts().regenerateKeys(resourceGroupName, accountName, regenerate);
    }

    public Response<AccountKeys> regenerateKeysWithResponse(AccountKeyRegenerateRequest regenerate, Context context) {
        return serviceManager
            .objectAnchorsAccounts()
            .regenerateKeysWithResponse(resourceGroupName, accountName, regenerate, context);
    }

    public ObjectAnchorsAccountImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ObjectAnchorsAccountImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ObjectAnchorsAccountImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public ObjectAnchorsAccountImpl withIdentity(ObjectAnchorsAccountIdentity identity) {
        this.innerModel().withIdentity(identity);
        return this;
    }

    public ObjectAnchorsAccountImpl withPlan(Identity plan) {
        this.innerModel().withPlan(plan);
        return this;
    }

    public ObjectAnchorsAccountImpl withSku(Sku sku) {
        this.innerModel().withSku(sku);
        return this;
    }

    public ObjectAnchorsAccountImpl withKind(Sku kind) {
        this.innerModel().withKind(kind);
        return this;
    }

    public ObjectAnchorsAccountImpl withStorageAccountName(String storageAccountName) {
        this.innerModel().withStorageAccountName(storageAccountName);
        return this;
    }
}
