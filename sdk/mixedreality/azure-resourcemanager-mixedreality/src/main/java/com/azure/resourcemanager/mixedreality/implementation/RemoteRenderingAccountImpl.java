// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mixedreality.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mixedreality.MixedRealityManager;
import com.azure.resourcemanager.mixedreality.fluent.models.RemoteRenderingAccountInner;
import com.azure.resourcemanager.mixedreality.models.Identity;
import com.azure.resourcemanager.mixedreality.models.RemoteRenderingAccount;
import java.util.Collections;
import java.util.Map;

public final class RemoteRenderingAccountImpl
    implements RemoteRenderingAccount, RemoteRenderingAccount.Definition, RemoteRenderingAccount.Update {
    private RemoteRenderingAccountInner innerObject;

    private final MixedRealityManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Identity identity() {
        return this.innerModel().identity();
    }

    public String accountId() {
        return this.innerModel().accountId();
    }

    public String accountDomain() {
        return this.innerModel().accountDomain();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public RemoteRenderingAccountInner innerModel() {
        return this.innerObject;
    }

    private MixedRealityManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String accountName;

    public RemoteRenderingAccountImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public RemoteRenderingAccount create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getRemoteRenderingAccounts()
                .createWithResponse(resourceGroupName, accountName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public RemoteRenderingAccount create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getRemoteRenderingAccounts()
                .createWithResponse(resourceGroupName, accountName, this.innerModel(), context)
                .getValue();
        return this;
    }

    RemoteRenderingAccountImpl(String name, MixedRealityManager serviceManager) {
        this.innerObject = new RemoteRenderingAccountInner();
        this.serviceManager = serviceManager;
        this.accountName = name;
    }

    public RemoteRenderingAccountImpl update() {
        return this;
    }

    public RemoteRenderingAccount apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getRemoteRenderingAccounts()
                .updateWithResponse(resourceGroupName, accountName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public RemoteRenderingAccount apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getRemoteRenderingAccounts()
                .updateWithResponse(resourceGroupName, accountName, this.innerModel(), context)
                .getValue();
        return this;
    }

    RemoteRenderingAccountImpl(RemoteRenderingAccountInner innerObject, MixedRealityManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.accountName = Utils.getValueFromIdByName(innerObject.id(), "remoteRenderingAccounts");
    }

    public RemoteRenderingAccount refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getRemoteRenderingAccounts()
                .getByResourceGroupWithResponse(resourceGroupName, accountName, Context.NONE)
                .getValue();
        return this;
    }

    public RemoteRenderingAccount refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getRemoteRenderingAccounts()
                .getByResourceGroupWithResponse(resourceGroupName, accountName, context)
                .getValue();
        return this;
    }

    public RemoteRenderingAccountImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public RemoteRenderingAccountImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public RemoteRenderingAccountImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public RemoteRenderingAccountImpl withIdentity(Identity identity) {
        this.innerModel().withIdentity(identity);
        return this;
    }
}
