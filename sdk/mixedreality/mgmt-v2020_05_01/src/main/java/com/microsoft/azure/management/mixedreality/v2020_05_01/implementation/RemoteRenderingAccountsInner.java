/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mixedreality.v2020_05_01.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.mixedreality.v2020_05_01.AccountKeyRegenerateRequest;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in RemoteRenderingAccounts.
 */
public class RemoteRenderingAccountsInner implements InnerSupportsGet<RemoteRenderingAccountInner>, InnerSupportsDelete<Void>, InnerSupportsListing<RemoteRenderingAccountInner> {
    /** The Retrofit service to perform REST calls. */
    private RemoteRenderingAccountsService service;
    /** The service client containing this operation class. */
    private MixedRealityClientImpl client;

    /**
     * Initializes an instance of RemoteRenderingAccountsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public RemoteRenderingAccountsInner(Retrofit retrofit, MixedRealityClientImpl client) {
        this.service = retrofit.create(RemoteRenderingAccountsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for RemoteRenderingAccounts to be
     * used by Retrofit to perform actually REST calls.
     */
    interface RemoteRenderingAccountsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mixedreality.v2020_05_01.RemoteRenderingAccounts list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.MixedReality/remoteRenderingAccounts")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mixedreality.v2020_05_01.RemoteRenderingAccounts listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/remoteRenderingAccounts")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mixedreality.v2020_05_01.RemoteRenderingAccounts delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/remoteRenderingAccounts/{accountName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mixedreality.v2020_05_01.RemoteRenderingAccounts getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/remoteRenderingAccounts/{accountName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mixedreality.v2020_05_01.RemoteRenderingAccounts update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/remoteRenderingAccounts/{accountName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Body RemoteRenderingAccountInner remoteRenderingAccount, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mixedreality.v2020_05_01.RemoteRenderingAccounts create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/remoteRenderingAccounts/{accountName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Body RemoteRenderingAccountInner remoteRenderingAccount, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mixedreality.v2020_05_01.RemoteRenderingAccounts listKeys" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/remoteRenderingAccounts/{accountName}/listKeys")
        Observable<Response<ResponseBody>> listKeys(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mixedreality.v2020_05_01.RemoteRenderingAccounts regenerateKeys" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/remoteRenderingAccounts/{accountName}/regenerateKeys")
        Observable<Response<ResponseBody>> regenerateKeys(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body AccountKeyRegenerateRequest regenerate, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mixedreality.v2020_05_01.RemoteRenderingAccounts listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mixedreality.v2020_05_01.RemoteRenderingAccounts listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * List Remote Rendering Accounts by Subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemoteRenderingAccountInner&gt; object if successful.
     */
    public PagedList<RemoteRenderingAccountInner> list() {
        ServiceResponse<Page<RemoteRenderingAccountInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<RemoteRenderingAccountInner>(response.body()) {
            @Override
            public Page<RemoteRenderingAccountInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List Remote Rendering Accounts by Subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemoteRenderingAccountInner>> listAsync(final ListOperationCallback<RemoteRenderingAccountInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List Remote Rendering Accounts by Subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemoteRenderingAccountInner&gt; object
     */
    public Observable<Page<RemoteRenderingAccountInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<RemoteRenderingAccountInner>>, Page<RemoteRenderingAccountInner>>() {
                @Override
                public Page<RemoteRenderingAccountInner> call(ServiceResponse<Page<RemoteRenderingAccountInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List Remote Rendering Accounts by Subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemoteRenderingAccountInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<RemoteRenderingAccountInner>>, Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>> call(ServiceResponse<Page<RemoteRenderingAccountInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List Remote Rendering Accounts by Subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemoteRenderingAccountInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2020-04-06-preview";
        return service.list(this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemoteRenderingAccountInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemoteRenderingAccountInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RemoteRenderingAccountInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RemoteRenderingAccountInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RemoteRenderingAccountInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List Resources by Resource Group.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemoteRenderingAccountInner&gt; object if successful.
     */
    public PagedList<RemoteRenderingAccountInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<RemoteRenderingAccountInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<RemoteRenderingAccountInner>(response.body()) {
            @Override
            public Page<RemoteRenderingAccountInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List Resources by Resource Group.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemoteRenderingAccountInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<RemoteRenderingAccountInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List Resources by Resource Group.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemoteRenderingAccountInner&gt; object
     */
    public Observable<Page<RemoteRenderingAccountInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<RemoteRenderingAccountInner>>, Page<RemoteRenderingAccountInner>>() {
                @Override
                public Page<RemoteRenderingAccountInner> call(ServiceResponse<Page<RemoteRenderingAccountInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List Resources by Resource Group.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemoteRenderingAccountInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<RemoteRenderingAccountInner>>, Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>> call(ServiceResponse<Page<RemoteRenderingAccountInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List Resources by Resource Group.
     *
    ServiceResponse<PageImpl<RemoteRenderingAccountInner>> * @param resourceGroupName Name of an Azure resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemoteRenderingAccountInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final String apiVersion = "2020-04-06-preview";
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemoteRenderingAccountInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemoteRenderingAccountInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RemoteRenderingAccountInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RemoteRenderingAccountInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RemoteRenderingAccountInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String accountName) {
        deleteWithServiceResponseAsync(resourceGroupName, accountName).toBlocking().single().body();
    }

    /**
     * Delete a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String accountName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, accountName), serviceCallback);
    }

    /**
     * Delete a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String accountName) {
        return deleteWithServiceResponseAsync(resourceGroupName, accountName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String accountName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        final String apiVersion = "2020-04-06-preview";
        return service.delete(this.client.subscriptionId(), resourceGroupName, accountName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Retrieve a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RemoteRenderingAccountInner object if successful.
     */
    public RemoteRenderingAccountInner getByResourceGroup(String resourceGroupName, String accountName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, accountName).toBlocking().single().body();
    }

    /**
     * Retrieve a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RemoteRenderingAccountInner> getByResourceGroupAsync(String resourceGroupName, String accountName, final ServiceCallback<RemoteRenderingAccountInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, accountName), serviceCallback);
    }

    /**
     * Retrieve a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemoteRenderingAccountInner object
     */
    public Observable<RemoteRenderingAccountInner> getByResourceGroupAsync(String resourceGroupName, String accountName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, accountName).map(new Func1<ServiceResponse<RemoteRenderingAccountInner>, RemoteRenderingAccountInner>() {
            @Override
            public RemoteRenderingAccountInner call(ServiceResponse<RemoteRenderingAccountInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemoteRenderingAccountInner object
     */
    public Observable<ServiceResponse<RemoteRenderingAccountInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String accountName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        final String apiVersion = "2020-04-06-preview";
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, accountName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RemoteRenderingAccountInner>>>() {
                @Override
                public Observable<ServiceResponse<RemoteRenderingAccountInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RemoteRenderingAccountInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RemoteRenderingAccountInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RemoteRenderingAccountInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RemoteRenderingAccountInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updating a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param remoteRenderingAccount Remote Rendering Account parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RemoteRenderingAccountInner object if successful.
     */
    public RemoteRenderingAccountInner update(String resourceGroupName, String accountName, RemoteRenderingAccountInner remoteRenderingAccount) {
        return updateWithServiceResponseAsync(resourceGroupName, accountName, remoteRenderingAccount).toBlocking().single().body();
    }

    /**
     * Updating a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param remoteRenderingAccount Remote Rendering Account parameter.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RemoteRenderingAccountInner> updateAsync(String resourceGroupName, String accountName, RemoteRenderingAccountInner remoteRenderingAccount, final ServiceCallback<RemoteRenderingAccountInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, accountName, remoteRenderingAccount), serviceCallback);
    }

    /**
     * Updating a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param remoteRenderingAccount Remote Rendering Account parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemoteRenderingAccountInner object
     */
    public Observable<RemoteRenderingAccountInner> updateAsync(String resourceGroupName, String accountName, RemoteRenderingAccountInner remoteRenderingAccount) {
        return updateWithServiceResponseAsync(resourceGroupName, accountName, remoteRenderingAccount).map(new Func1<ServiceResponse<RemoteRenderingAccountInner>, RemoteRenderingAccountInner>() {
            @Override
            public RemoteRenderingAccountInner call(ServiceResponse<RemoteRenderingAccountInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updating a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param remoteRenderingAccount Remote Rendering Account parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemoteRenderingAccountInner object
     */
    public Observable<ServiceResponse<RemoteRenderingAccountInner>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, RemoteRenderingAccountInner remoteRenderingAccount) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (remoteRenderingAccount == null) {
            throw new IllegalArgumentException("Parameter remoteRenderingAccount is required and cannot be null.");
        }
        Validator.validate(remoteRenderingAccount);
        final String apiVersion = "2020-04-06-preview";
        return service.update(this.client.subscriptionId(), resourceGroupName, accountName, remoteRenderingAccount, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RemoteRenderingAccountInner>>>() {
                @Override
                public Observable<ServiceResponse<RemoteRenderingAccountInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RemoteRenderingAccountInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RemoteRenderingAccountInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RemoteRenderingAccountInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RemoteRenderingAccountInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creating or Updating a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param remoteRenderingAccount Remote Rendering Account parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RemoteRenderingAccountInner object if successful.
     */
    public RemoteRenderingAccountInner create(String resourceGroupName, String accountName, RemoteRenderingAccountInner remoteRenderingAccount) {
        return createWithServiceResponseAsync(resourceGroupName, accountName, remoteRenderingAccount).toBlocking().single().body();
    }

    /**
     * Creating or Updating a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param remoteRenderingAccount Remote Rendering Account parameter.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RemoteRenderingAccountInner> createAsync(String resourceGroupName, String accountName, RemoteRenderingAccountInner remoteRenderingAccount, final ServiceCallback<RemoteRenderingAccountInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, accountName, remoteRenderingAccount), serviceCallback);
    }

    /**
     * Creating or Updating a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param remoteRenderingAccount Remote Rendering Account parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemoteRenderingAccountInner object
     */
    public Observable<RemoteRenderingAccountInner> createAsync(String resourceGroupName, String accountName, RemoteRenderingAccountInner remoteRenderingAccount) {
        return createWithServiceResponseAsync(resourceGroupName, accountName, remoteRenderingAccount).map(new Func1<ServiceResponse<RemoteRenderingAccountInner>, RemoteRenderingAccountInner>() {
            @Override
            public RemoteRenderingAccountInner call(ServiceResponse<RemoteRenderingAccountInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creating or Updating a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param remoteRenderingAccount Remote Rendering Account parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemoteRenderingAccountInner object
     */
    public Observable<ServiceResponse<RemoteRenderingAccountInner>> createWithServiceResponseAsync(String resourceGroupName, String accountName, RemoteRenderingAccountInner remoteRenderingAccount) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (remoteRenderingAccount == null) {
            throw new IllegalArgumentException("Parameter remoteRenderingAccount is required and cannot be null.");
        }
        Validator.validate(remoteRenderingAccount);
        final String apiVersion = "2020-04-06-preview";
        return service.create(this.client.subscriptionId(), resourceGroupName, accountName, remoteRenderingAccount, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RemoteRenderingAccountInner>>>() {
                @Override
                public Observable<ServiceResponse<RemoteRenderingAccountInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RemoteRenderingAccountInner> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RemoteRenderingAccountInner> createDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RemoteRenderingAccountInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RemoteRenderingAccountInner>() { }.getType())
                .register(201, new TypeToken<RemoteRenderingAccountInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List Both of the 2 Keys of a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccountKeysInner object if successful.
     */
    public AccountKeysInner listKeys(String resourceGroupName, String accountName) {
        return listKeysWithServiceResponseAsync(resourceGroupName, accountName).toBlocking().single().body();
    }

    /**
     * List Both of the 2 Keys of a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AccountKeysInner> listKeysAsync(String resourceGroupName, String accountName, final ServiceCallback<AccountKeysInner> serviceCallback) {
        return ServiceFuture.fromResponse(listKeysWithServiceResponseAsync(resourceGroupName, accountName), serviceCallback);
    }

    /**
     * List Both of the 2 Keys of a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountKeysInner object
     */
    public Observable<AccountKeysInner> listKeysAsync(String resourceGroupName, String accountName) {
        return listKeysWithServiceResponseAsync(resourceGroupName, accountName).map(new Func1<ServiceResponse<AccountKeysInner>, AccountKeysInner>() {
            @Override
            public AccountKeysInner call(ServiceResponse<AccountKeysInner> response) {
                return response.body();
            }
        });
    }

    /**
     * List Both of the 2 Keys of a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountKeysInner object
     */
    public Observable<ServiceResponse<AccountKeysInner>> listKeysWithServiceResponseAsync(String resourceGroupName, String accountName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        final String apiVersion = "2020-04-06-preview";
        return service.listKeys(this.client.subscriptionId(), resourceGroupName, accountName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AccountKeysInner>>>() {
                @Override
                public Observable<ServiceResponse<AccountKeysInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AccountKeysInner> clientResponse = listKeysDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AccountKeysInner> listKeysDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AccountKeysInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AccountKeysInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Regenerate specified Key of a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccountKeysInner object if successful.
     */
    public AccountKeysInner regenerateKeys(String resourceGroupName, String accountName) {
        return regenerateKeysWithServiceResponseAsync(resourceGroupName, accountName).toBlocking().single().body();
    }

    /**
     * Regenerate specified Key of a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AccountKeysInner> regenerateKeysAsync(String resourceGroupName, String accountName, final ServiceCallback<AccountKeysInner> serviceCallback) {
        return ServiceFuture.fromResponse(regenerateKeysWithServiceResponseAsync(resourceGroupName, accountName), serviceCallback);
    }

    /**
     * Regenerate specified Key of a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountKeysInner object
     */
    public Observable<AccountKeysInner> regenerateKeysAsync(String resourceGroupName, String accountName) {
        return regenerateKeysWithServiceResponseAsync(resourceGroupName, accountName).map(new Func1<ServiceResponse<AccountKeysInner>, AccountKeysInner>() {
            @Override
            public AccountKeysInner call(ServiceResponse<AccountKeysInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Regenerate specified Key of a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountKeysInner object
     */
    public Observable<ServiceResponse<AccountKeysInner>> regenerateKeysWithServiceResponseAsync(String resourceGroupName, String accountName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        final String apiVersion = "2020-04-06-preview";
        final Integer serial = null;
        AccountKeyRegenerateRequest regenerate = new AccountKeyRegenerateRequest();
        regenerate.withSerial(null);
        return service.regenerateKeys(this.client.subscriptionId(), resourceGroupName, accountName, apiVersion, this.client.acceptLanguage(), regenerate, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AccountKeysInner>>>() {
                @Override
                public Observable<ServiceResponse<AccountKeysInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AccountKeysInner> clientResponse = regenerateKeysDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Regenerate specified Key of a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param serial serial of key to be regenerated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccountKeysInner object if successful.
     */
    public AccountKeysInner regenerateKeys(String resourceGroupName, String accountName, Integer serial) {
        return regenerateKeysWithServiceResponseAsync(resourceGroupName, accountName, serial).toBlocking().single().body();
    }

    /**
     * Regenerate specified Key of a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param serial serial of key to be regenerated
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AccountKeysInner> regenerateKeysAsync(String resourceGroupName, String accountName, Integer serial, final ServiceCallback<AccountKeysInner> serviceCallback) {
        return ServiceFuture.fromResponse(regenerateKeysWithServiceResponseAsync(resourceGroupName, accountName, serial), serviceCallback);
    }

    /**
     * Regenerate specified Key of a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param serial serial of key to be regenerated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountKeysInner object
     */
    public Observable<AccountKeysInner> regenerateKeysAsync(String resourceGroupName, String accountName, Integer serial) {
        return regenerateKeysWithServiceResponseAsync(resourceGroupName, accountName, serial).map(new Func1<ServiceResponse<AccountKeysInner>, AccountKeysInner>() {
            @Override
            public AccountKeysInner call(ServiceResponse<AccountKeysInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Regenerate specified Key of a Remote Rendering Account.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param accountName Name of an Mixed Reality Account.
     * @param serial serial of key to be regenerated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountKeysInner object
     */
    public Observable<ServiceResponse<AccountKeysInner>> regenerateKeysWithServiceResponseAsync(String resourceGroupName, String accountName, Integer serial) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        final String apiVersion = "2020-04-06-preview";
        AccountKeyRegenerateRequest regenerate = new AccountKeyRegenerateRequest();
        regenerate.withSerial(serial);
        return service.regenerateKeys(this.client.subscriptionId(), resourceGroupName, accountName, apiVersion, this.client.acceptLanguage(), regenerate, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AccountKeysInner>>>() {
                @Override
                public Observable<ServiceResponse<AccountKeysInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AccountKeysInner> clientResponse = regenerateKeysDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AccountKeysInner> regenerateKeysDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AccountKeysInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AccountKeysInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List Remote Rendering Accounts by Subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemoteRenderingAccountInner&gt; object if successful.
     */
    public PagedList<RemoteRenderingAccountInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<RemoteRenderingAccountInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RemoteRenderingAccountInner>(response.body()) {
            @Override
            public Page<RemoteRenderingAccountInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List Remote Rendering Accounts by Subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemoteRenderingAccountInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<RemoteRenderingAccountInner>> serviceFuture, final ListOperationCallback<RemoteRenderingAccountInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List Remote Rendering Accounts by Subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemoteRenderingAccountInner&gt; object
     */
    public Observable<Page<RemoteRenderingAccountInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RemoteRenderingAccountInner>>, Page<RemoteRenderingAccountInner>>() {
                @Override
                public Page<RemoteRenderingAccountInner> call(ServiceResponse<Page<RemoteRenderingAccountInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List Remote Rendering Accounts by Subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemoteRenderingAccountInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RemoteRenderingAccountInner>>, Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>> call(ServiceResponse<Page<RemoteRenderingAccountInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List Remote Rendering Accounts by Subscription.
     *
    ServiceResponse<PageImpl<RemoteRenderingAccountInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemoteRenderingAccountInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemoteRenderingAccountInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemoteRenderingAccountInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RemoteRenderingAccountInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RemoteRenderingAccountInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RemoteRenderingAccountInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List Resources by Resource Group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemoteRenderingAccountInner&gt; object if successful.
     */
    public PagedList<RemoteRenderingAccountInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<RemoteRenderingAccountInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RemoteRenderingAccountInner>(response.body()) {
            @Override
            public Page<RemoteRenderingAccountInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List Resources by Resource Group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemoteRenderingAccountInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<RemoteRenderingAccountInner>> serviceFuture, final ListOperationCallback<RemoteRenderingAccountInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List Resources by Resource Group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemoteRenderingAccountInner&gt; object
     */
    public Observable<Page<RemoteRenderingAccountInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RemoteRenderingAccountInner>>, Page<RemoteRenderingAccountInner>>() {
                @Override
                public Page<RemoteRenderingAccountInner> call(ServiceResponse<Page<RemoteRenderingAccountInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List Resources by Resource Group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemoteRenderingAccountInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RemoteRenderingAccountInner>>, Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>> call(ServiceResponse<Page<RemoteRenderingAccountInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List Resources by Resource Group.
     *
    ServiceResponse<PageImpl<RemoteRenderingAccountInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemoteRenderingAccountInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemoteRenderingAccountInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemoteRenderingAccountInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemoteRenderingAccountInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RemoteRenderingAccountInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RemoteRenderingAccountInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RemoteRenderingAccountInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
