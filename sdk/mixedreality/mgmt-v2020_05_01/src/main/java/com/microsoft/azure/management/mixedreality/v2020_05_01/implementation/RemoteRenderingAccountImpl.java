/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mixedreality.v2020_05_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.mixedreality.v2020_05_01.RemoteRenderingAccount;
import rx.Observable;
import com.microsoft.azure.management.mixedreality.v2020_05_01.RemoteRenderingAccountIdentity;

class RemoteRenderingAccountImpl extends GroupableResourceCoreImpl<RemoteRenderingAccount, RemoteRenderingAccountInner, RemoteRenderingAccountImpl, MixedRealityManager> implements RemoteRenderingAccount, RemoteRenderingAccount.Definition, RemoteRenderingAccount.Update {
    RemoteRenderingAccountImpl(String name, RemoteRenderingAccountInner inner, MixedRealityManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<RemoteRenderingAccount> createResourceAsync() {
        RemoteRenderingAccountsInner client = this.manager().inner().remoteRenderingAccounts();
        return client.createAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<RemoteRenderingAccount> updateResourceAsync() {
        RemoteRenderingAccountsInner client = this.manager().inner().remoteRenderingAccounts();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<RemoteRenderingAccountInner> getInnerAsync() {
        RemoteRenderingAccountsInner client = this.manager().inner().remoteRenderingAccounts();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String accountDomain() {
        return this.inner().accountDomain();
    }

    @Override
    public String accountId() {
        return this.inner().accountId();
    }

    @Override
    public RemoteRenderingAccountIdentity identity() {
        return this.inner().identity();
    }

    @Override
    public RemoteRenderingAccountImpl withIdentity(RemoteRenderingAccountIdentity identity) {
        this.inner().withIdentity(identity);
        return this;
    }

}
