// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.mixedreality.remoterendering.implementation.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** The SessionProperties model. */
@Fluent
public final class SessionProperties {
    /*
     * The id of the session supplied when the conversion was created.
     */
    @JsonProperty(value = "id", required = true)
    private String id;

    /*
     * The TCP port at which the Azure Remote Rendering Inspector tool is
     * hosted.
     */
    @JsonProperty(value = "arrInspectorPort")
    private Integer arrInspectorPort;

    /*
     * The TCP port used for the handshake.
     */
    @JsonProperty(value = "handshakePort")
    private Integer handshakePort;

    /*
     * Amount of time in minutes the session is or has been in Ready state.
     * Time is rounded down to a full minute.
     */
    @JsonProperty(value = "elapsedTimeMinutes")
    private Integer elapsedTimeMinutes;

    /*
     * The hostname under which the rendering session is reachable.
     */
    @JsonProperty(value = "hostname")
    private String hostname;

    /*
     * The time in minutes the session will run after reaching the 'Ready'
     * state.
     */
    @JsonProperty(value = "maxLeaseTimeMinutes")
    private Integer maxLeaseTimeMinutes;

    /*
     * Size of the server used for the rendering session. Remote Rendering with
     * Standard size server has a maximum scene size of 20 million polygons.
     * Remote Rendering with Premium size does not enforce a hard maximum, but
     * performance may be degraded if your content exceeds the rendering
     * capabilities of the service.
     */
    @JsonProperty(value = "size", required = true)
    private SessionSize size;

    /*
     * The status of the rendering session. Once the status reached the 'Ready'
     * state it can be connected to. The terminal state is 'Stopped'.
     */
    @JsonProperty(value = "status", required = true)
    private SessionStatus status;

    /*
     * The computational power of the rendering session GPU measured in
     * Teraflops.
     */
    @JsonProperty(value = "teraflops")
    private Float teraflops;

    /*
     * The error object containing details about the rendering session startup
     * failure.
     */
    @JsonProperty(value = "error")
    private Error error;

    /*
     * The time when the rendering session was created. Date and time in ISO
     * 8601 format.
     */
    @JsonProperty(value = "creationTime")
    private OffsetDateTime creationTime;

    /**
     * Creates an instance of SessionProperties class.
     *
     * @param id the id value to set.
     * @param size the size value to set.
     * @param status the status value to set.
     */
    @JsonCreator
    public SessionProperties(
            @JsonProperty(value = "id", required = true) String id,
            @JsonProperty(value = "size", required = true) SessionSize size,
            @JsonProperty(value = "status", required = true) SessionStatus status) {
        this.id = id;
        this.size = size;
        this.status = status;
    }

    /**
     * Get the id property: The id of the session supplied when the conversion was created.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Get the arrInspectorPort property: The TCP port at which the Azure Remote Rendering Inspector tool is hosted.
     *
     * @return the arrInspectorPort value.
     */
    public Integer getArrInspectorPort() {
        return this.arrInspectorPort;
    }

    /**
     * Set the arrInspectorPort property: The TCP port at which the Azure Remote Rendering Inspector tool is hosted.
     *
     * @param arrInspectorPort the arrInspectorPort value to set.
     * @return the SessionProperties object itself.
     */
    public SessionProperties setArrInspectorPort(Integer arrInspectorPort) {
        this.arrInspectorPort = arrInspectorPort;
        return this;
    }

    /**
     * Get the handshakePort property: The TCP port used for the handshake.
     *
     * @return the handshakePort value.
     */
    public Integer getHandshakePort() {
        return this.handshakePort;
    }

    /**
     * Set the handshakePort property: The TCP port used for the handshake.
     *
     * @param handshakePort the handshakePort value to set.
     * @return the SessionProperties object itself.
     */
    public SessionProperties setHandshakePort(Integer handshakePort) {
        this.handshakePort = handshakePort;
        return this;
    }

    /**
     * Get the elapsedTimeMinutes property: Amount of time in minutes the session is or has been in Ready state. Time is
     * rounded down to a full minute.
     *
     * @return the elapsedTimeMinutes value.
     */
    public Integer getElapsedTimeMinutes() {
        return this.elapsedTimeMinutes;
    }

    /**
     * Set the elapsedTimeMinutes property: Amount of time in minutes the session is or has been in Ready state. Time is
     * rounded down to a full minute.
     *
     * @param elapsedTimeMinutes the elapsedTimeMinutes value to set.
     * @return the SessionProperties object itself.
     */
    public SessionProperties setElapsedTimeMinutes(Integer elapsedTimeMinutes) {
        this.elapsedTimeMinutes = elapsedTimeMinutes;
        return this;
    }

    /**
     * Get the hostname property: The hostname under which the rendering session is reachable.
     *
     * @return the hostname value.
     */
    public String getHostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: The hostname under which the rendering session is reachable.
     *
     * @param hostname the hostname value to set.
     * @return the SessionProperties object itself.
     */
    public SessionProperties setHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the maxLeaseTimeMinutes property: The time in minutes the session will run after reaching the 'Ready' state.
     *
     * @return the maxLeaseTimeMinutes value.
     */
    public Integer getMaxLeaseTimeMinutes() {
        return this.maxLeaseTimeMinutes;
    }

    /**
     * Set the maxLeaseTimeMinutes property: The time in minutes the session will run after reaching the 'Ready' state.
     *
     * @param maxLeaseTimeMinutes the maxLeaseTimeMinutes value to set.
     * @return the SessionProperties object itself.
     */
    public SessionProperties setMaxLeaseTimeMinutes(Integer maxLeaseTimeMinutes) {
        this.maxLeaseTimeMinutes = maxLeaseTimeMinutes;
        return this;
    }

    /**
     * Get the size property: Size of the server used for the rendering session. Remote Rendering with Standard size
     * server has a maximum scene size of 20 million polygons. Remote Rendering with Premium size does not enforce a
     * hard maximum, but performance may be degraded if your content exceeds the rendering capabilities of the service.
     *
     * @return the size value.
     */
    public SessionSize getSize() {
        return this.size;
    }

    /**
     * Get the status property: The status of the rendering session. Once the status reached the 'Ready' state it can be
     * connected to. The terminal state is 'Stopped'.
     *
     * @return the status value.
     */
    public SessionStatus getStatus() {
        return this.status;
    }

    /**
     * Get the teraflops property: The computational power of the rendering session GPU measured in Teraflops.
     *
     * @return the teraflops value.
     */
    public Float getTeraflops() {
        return this.teraflops;
    }

    /**
     * Set the teraflops property: The computational power of the rendering session GPU measured in Teraflops.
     *
     * @param teraflops the teraflops value to set.
     * @return the SessionProperties object itself.
     */
    public SessionProperties setTeraflops(Float teraflops) {
        this.teraflops = teraflops;
        return this;
    }

    /**
     * Get the error property: The error object containing details about the rendering session startup failure.
     *
     * @return the error value.
     */
    public Error getError() {
        return this.error;
    }

    /**
     * Set the error property: The error object containing details about the rendering session startup failure.
     *
     * @param error the error value to set.
     * @return the SessionProperties object itself.
     */
    public SessionProperties setError(Error error) {
        this.error = error;
        return this;
    }

    /**
     * Get the creationTime property: The time when the rendering session was created. Date and time in ISO 8601 format.
     *
     * @return the creationTime value.
     */
    public OffsetDateTime getCreationTime() {
        return this.creationTime;
    }

    /**
     * Set the creationTime property: The time when the rendering session was created. Date and time in ISO 8601 format.
     *
     * @param creationTime the creationTime value to set.
     * @return the SessionProperties object itself.
     */
    public SessionProperties setCreationTime(OffsetDateTime creationTime) {
        this.creationTime = creationTime;
        return this;
    }
}
