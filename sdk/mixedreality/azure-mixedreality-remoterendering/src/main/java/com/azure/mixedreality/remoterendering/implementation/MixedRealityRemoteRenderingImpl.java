// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.mixedreality.remoterendering.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.mixedreality.remoterendering.implementation.models.Conversion;
import com.azure.mixedreality.remoterendering.implementation.models.CreateConversionResponse;
import com.azure.mixedreality.remoterendering.implementation.models.CreateConversionSettings;
import com.azure.mixedreality.remoterendering.implementation.models.CreateSessionResponse;
import com.azure.mixedreality.remoterendering.implementation.models.CreateSessionSettings;
import com.azure.mixedreality.remoterendering.implementation.models.ErrorResponseException;
import com.azure.mixedreality.remoterendering.implementation.models.GetConversionResponse;
import com.azure.mixedreality.remoterendering.implementation.models.ListConversionsNextResponse;
import com.azure.mixedreality.remoterendering.implementation.models.ListConversionsResponse;
import com.azure.mixedreality.remoterendering.implementation.models.SessionProperties;
import com.azure.mixedreality.remoterendering.implementation.models.SessionsList;
import com.azure.mixedreality.remoterendering.implementation.models.StopSessionResponse;
import com.azure.mixedreality.remoterendering.implementation.models.UpdateSessionSettings;
import java.util.UUID;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the MixedRealityRemoteRendering type. */
public final class MixedRealityRemoteRenderingImpl {
    /** The proxy service used to perform REST calls. */
    private final MixedRealityRemoteRenderingService service;

    /** server parameter. */
    private final String host;

    /**
     * Gets server parameter.
     *
     * @return the host value.
     */
    public String getHost() {
        return this.host;
    }

    /** Api Version. */
    private final String apiVersion;

    /**
     * Gets Api Version.
     *
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of MixedRealityRemoteRendering client.
     *
     * @param host server parameter.
     */
    MixedRealityRemoteRenderingImpl(String host) {
        this(
                new HttpPipelineBuilder()
                        .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
                        .build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                host);
    }

    /**
     * Initializes an instance of MixedRealityRemoteRendering client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param host server parameter.
     */
    MixedRealityRemoteRenderingImpl(HttpPipeline httpPipeline, String host) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), host);
    }

    /**
     * Initializes an instance of MixedRealityRemoteRendering client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param host server parameter.
     */
    MixedRealityRemoteRenderingImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String host) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.host = host;
        this.apiVersion = "2021-01-01-preview";
        this.service =
                RestProxy.create(
                        MixedRealityRemoteRenderingService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for MixedRealityRemoteRendering to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MixedRealityRemoteRe")
    private interface MixedRealityRemoteRenderingService {
        @Put("/accounts/{account_id}/conversions/{conversion_id}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<CreateConversionResponse> createConversion(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("account_id") UUID accountId,
                @PathParam("conversion_id") String conversionId,
                @BodyParam("application/json") CreateConversionSettings body,
                Context context);

        @Get("/accounts/{account_id}/conversions/{conversion_id}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<GetConversionResponse> getConversion(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("account_id") UUID accountId,
                @PathParam("conversion_id") String conversionId,
                Context context);

        @Get("/accounts/{account_id}/conversions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<ListConversionsResponse> listConversions(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("account_id") UUID accountId,
                Context context);

        @Put("/accounts/{account_id}/sessions/{session_id}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<CreateSessionResponse> createSession(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("account_id") UUID accountId,
                @PathParam("session_id") String sessionId,
                @BodyParam("application/json") CreateSessionSettings body,
                Context context);

        @Get("/accounts/{account_id}/sessions/{session_id}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<SessionProperties>> getSession(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("account_id") UUID accountId,
                @PathParam("session_id") String sessionId,
                Context context);

        @Patch("/accounts/{account_id}/sessions/{session_id}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<SessionProperties>> updateSession(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("account_id") UUID accountId,
                @PathParam("session_id") String sessionId,
                @BodyParam("application/json") UpdateSessionSettings body,
                Context context);

        @Post("/accounts/{account_id}/sessions/{session_id}/:stop")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<StopSessionResponse> stopSession(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("account_id") UUID accountId,
                @PathParam("session_id") String sessionId,
                Context context);

        @Get("/accounts/{account_id}/sessions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<SessionsList>> listSessions(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("account_id") UUID accountId,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<ListConversionsNextResponse> listConversionsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("$host") String host,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<SessionsList>> listSessionsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("$host") String host,
                Context context);
    }

    /**
     * Creates a conversion using an asset stored in an Azure Blob Storage account. If the remote rendering account has
     * been linked with the storage account no Shared Access Signatures (storageContainerReadListSas,
     * storageContainerWriteSas) for storage access need to be provided. Documentation how to link your Azure Remote
     * Rendering account with the Azure Blob Storage account can be found in the
     * [documentation](https://docs.microsoft.com/azure/remote-rendering/how-tos/create-an-account#link-storage-accounts).
     *
     * <p>All files in the input container starting with the blobPrefix will be retrieved to perform the conversion. To
     * cut down on conversion times only necessary files should be available under the blobPrefix.
     *
     * @param accountId the Azure Remote Rendering account id.
     * @param conversionId An ID uniquely identifying the conversion for the given account. The ID is case sensitive,
     *     can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain
     *     more than 256 characters.
     * @param body Request to start a conversion.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CreateConversionResponse> createConversionWithResponseAsync(
            UUID accountId, String conversionId, CreateConversionSettings body, Context context) {
        return service.createConversion(this.getHost(), this.getApiVersion(), accountId, conversionId, body, context);
    }

    /**
     * Gets the status of a previously created asset conversion.
     *
     * @param accountId the Azure Remote Rendering account id.
     * @param conversionId An ID uniquely identifying the conversion for the given account. The ID is case sensitive,
     *     can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain
     *     more than 256 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of a previously created asset conversion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GetConversionResponse> getConversionWithResponseAsync(
            UUID accountId, String conversionId, Context context) {
        return service.getConversion(this.getHost(), this.getApiVersion(), accountId, conversionId, context);
    }

    /**
     * Gets a list of all conversions. Returns a batch of conversions- if more conversions are available the @nextLink
     * property contains the a URL where the next batch of conversions can be requested. This URL will need the same
     * authentication as all calls to the Azure Remote Rendering API.
     *
     * @param accountId the Azure Remote Rendering account id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all conversions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Conversion>> listConversionsSinglePageAsync(UUID accountId, Context context) {
        return service.listConversions(this.getHost(), this.getApiVersion(), accountId, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getConversions(),
                                        res.getValue().getNextLink(),
                                        res.getDeserializedHeaders()));
    }

    /**
     * Creates a new rendering session.
     *
     * @param accountId the Azure Remote Rendering account id.
     * @param sessionId An ID uniquely identifying the rendering session for the given account. The ID is case
     *     sensitive, can contain any combination of alphanumeric characters including hyphens and underscores, and
     *     cannot contain more than 256 characters.
     * @param body Settings of the session to be created.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CreateSessionResponse> createSessionWithResponseAsync(
            UUID accountId, String sessionId, CreateSessionSettings body, Context context) {
        return service.createSession(this.getHost(), this.getApiVersion(), accountId, sessionId, body, context);
    }

    /**
     * Gets properties of a particular rendering session.
     *
     * @param accountId the Azure Remote Rendering account id.
     * @param sessionId An ID uniquely identifying the rendering session for the given account. The ID is case
     *     sensitive, can contain any combination of alphanumeric characters including hyphens and underscores, and
     *     cannot contain more than 256 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a particular rendering session.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SessionProperties>> getSessionWithResponseAsync(
            UUID accountId, String sessionId, Context context) {
        return service.getSession(this.getHost(), this.getApiVersion(), accountId, sessionId, context);
    }

    /**
     * Updates a particular rendering session.
     *
     * @param accountId the Azure Remote Rendering account id.
     * @param sessionId An ID uniquely identifying the rendering session for the given account. The ID is case
     *     sensitive, can contain any combination of alphanumeric characters including hyphens and underscores, and
     *     cannot contain more than 256 characters.
     * @param body Settings of the session to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SessionProperties>> updateSessionWithResponseAsync(
            UUID accountId, String sessionId, UpdateSessionSettings body, Context context) {
        return service.updateSession(this.getHost(), this.getApiVersion(), accountId, sessionId, body, context);
    }

    /**
     * Stops a particular rendering session.
     *
     * @param accountId the Azure Remote Rendering account id.
     * @param sessionId An ID uniquely identifying the rendering session for the given account. The ID is case
     *     sensitive, can contain any combination of alphanumeric characters including hyphens and underscores, and
     *     cannot contain more than 256 characters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StopSessionResponse> stopSessionWithResponseAsync(UUID accountId, String sessionId, Context context) {
        return service.stopSession(this.getHost(), this.getApiVersion(), accountId, sessionId, context);
    }

    /**
     * Get a list of all rendering sessions.
     *
     * @param accountId the Azure Remote Rendering account id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all rendering sessions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SessionProperties>> listSessionsSinglePageAsync(UUID accountId, Context context) {
        return service.listSessions(this.getHost(), this.getApiVersion(), accountId, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getSessions(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Conversion>> listConversionsNextSinglePageAsync(String nextLink, Context context) {
        return service.listConversionsNext(nextLink, this.getHost(), context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getConversions(),
                                        res.getValue().getNextLink(),
                                        res.getDeserializedHeaders()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a list sessions request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SessionProperties>> listSessionsNextSinglePageAsync(String nextLink, Context context) {
        return service.listSessionsNext(nextLink, this.getHost(), context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getSessions(),
                                        res.getValue().getNextLink(),
                                        null));
    }
}
