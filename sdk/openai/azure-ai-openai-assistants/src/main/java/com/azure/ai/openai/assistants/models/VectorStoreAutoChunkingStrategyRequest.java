// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The default strategy. This strategy currently uses a max_chunk_size_tokens of 800 and chunk_overlap_tokens of 400.
 */
@Immutable
public final class VectorStoreAutoChunkingStrategyRequest extends VectorStoreChunkingStrategyRequest {

    /**
     * Creates an instance of VectorStoreAutoChunkingStrategyRequest class.
     */
    @Generated
    public VectorStoreAutoChunkingStrategyRequest() {
        this.type = VectorStoreChunkingStrategyRequestType.AUTO;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        toJsonShared(jsonWriter);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VectorStoreAutoChunkingStrategyRequest from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of VectorStoreAutoChunkingStrategyRequest if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VectorStoreAutoChunkingStrategyRequest.
     */
    @Generated
    public static VectorStoreAutoChunkingStrategyRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VectorStoreAutoChunkingStrategyRequest deserializedVectorStoreAutoChunkingStrategyRequest
                = new VectorStoreAutoChunkingStrategyRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if (VectorStoreChunkingStrategyRequest.fromJsonShared(reader, fieldName,
                    deserializedVectorStoreAutoChunkingStrategyRequest)) {
                    continue;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedVectorStoreAutoChunkingStrategyRequest;
        });
    }
}
