// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The request details to use when creating a new assistant.
 */
@Fluent
public final class AssistantCreationOptions implements JsonSerializable<AssistantCreationOptions> {

    /*
     * The ID of the model to use.
     */
    @Generated
    private final String model;

    /*
     * The name of the new assistant.
     */
    @Generated
    private String name;

    /*
     * The description of the new assistant.
     */
    @Generated
    private String description;

    /*
     * The system instructions for the new assistant to use.
     */
    @Generated
    private String instructions;

    /*
     * The collection of tools to enable for the new assistant.
     */
    @Generated
    private List<ToolDefinition> tools;

    /*
     * A list of previously uploaded file IDs to attach to the assistant.
     */
    @Generated
    private List<String> fileIds;

    /*
     * A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information
     * about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512
     * characters in length.
     */
    @Generated
    private Map<String, String> metadata;

    /**
     * Creates an instance of AssistantCreationOptions class.
     *
     * @param model the model value to set.
     */
    @Generated
    public AssistantCreationOptions(String model) {
        this.model = model;
    }

    /**
     * Get the model property: The ID of the model to use.
     *
     * @return the model value.
     */
    @Generated
    public String getModel() {
        return this.model;
    }

    /**
     * Get the name property: The name of the new assistant.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The name of the new assistant.
     *
     * @param name the name value to set.
     * @return the AssistantCreationOptions object itself.
     */
    @Generated
    public AssistantCreationOptions setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the description property: The description of the new assistant.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The description of the new assistant.
     *
     * @param description the description value to set.
     * @return the AssistantCreationOptions object itself.
     */
    @Generated
    public AssistantCreationOptions setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the instructions property: The system instructions for the new assistant to use.
     *
     * @return the instructions value.
     */
    @Generated
    public String getInstructions() {
        return this.instructions;
    }

    /**
     * Set the instructions property: The system instructions for the new assistant to use.
     *
     * @param instructions the instructions value to set.
     * @return the AssistantCreationOptions object itself.
     */
    @Generated
    public AssistantCreationOptions setInstructions(String instructions) {
        this.instructions = instructions;
        return this;
    }

    /**
     * Get the tools property: The collection of tools to enable for the new assistant.
     *
     * @return the tools value.
     */
    @Generated
    public List<ToolDefinition> getTools() {
        return this.tools;
    }

    /**
     * Set the tools property: The collection of tools to enable for the new assistant.
     *
     * @param tools the tools value to set.
     * @return the AssistantCreationOptions object itself.
     */
    @Generated
    public AssistantCreationOptions setTools(List<ToolDefinition> tools) {
        this.tools = tools;
        return this;
    }

    /**
     * Get the fileIds property: A list of previously uploaded file IDs to attach to the assistant.
     *
     * @return the fileIds value.
     */
    @Generated
    public List<String> getFileIds() {
        return this.fileIds;
    }

    /**
     * Set the fileIds property: A list of previously uploaded file IDs to attach to the assistant.
     *
     * @param fileIds the fileIds value to set.
     * @return the AssistantCreationOptions object itself.
     */
    @Generated
    public AssistantCreationOptions setFileIds(List<String> fileIds) {
        this.fileIds = fileIds;
        return this;
    }

    /**
     * Get the metadata property: A set of up to 16 key/value pairs that can be attached to an object, used for storing
     * additional information about that object in a structured format. Keys may be up to 64 characters in length and
     * values may be up to 512 characters in length.
     *
     * @return the metadata value.
     */
    @Generated
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: A set of up to 16 key/value pairs that can be attached to an object, used for storing
     * additional information about that object in a structured format. Keys may be up to 64 characters in length and
     * values may be up to 512 characters in length.
     *
     * @param metadata the metadata value to set.
     * @return the AssistantCreationOptions object itself.
     */
    @Generated
    public AssistantCreationOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("model", this.model);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("instructions", this.instructions);
        jsonWriter.writeArrayField("tools", this.tools, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("file_ids", this.fileIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssistantCreationOptions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssistantCreationOptions if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AssistantCreationOptions.
     */
    @Generated
    public static AssistantCreationOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String model = null;
            String name = null;
            String description = null;
            String instructions = null;
            List<ToolDefinition> tools = null;
            List<String> fileIds = null;
            Map<String, String> metadata = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("model".equals(fieldName)) {
                    model = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("instructions".equals(fieldName)) {
                    instructions = reader.getString();
                } else if ("tools".equals(fieldName)) {
                    tools = reader.readArray(reader1 -> ToolDefinition.fromJson(reader1));
                } else if ("file_ids".equals(fieldName)) {
                    fileIds = reader.readArray(reader1 -> reader1.getString());
                } else if ("metadata".equals(fieldName)) {
                    metadata = reader.readMap(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            AssistantCreationOptions deserializedAssistantCreationOptions = new AssistantCreationOptions(model);
            deserializedAssistantCreationOptions.name = name;
            deserializedAssistantCreationOptions.description = description;
            deserializedAssistantCreationOptions.instructions = instructions;
            deserializedAssistantCreationOptions.tools = tools;
            deserializedAssistantCreationOptions.fileIds = fileIds;
            deserializedAssistantCreationOptions.metadata = metadata;
            return deserializedAssistantCreationOptions;
        });
    }
}
