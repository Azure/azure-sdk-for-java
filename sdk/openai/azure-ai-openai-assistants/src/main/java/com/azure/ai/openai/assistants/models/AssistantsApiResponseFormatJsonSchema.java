// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An object describing expected output of the model to match a JSON schema.
 */
@Immutable
public final class AssistantsApiResponseFormatJsonSchema extends AssistantsApiResponseFormat {

    /*
     * Must be one of `text`, `json_object` or `json_schema` .
     */
    @Generated
    private ApiResponseFormat type = ApiResponseFormat.JSON_SCHEMA;

    /*
     * The JSON schema that the model must output.
     */
    @Generated
    private final AssistantsApiResponseFormatJsonSchemaJsonSchema jsonSchema;

    /**
     * Creates an instance of AssistantsApiResponseFormatJsonSchema class.
     *
     * @param jsonSchema the jsonSchema value to set.
     */
    @Generated
    public AssistantsApiResponseFormatJsonSchema(AssistantsApiResponseFormatJsonSchemaJsonSchema jsonSchema) {
        this.jsonSchema = jsonSchema;
    }

    /**
     * Get the type property: Must be one of `text`, `json_object` or `json_schema` .
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ApiResponseFormat getType() {
        return this.type;
    }

    /**
     * Get the jsonSchema property: The JSON schema that the model must output.
     *
     * @return the jsonSchema value.
     */
    @Generated
    public AssistantsApiResponseFormatJsonSchemaJsonSchema getJsonSchema() {
        return this.jsonSchema;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("json_schema", this.jsonSchema);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssistantsApiResponseFormatJsonSchema from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssistantsApiResponseFormatJsonSchema if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AssistantsApiResponseFormatJsonSchema.
     */
    @Generated
    public static AssistantsApiResponseFormatJsonSchema fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssistantsApiResponseFormatJsonSchemaJsonSchema jsonSchema = null;
            ApiResponseFormat type = ApiResponseFormat.JSON_SCHEMA;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("json_schema".equals(fieldName)) {
                    jsonSchema = AssistantsApiResponseFormatJsonSchemaJsonSchema.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    type = ApiResponseFormat.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            AssistantsApiResponseFormatJsonSchema deserializedAssistantsApiResponseFormatJsonSchema
                = new AssistantsApiResponseFormatJsonSchema(jsonSchema);
            deserializedAssistantsApiResponseFormatJsonSchema.type = type;
            return deserializedAssistantsApiResponseFormatJsonSchema;
        });
    }
}
