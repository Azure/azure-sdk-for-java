// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A representation of image file content in a thread message.
 */
@Immutable
public final class MessageImageFileContent extends MessageContent {

    /*
     * The image file for this thread message content item.
     */
    @Generated
    private final MessageImageFileDetails imageFile;

    /**
     * Creates an instance of MessageImageFileContent class.
     *
     * @param imageFile the imageFile value to set.
     */
    @Generated
    private MessageImageFileContent(MessageImageFileDetails imageFile) {
        this.imageFile = imageFile;
    }

    /**
     * Get the imageFile property: The image file for this thread message content item.
     *
     * @return the imageFile value.
     */
    @Generated
    public MessageImageFileDetails getImageFile() {
        return this.imageFile;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", "image_file");
        jsonWriter.writeJsonField("image_file", this.imageFile);
        return jsonWriter.writeEndObject();
    }

    // TODO jpalvarezl verify not custom code
    public static MessageImageFileContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MessageImageFileDetails imageFile = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    String type = reader.getString();
                    if (!"image_file".equals(type)) {
                        throw new IllegalStateException(
                            "'type' was expected to be non-null and equal to 'image_file'. The found 'type' was '"
                                + type + "'.");
                    }
                } else if ("image_file".equals(fieldName)) {
                    imageFile = MessageImageFileDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new MessageImageFileContent(imageFile);
        });
    }

    /*
     * The object type.
     */
    @Generated
    private String type = "image_file";

    /**
     * Get the type property: The object type.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }
}
