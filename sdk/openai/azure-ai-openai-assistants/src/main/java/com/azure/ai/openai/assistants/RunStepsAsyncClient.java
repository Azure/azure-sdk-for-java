// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.assistants;

import com.azure.ai.openai.assistants.implementation.RunStepsImpl;
import com.azure.ai.openai.assistants.models.ListResponseOfRunStep;
import com.azure.ai.openai.assistants.models.RunStep;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous AssistantsClient type.
 */
@ServiceClient(builder = AssistantsClientBuilder.class, isAsync = true)
public final class RunStepsAsyncClient {
    @Generated
    private final RunStepsImpl serviceClient;

    /**
     * Initializes an instance of RunStepsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    RunStepsAsyncClient(RunStepsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Retrieves a single run step associated with an assistant thread run.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     assistant_id: String (Required)
     *     thread_id: String (Required)
     *     run_id: String (Required)
     *     status: String(in_progress/cancelled/failed/completed/expired) (Required)
     *     step_details (Required): {
     *     }
     *     last_error (Required): {
     *         code: String(server_error/rate_limit_exceeded) (Required)
     *         message: String (Required)
     *     }
     *     created_at: long (Required)
     *     expired_at: OffsetDateTime (Required)
     *     completed_at: OffsetDateTime (Required)
     *     cancelled_at: OffsetDateTime (Required)
     *     failed_at: OffsetDateTime (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread associated with run of which the requested run step is part of.
     * @param runId The ID of the run which the requested run step is part of.
     * @param stepId The ID of the run step to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return detailed information about a single step of an assistant thread run along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> retrieveRunStepWithResponse(String threadId, String runId, String stepId,
        RequestOptions requestOptions) {
        return this.serviceClient.retrieveRunStepWithResponseAsync(threadId, runId, stepId, requestOptions);
    }

    /**
     * Returns a list of run steps associated an assistant thread run.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is
     * 20.</td>
     * </tr>
     * <tr>
     * <td>order</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending
     * order.</td>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * after=obj_foo in order to fetch the next page of the list.</td>
     * </tr>
     * <tr>
     * <td>before</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * before=obj_foo in order to fetch the previous page of the list.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             assistant_id: String (Required)
     *             thread_id: String (Required)
     *             run_id: String (Required)
     *             status: String(in_progress/cancelled/failed/completed/expired) (Required)
     *             step_details (Required): {
     *             }
     *             last_error (Required): {
     *                 code: String(server_error/rate_limit_exceeded) (Required)
     *                 message: String (Required)
     *             }
     *             created_at: long (Required)
     *             expired_at: OffsetDateTime (Required)
     *             completed_at: OffsetDateTime (Required)
     *             cancelled_at: OffsetDateTime (Required)
     *             failed_at: OffsetDateTime (Required)
     *             metadata (Required): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread associated with the run from which steps should be listed.
     * @param runId The ID of the run from which steps should be listed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listRunStepsWithResponse(String threadId, String runId,
        RequestOptions requestOptions) {
        return this.serviceClient.listRunStepsWithResponseAsync(threadId, runId, requestOptions);
    }

    /**
     * Retrieves a single run step associated with an assistant thread run.
     * 
     * @param threadId The ID of the thread associated with run of which the requested run step is part of.
     * @param runId The ID of the run which the requested run step is part of.
     * @param stepId The ID of the run step to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information about a single step of an assistant thread run on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RunStep> retrieveRunStep(String threadId, String runId, String stepId) {
        // Generated convenience method for retrieveRunStepWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return retrieveRunStepWithResponse(threadId, runId, stepId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(RunStep.class));
    }

    /**
     * Returns a list of run steps associated an assistant thread run.
     * 
     * @param threadId The ID of the thread associated with the run from which steps should be listed.
     * @param runId The ID of the run from which steps should be listed.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default
     * is 20.
     * @param order Sort order by the created_at timestamp of the objects. asc for ascending order and desc for
     * descending order.
     * @param after A cursor for use in pagination. after is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. before is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include before=obj_foo in order to fetch the previous page of the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response data for a requested list of items on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ListResponseOfRunStep> listRunSteps(String threadId, String runId, Integer limit, String order,
        String after, String before) {
        // Generated convenience method for listRunStepsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order, false);
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after, false);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before, false);
        }
        return listRunStepsWithResponse(threadId, runId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ListResponseOfRunStep.class));
    }

    /**
     * Returns a list of run steps associated an assistant thread run.
     * 
     * @param threadId The ID of the thread associated with the run from which steps should be listed.
     * @param runId The ID of the run from which steps should be listed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response data for a requested list of items on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ListResponseOfRunStep> listRunSteps(String threadId, String runId) {
        // Generated convenience method for listRunStepsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listRunStepsWithResponse(threadId, runId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ListResponseOfRunStep.class));
    }
}
