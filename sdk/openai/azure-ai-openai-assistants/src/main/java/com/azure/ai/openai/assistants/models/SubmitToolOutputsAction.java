// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The details for required tool calls that must be submitted for an assistant thread run to continue.
 */
@Immutable
public final class SubmitToolOutputsAction extends RequiredAction {

    /*
     * The details describing tools that should be called to submit tool outputs.
     */
    @Generated
    private final SubmitToolOutputsDetails submitToolOutputs;

    /**
     * Creates an instance of SubmitToolOutputsAction class.
     *
     * @param submitToolOutputs the submitToolOutputs value to set.
     */
    @Generated
    private SubmitToolOutputsAction(SubmitToolOutputsDetails submitToolOutputs) {
        this.submitToolOutputs = submitToolOutputs;
    }

    /**
     * Get the submitToolOutputs property: The details describing tools that should be called to submit tool outputs.
     *
     * @return the submitToolOutputs value.
     */
    @Generated
    public SubmitToolOutputsDetails getSubmitToolOutputs() {
        return this.submitToolOutputs;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", "submit_tool_outputs");
        jsonWriter.writeJsonField("submit_tool_outputs", this.submitToolOutputs);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SubmitToolOutputsAction from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SubmitToolOutputsAction if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties or the
     * polymorphic discriminator.
     * @throws IOException If an error occurs while reading the SubmitToolOutputsAction.
     */
    public static SubmitToolOutputsAction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SubmitToolOutputsDetails submitToolOutputs = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    String type = reader.getString();
                    if (!"submit_tool_outputs".equals(type)) {
                        throw new IllegalStateException(
                            "'type' was expected to be non-null and equal to 'submit_tool_outputs'. The found 'type' was '"
                                + type + "'.");
                    }
                } else if ("submit_tool_outputs".equals(fieldName)) {
                    submitToolOutputs = SubmitToolOutputsDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new SubmitToolOutputsAction(submitToolOutputs);
        });
    }
}
