// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants;

import com.azure.ai.openai.assistants.implementation.AssistantsClientImpl;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.client.traits.ConfigurationTrait;
import com.azure.core.client.traits.EndpointTrait;
import com.azure.core.client.traits.HttpTrait;
import com.azure.core.client.traits.KeyCredentialTrait;
import com.azure.core.client.traits.TokenCredentialTrait;
import com.azure.core.credential.KeyCredential;
import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.AddHeadersPolicy;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.KeyCredentialPolicy;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.util.ClientOptions;
import com.azure.core.util.Configuration;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.builder.ClientBuilderUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.serializer.JacksonAdapter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * A builder for creating a new instance of the AssistantsClient type.
 */
@ServiceClientBuilder(
    serviceClients = {
        AssistantsClient.class,
        AssistantThreadsClient.class,
        AssistantMessagesClient.class,
        AssistantRunsClient.class,
        RunStepsClient.class,
        FilesClient.class,
        AssistantsAsyncClient.class,
        AssistantThreadsAsyncClient.class,
        AssistantMessagesAsyncClient.class,
        AssistantRunsAsyncClient.class,
        RunStepsAsyncClient.class,
        FilesAsyncClient.class })
public final class AssistantsClientBuilder implements HttpTrait<AssistantsClientBuilder>,
    ConfigurationTrait<AssistantsClientBuilder>, TokenCredentialTrait<AssistantsClientBuilder>,
    KeyCredentialTrait<AssistantsClientBuilder>, EndpointTrait<AssistantsClientBuilder> {

    @Generated
    private static final String SDK_NAME = "name";

    @Generated
    private static final String SDK_VERSION = "version";

    @Generated
    private static final String[] DEFAULT_SCOPES = new String[] { "https://cognitiveservices.azure.com/.default" };

    @Generated
    private static final Map<String, String> PROPERTIES
        = CoreUtils.getProperties("azure-ai-openai-assistants.properties");

    @Generated
    private final List<HttpPipelinePolicy> pipelinePolicies;

    /**
     * Create an instance of the AssistantsClientBuilder.
     */
    @Generated
    public AssistantsClientBuilder() {
        this.pipelinePolicies = new ArrayList<>();
    }

    /*
     * The HTTP pipeline to send requests through.
     */
    @Generated
    private HttpPipeline pipeline;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AssistantsClientBuilder pipeline(HttpPipeline pipeline) {
        if (this.pipeline != null && pipeline == null) {
            LOGGER.info("HttpPipeline is being set to 'null' when it was previously configured.");
        }
        this.pipeline = pipeline;
        return this;
    }

    /*
     * The HTTP client used to send the request.
     */
    @Generated
    private HttpClient httpClient;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AssistantsClientBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /*
     * The logging configuration for HTTP requests and responses.
     */
    @Generated
    private HttpLogOptions httpLogOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AssistantsClientBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        this.httpLogOptions = httpLogOptions;
        return this;
    }

    /*
     * The client options such as application ID and custom headers to set on a request.
     */
    @Generated
    private ClientOptions clientOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AssistantsClientBuilder clientOptions(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        return this;
    }

    /*
     * The retry options to configure retry policy for failed requests.
     */
    @Generated
    private RetryOptions retryOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AssistantsClientBuilder retryOptions(RetryOptions retryOptions) {
        this.retryOptions = retryOptions;
        return this;
    }

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AssistantsClientBuilder addPolicy(HttpPipelinePolicy customPolicy) {
        Objects.requireNonNull(customPolicy, "'customPolicy' cannot be null.");
        pipelinePolicies.add(customPolicy);
        return this;
    }

    /*
     * The configuration store that is used during construction of the service client.
     */
    @Generated
    private Configuration configuration;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AssistantsClientBuilder configuration(Configuration configuration) {
        this.configuration = configuration;
        return this;
    }

    /*
     * The TokenCredential used for authentication.
     */
    @Generated
    private TokenCredential tokenCredential;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AssistantsClientBuilder credential(TokenCredential tokenCredential) {
        this.tokenCredential = tokenCredential;
        return this;
    }

    /*
     * The KeyCredential used for authentication.
     */
    @Generated
    private KeyCredential keyCredential;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AssistantsClientBuilder credential(KeyCredential keyCredential) {
        this.keyCredential = keyCredential;
        return this;
    }

    /*
     * The service endpoint
     */
    @Generated
    private String endpoint;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AssistantsClientBuilder endpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /*
     * The retry policy that will attempt to retry failed requests, if applicable.
     */
    @Generated
    private RetryPolicy retryPolicy;

    /**
     * Sets The retry policy that will attempt to retry failed requests, if applicable.
     *
     * @param retryPolicy the retryPolicy value.
     * @return the AssistantsClientBuilder.
     */
    @Generated
    public AssistantsClientBuilder retryPolicy(RetryPolicy retryPolicy) {
        this.retryPolicy = retryPolicy;
        return this;
    }

    /**
     * Builds an instance of AssistantsClientImpl with the provided parameters.
     *
     * @return an instance of AssistantsClientImpl.
     */
    @Generated
    private AssistantsClientImpl buildInnerClient() {
        HttpPipeline localPipeline = (pipeline != null) ? pipeline : createHttpPipeline();
        AssistantsClientImpl client
            = new AssistantsClientImpl(localPipeline, JacksonAdapter.createDefaultSerializerAdapter(), this.endpoint);
        return client;
    }

    @Generated
    private HttpPipeline createHttpPipeline() {
        Configuration buildConfiguration
            = (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;
        HttpLogOptions localHttpLogOptions = this.httpLogOptions == null ? new HttpLogOptions() : this.httpLogOptions;
        ClientOptions localClientOptions = this.clientOptions == null ? new ClientOptions() : this.clientOptions;
        List<HttpPipelinePolicy> policies = new ArrayList<>();
        String clientName = PROPERTIES.getOrDefault(SDK_NAME, "UnknownName");
        String clientVersion = PROPERTIES.getOrDefault(SDK_VERSION, "UnknownVersion");
        String applicationId = CoreUtils.getApplicationId(localClientOptions, localHttpLogOptions);
        policies.add(new UserAgentPolicy(applicationId, clientName, clientVersion, buildConfiguration));
        policies.add(new RequestIdPolicy());
        policies.add(new AddHeadersFromContextPolicy());
        HttpHeaders headers = new HttpHeaders();
        localClientOptions.getHeaders()
            .forEach(header -> headers.set(HttpHeaderName.fromString(header.getName()), header.getValue()));
        if (headers.getSize() > 0) {
            policies.add(new AddHeadersPolicy(headers));
        }
        this.pipelinePolicies.stream().filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
            .forEach(p -> policies.add(p));
        HttpPolicyProviders.addBeforeRetryPolicies(policies);
        policies.add(ClientBuilderUtil.validateAndGetRetryPolicy(retryPolicy, retryOptions, new RetryPolicy()));
        policies.add(new AddDatePolicy());
        if (keyCredential != null) {
            policies.add(new KeyCredentialPolicy("api-key", keyCredential));
        }
        if (tokenCredential != null) {
            policies.add(new BearerTokenAuthenticationPolicy(tokenCredential, DEFAULT_SCOPES));
        }
        this.pipelinePolicies.stream().filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
            .forEach(p -> policies.add(p));
        HttpPolicyProviders.addAfterRetryPolicies(policies);
        policies.add(new HttpLoggingPolicy(httpLogOptions));
        HttpPipeline httpPipeline = new HttpPipelineBuilder().policies(policies.toArray(new HttpPipelinePolicy[0]))
            .httpClient(httpClient).clientOptions(localClientOptions).build();
        return httpPipeline;
    }

    private static final ClientLogger LOGGER = new ClientLogger(AssistantsClientBuilder.class);

    /**
     * Builds an instance of AssistantsAsyncClient class.
     *
     * @return an instance of AssistantsAsyncClient.
     */
    @Generated
    public AssistantsAsyncClient buildAssistantsAsyncClient() {
        return new AssistantsAsyncClient(buildInnerClient().getAssistants());
    }

    /**
     * Builds an instance of AssistantThreadsAsyncClient class.
     *
     * @return an instance of AssistantThreadsAsyncClient.
     */
    @Generated
    public AssistantThreadsAsyncClient buildAssistantThreadsAsyncClient() {
        return new AssistantThreadsAsyncClient(buildInnerClient().getAssistantThreads());
    }

    /**
     * Builds an instance of AssistantMessagesAsyncClient class.
     *
     * @return an instance of AssistantMessagesAsyncClient.
     */
    @Generated
    public AssistantMessagesAsyncClient buildAssistantMessagesAsyncClient() {
        return new AssistantMessagesAsyncClient(buildInnerClient().getAssistantMessages());
    }

    /**
     * Builds an instance of AssistantRunsAsyncClient class.
     *
     * @return an instance of AssistantRunsAsyncClient.
     */
    @Generated
    public AssistantRunsAsyncClient buildAssistantRunsAsyncClient() {
        return new AssistantRunsAsyncClient(buildInnerClient().getAssistantRuns());
    }

    /**
     * Builds an instance of RunStepsAsyncClient class.
     *
     * @return an instance of RunStepsAsyncClient.
     */
    @Generated
    public RunStepsAsyncClient buildRunStepsAsyncClient() {
        return new RunStepsAsyncClient(buildInnerClient().getRunSteps());
    }

    /**
     * Builds an instance of FilesAsyncClient class.
     *
     * @return an instance of FilesAsyncClient.
     */
    @Generated
    public FilesAsyncClient buildFilesAsyncClient() {
        return new FilesAsyncClient(buildInnerClient().getFiles());
    }

    /**
     * Builds an instance of AssistantsClient class.
     *
     * @return an instance of AssistantsClient.
     */
    @Generated
    public AssistantsClient buildAssistantsClient() {
        return new AssistantsClient(buildInnerClient().getAssistants());
    }

    /**
     * Builds an instance of AssistantThreadsClient class.
     *
     * @return an instance of AssistantThreadsClient.
     */
    @Generated
    public AssistantThreadsClient buildAssistantThreadsClient() {
        return new AssistantThreadsClient(buildInnerClient().getAssistantThreads());
    }

    /**
     * Builds an instance of AssistantMessagesClient class.
     *
     * @return an instance of AssistantMessagesClient.
     */
    @Generated
    public AssistantMessagesClient buildAssistantMessagesClient() {
        return new AssistantMessagesClient(buildInnerClient().getAssistantMessages());
    }

    /**
     * Builds an instance of AssistantRunsClient class.
     *
     * @return an instance of AssistantRunsClient.
     */
    @Generated
    public AssistantRunsClient buildAssistantRunsClient() {
        return new AssistantRunsClient(buildInnerClient().getAssistantRuns());
    }

    /**
     * Builds an instance of RunStepsClient class.
     *
     * @return an instance of RunStepsClient.
     */
    @Generated
    public RunStepsClient buildRunStepsClient() {
        return new RunStepsClient(buildInnerClient().getRunSteps());
    }

    /**
     * Builds an instance of FilesClient class.
     *
     * @return an instance of FilesClient.
     */
    @Generated
    public FilesClient buildFilesClient() {
        return new FilesClient(buildInnerClient().getFiles());
    }
}
