// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.assistants.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ThreadMessages.
 */
public final class ThreadMessagesImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ThreadMessagesService service;

    /**
     * The service client containing this operation class.
     */
    private final AssistantsClientImpl client;

    /**
     * Initializes an instance of ThreadMessagesImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ThreadMessagesImpl(AssistantsClientImpl client) {
        this.service
            = RestProxy.create(ThreadMessagesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AssistantsClientThreadMessages to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}/openai")
    @ServiceInterface(name = "AssistantsClientThre")
    public interface ThreadMessagesService {
        @Post("/threads/{threadId}/messages")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createMessage(@HostParam("endpoint") String endpoint,
            @PathParam("threadId") String threadId, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData request, RequestOptions requestOptions, Context context);

        @Post("/threads/{threadId}/messages")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createMessageSync(@HostParam("endpoint") String endpoint,
            @PathParam("threadId") String threadId, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData request, RequestOptions requestOptions, Context context);

        @Get("/threads/{threadId}/messages")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listMessages(@HostParam("endpoint") String endpoint,
            @PathParam("threadId") String threadId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/threads/{threadId}/messages")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listMessagesSync(@HostParam("endpoint") String endpoint,
            @PathParam("threadId") String threadId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/threads/{threadId}/messages/{messageId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> retrieveMessage(@HostParam("endpoint") String endpoint,
            @PathParam("threadId") String threadId, @PathParam("messageId") String messageId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/threads/{threadId}/messages/{messageId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> retrieveMessageSync(@HostParam("endpoint") String endpoint,
            @PathParam("threadId") String threadId, @PathParam("messageId") String messageId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/threads/{threadId}/messages/{messageId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> modifyMessage(@HostParam("endpoint") String endpoint,
            @PathParam("threadId") String threadId, @PathParam("messageId") String messageId,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData request,
            RequestOptions requestOptions, Context context);

        @Post("/threads/{threadId}/messages/{messageId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> modifyMessageSync(@HostParam("endpoint") String endpoint,
            @PathParam("threadId") String threadId, @PathParam("messageId") String messageId,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData request,
            RequestOptions requestOptions, Context context);

        @Get("/threads/{threadId}/messages/{messageId}/files")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listMessageFiles(@HostParam("endpoint") String endpoint,
            @PathParam("threadId") String threadId, @PathParam("messageId") String messageId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/threads/{threadId}/messages/{messageId}/files")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listMessageFilesSync(@HostParam("endpoint") String endpoint,
            @PathParam("threadId") String threadId, @PathParam("messageId") String messageId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/threads/{threadId}/messages/{messageId}/files/{fileId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> retrieveMessageFile(@HostParam("endpoint") String endpoint,
            @PathParam("threadId") String threadId, @PathParam("messageId") String messageId,
            @PathParam("fileId") String fileId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/threads/{threadId}/messages/{messageId}/files/{fileId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> retrieveMessageFileSync(@HostParam("endpoint") String endpoint,
            @PathParam("threadId") String threadId, @PathParam("messageId") String messageId,
            @PathParam("fileId") String fileId, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);
    }

    /**
     * Creates a new message on a specified thread.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     role: String(user/assistant) (Required)
     *     content: String (Required)
     *     file_ids (Optional): [
     *         String (Optional)
     *     ]
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *         }
     *     ]
     *     assistant_id: String (Optional)
     *     run_id: String (Optional)
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to create the new message on.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single message within an assistant thread along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createMessageWithResponseAsync(String threadId, BinaryData request,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createMessage(this.client.getEndpoint(), threadId, accept,
            request, requestOptions, context));
    }

    /**
     * Creates a new message on a specified thread.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     role: String(user/assistant) (Required)
     *     content: String (Required)
     *     file_ids (Optional): [
     *         String (Optional)
     *     ]
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *         }
     *     ]
     *     assistant_id: String (Optional)
     *     run_id: String (Optional)
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to create the new message on.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single message within an assistant thread along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createMessageWithResponse(String threadId, BinaryData request,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createMessageSync(this.client.getEndpoint(), threadId, accept, request, requestOptions,
            Context.NONE);
    }

    /**
     * Gets a list of messages that exist on a thread.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is
     * 20.</td>
     * </tr>
     * <tr>
     * <td>order</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.
     * Allowed values: "asc", "desc".</td>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * after=obj_foo in order to fetch the next page of the list.</td>
     * </tr>
     * <tr>
     * <td>before</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * before=obj_foo in order to fetch the previous page of the list.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             thread_id: String (Required)
     *             role: String(user/assistant) (Required)
     *             content (Required): [
     *                  (Required){
     *                 }
     *             ]
     *             assistant_id: String (Optional)
     *             run_id: String (Optional)
     *             file_ids (Required): [
     *                 String (Required)
     *             ]
     *             metadata (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to list messages from.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of messages that exist on a thread along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listMessagesWithResponseAsync(String threadId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.listMessages(this.client.getEndpoint(), threadId, accept, requestOptions, context));
    }

    /**
     * Gets a list of messages that exist on a thread.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is
     * 20.</td>
     * </tr>
     * <tr>
     * <td>order</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.
     * Allowed values: "asc", "desc".</td>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * after=obj_foo in order to fetch the next page of the list.</td>
     * </tr>
     * <tr>
     * <td>before</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * before=obj_foo in order to fetch the previous page of the list.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             thread_id: String (Required)
     *             role: String(user/assistant) (Required)
     *             content (Required): [
     *                  (Required){
     *                 }
     *             ]
     *             assistant_id: String (Optional)
     *             run_id: String (Optional)
     *             file_ids (Required): [
     *                 String (Required)
     *             ]
     *             metadata (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to list messages from.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of messages that exist on a thread along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listMessagesWithResponse(String threadId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listMessagesSync(this.client.getEndpoint(), threadId, accept, requestOptions, Context.NONE);
    }

    /**
     * Gets an existing message from an existing thread.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *         }
     *     ]
     *     assistant_id: String (Optional)
     *     run_id: String (Optional)
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to retrieve the specified message from.
     * @param messageId The ID of the message to retrieve from the specified thread.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an existing message from an existing thread along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> retrieveMessageWithResponseAsync(String threadId, String messageId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.retrieveMessage(this.client.getEndpoint(), threadId, messageId,
            accept, requestOptions, context));
    }

    /**
     * Gets an existing message from an existing thread.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *         }
     *     ]
     *     assistant_id: String (Optional)
     *     run_id: String (Optional)
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to retrieve the specified message from.
     * @param messageId The ID of the message to retrieve from the specified thread.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an existing message from an existing thread along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retrieveMessageWithResponse(String threadId, String messageId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.retrieveMessageSync(this.client.getEndpoint(), threadId, messageId, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Modifies an existing message on an existing thread.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *         }
     *     ]
     *     assistant_id: String (Optional)
     *     run_id: String (Optional)
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread containing the specified message to modify.
     * @param messageId The ID of the message to modify on the specified thread.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single message within an assistant thread along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> modifyMessageWithResponseAsync(String threadId, String messageId,
        BinaryData request, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.modifyMessage(this.client.getEndpoint(), threadId, messageId,
            accept, request, requestOptions, context));
    }

    /**
     * Modifies an existing message on an existing thread.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *         }
     *     ]
     *     assistant_id: String (Optional)
     *     run_id: String (Optional)
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread containing the specified message to modify.
     * @param messageId The ID of the message to modify on the specified thread.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single message within an assistant thread along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> modifyMessageWithResponse(String threadId, String messageId, BinaryData request,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.modifyMessageSync(this.client.getEndpoint(), threadId, messageId, accept, request,
            requestOptions, Context.NONE);
    }

    /**
     * Gets a list of previously uploaded files associated with a message from a thread.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is
     * 20.</td>
     * </tr>
     * <tr>
     * <td>order</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.
     * Allowed values: "asc", "desc".</td>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * after=obj_foo in order to fetch the next page of the list.</td>
     * </tr>
     * <tr>
     * <td>before</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * before=obj_foo in order to fetch the previous page of the list.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             message_id: String (Required)
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread containing the message to list files from.
     * @param messageId The ID of the message to list files from.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of previously uploaded files associated with a message from a thread along with {@link Response}
     * on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listMessageFilesWithResponseAsync(String threadId, String messageId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listMessageFiles(this.client.getEndpoint(), threadId, messageId,
            accept, requestOptions, context));
    }

    /**
     * Gets a list of previously uploaded files associated with a message from a thread.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is
     * 20.</td>
     * </tr>
     * <tr>
     * <td>order</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.
     * Allowed values: "asc", "desc".</td>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * after=obj_foo in order to fetch the next page of the list.</td>
     * </tr>
     * <tr>
     * <td>before</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * before=obj_foo in order to fetch the previous page of the list.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             message_id: String (Required)
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread containing the message to list files from.
     * @param messageId The ID of the message to list files from.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of previously uploaded files associated with a message from a thread along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listMessageFilesWithResponse(String threadId, String messageId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listMessageFilesSync(this.client.getEndpoint(), threadId, messageId, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Gets information about a file attachment to a message within a thread.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     message_id: String (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread containing the message to get information from.
     * @param messageId The ID of the message to get information from.
     * @param fileId The ID of the file to get information about.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a file attachment to a message within a thread along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> retrieveMessageFileWithResponseAsync(String threadId, String messageId,
        String fileId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.retrieveMessageFile(this.client.getEndpoint(), threadId,
            messageId, fileId, accept, requestOptions, context));
    }

    /**
     * Gets information about a file attachment to a message within a thread.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     message_id: String (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread containing the message to get information from.
     * @param messageId The ID of the message to get information from.
     * @param fileId The ID of the file to get information about.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a file attachment to a message within a thread along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retrieveMessageFileWithResponse(String threadId, String messageId, String fileId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.retrieveMessageFileSync(this.client.getEndpoint(), threadId, messageId, fileId, accept,
            requestOptions, Context.NONE);
    }
}
