// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.List;
import java.util.Map;

/**
 * Data representing a single evaluation run of an assistant thread.
 */
@Immutable
public final class AssistantRun {

    /*
     * The identifier, which can be referenced in API endpoints.
     */
    @Generated
    @JsonProperty(value = "id")
    private String id;

    /*
     * The object type, which is always 'thread.run'.
     */
    @Generated
    @JsonProperty(value = "object")
    private String object = "thread.run";

    /*
     * The ID of the thread associated with this run.
     */
    @Generated
    @JsonProperty(value = "thread_id")
    private String threadId;

    /*
     * The ID of the assistant associated with the thread this run was performed against.
     */
    @Generated
    @JsonProperty(value = "assistant_id")
    private String assistantId;

    /*
     * The status of the assistant thread run.
     */
    @Generated
    @JsonProperty(value = "status")
    private RunStatus status;

    /*
     * The details of the action required for the assistant thread run to continue.
     */
    @Generated
    @JsonProperty(value = "required_action")
    private RequiredAction requiredAction;

    /*
     * The last error, if any, encountered by this assistant thread run.
     */
    @Generated
    @JsonProperty(value = "last_error")
    private RunError lastError;

    /*
     * The ID of the model to use.
     */
    @Generated
    @JsonProperty(value = "model")
    private String model;

    /*
     * The overriden system instructions used for this assistant thread run.
     */
    @Generated
    @JsonProperty(value = "instructions")
    private String instructions;

    /*
     * The overriden enabled tools used for this assistant thread run.
     */
    @Generated
    @JsonProperty(value = "tools")
    private List<ToolDefinition> tools;

    /*
     * A list of attached file IDs, ordered by creation date in ascending order.
     */
    @Generated
    @JsonProperty(value = "file_ids")
    private List<String> fileIds;

    /*
     * A set of key/value pairs used to store additional information about the object.
     */
    @Generated
    @JsonProperty(value = "metadata")
    private Map<String, String> metadata;

    /*
     * The Unix timestamp, in seconds, representing when this object was created.
     */
    @Generated
    @JsonProperty(value = "created_at")
    private long createdAt;

    /*
     * The Unix timestamp, in seconds, representing when this item expires.
     */
    @Generated
    @JsonProperty(value = "expires_at")
    private OffsetDateTime expiresAt;

    /*
     * The Unix timestamp, in seconds, representing when this item was started.
     */
    @Generated
    @JsonProperty(value = "started_at")
    private OffsetDateTime startedAt;

    /*
     * The Unix timestamp, in seconds, representing when this completed.
     */
    @Generated
    @JsonProperty(value = "completed_at")
    private OffsetDateTime completedAt;

    /*
     * The Unix timestamp, in seconds, representing when this was cancelled.
     */
    @Generated
    @JsonProperty(value = "cancelled_at")
    private OffsetDateTime cancelledAt;

    /*
     * The Unix timestamp, in seconds, representing when this failed.
     */
    @Generated
    @JsonProperty(value = "failed_at")
    private OffsetDateTime failedAt;

    /**
     * Creates an instance of AssistantRun class.
     *
     * @param id the id value to set.
     * @param threadId the threadId value to set.
     * @param assistantId the assistantId value to set.
     * @param status the status value to set.
     * @param model the model value to set.
     * @param instructions the instructions value to set.
     * @param tools the tools value to set.
     * @param fileIds the fileIds value to set.
     * @param metadata the metadata value to set.
     * @param createdAt the createdAt value to set.
     * @param expiresAt the expiresAt value to set.
     * @param startedAt the startedAt value to set.
     * @param completedAt the completedAt value to set.
     * @param cancelledAt the cancelledAt value to set.
     * @param failedAt the failedAt value to set.
     */
    @Generated
    private AssistantRun(String id, String threadId, String assistantId, RunStatus status, String model,
        String instructions, List<ToolDefinition> tools, List<String> fileIds, Map<String, String> metadata,
        OffsetDateTime createdAt, OffsetDateTime expiresAt, OffsetDateTime startedAt, OffsetDateTime completedAt,
        OffsetDateTime cancelledAt, OffsetDateTime failedAt) {
        this.id = id;
        this.threadId = threadId;
        this.assistantId = assistantId;
        this.status = status;
        this.model = model;
        this.instructions = instructions;
        this.tools = tools;
        this.fileIds = fileIds;
        this.metadata = metadata;
        this.createdAt = createdAt.toEpochSecond();
        this.expiresAt = expiresAt;
        this.startedAt = startedAt;
        this.completedAt = completedAt;
        this.cancelledAt = cancelledAt;
        this.failedAt = failedAt;
    }

    @Generated
    @JsonCreator
    private AssistantRun(@JsonProperty(value = "id") String id, @JsonProperty(value = "thread_id") String threadId,
        @JsonProperty(value = "assistant_id") String assistantId, @JsonProperty(value = "status") RunStatus status,
        @JsonProperty(value = "model") String model, @JsonProperty(value = "instructions") String instructions,
        @JsonProperty(value = "tools") List<ToolDefinition> tools,
        @JsonProperty(value = "file_ids") List<String> fileIds,
        @JsonProperty(value = "metadata") Map<String, String> metadata,
        @JsonProperty(value = "created_at") long createdAt,
        @JsonProperty(value = "expires_at") OffsetDateTime expiresAt,
        @JsonProperty(value = "started_at") OffsetDateTime startedAt,
        @JsonProperty(value = "completed_at") OffsetDateTime completedAt,
        @JsonProperty(value = "cancelled_at") OffsetDateTime cancelledAt,
        @JsonProperty(value = "failed_at") OffsetDateTime failedAt) {
        this(id, threadId, assistantId, status, model, instructions, tools, fileIds, metadata,
            OffsetDateTime.ofInstant(Instant.ofEpochSecond(createdAt), ZoneOffset.UTC), expiresAt, startedAt,
            completedAt, cancelledAt, failedAt);
    }

    /**
     * Get the id property: The identifier, which can be referenced in API endpoints.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the object property: The object type, which is always 'thread.run'.
     *
     * @return the object value.
     */
    @Generated
    public String getObject() {
        return this.object;
    }

    /**
     * Get the threadId property: The ID of the thread associated with this run.
     *
     * @return the threadId value.
     */
    @Generated
    public String getThreadId() {
        return this.threadId;
    }

    /**
     * Get the assistantId property: The ID of the assistant associated with the thread this run was performed against.
     *
     * @return the assistantId value.
     */
    @Generated
    public String getAssistantId() {
        return this.assistantId;
    }

    /**
     * Get the status property: The status of the assistant thread run.
     *
     * @return the status value.
     */
    @Generated
    public RunStatus getStatus() {
        return this.status;
    }

    /**
     * Get the requiredAction property: The details of the action required for the assistant thread run to continue.
     *
     * @return the requiredAction value.
     */
    @Generated
    public RequiredAction getRequiredAction() {
        return this.requiredAction;
    }

    /**
     * Get the lastError property: The last error, if any, encountered by this assistant thread run.
     *
     * @return the lastError value.
     */
    @Generated
    public RunError getLastError() {
        return this.lastError;
    }

    /**
     * Get the model property: The ID of the model to use.
     *
     * @return the model value.
     */
    @Generated
    public String getModel() {
        return this.model;
    }

    /**
     * Get the instructions property: The overriden system instructions used for this assistant thread run.
     *
     * @return the instructions value.
     */
    @Generated
    public String getInstructions() {
        return this.instructions;
    }

    /**
     * Get the tools property: The overriden enabled tools used for this assistant thread run.
     *
     * @return the tools value.
     */
    @Generated
    public List<ToolDefinition> getTools() {
        return this.tools;
    }

    /**
     * Get the fileIds property: A list of attached file IDs, ordered by creation date in ascending order.
     *
     * @return the fileIds value.
     */
    @Generated
    public List<String> getFileIds() {
        return this.fileIds;
    }

    /**
     * Get the metadata property: A set of key/value pairs used to store additional information about the object.
     *
     * @return the metadata value.
     */
    @Generated
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * Get the createdAt property: The Unix timestamp, in seconds, representing when this object was created.
     *
     * @return the createdAt value.
     */
    @Generated
    public OffsetDateTime getCreatedAt() {
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.createdAt), ZoneOffset.UTC);
    }

    /**
     * Get the expiresAt property: The Unix timestamp, in seconds, representing when this item expires.
     *
     * @return the expiresAt value.
     */
    @Generated
    public OffsetDateTime getExpiresAt() {
        return this.expiresAt;
    }

    /**
     * Get the startedAt property: The Unix timestamp, in seconds, representing when this item was started.
     *
     * @return the startedAt value.
     */
    @Generated
    public OffsetDateTime getStartedAt() {
        return this.startedAt;
    }

    /**
     * Get the completedAt property: The Unix timestamp, in seconds, representing when this completed.
     *
     * @return the completedAt value.
     */
    @Generated
    public OffsetDateTime getCompletedAt() {
        return this.completedAt;
    }

    /**
     * Get the cancelledAt property: The Unix timestamp, in seconds, representing when this was cancelled.
     *
     * @return the cancelledAt value.
     */
    @Generated
    public OffsetDateTime getCancelledAt() {
        return this.cancelledAt;
    }

    /**
     * Get the failedAt property: The Unix timestamp, in seconds, representing when this failed.
     *
     * @return the failedAt value.
     */
    @Generated
    public OffsetDateTime getFailedAt() {
        return this.failedAt;
    }
}
