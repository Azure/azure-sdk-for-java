// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.assistants;

import com.azure.ai.openai.assistants.implementation.AssistantRunsImpl;
import com.azure.ai.openai.assistants.models.AssistantRun;
import com.azure.ai.openai.assistants.models.CreateAndRunThreadOptions;
import com.azure.ai.openai.assistants.models.ListResponseOfAssistantRun;
import com.azure.ai.openai.assistants.models.ToolDefinition;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Initializes a new instance of the synchronous AssistantsClient type.
 */
@ServiceClient(builder = AssistantsClientBuilder.class)
public final class AssistantRunsClient {
    @Generated
    private final AssistantRunsImpl serviceClient;

    /**
     * Initializes an instance of AssistantRunsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    AssistantRunsClient(AssistantRunsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates a new run for an assistant thread.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     assistant_id: String (Required)
     *     model: String (Optional)
     *     instructions: String (Optional)
     *     tools (Optional): [
     *          (Optional){
     *         }
     *     ]
     *     metadata (Optional): {
     *         String: String (Optional)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Optional): {
     *     }
     *     last_error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *     }
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *         }
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     *     created_at: long (Required)
     *     expires_at: OffsetDateTime (Required)
     *     started_at: OffsetDateTime (Required)
     *     completed_at: OffsetDateTime (Required)
     *     cancelled_at: OffsetDateTime (Required)
     *     failed_at: OffsetDateTime (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to run.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data representing a single evaluation run of an assistant thread along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createRunWithResponse(String threadId, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.createRunWithResponse(threadId, request, requestOptions);
    }

    /**
     * Returns a list of runs associated with an assistant thread.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is
     * 20.</td>
     * </tr>
     * <tr>
     * <td>order</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending
     * order.</td>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * after=obj_foo in order to fetch the next page of the list.</td>
     * </tr>
     * <tr>
     * <td>before</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * before=obj_foo in order to fetch the previous page of the list.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             thread_id: String (Required)
     *             assistant_id: String (Required)
     *             status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *             required_action (Optional): {
     *             }
     *             last_error (Optional): {
     *                 code: String (Required)
     *                 message: String (Required)
     *             }
     *             model: String (Required)
     *             instructions: String (Required)
     *             tools (Required): [
     *                  (Required){
     *                 }
     *             ]
     *             file_ids (Required): [
     *                 String (Required)
     *             ]
     *             metadata (Required): {
     *                 String: String (Required)
     *             }
     *             created_at: long (Required)
     *             expires_at: OffsetDateTime (Required)
     *             started_at: OffsetDateTime (Required)
     *             completed_at: OffsetDateTime (Required)
     *             cancelled_at: OffsetDateTime (Required)
     *             failed_at: OffsetDateTime (Required)
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to list runs from.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listRunsWithResponse(String threadId, RequestOptions requestOptions) {
        return this.serviceClient.listRunsWithResponse(threadId, requestOptions);
    }

    /**
     * Retrieves an existing run associated with an assistant thread.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Optional): {
     *     }
     *     last_error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *     }
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *         }
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     *     created_at: long (Required)
     *     expires_at: OffsetDateTime (Required)
     *     started_at: OffsetDateTime (Required)
     *     completed_at: OffsetDateTime (Required)
     *     cancelled_at: OffsetDateTime (Required)
     *     failed_at: OffsetDateTime (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread to retrieve the run from.
     * @param runId The ID of the run to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data representing a single evaluation run of an assistant thread along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retrieveRunWithResponse(String threadId, String runId, RequestOptions requestOptions) {
        return this.serviceClient.retrieveRunWithResponse(threadId, runId, requestOptions);
    }

    /**
     * Modifies an existing run associated with an assistant thread.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     metadata (Optional): {
     *         String: String (Optional)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Optional): {
     *     }
     *     last_error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *     }
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *         }
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     *     created_at: long (Required)
     *     expires_at: OffsetDateTime (Required)
     *     started_at: OffsetDateTime (Required)
     *     completed_at: OffsetDateTime (Required)
     *     cancelled_at: OffsetDateTime (Required)
     *     failed_at: OffsetDateTime (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread associated with the target run to be modified.
     * @param runId The ID of the run to modify.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data representing a single evaluation run of an assistant thread along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> modifyRunWithResponse(String threadId, String runId, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.modifyRunWithResponse(threadId, runId, request, requestOptions);
    }

    /**
     * Submits outputs from tool calls as requested by a run with a status of 'requires_action' with
     * required_action.type of 'submit_tool_outputs'.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     tool_outputs (Required): [
     *          (Required){
     *             tool_call_id: String (Optional)
     *             output: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Optional): {
     *     }
     *     last_error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *     }
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *         }
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     *     created_at: long (Required)
     *     expires_at: OffsetDateTime (Required)
     *     started_at: OffsetDateTime (Required)
     *     completed_at: OffsetDateTime (Required)
     *     cancelled_at: OffsetDateTime (Required)
     *     failed_at: OffsetDateTime (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread associated with the run to which outputs should be submitted.
     * @param runId The ID of the run to submit tool outputs to.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data representing a single evaluation run of an assistant thread along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> submitRunToolOutputsWithResponse(String threadId, String runId, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.submitRunToolOutputsWithResponse(threadId, runId, request, requestOptions);
    }

    /**
     * Cancels a run associated with an assistant thread.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Optional): {
     *     }
     *     last_error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *     }
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *         }
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     *     created_at: long (Required)
     *     expires_at: OffsetDateTime (Required)
     *     started_at: OffsetDateTime (Required)
     *     completed_at: OffsetDateTime (Required)
     *     cancelled_at: OffsetDateTime (Required)
     *     failed_at: OffsetDateTime (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread associated with the run to cancel.
     * @param runId The ID of the run to cancel.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data representing a single evaluation run of an assistant thread along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> cancelRunWithResponse(String threadId, String runId, RequestOptions requestOptions) {
        return this.serviceClient.cancelRunWithResponse(threadId, runId, requestOptions);
    }

    /**
     * Creates a new assistant thread and immediately starts a run using that new thread.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     assistant_id: String (Required)
     *     thread (Optional): {
     *         messages (Optional): [
     *              (Optional){
     *                 id: String (Required)
     *                 object: String (Required)
     *                 created_at: long (Required)
     *                 thread_id: String (Required)
     *                 role: String(user/assistant) (Required)
     *                 content (Required): [
     *                      (Required){
     *                     }
     *                 ]
     *                 assistant_id: String (Optional)
     *                 run_id: String (Optional)
     *                 metadata (Optional): {
     *                     String: String (Optional)
     *                 }
     *             }
     *         ]
     *         metadata (Optional): {
     *             String: String (Optional)
     *         }
     *     }
     *     model: String (Optional)
     *     instructions: String (Optional)
     *     tools (Optional): [
     *          (Optional){
     *         }
     *     ]
     *     metadata (Optional): {
     *         String: String (Optional)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Optional): {
     *     }
     *     last_error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *     }
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *         }
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     *     created_at: long (Required)
     *     expires_at: OffsetDateTime (Required)
     *     started_at: OffsetDateTime (Required)
     *     completed_at: OffsetDateTime (Required)
     *     cancelled_at: OffsetDateTime (Required)
     *     failed_at: OffsetDateTime (Required)
     * }
     * }</pre>
     * 
     * @param createAndRunThreadOptions The details used when creating and immediately running a new assistant thread.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data representing a single evaluation run of an assistant thread along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createThreadAndRunWithResponse(BinaryData createAndRunThreadOptions,
        RequestOptions requestOptions) {
        return this.serviceClient.createThreadAndRunWithResponse(createAndRunThreadOptions, requestOptions);
    }

    /**
     * Creates a new run for an assistant thread.
     * 
     * @param threadId The ID of the thread to run.
     * @param model The overridden model that the assistant should use to run the thread.
     * @param instructions The overridden system instructions the assistant should use to run the thread.
     * @param tools The overridden list of enabled tools the assistant should use to run the thread.
     * @param metadata A set of key/value pairs used to store additional information about the object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantRun createRun(String threadId, String model, String instructions, List<ToolDefinition> tools,
        Map<String, String> metadata) {
        // Generated convenience method for createRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Map<String, Object> requestObj = new HashMap<>();
        requestObj.put("model", model);
        requestObj.put("instructions", instructions);
        requestObj.put("tools", tools);
        requestObj.put("metadata", metadata);
        BinaryData request = BinaryData.fromObject(requestObj);
        return createRunWithResponse(threadId, request, requestOptions).getValue().toObject(AssistantRun.class);
    }

    /**
     * Creates a new run for an assistant thread.
     * 
     * @param threadId The ID of the thread to run.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantRun createRun(String threadId) {
        // Generated convenience method for createRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Map<String, Object> requestObj = new HashMap<>();
        BinaryData request = BinaryData.fromObject(requestObj);
        return createRunWithResponse(threadId, request, requestOptions).getValue().toObject(AssistantRun.class);
    }

    /**
     * Returns a list of runs associated with an assistant thread.
     * 
     * @param threadId The ID of the thread to list runs from.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default
     * is 20.
     * @param order Sort order by the created_at timestamp of the objects. asc for ascending order and desc for
     * descending order.
     * @param after A cursor for use in pagination. after is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. before is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include before=obj_foo in order to fetch the previous page of the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response data for a requested list of items.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListResponseOfAssistantRun listRuns(String threadId, Integer limit, String order, String after,
        String before) {
        // Generated convenience method for listRunsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order, false);
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after, false);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before, false);
        }
        return listRunsWithResponse(threadId, requestOptions).getValue().toObject(ListResponseOfAssistantRun.class);
    }

    /**
     * Returns a list of runs associated with an assistant thread.
     * 
     * @param threadId The ID of the thread to list runs from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response data for a requested list of items.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListResponseOfAssistantRun listRuns(String threadId) {
        // Generated convenience method for listRunsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listRunsWithResponse(threadId, requestOptions).getValue().toObject(ListResponseOfAssistantRun.class);
    }

    /**
     * Retrieves an existing run associated with an assistant thread.
     * 
     * @param threadId The ID of the thread to retrieve the run from.
     * @param runId The ID of the run to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantRun retrieveRun(String threadId, String runId) {
        // Generated convenience method for retrieveRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return retrieveRunWithResponse(threadId, runId, requestOptions).getValue().toObject(AssistantRun.class);
    }

    /**
     * Modifies an existing run associated with an assistant thread.
     * 
     * @param threadId The ID of the thread associated with the target run to be modified.
     * @param runId The ID of the run to modify.
     * @param metadata A set of key/value pairs used to store additional information about the object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantRun modifyRun(String threadId, String runId, Map<String, String> metadata) {
        // Generated convenience method for modifyRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Map<String, Object> requestObj = new HashMap<>();
        requestObj.put("metadata", metadata);
        BinaryData request = BinaryData.fromObject(requestObj);
        return modifyRunWithResponse(threadId, runId, request, requestOptions).getValue().toObject(AssistantRun.class);
    }

    /**
     * Modifies an existing run associated with an assistant thread.
     * 
     * @param threadId The ID of the thread associated with the target run to be modified.
     * @param runId The ID of the run to modify.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantRun modifyRun(String threadId, String runId) {
        // Generated convenience method for modifyRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Map<String, Object> requestObj = new HashMap<>();
        BinaryData request = BinaryData.fromObject(requestObj);
        return modifyRunWithResponse(threadId, runId, request, requestOptions).getValue().toObject(AssistantRun.class);
    }

    /**
     * Submits outputs from tool calls as requested by a run with a status of 'requires_action' with
     * required_action.type of 'submit_tool_outputs'.
     * 
     * @param threadId The ID of the thread associated with the run to which outputs should be submitted.
     * @param runId The ID of the run to submit tool outputs to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantRun submitRunToolOutputs(String threadId, String runId) {
        // Generated convenience method for submitRunToolOutputsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return submitRunToolOutputsWithResponse(threadId, runId, null, requestOptions).getValue()
            .toObject(AssistantRun.class);
    }

    /**
     * Cancels a run associated with an assistant thread.
     * 
     * @param threadId The ID of the thread associated with the run to cancel.
     * @param runId The ID of the run to cancel.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantRun cancelRun(String threadId, String runId) {
        // Generated convenience method for cancelRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cancelRunWithResponse(threadId, runId, requestOptions).getValue().toObject(AssistantRun.class);
    }

    /**
     * Creates a new assistant thread and immediately starts a run using that new thread.
     * 
     * @param createAndRunThreadOptions The details used when creating and immediately running a new assistant thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantRun createThreadAndRun(CreateAndRunThreadOptions createAndRunThreadOptions) {
        // Generated convenience method for createThreadAndRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createThreadAndRunWithResponse(BinaryData.fromObject(createAndRunThreadOptions), requestOptions)
            .getValue().toObject(AssistantRun.class);
    }
}
