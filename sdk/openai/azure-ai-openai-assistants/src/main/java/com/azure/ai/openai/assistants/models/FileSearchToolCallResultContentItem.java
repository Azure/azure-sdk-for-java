// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Content item in a file search result.
 */
@Immutable
public final class FileSearchToolCallResultContentItem
    implements JsonSerializable<FileSearchToolCallResultContentItem> {

    /*
     * The type of the content.
     */
    @Generated
    private AssistantsApiResponseFormatType type;

    /*
     * The text content of the file.
     */
    @Generated
    private String text;

    /**
     * Creates an instance of FileSearchToolCallResultContentItem class.
     */
    @Generated
    private FileSearchToolCallResultContentItem() {
    }

    /**
     * Get the type property: The type of the content.
     *
     * @return the type value.
     */
    @Generated
    public AssistantsApiResponseFormatType getType() {
        return this.type;
    }

    /**
     * Get the text property: The text content of the file.
     *
     * @return the text value.
     */
    @Generated
    public String getText() {
        return this.text;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("text", this.text);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FileSearchToolCallResultContentItem from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FileSearchToolCallResultContentItem if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FileSearchToolCallResultContentItem.
     */
    @Generated
    public static FileSearchToolCallResultContentItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FileSearchToolCallResultContentItem deserializedFileSearchToolCallResultContentItem
                = new FileSearchToolCallResultContentItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    deserializedFileSearchToolCallResultContentItem.type
                        = AssistantsApiResponseFormatType.fromString(reader.getString());
                } else if ("text".equals(fieldName)) {
                    deserializedFileSearchToolCallResultContentItem.text = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedFileSearchToolCallResultContentItem;
        });
    }
}
