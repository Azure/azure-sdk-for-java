// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.assistants;

import com.azure.ai.openai.assistants.implementation.AssistantMessagesImpl;
import com.azure.ai.openai.assistants.models.AssistantMessage;
import com.azure.ai.openai.assistants.models.AssistantMessageFile;
import com.azure.ai.openai.assistants.models.AssistantRole;
import com.azure.ai.openai.assistants.models.ListResponseOfAssistantMessage;
import com.azure.ai.openai.assistants.models.ListResponseOfAssistantMessageFile;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import java.util.HashMap;
import java.util.Map;

/**
 * Initializes a new instance of the synchronous AssistantsClient type.
 */
@ServiceClient(builder = AssistantsClientBuilder.class)
public final class AssistantMessagesClient {
    @Generated
    private final AssistantMessagesImpl serviceClient;

    /**
     * Initializes an instance of AssistantMessagesClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    AssistantMessagesClient(AssistantMessagesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Returns a list of messages from a thread.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     role: String(user/assistant) (Required)
     *     content: String (Required)
     *     file_ids (Optional): [
     *         String (Optional)
     *     ]
     *     metadata (Optional): {
     *         String: String (Optional)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *         }
     *     ]
     *     assistant_id: String (Optional)
     *     run_id: String (Optional)
     *     metadata (Optional): {
     *         String: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread that the message should be created on.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single message within an assistant thread along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createMessageWithResponse(String threadId, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.createMessageWithResponse(threadId, request, requestOptions);
    }

    /**
     * Returns a list of messages from a thread.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is
     * 20.</td>
     * </tr>
     * <tr>
     * <td>order</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending
     * order.</td>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * after=obj_foo in order to fetch the next page of the list.</td>
     * </tr>
     * <tr>
     * <td>before</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * before=obj_foo in order to fetch the previous page of the list.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             thread_id: String (Required)
     *             role: String(user/assistant) (Required)
     *             content (Required): [
     *                  (Required){
     *                 }
     *             ]
     *             assistant_id: String (Optional)
     *             run_id: String (Optional)
     *             metadata (Optional): {
     *                 String: String (Optional)
     *             }
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread from which messages should be listed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listMessagesWithResponse(String threadId, RequestOptions requestOptions) {
        return this.serviceClient.listMessagesWithResponse(threadId, requestOptions);
    }

    /**
     * Retrieves a message associated with a thread.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *         }
     *     ]
     *     assistant_id: String (Optional)
     *     run_id: String (Optional)
     *     metadata (Optional): {
     *         String: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread from which the message should be retrieved.
     * @param messageId The ID of the message to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single message within an assistant thread along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retrieveMessageWithResponse(String threadId, String messageId,
        RequestOptions requestOptions) {
        return this.serviceClient.retrieveMessageWithResponse(threadId, messageId, requestOptions);
    }

    /**
     * Modifies an existing message associated with a thread.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     metadata (Optional): {
     *         String: String (Optional)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *         }
     *     ]
     *     assistant_id: String (Optional)
     *     run_id: String (Optional)
     *     metadata (Optional): {
     *         String: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread containing the message to modify.
     * @param messageId The ID of the message to modify.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single message within an assistant thread along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> modifyMessageWithResponse(String threadId, String messageId, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.modifyMessageWithResponse(threadId, messageId, request, requestOptions);
    }

    /**
     * Returns a list of files associated with a message from a thread.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is
     * 20.</td>
     * </tr>
     * <tr>
     * <td>order</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending
     * order.</td>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * after=obj_foo in order to fetch the next page of the list.</td>
     * </tr>
     * <tr>
     * <td>before</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * before=obj_foo in order to fetch the previous page of the list.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             message_id: String (Required)
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread containing the target message to list files from.
     * @param messageId The ID of the message to list files from.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response data for a requested list of items along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listMessageFilesWithResponse(String threadId, String messageId,
        RequestOptions requestOptions) {
        return this.serviceClient.listMessageFilesWithResponse(threadId, messageId, requestOptions);
    }

    /**
     * Retrieves a file attached to a message within a thread.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     message_id: String (Required)
     * }
     * }</pre>
     * 
     * @param threadId The ID of the thread containing the target message to retrieve the requested file from.
     * @param messageId The ID of the message to retrieve the requested file from.
     * @param fileId The ID of the file to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a file attached to an assistant thread message along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retrieveMessageFileWithResponse(String threadId, String messageId, String fileId,
        RequestOptions requestOptions) {
        return this.serviceClient.retrieveMessageFileWithResponse(threadId, messageId, fileId, requestOptions);
    }

    /**
     * Returns a list of messages from a thread.
     * 
     * @param threadId The ID of the thread that the message should be created on.
     * @param role The role to assign to the new thread message. Only 'user' is currently supported.
     * @param content The textual content to use in the new thread message.
     * @param metadata A set of key/value pairs used to store additional information about the object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single message within an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantMessage createMessage(String threadId, AssistantRole role, String content,
        Map<String, String> metadata) {
        // Generated convenience method for createMessageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Map<String, Object> requestObj = new HashMap<>();
        requestObj.put("role", (role == null ? null : role.toString()));
        requestObj.put("content", content);
        requestObj.put("metadata", metadata);
        BinaryData request = BinaryData.fromObject(requestObj);
        return createMessageWithResponse(threadId, request, requestOptions).getValue().toObject(AssistantMessage.class);
    }

    /**
     * Returns a list of messages from a thread.
     * 
     * @param threadId The ID of the thread that the message should be created on.
     * @param role The role to assign to the new thread message. Only 'user' is currently supported.
     * @param content The textual content to use in the new thread message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single message within an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantMessage createMessage(String threadId, AssistantRole role, String content) {
        // Generated convenience method for createMessageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Map<String, Object> requestObj = new HashMap<>();
        requestObj.put("role", (role == null ? null : role.toString()));
        requestObj.put("content", content);
        BinaryData request = BinaryData.fromObject(requestObj);
        return createMessageWithResponse(threadId, request, requestOptions).getValue().toObject(AssistantMessage.class);
    }

    /**
     * Returns a list of messages from a thread.
     * 
     * @param threadId The ID of the thread from which messages should be listed.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default
     * is 20.
     * @param order Sort order by the created_at timestamp of the objects. asc for ascending order and desc for
     * descending order.
     * @param after A cursor for use in pagination. after is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. before is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include before=obj_foo in order to fetch the previous page of the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response data for a requested list of items.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListResponseOfAssistantMessage listMessages(String threadId, Integer limit, String order, String after,
        String before) {
        // Generated convenience method for listMessagesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order, false);
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after, false);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before, false);
        }
        return listMessagesWithResponse(threadId, requestOptions).getValue()
            .toObject(ListResponseOfAssistantMessage.class);
    }

    /**
     * Returns a list of messages from a thread.
     * 
     * @param threadId The ID of the thread from which messages should be listed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response data for a requested list of items.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListResponseOfAssistantMessage listMessages(String threadId) {
        // Generated convenience method for listMessagesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listMessagesWithResponse(threadId, requestOptions).getValue()
            .toObject(ListResponseOfAssistantMessage.class);
    }

    /**
     * Retrieves a message associated with a thread.
     * 
     * @param threadId The ID of the thread from which the message should be retrieved.
     * @param messageId The ID of the message to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single message within an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantMessage retrieveMessage(String threadId, String messageId) {
        // Generated convenience method for retrieveMessageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return retrieveMessageWithResponse(threadId, messageId, requestOptions).getValue()
            .toObject(AssistantMessage.class);
    }

    /**
     * Modifies an existing message associated with a thread.
     * 
     * @param threadId The ID of the thread containing the message to modify.
     * @param messageId The ID of the message to modify.
     * @param metadata A set of key/value pairs used to store additional information about the object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single message within an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantMessage modifyMessage(String threadId, String messageId, Map<String, String> metadata) {
        // Generated convenience method for modifyMessageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Map<String, Object> requestObj = new HashMap<>();
        requestObj.put("metadata", metadata);
        BinaryData request = BinaryData.fromObject(requestObj);
        return modifyMessageWithResponse(threadId, messageId, request, requestOptions).getValue()
            .toObject(AssistantMessage.class);
    }

    /**
     * Modifies an existing message associated with a thread.
     * 
     * @param threadId The ID of the thread containing the message to modify.
     * @param messageId The ID of the message to modify.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single message within an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantMessage modifyMessage(String threadId, String messageId) {
        // Generated convenience method for modifyMessageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Map<String, Object> requestObj = new HashMap<>();
        BinaryData request = BinaryData.fromObject(requestObj);
        return modifyMessageWithResponse(threadId, messageId, request, requestOptions).getValue()
            .toObject(AssistantMessage.class);
    }

    /**
     * Returns a list of files associated with a message from a thread.
     * 
     * @param threadId The ID of the thread containing the target message to list files from.
     * @param messageId The ID of the message to list files from.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default
     * is 20.
     * @param order Sort order by the created_at timestamp of the objects. asc for ascending order and desc for
     * descending order.
     * @param after A cursor for use in pagination. after is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. before is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include before=obj_foo in order to fetch the previous page of the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response data for a requested list of items.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListResponseOfAssistantMessageFile listMessageFiles(String threadId, String messageId, Integer limit,
        String order, String after, String before) {
        // Generated convenience method for listMessageFilesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order, false);
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after, false);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before, false);
        }
        return listMessageFilesWithResponse(threadId, messageId, requestOptions).getValue()
            .toObject(ListResponseOfAssistantMessageFile.class);
    }

    /**
     * Returns a list of files associated with a message from a thread.
     * 
     * @param threadId The ID of the thread containing the target message to list files from.
     * @param messageId The ID of the message to list files from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response data for a requested list of items.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListResponseOfAssistantMessageFile listMessageFiles(String threadId, String messageId) {
        // Generated convenience method for listMessageFilesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listMessageFilesWithResponse(threadId, messageId, requestOptions).getValue()
            .toObject(ListResponseOfAssistantMessageFile.class);
    }

    /**
     * Retrieves a file attached to a message within a thread.
     * 
     * @param threadId The ID of the thread containing the target message to retrieve the requested file from.
     * @param messageId The ID of the message to retrieve the requested file from.
     * @param fileId The ID of the file to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a file attached to an assistant thread message.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantMessageFile retrieveMessageFile(String threadId, String messageId, String fileId) {
        // Generated convenience method for retrieveMessageFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return retrieveMessageFileWithResponse(threadId, messageId, fileId, requestOptions).getValue()
            .toObject(AssistantMessageFile.class);
    }
}
