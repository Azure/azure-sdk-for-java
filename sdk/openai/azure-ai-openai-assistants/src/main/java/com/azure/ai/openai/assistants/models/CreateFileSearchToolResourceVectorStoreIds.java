// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.util.List;

/**
 * Vector Store IDs associated to the vector store to be passed to the helper.
 */
@Fluent
public final class CreateFileSearchToolResourceVectorStoreIds
    implements JsonSerializable<CreateFileSearchToolResourceVectorStoreIds> {

    /*
     * A list of file IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.
     */
    @Generated
    private final List<String> vectorStoreIds;

    /**
     * Creates an instance of CreateFileSearchToolResourceVectorStoreIds class.
     *
     * @param fileIds the fileIds value to set.
     */
    @Generated
    public CreateFileSearchToolResourceVectorStoreIds(List<String> fileIds) {
        this.vectorStoreIds = fileIds;
    }

    /**
     * Get the fileIds property: A list of file IDs to add to the vector store. There can be a maximum of 10000 files in
     * a vector store.
     *
     * @return the fileIds value.
     */
    @Generated
    public List<String> getVectorStoreIds() {
        return this.vectorStoreIds;
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("vector_store_ids", this.vectorStoreIds, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateFileSearchToolResourceVectorStoreIds from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateFileSearchToolResourceVectorStoreOptions if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateFileSearchToolResourceVectorStoreOptions.
     */
    @Generated
    public static CreateFileSearchToolResourceVectorStoreIds fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> fileIds = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("vector_store_ids".equals(fieldName)) {
                    fileIds = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new CreateFileSearchToolResourceVectorStoreIds(fileIds);
        });
    }
}
