// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * File IDs associated to the vector store to be passed to the helper.
 */
@Fluent
public final class CreateFileSearchToolResourceVectorStoreOptions
    implements JsonSerializable<CreateFileSearchToolResourceVectorStoreOptions> {

    /*
     * A list of file IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.
     */
    @Generated
    private final List<String> fileIds;

    /*
     * A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information
     * about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512
     * characters in length.
     */
    @Generated
    private Map<String, String> metadata;

    /**
     * Get the fileIds property: A list of file IDs to add to the vector store. There can be a maximum of 10000 files in
     * a vector store.
     *
     * @return the fileIds value.
     */
    @Generated
    public List<String> getFileIds() {
        return this.fileIds;
    }

    /**
     * Get the metadata property: A set of up to 16 key/value pairs that can be attached to an object, used for storing
     * additional information about that object in a structured format. Keys may be up to 64 characters in length and
     * values may be up to 512 characters in length.
     *
     * @return the metadata value.
     */
    @Generated
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: A set of up to 16 key/value pairs that can be attached to an object, used for storing
     * additional information about that object in a structured format. Keys may be up to 64 characters in length and
     * values may be up to 512 characters in length.
     *
     * @param metadata the metadata value to set.
     * @return the CreateFileSearchToolResourceVectorStoreOptions object itself.
     */
    @Generated
    public CreateFileSearchToolResourceVectorStoreOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("file_ids", this.fileIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("chunking_strategy", this.chunkingStrategy);
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateFileSearchToolResourceVectorStoreOptions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateFileSearchToolResourceVectorStoreOptions if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateFileSearchToolResourceVectorStoreOptions.
     */
    @Generated
    public static CreateFileSearchToolResourceVectorStoreOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> fileIds = null;
            VectorStoreChunkingStrategyRequest chunkingStrategy = null;
            Map<String, String> metadata = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("file_ids".equals(fieldName)) {
                    fileIds = reader.readArray(reader1 -> reader1.getString());
                } else if ("chunking_strategy".equals(fieldName)) {
                    chunkingStrategy = VectorStoreChunkingStrategyRequest.fromJson(reader);
                } else if ("metadata".equals(fieldName)) {
                    metadata = reader.readMap(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            CreateFileSearchToolResourceVectorStoreOptions deserializedCreateFileSearchToolResourceVectorStoreOptions
                = new CreateFileSearchToolResourceVectorStoreOptions(fileIds, chunkingStrategy);
            deserializedCreateFileSearchToolResourceVectorStoreOptions.metadata = metadata;
            return deserializedCreateFileSearchToolResourceVectorStoreOptions;
        });
    }

    /*
     * The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
     */
    @Generated
    private final VectorStoreChunkingStrategyRequest chunkingStrategy;

    /**
     * Creates an instance of CreateFileSearchToolResourceVectorStoreOptions class.
     *
     * @param fileIds the fileIds value to set.
     */
    public CreateFileSearchToolResourceVectorStoreOptions(List<String> fileIds) {
        this.fileIds = fileIds;
        this.chunkingStrategy = null;
    }

    /**
     * Creates an instance of CreateFileSearchToolResourceVectorStoreOptions class.
     *
     * @param fileIds the fileIds value to set.
     * @param chunkingStrategy the chunkingStrategy value to set.
     */
    @Generated
    public CreateFileSearchToolResourceVectorStoreOptions(List<String> fileIds,
        VectorStoreChunkingStrategyRequest chunkingStrategy) {
        this.fileIds = fileIds;
        this.chunkingStrategy = chunkingStrategy;
    }

    /**
     * Get the chunkingStrategy property: The chunking strategy used to chunk the file(s). If not set, will use the
     * `auto` strategy.
     *
     * @return the chunkingStrategy value.
     */
    @Generated
    public VectorStoreChunkingStrategyRequest getChunkingStrategy() {
        return this.chunkingStrategy;
    }
}
