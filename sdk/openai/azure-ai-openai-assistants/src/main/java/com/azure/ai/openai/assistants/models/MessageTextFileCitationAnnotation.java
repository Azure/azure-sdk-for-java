// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A citation within the message that points to a specific quote from a specific File associated with the assistant or
 * the message. Generated when the assistant uses the 'retrieval' tool to search files.
 */
@Immutable
public final class MessageTextFileCitationAnnotation extends MessageTextAnnotation {

    /*
     * A citation within the message that points to a specific quote from a specific file.
     * Generated when the assistant uses the "retrieval" tool to search files.
     */
    @Generated
    private final MessageTextFileCitationDetails fileCitation;

    /**
     * Creates an instance of MessageTextFileCitationAnnotation class.
     *
     * @param text the text value to set.
     * @param startIndex the startIndex value to set.
     * @param endIndex the endIndex value to set.
     * @param fileCitation the fileCitation value to set.
     */
    @Generated
    private MessageTextFileCitationAnnotation(String text, int startIndex, int endIndex,
        MessageTextFileCitationDetails fileCitation) {
        super(text, startIndex, endIndex);
        this.fileCitation = fileCitation;
    }

    /**
     * Get the fileCitation property: A citation within the message that points to a specific quote from a specific
     * file.
     * Generated when the assistant uses the "retrieval" tool to search files.
     *
     * @return the fileCitation value.
     */
    @Generated
    public MessageTextFileCitationDetails getFileCitation() {
        return this.fileCitation;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", "file_citation");
        jsonWriter.writeStringField("text", getText());
        jsonWriter.writeIntField("start_index", getStartIndex());
        jsonWriter.writeIntField("end_index", getEndIndex());
        jsonWriter.writeJsonField("file_citation", this.fileCitation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessageTextFileCitationAnnotation from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessageTextFileCitationAnnotation if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties or the
     * polymorphic discriminator.
     * @throws IOException If an error occurs while reading the MessageTextFileCitationAnnotation.
     */
    public static MessageTextFileCitationAnnotation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String text = null;
            int startIndex = 0;
            int endIndex = 0;
            MessageTextFileCitationDetails fileCitation = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    String type = reader.getString();
                    if (!"file_citation".equals(type)) {
                        throw new IllegalStateException(
                            "'type' was expected to be non-null and equal to 'file_citation'. The found 'type' was '"
                                + type + "'.");
                    }
                } else if ("text".equals(fieldName)) {
                    text = reader.getString();
                } else if ("start_index".equals(fieldName)) {
                    startIndex = reader.getInt();
                } else if ("end_index".equals(fieldName)) {
                    endIndex = reader.getInt();
                } else if ("file_citation".equals(fieldName)) {
                    fileCitation = MessageTextFileCitationDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new MessageTextFileCitationAnnotation(text, startIndex, endIndex, fileCitation);
        });
    }
}
