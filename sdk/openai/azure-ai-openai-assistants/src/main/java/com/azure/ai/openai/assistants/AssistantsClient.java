// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants;

import com.azure.ai.openai.assistants.implementation.AssistantsClientImpl;
import com.azure.ai.openai.assistants.implementation.MultipartFormDataHelper;
import com.azure.ai.openai.assistants.implementation.models.CreateAssistantFileRequest;
import com.azure.ai.openai.assistants.implementation.models.CreateMessageRequest;
import com.azure.ai.openai.assistants.implementation.models.FileListResponse;
import com.azure.ai.openai.assistants.implementation.models.OpenAIPageableListOfAssistant;
import com.azure.ai.openai.assistants.implementation.models.OpenAIPageableListOfAssistantFile;
import com.azure.ai.openai.assistants.implementation.models.OpenAIPageableListOfMessageFile;
import com.azure.ai.openai.assistants.implementation.models.OpenAIPageableListOfRunStep;
import com.azure.ai.openai.assistants.implementation.models.OpenAIPageableListOfThreadMessage;
import com.azure.ai.openai.assistants.implementation.models.OpenAIPageableListOfThreadRun;
import com.azure.ai.openai.assistants.implementation.models.SubmitToolOutputsToRunRequest;
import com.azure.ai.openai.assistants.implementation.models.UpdateMessageRequest;
import com.azure.ai.openai.assistants.implementation.models.UpdateRunRequest;
import com.azure.ai.openai.assistants.implementation.models.UpdateThreadRequest;
import com.azure.ai.openai.assistants.implementation.models.UploadFileRequest;
import com.azure.ai.openai.assistants.models.Assistant;
import com.azure.ai.openai.assistants.models.AssistantCreationOptions;
import com.azure.ai.openai.assistants.models.AssistantDeletionStatus;
import com.azure.ai.openai.assistants.models.AssistantFile;
import com.azure.ai.openai.assistants.models.AssistantFileDeletionStatus;
import com.azure.ai.openai.assistants.models.AssistantThread;
import com.azure.ai.openai.assistants.models.AssistantThreadCreationOptions;
import com.azure.ai.openai.assistants.models.CreateAndRunThreadOptions;
import com.azure.ai.openai.assistants.models.CreateRunOptions;
import com.azure.ai.openai.assistants.models.FileDeletionStatus;
import com.azure.ai.openai.assistants.models.FileDetails;
import com.azure.ai.openai.assistants.models.FilePurpose;
import com.azure.ai.openai.assistants.models.ListSortOrder;
import com.azure.ai.openai.assistants.models.MessageFile;
import com.azure.ai.openai.assistants.models.MessageRole;
import com.azure.ai.openai.assistants.models.OpenAIFile;
import com.azure.ai.openai.assistants.models.RunStep;
import com.azure.ai.openai.assistants.models.ThreadDeletionStatus;
import com.azure.ai.openai.assistants.models.ThreadMessage;
import com.azure.ai.openai.assistants.models.ThreadRun;
import com.azure.ai.openai.assistants.models.ToolOutput;
import com.azure.ai.openai.assistants.models.UpdateAssistantOptions;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import static com.azure.ai.openai.assistants.implementation.OpenAIUtils.addAzureVersionToRequestOptions;
import com.azure.ai.openai.assistants.implementation.accesshelpers.PageableListAccessHelper;
import com.azure.ai.openai.assistants.models.PageableList;

/**
 * Initializes a new instance of the synchronous AssistantsClient type.
 */
@ServiceClient(builder = AssistantsClientBuilder.class)
public final class AssistantsClient {

    @Generated
    private final AssistantsClientImpl serviceClient;

    /**
     * Creates a new assistant.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     model: String (Required)
     *     name: String (Optional)
     *     description: String (Optional)
     *     instructions: String (Optional)
     *     tools (Optional): [
     *          (Optional){
     *         }
     *     ]
     *     file_ids (Optional): [
     *         String (Optional)
     *     ]
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     name: String (Required)
     *     description: String (Required)
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *         }
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param assistantCreationOptions The request details to use when creating a new assistant.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an assistant that can call the model and use tools along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createAssistantWithResponse(BinaryData assistantCreationOptions,
        RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.createAssistantWithResponse(assistantCreationOptions, requestOptions);
    }

    /**
     * Gets a list of assistants that were previously created.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is
     * 20.</td>
     * </tr>
     * <tr>
     * <td>order</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.
     * Allowed values: "asc", "desc".</td>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * after=obj_foo in order to fetch the next page of the list.</td>
     * </tr>
     * <tr>
     * <td>before</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * before=obj_foo in order to fetch the previous page of the list.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             name: String (Required)
     *             description: String (Required)
     *             model: String (Required)
     *             instructions: String (Required)
     *             tools (Required): [
     *                  (Required){
     *                 }
     *             ]
     *             file_ids (Required): [
     *                 String (Required)
     *             ]
     *             metadata (Required): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of assistants that were previously created along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listAssistantsWithResponse(RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.listAssistantsWithResponse(requestOptions);
    }

    /**
     * Deletes an assistant.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     deleted: boolean (Required)
     *     object: String (Required)
     * }
     * }</pre>
     *
     * @param assistantId The ID of the assistant to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an assistant deletion operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteAssistantWithResponse(String assistantId, RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.deleteAssistantWithResponse(assistantId, requestOptions);
    }

    /**
     * Attaches a previously uploaded file to an assistant for use by tools that can read files.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     file_id: String (Required)
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     assistant_id: String (Required)
     * }
     * }</pre>
     *
     * @param assistantId The ID of the assistant to attach the file to.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a file attached to an assistant, as used by tools that can read files along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createAssistantFileWithResponse(String assistantId, BinaryData request,
        RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.createAssistantFileWithResponse(assistantId, request, requestOptions);
    }

    /**
     * Gets a list of files attached to a specific assistant, as used by tools that can read files.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is
     * 20.</td>
     * </tr>
     * <tr>
     * <td>order</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.
     * Allowed values: "asc", "desc".</td>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * after=obj_foo in order to fetch the next page of the list.</td>
     * </tr>
     * <tr>
     * <td>before</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * before=obj_foo in order to fetch the previous page of the list.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             assistant_id: String (Required)
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     *
     * @param assistantId The ID of the assistant to retrieve the list of attached files for.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of files attached to a specific assistant, as used by tools that can read files along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listAssistantFilesWithResponse(String assistantId, RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.listAssistantFilesWithResponse(assistantId, requestOptions);
    }

    /**
     * Unlinks a previously attached file from an assistant, rendering it unavailable for use by tools that can read
     * files.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     deleted: boolean (Required)
     *     object: String (Required)
     * }
     * }</pre>
     *
     * @param assistantId The ID of the assistant from which the specified file should be unlinked.
     * @param fileId The ID of the file to unlink from the specified assistant.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an assistant file deletion operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteAssistantFileWithResponse(String assistantId, String fileId,
        RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.deleteAssistantFileWithResponse(assistantId, fileId, requestOptions);
    }

    /**
     * Creates a new assistant.
     *
     * @param assistantCreationOptions The request details to use when creating a new assistant.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an assistant that can call the model and use tools.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Assistant createAssistant(AssistantCreationOptions assistantCreationOptions) {
        // Generated convenience method for createAssistantWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createAssistantWithResponse(BinaryData.fromObject(assistantCreationOptions), requestOptions).getValue()
            .toObject(Assistant.class);
    }

    /**
     * Gets a list of assistants that were previously created.
     *
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default
     * is 20.
     * @param order Sort order by the created_at timestamp of the objects. asc for ascending order and desc for
     * descending order.
     * @param after A cursor for use in pagination. after is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. before is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include before=obj_foo in order to fetch the previous page of the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of assistants that were previously created.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PageableList<Assistant> listAssistants(Integer limit, ListSortOrder order, String after, String before) {
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order.toString(), false);
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after, false);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before, false);
        }
        OpenAIPageableListOfAssistant assistantList
            = listAssistantsWithResponse(requestOptions).getValue().toObject(OpenAIPageableListOfAssistant.class);
        return PageableListAccessHelper.create(assistantList.getData(), assistantList.getFirstId(),
            assistantList.getLastId(), assistantList.isHasMore());
    }

    /**
     * Gets a list of assistants that were previously created.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of assistants that were previously created.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PageableList<Assistant> listAssistants() {
        RequestOptions requestOptions = new RequestOptions();
        OpenAIPageableListOfAssistant assistantList
            = listAssistantsWithResponse(requestOptions).getValue().toObject(OpenAIPageableListOfAssistant.class);
        return PageableListAccessHelper.create(assistantList.getData(), assistantList.getFirstId(),
            assistantList.getLastId(), assistantList.isHasMore());
    }

    /**
     * Deletes an assistant.
     *
     * @param assistantId The ID of the assistant to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of an assistant deletion operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantDeletionStatus deleteAssistant(String assistantId) {
        // Generated convenience method for deleteAssistantWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteAssistantWithResponse(assistantId, requestOptions).getValue()
            .toObject(AssistantDeletionStatus.class);
    }

    /**
     * Attaches a previously uploaded file to an assistant for use by tools that can read files.
     *
     * @param assistantId The ID of the assistant to attach the file to.
     * @param fileId The ID of the previously uploaded file to attach.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a file attached to an assistant, as used by tools that can read files.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantFile createAssistantFile(String assistantId, String fileId) {
        // Generated convenience method for createAssistantFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateAssistantFileRequest requestObj = new CreateAssistantFileRequest(fileId);
        BinaryData request = BinaryData.fromObject(requestObj);
        return createAssistantFileWithResponse(assistantId, request, requestOptions).getValue()
            .toObject(AssistantFile.class);
    }

    /**
     * Gets a list of files attached to a specific assistant, as used by tools that can read files.
     *
     * @param assistantId The ID of the assistant to retrieve the list of attached files for.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default
     * is 20.
     * @param order Sort order by the created_at timestamp of the objects. asc for ascending order and desc for
     * descending order.
     * @param after A cursor for use in pagination. after is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. before is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include before=obj_foo in order to fetch the previous page of the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of files attached to a specific assistant, as used by tools that can read files.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PageableList<AssistantFile> listAssistantFiles(String assistantId, Integer limit, ListSortOrder order,
        String after, String before) {
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order.toString(), false);
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after, false);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before, false);
        }
        OpenAIPageableListOfAssistantFile assistantFileList
            = listAssistantFilesWithResponse(assistantId, requestOptions).getValue()
                .toObject(OpenAIPageableListOfAssistantFile.class);
        return PageableListAccessHelper.create(assistantFileList.getData(), assistantFileList.getFirstId(),
            assistantFileList.getLastId(), assistantFileList.isHasMore());
    }

    /**
     * Gets a list of files attached to a specific assistant, as used by tools that can read files.
     *
     * @param assistantId The ID of the assistant to retrieve the list of attached files for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of files attached to a specific assistant, as used by tools that can read files.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PageableList<AssistantFile> listAssistantFiles(String assistantId) {
        RequestOptions requestOptions = new RequestOptions();
        OpenAIPageableListOfAssistantFile assistantFileList
            = listAssistantFilesWithResponse(assistantId, requestOptions).getValue()
                .toObject(OpenAIPageableListOfAssistantFile.class);
        return PageableListAccessHelper.create(assistantFileList.getData(), assistantFileList.getFirstId(),
            assistantFileList.getLastId(), assistantFileList.isHasMore());
    }

    /**
     * Unlinks a previously attached file from an assistant, rendering it unavailable for use by tools that can read
     * files.
     *
     * @param assistantId The ID of the assistant from which the specified file should be unlinked.
     * @param fileId The ID of the file to unlink from the specified assistant.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of an assistant file deletion operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantFileDeletionStatus deleteAssistantFile(String assistantId, String fileId) {
        // Generated convenience method for deleteAssistantFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteAssistantFileWithResponse(assistantId, fileId, requestOptions).getValue()
            .toObject(AssistantFileDeletionStatus.class);
    }

    /**
     * Initializes an instance of AssistantsClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    AssistantsClient(AssistantsClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Retrieves an existing assistant.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     name: String (Required)
     *     description: String (Required)
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *         }
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param assistantId The ID of the assistant to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an assistant that can call the model and use tools along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAssistantWithResponse(String assistantId, RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.getAssistantWithResponse(assistantId, requestOptions);
    }

    /**
     * Retrieves a file attached to an assistant.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     assistant_id: String (Required)
     * }
     * }</pre>
     *
     * @param assistantId The ID of the assistant associated with the attached file.
     * @param fileId The ID of the file to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a file attached to an assistant, as used by tools that can read files along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAssistantFileWithResponse(String assistantId, String fileId,
        RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.getAssistantFileWithResponse(assistantId, fileId, requestOptions);
    }

    /**
     * Creates a new thread. Threads contain messages and can be run by assistants.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     messages (Optional): [
     *          (Optional){
     *             role: String(user/assistant) (Required)
     *             content: String (Required)
     *             file_ids (Optional): [
     *                 String (Optional)
     *             ]
     *             metadata (Optional): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param assistantThreadCreationOptions The details used to create a new assistant thread.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a single thread associated with an assistant along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createThreadWithResponse(BinaryData assistantThreadCreationOptions,
        RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.createThreadWithResponse(assistantThreadCreationOptions, requestOptions);
    }

    /**
     * Gets information about an existing thread.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param threadId The ID of the thread to retrieve information about.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about an existing thread along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getThreadWithResponse(String threadId, RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.getThreadWithResponse(threadId, requestOptions);
    }

    /**
     * Deletes an existing thread.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     deleted: boolean (Required)
     *     object: String (Required)
     * }
     * }</pre>
     *
     * @param threadId The ID of the thread to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a thread deletion operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteThreadWithResponse(String threadId, RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.deleteThreadWithResponse(threadId, requestOptions);
    }

    /**
     * Creates a new message on a specified thread.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     role: String(user/assistant) (Required)
     *     content: String (Required)
     *     file_ids (Optional): [
     *         String (Optional)
     *     ]
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *         }
     *     ]
     *     assistant_id: String (Optional)
     *     run_id: String (Optional)
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param threadId The ID of the thread to create the new message on.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single, existing message within an assistant thread along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createMessageWithResponse(String threadId, BinaryData request,
        RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.createMessageWithResponse(threadId, request, requestOptions);
    }

    /**
     * Gets a list of messages that exist on a thread.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is
     * 20.</td>
     * </tr>
     * <tr>
     * <td>order</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.
     * Allowed values: "asc", "desc".</td>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * after=obj_foo in order to fetch the next page of the list.</td>
     * </tr>
     * <tr>
     * <td>before</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * before=obj_foo in order to fetch the previous page of the list.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             thread_id: String (Required)
     *             role: String(user/assistant) (Required)
     *             content (Required): [
     *                  (Required){
     *                 }
     *             ]
     *             assistant_id: String (Optional)
     *             run_id: String (Optional)
     *             file_ids (Required): [
     *                 String (Required)
     *             ]
     *             metadata (Required): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     *
     * @param threadId The ID of the thread to list messages from.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of messages that exist on a thread along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listMessagesWithResponse(String threadId, RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.listMessagesWithResponse(threadId, requestOptions);
    }

    /**
     * Gets an existing message from an existing thread.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *         }
     *     ]
     *     assistant_id: String (Optional)
     *     run_id: String (Optional)
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param threadId The ID of the thread to retrieve the specified message from.
     * @param messageId The ID of the message to retrieve from the specified thread.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an existing message from an existing thread along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getMessageWithResponse(String threadId, String messageId,
        RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.getMessageWithResponse(threadId, messageId, requestOptions);
    }

    /**
     * Gets a list of previously uploaded files associated with a message from a thread.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is
     * 20.</td>
     * </tr>
     * <tr>
     * <td>order</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.
     * Allowed values: "asc", "desc".</td>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * after=obj_foo in order to fetch the next page of the list.</td>
     * </tr>
     * <tr>
     * <td>before</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * before=obj_foo in order to fetch the previous page of the list.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             message_id: String (Required)
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     *
     * @param threadId The ID of the thread containing the message to list files from.
     * @param messageId The ID of the message to list files from.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of previously uploaded files associated with a message from a thread along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listMessageFilesWithResponse(String threadId, String messageId,
        RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.listMessageFilesWithResponse(threadId, messageId, requestOptions);
    }

    /**
     * Gets information about a file attachment to a message within a thread.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     message_id: String (Required)
     * }
     * }</pre>
     *
     * @param threadId The ID of the thread containing the message to get information from.
     * @param messageId The ID of the message to get information from.
     * @param fileId The ID of the file to get information about.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a file attachment to a message within a thread along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getMessageFileWithResponse(String threadId, String messageId, String fileId,
        RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.getMessageFileWithResponse(threadId, messageId, fileId, requestOptions);
    }

    /**
     * Creates a new run for an assistant thread.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     assistant_id: String (Required)
     *     model: String (Optional)
     *     instructions: String (Optional)
     *     additional_instructions: String (Optional)
     *     tools (Optional): [
     *          (Optional){
     *         }
     *     ]
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Optional): {
     *     }
     *     last_error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *     }
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *         }
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     created_at: long (Required)
     *     expires_at: OffsetDateTime (Required)
     *     started_at: OffsetDateTime (Required)
     *     completed_at: OffsetDateTime (Required)
     *     cancelled_at: OffsetDateTime (Required)
     *     failed_at: OffsetDateTime (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param threadId The ID of the thread to run.
     * @param createRunOptions The details for the run to create.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data representing a single evaluation run of an assistant thread along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createRunWithResponse(String threadId, BinaryData createRunOptions,
        RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.createRunWithResponse(threadId, createRunOptions, requestOptions);
    }

    /**
     * Gets a list of runs for a specified thread.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is
     * 20.</td>
     * </tr>
     * <tr>
     * <td>order</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.
     * Allowed values: "asc", "desc".</td>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * after=obj_foo in order to fetch the next page of the list.</td>
     * </tr>
     * <tr>
     * <td>before</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * before=obj_foo in order to fetch the previous page of the list.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             thread_id: String (Required)
     *             assistant_id: String (Required)
     *             status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *             required_action (Optional): {
     *             }
     *             last_error (Required): {
     *                 code: String (Required)
     *                 message: String (Required)
     *             }
     *             model: String (Required)
     *             instructions: String (Required)
     *             tools (Required): [
     *                  (Required){
     *                 }
     *             ]
     *             file_ids (Required): [
     *                 String (Required)
     *             ]
     *             created_at: long (Required)
     *             expires_at: OffsetDateTime (Required)
     *             started_at: OffsetDateTime (Required)
     *             completed_at: OffsetDateTime (Required)
     *             cancelled_at: OffsetDateTime (Required)
     *             failed_at: OffsetDateTime (Required)
     *             metadata (Required): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     *
     * @param threadId The ID of the thread to list runs from.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of runs for a specified thread along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listRunsWithResponse(String threadId, RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.listRunsWithResponse(threadId, requestOptions);
    }

    /**
     * Gets an existing run from an existing thread.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Optional): {
     *     }
     *     last_error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *     }
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *         }
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     created_at: long (Required)
     *     expires_at: OffsetDateTime (Required)
     *     started_at: OffsetDateTime (Required)
     *     completed_at: OffsetDateTime (Required)
     *     cancelled_at: OffsetDateTime (Required)
     *     failed_at: OffsetDateTime (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param threadId The ID of the thread to retrieve run information from.
     * @param runId The ID of the thread to retrieve information about.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an existing run from an existing thread along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRunWithResponse(String threadId, String runId, RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.getRunWithResponse(threadId, runId, requestOptions);
    }

    /**
     * Submits outputs from tools as requested by tool calls in a run. Runs that need submitted tool outputs will have a
     * status of 'requires_action' with a required_action.type of 'submit_tool_outputs'.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     tool_outputs (Required): [
     *          (Required){
     *             tool_call_id: String (Optional)
     *             output: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Optional): {
     *     }
     *     last_error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *     }
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *         }
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     created_at: long (Required)
     *     expires_at: OffsetDateTime (Required)
     *     started_at: OffsetDateTime (Required)
     *     completed_at: OffsetDateTime (Required)
     *     cancelled_at: OffsetDateTime (Required)
     *     failed_at: OffsetDateTime (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param threadId The ID of the thread that was run.
     * @param runId The ID of the run that requires tool outputs.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data representing a single evaluation run of an assistant thread along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> submitToolOutputsToRunWithResponse(String threadId, String runId, BinaryData request,
        RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.submitToolOutputsToRunWithResponse(threadId, runId, request, requestOptions);
    }

    /**
     * Cancels a run of an in progress thread.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Optional): {
     *     }
     *     last_error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *     }
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *         }
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     created_at: long (Required)
     *     expires_at: OffsetDateTime (Required)
     *     started_at: OffsetDateTime (Required)
     *     completed_at: OffsetDateTime (Required)
     *     cancelled_at: OffsetDateTime (Required)
     *     failed_at: OffsetDateTime (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param threadId The ID of the thread being run.
     * @param runId The ID of the run to cancel.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data representing a single evaluation run of an assistant thread along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> cancelRunWithResponse(String threadId, String runId, RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.cancelRunWithResponse(threadId, runId, requestOptions);
    }

    /**
     * Creates a new assistant thread and immediately starts a run using that new thread.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     assistant_id: String (Required)
     *     thread (Optional): {
     *         messages (Optional): [
     *              (Optional){
     *                 role: String(user/assistant) (Required)
     *                 content: String (Required)
     *                 file_ids (Optional): [
     *                     String (Optional)
     *                 ]
     *                 metadata (Optional): {
     *                     String: String (Required)
     *                 }
     *             }
     *         ]
     *         metadata (Optional): {
     *             String: String (Required)
     *         }
     *     }
     *     model: String (Optional)
     *     instructions: String (Optional)
     *     tools (Optional): [
     *          (Optional){
     *         }
     *     ]
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Optional): {
     *     }
     *     last_error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *     }
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *         }
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     created_at: long (Required)
     *     expires_at: OffsetDateTime (Required)
     *     started_at: OffsetDateTime (Required)
     *     completed_at: OffsetDateTime (Required)
     *     cancelled_at: OffsetDateTime (Required)
     *     failed_at: OffsetDateTime (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param createAndRunThreadOptions The details used when creating and immediately running a new assistant thread.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data representing a single evaluation run of an assistant thread along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createThreadAndRunWithResponse(BinaryData createAndRunThreadOptions,
        RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.createThreadAndRunWithResponse(createAndRunThreadOptions, requestOptions);
    }

    /**
     * Gets a single run step from a thread run.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     type: String(message_creation/tool_calls) (Required)
     *     assistant_id: String (Required)
     *     thread_id: String (Required)
     *     run_id: String (Required)
     *     status: String(in_progress/cancelled/failed/completed/expired) (Required)
     *     step_details (Required): {
     *     }
     *     last_error (Required): {
     *         code: String(server_error/rate_limit_exceeded) (Required)
     *         message: String (Required)
     *     }
     *     created_at: long (Required)
     *     expired_at: OffsetDateTime (Required)
     *     completed_at: OffsetDateTime (Required)
     *     cancelled_at: OffsetDateTime (Required)
     *     failed_at: OffsetDateTime (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param threadId The ID of the thread that was run.
     * @param runId The ID of the specific run to retrieve the step from.
     * @param stepId The ID of the step to retrieve information about.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single run step from a thread run along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRunStepWithResponse(String threadId, String runId, String stepId,
        RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.getRunStepWithResponse(threadId, runId, stepId, requestOptions);
    }

    /**
     * Gets a list of run steps from a thread run.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is
     * 20.</td>
     * </tr>
     * <tr>
     * <td>order</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.
     * Allowed values: "asc", "desc".</td>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * after=obj_foo in order to fetch the next page of the list.</td>
     * </tr>
     * <tr>
     * <td>before</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * before=obj_foo in order to fetch the previous page of the list.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             type: String(message_creation/tool_calls) (Required)
     *             assistant_id: String (Required)
     *             thread_id: String (Required)
     *             run_id: String (Required)
     *             status: String(in_progress/cancelled/failed/completed/expired) (Required)
     *             step_details (Required): {
     *             }
     *             last_error (Required): {
     *                 code: String(server_error/rate_limit_exceeded) (Required)
     *                 message: String (Required)
     *             }
     *             created_at: long (Required)
     *             expired_at: OffsetDateTime (Required)
     *             completed_at: OffsetDateTime (Required)
     *             cancelled_at: OffsetDateTime (Required)
     *             failed_at: OffsetDateTime (Required)
     *             metadata (Required): {
     *                 String: String (Required)
     *             }
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     *
     * @param threadId The ID of the thread that was run.
     * @param runId The ID of the run to list steps from.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of run steps from a thread run along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listRunStepsWithResponse(String threadId, String runId, RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.listRunStepsWithResponse(threadId, runId, requestOptions);
    }

    /**
     * Gets a list of previously uploaded files.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>purpose</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A value that, when provided, limits list results to files matching the corresponding purpose. Allowed values:
     * "fine-tune", "fine-tune-results", "assistants", "assistants_output".</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             object: String (Required)
     *             id: String (Required)
     *             bytes: int (Required)
     *             filename: String (Required)
     *             created_at: long (Required)
     *             purpose: String(fine-tune/fine-tune-results/assistants/assistants_output) (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of previously uploaded files along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listFilesWithResponse(RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.listFilesWithResponse(requestOptions);
    }

    /**
     * Delete a previously uploaded file.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     deleted: boolean (Required)
     *     object: String (Required)
     * }
     * }</pre>
     *
     * @param fileId The ID of the file to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a status response from a file deletion operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteFileWithResponse(String fileId, RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.deleteFileWithResponse(fileId, requestOptions);
    }

    /**
     * Retrieves an existing assistant.
     *
     * @param assistantId The ID of the assistant to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an assistant that can call the model and use tools.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Assistant getAssistant(String assistantId) {
        // Generated convenience method for getAssistantWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAssistantWithResponse(assistantId, requestOptions).getValue().toObject(Assistant.class);
    }

    /**
     * Retrieves a file attached to an assistant.
     *
     * @param assistantId The ID of the assistant associated with the attached file.
     * @param fileId The ID of the file to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a file attached to an assistant, as used by tools that can read files.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantFile getAssistantFile(String assistantId, String fileId) {
        // Generated convenience method for getAssistantFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAssistantFileWithResponse(assistantId, fileId, requestOptions).getValue()
            .toObject(AssistantFile.class);
    }

    /**
     * Creates a new thread. Threads contain messages and can be run by assistants.
     *
     * @param assistantThreadCreationOptions The details used to create a new assistant thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a single thread associated with an assistant.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantThread createThread(AssistantThreadCreationOptions assistantThreadCreationOptions) {
        // Generated convenience method for createThreadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createThreadWithResponse(BinaryData.fromObject(assistantThreadCreationOptions), requestOptions)
            .getValue()
            .toObject(AssistantThread.class);
    }

    /**
     * Gets information about an existing thread.
     *
     * @param threadId The ID of the thread to retrieve information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about an existing thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantThread getThread(String threadId) {
        // Generated convenience method for getThreadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getThreadWithResponse(threadId, requestOptions).getValue().toObject(AssistantThread.class);
    }

    /**
     * Deletes an existing thread.
     *
     * @param threadId The ID of the thread to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of a thread deletion operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThreadDeletionStatus deleteThread(String threadId) {
        // Generated convenience method for deleteThreadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteThreadWithResponse(threadId, requestOptions).getValue().toObject(ThreadDeletionStatus.class);
    }

    /**
     * Creates a new message on a specified thread.
     *
     * @param threadId The ID of the thread to create the new message on.
     * @param role The role to associate with the new message.
     * @param content The textual content for the new message.
     * @param fileIds A list of up to 10 file IDs to associate with the message, as used by tools like
     * 'code_interpreter' or 'retrieval' that can read files.
     * @param metadata A set of up to 16 key/value pairs that can be attached to an object, used for storing additional
     * information about that object in a structured format. Keys may be up to 64 characters in length and values may be
     * up to 512 characters in length.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single, existing message within an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThreadMessage createMessage(String threadId, MessageRole role, String content, List<String> fileIds,
        Map<String, String> metadata) {
        // Generated convenience method for createMessageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateMessageRequest requestObj
            = new CreateMessageRequest(role, content).setFileIds(fileIds).setMetadata(metadata);
        BinaryData request = BinaryData.fromObject(requestObj);
        return createMessageWithResponse(threadId, request, requestOptions).getValue().toObject(ThreadMessage.class);
    }

    /**
     * Creates a new message on a specified thread.
     *
     * @param threadId The ID of the thread to create the new message on.
     * @param role The role to associate with the new message.
     * @param content The textual content for the new message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single, existing message within an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThreadMessage createMessage(String threadId, MessageRole role, String content) {
        // Generated convenience method for createMessageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateMessageRequest requestObj = new CreateMessageRequest(role, content);
        BinaryData request = BinaryData.fromObject(requestObj);
        return createMessageWithResponse(threadId, request, requestOptions).getValue().toObject(ThreadMessage.class);
    }

    /**
     * Gets a list of messages that exist on a thread.
     *
     * @param threadId The ID of the thread to list messages from.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default
     * is 20.
     * @param order Sort order by the created_at timestamp of the objects. asc for ascending order and desc for
     * descending order.
     * @param after A cursor for use in pagination. after is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. before is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include before=obj_foo in order to fetch the previous page of the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of messages that exist on a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PageableList<ThreadMessage> listMessages(String threadId, Integer limit, ListSortOrder order, String after,
        String before) {
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order.toString(), false);
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after, false);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before, false);
        }
        OpenAIPageableListOfThreadMessage threadMessageList
            = listMessagesWithResponse(threadId, requestOptions).getValue()
                .toObject(OpenAIPageableListOfThreadMessage.class);
        return PageableListAccessHelper.create(threadMessageList.getData(), threadMessageList.getFirstId(),
            threadMessageList.getLastId(), threadMessageList.isHasMore());
    }

    /**
     * Gets a list of messages that exist on a thread.
     *
     * @param threadId The ID of the thread to list messages from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of messages that exist on a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PageableList<ThreadMessage> listMessages(String threadId) {
        RequestOptions requestOptions = new RequestOptions();
        OpenAIPageableListOfThreadMessage threadMessageList
            = listMessagesWithResponse(threadId, requestOptions).getValue()
                .toObject(OpenAIPageableListOfThreadMessage.class);
        return PageableListAccessHelper.create(threadMessageList.getData(), threadMessageList.getFirstId(),
            threadMessageList.getLastId(), threadMessageList.isHasMore());
    }

    /**
     * Gets an existing message from an existing thread.
     *
     * @param threadId The ID of the thread to retrieve the specified message from.
     * @param messageId The ID of the message to retrieve from the specified thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing message from an existing thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThreadMessage getMessage(String threadId, String messageId) {
        // Generated convenience method for getMessageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getMessageWithResponse(threadId, messageId, requestOptions).getValue().toObject(ThreadMessage.class);
    }

    /**
     * Gets a list of previously uploaded files associated with a message from a thread.
     *
     * @param threadId The ID of the thread containing the message to list files from.
     * @param messageId The ID of the message to list files from.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default
     * is 20.
     * @param order Sort order by the created_at timestamp of the objects. asc for ascending order and desc for
     * descending order.
     * @param after A cursor for use in pagination. after is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. before is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include before=obj_foo in order to fetch the previous page of the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of previously uploaded files associated with a message from a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PageableList<MessageFile> listMessageFiles(String threadId, String messageId, Integer limit,
        ListSortOrder order, String after, String before) {
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order.toString(), false);
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after, false);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before, false);
        }
        OpenAIPageableListOfMessageFile messageFileList
            = listMessageFilesWithResponse(threadId, messageId, requestOptions).getValue()
                .toObject(OpenAIPageableListOfMessageFile.class);
        return PageableListAccessHelper.create(messageFileList.getData(), messageFileList.getFirstId(),
            messageFileList.getLastId(), messageFileList.isHasMore());
    }

    /**
     * Gets a list of previously uploaded files associated with a message from a thread.
     *
     * @param threadId The ID of the thread containing the message to list files from.
     * @param messageId The ID of the message to list files from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of previously uploaded files associated with a message from a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PageableList<MessageFile> listMessageFiles(String threadId, String messageId) {
        RequestOptions requestOptions = new RequestOptions();
        OpenAIPageableListOfMessageFile messageFileList
            = listMessageFilesWithResponse(threadId, messageId, requestOptions).getValue()
                .toObject(OpenAIPageableListOfMessageFile.class);
        return PageableListAccessHelper.create(messageFileList.getData(), messageFileList.getFirstId(),
            messageFileList.getLastId(), messageFileList.isHasMore());
    }

    /**
     * Gets information about a file attachment to a message within a thread.
     *
     * @param threadId The ID of the thread containing the message to get information from.
     * @param messageId The ID of the message to get information from.
     * @param fileId The ID of the file to get information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a file attachment to a message within a thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MessageFile getMessageFile(String threadId, String messageId, String fileId) {
        // Generated convenience method for getMessageFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getMessageFileWithResponse(threadId, messageId, fileId, requestOptions).getValue()
            .toObject(MessageFile.class);
    }

    /**
     * Gets a list of runs for a specified thread.
     *
     * @param threadId The ID of the thread to list runs from.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default
     * is 20.
     * @param order Sort order by the created_at timestamp of the objects. asc for ascending order and desc for
     * descending order.
     * @param after A cursor for use in pagination. after is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. before is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include before=obj_foo in order to fetch the previous page of the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of runs for a specified thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PageableList<ThreadRun> listRuns(String threadId, Integer limit, ListSortOrder order, String after,
        String before) {
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order.toString(), false);
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after, false);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before, false);
        }
        OpenAIPageableListOfThreadRun threadRunList
            = listRunsWithResponse(threadId, requestOptions).getValue().toObject(OpenAIPageableListOfThreadRun.class);
        return PageableListAccessHelper.create(threadRunList.getData(), threadRunList.getFirstId(),
            threadRunList.getLastId(), threadRunList.isHasMore());
    }

    /**
     * Gets a list of runs for a specified thread.
     *
     * @param threadId The ID of the thread to list runs from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of runs for a specified thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PageableList<ThreadRun> listRuns(String threadId) {
        RequestOptions requestOptions = new RequestOptions();
        OpenAIPageableListOfThreadRun threadRunList
            = listRunsWithResponse(threadId, requestOptions).getValue().toObject(OpenAIPageableListOfThreadRun.class);
        return PageableListAccessHelper.create(threadRunList.getData(), threadRunList.getFirstId(),
            threadRunList.getLastId(), threadRunList.isHasMore());
    }

    /**
     * Gets an existing run from an existing thread.
     *
     * @param threadId The ID of the thread to retrieve run information from.
     * @param runId The ID of the thread to retrieve information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing run from an existing thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThreadRun getRun(String threadId, String runId) {
        // Generated convenience method for getRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getRunWithResponse(threadId, runId, requestOptions).getValue().toObject(ThreadRun.class);
    }

    /**
     * Submits outputs from tools as requested by tool calls in a run. Runs that need submitted tool outputs will have a
     * status of 'requires_action' with a required_action.type of 'submit_tool_outputs'.
     *
     * @param threadId The ID of the thread that was run.
     * @param runId The ID of the run that requires tool outputs.
     * @param toolOutputs The list of tool outputs requested by tool calls from the specified run.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThreadRun submitToolOutputsToRun(String threadId, String runId, List<ToolOutput> toolOutputs) {
        // Generated convenience method for submitToolOutputsToRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        SubmitToolOutputsToRunRequest requestObj = new SubmitToolOutputsToRunRequest(toolOutputs);
        BinaryData request = BinaryData.fromObject(requestObj);
        return submitToolOutputsToRunWithResponse(threadId, runId, request, requestOptions).getValue()
            .toObject(ThreadRun.class);
    }

    /**
     * Cancels a run of an in progress thread.
     *
     * @param threadId The ID of the thread being run.
     * @param runId The ID of the run to cancel.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThreadRun cancelRun(String threadId, String runId) {
        // Generated convenience method for cancelRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cancelRunWithResponse(threadId, runId, requestOptions).getValue().toObject(ThreadRun.class);
    }

    /**
     * Creates a new assistant thread and immediately starts a run using that new thread.
     *
     * @param createAndRunThreadOptions The details used when creating and immediately running a new assistant thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThreadRun createThreadAndRun(CreateAndRunThreadOptions createAndRunThreadOptions) {
        // Generated convenience method for createThreadAndRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createThreadAndRunWithResponse(BinaryData.fromObject(createAndRunThreadOptions), requestOptions)
            .getValue()
            .toObject(ThreadRun.class);
    }

    /**
     * Gets a single run step from a thread run.
     *
     * @param threadId The ID of the thread that was run.
     * @param runId The ID of the specific run to retrieve the step from.
     * @param stepId The ID of the step to retrieve information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single run step from a thread run.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RunStep getRunStep(String threadId, String runId, String stepId) {
        // Generated convenience method for getRunStepWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getRunStepWithResponse(threadId, runId, stepId, requestOptions).getValue().toObject(RunStep.class);
    }

    /**
     * Gets a list of run steps from a thread run.
     *
     * @param threadId The ID of the thread that was run.
     * @param runId The ID of the run to list steps from.
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default
     * is 20.
     * @param order Sort order by the created_at timestamp of the objects. asc for ascending order and desc for
     * descending order.
     * @param after A cursor for use in pagination. after is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include after=obj_foo in order to fetch the next page of the list.
     * @param before A cursor for use in pagination. before is an object ID that defines your place in the list. For
     * instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can
     * include before=obj_foo in order to fetch the previous page of the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of run steps from a thread run.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PageableList<RunStep> listRunSteps(String threadId, String runId, Integer limit, ListSortOrder order,
        String after, String before) {
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (order != null) {
            requestOptions.addQueryParam("order", order.toString(), false);
        }
        if (after != null) {
            requestOptions.addQueryParam("after", after, false);
        }
        if (before != null) {
            requestOptions.addQueryParam("before", before, false);
        }
        OpenAIPageableListOfRunStep runStepList = listRunStepsWithResponse(threadId, runId, requestOptions).getValue()
            .toObject(OpenAIPageableListOfRunStep.class);
        return PageableListAccessHelper.create(runStepList.getData(), runStepList.getFirstId(), runStepList.getLastId(),
            runStepList.isHasMore());
    }

    /**
     * Gets a list of run steps from a thread run.
     *
     * @param threadId The ID of the thread that was run.
     * @param runId The ID of the run to list steps from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of run steps from a thread run.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PageableList<RunStep> listRunSteps(String threadId, String runId) {
        RequestOptions requestOptions = new RequestOptions();
        OpenAIPageableListOfRunStep runStepList = listRunStepsWithResponse(threadId, runId, requestOptions).getValue()
            .toObject(OpenAIPageableListOfRunStep.class);
        return PageableListAccessHelper.create(runStepList.getData(), runStepList.getFirstId(), runStepList.getLastId(),
            runStepList.isHasMore());
    }

    /**
     * Gets a list of previously uploaded files.
     *
     * @param purpose A value that, when provided, limits list results to files matching the corresponding purpose.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of previously uploaded files.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<OpenAIFile> listFiles(FilePurpose purpose) {
        RequestOptions requestOptions = new RequestOptions();
        if (purpose != null) {
            requestOptions.addQueryParam("purpose", purpose.toString(), false);
        }
        return listFilesWithResponse(requestOptions).getValue().toObject(FileListResponse.class).getData();
    }

    /**
     * Gets a list of previously uploaded files.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of previously uploaded files.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<OpenAIFile> listFiles() {
        // Generated convenience method for listFilesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listFilesWithResponse(requestOptions).getValue().toObject(FileListResponse.class).getData();
    }

    /**
     * Delete a previously uploaded file.
     *
     * @param fileId The ID of the file to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a status response from a file deletion operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FileDeletionStatus deleteFile(String fileId) {
        // Generated convenience method for deleteFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteFileWithResponse(fileId, requestOptions).getValue().toObject(FileDeletionStatus.class);
    }

    /**
     * Modifies an existing assistant.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     model: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     instructions: String (Optional)
     *     tools (Optional): [
     *          (Optional){
     *         }
     *     ]
     *     file_ids (Optional): [
     *         String (Optional)
     *     ]
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     name: String (Required)
     *     description: String (Required)
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *         }
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param assistantId The ID of the assistant to modify.
     * @param updateAssistantOptions The request details to use when modifying an existing assistant.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an assistant that can call the model and use tools along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateAssistantWithResponse(String assistantId, BinaryData updateAssistantOptions,
        RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.updateAssistantWithResponse(assistantId, updateAssistantOptions, requestOptions);
    }

    /**
     * Modifies an existing thread.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param threadId The ID of the thread to modify.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a single thread associated with an assistant along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateThreadWithResponse(String threadId, BinaryData request,
        RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.updateThreadWithResponse(threadId, request, requestOptions);
    }

    /**
     * Modifies an existing message on an existing thread.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     thread_id: String (Required)
     *     role: String(user/assistant) (Required)
     *     content (Required): [
     *          (Required){
     *         }
     *     ]
     *     assistant_id: String (Optional)
     *     run_id: String (Optional)
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param threadId The ID of the thread containing the specified message to modify.
     * @param messageId The ID of the message to modify on the specified thread.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single, existing message within an assistant thread along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateMessageWithResponse(String threadId, String messageId, BinaryData request,
        RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.updateMessageWithResponse(threadId, messageId, request, requestOptions);
    }

    /**
     * Modifies an existing thread run.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     thread_id: String (Required)
     *     assistant_id: String (Required)
     *     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)
     *     required_action (Optional): {
     *     }
     *     last_error (Required): {
     *         code: String (Required)
     *         message: String (Required)
     *     }
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *         }
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     created_at: long (Required)
     *     expires_at: OffsetDateTime (Required)
     *     started_at: OffsetDateTime (Required)
     *     completed_at: OffsetDateTime (Required)
     *     cancelled_at: OffsetDateTime (Required)
     *     failed_at: OffsetDateTime (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param threadId The ID of the thread associated with the specified run.
     * @param runId The ID of the run to modify.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data representing a single evaluation run of an assistant thread along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateRunWithResponse(String threadId, String runId, BinaryData request,
        RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.updateRunWithResponse(threadId, runId, request, requestOptions);
    }

    /**
     * Uploads a file for use by other operations.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     bytes: int (Required)
     *     filename: String (Required)
     *     created_at: long (Required)
     *     purpose: String(fine-tune/fine-tune-results/assistants/assistants_output) (Required)
     * }
     * }</pre>
     *
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an assistant that can call the model and use tools along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryData> uploadFileWithResponse(BinaryData request, RequestOptions requestOptions) {
        // Protocol API requires serialization of parts with content-disposition and data, as operation 'uploadFile' is
        // 'multipart/form-data'
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.uploadFileWithResponse(request, requestOptions);
    }

    /**
     * Returns information about a specific file. Does not retrieve file content.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     object: String (Required)
     *     id: String (Required)
     *     bytes: int (Required)
     *     filename: String (Required)
     *     created_at: long (Required)
     *     purpose: String(fine-tune/fine-tune-results/assistants/assistants_output) (Required)
     * }
     * }</pre>
     *
     * @param fileId The ID of the file to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an assistant that can call the model and use tools along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getFileWithResponse(String fileId, RequestOptions requestOptions) {
        addAzureVersionToRequestOptions(serviceClient.getEndpoint(), requestOptions, serviceClient.getServiceVersion());
        return this.serviceClient.getFileWithResponse(fileId, requestOptions);
    }

    /**
     * Modifies an existing assistant.
     *
     * @param assistantId The ID of the assistant to modify.
     * @param updateAssistantOptions The request details to use when modifying an existing assistant.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an assistant that can call the model and use tools.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Assistant updateAssistant(String assistantId, UpdateAssistantOptions updateAssistantOptions) {
        // Generated convenience method for updateAssistantWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return updateAssistantWithResponse(assistantId, BinaryData.fromObject(updateAssistantOptions), requestOptions)
            .getValue()
            .toObject(Assistant.class);
    }

    /**
     * Modifies an existing thread.
     *
     * @param threadId The ID of the thread to modify.
     * @param metadata A set of up to 16 key/value pairs that can be attached to an object, used for storing additional
     * information about that object in a structured format. Keys may be up to 64 characters in length and values may be
     * up to 512 characters in length.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a single thread associated with an assistant.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantThread updateThread(String threadId, Map<String, String> metadata) {
        // Generated convenience method for updateThreadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateThreadRequest requestObj = new UpdateThreadRequest().setMetadata(metadata);
        BinaryData request = BinaryData.fromObject(requestObj);
        return updateThreadWithResponse(threadId, request, requestOptions).getValue().toObject(AssistantThread.class);
    }

    /**
     * Modifies an existing thread.
     *
     * @param threadId The ID of the thread to modify.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a single thread associated with an assistant.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssistantThread updateThread(String threadId) {
        // Generated convenience method for updateThreadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateThreadRequest requestObj = new UpdateThreadRequest();
        BinaryData request = BinaryData.fromObject(requestObj);
        return updateThreadWithResponse(threadId, request, requestOptions).getValue().toObject(AssistantThread.class);
    }

    /**
     * Modifies an existing message on an existing thread.
     *
     * @param threadId The ID of the thread containing the specified message to modify.
     * @param messageId The ID of the message to modify on the specified thread.
     * @param metadata A set of up to 16 key/value pairs that can be attached to an object, used for storing additional
     * information about that object in a structured format. Keys may be up to 64 characters in length and values may be
     * up to 512 characters in length.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single, existing message within an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThreadMessage updateMessage(String threadId, String messageId, Map<String, String> metadata) {
        // Generated convenience method for updateMessageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateMessageRequest requestObj = new UpdateMessageRequest().setMetadata(metadata);
        BinaryData request = BinaryData.fromObject(requestObj);
        return updateMessageWithResponse(threadId, messageId, request, requestOptions).getValue()
            .toObject(ThreadMessage.class);
    }

    /**
     * Modifies an existing message on an existing thread.
     *
     * @param threadId The ID of the thread containing the specified message to modify.
     * @param messageId The ID of the message to modify on the specified thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single, existing message within an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThreadMessage updateMessage(String threadId, String messageId) {
        // Generated convenience method for updateMessageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateMessageRequest requestObj = new UpdateMessageRequest();
        BinaryData request = BinaryData.fromObject(requestObj);
        return updateMessageWithResponse(threadId, messageId, request, requestOptions).getValue()
            .toObject(ThreadMessage.class);
    }

    /**
     * Creates a new run for an assistant thread.
     *
     * @param threadId The ID of the thread to run.
     * @param createRunOptions The details for the run to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThreadRun createRun(String threadId, CreateRunOptions createRunOptions) {
        // Generated convenience method for createRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createRunWithResponse(threadId, BinaryData.fromObject(createRunOptions), requestOptions).getValue()
            .toObject(ThreadRun.class);
    }

    /**
     * Creates a new run for an assistant thread.
     *
     * @param thread The thread to run.
     * @param assistant The assistant that will run the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThreadRun createRun(AssistantThread thread, Assistant assistant) {
        RequestOptions requestOptions = new RequestOptions();
        return createRunWithResponse(thread.getId(), BinaryData.fromObject(new CreateRunOptions(assistant.getId())),
            requestOptions).getValue().toObject(ThreadRun.class);
    }

    /**
     * Modifies an existing thread run.
     *
     * @param threadId The ID of the thread associated with the specified run.
     * @param runId The ID of the run to modify.
     * @param metadata A set of up to 16 key/value pairs that can be attached to an object, used for storing additional
     * information about that object in a structured format. Keys may be up to 64 characters in length and values may be
     * up to 512 characters in length.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThreadRun updateRun(String threadId, String runId, Map<String, String> metadata) {
        // Generated convenience method for updateRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateRunRequest requestObj = new UpdateRunRequest().setMetadata(metadata);
        BinaryData request = BinaryData.fromObject(requestObj);
        return updateRunWithResponse(threadId, runId, request, requestOptions).getValue().toObject(ThreadRun.class);
    }

    /**
     * Modifies an existing thread run.
     *
     * @param threadId The ID of the thread associated with the specified run.
     * @param runId The ID of the run to modify.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representing a single evaluation run of an assistant thread.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThreadRun updateRun(String threadId, String runId) {
        // Generated convenience method for updateRunWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateRunRequest requestObj = new UpdateRunRequest();
        BinaryData request = BinaryData.fromObject(requestObj);
        return updateRunWithResponse(threadId, runId, request, requestOptions).getValue().toObject(ThreadRun.class);
    }

    /**
     * Returns information about a specific file. Does not retrieve file content.
     *
     * @param fileId The ID of the file to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an assistant that can call the model and use tools.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OpenAIFile getFile(String fileId) {
        // Generated convenience method for getFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getFileWithResponse(fileId, requestOptions).getValue().toObject(OpenAIFile.class);
    }

    /**
     * Uploads a file for use by other operations.
     *
     * @param file The file data (not filename) to upload.
     * @param purpose The intended purpose of the file.
     * @param filename A filename to associate with the uploaded data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an assistant that can call the model and use tools.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OpenAIFile uploadFile(FileDetails file, FilePurpose purpose, String filename) {
        // Generated convenience method for uploadFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UploadFileRequest requestObj = new UploadFileRequest(file, purpose).setFilename(filename);
        BinaryData request = new MultipartFormDataHelper(requestOptions)
            .serializeFileField("file", requestObj.getFile().getContent(), requestObj.getFile().getContentType(),
                requestObj.getFile().getFilename())
            .serializeTextField("purpose", Objects.toString(requestObj.getPurpose()))
            .serializeTextField("filename", requestObj.getFilename())
            .end()
            .getRequestBody();
        return uploadFileWithResponse(request, requestOptions).getValue().toObject(OpenAIFile.class);
    }

    /**
     * Uploads a file for use by other operations.
     *
     * @param file The file data (not filename) to upload.
     * @param purpose The intended purpose of the file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an assistant that can call the model and use tools.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OpenAIFile uploadFile(FileDetails file, FilePurpose purpose) {
        // Generated convenience method for uploadFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UploadFileRequest requestObj = new UploadFileRequest(file, purpose);
        BinaryData request = new MultipartFormDataHelper(requestOptions)
            .serializeFileField("file", requestObj.getFile().getContent(), requestObj.getFile().getContentType(),
                requestObj.getFile().getFilename())
            .serializeTextField("purpose", Objects.toString(requestObj.getPurpose()))
            .serializeTextField("filename", requestObj.getFilename())
            .end()
            .getRequestBody();
        return uploadFileWithResponse(request, requestOptions).getValue().toObject(OpenAIFile.class);
    }

    /**
     * Returns information about a specific file. Does not retrieve file content.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * byte[]
     * }</pre>
     *
     * @param fileId The ID of the file to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represent a byte array along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getFileContentWithResponse(String fileId, RequestOptions requestOptions) {
        return this.serviceClient.getFileContentWithResponse(fileId, requestOptions);
    }

    /**
     * Returns information about a specific file. Does not retrieve file content.
     *
     * @param fileId The ID of the file to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represent a byte array.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public byte[] getFileContent(String fileId) {
        // Generated convenience method for getFileContentWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getFileContentWithResponse(fileId, requestOptions).getValue().toObject(byte[].class);
    }
}
