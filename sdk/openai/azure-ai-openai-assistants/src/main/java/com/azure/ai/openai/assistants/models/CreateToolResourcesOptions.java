// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Request object. A set of resources that are used by the assistant's tools. The resources are specific to the
 * type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search`
 * tool requires a list of vector store IDs.
 */
@Fluent
public final class CreateToolResourcesOptions implements JsonSerializable<CreateToolResourcesOptions> {

    /*
     * A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files
     * associated with the tool.
     */
    @Generated
    private CreateCodeInterpreterToolResourceOptions codeInterpreter;

    /*
     * A list of vector stores or their IDs made available to the `file_search` tool.
     */
    @Generated
    private BinaryData fileSearch;

    /**
     * Creates an instance of CreateToolResourcesOptions class.
     */
    @Generated
    public CreateToolResourcesOptions() {
    }

    /**
     * Get the codeInterpreter property: A list of file IDs made available to the `code_interpreter` tool. There can be
     * a maximum of 20 files
     * associated with the tool.
     *
     * @return the codeInterpreter value.
     */
    @Generated
    public CreateCodeInterpreterToolResourceOptions getCodeInterpreter() {
        return this.codeInterpreter;
    }

    /**
     * Set the codeInterpreter property: A list of file IDs made available to the `code_interpreter` tool. There can be
     * a maximum of 20 files
     * associated with the tool.
     *
     * @param codeInterpreter the codeInterpreter value to set.
     * @return the CreateToolResourcesOptions object itself.
     */
    @Generated
    public CreateToolResourcesOptions setCodeInterpreter(CreateCodeInterpreterToolResourceOptions codeInterpreter) {
        this.codeInterpreter = codeInterpreter;
        return this;
    }

    /**
     * Get the fileSearch property: A list of vector stores or their IDs made available to the `file_search` tool.
     *
     * @return the fileSearch value.
     */
    public CreateFileSearchToolResourceOptions getFileSearch() {
        return CreateFileSearchToolResourceOptions.fromBinaryData(this.fileSearch);
    }

    /**
     * Set the fileSearch property: A list of vector stores or their IDs made available to the `file_search` tool.
     *
     * @param fileSearch the fileSearch value to set.
     * @return the CreateToolResourcesOptions object itself.
     */
    public CreateToolResourcesOptions setFileSearch(CreateFileSearchToolResourceOptions fileSearch) {
        if (fileSearch.getVectorStoreIds() != null) {
            this.fileSearch = BinaryData.fromObject(fileSearch.getVectorStoreIds());
        } else if (fileSearch.getVectorStores() != null) {
            this.fileSearch = BinaryData.fromObject(fileSearch.getVectorStores());
        } else {
            this.fileSearch = null;
        }
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("code_interpreter", this.codeInterpreter);
        if (this.fileSearch != null) {
            jsonWriter.writeUntypedField("file_search", this.fileSearch.toObject(Object.class));
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateToolResourcesOptions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateToolResourcesOptions if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CreateToolResourcesOptions.
     */
    @Generated
    public static CreateToolResourcesOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CreateToolResourcesOptions deserializedCreateToolResourcesOptions = new CreateToolResourcesOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("code_interpreter".equals(fieldName)) {
                    deserializedCreateToolResourcesOptions.codeInterpreter
                        = CreateCodeInterpreterToolResourceOptions.fromJson(reader);
                } else if ("file_search".equals(fieldName)) {
                    deserializedCreateToolResourcesOptions.fileSearch
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedCreateToolResourcesOptions;
        });
    }
}
