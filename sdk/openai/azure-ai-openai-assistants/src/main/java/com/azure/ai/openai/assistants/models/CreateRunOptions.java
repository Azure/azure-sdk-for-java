// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The details used when creating a new run of an assistant thread.
 */
@Fluent
public final class CreateRunOptions implements JsonSerializable<CreateRunOptions> {

    /*
     * The ID of the assistant that should run the thread.
     */
    @Generated
    private final String assistantId;

    /*
     * The overridden model name that the assistant should use to run the thread.
     */
    @Generated
    private String model;

    /*
     * The overridden system instructions that the assistant should use to run the thread.
     */
    @Generated
    private String instructions;

    /*
     * Additional instructions to append at the end of the instructions for the run. This is useful for modifying the
     * behavior
     * on a per-run basis without overriding other instructions.
     */
    @Generated
    private String additionalInstructions;

    /*
     * The overridden list of enabled tools that the assistant should use to run the thread.
     */
    @Generated
    private List<ToolDefinition> tools;

    /*
     * A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information
     * about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512
     * characters in length.
     */
    @Generated
    private Map<String, String> metadata;

    /**
     * Get the assistantId property: The ID of the assistant that should run the thread.
     *
     * @return the assistantId value.
     */
    @Generated
    public String getAssistantId() {
        return this.assistantId;
    }

    /**
     * Get the model property: The overridden model name that the assistant should use to run the thread.
     *
     * @return the model value.
     */
    @Generated
    public String getModel() {
        return this.model;
    }

    /**
     * Set the model property: The overridden model name that the assistant should use to run the thread.
     *
     * @param model the model value to set.
     * @return the CreateRunOptions object itself.
     */
    @Generated
    public CreateRunOptions setModel(String model) {
        this.model = model;
        return this;
    }

    /**
     * Get the instructions property: The overridden system instructions that the assistant should use to run the
     * thread.
     *
     * @return the instructions value.
     */
    @Generated
    public String getInstructions() {
        return this.instructions;
    }

    /**
     * Set the instructions property: The overridden system instructions that the assistant should use to run the
     * thread.
     *
     * @param instructions the instructions value to set.
     * @return the CreateRunOptions object itself.
     */
    @Generated
    public CreateRunOptions setInstructions(String instructions) {
        this.instructions = instructions;
        return this;
    }

    /**
     * Get the additionalInstructions property: Additional instructions to append at the end of the instructions for the
     * run. This is useful for modifying the behavior
     * on a per-run basis without overriding other instructions.
     *
     * @return the additionalInstructions value.
     */
    @Generated
    public String getAdditionalInstructions() {
        return this.additionalInstructions;
    }

    /**
     * Get the tools property: The overridden list of enabled tools that the assistant should use to run the thread.
     *
     * @return the tools value.
     */
    @Generated
    public List<ToolDefinition> getTools() {
        return this.tools;
    }

    /**
     * Set the tools property: The overridden list of enabled tools that the assistant should use to run the thread.
     *
     * @param tools the tools value to set.
     * @return the CreateRunOptions object itself.
     */
    @Generated
    public CreateRunOptions setTools(List<ToolDefinition> tools) {
        this.tools = tools;
        return this;
    }

    /**
     * Get the metadata property: A set of up to 16 key/value pairs that can be attached to an object, used for storing
     * additional information about that object in a structured format. Keys may be up to 64 characters in length and
     * values may be up to 512 characters in length.
     *
     * @return the metadata value.
     */
    @Generated
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: A set of up to 16 key/value pairs that can be attached to an object, used for storing
     * additional information about that object in a structured format. Keys may be up to 64 characters in length and
     * values may be up to 512 characters in length.
     *
     * @param metadata the metadata value to set.
     * @return the CreateRunOptions object itself.
     */
    @Generated
    public CreateRunOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Creates an instance of CreateRunOptions class.
     *
     * @param assistantId the assistantId value to set.
     */
    @Generated
    public CreateRunOptions(String assistantId) {
        this.assistantId = assistantId;
    }

    /**
     * Set the additionalInstructions property: Additional instructions to append at the end of the instructions for the
     * run. This is useful for modifying the behavior
     * on a per-run basis without overriding other instructions.
     *
     * @param additionalInstructions the additionalInstructions value to set.
     * @return the CreateRunOptions object itself.
     */
    @Generated
    public CreateRunOptions setAdditionalInstructions(String additionalInstructions) {
        this.additionalInstructions = additionalInstructions;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("assistant_id", this.assistantId);
        jsonWriter.writeStringField("model", this.model);
        jsonWriter.writeStringField("instructions", this.instructions);
        jsonWriter.writeStringField("additional_instructions", this.additionalInstructions);
        jsonWriter.writeArrayField("tools", this.tools, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateRunOptions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateRunOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateRunOptions.
     */
    @Generated
    public static CreateRunOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String assistantId = null;
            String model = null;
            String instructions = null;
            String additionalInstructions = null;
            List<ToolDefinition> tools = null;
            Map<String, String> metadata = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("assistant_id".equals(fieldName)) {
                    assistantId = reader.getString();
                } else if ("model".equals(fieldName)) {
                    model = reader.getString();
                } else if ("instructions".equals(fieldName)) {
                    instructions = reader.getString();
                } else if ("additional_instructions".equals(fieldName)) {
                    additionalInstructions = reader.getString();
                } else if ("tools".equals(fieldName)) {
                    tools = reader.readArray(reader1 -> ToolDefinition.fromJson(reader1));
                } else if ("metadata".equals(fieldName)) {
                    metadata = reader.readMap(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            CreateRunOptions deserializedCreateRunOptions = new CreateRunOptions(assistantId);
            deserializedCreateRunOptions.model = model;
            deserializedCreateRunOptions.instructions = instructions;
            deserializedCreateRunOptions.additionalInstructions = additionalInstructions;
            deserializedCreateRunOptions.tools = tools;
            deserializedCreateRunOptions.metadata = metadata;
            return deserializedCreateRunOptions;
        });
    }
}
