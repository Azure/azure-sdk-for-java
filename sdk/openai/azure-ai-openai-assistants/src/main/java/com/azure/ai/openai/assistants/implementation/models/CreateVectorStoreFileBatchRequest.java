// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.implementation.models;

import com.azure.ai.openai.assistants.models.VectorStoreChunkingStrategyRequest;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The CreateVectorStoreFileBatchRequest model.
 */
@Fluent
public final class CreateVectorStoreFileBatchRequest implements JsonSerializable<CreateVectorStoreFileBatchRequest> {

    /*
     * A list of File IDs that the vector store should use. Useful for tools like `file_search` that can access files.
     */
    @Generated
    private final List<String> fileIds;

    /**
     * Creates an instance of CreateVectorStoreFileBatchRequest class.
     *
     * @param fileIds the fileIds value to set.
     */
    @Generated
    public CreateVectorStoreFileBatchRequest(List<String> fileIds) {
        this.fileIds = fileIds;
    }

    /**
     * Get the fileIds property: A list of File IDs that the vector store should use. Useful for tools like
     * `file_search` that can access files.
     *
     * @return the fileIds value.
     */
    @Generated
    public List<String> getFileIds() {
        return this.fileIds;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("file_ids", this.fileIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("chunking_strategy", this.chunkingStrategy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateVectorStoreFileBatchRequest from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateVectorStoreFileBatchRequest if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateVectorStoreFileBatchRequest.
     */
    @Generated
    public static CreateVectorStoreFileBatchRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> fileIds = null;
            VectorStoreChunkingStrategyRequest chunkingStrategy = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("file_ids".equals(fieldName)) {
                    fileIds = reader.readArray(reader1 -> reader1.getString());
                } else if ("chunking_strategy".equals(fieldName)) {
                    chunkingStrategy = VectorStoreChunkingStrategyRequest.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            CreateVectorStoreFileBatchRequest deserializedCreateVectorStoreFileBatchRequest
                = new CreateVectorStoreFileBatchRequest(fileIds);
            deserializedCreateVectorStoreFileBatchRequest.chunkingStrategy = chunkingStrategy;
            return deserializedCreateVectorStoreFileBatchRequest;
        });
    }

    /*
     * The chunking strategy used to chunk the file(s). If not set, will use the auto strategy.
     */
    @Generated
    private VectorStoreChunkingStrategyRequest chunkingStrategy;

    /**
     * Get the chunkingStrategy property: The chunking strategy used to chunk the file(s). If not set, will use the auto
     * strategy.
     *
     * @return the chunkingStrategy value.
     */
    @Generated
    public VectorStoreChunkingStrategyRequest getChunkingStrategy() {
        return this.chunkingStrategy;
    }

    /**
     * Set the chunkingStrategy property: The chunking strategy used to chunk the file(s). If not set, will use the auto
     * strategy.
     *
     * @param chunkingStrategy the chunkingStrategy value to set.
     * @return the CreateVectorStoreFileBatchRequest object itself.
     */
    @Generated
    public CreateVectorStoreFileBatchRequest setChunkingStrategy(VectorStoreChunkingStrategyRequest chunkingStrategy) {
        this.chunkingStrategy = chunkingStrategy;
        return this;
    }
}
