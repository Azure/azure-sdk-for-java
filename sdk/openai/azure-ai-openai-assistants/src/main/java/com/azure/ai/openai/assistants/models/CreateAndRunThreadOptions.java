// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The details used when creating and immediately running a new assistant thread.
 */
@Fluent
public final class CreateAndRunThreadOptions implements JsonSerializable<CreateAndRunThreadOptions> {

    /*
     * The ID of the assistant for which the thread should be created.
     */
    @Generated
    private final String assistantId;

    /*
     * The details used to create the new thread. If no thread is provided, an empty one will be created.
     */
    @Generated
    private AssistantThreadCreationOptions thread;

    /*
     * The overridden model that the assistant should use to run the thread.
     */
    @Generated
    private String model;

    /*
     * The overridden system instructions the assistant should use to run the thread.
     */
    @Generated
    private String instructions;

    /*
     * The overridden list of enabled tools the assistant should use to run the thread.
     */
    @Generated
    private List<ToolDefinition> tools;

    /*
     * A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information
     * about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512
     * characters in length.
     */
    @Generated
    private Map<String, String> metadata;

    /**
     * Creates an instance of CreateAndRunThreadOptions class.
     *
     * @param assistantId the assistantId value to set.
     */
    @Generated
    public CreateAndRunThreadOptions(String assistantId) {
        this.assistantId = assistantId;
    }

    /**
     * Get the assistantId property: The ID of the assistant for which the thread should be created.
     *
     * @return the assistantId value.
     */
    @Generated
    public String getAssistantId() {
        return this.assistantId;
    }

    /**
     * Get the thread property: The details used to create the new thread. If no thread is provided, an empty one will
     * be created.
     *
     * @return the thread value.
     */
    @Generated
    public AssistantThreadCreationOptions getThread() {
        return this.thread;
    }

    /**
     * Set the thread property: The details used to create the new thread. If no thread is provided, an empty one will
     * be created.
     *
     * @param thread the thread value to set.
     * @return the CreateAndRunThreadOptions object itself.
     */
    @Generated
    public CreateAndRunThreadOptions setThread(AssistantThreadCreationOptions thread) {
        this.thread = thread;
        return this;
    }

    /**
     * Get the model property: The overridden model that the assistant should use to run the thread.
     *
     * @return the model value.
     */
    @Generated
    public String getModel() {
        return this.model;
    }

    /**
     * Set the model property: The overridden model that the assistant should use to run the thread.
     *
     * @param model the model value to set.
     * @return the CreateAndRunThreadOptions object itself.
     */
    @Generated
    public CreateAndRunThreadOptions setModel(String model) {
        this.model = model;
        return this;
    }

    /**
     * Get the instructions property: The overridden system instructions the assistant should use to run the thread.
     *
     * @return the instructions value.
     */
    @Generated
    public String getInstructions() {
        return this.instructions;
    }

    /**
     * Set the instructions property: The overridden system instructions the assistant should use to run the thread.
     *
     * @param instructions the instructions value to set.
     * @return the CreateAndRunThreadOptions object itself.
     */
    @Generated
    public CreateAndRunThreadOptions setInstructions(String instructions) {
        this.instructions = instructions;
        return this;
    }

    /**
     * Get the tools property: The overridden list of enabled tools the assistant should use to run the thread.
     *
     * @return the tools value.
     */
    @Generated
    public List<ToolDefinition> getTools() {
        return this.tools;
    }

    /**
     * Set the tools property: The overridden list of enabled tools the assistant should use to run the thread.
     *
     * @param tools the tools value to set.
     * @return the CreateAndRunThreadOptions object itself.
     */
    @Generated
    public CreateAndRunThreadOptions setTools(List<ToolDefinition> tools) {
        this.tools = tools;
        return this;
    }

    /**
     * Get the metadata property: A set of up to 16 key/value pairs that can be attached to an object, used for storing
     * additional information about that object in a structured format. Keys may be up to 64 characters in length and
     * values may be up to 512 characters in length.
     *
     * @return the metadata value.
     */
    @Generated
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: A set of up to 16 key/value pairs that can be attached to an object, used for storing
     * additional information about that object in a structured format. Keys may be up to 64 characters in length and
     * values may be up to 512 characters in length.
     *
     * @param metadata the metadata value to set.
     * @return the CreateAndRunThreadOptions object itself.
     */
    @Generated
    public CreateAndRunThreadOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("assistant_id", this.assistantId);
        jsonWriter.writeJsonField("thread", this.thread);
        jsonWriter.writeStringField("model", this.model);
        jsonWriter.writeStringField("instructions", this.instructions);
        jsonWriter.writeArrayField("tools", this.tools, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("tool_resources", this.toolResources);
        jsonWriter.writeBooleanField("stream", this.stream);
        jsonWriter.writeNumberField("temperature", this.temperature);
        jsonWriter.writeNumberField("top_p", this.topP);
        jsonWriter.writeNumberField("max_prompt_tokens", this.maxPromptTokens);
        jsonWriter.writeNumberField("max_completion_tokens", this.maxCompletionTokens);
        jsonWriter.writeJsonField("truncation_strategy", this.truncationStrategy);
        if (this.toolChoice != null) {
            jsonWriter.writeUntypedField("tool_choice", this.toolChoice.toObject(Object.class));
        }
        if (this.responseFormat != null) {
            jsonWriter.writeUntypedField("response_format", this.responseFormat.toObject(Object.class));
        }
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateAndRunThreadOptions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateAndRunThreadOptions if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateAndRunThreadOptions.
     */
    @Generated
    public static CreateAndRunThreadOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String assistantId = null;
            AssistantThreadCreationOptions thread = null;
            String model = null;
            String instructions = null;
            List<ToolDefinition> tools = null;
            UpdateToolResourcesOptions toolResources = null;
            Boolean stream = null;
            Double temperature = null;
            Double topP = null;
            Integer maxPromptTokens = null;
            Integer maxCompletionTokens = null;
            TruncationObject truncationStrategy = null;
            BinaryData toolChoice = null;
            BinaryData responseFormat = null;
            Map<String, String> metadata = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("assistant_id".equals(fieldName)) {
                    assistantId = reader.getString();
                } else if ("thread".equals(fieldName)) {
                    thread = AssistantThreadCreationOptions.fromJson(reader);
                } else if ("model".equals(fieldName)) {
                    model = reader.getString();
                } else if ("instructions".equals(fieldName)) {
                    instructions = reader.getString();
                } else if ("tools".equals(fieldName)) {
                    tools = reader.readArray(reader1 -> ToolDefinition.fromJson(reader1));
                } else if ("tool_resources".equals(fieldName)) {
                    toolResources = UpdateToolResourcesOptions.fromJson(reader);
                } else if ("stream".equals(fieldName)) {
                    stream = reader.getNullable(JsonReader::getBoolean);
                } else if ("temperature".equals(fieldName)) {
                    temperature = reader.getNullable(JsonReader::getDouble);
                } else if ("top_p".equals(fieldName)) {
                    topP = reader.getNullable(JsonReader::getDouble);
                } else if ("max_prompt_tokens".equals(fieldName)) {
                    maxPromptTokens = reader.getNullable(JsonReader::getInt);
                } else if ("max_completion_tokens".equals(fieldName)) {
                    maxCompletionTokens = reader.getNullable(JsonReader::getInt);
                } else if ("truncation_strategy".equals(fieldName)) {
                    truncationStrategy = TruncationObject.fromJson(reader);
                } else if ("tool_choice".equals(fieldName)) {
                    toolChoice
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("response_format".equals(fieldName)) {
                    responseFormat
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("metadata".equals(fieldName)) {
                    metadata = reader.readMap(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            CreateAndRunThreadOptions deserializedCreateAndRunThreadOptions
                = new CreateAndRunThreadOptions(assistantId);
            deserializedCreateAndRunThreadOptions.thread = thread;
            deserializedCreateAndRunThreadOptions.model = model;
            deserializedCreateAndRunThreadOptions.instructions = instructions;
            deserializedCreateAndRunThreadOptions.tools = tools;
            deserializedCreateAndRunThreadOptions.toolResources = toolResources;
            deserializedCreateAndRunThreadOptions.stream = stream;
            deserializedCreateAndRunThreadOptions.temperature = temperature;
            deserializedCreateAndRunThreadOptions.topP = topP;
            deserializedCreateAndRunThreadOptions.maxPromptTokens = maxPromptTokens;
            deserializedCreateAndRunThreadOptions.maxCompletionTokens = maxCompletionTokens;
            deserializedCreateAndRunThreadOptions.truncationStrategy = truncationStrategy;
            deserializedCreateAndRunThreadOptions.toolChoice = toolChoice;
            deserializedCreateAndRunThreadOptions.responseFormat = responseFormat;
            deserializedCreateAndRunThreadOptions.metadata = metadata;
            return deserializedCreateAndRunThreadOptions;
        });
    }

    /*
     * If `true`, returns a stream of events that happen during the Run as server-sent events,
     * terminating when the Run enters a terminal state with a `data: [DONE]` message.
     */
    @Generated
    private Boolean stream;

    /**
     * Get the stream property: If `true`, returns a stream of events that happen during the Run as server-sent events,
     * terminating when the Run enters a terminal state with a `data: [DONE]` message.
     *
     * @return the stream value.
     */
    Boolean isStream() {
        return this.stream;
    }

    /**
     * Set the stream property: If `true`, returns a stream of events that happen during the Run as server-sent events,
     * terminating when the Run enters a terminal state with a `data: [DONE]` message.
     *
     * @param stream the stream value to set.
     * @return the CreateAndRunThreadOptions object itself.
     */
    CreateAndRunThreadOptions setStream(Boolean stream) {
        this.stream = stream;
        return this;
    }

    /*
     * Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run
     * basis.
     */
    @Generated
    private UpdateToolResourcesOptions toolResources;

    /*
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output
     * more random, while lower values like 0.2 will make it more focused and deterministic.
     */
    @Generated
    private Double temperature;

    /*
     * An alternative to sampling with temperature, called nucleus sampling, where the model
     * considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens
     * comprising the top 10% probability mass are considered.
     * 
     * We generally recommend altering this or temperature but not both.
     */
    @Generated
    private Double topP;

    /*
     * The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort
     * to use only
     * the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt
     * tokens specified,
     * the run will end with status `incomplete`. See `incomplete_details` for more info.
     */
    @Generated
    private Integer maxPromptTokens;

    /*
     * The maximum number of completion tokens that may be used over the course of the run. The run will make a best
     * effort to use only
     * the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of
     * completion tokens
     * specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
     */
    @Generated
    private Integer maxCompletionTokens;

    /*
     * The strategy to use for dropping messages as the context windows moves forward.
     */
    @Generated
    private TruncationObject truncationStrategy;

    /*
     * Controls whether or not and which tool is called by the model.
     */
    @Generated
    private BinaryData toolChoice;

    /*
     * Specifies the format that the model must output.
     */
    @Generated
    private BinaryData responseFormat;

    /**
     * Get the toolResources property: Override the tools the assistant can use for this run. This is useful for
     * modifying the behavior on a per-run basis.
     *
     * @return the toolResources value.
     */
    @Generated
    public UpdateToolResourcesOptions getToolResources() {
        return this.toolResources;
    }

    /**
     * Set the toolResources property: Override the tools the assistant can use for this run. This is useful for
     * modifying the behavior on a per-run basis.
     *
     * @param toolResources the toolResources value to set.
     * @return the CreateAndRunThreadOptions object itself.
     */
    @Generated
    public CreateAndRunThreadOptions setToolResources(UpdateToolResourcesOptions toolResources) {
        this.toolResources = toolResources;
        return this;
    }

    /**
     * Get the temperature property: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make
     * the output
     * more random, while lower values like 0.2 will make it more focused and deterministic.
     *
     * @return the temperature value.
     */
    @Generated
    public Double getTemperature() {
        return this.temperature;
    }

    /**
     * Set the temperature property: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make
     * the output
     * more random, while lower values like 0.2 will make it more focused and deterministic.
     *
     * @param temperature the temperature value to set.
     * @return the CreateAndRunThreadOptions object itself.
     */
    @Generated
    public CreateAndRunThreadOptions setTemperature(Double temperature) {
        this.temperature = temperature;
        return this;
    }

    /**
     * Get the topP property: An alternative to sampling with temperature, called nucleus sampling, where the model
     * considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens
     * comprising the top 10% probability mass are considered.
     *
     * We generally recommend altering this or temperature but not both.
     *
     * @return the topP value.
     */
    @Generated
    public Double getTopP() {
        return this.topP;
    }

    /**
     * Set the topP property: An alternative to sampling with temperature, called nucleus sampling, where the model
     * considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens
     * comprising the top 10% probability mass are considered.
     *
     * We generally recommend altering this or temperature but not both.
     *
     * @param topP the topP value to set.
     * @return the CreateAndRunThreadOptions object itself.
     */
    @Generated
    public CreateAndRunThreadOptions setTopP(Double topP) {
        this.topP = topP;
        return this;
    }

    /**
     * Get the maxPromptTokens property: The maximum number of prompt tokens that may be used over the course of the
     * run. The run will make a best effort to use only
     * the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt
     * tokens specified,
     * the run will end with status `incomplete`. See `incomplete_details` for more info.
     *
     * @return the maxPromptTokens value.
     */
    @Generated
    public Integer getMaxPromptTokens() {
        return this.maxPromptTokens;
    }

    /**
     * Set the maxPromptTokens property: The maximum number of prompt tokens that may be used over the course of the
     * run. The run will make a best effort to use only
     * the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt
     * tokens specified,
     * the run will end with status `incomplete`. See `incomplete_details` for more info.
     *
     * @param maxPromptTokens the maxPromptTokens value to set.
     * @return the CreateAndRunThreadOptions object itself.
     */
    @Generated
    public CreateAndRunThreadOptions setMaxPromptTokens(Integer maxPromptTokens) {
        this.maxPromptTokens = maxPromptTokens;
        return this;
    }

    /**
     * Get the maxCompletionTokens property: The maximum number of completion tokens that may be used over the course of
     * the run. The run will make a best effort to use only
     * the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of
     * completion tokens
     * specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
     *
     * @return the maxCompletionTokens value.
     */
    @Generated
    public Integer getMaxCompletionTokens() {
        return this.maxCompletionTokens;
    }

    /**
     * Set the maxCompletionTokens property: The maximum number of completion tokens that may be used over the course of
     * the run. The run will make a best effort to use only
     * the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of
     * completion tokens
     * specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
     *
     * @param maxCompletionTokens the maxCompletionTokens value to set.
     * @return the CreateAndRunThreadOptions object itself.
     */
    @Generated
    public CreateAndRunThreadOptions setMaxCompletionTokens(Integer maxCompletionTokens) {
        this.maxCompletionTokens = maxCompletionTokens;
        return this;
    }

    /**
     * Get the truncationStrategy property: The strategy to use for dropping messages as the context windows moves
     * forward.
     *
     * @return the truncationStrategy value.
     */
    @Generated
    public TruncationObject getTruncationStrategy() {
        return this.truncationStrategy;
    }

    /**
     * Set the truncationStrategy property: The strategy to use for dropping messages as the context windows moves
     * forward.
     *
     * @param truncationStrategy the truncationStrategy value to set.
     * @return the CreateAndRunThreadOptions object itself.
     */
    @Generated
    public CreateAndRunThreadOptions setTruncationStrategy(TruncationObject truncationStrategy) {
        this.truncationStrategy = truncationStrategy;
        return this;
    }

    /**
     * Get the toolChoice property: Controls whether or not and which tool is called by the model.
     *
     * @return the toolChoice value.
     */
    public AssistantsApiToolChoiceOption getToolChoice() {
        return AssistantsApiToolChoiceOption.fromBinaryData(this.toolChoice);
    }

    /**
     * Set the toolChoice property: Controls whether or not and which tool is called by the model.
     *
     * @param toolChoice the toolChoice value to set.
     * @return the CreateAndRunThreadOptions object itself.
     */
    public CreateAndRunThreadOptions setToolChoice(AssistantsApiToolChoiceOption toolChoice) {
        if (toolChoice.getMode() != null) {
            this.toolChoice = BinaryData.fromObject(toolChoice.getMode());
        } else if (toolChoice.getToolChoice() != null) {
            this.toolChoice = BinaryData.fromObject(toolChoice.getToolChoice());
        } else {
            this.toolChoice = null;
        }
        return this;
    }

    /**
     * Get the responseFormat property: Specifies the format that the model must output.
     *
     * @return the responseFormat value.
     */
    public AssistantsApiResponseFormatOption getResponseFormat() {
        return AssistantsApiResponseFormatOption.fromBinaryData(this.responseFormat);
    }

    /**
     * Set the responseFormat property: Specifies the format that the model must output.
     *
     * @param responseFormat the responseFormat value to set.
     * @return the CreateAndRunThreadOptions object itself.
     */
    public CreateAndRunThreadOptions setResponseFormat(AssistantsApiResponseFormatOption responseFormat) {
        if (responseFormat.getFormat() != null) {
            this.responseFormat = BinaryData.fromObject(responseFormat.getFormat());
        } else if (responseFormat.getMode() != null) {
            this.responseFormat = BinaryData.fromObject(responseFormat.getMode());
        } else {
            this.responseFormat = null;
        }
        return this;
    }
}
