// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.assistants.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Assistants.
 */
public final class AssistantsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AssistantsService service;

    /**
     * The service client containing this operation class.
     */
    private final AssistantsClientImpl client;

    /**
     * Initializes an instance of AssistantsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    AssistantsImpl(AssistantsClientImpl client) {
        this.service
            = RestProxy.create(AssistantsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AssistantsClientAssistants to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}/openai")
    @ServiceInterface(name = "AssistantsClientAssi")
    public interface AssistantsService {
        @Post("/assistants")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createAssistant(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData assistantCreationOptions,
            RequestOptions requestOptions, Context context);

        @Post("/assistants")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createAssistantSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData assistantCreationOptions,
            RequestOptions requestOptions, Context context);

        @Get("/assistants")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listAssistants(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/assistants")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listAssistantsSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/assistants/{assistantId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> retrieveAssistant(@HostParam("endpoint") String endpoint,
            @PathParam("assistantId") String assistantId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/assistants/{assistantId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> retrieveAssistantSync(@HostParam("endpoint") String endpoint,
            @PathParam("assistantId") String assistantId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/assistants/{assistantId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> modifyAssistant(@HostParam("endpoint") String endpoint,
            @PathParam("assistantId") String assistantId, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData modificationOptions, RequestOptions requestOptions,
            Context context);

        @Post("/assistants/{assistantId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> modifyAssistantSync(@HostParam("endpoint") String endpoint,
            @PathParam("assistantId") String assistantId, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData modificationOptions, RequestOptions requestOptions,
            Context context);

        @Delete("/assistants/{assistantId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> deleteAssistant(@HostParam("endpoint") String endpoint,
            @PathParam("assistantId") String assistantId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/assistants/{assistantId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteAssistantSync(@HostParam("endpoint") String endpoint,
            @PathParam("assistantId") String assistantId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/assistants/{assistantId}/files")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createAssistantFile(@HostParam("endpoint") String endpoint,
            @PathParam("assistantId") String assistantId, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData request, RequestOptions requestOptions, Context context);

        @Post("/assistants/{assistantId}/files")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createAssistantFileSync(@HostParam("endpoint") String endpoint,
            @PathParam("assistantId") String assistantId, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData request, RequestOptions requestOptions, Context context);

        @Get("/assistants/{assistantId}/files")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listAssistantFiles(@HostParam("endpoint") String endpoint,
            @PathParam("assistantId") String assistantId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/assistants/{assistantId}/files")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listAssistantFilesSync(@HostParam("endpoint") String endpoint,
            @PathParam("assistantId") String assistantId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/assistants/{assistantId}/files/{fileId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> retrieveAssistantFile(@HostParam("endpoint") String endpoint,
            @PathParam("assistantId") String assistantId, @PathParam("fileId") String fileId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/assistants/{assistantId}/files/{fileId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> retrieveAssistantFileSync(@HostParam("endpoint") String endpoint,
            @PathParam("assistantId") String assistantId, @PathParam("fileId") String fileId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/assistants/{assistantId}/files/{fileId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> deleteAssistantFile(@HostParam("endpoint") String endpoint,
            @PathParam("assistantId") String assistantId, @PathParam("fileId") String fileId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/assistants/{assistantId}/files/{fileId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteAssistantFileSync(@HostParam("endpoint") String endpoint,
            @PathParam("assistantId") String assistantId, @PathParam("fileId") String fileId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Creates a new assistant.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     model: String (Required)
     *     name: String (Optional)
     *     description: String (Optional)
     *     instructions: String (Optional)
     *     tools (Optional): [
     *          (Optional){
     *         }
     *     ]
     *     file_ids (Optional): [
     *         String (Optional)
     *     ]
     *     metadata (Optional): {
     *         String: String (Optional)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     name: String (Required)
     *     description: String (Required)
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *         }
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Optional): {
     *         String: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param assistantCreationOptions The request details to use when creating a new assistant.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an assistant that can call the model and use tools along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createAssistantWithResponseAsync(BinaryData assistantCreationOptions,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createAssistant(this.client.getEndpoint(), accept,
            assistantCreationOptions, requestOptions, context));
    }

    /**
     * Creates a new assistant.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     model: String (Required)
     *     name: String (Optional)
     *     description: String (Optional)
     *     instructions: String (Optional)
     *     tools (Optional): [
     *          (Optional){
     *         }
     *     ]
     *     file_ids (Optional): [
     *         String (Optional)
     *     ]
     *     metadata (Optional): {
     *         String: String (Optional)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     name: String (Required)
     *     description: String (Required)
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *         }
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Optional): {
     *         String: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param assistantCreationOptions The request details to use when creating a new assistant.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an assistant that can call the model and use tools along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createAssistantWithResponse(BinaryData assistantCreationOptions,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createAssistantSync(this.client.getEndpoint(), accept, assistantCreationOptions, requestOptions,
            Context.NONE);
    }

    /**
     * Gets a list of assistants that were previously created.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is
     * 20.</td>
     * </tr>
     * <tr>
     * <td>order</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.
     * Allowed values: "asc", "desc".</td>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * after=obj_foo in order to fetch the next page of the list.</td>
     * </tr>
     * <tr>
     * <td>before</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * before=obj_foo in order to fetch the previous page of the list.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             name: String (Required)
     *             description: String (Required)
     *             model: String (Required)
     *             instructions: String (Required)
     *             tools (Required): [
     *                  (Required){
     *                 }
     *             ]
     *             file_ids (Required): [
     *                 String (Required)
     *             ]
     *             metadata (Optional): {
     *                 String: String (Optional)
     *             }
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of assistants that were previously created along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listAssistantsWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listAssistants(this.client.getEndpoint(), accept, requestOptions, context));
    }

    /**
     * Gets a list of assistants that were previously created.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is
     * 20.</td>
     * </tr>
     * <tr>
     * <td>order</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.
     * Allowed values: "asc", "desc".</td>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * after=obj_foo in order to fetch the next page of the list.</td>
     * </tr>
     * <tr>
     * <td>before</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * before=obj_foo in order to fetch the previous page of the list.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             name: String (Required)
     *             description: String (Required)
     *             model: String (Required)
     *             instructions: String (Required)
     *             tools (Required): [
     *                  (Required){
     *                 }
     *             ]
     *             file_ids (Required): [
     *                 String (Required)
     *             ]
     *             metadata (Optional): {
     *                 String: String (Optional)
     *             }
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of assistants that were previously created along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listAssistantsWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listAssistantsSync(this.client.getEndpoint(), accept, requestOptions, Context.NONE);
    }

    /**
     * Retrieves an existing assistant.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     name: String (Required)
     *     description: String (Required)
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *         }
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Optional): {
     *         String: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param assistantId The ID of the assistant to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an assistant that can call the model and use tools along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> retrieveAssistantWithResponseAsync(String assistantId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.retrieveAssistant(this.client.getEndpoint(), assistantId, accept,
            requestOptions, context));
    }

    /**
     * Retrieves an existing assistant.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     name: String (Required)
     *     description: String (Required)
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *         }
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Optional): {
     *         String: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param assistantId The ID of the assistant to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an assistant that can call the model and use tools along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retrieveAssistantWithResponse(String assistantId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.retrieveAssistantSync(this.client.getEndpoint(), assistantId, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Modifies an existing assistant.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     model: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     instructions: String (Optional)
     *     tools (Optional): [
     *          (Optional){
     *         }
     *     ]
     *     file_ids (Optional): [
     *         String (Optional)
     *     ]
     *     metadata (Optional): {
     *         String: String (Optional)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     name: String (Required)
     *     description: String (Required)
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *         }
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Optional): {
     *         String: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param assistantId The ID of the assistant to modify.
     * @param modificationOptions The details of the modification to perform on the specified assistant.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an assistant that can call the model and use tools along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> modifyAssistantWithResponseAsync(String assistantId,
        BinaryData modificationOptions, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.modifyAssistant(this.client.getEndpoint(), assistantId, accept,
            modificationOptions, requestOptions, context));
    }

    /**
     * Modifies an existing assistant.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     model: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     instructions: String (Optional)
     *     tools (Optional): [
     *          (Optional){
     *         }
     *     ]
     *     file_ids (Optional): [
     *         String (Optional)
     *     ]
     *     metadata (Optional): {
     *         String: String (Optional)
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     name: String (Required)
     *     description: String (Required)
     *     model: String (Required)
     *     instructions: String (Required)
     *     tools (Required): [
     *          (Required){
     *         }
     *     ]
     *     file_ids (Required): [
     *         String (Required)
     *     ]
     *     metadata (Optional): {
     *         String: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param assistantId The ID of the assistant to modify.
     * @param modificationOptions The details of the modification to perform on the specified assistant.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents an assistant that can call the model and use tools along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> modifyAssistantWithResponse(String assistantId, BinaryData modificationOptions,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.modifyAssistantSync(this.client.getEndpoint(), assistantId, accept, modificationOptions,
            requestOptions, Context.NONE);
    }

    /**
     * Deletes an assistant.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deleted: boolean (Required)
     *     object: String (Required)
     * }
     * }</pre>
     * 
     * @param assistantId The ID of the assistant to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an assistant deletion operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteAssistantWithResponseAsync(String assistantId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteAssistant(this.client.getEndpoint(), assistantId, accept,
            requestOptions, context));
    }

    /**
     * Deletes an assistant.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deleted: boolean (Required)
     *     object: String (Required)
     * }
     * }</pre>
     * 
     * @param assistantId The ID of the assistant to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an assistant deletion operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteAssistantWithResponse(String assistantId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteAssistantSync(this.client.getEndpoint(), assistantId, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Attaches a previously uploaded file to an assistant for use by tools that can read files.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     file_id: String (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     assistant_id: String (Required)
     * }
     * }</pre>
     * 
     * @param assistantId The ID of the assistant to attach the file to.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a file attached to an assistant, as used by tools that can read files along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createAssistantFileWithResponseAsync(String assistantId, BinaryData request,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createAssistantFile(this.client.getEndpoint(), assistantId,
            accept, request, requestOptions, context));
    }

    /**
     * Attaches a previously uploaded file to an assistant for use by tools that can read files.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     file_id: String (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     assistant_id: String (Required)
     * }
     * }</pre>
     * 
     * @param assistantId The ID of the assistant to attach the file to.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a file attached to an assistant, as used by tools that can read files along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createAssistantFileWithResponse(String assistantId, BinaryData request,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createAssistantFileSync(this.client.getEndpoint(), assistantId, accept, request, requestOptions,
            Context.NONE);
    }

    /**
     * Gets a list of files attached to a specific assistant, as used by tools that can read files.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is
     * 20.</td>
     * </tr>
     * <tr>
     * <td>order</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.
     * Allowed values: "asc", "desc".</td>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * after=obj_foo in order to fetch the next page of the list.</td>
     * </tr>
     * <tr>
     * <td>before</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * before=obj_foo in order to fetch the previous page of the list.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             assistant_id: String (Required)
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param assistantId The ID of the assistant to retrieve the list of attached files for.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of files attached to a specific assistant, as used by tools that can read files along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listAssistantFilesWithResponseAsync(String assistantId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listAssistantFiles(this.client.getEndpoint(), assistantId,
            accept, requestOptions, context));
    }

    /**
     * Gets a list of files attached to a specific assistant, as used by tools that can read files.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is
     * 20.</td>
     * </tr>
     * <tr>
     * <td>order</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.
     * Allowed values: "asc", "desc".</td>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * after=obj_foo in order to fetch the next page of the list.</td>
     * </tr>
     * <tr>
     * <td>before</td>
     * <td>String</td>
     * <td>No</td>
     * <td>A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if
     * you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include
     * before=obj_foo in order to fetch the previous page of the list.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             assistant_id: String (Required)
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param assistantId The ID of the assistant to retrieve the list of attached files for.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of files attached to a specific assistant, as used by tools that can read files along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listAssistantFilesWithResponse(String assistantId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listAssistantFilesSync(this.client.getEndpoint(), assistantId, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Retrieves a file attached to an assistant.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     assistant_id: String (Required)
     * }
     * }</pre>
     * 
     * @param assistantId The ID of the assistant associated with the attached file.
     * @param fileId The ID of the file to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a file attached to an assistant, as used by tools that can read files along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> retrieveAssistantFileWithResponseAsync(String assistantId, String fileId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.retrieveAssistantFile(this.client.getEndpoint(), assistantId,
            fileId, accept, requestOptions, context));
    }

    /**
     * Retrieves a file attached to an assistant.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     assistant_id: String (Required)
     * }
     * }</pre>
     * 
     * @param assistantId The ID of the assistant associated with the attached file.
     * @param fileId The ID of the file to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a file attached to an assistant, as used by tools that can read files along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retrieveAssistantFileWithResponse(String assistantId, String fileId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.retrieveAssistantFileSync(this.client.getEndpoint(), assistantId, fileId, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Unlinks a previously attached file from an assistant, rendering it unavailable for use by tools that can read
     * files.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deleted: boolean (Required)
     *     object: String (Required)
     * }
     * }</pre>
     * 
     * @param assistantId The ID of the assistant from which the specified file should be unlinked.
     * @param fileId The ID of the file to unlink from the specified assistant.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an assistant file deletion operation along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteAssistantFileWithResponseAsync(String assistantId, String fileId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteAssistantFile(this.client.getEndpoint(), assistantId,
            fileId, accept, requestOptions, context));
    }

    /**
     * Unlinks a previously attached file from an assistant, rendering it unavailable for use by tools that can read
     * files.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     deleted: boolean (Required)
     *     object: String (Required)
     * }
     * }</pre>
     * 
     * @param assistantId The ID of the assistant from which the specified file should be unlinked.
     * @param fileId The ID of the file to unlink from the specified assistant.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an assistant file deletion operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteAssistantFileWithResponse(String assistantId, String fileId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteAssistantFileSync(this.client.getEndpoint(), assistantId, fileId, accept, requestOptions,
            Context.NONE);
    }
}
