// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A set of resources that are used by the assistant's tools. The resources are specific to the type of
 * tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search`
 * tool requires a list of vector store IDs.
 */
@Immutable
public final class ToolResources implements JsonSerializable<ToolResources> {

    /*
     * Resources to be used by the `code_interpreter tool` consisting of file IDs.
     */
    @Generated
    private CodeInterpreterToolResource codeInterpreter;

    /*
     * Resources to be used by the `file_search` tool consisting of vector store IDs.
     */
    @Generated
    private FileSearchToolResource fileSearch;

    /**
     * Creates an instance of ToolResources class.
     */
    @Generated
    private ToolResources() {
    }

    /**
     * Get the codeInterpreter property: Resources to be used by the `code_interpreter tool` consisting of file IDs.
     *
     * @return the codeInterpreter value.
     */
    @Generated
    public CodeInterpreterToolResource getCodeInterpreter() {
        return this.codeInterpreter;
    }

    /**
     * Get the fileSearch property: Resources to be used by the `file_search` tool consisting of vector store IDs.
     *
     * @return the fileSearch value.
     */
    @Generated
    public FileSearchToolResource getFileSearch() {
        return this.fileSearch;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("code_interpreter", this.codeInterpreter);
        jsonWriter.writeJsonField("file_search", this.fileSearch);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ToolResources from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ToolResources if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ToolResources.
     */
    @Generated
    public static ToolResources fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ToolResources deserializedToolResources = new ToolResources();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("code_interpreter".equals(fieldName)) {
                    deserializedToolResources.codeInterpreter = CodeInterpreterToolResource.fromJson(reader);
                } else if ("file_search".equals(fieldName)) {
                    deserializedToolResources.fileSearch = FileSearchToolResource.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedToolResources;
        });
    }
}
