steps:
  - pwsh: |
      # Define repository details
      $repoUrl = "https://github.com/openai/openai-java.git"
      #$branchName = "release-please--branches--main--changes--next"

      # Clone the repository and checkout the specified branch
      Write-Host "Cloning repository: $repoUrl"
      git clone $repoUrl openai-java

      cd openai-java

      #Write-Host "Checking out branch: $branchName"
      #git checkout $branchName
    displayName: Clone OpenAI Java repository and checkout branch
    workingDirectory: $(Agent.TempDirectory)

  - pwsh: |
      # Define the path to the build.gradle.kts file
      $buildGradlePath = "$(Agent.TempDirectory)/openai-java/build.gradle.kts"

      # Read the contents of the build.gradle.kts file
      $buildGradleContent = Get-Content -Path $buildGradlePath

      # Extract the version number from the build.gradle.kts file
      $versionLine = $buildGradleContent | Select-String -Pattern 'version\s*=\s*\"([^\"]+)\"'
      if ($versionLine -match 'version\s*=\s*\"([^\"]+)\"') {
        $version = $matches[1]
        Write-Host "Current version: $version"
      } else {
        Write-Host "Version not found"
        exit 1
      }

      # Define the new version with '-SNAPSHOT' appended
      $newVersion = "$version-SNAPSHOT"
      Write-Host "New version: $newVersion"

      # Update the version in the build.gradle.kts file
      $updatedContent = $buildGradleContent -replace 'version\s*=\s*\"([^\"]+)\"', "version = `"$global:newVersion`""
      Set-Content -Path $buildGradlePath -Value $updatedContent
     
      Write-Host "##vso[task.setvariable variable=$newVersion]$env:newVersion"
    displayName: Find current version and update to SNAPSHOT
    workingDirectory: $(Agent.TempDirectory)

  - pwsh: |
      Write-Host "Building the project and publishing to the local Maven repository"
      cd "$(Agent.TempDirectory)/openai-java"
      ./gradlew clean build -x test "-Dmaven.repo.local=$env:PIPELINE_WORKSPACE/.m2/repository" publishToMavenLocal
    displayName: Build the project and publish to the local Maven repository
    workingDirectory: $(Agent.TempDirectory)

  - pwsh: |
      # Define the path to the external_dependencies.txt file
      $dependenciesFilePath = "eng/versioning/external_dependencies.txt"

      # Update the version in the external_dependencies.txt file
      $newVersionInExternalDependenciesFile = "com.openai:openai-java;$env:newVersion"
      $dependenciesContent = Get-Content -Path $dependenciesFilePath -Raw
      $updatedDependenciesContent = $dependenciesContent -replace 'com.openai:openai-java;[0-9.]+', $newVersionInExternalDependenciesFile
      Write-Host "Updated the version in the external_dependencies.txt file: $updatedDependenciesContent"
      Set-Content -Path $dependenciesFilePath -Value $updatedDependenciesContent
    displayName: Update external_dependencies.txt
    workingDirectory: $(System.DefaultWorkingDirectory)

  - task: PythonScript@0
    displayName: 'Update versions for source build'
    inputs:
      scriptPath: 'eng/versioning/update_versions.py'
      arguments: '--update-type external_dependency --build-type client --sr'
