// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.generated;

import com.azure.ai.openai.OpenAIClient;
import com.azure.ai.openai.OpenAIClientBuilder;
import com.azure.ai.openai.models.AzureCosmosDBChatExtensionConfiguration;
import com.azure.ai.openai.models.AzureCosmosDBChatExtensionParameters;
import com.azure.ai.openai.models.AzureCosmosDBFieldMappingOptions;
import com.azure.ai.openai.models.ChatCompletions;
import com.azure.ai.openai.models.ChatCompletionsOptions;
import com.azure.ai.openai.models.ChatRequestUserMessage;
import com.azure.ai.openai.models.OnYourDataConnectionStringAuthenticationOptions;
import com.azure.ai.openai.models.OnYourDataDeploymentNameVectorizationSource;
import com.azure.identity.DefaultAzureCredentialBuilder;

import java.util.Arrays;

public class CreatesACompletionForTheProvidedAzureCosmosDBUsesAzureOpenAIChatExtensions {
    public static void main(String[] args) {
        OpenAIClient openAIClient = new OpenAIClientBuilder().credential(new DefaultAzureCredentialBuilder().build())
            .endpoint("{endpoint}")
            .buildClient();
        // BEGIN:com.azure.ai.openai.generated.getchatcompletions.createsacompletionfortheprovidedazurecosmosdbusesazureopenaichatextensions
        ChatCompletions response = openAIClient.getChatCompletions("<deployment-id>", new ChatCompletionsOptions(
            Arrays.asList(new ChatRequestUserMessage("can you tell me how to care for a parrot?")))
            .setDataSources(Arrays.asList(new AzureCosmosDBChatExtensionConfiguration(
                new AzureCosmosDBChatExtensionParameters("vectordb", "azuredocs", "azuredocindex",
                    new AzureCosmosDBFieldMappingOptions(Arrays.asList("content"), Arrays.asList("contentvector")),
                    new OnYourDataDeploymentNameVectorizationSource("{embedding deployment name}"))
                    .setAuthentication(new OnYourDataConnectionStringAuthenticationOptions(
                        "mongodb+srv://rawantest:{password}$@{cluster-name}.mongocluster.cosmos.azure.com/?tls=true&authMechanism=SCRAM-SHA-256&retrywrites=false&maxIdleTimeMS=120000"))))));
        // END:com.azure.ai.openai.generated.getchatcompletions.createsacompletionfortheprovidedazurecosmosdbusesazureopenaichatextensions
    }
}
