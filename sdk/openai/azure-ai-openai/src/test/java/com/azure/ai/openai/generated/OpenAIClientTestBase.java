// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.openai.generated;

import com.azure.ai.openai.OpenAIAsyncClient;
import com.azure.ai.openai.OpenAIClient;
import com.azure.ai.openai.OpenAIClientBuilder;
import com.azure.ai.openai.OpenAIServiceVersion;
import com.azure.ai.openai.models.Choice;
import com.azure.ai.openai.models.Completions;
import com.azure.ai.openai.models.CompletionsFinishReason;
import com.azure.ai.openai.models.CompletionsLogProbabilityModel;
import com.azure.core.credential.AzureKeyCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestMode;
import com.azure.core.test.TestProxyTestBase;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.function.BiConsumer;

import static com.azure.ai.openai.generated.TestUtils.FAKE_API_KEY;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

abstract class OpenAIClientTestBase extends TestProxyTestBase {
    protected OpenAIClient openAIClient;
    protected OpenAIAsyncClient openAIAsyncClient;

    @Override
    protected void beforeTest() {
        OpenAIClientBuilder openAIClientbuilder =
                new OpenAIClientBuilder()
                        .endpoint(interceptorManager.isPlaybackMode() ? "https://localhost:8080"
                            : Configuration.getGlobalConfiguration().get("AZURE_OPENAI_ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            openAIClientbuilder
                .httpClient(interceptorManager.getPlaybackClient())
                .credential(new AzureKeyCredential(FAKE_API_KEY));
        } else if (getTestMode() == TestMode.RECORD) {
            openAIClientbuilder
                .addPolicy(interceptorManager.getRecordPolicy())
                .credential(new AzureKeyCredential(Configuration.getGlobalConfiguration().get("AZURE_OPENAI_KEY")));
//                    .credential(new DefaultAzureCredentialBuilder().build()); // Uncomment it if using AAD
        } else if (getTestMode() == TestMode.LIVE) {
            openAIClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        openAIClient = openAIClientbuilder.buildClient();
        openAIAsyncClient = openAIClientbuilder.buildAsyncClient();
    }

    @Test
    public abstract void getCompletions(HttpClient httpClient, OpenAIServiceVersion serviceVersion);

    void getCompletionsRunner(BiConsumer<String, List<String>> testRunner) {
        String deploymentId = "text-davinci-003";
        List<String> prompt = new ArrayList<>();
        prompt.add("Say this is a test");
        testRunner.accept(deploymentId, prompt);
    }

    static void assertCompletions(int[] index, CompletionsLogProbabilityModel[] logprobs,
        CompletionsFinishReason[] finishReason, Completions actual) {

        assertNotNull(actual.getId());

        assertChoices(index, logprobs, finishReason, actual.getChoices());
        // TODO: assert Usage
    }

    static void assertChoices(int[] index, CompletionsLogProbabilityModel[] logprobs,
        CompletionsFinishReason[] finishReason, List<Choice> actual) {
        assertEquals(index.length, actual.size());

        for (int i = 0; i < actual.size(); i++) {
            assertChoice(index[i], null, null, actual.get(i));
        }
    }

    static void assertChoice(int index, CompletionsLogProbabilityModel logprobs,
                             CompletionsFinishReason finishReason, Choice actual) {
        assertNotNull(actual.getText());
        assertNotNull(actual.getFinishReason());
        assertEquals(index, actual.getIndex());

        // TODO: add more assertions for the additional properties
    }
}
