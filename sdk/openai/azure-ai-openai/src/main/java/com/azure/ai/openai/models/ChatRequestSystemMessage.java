// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

/**
 * A request chat message containing system instructions that influence how the model will generate a chat completions
 * response.
 */
@Fluent
public final class ChatRequestSystemMessage extends ChatRequestMessage {

    /*
     * The contents of the system message.
     */
    @Generated
    private final BinaryData content;

    private final String stringContent;

    private final List<ChatMessageContentItem> chatMessageContentItems;

    /*
     * An optional name for the participant.
     */
    @Generated
    private String name;

    /**
     * Get the content property: The contents of the system message.
     *
     * @return the content value.
     */
    @Generated
    public BinaryData getContent() {
        return this.content;
    }

    /**
     * Get the content property: The contents of the user message, with available input types varying by selected model.
     * If the result of this method is `null`, it means that the content could be a String or null altogether.
     *
     * @return the content value if defined as a list
     */
    public List<ChatMessageContentItem> getListContent() {
        return this.chatMessageContentItems;
    }

    /**
     * Get the content property: The contents of the user message, with available input types varying by selected model.
     * If the result of this method is `null`, it means that the content could be a String or null altogether.
     *
     * @return the content value if defined as an array
     */
    public ChatMessageContentItem[] getArrayContent() {
        return this.chatMessageContentItems == null
            ? null
            : this.chatMessageContentItems.toArray(new ChatMessageContentItem[0]);
    }

    /**
     * Get the content property: The contents of the user message, with available input types varying by selected model.
     * If the result of this method is `null`, it means that the content could be a list or null altogether.
     *
     * @return the content value if defined as a string
     */
    public String getStringContent() {
        return this.stringContent;
    }

    /**
     * Get the name property: An optional name for the participant.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: An optional name for the participant.
     *
     * @param name the name value to set.
     * @return the ChatRequestSystemMessage object itself.
     */
    @Generated
    public ChatRequestSystemMessage setName(String name) {
        this.name = name;
        return this;
    }

    /*
     * The chat role associated with this message.
     */
    @Generated
    private ChatRole role = ChatRole.SYSTEM;

    /**
     * Get the role property: The chat role associated with this message.
     *
     * @return the role value.
     */
    @Generated
    @Override
    public ChatRole getRole() {
        return this.role;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (stringContent != null) {
            jsonWriter.writeStringField("content", stringContent);
        } else if (chatMessageContentItems != null) {
            jsonWriter.writeArrayField("content", chatMessageContentItems, JsonWriter::writeJson);
        } else {
            jsonWriter.writeNullField("content");
        }
        jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatRequestSystemMessage from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatRequestSystemMessage if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatRequestSystemMessage.
     */
    public static ChatRequestSystemMessage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BinaryData content = null;
            String stringContent = null;
            List<ChatMessageContentItem> chatMessageContentItems = null;
            ChatRole role = ChatRole.SYSTEM;
            String name = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("content".equals(fieldName)) {
                    if (reader.currentToken() == JsonToken.STRING) {
                        stringContent = reader.getString();
                    } else if (reader.currentToken() == JsonToken.START_ARRAY) {
                        chatMessageContentItems
                            = reader.readArray(arrayReader -> arrayReader.readObject(ChatMessageContentItem::fromJson));
                    } else if (reader.currentToken() == JsonToken.NULL) {
                        content = null;
                    } else {
                        throw new IllegalStateException("Unexpected 'content' type found when deserializing"
                            + " ChatRequestSystemMessage JSON object: " + reader.currentToken());
                    }
                } else if ("role".equals(fieldName)) {
                    role = ChatRole.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ChatRequestSystemMessage deserializedChatRequestSystemMessage;
            if (CoreUtils.isNullOrEmpty(stringContent) && chatMessageContentItems == null) {
                deserializedChatRequestSystemMessage = new ChatRequestSystemMessage(content);
            } else {
                deserializedChatRequestSystemMessage = CoreUtils.isNullOrEmpty(stringContent)
                    ? new ChatRequestSystemMessage(chatMessageContentItems)
                    : new ChatRequestSystemMessage(stringContent);
            }
            deserializedChatRequestSystemMessage.role = role;
            deserializedChatRequestSystemMessage.name = name;
            return deserializedChatRequestSystemMessage;
        });
    }

    /**
     * Creates an instance of ChatRequestSystemMessage class.
     *
     * @param content the BinaryData content value to set.
     */
    private ChatRequestSystemMessage(BinaryData content) {
        this.content = content;
        this.stringContent = null;
        this.chatMessageContentItems = null;
    }

    /**
     * Creates an instance of ChatRequestSystemMessage class.
     *
     * @param content the String content value to set.
     */
    public ChatRequestSystemMessage(String content) {
        this.content = BinaryData.fromString(content);
        this.stringContent = content;
        this.chatMessageContentItems = null;
    }

    /**
     * Creates a new instance of ChatRequestSystemMessage using a collection of structured content.
     *
     * @param content The collection of structured content associated with the message.
     */
    public ChatRequestSystemMessage(ChatMessageContentItem[] content) {
        this.content = BinaryData.fromObject(content);
        this.chatMessageContentItems = Arrays.asList(content);
        this.stringContent = null;
    }

    /**
     * Creates an instance of ChatRequestSystemMessage class.
     *
     * @param content the List of ChatMessageContentItem content value to set.
     */
    public ChatRequestSystemMessage(List<ChatMessageContentItem> content) {
        this.content = BinaryData.fromObject(content);
        this.stringContent = null;
        this.chatMessageContentItems = content;
    }
}
