// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * The AzureChatMessageContextCitation model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class AzureChatMessageContextCitation implements JsonSerializable<AzureChatMessageContextCitation> {
    /*
     * The content of the citation.
     */
    @Metadata(generated = true)
    private final String content;

    /*
     * The title for the citation.
     */
    @Metadata(generated = true)
    private String title;

    /*
     * The URL of the citation.
     */
    @Metadata(generated = true)
    private String url;

    /*
     * The file path for the citation.
     */
    @Metadata(generated = true)
    private String filepath;

    /*
     * The chunk ID for the citation.
     */
    @Metadata(generated = true)
    private String chunkId;

    /*
     * The rerank score for the retrieval.
     */
    @Metadata(generated = true)
    private Double rerankScore;

    /**
     * Creates an instance of AzureChatMessageContextCitation class.
     * 
     * @param content the content value to set.
     */
    @Metadata(generated = true)
    private AzureChatMessageContextCitation(String content) {
        this.content = content;
    }

    /**
     * Get the content property: The content of the citation.
     * 
     * @return the content value.
     */
    @Metadata(generated = true)
    public String getContent() {
        return this.content;
    }

    /**
     * Get the title property: The title for the citation.
     * 
     * @return the title value.
     */
    @Metadata(generated = true)
    public String getTitle() {
        return this.title;
    }

    /**
     * Get the url property: The URL of the citation.
     * 
     * @return the url value.
     */
    @Metadata(generated = true)
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the filepath property: The file path for the citation.
     * 
     * @return the filepath value.
     */
    @Metadata(generated = true)
    public String getFilepath() {
        return this.filepath;
    }

    /**
     * Get the chunkId property: The chunk ID for the citation.
     * 
     * @return the chunkId value.
     */
    @Metadata(generated = true)
    public String getChunkId() {
        return this.chunkId;
    }

    /**
     * Get the rerankScore property: The rerank score for the retrieval.
     * 
     * @return the rerankScore value.
     */
    @Metadata(generated = true)
    public Double getRerankScore() {
        return this.rerankScore;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("content", this.content);
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("filepath", this.filepath);
        jsonWriter.writeStringField("chunk_id", this.chunkId);
        jsonWriter.writeNumberField("rerank_score", this.rerankScore);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureChatMessageContextCitation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureChatMessageContextCitation if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureChatMessageContextCitation.
     */
    @Metadata(generated = true)
    public static AzureChatMessageContextCitation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String content = null;
            String title = null;
            String url = null;
            String filepath = null;
            String chunkId = null;
            Double rerankScore = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("content".equals(fieldName)) {
                    content = reader.getString();
                } else if ("title".equals(fieldName)) {
                    title = reader.getString();
                } else if ("url".equals(fieldName)) {
                    url = reader.getString();
                } else if ("filepath".equals(fieldName)) {
                    filepath = reader.getString();
                } else if ("chunk_id".equals(fieldName)) {
                    chunkId = reader.getString();
                } else if ("rerank_score".equals(fieldName)) {
                    rerankScore = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }
            AzureChatMessageContextCitation deserializedAzureChatMessageContextCitation
                = new AzureChatMessageContextCitation(content);
            deserializedAzureChatMessageContextCitation.title = title;
            deserializedAzureChatMessageContextCitation.url = url;
            deserializedAzureChatMessageContextCitation.filepath = filepath;
            deserializedAzureChatMessageContextCitation.chunkId = chunkId;
            deserializedAzureChatMessageContextCitation.rerankScore = rerankScore;

            return deserializedAzureChatMessageContextCitation;
        });
    }
}
