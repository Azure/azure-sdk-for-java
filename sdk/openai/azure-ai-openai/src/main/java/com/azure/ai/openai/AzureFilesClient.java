// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai;

import com.azure.ai.openai.implementation.AzureFilesImpl;
import com.azure.ai.openai.implementation.MultipartFormDataHelper;
import com.azure.ai.openai.models.AzureCreateFileRequest;
import com.azure.ai.openai.models.AzureListFilesResponse;
import com.azure.ai.openai.models.AzureOpenAIFile;
import com.azure.ai.openai.models.DeleteFileResponse;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import java.util.Objects;

/**
 * Initializes a new instance of the synchronous AzureOpenAIClient type.
 */
@ServiceClient(builder = AzureOpenAIClientBuilder.class)
public final class AzureFilesClient {
    @Generated
    private final AzureFilesImpl serviceClient;

    /**
     * Initializes an instance of AzureFilesClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    AzureFilesClient(AzureFilesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Upload a file that can be used across various endpoints. The size of all the files uploaded by
     * one organization can be up to 100 GB.
     * 
     * The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See
     * the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files
     * supported. The Fine-tuning API only supports `.jsonl` files.
     * 
     * Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     bytes: Integer (Required)
     *     created_at: long (Required)
     *     expires_at: Long (Optional)
     *     filename: String (Required)
     *     object: String (Required)
     *     purpose: String(assistants/assistants_output/batch/batch_output/fine-tune/fine-tune-results/vision/user_data/evals) (Required)
     *     status_details: String (Optional)
     *     status: String(uploaded/pending/running/processed/error/deleting/deleted) (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryData> createFileWithResponse(BinaryData requestBody, RequestOptions requestOptions) {
        // Protocol API requires serialization of parts with content-disposition and data, as operation 'createFile' is
        // 'multipart/form-data'
        return this.serviceClient.createFileWithResponse(requestBody, requestOptions);
    }

    /**
     * Returns a list of files that belong to the user's organization.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>purpose</td><td>String</td><td>No</td><td>Only return files with the given purpose.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             bytes: Integer (Required)
     *             created_at: long (Required)
     *             expires_at: Long (Optional)
     *             filename: String (Required)
     *             object: String (Required)
     *             purpose: String(assistants/assistants_output/batch/batch_output/fine-tune/fine-tune-results/vision/user_data/evals) (Required)
     *             status_details: String (Optional)
     *             status: String(uploaded/pending/running/processed/error/deleting/deleted) (Required)
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listFilesWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listFilesWithResponse(requestOptions);
    }

    /**
     * Returns information about a specific file.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     bytes: Integer (Required)
     *     created_at: long (Required)
     *     expires_at: Long (Optional)
     *     filename: String (Required)
     *     object: String (Required)
     *     purpose: String(assistants/assistants_output/batch/batch_output/fine-tune/fine-tune-results/vision/user_data/evals) (Required)
     *     status_details: String (Optional)
     *     status: String(uploaded/pending/running/processed/error/deleting/deleted) (Required)
     * }
     * }
     * </pre>
     * 
     * @param fileId The ID of the file to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retrieveFileWithResponse(String fileId, RequestOptions requestOptions) {
        return this.serviceClient.retrieveFileWithResponse(fileId, requestOptions);
    }

    /**
     * Delete a file.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     deleted: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param fileId The ID of the file to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteFileWithResponse(String fileId, RequestOptions requestOptions) {
        return this.serviceClient.deleteFileWithResponse(fileId, requestOptions);
    }

    /**
     * Returns the contents of the specified file.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * byte[]
     * }
     * </pre>
     * 
     * @param fileId The ID of the file to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represent a byte array along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> downloadFileWithResponse(String fileId, RequestOptions requestOptions) {
        return this.serviceClient.downloadFileWithResponse(fileId, requestOptions);
    }

    /**
     * Upload a file that can be used across various endpoints. The size of all the files uploaded by
     * one organization can be up to 100 GB.
     * 
     * The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See
     * the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files
     * supported. The Fine-tuning API only supports `.jsonl` files.
     * 
     * Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
     * 
     * @param requestBody The requestBody parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AzureOpenAIFile createFile(AzureCreateFileRequest requestBody) {
        // Generated convenience method for createFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createFileWithResponse(new MultipartFormDataHelper(requestOptions)
            .serializeFileField("file", requestBody.getFile().getContent(), requestBody.getFile().getContentType(),
                requestBody.getFile().getFilename())
            .serializeTextField("purpose", Objects.toString(requestBody.getPurpose()))
            .serializeJsonField("expires_after", requestBody.getExpiresAfter())
            .end()
            .getRequestBody(), requestOptions).getValue().toObject(AzureOpenAIFile.class);
    }

    /**
     * Returns a list of files that belong to the user's organization.
     * 
     * @param purpose Only return files with the given purpose.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AzureListFilesResponse listFiles(String purpose) {
        // Generated convenience method for listFilesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (purpose != null) {
            requestOptions.addQueryParam("purpose", purpose, false);
        }
        return listFilesWithResponse(requestOptions).getValue().toObject(AzureListFilesResponse.class);
    }

    /**
     * Returns a list of files that belong to the user's organization.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AzureListFilesResponse listFiles() {
        // Generated convenience method for listFilesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listFilesWithResponse(requestOptions).getValue().toObject(AzureListFilesResponse.class);
    }

    /**
     * Returns information about a specific file.
     * 
     * @param fileId The ID of the file to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AzureOpenAIFile retrieveFile(String fileId) {
        // Generated convenience method for retrieveFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return retrieveFileWithResponse(fileId, requestOptions).getValue().toObject(AzureOpenAIFile.class);
    }

    /**
     * Delete a file.
     * 
     * @param fileId The ID of the file to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeleteFileResponse deleteFile(String fileId) {
        // Generated convenience method for deleteFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteFileWithResponse(fileId, requestOptions).getValue().toObject(DeleteFileResponse.class);
    }

    /**
     * Returns the contents of the specified file.
     * 
     * @param fileId The ID of the file to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represent a byte array.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public byte[] downloadFile(String fileId) {
        // Generated convenience method for downloadFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return downloadFileWithResponse(fileId, requestOptions).getValue().toObject(byte[].class);
    }
}
