// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.responses.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ResponsesOutputContentAudio model.
 */
@Immutable
public final class ResponsesOutputContentAudio extends ResponsesContent {
    /*
     * The type property.
     */
    @Generated
    private ResponsesContentType type = ResponsesContentType.OUTPUT_AUDIO;

    /*
     * The data property.
     */
    @Generated
    private final byte[] data;

    /*
     * The transcript property.
     */
    @Generated
    private final String transcript;

    /**
     * Creates an instance of ResponsesOutputContentAudio class.
     * 
     * @param data the data value to set.
     * @param transcript the transcript value to set.
     */
    @Generated
    public ResponsesOutputContentAudio(byte[] data, String transcript) {
        this.data = data;
        this.transcript = transcript;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ResponsesContentType getType() {
        return this.type;
    }

    /**
     * Get the data property: The data property.
     * 
     * @return the data value.
     */
    @Generated
    public byte[] getData() {
        return CoreUtils.clone(this.data);
    }

    /**
     * Get the transcript property: The transcript property.
     * 
     * @return the transcript value.
     */
    @Generated
    public String getTranscript() {
        return this.transcript;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBinaryField("data", this.data);
        jsonWriter.writeStringField("transcript", this.transcript);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponsesOutputContentAudio from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponsesOutputContentAudio if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResponsesOutputContentAudio.
     */
    @Generated
    public static ResponsesOutputContentAudio fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            byte[] data = null;
            String transcript = null;
            ResponsesContentType type = ResponsesContentType.OUTPUT_AUDIO;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("data".equals(fieldName)) {
                    data = reader.getBinary();
                } else if ("transcript".equals(fieldName)) {
                    transcript = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = ResponsesContentType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ResponsesOutputContentAudio deserializedResponsesOutputContentAudio
                = new ResponsesOutputContentAudio(data, transcript);
            deserializedResponsesOutputContentAudio.type = type;

            return deserializedResponsesOutputContentAudio;
        });
    }
}
