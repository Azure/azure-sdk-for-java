// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * The ChatResponseFormatJsonSchemaJsonSchema model.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class ChatResponseFormatJsonSchemaJsonSchema
    implements JsonSerializable<ChatResponseFormatJsonSchemaJsonSchema> {
    /*
     * A description of what the response format is for, used by the model to
     * determine how to respond in the format.
     */
    @Metadata(generated = true)
    private String description;

    /*
     * The name of the response format. Must be a-z, A-Z, 0-9, or contain
     * underscores and dashes, with a maximum length of 64.
     */
    @Metadata(generated = true)
    private final String name;

    /*
     * The schema property.
     */
    @Metadata(generated = true)
    private ResponseFormatJsonSchemaSchema schema;

    /*
     * Whether to enable strict schema adherence when generating the output.
     * If set to true, the model will always follow the exact schema defined
     * in the `schema` field. Only a subset of JSON Schema is supported when
     * `strict` is `true`. To learn more, read the [Structured Outputs
     * guide](/docs/guides/structured-outputs).
     */
    @Metadata(generated = true)
    private Boolean strict;

    /**
     * Creates an instance of ChatResponseFormatJsonSchemaJsonSchema class.
     * 
     * @param name the name value to set.
     */
    @Metadata(generated = true)
    public ChatResponseFormatJsonSchemaJsonSchema(String name) {
        this.name = name;
    }

    /**
     * Get the description property: A description of what the response format is for, used by the model to
     * determine how to respond in the format.
     * 
     * @return the description value.
     */
    @Metadata(generated = true)
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: A description of what the response format is for, used by the model to
     * determine how to respond in the format.
     * 
     * @param description the description value to set.
     * @return the ChatResponseFormatJsonSchemaJsonSchema object itself.
     */
    @Metadata(generated = true)
    public ChatResponseFormatJsonSchemaJsonSchema setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the name property: The name of the response format. Must be a-z, A-Z, 0-9, or contain
     * underscores and dashes, with a maximum length of 64.
     * 
     * @return the name value.
     */
    @Metadata(generated = true)
    public String getName() {
        return this.name;
    }

    /**
     * Get the schema property: The schema property.
     * 
     * @return the schema value.
     */
    @Metadata(generated = true)
    public ResponseFormatJsonSchemaSchema getSchema() {
        return this.schema;
    }

    /**
     * Set the schema property: The schema property.
     * 
     * @param schema the schema value to set.
     * @return the ChatResponseFormatJsonSchemaJsonSchema object itself.
     */
    @Metadata(generated = true)
    public ChatResponseFormatJsonSchemaJsonSchema setSchema(ResponseFormatJsonSchemaSchema schema) {
        this.schema = schema;
        return this;
    }

    /**
     * Get the strict property: Whether to enable strict schema adherence when generating the output.
     * If set to true, the model will always follow the exact schema defined
     * in the `schema` field. Only a subset of JSON Schema is supported when
     * `strict` is `true`. To learn more, read the [Structured Outputs
     * guide](/docs/guides/structured-outputs).
     * 
     * @return the strict value.
     */
    @Metadata(generated = true)
    public Boolean isStrict() {
        return this.strict;
    }

    /**
     * Set the strict property: Whether to enable strict schema adherence when generating the output.
     * If set to true, the model will always follow the exact schema defined
     * in the `schema` field. Only a subset of JSON Schema is supported when
     * `strict` is `true`. To learn more, read the [Structured Outputs
     * guide](/docs/guides/structured-outputs).
     * 
     * @param strict the strict value to set.
     * @return the ChatResponseFormatJsonSchemaJsonSchema object itself.
     */
    @Metadata(generated = true)
    public ChatResponseFormatJsonSchemaJsonSchema setStrict(Boolean strict) {
        this.strict = strict;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeJsonField("schema", this.schema);
        jsonWriter.writeBooleanField("strict", this.strict);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatResponseFormatJsonSchemaJsonSchema from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatResponseFormatJsonSchemaJsonSchema if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatResponseFormatJsonSchemaJsonSchema.
     */
    @Metadata(generated = true)
    public static ChatResponseFormatJsonSchemaJsonSchema fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String description = null;
            ResponseFormatJsonSchemaSchema schema = null;
            Boolean strict = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("schema".equals(fieldName)) {
                    schema = ResponseFormatJsonSchemaSchema.fromJson(reader);
                } else if ("strict".equals(fieldName)) {
                    strict = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            ChatResponseFormatJsonSchemaJsonSchema deserializedChatResponseFormatJsonSchemaJsonSchema
                = new ChatResponseFormatJsonSchemaJsonSchema(name);
            deserializedChatResponseFormatJsonSchemaJsonSchema.description = description;
            deserializedChatResponseFormatJsonSchemaJsonSchema.schema = schema;
            deserializedChatResponseFormatJsonSchemaJsonSchema.strict = strict;

            return deserializedChatResponseFormatJsonSchemaJsonSchema;
        });
    }
}
