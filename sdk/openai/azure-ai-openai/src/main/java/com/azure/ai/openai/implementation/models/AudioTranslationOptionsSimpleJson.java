// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.ai.openai.implementation.models;

import com.azure.ai.openai.models.AudioTranscriptionFormat;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;

/** This format will return an JSON structure containing a single "text" with the translation. */
@Fluent
public final class AudioTranslationOptionsSimpleJson {

    /*
     * The audio file object to transcribe.
     */
    @Generated
    @JsonProperty(value = "file")
    private byte[] file;

    /*
     * An optional text to guide the model's style or continue a previous audio segment. The prompt should match the
     * audio language.
     */
    @Generated
    @JsonProperty(value = "prompt")
    private String prompt;

    /*
     * The sampling temperature, between 0 and 1.
     * Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused
     * and deterministic.
     * If set to 0, the model will use log probability to automatically increase the temperature until certain
     * thresholds are hit.
     */
    @Generated
    @JsonProperty(value = "temperature")
    private Double temperature;

    /*
     * The format of the transcription output, in one of these options: json, text, srt, verbose_json, or vtt.
     */
    @Generated
    @JsonProperty(value = "response_format")
    private AudioTranscriptionFormat responseFormat;

    /**
     * Creates an instance of AudioTranslationOptionsSimpleJson class.
     *
     * @param file the file value to set.
     */
    @Generated
    @JsonCreator
    public AudioTranslationOptionsSimpleJson(@JsonProperty(value = "file") byte[] file) {
        this.file = file;
    }

    /**
     * Get the file property: The audio file object to transcribe.
     *
     * @return the file value.
     */
    @Generated
    public byte[] getFile() {
        return CoreUtils.clone(this.file);
    }

    /**
     * Get the prompt property: An optional text to guide the model's style or continue a previous audio segment. The
     * prompt should match the audio language.
     *
     * @return the prompt value.
     */
    @Generated
    public String getPrompt() {
        return this.prompt;
    }

    /**
     * Set the prompt property: An optional text to guide the model's style or continue a previous audio segment. The
     * prompt should match the audio language.
     *
     * @param prompt the prompt value to set.
     * @return the AudioTranslationOptionsSimpleJson object itself.
     */
    @Generated
    public AudioTranslationOptionsSimpleJson setPrompt(String prompt) {
        this.prompt = prompt;
        return this;
    }

    /**
     * Get the temperature property: The sampling temperature, between 0 and 1. Higher values like 0.8 will make the
     * output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the
     * model will use log probability to automatically increase the temperature until certain thresholds are hit.
     *
     * @return the temperature value.
     */
    @Generated
    public Double getTemperature() {
        return this.temperature;
    }

    /**
     * Set the temperature property: The sampling temperature, between 0 and 1. Higher values like 0.8 will make the
     * output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the
     * model will use log probability to automatically increase the temperature until certain thresholds are hit.
     *
     * @param temperature the temperature value to set.
     * @return the AudioTranslationOptionsSimpleJson object itself.
     */
    @Generated
    public AudioTranslationOptionsSimpleJson setTemperature(Double temperature) {
        this.temperature = temperature;
        return this;
    }

    /**
     * Get the responseFormat property: The format of the transcription output, in one of these options: json, text,
     * srt, verbose_json, or vtt.
     *
     * @return the responseFormat value.
     */
    @Generated
    public AudioTranscriptionFormat getResponseFormat() {
        return this.responseFormat;
    }

    /**
     * Set the responseFormat property: The format of the transcription output, in one of these options: json, text,
     * srt, verbose_json, or vtt.
     *
     * @param responseFormat the responseFormat value to set.
     * @return the AudioTranslationOptionsSimpleJson object itself.
     */
    @Generated
    public AudioTranslationOptionsSimpleJson setResponseFormat(AudioTranscriptionFormat responseFormat) {
        this.responseFormat = responseFormat;
        return this;
    }

    /*
     * The model name to provide as part of this transcription request.
     * Not applicable to Azure OpenAI, where deployment information should be included in the Azure
     * resource URI that's connected to.
     */
    @Generated
    @JsonProperty(value = "model")
    private String model;

    /**
     * Get the model property: The model name to provide as part of this transcription request. Not applicable to Azure
     * OpenAI, where deployment information should be included in the Azure resource URI that's connected to.
     *
     * @return the model value.
     */
    @Generated
    public String getModel() {
        return this.model;
    }

    /**
     * Set the model property: The model name to provide as part of this transcription request. Not applicable to Azure
     * OpenAI, where deployment information should be included in the Azure resource URI that's connected to.
     *
     * @param model the model value to set.
     * @return the AudioTranslationOptionsSimpleJson object itself.
     */
    @Generated
    public AudioTranslationOptionsSimpleJson setModel(String model) {
        this.model = model;
        return this;
    }
}
