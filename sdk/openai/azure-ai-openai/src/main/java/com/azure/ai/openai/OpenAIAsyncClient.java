// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.ai.openai;

import com.azure.ai.openai.implementation.OpenAIClientImpl;
import com.azure.ai.openai.models.Completion;
import com.azure.ai.openai.models.CompletionsOptions;
import com.azure.ai.openai.models.Embeddings;
import com.azure.ai.openai.models.InputModelBase;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import java.util.HashMap;
import java.util.Map;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous OpenAIClient type. */
@ServiceClient(builder = OpenAIClientBuilder.class, isAsync = true)
public final class OpenAIAsyncClient {

    @Generated private final OpenAIClientImpl serviceClient;

    /**
     * Initializes an instance of OpenAIAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    OpenAIAsyncClient(OpenAIClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Return the embeddings for a given prompt.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     user: String (Optional)
     *     input_type: String (Optional)
     *     model: String (Optional)
     *     input: InputModelBase (Required)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             object: String (Required)
     *             embedding (Required): [
     *                 double (Required)
     *             ]
     *             index: int (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param deploymentId deployment id of the deployed model.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> embeddingsWithResponse(
            String deploymentId, BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.embeddingsWithResponseAsync(deploymentId, request, requestOptions);
    }

    /**
     * Return the completions for a given prompt.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     user: String (Optional)
     *     input_type: String (Optional)
     *     model: String (Optional)
     *     input: InputModelBase (Required)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     object: String (Required)
     *     created: Integer (Optional)
     *     model: String (Optional)
     *     choices (Optional): [
     *          (Optional){
     *             text: String (Optional)
     *             index: Integer (Optional)
     *             logprobs (Optional): {
     *                 tokens (Optional): [
     *                     String (Optional)
     *                 ]
     *                 token_logprobs (Optional): [
     *                     double (Optional)
     *                 ]
     *                 top_logprobs (Optional): [
     *                      (Optional){
     *                         String: double (Optional)
     *                     }
     *                 ]
     *                 text_offset (Optional): [
     *                     int (Optional)
     *                 ]
     *             }
     *             finish_reason: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param deploymentId deployment id of the deployed model.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return expected response schema to completion request along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> completionsWithResponse(
            String deploymentId, BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.completionsWithResponseAsync(deploymentId, request, requestOptions);
    }

    /**
     * Return the embeddings for a given prompt.
     *
     * @param deploymentId deployment id of the deployed model.
     * @param input An input to embed, encoded as a string, a list of strings, or a list of token lists.
     * @param user The ID of the end-user, for use in tracking and rate-limiting.
     * @param inputType input type of embedding search to use.
     * @param model ID of the model to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Embeddings> embeddings(
            String deploymentId, InputModelBase input, String user, String inputType, String model) {
        // Generated convenience method for embeddingsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Map<String, Object> requestObj = new HashMap<>();
        requestObj.put("user", user);
        requestObj.put("input_type", inputType);
        requestObj.put("model", model);
        requestObj.put("input", input);
        BinaryData request = BinaryData.fromObject(requestObj);
        return embeddingsWithResponse(deploymentId, request, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(Embeddings.class));
    }

    /**
     * Return the embeddings for a given prompt.
     *
     * @param deploymentId deployment id of the deployed model.
     * @param input An input to embed, encoded as a string, a list of strings, or a list of token lists.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Embeddings> embeddings(String deploymentId, InputModelBase input) {
        // Generated convenience method for embeddingsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Map<String, Object> requestObj = new HashMap<>();
        requestObj.put("input", input);
        BinaryData request = BinaryData.fromObject(requestObj);
        return embeddingsWithResponse(deploymentId, request, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(Embeddings.class));
    }

    /**
     * Return the completions for a given prompt.
     *
     * @param options Options for completions API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return expected response schema to completion request on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Completion> completions(CompletionsOptions options) {
        // Generated convenience method for completionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String deploymentId = options.getDeploymentId();
        Map<String, Object> requestObj = new HashMap<>();
        requestObj.put("prompt", options.getPrompt());
        requestObj.put("max_tokens", options.getMaxTokens());
        requestObj.put("temperature", options.getTemperature());
        requestObj.put("top_p", options.getTopP());
        requestObj.put("logit_bias", options.getLogitBias());
        requestObj.put("user", options.getUser());
        requestObj.put("n", options.getN());
        requestObj.put("stream", options.isStream());
        requestObj.put("logprobs", options.getLogprobs());
        requestObj.put("model", options.getModel());
        requestObj.put("echo", options.isEcho());
        requestObj.put("stop", options.getStop());
        requestObj.put("completion_config", options.getCompletionConfig());
        requestObj.put("cache_level", options.getCacheLevel());
        requestObj.put("presence_penalty", options.getPresencePenalty());
        requestObj.put("frequency_penalty", options.getFrequencyPenalty());
        requestObj.put("best_of", options.getBestOf());
        BinaryData request = BinaryData.fromObject(requestObj);
        return completionsWithResponse(deploymentId, request, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(Completion.class));
    }
}
