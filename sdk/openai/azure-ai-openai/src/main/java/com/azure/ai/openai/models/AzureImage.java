// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The AzureImage model.
 */
@Immutable
public final class AzureImage extends Image {
    /*
     * The prompt_filter_results property.
     */
    @Generated
    private final AzureContentFilterImagePromptResults promptFilterResults;

    /*
     * The content_filter_results property.
     */
    @Generated
    private final AzureContentFilterImageResponseResults contentFilterResults;

    /*
     * The prompt that was used to generate the image, if there was any revision to the prompt.
     */
    @Generated
    private String revisedPrompt;

    /*
     * The URL of the generated image, if `response_format` is `url` (default).
     */
    @Generated
    private String url;

    /*
     * The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
     */
    @Generated
    private byte[] b64Json;

    /**
     * Creates an instance of AzureImage class.
     * 
     * @param promptFilterResults the promptFilterResults value to set.
     * @param contentFilterResults the contentFilterResults value to set.
     */
    @Generated
    private AzureImage(AzureContentFilterImagePromptResults promptFilterResults,
        AzureContentFilterImageResponseResults contentFilterResults) {
        this.promptFilterResults = promptFilterResults;
        this.contentFilterResults = contentFilterResults;
    }

    /**
     * Get the promptFilterResults property: The prompt_filter_results property.
     * 
     * @return the promptFilterResults value.
     */
    @Generated
    public AzureContentFilterImagePromptResults getPromptFilterResults() {
        return this.promptFilterResults;
    }

    /**
     * Get the contentFilterResults property: The content_filter_results property.
     * 
     * @return the contentFilterResults value.
     */
    @Generated
    public AzureContentFilterImageResponseResults getContentFilterResults() {
        return this.contentFilterResults;
    }

    /**
     * Get the revisedPrompt property: The prompt that was used to generate the image, if there was any revision to the
     * prompt.
     * 
     * @return the revisedPrompt value.
     */
    @Generated
    @Override
    public String getRevisedPrompt() {
        return this.revisedPrompt;
    }

    /**
     * Get the url property: The URL of the generated image, if `response_format` is `url` (default).
     * 
     * @return the url value.
     */
    @Generated
    @Override
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the b64Json property: The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
     * 
     * @return the b64Json value.
     */
    @Generated
    @Override
    public byte[] getB64Json() {
        return CoreUtils.clone(this.b64Json);
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBinaryField("b64_json", getB64Json());
        jsonWriter.writeStringField("url", getUrl());
        jsonWriter.writeStringField("revised_prompt", getRevisedPrompt());
        jsonWriter.writeJsonField("prompt_filter_results", this.promptFilterResults);
        jsonWriter.writeJsonField("content_filter_results", this.contentFilterResults);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureImage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureImage if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureImage.
     */
    @Generated
    public static AzureImage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            byte[] b64Json = null;
            String url = null;
            String revisedPrompt = null;
            AzureContentFilterImagePromptResults promptFilterResults = null;
            AzureContentFilterImageResponseResults contentFilterResults = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("b64_json".equals(fieldName)) {
                    b64Json = reader.getBinary();
                } else if ("url".equals(fieldName)) {
                    url = reader.getString();
                } else if ("revised_prompt".equals(fieldName)) {
                    revisedPrompt = reader.getString();
                } else if ("prompt_filter_results".equals(fieldName)) {
                    promptFilterResults = AzureContentFilterImagePromptResults.fromJson(reader);
                } else if ("content_filter_results".equals(fieldName)) {
                    contentFilterResults = AzureContentFilterImageResponseResults.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            AzureImage deserializedAzureImage = new AzureImage(promptFilterResults, contentFilterResults);
            deserializedAzureImage.b64Json = b64Json;
            deserializedAzureImage.url = url;
            deserializedAzureImage.revisedPrompt = revisedPrompt;

            return deserializedAzureImage;
        });
    }
}
