// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The CreateMessageRequest model.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class CreateMessageRequest implements JsonSerializable<CreateMessageRequest> {
    /*
     * The role of the entity that is creating the message. Allowed values include:
     * - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent
     * user-generated messages.
     * - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the
     * assistant into the conversation.
     */
    @Metadata(generated = true)
    private final CreateMessageRequestRole role;

    /*
     * The content property.
     */
    @Metadata(generated = true)
    private final List<MessageContent> content;

    /*
     * A list of files attached to the message, and the tools they should be added to.
     */
    @Metadata(generated = true)
    private List<CreateMessageRequestAttachment> attachments;

    /*
     * Set of 16 key-value pairs that can be attached to an object. This can be
     * useful for storing additional information about the object in a structured
     * format, and querying for objects via API or the dashboard.
     * 
     * Keys are strings with a maximum length of 64 characters. Values are strings
     * with a maximum length of 512 characters.
     */
    @Metadata(generated = true)
    private Map<String, String> metadata;

    /**
     * Creates an instance of CreateMessageRequest class.
     * 
     * @param role the role value to set.
     * @param content the content value to set.
     */
    @Metadata(generated = true)
    public CreateMessageRequest(CreateMessageRequestRole role, List<MessageContent> content) {
        this.role = role;
        this.content = content;
    }

    /**
     * Get the role property: The role of the entity that is creating the message. Allowed values include:
     * - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent
     * user-generated messages.
     * - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the
     * assistant into the conversation.
     * 
     * @return the role value.
     */
    @Metadata(generated = true)
    public CreateMessageRequestRole getRole() {
        return this.role;
    }

    /**
     * Get the content property: The content property.
     * 
     * @return the content value.
     */
    @Metadata(generated = true)
    public List<MessageContent> getContent() {
        return this.content;
    }

    /**
     * Get the attachments property: A list of files attached to the message, and the tools they should be added to.
     * 
     * @return the attachments value.
     */
    @Metadata(generated = true)
    public List<CreateMessageRequestAttachment> getAttachments() {
        return this.attachments;
    }

    /**
     * Set the attachments property: A list of files attached to the message, and the tools they should be added to.
     * 
     * @param attachments the attachments value to set.
     * @return the CreateMessageRequest object itself.
     */
    @Metadata(generated = true)
    public CreateMessageRequest setAttachments(List<CreateMessageRequestAttachment> attachments) {
        this.attachments = attachments;
        return this;
    }

    /**
     * Get the metadata property: Set of 16 key-value pairs that can be attached to an object. This can be
     * useful for storing additional information about the object in a structured
     * format, and querying for objects via API or the dashboard.
     * 
     * Keys are strings with a maximum length of 64 characters. Values are strings
     * with a maximum length of 512 characters.
     * 
     * @return the metadata value.
     */
    @Metadata(generated = true)
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Set of 16 key-value pairs that can be attached to an object. This can be
     * useful for storing additional information about the object in a structured
     * format, and querying for objects via API or the dashboard.
     * 
     * Keys are strings with a maximum length of 64 characters. Values are strings
     * with a maximum length of 512 characters.
     * 
     * @param metadata the metadata value to set.
     * @return the CreateMessageRequest object itself.
     */
    @Metadata(generated = true)
    public CreateMessageRequest setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
        jsonWriter.writeArrayField("content", this.content, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("attachments", this.attachments, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateMessageRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateMessageRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateMessageRequest.
     */
    @Metadata(generated = true)
    public static CreateMessageRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CreateMessageRequestRole role = null;
            List<MessageContent> content = null;
            List<CreateMessageRequestAttachment> attachments = null;
            Map<String, String> metadata = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("role".equals(fieldName)) {
                    role = CreateMessageRequestRole.fromString(reader.getString());
                } else if ("content".equals(fieldName)) {
                    content = reader.readArray(reader1 -> MessageContent.fromJson(reader1));
                } else if ("attachments".equals(fieldName)) {
                    attachments = reader.readArray(reader1 -> CreateMessageRequestAttachment.fromJson(reader1));
                } else if ("metadata".equals(fieldName)) {
                    metadata = reader.readMap(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            CreateMessageRequest deserializedCreateMessageRequest = new CreateMessageRequest(role, content);
            deserializedCreateMessageRequest.attachments = attachments;
            deserializedCreateMessageRequest.metadata = metadata;

            return deserializedCreateMessageRequest;
        });
    }
}
