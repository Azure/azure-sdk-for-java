// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.responses.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ResponsesResponseStreamEventFileSearchCallSearching model.
 */
@Immutable
public final class ResponsesResponseStreamEventFileSearchCallSearching extends ResponsesResponseStreamEvent {

    /*
     * The type property.
     */
    @Generated
    private ResponsesResponseStreamEventType type
        = ResponsesResponseStreamEventType.RESPONSE_FILE_SEARCH_CALL_SEARCHING;

    /*
     * The ID of the response.
     */
    @Generated
    private final String responseId;

    /*
     * The output_index property.
     */
    @Generated
    private final int outputIndex;

    /*
     * The file_search_call property.
     */
    @Generated
    private final ResponsesFileSearchCallItem fileSearchCall;

    /**
     * Creates an instance of ResponsesResponseStreamEventFileSearchCallSearching class.
     *
     * @param responseId the responseId value to set.
     * @param outputIndex the outputIndex value to set.
     * @param fileSearchCall the fileSearchCall value to set.
     */
    @Generated
    private ResponsesResponseStreamEventFileSearchCallSearching(String responseId, int outputIndex,
        ResponsesFileSearchCallItem fileSearchCall) {
        this.responseId = responseId;
        this.outputIndex = outputIndex;
        this.fileSearchCall = fileSearchCall;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ResponsesResponseStreamEventType getType() {
        return this.type;
    }

    /**
     * Get the responseId property: The ID of the response.
     *
     * @return the responseId value.
     */
    @Generated
    public String getResponseId() {
        return this.responseId;
    }

    /**
     * Get the outputIndex property: The output_index property.
     *
     * @return the outputIndex value.
     */
    @Generated
    public int getOutputIndex() {
        return this.outputIndex;
    }

    /**
     * Get the fileSearchCall property: The file_search_call property.
     *
     * @return the fileSearchCall value.
     */
    @Generated
    public ResponsesFileSearchCallItem getFileSearchCall() {
        return this.fileSearchCall;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("response_id", this.responseId);
        jsonWriter.writeIntField("output_index", this.outputIndex);
        jsonWriter.writeJsonField("file_search_call", this.fileSearchCall);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponsesResponseStreamEventFileSearchCallSearching from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponsesResponseStreamEventFileSearchCallSearching if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResponsesResponseStreamEventFileSearchCallSearching.
     */
    @Generated
    public static ResponsesResponseStreamEventFileSearchCallSearching fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            String responseId = null;
            int outputIndex = 0;
            ResponsesFileSearchCallItem fileSearchCall = null;
            ResponsesResponseStreamEventType type
                = ResponsesResponseStreamEventType.RESPONSE_FILE_SEARCH_CALL_SEARCHING;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("response_id".equals(fieldName)) {
                    responseId = reader.getString();
                } else if ("output_index".equals(fieldName)) {
                    outputIndex = reader.getInt();
                } else if ("file_search_call".equals(fieldName)) {
                    fileSearchCall = ResponsesFileSearchCallItem.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    type = ResponsesResponseStreamEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ResponsesResponseStreamEventFileSearchCallSearching deserializedResponsesResponseStreamEventFileSearchCallSearching
                = new ResponsesResponseStreamEventFileSearchCallSearching(responseId, outputIndex, fileSearchCall);
            deserializedResponsesResponseStreamEventFileSearchCallSearching.type = type;
            return deserializedResponsesResponseStreamEventFileSearchCallSearching;
        });
    }
}
