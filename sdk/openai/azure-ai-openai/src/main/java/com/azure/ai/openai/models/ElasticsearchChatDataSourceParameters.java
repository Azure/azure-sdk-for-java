// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The ElasticsearchChatDataSourceParameters model.
 */
@Fluent
public final class ElasticsearchChatDataSourceParameters {
    /*
     * The configured number of documents to feature in the query.
     */
    @Generated
    @JsonProperty(value = "top_n_documents")
    private Integer topNDocuments;

    /*
     * Whether queries should be restricted to use of the indexed data.
     */
    @Generated
    @JsonProperty(value = "in_scope")
    private Boolean inScope;

    /*
     * The configured strictness of the search relevance filtering.
     * Higher strictness will increase precision but lower recall of the answer.
     */
    @Generated
    @JsonProperty(value = "strictness")
    private Integer strictness;

    /*
     * The maximum number of rewritten queries that should be sent to the search provider for a single user message.
     * By default, the system will make an automatic determination.
     */
    @Generated
    @JsonProperty(value = "max_search_queries")
    private Integer maxSearchQueries;

    /*
     * If set to true, the system will allow partial search results to be used and the request will fail if all
     * partial queries fail. If not specified or specified as false, the request will fail if any search query fails.
     */
    @Generated
    @JsonProperty(value = "allow_partial_result")
    private Boolean allowPartialResult;

    /*
     * The output context properties to include on the response.
     * By default, citations and intent will be requested.
     */
    @Generated
    @JsonProperty(value = "include_contexts")
    private List<AzureSearchChatDataSourceParametersIncludeContext> includeContexts;

    /*
     * The endpoint property.
     */
    @Generated
    @JsonProperty(value = "endpoint")
    private final String endpoint;

    /*
     * The index_name property.
     */
    @Generated
    @JsonProperty(value = "index_name")
    private final String indexName;

    /*
     * The authentication property.
     */
    @Generated
    @JsonProperty(value = "authentication")
    private final BinaryData authentication;

    /*
     * The fields_mapping property.
     */
    @Generated
    @JsonProperty(value = "fields_mapping")
    private ElasticsearchChatDataSourceParametersFieldsMapping fieldsMapping;

    /*
     * The query_type property.
     */
    @Generated
    @JsonProperty(value = "query_type")
    private ElasticsearchChatDataSourceParametersQueryType queryType;

    /*
     * The embedding_dependency property.
     */
    @Generated
    @JsonProperty(value = "embedding_dependency")
    private AzureChatDataSourceVectorizationSource embeddingDependency;

    /**
     * Creates an instance of ElasticsearchChatDataSourceParameters class.
     * 
     * @param endpoint the endpoint value to set.
     * @param indexName the indexName value to set.
     * @param authentication the authentication value to set.
     */
    @Generated
    @JsonCreator
    public ElasticsearchChatDataSourceParameters(@JsonProperty(value = "endpoint") String endpoint,
        @JsonProperty(value = "index_name") String indexName,
        @JsonProperty(value = "authentication") BinaryData authentication) {
        this.endpoint = endpoint;
        this.indexName = indexName;
        this.authentication = authentication;
    }

    /**
     * Get the topNDocuments property: The configured number of documents to feature in the query.
     * 
     * @return the topNDocuments value.
     */
    @Generated
    public Integer getTopNDocuments() {
        return this.topNDocuments;
    }

    /**
     * Set the topNDocuments property: The configured number of documents to feature in the query.
     * 
     * @param topNDocuments the topNDocuments value to set.
     * @return the ElasticsearchChatDataSourceParameters object itself.
     */
    @Generated
    public ElasticsearchChatDataSourceParameters setTopNDocuments(Integer topNDocuments) {
        this.topNDocuments = topNDocuments;
        return this;
    }

    /**
     * Get the inScope property: Whether queries should be restricted to use of the indexed data.
     * 
     * @return the inScope value.
     */
    @Generated
    public Boolean isInScope() {
        return this.inScope;
    }

    /**
     * Set the inScope property: Whether queries should be restricted to use of the indexed data.
     * 
     * @param inScope the inScope value to set.
     * @return the ElasticsearchChatDataSourceParameters object itself.
     */
    @Generated
    public ElasticsearchChatDataSourceParameters setInScope(Boolean inScope) {
        this.inScope = inScope;
        return this;
    }

    /**
     * Get the strictness property: The configured strictness of the search relevance filtering.
     * Higher strictness will increase precision but lower recall of the answer.
     * 
     * @return the strictness value.
     */
    @Generated
    public Integer getStrictness() {
        return this.strictness;
    }

    /**
     * Set the strictness property: The configured strictness of the search relevance filtering.
     * Higher strictness will increase precision but lower recall of the answer.
     * 
     * @param strictness the strictness value to set.
     * @return the ElasticsearchChatDataSourceParameters object itself.
     */
    @Generated
    public ElasticsearchChatDataSourceParameters setStrictness(Integer strictness) {
        this.strictness = strictness;
        return this;
    }

    /**
     * Get the maxSearchQueries property: The maximum number of rewritten queries that should be sent to the search
     * provider for a single user message.
     * By default, the system will make an automatic determination.
     * 
     * @return the maxSearchQueries value.
     */
    @Generated
    public Integer getMaxSearchQueries() {
        return this.maxSearchQueries;
    }

    /**
     * Set the maxSearchQueries property: The maximum number of rewritten queries that should be sent to the search
     * provider for a single user message.
     * By default, the system will make an automatic determination.
     * 
     * @param maxSearchQueries the maxSearchQueries value to set.
     * @return the ElasticsearchChatDataSourceParameters object itself.
     */
    @Generated
    public ElasticsearchChatDataSourceParameters setMaxSearchQueries(Integer maxSearchQueries) {
        this.maxSearchQueries = maxSearchQueries;
        return this;
    }

    /**
     * Get the allowPartialResult property: If set to true, the system will allow partial search results to be used and
     * the request will fail if all
     * partial queries fail. If not specified or specified as false, the request will fail if any search query fails.
     * 
     * @return the allowPartialResult value.
     */
    @Generated
    public Boolean isAllowPartialResult() {
        return this.allowPartialResult;
    }

    /**
     * Set the allowPartialResult property: If set to true, the system will allow partial search results to be used and
     * the request will fail if all
     * partial queries fail. If not specified or specified as false, the request will fail if any search query fails.
     * 
     * @param allowPartialResult the allowPartialResult value to set.
     * @return the ElasticsearchChatDataSourceParameters object itself.
     */
    @Generated
    public ElasticsearchChatDataSourceParameters setAllowPartialResult(Boolean allowPartialResult) {
        this.allowPartialResult = allowPartialResult;
        return this;
    }

    /**
     * Get the includeContexts property: The output context properties to include on the response.
     * By default, citations and intent will be requested.
     * 
     * @return the includeContexts value.
     */
    @Generated
    public List<AzureSearchChatDataSourceParametersIncludeContext> getIncludeContexts() {
        return this.includeContexts;
    }

    /**
     * Set the includeContexts property: The output context properties to include on the response.
     * By default, citations and intent will be requested.
     * 
     * @param includeContexts the includeContexts value to set.
     * @return the ElasticsearchChatDataSourceParameters object itself.
     */
    @Generated
    public ElasticsearchChatDataSourceParameters
        setIncludeContexts(List<AzureSearchChatDataSourceParametersIncludeContext> includeContexts) {
        this.includeContexts = includeContexts;
        return this;
    }

    /**
     * Get the endpoint property: The endpoint property.
     * 
     * @return the endpoint value.
     */
    @Generated
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Get the indexName property: The index_name property.
     * 
     * @return the indexName value.
     */
    @Generated
    public String getIndexName() {
        return this.indexName;
    }

    /**
     * Get the authentication property: The authentication property.
     * 
     * @return the authentication value.
     */
    @Generated
    public BinaryData getAuthentication() {
        return this.authentication;
    }

    /**
     * Get the fieldsMapping property: The fields_mapping property.
     * 
     * @return the fieldsMapping value.
     */
    @Generated
    public ElasticsearchChatDataSourceParametersFieldsMapping getFieldsMapping() {
        return this.fieldsMapping;
    }

    /**
     * Set the fieldsMapping property: The fields_mapping property.
     * 
     * @param fieldsMapping the fieldsMapping value to set.
     * @return the ElasticsearchChatDataSourceParameters object itself.
     */
    @Generated
    public ElasticsearchChatDataSourceParameters
        setFieldsMapping(ElasticsearchChatDataSourceParametersFieldsMapping fieldsMapping) {
        this.fieldsMapping = fieldsMapping;
        return this;
    }

    /**
     * Get the queryType property: The query_type property.
     * 
     * @return the queryType value.
     */
    @Generated
    public ElasticsearchChatDataSourceParametersQueryType getQueryType() {
        return this.queryType;
    }

    /**
     * Set the queryType property: The query_type property.
     * 
     * @param queryType the queryType value to set.
     * @return the ElasticsearchChatDataSourceParameters object itself.
     */
    @Generated
    public ElasticsearchChatDataSourceParameters
        setQueryType(ElasticsearchChatDataSourceParametersQueryType queryType) {
        this.queryType = queryType;
        return this;
    }

    /**
     * Get the embeddingDependency property: The embedding_dependency property.
     * 
     * @return the embeddingDependency value.
     */
    @Generated
    public AzureChatDataSourceVectorizationSource getEmbeddingDependency() {
        return this.embeddingDependency;
    }

    /**
     * Set the embeddingDependency property: The embedding_dependency property.
     * 
     * @param embeddingDependency the embeddingDependency value to set.
     * @return the ElasticsearchChatDataSourceParameters object itself.
     */
    @Generated
    public ElasticsearchChatDataSourceParameters
        setEmbeddingDependency(AzureChatDataSourceVectorizationSource embeddingDependency) {
        this.embeddingDependency = embeddingDependency;
        return this;
    }
}
