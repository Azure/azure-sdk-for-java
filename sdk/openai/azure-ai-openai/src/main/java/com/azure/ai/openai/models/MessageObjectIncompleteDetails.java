// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The MessageObjectIncompleteDetails model.
 */
@Immutable
public final class MessageObjectIncompleteDetails implements JsonSerializable<MessageObjectIncompleteDetails> {
    /*
     * The reason the message is incomplete.
     */
    @Generated
    private final MessageObjectIncompleteDetailsReason reason;

    /**
     * Creates an instance of MessageObjectIncompleteDetails class.
     * 
     * @param reason the reason value to set.
     */
    @Generated
    private MessageObjectIncompleteDetails(MessageObjectIncompleteDetailsReason reason) {
        this.reason = reason;
    }

    /**
     * Get the reason property: The reason the message is incomplete.
     * 
     * @return the reason value.
     */
    @Generated
    public MessageObjectIncompleteDetailsReason getReason() {
        return this.reason;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("reason", this.reason == null ? null : this.reason.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessageObjectIncompleteDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessageObjectIncompleteDetails if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MessageObjectIncompleteDetails.
     */
    @Generated
    public static MessageObjectIncompleteDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MessageObjectIncompleteDetailsReason reason = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("reason".equals(fieldName)) {
                    reason = MessageObjectIncompleteDetailsReason.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new MessageObjectIncompleteDetails(reason);
        });
    }
}
