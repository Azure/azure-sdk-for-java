// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a vectorization source that makes service calls based on a search service model ID.
 * This source type is currently only supported by Elasticsearch.
 */
@Immutable
public final class AzureChatDataSourceModelIdVectorizationSource extends AzureChatDataSourceVectorizationSource {
    /*
     * The differentiating identifier for the concrete vectorization source.
     */
    @Generated
    private String type = "model_id";

    /*
     * The embedding model build ID to use for vectorization.
     */
    @Generated
    private final String modelId;

    /**
     * Creates an instance of AzureChatDataSourceModelIdVectorizationSource class.
     * 
     * @param modelId the modelId value to set.
     */
    @Generated
    public AzureChatDataSourceModelIdVectorizationSource(String modelId) {
        this.modelId = modelId;
    }

    /**
     * Get the type property: The differentiating identifier for the concrete vectorization source.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the modelId property: The embedding model build ID to use for vectorization.
     * 
     * @return the modelId value.
     */
    @Generated
    public String getModelId() {
        return this.modelId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("model_id", this.modelId);
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureChatDataSourceModelIdVectorizationSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureChatDataSourceModelIdVectorizationSource if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureChatDataSourceModelIdVectorizationSource.
     */
    @Generated
    public static AzureChatDataSourceModelIdVectorizationSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String modelId = null;
            String type = "model_id";
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("model_id".equals(fieldName)) {
                    modelId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AzureChatDataSourceModelIdVectorizationSource deserializedAzureChatDataSourceModelIdVectorizationSource
                = new AzureChatDataSourceModelIdVectorizationSource(modelId);
            deserializedAzureChatDataSourceModelIdVectorizationSource.type = type;

            return deserializedAzureChatDataSourceModelIdVectorizationSource;
        });
    }
}
