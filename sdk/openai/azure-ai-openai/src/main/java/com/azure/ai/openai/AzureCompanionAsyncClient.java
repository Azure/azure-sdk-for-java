// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai;

import com.azure.ai.openai.implementation.AzureCompanionClientImpl;
import com.azure.ai.openai.models.AzureCreateChatCompletionRequest;
import com.azure.ai.openai.models.AzureOpenAIChatErrorResponse;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous AzureCompanionClient type.
 */
@ServiceClient(builder = AzureCompanionClientBuilder.class, isAsync = true)
public final class AzureCompanionAsyncClient {

    @Generated
    private final AzureCompanionClientImpl serviceClient;

    /**
     * Initializes an instance of AzureCompanionAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    AzureCompanionAsyncClient(AzureCompanionClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates a completion for the chat message.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     user: String (Optional)
     *     messages (Required): [
     *          (Required){
     *             role: String (Required)
     *         }
     *     ]
     *     modalities (Optional): [
     *         String(text/audio) (Optional)
     *     ]
     *     reasoning_effort: String(low/medium/high) (Optional)
     *     max_completion_tokens: Integer (Optional)
     *     frequency_penalty: Double (Optional)
     *     presence_penalty: Double (Optional)
     *     web_search_options (Optional): {
     *         user_location (Optional): {
     *             type: String (Required)
     *             approximate (Required): {
     *                 country: String (Optional)
     *                 region: String (Optional)
     *                 city: String (Optional)
     *                 timezone: String (Optional)
     *             }
     *         }
     *         search_context_size: String(low/medium/high) (Optional)
     *     }
     *     top_logprobs: Integer (Optional)
     *     response_format (Optional): {
     *         type: String (Required)
     *     }
     *     audio (Optional): {
     *         voice: String(alloy/ash/ballad/coral/echo/sage/shimmer/verse) (Required)
     *         format: String(wav/mp3/flac/opus/pcm16) (Required)
     *     }
     *     store: Boolean (Optional)
     *     stream: Boolean (Optional)
     *     stop: BinaryData (Optional)
     *     logit_bias (Optional): {
     *         String: int (Required)
     *     }
     *     logprobs: Boolean (Optional)
     *     max_tokens: Integer (Optional)
     *     n: Integer (Optional)
     *     prediction (Optional): {
     *         type: String(content) (Required)
     *     }
     *     seed: Long (Optional)
     *     stream_options (Optional): {
     *         include_usage: Boolean (Optional)
     *     }
     *     tools (Optional): [
     *          (Optional){
     *             type: String (Required)
     *             function (Required): {
     *                 description: String (Optional)
     *                 name: String (Required)
     *                 parameters: BinaryData (Optional)
     *                 strict: Boolean (Optional)
     *             }
     *         }
     *     ]
     *     tool_choice: BinaryData (Optional)
     *     parallel_tool_calls: Boolean (Optional)
     *     function_call: BinaryData (Optional)
     *     functions (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             name: String (Required)
     *             parameters: BinaryData (Optional)
     *         }
     *     ]
     *     data_sources (Optional): [
     *          (Optional){
     *             type: String (Required)
     *         }
     *     ]
     *     user_security_context (Optional): {
     *         application_name: String (Optional)
     *         end_user_id: String (Optional)
     *         end_user_tenant_id: String (Optional)
     *         source_ip: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         param: String (Optional)
     *         type: String (Optional)
     *         inner_error (Optional): {
     *             code: String(ResponsibleAIPolicyViolation) (Optional)
     *             revised_prompt: String (Optional)
     *             content_filter_results (Optional): {
     *                 prompt_index: Integer (Optional)
     *                 content_filter_results (Optional): {
     *                     sexual (Optional): {
     *                         filtered: boolean (Required)
     *                         severity: String(safe/low/medium/high) (Required)
     *                     }
     *                     hate (Optional): (recursive schema, see hate above)
     *                     violence (Optional): (recursive schema, see violence above)
     *                     self_harm (Optional): (recursive schema, see self_harm above)
     *                     profanity (Optional): {
     *                         filtered: boolean (Required)
     *                         detected: boolean (Required)
     *                     }
     *                     custom_blocklists (Optional): {
     *                         filtered: boolean (Required)
     *                         details (Optional): [
     *                              (Optional){
     *                                 filtered: boolean (Required)
     *                                 id: String (Required)
     *                             }
     *                         ]
     *                     }
     *                     error (Optional): {
     *                         code: int (Required)
     *                         message: String (Required)
     *                     }
     *                     jailbreak (Required): (recursive schema, see jailbreak above)
     *                     indirect_attack (Required): (recursive schema, see indirect_attack above)
     *                 }
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     *
     * @param deploymentId Deployment ID of the model to use with this operation.
     * @param accept The accept parameter.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a structured representation of an error on an Azure OpenAI request along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createResponseWithResponse(String deploymentId, String accept, BinaryData request,
        RequestOptions requestOptions) {
        return this.serviceClient.createResponseWithResponseAsync(deploymentId, accept, request, requestOptions);
    }

    /**
     * Creates a completion for the chat message.
     *
     * @param deploymentId Deployment ID of the model to use with this operation.
     * @param accept The accept parameter.
     * @param request The request parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a structured representation of an error on an Azure OpenAI request on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AzureOpenAIChatErrorResponse> createResponse(String deploymentId, String accept,
        AzureCreateChatCompletionRequest request) {
        // Generated convenience method for createResponseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createResponseWithResponse(deploymentId, accept, BinaryData.fromObject(request), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AzureOpenAIChatErrorResponse.class));
    }
}
