// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A collection of true/false filtering results for configured custom blocklists.
 */
@Immutable
public final class AzureContentFilterBlocklistResult implements JsonSerializable<AzureContentFilterBlocklistResult> {
    /*
     * A value indicating whether any of the detailed blocklists resulted in a filtering action.
     */
    @Generated
    private final boolean filtered;

    /*
     * The pairs of individual blocklist IDs and whether they resulted in a filtering action.
     */
    @Generated
    private List<AzureContentFilterBlocklistResultDetail> details;

    /**
     * Creates an instance of AzureContentFilterBlocklistResult class.
     * 
     * @param filtered the filtered value to set.
     */
    @Generated
    private AzureContentFilterBlocklistResult(boolean filtered) {
        this.filtered = filtered;
    }

    /**
     * Get the filtered property: A value indicating whether any of the detailed blocklists resulted in a filtering
     * action.
     * 
     * @return the filtered value.
     */
    @Generated
    public boolean isFiltered() {
        return this.filtered;
    }

    /**
     * Get the details property: The pairs of individual blocklist IDs and whether they resulted in a filtering action.
     * 
     * @return the details value.
     */
    @Generated
    public List<AzureContentFilterBlocklistResultDetail> getDetails() {
        return this.details;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("filtered", this.filtered);
        jsonWriter.writeArrayField("details", this.details, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureContentFilterBlocklistResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureContentFilterBlocklistResult if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureContentFilterBlocklistResult.
     */
    @Generated
    public static AzureContentFilterBlocklistResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean filtered = false;
            List<AzureContentFilterBlocklistResultDetail> details = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("filtered".equals(fieldName)) {
                    filtered = reader.getBoolean();
                } else if ("details".equals(fieldName)) {
                    details = reader.readArray(reader1 -> AzureContentFilterBlocklistResultDetail.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            AzureContentFilterBlocklistResult deserializedAzureContentFilterBlocklistResult
                = new AzureContentFilterBlocklistResult(filtered);
            deserializedAzureContentFilterBlocklistResult.details = details;

            return deserializedAzureContentFilterBlocklistResult;
        });
    }
}
