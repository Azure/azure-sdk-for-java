// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.responses.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ResponsesCodeInterpreterCallItemResultFiles model.
 */
@Immutable
public final class ResponsesCodeInterpreterCallItemResultFiles extends ResponsesCodeInterpreterCallItemResult {
    /*
     * The type property.
     */
    @Generated
    private ResponsesCodeInterpreterCallItemResultType type = ResponsesCodeInterpreterCallItemResultType.FILES;

    /*
     * The files property.
     */
    @Generated
    private final List<ResponsesCodeInterpreterCallItemResultFilesFile> files;

    /**
     * Creates an instance of ResponsesCodeInterpreterCallItemResultFiles class.
     * 
     * @param files the files value to set.
     */
    @Generated
    public ResponsesCodeInterpreterCallItemResultFiles(List<ResponsesCodeInterpreterCallItemResultFilesFile> files) {
        this.files = files;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ResponsesCodeInterpreterCallItemResultType getType() {
        return this.type;
    }

    /**
     * Get the files property: The files property.
     * 
     * @return the files value.
     */
    @Generated
    public List<ResponsesCodeInterpreterCallItemResultFilesFile> getFiles() {
        return this.files;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("files", this.files, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponsesCodeInterpreterCallItemResultFiles from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponsesCodeInterpreterCallItemResultFiles if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResponsesCodeInterpreterCallItemResultFiles.
     */
    @Generated
    public static ResponsesCodeInterpreterCallItemResultFiles fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<ResponsesCodeInterpreterCallItemResultFilesFile> files = null;
            ResponsesCodeInterpreterCallItemResultType type = ResponsesCodeInterpreterCallItemResultType.FILES;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("files".equals(fieldName)) {
                    files = reader
                        .readArray(reader1 -> ResponsesCodeInterpreterCallItemResultFilesFile.fromJson(reader1));
                } else if ("type".equals(fieldName)) {
                    type = ResponsesCodeInterpreterCallItemResultType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ResponsesCodeInterpreterCallItemResultFiles deserializedResponsesCodeInterpreterCallItemResultFiles
                = new ResponsesCodeInterpreterCallItemResultFiles(files);
            deserializedResponsesCodeInterpreterCallItemResultFiles.type = type;

            return deserializedResponsesCodeInterpreterCallItemResultFiles;
        });
    }
}
