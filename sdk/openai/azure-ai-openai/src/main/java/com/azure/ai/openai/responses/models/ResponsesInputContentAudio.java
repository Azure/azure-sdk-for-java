// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.responses.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ResponsesInputContentAudio model.
 */
@Immutable
public final class ResponsesInputContentAudio extends ResponsesInputContent {
    /*
     * The type property.
     */
    @Generated
    private ResponsesContentType type = ResponsesContentType.INPUT_AUDIO;

    /*
     * The data property.
     */
    @Generated
    private final byte[] data;

    /*
     * The format property.
     */
    @Generated
    private final String format;

    /**
     * Creates an instance of ResponsesInputContentAudio class.
     * 
     * @param data the data value to set.
     * @param format the format value to set.
     */
    @Generated
    public ResponsesInputContentAudio(byte[] data, String format) {
        this.data = data;
        this.format = format;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ResponsesContentType getType() {
        return this.type;
    }

    /**
     * Get the data property: The data property.
     * 
     * @return the data value.
     */
    @Generated
    public byte[] getData() {
        return CoreUtils.clone(this.data);
    }

    /**
     * Get the format property: The format property.
     * 
     * @return the format value.
     */
    @Generated
    public String getFormat() {
        return this.format;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBinaryField("data", this.data);
        jsonWriter.writeStringField("format", this.format);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponsesInputContentAudio from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponsesInputContentAudio if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResponsesInputContentAudio.
     */
    @Generated
    public static ResponsesInputContentAudio fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            byte[] data = null;
            String format = null;
            ResponsesContentType type = ResponsesContentType.INPUT_AUDIO;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("data".equals(fieldName)) {
                    data = reader.getBinary();
                } else if ("format".equals(fieldName)) {
                    format = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = ResponsesContentType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ResponsesInputContentAudio deserializedResponsesInputContentAudio
                = new ResponsesInputContentAudio(data, format);
            deserializedResponsesInputContentAudio.type = type;

            return deserializedResponsesInputContentAudio;
        });
    }
}
