// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.responses.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ResponsesFileSearchTool model.
 */
@Immutable
public final class ResponsesFileSearchTool extends ResponsesTool {

    /*
     * The type property.
     */
    @Generated
    private ResponsesToolType type = ResponsesToolType.FILE_SEARCH;

    /*
     * The vector_store_ids property.
     */
    @Generated
    private final List<String> vectorStoreIds;

    /**
     * Creates an instance of ResponsesFileSearchTool class.
     *
     * @param vectorStoreIds the vectorStoreIds value to set.
     */
    @Generated
    public ResponsesFileSearchTool(List<String> vectorStoreIds) {
        this.vectorStoreIds = vectorStoreIds;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ResponsesToolType getType() {
        return this.type;
    }

    /**
     * Get the vectorStoreIds property: The vector_store_ids property.
     *
     * @return the vectorStoreIds value.
     */
    @Generated
    public List<String> getVectorStoreIds() {
        return this.vectorStoreIds;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("vector_store_ids", this.vectorStoreIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponsesFileSearchTool from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponsesFileSearchTool if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResponsesFileSearchTool.
     */
    @Generated
    public static ResponsesFileSearchTool fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> vectorStoreIds = null;
            ResponsesToolType type = ResponsesToolType.FILE_SEARCH;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("vector_store_ids".equals(fieldName)) {
                    vectorStoreIds = reader.readArray(reader1 -> reader1.getString());
                } else if ("type".equals(fieldName)) {
                    type = ResponsesToolType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ResponsesFileSearchTool deserializedResponsesFileSearchTool = new ResponsesFileSearchTool(vectorStoreIds);
            deserializedResponsesFileSearchTool.type = type;
            return deserializedResponsesFileSearchTool;
        });
    }
}
