// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.responses.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Emitted when the code interpreter call is completed.
 */
@Immutable
public final class ResponsesStreamEventCodeInterpreterCallCompleted extends ResponsesStreamEvent {
    /*
     * The type property.
     */
    @Generated
    private ResponsesStreamEventType type = ResponsesStreamEventType.RESPONSE_CODE_INTERPRETER_CALL_COMPLETED;

    /*
     * The index of the output item within the response that this stream event applies to.
     */
    @Generated
    private final int outputIndex;

    /*
     * The code_interpreter_call property.
     */
    @Generated
    private final ResponsesCodeInterpreterCallItem codeInterpreterCall;

    /**
     * Creates an instance of ResponsesStreamEventCodeInterpreterCallCompleted class.
     * 
     * @param outputIndex the outputIndex value to set.
     * @param codeInterpreterCall the codeInterpreterCall value to set.
     */
    @Generated
    private ResponsesStreamEventCodeInterpreterCallCompleted(int outputIndex,
        ResponsesCodeInterpreterCallItem codeInterpreterCall) {
        this.outputIndex = outputIndex;
        this.codeInterpreterCall = codeInterpreterCall;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ResponsesStreamEventType getType() {
        return this.type;
    }

    /**
     * Get the outputIndex property: The index of the output item within the response that this stream event applies to.
     * 
     * @return the outputIndex value.
     */
    @Generated
    public int getOutputIndex() {
        return this.outputIndex;
    }

    /**
     * Get the codeInterpreterCall property: The code_interpreter_call property.
     * 
     * @return the codeInterpreterCall value.
     */
    @Generated
    public ResponsesCodeInterpreterCallItem getCodeInterpreterCall() {
        return this.codeInterpreterCall;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("output_index", this.outputIndex);
        jsonWriter.writeJsonField("code_interpreter_call", this.codeInterpreterCall);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponsesStreamEventCodeInterpreterCallCompleted from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponsesStreamEventCodeInterpreterCallCompleted if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResponsesStreamEventCodeInterpreterCallCompleted.
     */
    @Generated
    public static ResponsesStreamEventCodeInterpreterCallCompleted fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int outputIndex = 0;
            ResponsesCodeInterpreterCallItem codeInterpreterCall = null;
            ResponsesStreamEventType type = ResponsesStreamEventType.RESPONSE_CODE_INTERPRETER_CALL_COMPLETED;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("output_index".equals(fieldName)) {
                    outputIndex = reader.getInt();
                } else if ("code_interpreter_call".equals(fieldName)) {
                    codeInterpreterCall = ResponsesCodeInterpreterCallItem.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    type = ResponsesStreamEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ResponsesStreamEventCodeInterpreterCallCompleted deserializedResponsesStreamEventCodeInterpreterCallCompleted
                = new ResponsesStreamEventCodeInterpreterCallCompleted(outputIndex, codeInterpreterCall);
            deserializedResponsesStreamEventCodeInterpreterCallCompleted.type = type;

            return deserializedResponsesStreamEventCodeInterpreterCallCompleted;
        });
    }
}
