// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * The ChatCompletionRequestMessageContentPartText model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class ChatCompletionRequestMessageContentPartText
    implements JsonSerializable<ChatCompletionRequestMessageContentPartText> {
    /*
     * The type of the content part.
     */
    @Metadata(generated = true)
    private final String type = "text";

    /*
     * The text content.
     */
    @Metadata(generated = true)
    private final String text;

    /**
     * Creates an instance of ChatCompletionRequestMessageContentPartText class.
     * 
     * @param text the text value to set.
     */
    @Metadata(generated = true)
    public ChatCompletionRequestMessageContentPartText(String text) {
        this.text = text;
    }

    /**
     * Get the type property: The type of the content part.
     * 
     * @return the type value.
     */
    @Metadata(generated = true)
    public String getType() {
        return this.type;
    }

    /**
     * Get the text property: The text content.
     * 
     * @return the text value.
     */
    @Metadata(generated = true)
    public String getText() {
        return this.text;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("text", this.text);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatCompletionRequestMessageContentPartText from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatCompletionRequestMessageContentPartText if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatCompletionRequestMessageContentPartText.
     */
    @Metadata(generated = true)
    public static ChatCompletionRequestMessageContentPartText fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String text = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("text".equals(fieldName)) {
                    text = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new ChatCompletionRequestMessageContentPartText(text);
        });
    }
}
