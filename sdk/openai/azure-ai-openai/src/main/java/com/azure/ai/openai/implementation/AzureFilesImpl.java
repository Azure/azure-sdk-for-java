// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.implementation;

import com.azure.ai.openai.AzureOpenAIServiceVersion;
import com.azure.ai.openai.models.AzureListFilesResponse;
import com.azure.ai.openai.models.AzureOpenAIFile;
import com.azure.ai.openai.models.DeleteFileResponse;
import com.azure.ai.openai.models.ErrorResponse;
import io.clientcore.core.annotation.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotation.BodyParam;
import io.clientcore.core.http.annotation.HeaderParam;
import io.clientcore.core.http.annotation.HostParam;
import io.clientcore.core.http.annotation.HttpRequestInformation;
import io.clientcore.core.http.annotation.PathParam;
import io.clientcore.core.http.annotation.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exception.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.util.binarydata.BinaryData;

/**
 * An instance of this class provides access to all the operations defined in AzureFiles.
 */
public final class AzureFilesImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AzureFilesService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureOpenAIClientImpl client;

    /**
     * Initializes an instance of AzureFilesImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    AzureFilesImpl(AzureOpenAIClientImpl client) {
        this.service = RestProxy.create(AzureFilesService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public AzureOpenAIServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for AzureOpenAIClientAzureFiles to be used by the proxy service to
     * perform REST calls.
     */
    @ServiceInterface(name = "AzureOpenAIClientAzu", host = "{endpoint}/openai")
    public interface AzureFilesService {
        // @Multipart not supported by RestProxy
        @HttpRequestInformation(method = HttpMethod.POST, path = "/files", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<AzureOpenAIFile> createFileSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @HeaderParam("content-type") String contentType,
            @BodyParam("multipart/form-data") BinaryData requestBody, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/files", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<AzureListFilesResponse> listFilesSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/files/{file_id}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<AzureOpenAIFile> retrieveFileSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("file_id") String fileId, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.DELETE, path = "/files/{file_id}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<DeleteFileResponse> deleteFileSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @PathParam("file_id") String fileId, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/files/{file_id}/content",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = ErrorResponse.class)
        Response<byte[]> downloadFileSync(@HostParam("endpoint") String endpoint, @HeaderParam("accept") String accept,
            @PathParam("file_id") String fileId, RequestOptions requestOptions);
    }

    /**
     * Upload a file that can be used across various endpoints. The size of all the files uploaded by
     * one organization can be up to 100 GB.
     * 
     * The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See
     * the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files
     * supported. The Fine-tuning API only supports `.jsonl` files.
     * 
     * Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     bytes: Integer (Required)
     *     created_at: long (Required)
     *     expires_at: Long (Optional)
     *     filename: String (Required)
     *     object: String (Required)
     *     purpose: String(assistants/assistants_output/batch/batch_output/fine-tune/fine-tune-results/vision/user_data/evals) (Required)
     *     status_details: String (Optional)
     *     status: String(uploaded/pending/running/processed/error/deleting/deleted) (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<AzureOpenAIFile> createFileWithResponse(BinaryData requestBody, RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "multipart/form-data";
        return service.createFileSync(this.client.getEndpoint(), accept, contentType, requestBody, requestOptions);
    }

    /**
     * Returns a list of files that belong to the user's organization.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>purpose</td><td>String</td><td>No</td><td>Only return files with the given purpose.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             bytes: Integer (Required)
     *             created_at: long (Required)
     *             expires_at: Long (Optional)
     *             filename: String (Required)
     *             object: String (Required)
     *             purpose: String(assistants/assistants_output/batch/batch_output/fine-tune/fine-tune-results/vision/user_data/evals) (Required)
     *             status_details: String (Optional)
     *             status: String(uploaded/pending/running/processed/error/deleting/deleted) (Required)
     *         }
     *     ]
     *     first_id: String (Required)
     *     last_id: String (Required)
     *     has_more: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<AzureListFilesResponse> listFilesWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listFilesSync(this.client.getEndpoint(), accept, requestOptions);
    }

    /**
     * Returns information about a specific file.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     bytes: Integer (Required)
     *     created_at: long (Required)
     *     expires_at: Long (Optional)
     *     filename: String (Required)
     *     object: String (Required)
     *     purpose: String(assistants/assistants_output/batch/batch_output/fine-tune/fine-tune-results/vision/user_data/evals) (Required)
     *     status_details: String (Optional)
     *     status: String(uploaded/pending/running/processed/error/deleting/deleted) (Required)
     * }
     * }
     * </pre>
     * 
     * @param fileId The ID of the file to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<AzureOpenAIFile> retrieveFileWithResponse(String fileId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.retrieveFileSync(this.client.getEndpoint(), accept, fileId, requestOptions);
    }

    /**
     * Delete a file.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     deleted: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param fileId The ID of the file to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<DeleteFileResponse> deleteFileWithResponse(String fileId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteFileSync(this.client.getEndpoint(), accept, fileId, requestOptions);
    }

    /**
     * Returns the contents of the specified file.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * byte[]
     * }
     * </pre>
     * 
     * @param fileId The ID of the file to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return represent a byte array.
     */
    public Response<byte[]> downloadFileWithResponse(String fileId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.downloadFileSync(this.client.getEndpoint(), accept, fileId, requestOptions);
    }
}
