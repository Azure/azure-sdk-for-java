// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.List;

/**
 * The extended top-level chat completion response model for the Azure OpenAI service.
 * This model adds Responsible AI content filter annotations for prompt input.
 */
@Immutable
public final class AzureCreateChatCompletionResponse {
    /*
     * A unique identifier for the chat completion.
     */
    @Generated
    @JsonProperty(value = "id")
    private final String id;

    /*
     * A list of chat completion choices. Can be more than one if `n` is greater than 1.
     */
    @Generated
    @JsonProperty(value = "choices")
    private final List<AzureCreateChatCompletionResponseChoice> choices;

    /*
     * The Unix timestamp (in seconds) of when the chat completion was created.
     */
    @Generated
    @JsonProperty(value = "created")
    private final long created;

    /*
     * The model used for the chat completion.
     */
    @Generated
    @JsonProperty(value = "model")
    private final String model;

    /*
     * The service tier used for processing the request.
     */
    @Generated
    @JsonProperty(value = "service_tier")
    private AzureCreateChatCompletionResponseServiceTier serviceTier;

    /*
     * This fingerprint represents the backend configuration that the model runs with.
     * 
     * Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made
     * that might impact determinism.
     */
    @Generated
    @JsonProperty(value = "system_fingerprint")
    private String systemFingerprint;

    /*
     * The object type, which is always `chat.completion`.
     */
    @Generated
    @JsonProperty(value = "object")
    private final String object = "chat.completion";

    /*
     * The usage property.
     */
    @Generated
    @JsonProperty(value = "usage")
    private CompletionUsage usage;

    /*
     * The Responsible AI content filter annotations associated with prompt inputs into chat completions.
     */
    @Generated
    @JsonProperty(value = "prompt_filter_results")
    private List<AzureCreateChatCompletionResponsePromptFilterResult> promptFilterResults;

    /**
     * Creates an instance of AzureCreateChatCompletionResponse class.
     * 
     * @param id the id value to set.
     * @param choices the choices value to set.
     * @param created the created value to set.
     * @param model the model value to set.
     */
    @Generated
    private AzureCreateChatCompletionResponse(String id, List<AzureCreateChatCompletionResponseChoice> choices,
        OffsetDateTime created, String model) {
        this.id = id;
        this.choices = choices;
        if (created == null) {
            this.created = 0L;
        } else {
            this.created = created.toEpochSecond();
        }
        this.model = model;
    }

    @Generated
    @JsonCreator
    private AzureCreateChatCompletionResponse(@JsonProperty(value = "id") String id,
        @JsonProperty(value = "choices") List<AzureCreateChatCompletionResponseChoice> choices,
        @JsonProperty(value = "created") long created, @JsonProperty(value = "model") String model) {
        this(id, choices, OffsetDateTime.ofInstant(Instant.ofEpochSecond(created), ZoneOffset.UTC), model);
    }

    /**
     * Get the id property: A unique identifier for the chat completion.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the choices property: A list of chat completion choices. Can be more than one if `n` is greater than 1.
     * 
     * @return the choices value.
     */
    @Generated
    public List<AzureCreateChatCompletionResponseChoice> getChoices() {
        return this.choices;
    }

    /**
     * Get the created property: The Unix timestamp (in seconds) of when the chat completion was created.
     * 
     * @return the created value.
     */
    @Generated
    public OffsetDateTime getCreated() {
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.created), ZoneOffset.UTC);
    }

    /**
     * Get the model property: The model used for the chat completion.
     * 
     * @return the model value.
     */
    @Generated
    public String getModel() {
        return this.model;
    }

    /**
     * Get the serviceTier property: The service tier used for processing the request.
     * 
     * @return the serviceTier value.
     */
    @Generated
    public AzureCreateChatCompletionResponseServiceTier getServiceTier() {
        return this.serviceTier;
    }

    /**
     * Get the systemFingerprint property: This fingerprint represents the backend configuration that the model runs
     * with.
     * 
     * Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made
     * that might impact determinism.
     * 
     * @return the systemFingerprint value.
     */
    @Generated
    public String getSystemFingerprint() {
        return this.systemFingerprint;
    }

    /**
     * Get the object property: The object type, which is always `chat.completion`.
     * 
     * @return the object value.
     */
    @Generated
    public String getObject() {
        return this.object;
    }

    /**
     * Get the usage property: The usage property.
     * 
     * @return the usage value.
     */
    @Generated
    public CompletionUsage getUsage() {
        return this.usage;
    }

    /**
     * Get the promptFilterResults property: The Responsible AI content filter annotations associated with prompt inputs
     * into chat completions.
     * 
     * @return the promptFilterResults value.
     */
    @Generated
    public List<AzureCreateChatCompletionResponsePromptFilterResult> getPromptFilterResults() {
        return this.promptFilterResults;
    }
}
