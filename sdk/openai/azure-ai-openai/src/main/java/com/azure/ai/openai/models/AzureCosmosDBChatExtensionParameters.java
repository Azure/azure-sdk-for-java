// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Parameters to use when configuring Azure OpenAI On Your Data chat extensions when using Azure Cosmos DB for
 * MongoDB vCore. The supported authentication type is ConnectionString.
 */
@Fluent
public final class AzureCosmosDBChatExtensionParameters
    implements JsonSerializable<AzureCosmosDBChatExtensionParameters> {

    /*
     * The authentication method to use when accessing the defined data source.
     * Each data source type supports a specific set of available authentication methods; please see the documentation
     * of
     * the data source for supported mechanisms.
     * If not otherwise provided, On Your Data will attempt to use System Managed Identity (default credential)
     * authentication.
     */
    @Generated
    private OnYourDataAuthenticationOptions authentication;

    /*
     * The configured top number of documents to feature for the configured query.
     */
    @Generated
    private Integer topNDocuments;

    /*
     * Whether queries should be restricted to use of indexed data.
     */
    @Generated
    private Boolean inScope;

    /*
     * The configured strictness of the search relevance filtering. The higher of strictness, the higher of the
     * precision but lower recall of the answer.
     */
    @Generated
    private Integer strictness;

    /*
     * Give the model instructions about how it should behave and any context it should reference when generating a
     * response. You can describe the assistant's personality and tell it how to format responses. There's a 100 token
     * limit for it, and it counts against the overall token limit.
     */
    @Generated
    private String roleInformation;

    /*
     * The MongoDB vCore database name to use with Azure Cosmos DB.
     */
    @Generated
    private final String databaseName;

    /*
     * The name of the Azure Cosmos DB resource container.
     */
    @Generated
    private final String containerName;

    /*
     * The MongoDB vCore index name to use with Azure Cosmos DB.
     */
    @Generated
    private final String indexName;

    /*
     * Customized field mapping behavior to use when interacting with the search index.
     */
    @Generated
    private final AzureCosmosDBFieldMappingOptions fieldsMapping;

    /*
     * The embedding dependency for vector search.
     */
    @Generated
    private final OnYourDataVectorizationSource embeddingDependency;

    /**
     * Get the authentication property: The authentication method to use when accessing the defined data source.
     * Each data source type supports a specific set of available authentication methods; please see the documentation
     * of
     * the data source for supported mechanisms.
     * If not otherwise provided, On Your Data will attempt to use System Managed Identity (default credential)
     * authentication.
     *
     * @return the authentication value.
     */
    @Generated
    public OnYourDataAuthenticationOptions getAuthentication() {
        return this.authentication;
    }

    /**
     * Set the authentication property: The authentication method to use when accessing the defined data source.
     * Each data source type supports a specific set of available authentication methods; please see the documentation
     * of
     * the data source for supported mechanisms.
     * If not otherwise provided, On Your Data will attempt to use System Managed Identity (default credential)
     * authentication.
     *
     * @param authentication the authentication value to set.
     * @return the AzureCosmosDBChatExtensionParameters object itself.
     */
    @Generated
    public AzureCosmosDBChatExtensionParameters setAuthentication(OnYourDataAuthenticationOptions authentication) {
        this.authentication = authentication;
        return this;
    }

    /**
     * Get the topNDocuments property: The configured top number of documents to feature for the configured query.
     *
     * @return the topNDocuments value.
     */
    @Generated
    public Integer getTopNDocuments() {
        return this.topNDocuments;
    }

    /**
     * Set the topNDocuments property: The configured top number of documents to feature for the configured query.
     *
     * @param topNDocuments the topNDocuments value to set.
     * @return the AzureCosmosDBChatExtensionParameters object itself.
     */
    @Generated
    public AzureCosmosDBChatExtensionParameters setTopNDocuments(Integer topNDocuments) {
        this.topNDocuments = topNDocuments;
        return this;
    }

    /**
     * Get the inScope property: Whether queries should be restricted to use of indexed data.
     *
     * @return the inScope value.
     */
    @Generated
    public Boolean isInScope() {
        return this.inScope;
    }

    /**
     * Set the inScope property: Whether queries should be restricted to use of indexed data.
     *
     * @param inScope the inScope value to set.
     * @return the AzureCosmosDBChatExtensionParameters object itself.
     */
    @Generated
    public AzureCosmosDBChatExtensionParameters setInScope(Boolean inScope) {
        this.inScope = inScope;
        return this;
    }

    /**
     * Get the strictness property: The configured strictness of the search relevance filtering. The higher of
     * strictness, the higher of the precision but lower recall of the answer.
     *
     * @return the strictness value.
     */
    @Generated
    public Integer getStrictness() {
        return this.strictness;
    }

    /**
     * Set the strictness property: The configured strictness of the search relevance filtering. The higher of
     * strictness, the higher of the precision but lower recall of the answer.
     *
     * @param strictness the strictness value to set.
     * @return the AzureCosmosDBChatExtensionParameters object itself.
     */
    @Generated
    public AzureCosmosDBChatExtensionParameters setStrictness(Integer strictness) {
        this.strictness = strictness;
        return this;
    }

    /**
     * Get the roleInformation property: Give the model instructions about how it should behave and any context it
     * should reference when generating a response. You can describe the assistant's personality and tell it how to
     * format responses. There's a 100 token limit for it, and it counts against the overall token limit.
     *
     * @return the roleInformation value.
     */
    @Generated
    public String getRoleInformation() {
        return this.roleInformation;
    }

    /**
     * Set the roleInformation property: Give the model instructions about how it should behave and any context it
     * should reference when generating a response. You can describe the assistant's personality and tell it how to
     * format responses. There's a 100 token limit for it, and it counts against the overall token limit.
     *
     * @param roleInformation the roleInformation value to set.
     * @return the AzureCosmosDBChatExtensionParameters object itself.
     */
    @Generated
    public AzureCosmosDBChatExtensionParameters setRoleInformation(String roleInformation) {
        this.roleInformation = roleInformation;
        return this;
    }

    /**
     * Get the databaseName property: The MongoDB vCore database name to use with Azure Cosmos DB.
     *
     * @return the databaseName value.
     */
    @Generated
    public String getDatabaseName() {
        return this.databaseName;
    }

    /**
     * Get the containerName property: The name of the Azure Cosmos DB resource container.
     *
     * @return the containerName value.
     */
    @Generated
    public String getContainerName() {
        return this.containerName;
    }

    /**
     * Get the indexName property: The MongoDB vCore index name to use with Azure Cosmos DB.
     *
     * @return the indexName value.
     */
    @Generated
    public String getIndexName() {
        return this.indexName;
    }

    /**
     * Get the fieldsMapping property: Customized field mapping behavior to use when interacting with the search index.
     *
     * @return the fieldsMapping value.
     */
    @Generated
    public AzureCosmosDBFieldMappingOptions getFieldsMapping() {
        return this.fieldsMapping;
    }

    /**
     * Get the embeddingDependency property: The embedding dependency for vector search.
     *
     * @return the embeddingDependency value.
     */
    @Generated
    public OnYourDataVectorizationSource getEmbeddingDependency() {
        return this.embeddingDependency;
    }

    /**
     * Creates an instance of AzureCosmosDBChatExtensionParameters class.
     *
     * @param databaseName the databaseName value to set.
     * @param containerName the containerName value to set.
     * @param indexName the indexName value to set.
     * @param fieldsMapping the fieldsMapping value to set.
     * @param embeddingDependency the embeddingDependency value to set.
     */
    @Generated
    public AzureCosmosDBChatExtensionParameters(String databaseName, String containerName, String indexName,
        AzureCosmosDBFieldMappingOptions fieldsMapping, OnYourDataVectorizationSource embeddingDependency) {
        this.databaseName = databaseName;
        this.containerName = containerName;
        this.indexName = indexName;
        this.fieldsMapping = fieldsMapping;
        this.embeddingDependency = embeddingDependency;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("database_name", this.databaseName);
        jsonWriter.writeStringField("container_name", this.containerName);
        jsonWriter.writeStringField("index_name", this.indexName);
        jsonWriter.writeJsonField("fields_mapping", this.fieldsMapping);
        jsonWriter.writeJsonField("embedding_dependency", this.embeddingDependency);
        jsonWriter.writeJsonField("authentication", this.authentication);
        jsonWriter.writeNumberField("top_n_documents", this.topNDocuments);
        jsonWriter.writeBooleanField("in_scope", this.inScope);
        jsonWriter.writeNumberField("strictness", this.strictness);
        jsonWriter.writeStringField("role_information", this.roleInformation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureCosmosDBChatExtensionParameters from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureCosmosDBChatExtensionParameters if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureCosmosDBChatExtensionParameters.
     */
    @Generated
    public static AzureCosmosDBChatExtensionParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String databaseName = null;
            String containerName = null;
            String indexName = null;
            AzureCosmosDBFieldMappingOptions fieldsMapping = null;
            OnYourDataVectorizationSource embeddingDependency = null;
            OnYourDataAuthenticationOptions authentication = null;
            Integer topNDocuments = null;
            Boolean inScope = null;
            Integer strictness = null;
            String roleInformation = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("database_name".equals(fieldName)) {
                    databaseName = reader.getString();
                } else if ("container_name".equals(fieldName)) {
                    containerName = reader.getString();
                } else if ("index_name".equals(fieldName)) {
                    indexName = reader.getString();
                } else if ("fields_mapping".equals(fieldName)) {
                    fieldsMapping = AzureCosmosDBFieldMappingOptions.fromJson(reader);
                } else if ("embedding_dependency".equals(fieldName)) {
                    embeddingDependency = OnYourDataVectorizationSource.fromJson(reader);
                } else if ("authentication".equals(fieldName)) {
                    authentication = OnYourDataAuthenticationOptions.fromJson(reader);
                } else if ("top_n_documents".equals(fieldName)) {
                    topNDocuments = reader.getNullable(JsonReader::getInt);
                } else if ("in_scope".equals(fieldName)) {
                    inScope = reader.getNullable(JsonReader::getBoolean);
                } else if ("strictness".equals(fieldName)) {
                    strictness = reader.getNullable(JsonReader::getInt);
                } else if ("role_information".equals(fieldName)) {
                    roleInformation = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AzureCosmosDBChatExtensionParameters deserializedAzureCosmosDBChatExtensionParameters
                = new AzureCosmosDBChatExtensionParameters(databaseName, containerName, indexName, fieldsMapping,
                    embeddingDependency);
            deserializedAzureCosmosDBChatExtensionParameters.authentication = authentication;
            deserializedAzureCosmosDBChatExtensionParameters.topNDocuments = topNDocuments;
            deserializedAzureCosmosDBChatExtensionParameters.inScope = inScope;
            deserializedAzureCosmosDBChatExtensionParameters.strictness = strictness;
            deserializedAzureCosmosDBChatExtensionParameters.roleInformation = roleInformation;
            return deserializedAzureCosmosDBChatExtensionParameters;
        });
    }
}
