// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.responses.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Returned when a new content part is added to an assistant message item during
 * response generation.
 */
@Immutable
public final class ResponsesResponseStreamEventResponseContentPartAdded extends ResponsesResponseStreamEvent {
    /*
     * The type property.
     */
    @Generated
    private ResponsesResponseStreamEventType type = ResponsesResponseStreamEventType.RESPONSE_CONTENT_PART_ADDED;

    /*
     * The ID of the item to which the content part was added.
     */
    @Generated
    private final String itemId;

    /*
     * The index of the output item in the response.
     */
    @Generated
    private final int outputIndex;

    /*
     * The index of the content part in the item's content array.
     */
    @Generated
    private final int contentIndex;

    /*
     * The content part that was added.
     */
    @Generated
    private final ResponsesOutputContent part;

    /**
     * Creates an instance of ResponsesResponseStreamEventResponseContentPartAdded class.
     * 
     * @param itemId the itemId value to set.
     * @param outputIndex the outputIndex value to set.
     * @param contentIndex the contentIndex value to set.
     * @param part the part value to set.
     */
    @Generated
    private ResponsesResponseStreamEventResponseContentPartAdded(String itemId, int outputIndex, int contentIndex,
        ResponsesOutputContent part) {
        this.itemId = itemId;
        this.outputIndex = outputIndex;
        this.contentIndex = contentIndex;
        this.part = part;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ResponsesResponseStreamEventType getType() {
        return this.type;
    }

    /**
     * Get the itemId property: The ID of the item to which the content part was added.
     * 
     * @return the itemId value.
     */
    @Generated
    public String getItemId() {
        return this.itemId;
    }

    /**
     * Get the outputIndex property: The index of the output item in the response.
     * 
     * @return the outputIndex value.
     */
    @Generated
    public int getOutputIndex() {
        return this.outputIndex;
    }

    /**
     * Get the contentIndex property: The index of the content part in the item's content array.
     * 
     * @return the contentIndex value.
     */
    @Generated
    public int getContentIndex() {
        return this.contentIndex;
    }

    /**
     * Get the part property: The content part that was added.
     * 
     * @return the part value.
     */
    @Generated
    public ResponsesOutputContent getPart() {
        return this.part;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("item_id", this.itemId);
        jsonWriter.writeIntField("output_index", this.outputIndex);
        jsonWriter.writeIntField("content_index", this.contentIndex);
        jsonWriter.writeJsonField("part", this.part);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponsesResponseStreamEventResponseContentPartAdded from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponsesResponseStreamEventResponseContentPartAdded if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResponsesResponseStreamEventResponseContentPartAdded.
     */
    @Generated
    public static ResponsesResponseStreamEventResponseContentPartAdded fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            String itemId = null;
            int outputIndex = 0;
            int contentIndex = 0;
            ResponsesOutputContent part = null;
            ResponsesResponseStreamEventType type = ResponsesResponseStreamEventType.RESPONSE_CONTENT_PART_ADDED;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("item_id".equals(fieldName)) {
                    itemId = reader.getString();
                } else if ("output_index".equals(fieldName)) {
                    outputIndex = reader.getInt();
                } else if ("content_index".equals(fieldName)) {
                    contentIndex = reader.getInt();
                } else if ("part".equals(fieldName)) {
                    part = ResponsesOutputContent.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    type = ResponsesResponseStreamEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ResponsesResponseStreamEventResponseContentPartAdded deserializedResponsesResponseStreamEventResponseContentPartAdded
                = new ResponsesResponseStreamEventResponseContentPartAdded(itemId, outputIndex, contentIndex, part);
            deserializedResponsesResponseStreamEventResponseContentPartAdded.type = type;

            return deserializedResponsesResponseStreamEventResponseContentPartAdded;
        });
    }
}
