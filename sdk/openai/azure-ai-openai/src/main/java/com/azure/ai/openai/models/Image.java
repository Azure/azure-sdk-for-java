// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the url or the content of an image generated by the OpenAI API.
 */
@Immutable
public class Image implements JsonSerializable<Image> {
    /*
     * The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
     */
    @Generated
    private byte[] b64Json;

    /*
     * The URL of the generated image, if `response_format` is `url` (default).
     */
    @Generated
    private String url;

    /*
     * The prompt that was used to generate the image, if there was any revision to the prompt.
     */
    @Generated
    private String revisedPrompt;

    /**
     * Creates an instance of Image class.
     */
    @Generated
    protected Image() {
    }

    /**
     * Get the b64Json property: The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
     * 
     * @return the b64Json value.
     */
    @Generated
    public byte[] getB64Json() {
        return CoreUtils.clone(this.b64Json);
    }

    /**
     * Set the b64Json property: The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
     * 
     * @param b64Json the b64Json value to set.
     * @return the Image object itself.
     */
    @Generated
    Image setB64Json(byte[] b64Json) {
        this.b64Json = CoreUtils.clone(b64Json);
        return this;
    }

    /**
     * Get the url property: The URL of the generated image, if `response_format` is `url` (default).
     * 
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Set the url property: The URL of the generated image, if `response_format` is `url` (default).
     * 
     * @param url the url value to set.
     * @return the Image object itself.
     */
    @Generated
    Image setUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Get the revisedPrompt property: The prompt that was used to generate the image, if there was any revision to the
     * prompt.
     * 
     * @return the revisedPrompt value.
     */
    @Generated
    public String getRevisedPrompt() {
        return this.revisedPrompt;
    }

    /**
     * Set the revisedPrompt property: The prompt that was used to generate the image, if there was any revision to the
     * prompt.
     * 
     * @param revisedPrompt the revisedPrompt value to set.
     * @return the Image object itself.
     */
    @Generated
    Image setRevisedPrompt(String revisedPrompt) {
        this.revisedPrompt = revisedPrompt;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBinaryField("b64_json", this.b64Json);
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("revised_prompt", this.revisedPrompt);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Image from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Image if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Image.
     */
    @Generated
    public static Image fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Image deserializedImage = new Image();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("b64_json".equals(fieldName)) {
                    deserializedImage.b64Json = reader.getBinary();
                } else if ("url".equals(fieldName)) {
                    deserializedImage.url = reader.getString();
                } else if ("revised_prompt".equals(fieldName)) {
                    deserializedImage.revisedPrompt = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImage;
        });
    }
}
