// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.implementation;

import com.azure.ai.openai.AzureOpenAIServiceVersion;
import com.azure.ai.openai.models.AzureOpenAIChatErrorResponse;
import io.clientcore.core.annotation.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotation.BodyParam;
import io.clientcore.core.http.annotation.HeaderParam;
import io.clientcore.core.http.annotation.HostParam;
import io.clientcore.core.http.annotation.HttpRequestInformation;
import io.clientcore.core.http.annotation.PathParam;
import io.clientcore.core.http.annotation.QueryParam;
import io.clientcore.core.http.annotation.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exception.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.util.binarydata.BinaryData;

/**
 * An instance of this class provides access to all the operations defined in AzureChats.
 */
public final class AzureChatsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AzureChatsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureOpenAIClientImpl client;

    /**
     * Initializes an instance of AzureChatsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    AzureChatsImpl(AzureOpenAIClientImpl client) {
        this.service = RestProxy.create(AzureChatsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public AzureOpenAIServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for AzureOpenAIClientAzureChats to be used by the proxy service to
     * perform REST calls.
     */
    @ServiceInterface(name = "AzureOpenAIClientAzu", host = "{endpoint}/openai")
    public interface AzureChatsService {
        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/deployments/{deployment_id}/chat/completions",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<AzureOpenAIChatErrorResponse> createChatCompletionSync(@HostParam("endpoint") String endpoint,
            @PathParam("deployment_id") String deploymentId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData request, RequestOptions requestOptions);
    }

    /**
     * Creates a completion for the chat message.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     metadata (Optional): {
     *         String: String (Required)
     *     }
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     user: String (Optional)
     *     messages (Required): [
     *          (Required){
     *             role: String (Required)
     *         }
     *     ]
     *     modalities (Optional): [
     *         String(text/audio) (Optional)
     *     ]
     *     reasoning_effort: String(low/medium/high) (Optional)
     *     max_completion_tokens: Integer (Optional)
     *     frequency_penalty: Double (Optional)
     *     presence_penalty: Double (Optional)
     *     web_search_options (Optional): {
     *         user_location (Optional): {
     *             type: String (Required)
     *             approximate (Required): {
     *                 country: String (Optional)
     *                 region: String (Optional)
     *                 city: String (Optional)
     *                 timezone: String (Optional)
     *             }
     *         }
     *         search_context_size: String(low/medium/high) (Optional)
     *     }
     *     top_logprobs: Integer (Optional)
     *     response_format (Optional): {
     *         type: String (Required)
     *     }
     *     audio (Optional): {
     *         voice: String(alloy/ash/ballad/coral/echo/sage/shimmer/verse) (Required)
     *         format: String(wav/mp3/flac/opus/pcm16) (Required)
     *     }
     *     store: Boolean (Optional)
     *     stream: Boolean (Optional)
     *     stop: BinaryData (Optional)
     *     logit_bias (Optional): {
     *         String: int (Required)
     *     }
     *     logprobs: Boolean (Optional)
     *     max_tokens: Integer (Optional)
     *     n: Integer (Optional)
     *     prediction (Optional): {
     *         type: String(content) (Required)
     *     }
     *     seed: Long (Optional)
     *     stream_options (Optional): {
     *         include_usage: Boolean (Optional)
     *     }
     *     tools (Optional): [
     *          (Optional){
     *             type: String (Required)
     *             function (Required): {
     *                 description: String (Optional)
     *                 name: String (Required)
     *                 parameters: BinaryData (Optional)
     *                 strict: Boolean (Optional)
     *             }
     *         }
     *     ]
     *     tool_choice: BinaryData (Optional)
     *     parallel_tool_calls: Boolean (Optional)
     *     function_call: BinaryData (Optional)
     *     functions (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             name: String (Required)
     *             parameters: BinaryData (Optional)
     *         }
     *     ]
     *     data_sources (Optional): [
     *          (Optional){
     *             type: String (Required)
     *         }
     *     ]
     *     user_security_context (Optional): {
     *         application_name: String (Optional)
     *         end_user_id: String (Optional)
     *         end_user_tenant_id: String (Optional)
     *         source_ip: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         param: String (Optional)
     *         type: String (Optional)
     *         inner_error (Optional): {
     *             code: String(ResponsibleAIPolicyViolation) (Optional)
     *             revised_prompt: String (Optional)
     *             content_filter_results (Optional): {
     *                 prompt_index: Integer (Optional)
     *                 content_filter_results (Optional): {
     *                     sexual (Optional): {
     *                         filtered: boolean (Required)
     *                         severity: String(safe/low/medium/high) (Required)
     *                     }
     *                     hate (Optional): (recursive schema, see hate above)
     *                     violence (Optional): (recursive schema, see violence above)
     *                     self_harm (Optional): (recursive schema, see self_harm above)
     *                     profanity (Optional): {
     *                         filtered: boolean (Required)
     *                         detected: boolean (Required)
     *                     }
     *                     custom_blocklists (Optional): {
     *                         filtered: boolean (Required)
     *                         details (Optional): [
     *                              (Optional){
     *                                 filtered: boolean (Required)
     *                                 id: String (Required)
     *                             }
     *                         ]
     *                     }
     *                     error (Optional): {
     *                         code: int (Required)
     *                         message: String (Required)
     *                     }
     *                     jailbreak (Required): (recursive schema, see jailbreak above)
     *                     indirect_attack (Required): (recursive schema, see indirect_attack above)
     *                 }
     *             }
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param deploymentId Deployment ID of the model to use with this operation.
     * @param accept The accept parameter.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a structured representation of an error on an Azure OpenAI request.
     */
    public Response<AzureOpenAIChatErrorResponse> createChatCompletionWithResponse(String deploymentId, String accept,
        BinaryData request, RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.createChatCompletionSync(this.client.getEndpoint(), deploymentId,
            this.client.getServiceVersion().getVersion(), contentType, accept, request, requestOptions);
    }
}
