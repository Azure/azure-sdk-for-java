// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import io.clientcore.core.util.binarydata.BinaryData;
import java.io.IOException;

/**
 * Developer-provided instructions that the model should follow, regardless of
 * messages sent by the user. With o1 models and newer, use `developer` messages
 * for this purpose instead.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class ChatCompletionRequestSystemMessage extends ChatCompletionRequestMessage {
    /*
     * The role of the author of this message.
     */
    @Metadata(generated = true)
    private String role = "system";

    /*
     * The contents of the system message.
     */
    @Metadata(generated = true)
    private final BinaryData content;

    /*
     * An optional name for the participant. Provides the model information to differentiate between participants of the
     * same role.
     */
    @Metadata(generated = true)
    private String name;

    /**
     * Creates an instance of ChatCompletionRequestSystemMessage class.
     * 
     * @param content the content value to set.
     */
    @Metadata(generated = true)
    public ChatCompletionRequestSystemMessage(BinaryData content) {
        this.content = content;
    }

    /**
     * Get the role property: The role of the author of this message.
     * 
     * @return the role value.
     */
    @Metadata(generated = true)
    @Override
    public String getRole() {
        return this.role;
    }

    /**
     * Get the content property: The contents of the system message.
     * 
     * @return the content value.
     */
    @Metadata(generated = true)
    public BinaryData getContent() {
        return this.content;
    }

    /**
     * Get the name property: An optional name for the participant. Provides the model information to differentiate
     * between participants of the same role.
     * 
     * @return the name value.
     */
    @Metadata(generated = true)
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: An optional name for the participant. Provides the model information to differentiate
     * between participants of the same role.
     * 
     * @param name the name value to set.
     * @return the ChatCompletionRequestSystemMessage object itself.
     */
    @Metadata(generated = true)
    public ChatCompletionRequestSystemMessage setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeFieldName("content");
        this.content.writeTo(jsonWriter);
        jsonWriter.writeStringField("role", this.role);
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatCompletionRequestSystemMessage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatCompletionRequestSystemMessage if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatCompletionRequestSystemMessage.
     */
    @Metadata(generated = true)
    public static ChatCompletionRequestSystemMessage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BinaryData content = null;
            String role = "system";
            String name = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("content".equals(fieldName)) {
                    content = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("role".equals(fieldName)) {
                    role = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ChatCompletionRequestSystemMessage deserializedChatCompletionRequestSystemMessage
                = new ChatCompletionRequestSystemMessage(content);
            deserializedChatCompletionRequestSystemMessage.role = role;
            deserializedChatCompletionRequestSystemMessage.name = name;

            return deserializedChatCompletionRequestSystemMessage;
        });
    }
}
