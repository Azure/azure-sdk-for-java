// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.responses.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Returned when a new Response is created. The first event of response creation,
 * where the response is in an initial state of `in_progress`.
 */
@Immutable
public final class ResponsesResponseStreamEventResponseCreated extends ResponsesResponseStreamEvent {

    /*
     * The type property.
     */
    @Generated
    private ResponsesResponseStreamEventType type = ResponsesResponseStreamEventType.RESPONSE_CREATED;

    /*
     * The response property.
     */
    @Generated
    private final ResponsesResponse response;

    /**
     * Creates an instance of ResponsesResponseStreamEventResponseCreated class.
     *
     * @param response the response value to set.
     */
    @Generated
    private ResponsesResponseStreamEventResponseCreated(ResponsesResponse response) {
        this.response = response;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ResponsesResponseStreamEventType getType() {
        return this.type;
    }

    /**
     * Get the response property: The response property.
     *
     * @return the response value.
     */
    @Generated
    public ResponsesResponse getResponse() {
        return this.response;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("response", this.response);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponsesResponseStreamEventResponseCreated from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponsesResponseStreamEventResponseCreated if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResponsesResponseStreamEventResponseCreated.
     */
    @Generated
    public static ResponsesResponseStreamEventResponseCreated fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResponsesResponse response = null;
            ResponsesResponseStreamEventType type = ResponsesResponseStreamEventType.RESPONSE_CREATED;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("response".equals(fieldName)) {
                    response = ResponsesResponse.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    type = ResponsesResponseStreamEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ResponsesResponseStreamEventResponseCreated deserializedResponsesResponseStreamEventResponseCreated
                = new ResponsesResponseStreamEventResponseCreated(response);
            deserializedResponsesResponseStreamEventResponseCreated.type = type;
            return deserializedResponsesResponseStreamEventResponseCreated;
        });
    }
}
