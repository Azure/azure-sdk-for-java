// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a vectorization source that makes public service calls against an Azure OpenAI embedding model deployment.
 */
@Fluent
public final class AzureChatDataSourceEndpointVectorizationSource extends AzureChatDataSourceVectorizationSource {
    /*
     * The differentiating identifier for the concrete vectorization source.
     */
    @Generated
    private String type = "endpoint";

    /*
     * Specifies the resource endpoint URL from which embeddings should be retrieved.
     * It should be in the format of:
     * https://YOUR_RESOURCE_NAME.openai.azure.com/openai/deployments/YOUR_DEPLOYMENT_NAME/embeddings.
     * The api-version query parameter is not allowed.
     */
    @Generated
    private final String endpoint;

    /*
     * The authentication mechanism to use with the endpoint-based vectorization source.
     * Endpoint authentication supports API key and access token mechanisms.
     */
    @Generated
    private final BinaryData authentication;

    /*
     * The number of dimensions to request on embeddings.
     * Only supported in 'text-embedding-3' and later models.
     */
    @Generated
    private Integer dimensions;

    /**
     * Creates an instance of AzureChatDataSourceEndpointVectorizationSource class.
     * 
     * @param endpoint the endpoint value to set.
     * @param authentication the authentication value to set.
     */
    @Generated
    public AzureChatDataSourceEndpointVectorizationSource(String endpoint, BinaryData authentication) {
        this.endpoint = endpoint;
        this.authentication = authentication;
    }

    /**
     * Get the type property: The differentiating identifier for the concrete vectorization source.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the endpoint property: Specifies the resource endpoint URL from which embeddings should be retrieved.
     * It should be in the format of:
     * https://YOUR_RESOURCE_NAME.openai.azure.com/openai/deployments/YOUR_DEPLOYMENT_NAME/embeddings.
     * The api-version query parameter is not allowed.
     * 
     * @return the endpoint value.
     */
    @Generated
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Get the authentication property: The authentication mechanism to use with the endpoint-based vectorization
     * source.
     * Endpoint authentication supports API key and access token mechanisms.
     * 
     * @return the authentication value.
     */
    @Generated
    public BinaryData getAuthentication() {
        return this.authentication;
    }

    /**
     * Get the dimensions property: The number of dimensions to request on embeddings.
     * Only supported in 'text-embedding-3' and later models.
     * 
     * @return the dimensions value.
     */
    @Generated
    public Integer getDimensions() {
        return this.dimensions;
    }

    /**
     * Set the dimensions property: The number of dimensions to request on embeddings.
     * Only supported in 'text-embedding-3' and later models.
     * 
     * @param dimensions the dimensions value to set.
     * @return the AzureChatDataSourceEndpointVectorizationSource object itself.
     */
    @Generated
    public AzureChatDataSourceEndpointVectorizationSource setDimensions(Integer dimensions) {
        this.dimensions = dimensions;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("endpoint", this.endpoint);
        jsonWriter.writeFieldName("authentication");
        this.authentication.writeTo(jsonWriter);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeNumberField("dimensions", this.dimensions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureChatDataSourceEndpointVectorizationSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureChatDataSourceEndpointVectorizationSource if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureChatDataSourceEndpointVectorizationSource.
     */
    @Generated
    public static AzureChatDataSourceEndpointVectorizationSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String endpoint = null;
            BinaryData authentication = null;
            String type = "endpoint";
            Integer dimensions = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpoint".equals(fieldName)) {
                    endpoint = reader.getString();
                } else if ("authentication".equals(fieldName)) {
                    authentication
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("dimensions".equals(fieldName)) {
                    dimensions = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            AzureChatDataSourceEndpointVectorizationSource deserializedAzureChatDataSourceEndpointVectorizationSource
                = new AzureChatDataSourceEndpointVectorizationSource(endpoint, authentication);
            deserializedAzureChatDataSourceEndpointVectorizationSource.type = type;
            deserializedAzureChatDataSourceEndpointVectorizationSource.dimensions = dimensions;

            return deserializedAzureChatDataSourceEndpointVectorizationSource;
        });
    }
}
