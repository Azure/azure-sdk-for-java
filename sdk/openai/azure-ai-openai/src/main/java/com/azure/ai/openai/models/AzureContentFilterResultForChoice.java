// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * A content filter result for a single response item produced by a generative AI system.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class AzureContentFilterResultForChoice implements JsonSerializable<AzureContentFilterResultForChoice> {
    /*
     * A content filter category for language related to anatomical organs and genitals, romantic relationships, acts
     * portrayed in erotic or affectionate terms, pregnancy, physical sexual acts, including those portrayed as an
     * assault or a forced sexual violent act against one's will, prostitution, pornography, and abuse.
     */
    @Metadata(generated = true)
    private AzureContentFilterSeverityResult sexual;

    /*
     * A content filter category that can refer to any content that attacks or uses pejorative or discriminatory
     * language with reference to a person or identity group based on certain differentiating attributes of these groups
     * including but not limited to race, ethnicity, nationality, gender identity and expression, sexual orientation,
     * religion, immigration status, ability status, personal appearance, and body size.
     */
    @Metadata(generated = true)
    private AzureContentFilterSeverityResult hate;

    /*
     * A content filter category for language related to physical actions intended to hurt, injure, damage, or kill
     * someone or something; describes weapons, guns and related entities, such as manufactures, associations,
     * legislation, and so on.
     */
    @Metadata(generated = true)
    private AzureContentFilterSeverityResult violence;

    /*
     * A content filter category that describes language related to physical actions intended to purposely hurt, injure,
     * damage one's body or kill oneself.
     */
    @Metadata(generated = true)
    private AzureContentFilterSeverityResult selfHarm;

    /*
     * A detection result that identifies whether crude, vulgar, or otherwise objection language is present in the
     * content.
     */
    @Metadata(generated = true)
    private AzureContentFilterDetectionResult profanity;

    /*
     * A collection of binary filtering outcomes for configured custom blocklists.
     */
    @Metadata(generated = true)
    private AzureContentFilterBlocklistResult customBlocklists;

    /*
     * If present, details about an error that prevented content filtering from completing its evaluation.
     */
    @Metadata(generated = true)
    private AzureContentFilterResultForChoiceError error;

    /*
     * A detection result that describes a match against text protected under copyright or other status.
     */
    @Metadata(generated = true)
    private AzureContentFilterDetectionResult protectedMaterialText;

    /*
     * A detection result that describes a match against licensed code or other protected source material.
     */
    @Metadata(generated = true)
    private AzureContentFilterResultForChoiceProtectedMaterialCode protectedMaterialCode;

    /*
     * The ungrounded_material property.
     */
    @Metadata(generated = true)
    private AzureContentFilterCompletionTextSpanDetectionResult ungroundedMaterial;

    /**
     * Creates an instance of AzureContentFilterResultForChoice class.
     */
    @Metadata(generated = true)
    private AzureContentFilterResultForChoice() {
    }

    /**
     * Get the sexual property: A content filter category for language related to anatomical organs and genitals,
     * romantic relationships, acts
     * portrayed in erotic or affectionate terms, pregnancy, physical sexual acts, including those portrayed as an
     * assault or a forced sexual violent act against one's will, prostitution, pornography, and abuse.
     * 
     * @return the sexual value.
     */
    @Metadata(generated = true)
    public AzureContentFilterSeverityResult getSexual() {
        return this.sexual;
    }

    /**
     * Get the hate property: A content filter category that can refer to any content that attacks or uses pejorative or
     * discriminatory
     * language with reference to a person or identity group based on certain differentiating attributes of these groups
     * including but not limited to race, ethnicity, nationality, gender identity and expression, sexual orientation,
     * religion, immigration status, ability status, personal appearance, and body size.
     * 
     * @return the hate value.
     */
    @Metadata(generated = true)
    public AzureContentFilterSeverityResult getHate() {
        return this.hate;
    }

    /**
     * Get the violence property: A content filter category for language related to physical actions intended to hurt,
     * injure, damage, or kill
     * someone or something; describes weapons, guns and related entities, such as manufactures, associations,
     * legislation, and so on.
     * 
     * @return the violence value.
     */
    @Metadata(generated = true)
    public AzureContentFilterSeverityResult getViolence() {
        return this.violence;
    }

    /**
     * Get the selfHarm property: A content filter category that describes language related to physical actions intended
     * to purposely hurt, injure,
     * damage one's body or kill oneself.
     * 
     * @return the selfHarm value.
     */
    @Metadata(generated = true)
    public AzureContentFilterSeverityResult getSelfHarm() {
        return this.selfHarm;
    }

    /**
     * Get the profanity property: A detection result that identifies whether crude, vulgar, or otherwise objection
     * language is present in the
     * content.
     * 
     * @return the profanity value.
     */
    @Metadata(generated = true)
    public AzureContentFilterDetectionResult getProfanity() {
        return this.profanity;
    }

    /**
     * Get the customBlocklists property: A collection of binary filtering outcomes for configured custom blocklists.
     * 
     * @return the customBlocklists value.
     */
    @Metadata(generated = true)
    public AzureContentFilterBlocklistResult getCustomBlocklists() {
        return this.customBlocklists;
    }

    /**
     * Get the error property: If present, details about an error that prevented content filtering from completing its
     * evaluation.
     * 
     * @return the error value.
     */
    @Metadata(generated = true)
    public AzureContentFilterResultForChoiceError getError() {
        return this.error;
    }

    /**
     * Get the protectedMaterialText property: A detection result that describes a match against text protected under
     * copyright or other status.
     * 
     * @return the protectedMaterialText value.
     */
    @Metadata(generated = true)
    public AzureContentFilterDetectionResult getProtectedMaterialText() {
        return this.protectedMaterialText;
    }

    /**
     * Get the protectedMaterialCode property: A detection result that describes a match against licensed code or other
     * protected source material.
     * 
     * @return the protectedMaterialCode value.
     */
    @Metadata(generated = true)
    public AzureContentFilterResultForChoiceProtectedMaterialCode getProtectedMaterialCode() {
        return this.protectedMaterialCode;
    }

    /**
     * Get the ungroundedMaterial property: The ungrounded_material property.
     * 
     * @return the ungroundedMaterial value.
     */
    @Metadata(generated = true)
    public AzureContentFilterCompletionTextSpanDetectionResult getUngroundedMaterial() {
        return this.ungroundedMaterial;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("sexual", this.sexual);
        jsonWriter.writeJsonField("hate", this.hate);
        jsonWriter.writeJsonField("violence", this.violence);
        jsonWriter.writeJsonField("self_harm", this.selfHarm);
        jsonWriter.writeJsonField("profanity", this.profanity);
        jsonWriter.writeJsonField("custom_blocklists", this.customBlocklists);
        jsonWriter.writeJsonField("error", this.error);
        jsonWriter.writeJsonField("protected_material_text", this.protectedMaterialText);
        jsonWriter.writeJsonField("protected_material_code", this.protectedMaterialCode);
        jsonWriter.writeJsonField("ungrounded_material", this.ungroundedMaterial);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureContentFilterResultForChoice from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureContentFilterResultForChoice if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureContentFilterResultForChoice.
     */
    @Metadata(generated = true)
    public static AzureContentFilterResultForChoice fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureContentFilterResultForChoice deserializedAzureContentFilterResultForChoice
                = new AzureContentFilterResultForChoice();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sexual".equals(fieldName)) {
                    deserializedAzureContentFilterResultForChoice.sexual
                        = AzureContentFilterSeverityResult.fromJson(reader);
                } else if ("hate".equals(fieldName)) {
                    deserializedAzureContentFilterResultForChoice.hate
                        = AzureContentFilterSeverityResult.fromJson(reader);
                } else if ("violence".equals(fieldName)) {
                    deserializedAzureContentFilterResultForChoice.violence
                        = AzureContentFilterSeverityResult.fromJson(reader);
                } else if ("self_harm".equals(fieldName)) {
                    deserializedAzureContentFilterResultForChoice.selfHarm
                        = AzureContentFilterSeverityResult.fromJson(reader);
                } else if ("profanity".equals(fieldName)) {
                    deserializedAzureContentFilterResultForChoice.profanity
                        = AzureContentFilterDetectionResult.fromJson(reader);
                } else if ("custom_blocklists".equals(fieldName)) {
                    deserializedAzureContentFilterResultForChoice.customBlocklists
                        = AzureContentFilterBlocklistResult.fromJson(reader);
                } else if ("error".equals(fieldName)) {
                    deserializedAzureContentFilterResultForChoice.error
                        = AzureContentFilterResultForChoiceError.fromJson(reader);
                } else if ("protected_material_text".equals(fieldName)) {
                    deserializedAzureContentFilterResultForChoice.protectedMaterialText
                        = AzureContentFilterDetectionResult.fromJson(reader);
                } else if ("protected_material_code".equals(fieldName)) {
                    deserializedAzureContentFilterResultForChoice.protectedMaterialCode
                        = AzureContentFilterResultForChoiceProtectedMaterialCode.fromJson(reader);
                } else if ("ungrounded_material".equals(fieldName)) {
                    deserializedAzureContentFilterResultForChoice.ungroundedMaterial
                        = AzureContentFilterCompletionTextSpanDetectionResult.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureContentFilterResultForChoice;
        });
    }
}
