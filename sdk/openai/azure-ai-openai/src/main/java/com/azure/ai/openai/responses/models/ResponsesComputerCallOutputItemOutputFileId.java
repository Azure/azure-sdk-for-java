// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.responses.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ResponsesComputerCallOutputItemOutputFileId model.
 */
@Immutable
public final class ResponsesComputerCallOutputItemOutputFileId extends ResponsesComputerCallOutputItemOutput {
    /*
     * The type property.
     */
    @Generated
    private ResponsesComputerCallOutputItemOutputType type = ResponsesComputerCallOutputItemOutputType.FILE_ID;

    /*
     * The file_id property.
     */
    @Generated
    private final String fileId;

    /**
     * Creates an instance of ResponsesComputerCallOutputItemOutputFileId class.
     * 
     * @param fileId the fileId value to set.
     */
    @Generated
    public ResponsesComputerCallOutputItemOutputFileId(String fileId) {
        this.fileId = fileId;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public ResponsesComputerCallOutputItemOutputType getType() {
        return this.type;
    }

    /**
     * Get the fileId property: The file_id property.
     * 
     * @return the fileId value.
     */
    @Generated
    public String getFileId() {
        return this.fileId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("file_id", this.fileId);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponsesComputerCallOutputItemOutputFileId from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponsesComputerCallOutputItemOutputFileId if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResponsesComputerCallOutputItemOutputFileId.
     */
    @Generated
    public static ResponsesComputerCallOutputItemOutputFileId fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String fileId = null;
            ResponsesComputerCallOutputItemOutputType type = ResponsesComputerCallOutputItemOutputType.FILE_ID;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("file_id".equals(fieldName)) {
                    fileId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = ResponsesComputerCallOutputItemOutputType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ResponsesComputerCallOutputItemOutputFileId deserializedResponsesComputerCallOutputItemOutputFileId
                = new ResponsesComputerCallOutputItemOutputFileId(fileId);
            deserializedResponsesComputerCallOutputItemOutputFileId.type = type;

            return deserializedResponsesComputerCallOutputItemOutputFileId;
        });
    }
}
