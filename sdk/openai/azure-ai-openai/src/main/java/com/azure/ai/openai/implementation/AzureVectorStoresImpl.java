// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.implementation;

import com.azure.ai.openai.AzureOpenAIServiceVersion;
import com.azure.ai.openai.models.VectorStoreFileObject;
import io.clientcore.core.annotation.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotation.BodyParam;
import io.clientcore.core.http.annotation.HeaderParam;
import io.clientcore.core.http.annotation.HostParam;
import io.clientcore.core.http.annotation.HttpRequestInformation;
import io.clientcore.core.http.annotation.PathParam;
import io.clientcore.core.http.annotation.QueryParam;
import io.clientcore.core.http.annotation.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exception.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.util.binarydata.BinaryData;

/**
 * An instance of this class provides access to all the operations defined in AzureVectorStores.
 */
public final class AzureVectorStoresImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AzureVectorStoresService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureOpenAIClientImpl client;

    /**
     * Initializes an instance of AzureVectorStoresImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    AzureVectorStoresImpl(AzureOpenAIClientImpl client) {
        this.service = RestProxy.create(AzureVectorStoresService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public AzureOpenAIServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for AzureOpenAIClientAzureVectorStores to be used by the proxy service to
     * perform REST calls.
     */
    @ServiceInterface(name = "AzureOpenAIClientAzu", host = "{endpoint}/openai")
    public interface AzureVectorStoresService {
        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/vector_stores/{vector_store_id}/files/{file_id}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<VectorStoreFileObject> updateVectorStoreFileAttributesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("vector_store_id") String vectorStoreId,
            @PathParam("file_id") String fileId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData request,
            RequestOptions requestOptions);
    }

    /**
     * The updateVectorStoreFileAttributes operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     attributes (Required): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     usage_bytes: int (Required)
     *     created_at: long (Required)
     *     vector_store_id: String (Required)
     *     status: String(in_progress/completed/cancelled/failed) (Required)
     *     last_error (Required): {
     *         code: String(server_error/unsupported_file/invalid_file) (Required)
     *         message: String (Required)
     *     }
     *     chunking_strategy: BinaryData (Optional)
     *     attributes (Optional): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param vectorStoreId The vectorStoreId parameter.
     * @param fileId The fileId parameter.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a list of files attached to a vector store.
     */
    public Response<VectorStoreFileObject> updateVectorStoreFileAttributesWithResponse(String vectorStoreId,
        String fileId, BinaryData request, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateVectorStoreFileAttributesSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), vectorStoreId, fileId, contentType, accept, request,
            requestOptions);
    }
}
