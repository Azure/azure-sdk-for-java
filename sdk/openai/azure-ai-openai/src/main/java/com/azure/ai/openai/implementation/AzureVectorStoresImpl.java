// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.implementation;

import com.azure.ai.openai.AzureOpenAIServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in AzureVectorStores.
 */
public final class AzureVectorStoresImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AzureVectorStoresService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureOpenAIClientImpl client;

    /**
     * Initializes an instance of AzureVectorStoresImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    AzureVectorStoresImpl(AzureOpenAIClientImpl client) {
        this.service
            = RestProxy.create(AzureVectorStoresService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public AzureOpenAIServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for AzureOpenAIClientAzureVectorStores to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}/openai")
    @ServiceInterface(name = "AzureOpenAIClientAzu")
    public interface AzureVectorStoresService {
        @Post("/vector_stores/{vector_store_id}/files/{file_id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> updateVectorStoreFileAttributes(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("vector_store_id") String vectorStoreId,
            @PathParam("file_id") String fileId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData request,
            RequestOptions requestOptions, Context context);

        @Post("/vector_stores/{vector_store_id}/files/{file_id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> updateVectorStoreFileAttributesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("vector_store_id") String vectorStoreId,
            @PathParam("file_id") String fileId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData request,
            RequestOptions requestOptions, Context context);
    }

    /**
     * The updateVectorStoreFileAttributes operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     attributes (Required): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     usage_bytes: int (Required)
     *     created_at: long (Required)
     *     vector_store_id: String (Required)
     *     status: String(in_progress/completed/cancelled/failed) (Required)
     *     last_error (Required): {
     *         code: String(server_error/unsupported_file/invalid_file) (Required)
     *         message: String (Required)
     *     }
     *     chunking_strategy: BinaryData (Optional)
     *     attributes (Optional): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param vectorStoreId The vectorStoreId parameter.
     * @param fileId The fileId parameter.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of files attached to a vector store along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateVectorStoreFileAttributesWithResponseAsync(String vectorStoreId,
        String fileId, BinaryData request, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.updateVectorStoreFileAttributes(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), vectorStoreId, fileId, contentType, accept, request,
            requestOptions, context));
    }

    /**
     * The updateVectorStoreFileAttributes operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     attributes (Required): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     usage_bytes: int (Required)
     *     created_at: long (Required)
     *     vector_store_id: String (Required)
     *     status: String(in_progress/completed/cancelled/failed) (Required)
     *     last_error (Required): {
     *         code: String(server_error/unsupported_file/invalid_file) (Required)
     *         message: String (Required)
     *     }
     *     chunking_strategy: BinaryData (Optional)
     *     attributes (Optional): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param vectorStoreId The vectorStoreId parameter.
     * @param fileId The fileId parameter.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of files attached to a vector store along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateVectorStoreFileAttributesWithResponse(String vectorStoreId, String fileId,
        BinaryData request, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateVectorStoreFileAttributesSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), vectorStoreId, fileId, contentType, accept, request,
            requestOptions, Context.NONE);
    }
}
