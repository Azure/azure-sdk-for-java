// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.ai.openai.models;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The is the property for creating the FunctionDefinition.
 *
 * To create a FunctionProperties, use the {@link FunctionPropertiesBuilder}
 * Builder class like follows.
 *
 * If you would like to use more elements, you need to extend the
 * FunctionProperties class.
 *
 * <pre>
 * {@code
 * FunctionProperties location = new FunctionPropertiesBuilder()
 *         .type("string")
 *         .description("The city and state, e.g. San Francisco, CA")
 *         .build();
 * FunctionProperties unit = new FunctionPropertiesBuilder()
 *         .type("string")
 *         .enumString(Arrays.asList("celsius", "fahrenheit"))
 *         .build();
 * Map<String, FunctionProperties> properties = Map.of("location", location, "unit", unit);
 * }
 * </pre>
 *
 * @see FunctionParameters
 * @see FunctionDefinition
 */
public final class FunctionProperties {
    // Type of Property
    private final String type;
    // Description of the Property
    private final String description;
    // Enum values for the Property
    @JsonProperty("enum")
    private final List<String> enumString;

    /**
     * Can't creates an instance of FunctionProperties class from constructor.
     * Instance will be created using FunctionPropertiesBuilder.
     *
     * @param builder
     */
    private FunctionProperties(FunctionPropertiesBuilder builder) {
        this.type = builder.type;
        this.description = builder.description;
        this.enumString = builder.enumString;
    }

    /**
     * Get type of property.
     *
     * @return Type of property.
     */
    public String getType() {
        return type;
    }

    /**
     * Get description of property.
     *
     * @return Description of property.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Get enum values for the property.
     *
     * @return Enum values for the property.
     */
    public List<String> getEnumString() {
        return enumString;
    }

    @Override
    public String toString() {
        return "FunctionEntry [type=" + type + ", description=" + description + "]";
    }

    /**
     * The builder class to create a FunctionProperties instance.
     */
    public static class FunctionPropertiesBuilder {
        // Type of Property
        private String type;
        // Description of the Property
        private String description;
        // Enum values for the Property
        private List<String> enumString;

        /**
         * Set type of property.
         *
         * @param type
         * @return FunctionPropertiesBuilder
         */
        public FunctionPropertiesBuilder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Set description of property.
         *
         * @param description
         * @return FunctionPropertiesBuilder
         */
        public FunctionPropertiesBuilder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Set enum values for the property.
         *
         * @param enumString
         * @return FunctionPropertiesBuilder
         */
        public FunctionPropertiesBuilder enumString(List<String> enumString) {
            this.enumString = enumString;
            return this;
        }

        /**
         * Creates an instance of FunctionProperties class.
         *
         * @return FunctionProperties
         */
        public FunctionProperties build() {
            return new FunctionProperties(this);
        }
    }
}
