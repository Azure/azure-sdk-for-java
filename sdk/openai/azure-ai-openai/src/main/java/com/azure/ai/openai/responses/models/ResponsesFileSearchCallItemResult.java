// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.responses.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ResponsesFileSearchCallItemResult model.
 */
@Immutable
public final class ResponsesFileSearchCallItemResult implements JsonSerializable<ResponsesFileSearchCallItemResult> {

    /*
     * The file_id property.
     */
    @Generated
    private final String fileId;

    /*
     * The file_name property.
     */
    @Generated
    private final String fileName;

    /*
     * The score property.
     */
    @Generated
    private final double score;

    /*
     * The content property.
     */
    @Generated
    private final List<ResponsesContent> content;

    /**
     * Creates an instance of ResponsesFileSearchCallItemResult class.
     *
     * @param fileId the fileId value to set.
     * @param fileName the fileName value to set.
     * @param score the score value to set.
     * @param content the content value to set.
     */
    @Generated
    public ResponsesFileSearchCallItemResult(String fileId, String fileName, double score,
        List<ResponsesContent> content) {
        this.fileId = fileId;
        this.fileName = fileName;
        this.score = score;
        this.content = content;
    }

    /**
     * Get the fileId property: The file_id property.
     *
     * @return the fileId value.
     */
    @Generated
    public String getFileId() {
        return this.fileId;
    }

    /**
     * Get the fileName property: The file_name property.
     *
     * @return the fileName value.
     */
    @Generated
    public String getFileName() {
        return this.fileName;
    }

    /**
     * Get the score property: The score property.
     *
     * @return the score value.
     */
    @Generated
    public double getScore() {
        return this.score;
    }

    /**
     * Get the content property: The content property.
     *
     * @return the content value.
     */
    @Generated
    public List<ResponsesContent> getContent() {
        return this.content;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("file_id", this.fileId);
        jsonWriter.writeStringField("file_name", this.fileName);
        jsonWriter.writeDoubleField("score", this.score);
        jsonWriter.writeArrayField("content", this.content, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponsesFileSearchCallItemResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponsesFileSearchCallItemResult if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResponsesFileSearchCallItemResult.
     */
    @Generated
    public static ResponsesFileSearchCallItemResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String fileId = null;
            String fileName = null;
            double score = 0.0;
            List<ResponsesContent> content = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("file_id".equals(fieldName)) {
                    fileId = reader.getString();
                } else if ("file_name".equals(fieldName)) {
                    fileName = reader.getString();
                } else if ("score".equals(fieldName)) {
                    score = reader.getDouble();
                } else if ("content".equals(fieldName)) {
                    content = reader.readArray(reader1 -> ResponsesContent.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new ResponsesFileSearchCallItemResult(fileId, fileName, score, content);
        });
    }
}
