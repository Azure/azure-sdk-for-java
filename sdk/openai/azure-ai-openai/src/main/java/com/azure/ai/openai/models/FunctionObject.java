// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The FunctionObject model.
 */
@Fluent
public final class FunctionObject {
    /*
     * A description of what the function does, used by the model to choose when and how to call the function.
     */
    @Generated
    @JsonProperty(value = "description")
    private String description;

    /*
     * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum
     * length of 64.
     */
    @Generated
    @JsonProperty(value = "name")
    private final String name;

    /*
     * The parameters the functions accepts, described as a JSON Schema object. See the
     * [guide](/docs/guides/function-calling) for examples, and the [JSON Schema
     * reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
     * 
     * Omitting `parameters` defines a function with an empty parameter list.
     */
    @Generated
    @JsonProperty(value = "parameters")
    private BinaryData parameters;

    /*
     * Whether to enable strict schema adherence when generating the function call. If set to true, the model will
     * follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when
     * `strict` is `true`. Learn more about Structured Outputs in the [function calling
     * guide](docs/guides/function-calling).
     */
    @Generated
    @JsonProperty(value = "strict")
    private Boolean strict;

    /**
     * Creates an instance of FunctionObject class.
     * 
     * @param name the name value to set.
     */
    @Generated
    @JsonCreator
    public FunctionObject(@JsonProperty(value = "name") String name) {
        this.name = name;
    }

    /**
     * Get the description property: A description of what the function does, used by the model to choose when and how
     * to call the function.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: A description of what the function does, used by the model to choose when and how
     * to call the function.
     * 
     * @param description the description value to set.
     * @return the FunctionObject object itself.
     */
    @Generated
    public FunctionObject setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the name property: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and
     * dashes, with a maximum length of 64.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the parameters property: The parameters the functions accepts, described as a JSON Schema object. See the
     * [guide](/docs/guides/function-calling) for examples, and the [JSON Schema
     * reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
     * 
     * Omitting `parameters` defines a function with an empty parameter list.
     * 
     * @return the parameters value.
     */
    @Generated
    public BinaryData getParameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: The parameters the functions accepts, described as a JSON Schema object. See the
     * [guide](/docs/guides/function-calling) for examples, and the [JSON Schema
     * reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
     * 
     * Omitting `parameters` defines a function with an empty parameter list.
     * 
     * @param parameters the parameters value to set.
     * @return the FunctionObject object itself.
     */
    @Generated
    public FunctionObject setParameters(BinaryData parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the strict property: Whether to enable strict schema adherence when generating the function call. If set to
     * true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is
     * supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling
     * guide](docs/guides/function-calling).
     * 
     * @return the strict value.
     */
    @Generated
    public Boolean isStrict() {
        return this.strict;
    }

    /**
     * Set the strict property: Whether to enable strict schema adherence when generating the function call. If set to
     * true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is
     * supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling
     * guide](docs/guides/function-calling).
     * 
     * @param strict the strict value to set.
     * @return the FunctionObject object itself.
     */
    @Generated
    public FunctionObject setStrict(Boolean strict) {
        this.strict = strict;
        return this;
    }
}
