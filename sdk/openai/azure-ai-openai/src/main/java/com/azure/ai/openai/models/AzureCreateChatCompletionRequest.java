// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * The extended request model for chat completions against the Azure OpenAI service.
 * This adds the ability to provide data sources for the On Your Data feature.
 */
@Fluent
public final class AzureCreateChatCompletionRequest {
    /*
     * Set of 16 key-value pairs that can be attached to an object. This can be
     * useful for storing additional information about the object in a structured
     * format, and querying for objects via API or the dashboard.
     * 
     * Keys are strings with a maximum length of 64 characters. Values are strings
     * with a maximum length of 512 characters.
     */
    @Generated
    @JsonProperty(value = "metadata")
    private Map<String, String> metadata;

    /*
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while
     * lower values like 0.2 will make it more focused and deterministic.
     * We generally recommend altering this or `top_p` but not both.
     */
    @Generated
    @JsonProperty(value = "temperature")
    private Double temperature;

    /*
     * An alternative to sampling with temperature, called nucleus sampling,
     * where the model considers the results of the tokens with top_p probability
     * mass. So 0.1 means only the tokens comprising the top 10% probability mass
     * are considered.
     * 
     * We generally recommend altering this or `temperature` but not both.
     */
    @Generated
    @JsonProperty(value = "top_p")
    private Double topP;

    /*
     * A unique identifier representing your end-user, which can help OpenAI to
     * monitor and detect abuse.
     */
    @Generated
    @JsonProperty(value = "user")
    private String user;

    /*
     * A list of messages comprising the conversation so far. Depending on the
     * model you use, different message types (modalities) are supported,
     * like text, images, and audio.
     */
    @Generated
    @JsonProperty(value = "messages")
    private final List<ChatCompletionRequestMessage> messages;

    /*
     * The modalities property.
     */
    @Generated
    @JsonProperty(value = "modalities")
    private List<AzureCreateChatCompletionRequestModality> modalities;

    /*
     * The reasoning_effort property.
     */
    @Generated
    @JsonProperty(value = "reasoning_effort")
    private ReasoningEffort reasoningEffort;

    /*
     * An upper bound for the number of tokens that can be generated for a
     * completion, including visible output tokens and reasoning tokens.
     */
    @Generated
    @JsonProperty(value = "max_completion_tokens")
    private Integer maxCompletionTokens;

    /*
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on
     * their existing frequency in the text so far, decreasing the model's
     * likelihood to repeat the same line verbatim.
     */
    @Generated
    @JsonProperty(value = "frequency_penalty")
    private Double frequencyPenalty;

    /*
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on
     * whether they appear in the text so far, increasing the model's likelihood
     * to talk about new topics.
     */
    @Generated
    @JsonProperty(value = "presence_penalty")
    private Double presencePenalty;

    /*
     * This tool searches the web for relevant results to use in a response.
     */
    @Generated
    @JsonProperty(value = "web_search_options")
    private AzureCreateChatCompletionRequestWebSearchOptions webSearchOptions;

    /*
     * An integer between 0 and 20 specifying the number of most likely tokens to
     * return at each token position, each with an associated log probability.
     * `logprobs` must be set to `true` if this parameter is used.
     */
    @Generated
    @JsonProperty(value = "top_logprobs")
    private Integer topLogprobs;

    /*
     * An object specifying the format that the model must output.
     * 
     * Setting to `{ "type": "json_schema", "json_schema": {...} }` enables
     * Structured Outputs which ensures the model will match your supplied JSON
     * schema.
     * 
     * Setting to `{ "type": "json_object" }` enables JSON mode, which ensures
     * the message the model generates is valid JSON.
     * 
     * **Important:** when using JSON mode, you **must** also instruct the model
     * to produce JSON yourself via a system or user message. Without this, the
     * model may generate an unending stream of whitespace until the generation
     * reaches the token limit, resulting in a long-running and seemingly "stuck"
     * request. Also note that the message content may be partially cut off if
     * `finish_reason="length"`, which indicates the generation exceeded
     * `max_tokens` or the conversation exceeded the max context length.
     */
    @Generated
    @JsonProperty(value = "response_format")
    private ChatResponseFormat responseFormat;

    /*
     * Parameters for audio output. Required when audio output is requested with
     * `modalities: ["audio"]`.
     */
    @Generated
    @JsonProperty(value = "audio")
    private AzureCreateChatCompletionRequestAudio audio;

    /*
     * Whether or not to store the output of this chat completion request for
     * use in model distillation or evals products.
     */
    @Generated
    @JsonProperty(value = "store")
    private Boolean store;

    /*
     * If set to true, the model response data will be streamed to the client
     * as it is generated using server-sent events.
     */
    @Generated
    @JsonProperty(value = "stream")
    private Boolean stream;

    /*
     * The stop property.
     */
    @Generated
    @JsonProperty(value = "stop")
    private BinaryData stop;

    /*
     * Modify the likelihood of specified tokens appearing in the completion.
     * 
     * Accepts a JSON object that maps tokens (specified by their token ID in the
     * tokenizer) to an associated bias value from -100 to 100. Mathematically,
     * the bias is added to the logits generated by the model prior to sampling.
     * The exact effect will vary per model, but values between -1 and 1 should
     * decrease or increase likelihood of selection; values like -100 or 100
     * should result in a ban or exclusive selection of the relevant token.
     */
    @Generated
    @JsonProperty(value = "logit_bias")
    private Map<String, Integer> logitBias;

    /*
     * Whether to return log probabilities of the output tokens or not. If true,
     * returns the log probabilities of each output token returned in the
     * `content` of `message`.
     */
    @Generated
    @JsonProperty(value = "logprobs")
    private Boolean logprobs;

    /*
     * The maximum number of tokens that can be generated in the chat completion.
     * This value can be used to control costs for text generated via API.
     * 
     * This value is now deprecated in favor of `max_completion_tokens`, and is
     * not compatible with o1 series models.
     */
    @Generated
    @JsonProperty(value = "max_tokens")
    private Integer maxTokens;

    /*
     * How many chat completion choices to generate for each input message. Note that you will be charged based on the
     * number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
     */
    @Generated
    @JsonProperty(value = "n")
    private Integer n;

    /*
     * Configuration for a predicted output, which can greatly improve
     * response times when large parts of the model response are known
     * ahead of time. This is most common when you are regenerating a
     * file with only minor changes to most of the content.
     */
    @Generated
    @JsonProperty(value = "prediction")
    private ChatOutputPrediction prediction;

    /*
     * This feature is in Beta.
     * If specified, our system will make a best effort to sample deterministically, such that repeated requests with
     * the same `seed` and parameters should return the same result.
     * Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor
     * changes in the backend.
     */
    @Generated
    @JsonProperty(value = "seed")
    private Long seed;

    /*
     * The stream_options property.
     */
    @Generated
    @JsonProperty(value = "stream_options")
    private ChatCompletionStreamOptions streamOptions;

    /*
     * A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list
     * of functions the model may generate JSON inputs for. A max of 128 functions are supported.
     */
    @Generated
    @JsonProperty(value = "tools")
    private List<ChatCompletionTool> tools;

    /*
     * The tool_choice property.
     */
    @Generated
    @JsonProperty(value = "tool_choice")
    private BinaryData toolChoice;

    /*
     * The parallel_tool_calls property.
     */
    @Generated
    @JsonProperty(value = "parallel_tool_calls")
    private Boolean parallelToolCalls;

    /*
     * Deprecated in favor of `tool_choice`.
     * 
     * Controls which (if any) function is called by the model.
     * 
     * `none` means the model will not call a function and instead generates a
     * message.
     * 
     * `auto` means the model can pick between generating a message or calling a
     * function.
     * 
     * Specifying a particular function via `{"name": "my_function"}` forces the
     * model to call that function.
     * 
     * `none` is the default when no functions are present. `auto` is the default
     * if functions are present.
     */
    @Generated
    @JsonProperty(value = "function_call")
    private BinaryData functionCall;

    /*
     * Deprecated in favor of `tools`.
     * 
     * A list of functions the model may generate JSON inputs for.
     */
    @Generated
    @JsonProperty(value = "functions")
    private List<ChatCompletionFunctions> functions;

    /*
     * The data sources to use for the On Your Data feature, exclusive to Azure OpenAI.
     */
    @Generated
    @JsonProperty(value = "data_sources")
    private List<AzureChatDataSource> dataSources;

    /*
     * The user_security_context property.
     */
    @Generated
    @JsonProperty(value = "user_security_context")
    private AzureUserSecurityContext userSecurityContext;

    /**
     * Creates an instance of AzureCreateChatCompletionRequest class.
     * 
     * @param messages the messages value to set.
     */
    @Generated
    @JsonCreator
    public AzureCreateChatCompletionRequest(
        @JsonProperty(value = "messages") List<ChatCompletionRequestMessage> messages) {
        this.messages = messages;
    }

    /**
     * Get the metadata property: Set of 16 key-value pairs that can be attached to an object. This can be
     * useful for storing additional information about the object in a structured
     * format, and querying for objects via API or the dashboard.
     * 
     * Keys are strings with a maximum length of 64 characters. Values are strings
     * with a maximum length of 512 characters.
     * 
     * @return the metadata value.
     */
    @Generated
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Set of 16 key-value pairs that can be attached to an object. This can be
     * useful for storing additional information about the object in a structured
     * format, and querying for objects via API or the dashboard.
     * 
     * Keys are strings with a maximum length of 64 characters. Values are strings
     * with a maximum length of 512 characters.
     * 
     * @param metadata the metadata value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the temperature property: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make
     * the output more random, while lower values like 0.2 will make it more focused and deterministic.
     * We generally recommend altering this or `top_p` but not both.
     * 
     * @return the temperature value.
     */
    @Generated
    public Double getTemperature() {
        return this.temperature;
    }

    /**
     * Set the temperature property: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make
     * the output more random, while lower values like 0.2 will make it more focused and deterministic.
     * We generally recommend altering this or `top_p` but not both.
     * 
     * @param temperature the temperature value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setTemperature(Double temperature) {
        this.temperature = temperature;
        return this;
    }

    /**
     * Get the topP property: An alternative to sampling with temperature, called nucleus sampling,
     * where the model considers the results of the tokens with top_p probability
     * mass. So 0.1 means only the tokens comprising the top 10% probability mass
     * are considered.
     * 
     * We generally recommend altering this or `temperature` but not both.
     * 
     * @return the topP value.
     */
    @Generated
    public Double getTopP() {
        return this.topP;
    }

    /**
     * Set the topP property: An alternative to sampling with temperature, called nucleus sampling,
     * where the model considers the results of the tokens with top_p probability
     * mass. So 0.1 means only the tokens comprising the top 10% probability mass
     * are considered.
     * 
     * We generally recommend altering this or `temperature` but not both.
     * 
     * @param topP the topP value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setTopP(Double topP) {
        this.topP = topP;
        return this;
    }

    /**
     * Get the user property: A unique identifier representing your end-user, which can help OpenAI to
     * monitor and detect abuse.
     * 
     * @return the user value.
     */
    @Generated
    public String getUser() {
        return this.user;
    }

    /**
     * Set the user property: A unique identifier representing your end-user, which can help OpenAI to
     * monitor and detect abuse.
     * 
     * @param user the user value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setUser(String user) {
        this.user = user;
        return this;
    }

    /**
     * Get the messages property: A list of messages comprising the conversation so far. Depending on the
     * model you use, different message types (modalities) are supported,
     * like text, images, and audio.
     * 
     * @return the messages value.
     */
    @Generated
    public List<ChatCompletionRequestMessage> getMessages() {
        return this.messages;
    }

    /**
     * Get the modalities property: The modalities property.
     * 
     * @return the modalities value.
     */
    @Generated
    public List<AzureCreateChatCompletionRequestModality> getModalities() {
        return this.modalities;
    }

    /**
     * Set the modalities property: The modalities property.
     * 
     * @param modalities the modalities value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setModalities(List<AzureCreateChatCompletionRequestModality> modalities) {
        this.modalities = modalities;
        return this;
    }

    /**
     * Get the reasoningEffort property: The reasoning_effort property.
     * 
     * @return the reasoningEffort value.
     */
    @Generated
    public ReasoningEffort getReasoningEffort() {
        return this.reasoningEffort;
    }

    /**
     * Set the reasoningEffort property: The reasoning_effort property.
     * 
     * @param reasoningEffort the reasoningEffort value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setReasoningEffort(ReasoningEffort reasoningEffort) {
        this.reasoningEffort = reasoningEffort;
        return this;
    }

    /**
     * Get the maxCompletionTokens property: An upper bound for the number of tokens that can be generated for a
     * completion, including visible output tokens and reasoning tokens.
     * 
     * @return the maxCompletionTokens value.
     */
    @Generated
    public Integer getMaxCompletionTokens() {
        return this.maxCompletionTokens;
    }

    /**
     * Set the maxCompletionTokens property: An upper bound for the number of tokens that can be generated for a
     * completion, including visible output tokens and reasoning tokens.
     * 
     * @param maxCompletionTokens the maxCompletionTokens value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setMaxCompletionTokens(Integer maxCompletionTokens) {
        this.maxCompletionTokens = maxCompletionTokens;
        return this;
    }

    /**
     * Get the frequencyPenalty property: Number between -2.0 and 2.0. Positive values penalize new tokens based on
     * their existing frequency in the text so far, decreasing the model's
     * likelihood to repeat the same line verbatim.
     * 
     * @return the frequencyPenalty value.
     */
    @Generated
    public Double getFrequencyPenalty() {
        return this.frequencyPenalty;
    }

    /**
     * Set the frequencyPenalty property: Number between -2.0 and 2.0. Positive values penalize new tokens based on
     * their existing frequency in the text so far, decreasing the model's
     * likelihood to repeat the same line verbatim.
     * 
     * @param frequencyPenalty the frequencyPenalty value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setFrequencyPenalty(Double frequencyPenalty) {
        this.frequencyPenalty = frequencyPenalty;
        return this;
    }

    /**
     * Get the presencePenalty property: Number between -2.0 and 2.0. Positive values penalize new tokens based on
     * whether they appear in the text so far, increasing the model's likelihood
     * to talk about new topics.
     * 
     * @return the presencePenalty value.
     */
    @Generated
    public Double getPresencePenalty() {
        return this.presencePenalty;
    }

    /**
     * Set the presencePenalty property: Number between -2.0 and 2.0. Positive values penalize new tokens based on
     * whether they appear in the text so far, increasing the model's likelihood
     * to talk about new topics.
     * 
     * @param presencePenalty the presencePenalty value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setPresencePenalty(Double presencePenalty) {
        this.presencePenalty = presencePenalty;
        return this;
    }

    /**
     * Get the webSearchOptions property: This tool searches the web for relevant results to use in a response.
     * 
     * @return the webSearchOptions value.
     */
    @Generated
    public AzureCreateChatCompletionRequestWebSearchOptions getWebSearchOptions() {
        return this.webSearchOptions;
    }

    /**
     * Set the webSearchOptions property: This tool searches the web for relevant results to use in a response.
     * 
     * @param webSearchOptions the webSearchOptions value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest
        setWebSearchOptions(AzureCreateChatCompletionRequestWebSearchOptions webSearchOptions) {
        this.webSearchOptions = webSearchOptions;
        return this;
    }

    /**
     * Get the topLogprobs property: An integer between 0 and 20 specifying the number of most likely tokens to
     * return at each token position, each with an associated log probability.
     * `logprobs` must be set to `true` if this parameter is used.
     * 
     * @return the topLogprobs value.
     */
    @Generated
    public Integer getTopLogprobs() {
        return this.topLogprobs;
    }

    /**
     * Set the topLogprobs property: An integer between 0 and 20 specifying the number of most likely tokens to
     * return at each token position, each with an associated log probability.
     * `logprobs` must be set to `true` if this parameter is used.
     * 
     * @param topLogprobs the topLogprobs value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setTopLogprobs(Integer topLogprobs) {
        this.topLogprobs = topLogprobs;
        return this;
    }

    /**
     * Get the responseFormat property: An object specifying the format that the model must output.
     * 
     * Setting to `{ "type": "json_schema", "json_schema": {...} }` enables
     * Structured Outputs which ensures the model will match your supplied JSON
     * schema.
     * 
     * Setting to `{ "type": "json_object" }` enables JSON mode, which ensures
     * the message the model generates is valid JSON.
     * 
     * **Important:** when using JSON mode, you **must** also instruct the model
     * to produce JSON yourself via a system or user message. Without this, the
     * model may generate an unending stream of whitespace until the generation
     * reaches the token limit, resulting in a long-running and seemingly "stuck"
     * request. Also note that the message content may be partially cut off if
     * `finish_reason="length"`, which indicates the generation exceeded
     * `max_tokens` or the conversation exceeded the max context length.
     * 
     * @return the responseFormat value.
     */
    @Generated
    public ChatResponseFormat getResponseFormat() {
        return this.responseFormat;
    }

    /**
     * Set the responseFormat property: An object specifying the format that the model must output.
     * 
     * Setting to `{ "type": "json_schema", "json_schema": {...} }` enables
     * Structured Outputs which ensures the model will match your supplied JSON
     * schema.
     * 
     * Setting to `{ "type": "json_object" }` enables JSON mode, which ensures
     * the message the model generates is valid JSON.
     * 
     * **Important:** when using JSON mode, you **must** also instruct the model
     * to produce JSON yourself via a system or user message. Without this, the
     * model may generate an unending stream of whitespace until the generation
     * reaches the token limit, resulting in a long-running and seemingly "stuck"
     * request. Also note that the message content may be partially cut off if
     * `finish_reason="length"`, which indicates the generation exceeded
     * `max_tokens` or the conversation exceeded the max context length.
     * 
     * @param responseFormat the responseFormat value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setResponseFormat(ChatResponseFormat responseFormat) {
        this.responseFormat = responseFormat;
        return this;
    }

    /**
     * Get the audio property: Parameters for audio output. Required when audio output is requested with
     * `modalities: ["audio"]`.
     * 
     * @return the audio value.
     */
    @Generated
    public AzureCreateChatCompletionRequestAudio getAudio() {
        return this.audio;
    }

    /**
     * Set the audio property: Parameters for audio output. Required when audio output is requested with
     * `modalities: ["audio"]`.
     * 
     * @param audio the audio value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setAudio(AzureCreateChatCompletionRequestAudio audio) {
        this.audio = audio;
        return this;
    }

    /**
     * Get the store property: Whether or not to store the output of this chat completion request for
     * use in model distillation or evals products.
     * 
     * @return the store value.
     */
    @Generated
    public Boolean isStore() {
        return this.store;
    }

    /**
     * Set the store property: Whether or not to store the output of this chat completion request for
     * use in model distillation or evals products.
     * 
     * @param store the store value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setStore(Boolean store) {
        this.store = store;
        return this;
    }

    /**
     * Get the stream property: If set to true, the model response data will be streamed to the client
     * as it is generated using server-sent events.
     * 
     * @return the stream value.
     */
    @Generated
    public Boolean isStream() {
        return this.stream;
    }

    /**
     * Set the stream property: If set to true, the model response data will be streamed to the client
     * as it is generated using server-sent events.
     * 
     * @param stream the stream value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setStream(Boolean stream) {
        this.stream = stream;
        return this;
    }

    /**
     * Get the stop property: The stop property.
     * 
     * @return the stop value.
     */
    @Generated
    public BinaryData getStop() {
        return this.stop;
    }

    /**
     * Set the stop property: The stop property.
     * 
     * @param stop the stop value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setStop(BinaryData stop) {
        this.stop = stop;
        return this;
    }

    /**
     * Get the logitBias property: Modify the likelihood of specified tokens appearing in the completion.
     * 
     * Accepts a JSON object that maps tokens (specified by their token ID in the
     * tokenizer) to an associated bias value from -100 to 100. Mathematically,
     * the bias is added to the logits generated by the model prior to sampling.
     * The exact effect will vary per model, but values between -1 and 1 should
     * decrease or increase likelihood of selection; values like -100 or 100
     * should result in a ban or exclusive selection of the relevant token.
     * 
     * @return the logitBias value.
     */
    @Generated
    public Map<String, Integer> getLogitBias() {
        return this.logitBias;
    }

    /**
     * Set the logitBias property: Modify the likelihood of specified tokens appearing in the completion.
     * 
     * Accepts a JSON object that maps tokens (specified by their token ID in the
     * tokenizer) to an associated bias value from -100 to 100. Mathematically,
     * the bias is added to the logits generated by the model prior to sampling.
     * The exact effect will vary per model, but values between -1 and 1 should
     * decrease or increase likelihood of selection; values like -100 or 100
     * should result in a ban or exclusive selection of the relevant token.
     * 
     * @param logitBias the logitBias value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setLogitBias(Map<String, Integer> logitBias) {
        this.logitBias = logitBias;
        return this;
    }

    /**
     * Get the logprobs property: Whether to return log probabilities of the output tokens or not. If true,
     * returns the log probabilities of each output token returned in the
     * `content` of `message`.
     * 
     * @return the logprobs value.
     */
    @Generated
    public Boolean isLogprobs() {
        return this.logprobs;
    }

    /**
     * Set the logprobs property: Whether to return log probabilities of the output tokens or not. If true,
     * returns the log probabilities of each output token returned in the
     * `content` of `message`.
     * 
     * @param logprobs the logprobs value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setLogprobs(Boolean logprobs) {
        this.logprobs = logprobs;
        return this;
    }

    /**
     * Get the maxTokens property: The maximum number of tokens that can be generated in the chat completion.
     * This value can be used to control costs for text generated via API.
     * 
     * This value is now deprecated in favor of `max_completion_tokens`, and is
     * not compatible with o1 series models.
     * 
     * @return the maxTokens value.
     */
    @Generated
    public Integer getMaxTokens() {
        return this.maxTokens;
    }

    /**
     * Set the maxTokens property: The maximum number of tokens that can be generated in the chat completion.
     * This value can be used to control costs for text generated via API.
     * 
     * This value is now deprecated in favor of `max_completion_tokens`, and is
     * not compatible with o1 series models.
     * 
     * @param maxTokens the maxTokens value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setMaxTokens(Integer maxTokens) {
        this.maxTokens = maxTokens;
        return this;
    }

    /**
     * Get the n property: How many chat completion choices to generate for each input message. Note that you will be
     * charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
     * 
     * @return the n value.
     */
    @Generated
    public Integer getN() {
        return this.n;
    }

    /**
     * Set the n property: How many chat completion choices to generate for each input message. Note that you will be
     * charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
     * 
     * @param n the n value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setN(Integer n) {
        this.n = n;
        return this;
    }

    /**
     * Get the prediction property: Configuration for a predicted output, which can greatly improve
     * response times when large parts of the model response are known
     * ahead of time. This is most common when you are regenerating a
     * file with only minor changes to most of the content.
     * 
     * @return the prediction value.
     */
    @Generated
    public ChatOutputPrediction getPrediction() {
        return this.prediction;
    }

    /**
     * Set the prediction property: Configuration for a predicted output, which can greatly improve
     * response times when large parts of the model response are known
     * ahead of time. This is most common when you are regenerating a
     * file with only minor changes to most of the content.
     * 
     * @param prediction the prediction value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setPrediction(ChatOutputPrediction prediction) {
        this.prediction = prediction;
        return this;
    }

    /**
     * Get the seed property: This feature is in Beta.
     * If specified, our system will make a best effort to sample deterministically, such that repeated requests with
     * the same `seed` and parameters should return the same result.
     * Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor
     * changes in the backend.
     * 
     * @return the seed value.
     */
    @Generated
    public Long getSeed() {
        return this.seed;
    }

    /**
     * Set the seed property: This feature is in Beta.
     * If specified, our system will make a best effort to sample deterministically, such that repeated requests with
     * the same `seed` and parameters should return the same result.
     * Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor
     * changes in the backend.
     * 
     * @param seed the seed value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setSeed(Long seed) {
        this.seed = seed;
        return this;
    }

    /**
     * Get the streamOptions property: The stream_options property.
     * 
     * @return the streamOptions value.
     */
    @Generated
    public ChatCompletionStreamOptions getStreamOptions() {
        return this.streamOptions;
    }

    /**
     * Set the streamOptions property: The stream_options property.
     * 
     * @param streamOptions the streamOptions value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setStreamOptions(ChatCompletionStreamOptions streamOptions) {
        this.streamOptions = streamOptions;
        return this;
    }

    /**
     * Get the tools property: A list of tools the model may call. Currently, only functions are supported as a tool.
     * Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are
     * supported.
     * 
     * @return the tools value.
     */
    @Generated
    public List<ChatCompletionTool> getTools() {
        return this.tools;
    }

    /**
     * Set the tools property: A list of tools the model may call. Currently, only functions are supported as a tool.
     * Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are
     * supported.
     * 
     * @param tools the tools value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setTools(List<ChatCompletionTool> tools) {
        this.tools = tools;
        return this;
    }

    /**
     * Get the toolChoice property: The tool_choice property.
     * 
     * @return the toolChoice value.
     */
    @Generated
    public BinaryData getToolChoice() {
        return this.toolChoice;
    }

    /**
     * Set the toolChoice property: The tool_choice property.
     * 
     * @param toolChoice the toolChoice value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setToolChoice(BinaryData toolChoice) {
        this.toolChoice = toolChoice;
        return this;
    }

    /**
     * Get the parallelToolCalls property: The parallel_tool_calls property.
     * 
     * @return the parallelToolCalls value.
     */
    @Generated
    public Boolean isParallelToolCalls() {
        return this.parallelToolCalls;
    }

    /**
     * Set the parallelToolCalls property: The parallel_tool_calls property.
     * 
     * @param parallelToolCalls the parallelToolCalls value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setParallelToolCalls(Boolean parallelToolCalls) {
        this.parallelToolCalls = parallelToolCalls;
        return this;
    }

    /**
     * Get the functionCall property: Deprecated in favor of `tool_choice`.
     * 
     * Controls which (if any) function is called by the model.
     * 
     * `none` means the model will not call a function and instead generates a
     * message.
     * 
     * `auto` means the model can pick between generating a message or calling a
     * function.
     * 
     * Specifying a particular function via `{"name": "my_function"}` forces the
     * model to call that function.
     * 
     * `none` is the default when no functions are present. `auto` is the default
     * if functions are present.
     * 
     * @return the functionCall value.
     */
    @Generated
    public BinaryData getFunctionCall() {
        return this.functionCall;
    }

    /**
     * Set the functionCall property: Deprecated in favor of `tool_choice`.
     * 
     * Controls which (if any) function is called by the model.
     * 
     * `none` means the model will not call a function and instead generates a
     * message.
     * 
     * `auto` means the model can pick between generating a message or calling a
     * function.
     * 
     * Specifying a particular function via `{"name": "my_function"}` forces the
     * model to call that function.
     * 
     * `none` is the default when no functions are present. `auto` is the default
     * if functions are present.
     * 
     * @param functionCall the functionCall value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setFunctionCall(BinaryData functionCall) {
        this.functionCall = functionCall;
        return this;
    }

    /**
     * Get the functions property: Deprecated in favor of `tools`.
     * 
     * A list of functions the model may generate JSON inputs for.
     * 
     * @return the functions value.
     */
    @Generated
    public List<ChatCompletionFunctions> getFunctions() {
        return this.functions;
    }

    /**
     * Set the functions property: Deprecated in favor of `tools`.
     * 
     * A list of functions the model may generate JSON inputs for.
     * 
     * @param functions the functions value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setFunctions(List<ChatCompletionFunctions> functions) {
        this.functions = functions;
        return this;
    }

    /**
     * Get the dataSources property: The data sources to use for the On Your Data feature, exclusive to Azure OpenAI.
     * 
     * @return the dataSources value.
     */
    @Generated
    public List<AzureChatDataSource> getDataSources() {
        return this.dataSources;
    }

    /**
     * Set the dataSources property: The data sources to use for the On Your Data feature, exclusive to Azure OpenAI.
     * 
     * @param dataSources the dataSources value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setDataSources(List<AzureChatDataSource> dataSources) {
        this.dataSources = dataSources;
        return this;
    }

    /**
     * Get the userSecurityContext property: The user_security_context property.
     * 
     * @return the userSecurityContext value.
     */
    @Generated
    public AzureUserSecurityContext getUserSecurityContext() {
        return this.userSecurityContext;
    }

    /**
     * Set the userSecurityContext property: The user_security_context property.
     * 
     * @param userSecurityContext the userSecurityContext value to set.
     * @return the AzureCreateChatCompletionRequest object itself.
     */
    @Generated
    public AzureCreateChatCompletionRequest setUserSecurityContext(AzureUserSecurityContext userSecurityContext) {
        this.userSecurityContext = userSecurityContext;
        return this;
    }
}
