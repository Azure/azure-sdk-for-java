// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * The AzureChatDataSourceUsernameAndPasswordAuthenticationOptions model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class AzureChatDataSourceUsernameAndPasswordAuthenticationOptions
    extends AzureChatDataSourceAuthenticationOptions {
    /*
     * The type property.
     */
    @Metadata(generated = true)
    private String type = "username_and_password";

    /*
     * The username property.
     */
    @Metadata(generated = true)
    private final String username;

    /*
     * The password property.
     */
    @Metadata(generated = true)
    private final String password;

    /**
     * Creates an instance of AzureChatDataSourceUsernameAndPasswordAuthenticationOptions class.
     * 
     * @param username the username value to set.
     * @param password the password value to set.
     */
    @Metadata(generated = true)
    public AzureChatDataSourceUsernameAndPasswordAuthenticationOptions(String username, String password) {
        this.username = username;
        this.password = password;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Metadata(generated = true)
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the username property: The username property.
     * 
     * @return the username value.
     */
    @Metadata(generated = true)
    public String getUsername() {
        return this.username;
    }

    /**
     * Get the password property: The password property.
     * 
     * @return the password value.
     */
    @Metadata(generated = true)
    public String getPassword() {
        return this.password;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("username", this.username);
        jsonWriter.writeStringField("password", this.password);
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureChatDataSourceUsernameAndPasswordAuthenticationOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureChatDataSourceUsernameAndPasswordAuthenticationOptions if the JsonReader was pointing
     * to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the
     * AzureChatDataSourceUsernameAndPasswordAuthenticationOptions.
     */
    @Metadata(generated = true)
    public static AzureChatDataSourceUsernameAndPasswordAuthenticationOptions fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            String username = null;
            String password = null;
            String type = "username_and_password";
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("username".equals(fieldName)) {
                    username = reader.getString();
                } else if ("password".equals(fieldName)) {
                    password = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AzureChatDataSourceUsernameAndPasswordAuthenticationOptions deserializedAzureChatDataSourceUsernameAndPasswordAuthenticationOptions
                = new AzureChatDataSourceUsernameAndPasswordAuthenticationOptions(username, password);
            deserializedAzureChatDataSourceUsernameAndPasswordAuthenticationOptions.type = type;

            return deserializedAzureChatDataSourceUsernameAndPasswordAuthenticationOptions;
        });
    }
}
