// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * Approximate location parameters for the search.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class WebSearchLocation implements JsonSerializable<WebSearchLocation> {
    /*
     * The two-letter
     * [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user,
     * e.g. `US`.
     */
    @Metadata(generated = true)
    private String country;

    /*
     * Free text input for the region of the user, e.g. `California`.
     */
    @Metadata(generated = true)
    private String region;

    /*
     * Free text input for the city of the user, e.g. `San Francisco`.
     */
    @Metadata(generated = true)
    private String city;

    /*
     * The [IANA timezone](https://timeapi.io/documentation/iana-timezones)
     * of the user, e.g. `America/Los_Angeles`.
     */
    @Metadata(generated = true)
    private String timezone;

    /**
     * Creates an instance of WebSearchLocation class.
     */
    @Metadata(generated = true)
    public WebSearchLocation() {
    }

    /**
     * Get the country property: The two-letter
     * [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user,
     * e.g. `US`.
     * 
     * @return the country value.
     */
    @Metadata(generated = true)
    public String getCountry() {
        return this.country;
    }

    /**
     * Set the country property: The two-letter
     * [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user,
     * e.g. `US`.
     * 
     * @param country the country value to set.
     * @return the WebSearchLocation object itself.
     */
    @Metadata(generated = true)
    public WebSearchLocation setCountry(String country) {
        this.country = country;
        return this;
    }

    /**
     * Get the region property: Free text input for the region of the user, e.g. `California`.
     * 
     * @return the region value.
     */
    @Metadata(generated = true)
    public String getRegion() {
        return this.region;
    }

    /**
     * Set the region property: Free text input for the region of the user, e.g. `California`.
     * 
     * @param region the region value to set.
     * @return the WebSearchLocation object itself.
     */
    @Metadata(generated = true)
    public WebSearchLocation setRegion(String region) {
        this.region = region;
        return this;
    }

    /**
     * Get the city property: Free text input for the city of the user, e.g. `San Francisco`.
     * 
     * @return the city value.
     */
    @Metadata(generated = true)
    public String getCity() {
        return this.city;
    }

    /**
     * Set the city property: Free text input for the city of the user, e.g. `San Francisco`.
     * 
     * @param city the city value to set.
     * @return the WebSearchLocation object itself.
     */
    @Metadata(generated = true)
    public WebSearchLocation setCity(String city) {
        this.city = city;
        return this;
    }

    /**
     * Get the timezone property: The [IANA timezone](https://timeapi.io/documentation/iana-timezones)
     * of the user, e.g. `America/Los_Angeles`.
     * 
     * @return the timezone value.
     */
    @Metadata(generated = true)
    public String getTimezone() {
        return this.timezone;
    }

    /**
     * Set the timezone property: The [IANA timezone](https://timeapi.io/documentation/iana-timezones)
     * of the user, e.g. `America/Los_Angeles`.
     * 
     * @param timezone the timezone value to set.
     * @return the WebSearchLocation object itself.
     */
    @Metadata(generated = true)
    public WebSearchLocation setTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("country", this.country);
        jsonWriter.writeStringField("region", this.region);
        jsonWriter.writeStringField("city", this.city);
        jsonWriter.writeStringField("timezone", this.timezone);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebSearchLocation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebSearchLocation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WebSearchLocation.
     */
    @Metadata(generated = true)
    public static WebSearchLocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebSearchLocation deserializedWebSearchLocation = new WebSearchLocation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("country".equals(fieldName)) {
                    deserializedWebSearchLocation.country = reader.getString();
                } else if ("region".equals(fieldName)) {
                    deserializedWebSearchLocation.region = reader.getString();
                } else if ("city".equals(fieldName)) {
                    deserializedWebSearchLocation.city = reader.getString();
                } else if ("timezone".equals(fieldName)) {
                    deserializedWebSearchLocation.timezone = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebSearchLocation;
        });
    }
}
