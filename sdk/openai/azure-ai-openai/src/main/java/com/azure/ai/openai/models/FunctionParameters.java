// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.ai.openai.models;

import java.util.List;
import java.util.Map;

/**
 * The is the parameter for creating the FunctionDefinition.
 *
 * To create a FunctionParametes, use the {@link FunctionParametersBuilder}
 * Builder class like follows.
 *
 * <pre>
 * {@code
 * FunctionProperties location = new FunctionPropertiesBuilder()
 *         .type("string")
 *         .description("The city and state, e.g. San Francisco, CA")
 *         .build();
 * FunctionProperties unit = new FunctionPropertiesBuilder()
 *         .type("string")
 *         .enumString(Arrays.asList("celsius", "fahrenheit"))
 *         .build();
 * Map<String, FunctionProperties> properties = Map.of("location", location, "unit", unit);
 * FunctionParameters functionParameters = new FunctionParametersBuilder()
 *         .type("object")
 *         .properties(properties)
 *         .required(Arrays.asList("location", "unit"))
 *         .build();
 * }
 * </pre>
 *
 * @see FunctionProperties
 * @see FunctionDefinition
 */
public final class FunctionParameters {
    /* Type of Parameter */
    private final String type;
    /* Properties of the parameter */
    private final Map<String, FunctionProperties> properties;
    /* Required properties */
    private final List<String> required;

    /**
     * Can't creates an instance of FunctionParameters class from constructor.
     * Instance will be created using FunctionParametersBuilder.
     *
     * @param builder FunctionParametersBuilder
     */
    private FunctionParameters(FunctionParametersBuilder builder) {
        this.type = builder.type;
        this.properties = builder.properties;
        this.required = builder.required;
    }

    /**
     * Get type of parameter.
     *
     * @return Type of parameter.
     */
    public String getType() {
        return type;
    }

    /**
     * Get properties of parameter.
     *
     * @return All properties for parameter.
     */
    public Map<String, FunctionProperties> getProperties() {
        return properties;
    }

    /**
     * Get required properties.
     *
     * @return List of required properties.
     */
    public List<String> getRequired() {
        return required;
    }

    @Override
    public String toString() {
        return "FunctionsParameters [type=" + type + ", properties=" + properties + ", required=" + required + "]";
    }

    /**
     * Builder class for FunctionParameters.
     */
    public static class FunctionParametersBuilder {
        private String type;
        private Map<String, FunctionProperties> properties;
        private List<String> required;

        /**
         * Set type of parameter.
         *
         * @param type Type of parameter. 
         * @return FunctionParametersBuilder instance
         */
        public FunctionParametersBuilder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Set properties of parameter.
         *
         * @param properties Properties of parameter.
         * @return FunctionParametersBuilder instance
         */
        public FunctionParametersBuilder properties(Map<String, FunctionProperties> properties) {
            this.properties = properties;
            return this;
        }

        /**
         * Set required properties.
         *
         * @param required List of required properties.
         * @return FunctionParametersBuilder instance
         */
        public FunctionParametersBuilder required(List<String> required) {
            this.required = required;
            return this;
        }

        /**
         * Creates an instance of FunctionParameters class.
         *
         * @return FunctionParameters instance
         */
        public FunctionParameters build() {
            return new FunctionParameters(this);
        }
    }
}
