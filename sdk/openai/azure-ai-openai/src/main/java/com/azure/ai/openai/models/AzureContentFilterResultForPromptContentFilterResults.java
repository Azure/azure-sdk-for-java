// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The AzureContentFilterResultForPromptContentFilterResults model.
 */
@Immutable
public final class AzureContentFilterResultForPromptContentFilterResults
    implements JsonSerializable<AzureContentFilterResultForPromptContentFilterResults> {
    /*
     * A content filter category for language related to anatomical organs and genitals, romantic relationships, acts
     * portrayed in erotic or affectionate terms, pregnancy, physical sexual acts, including those portrayed as an
     * assault or a forced sexual violent act against one's will, prostitution, pornography, and abuse.
     */
    @Generated
    private AzureContentFilterSeverityResult sexual;

    /*
     * A content filter category that can refer to any content that attacks or uses pejorative or discriminatory
     * language with reference to a person or identity group based on certain differentiating attributes of these groups
     * including but not limited to race, ethnicity, nationality, gender identity and expression, sexual orientation,
     * religion, immigration status, ability status, personal appearance, and body size.
     */
    @Generated
    private AzureContentFilterSeverityResult hate;

    /*
     * A content filter category for language related to physical actions intended to hurt, injure, damage, or kill
     * someone or something; describes weapons, guns and related entities, such as manufactures, associations,
     * legislation, and so on.
     */
    @Generated
    private AzureContentFilterSeverityResult violence;

    /*
     * A content filter category that describes language related to physical actions intended to purposely hurt, injure,
     * damage one's body or kill oneself.
     */
    @Generated
    private AzureContentFilterSeverityResult selfHarm;

    /*
     * A detection result that identifies whether crude, vulgar, or otherwise objection language is present in the
     * content.
     */
    @Generated
    private AzureContentFilterDetectionResult profanity;

    /*
     * A collection of binary filtering outcomes for configured custom blocklists.
     */
    @Generated
    private AzureContentFilterBlocklistResult customBlocklists;

    /*
     * If present, details about an error that prevented content filtering from completing its evaluation.
     */
    @Generated
    private AzureContentFilterResultForChoiceError error;

    /*
     * A detection result that describes user prompt injection attacks, where malicious users deliberately exploit
     * system vulnerabilities to elicit unauthorized behavior from the LLM. This could lead to inappropriate content
     * generation or violations of system-imposed restrictions.
     */
    @Generated
    private final AzureContentFilterDetectionResult jailbreak;

    /*
     * A detection result that describes attacks on systems powered by Generative AI models that can happen every time
     * an application processes information that wasn’t directly authored by either the developer of the application or
     * the user.
     */
    @Generated
    private final AzureContentFilterDetectionResult indirectAttack;

    /**
     * Creates an instance of AzureContentFilterResultForPromptContentFilterResults class.
     * 
     * @param jailbreak the jailbreak value to set.
     * @param indirectAttack the indirectAttack value to set.
     */
    @Generated
    private AzureContentFilterResultForPromptContentFilterResults(AzureContentFilterDetectionResult jailbreak,
        AzureContentFilterDetectionResult indirectAttack) {
        this.jailbreak = jailbreak;
        this.indirectAttack = indirectAttack;
    }

    /**
     * Get the sexual property: A content filter category for language related to anatomical organs and genitals,
     * romantic relationships, acts
     * portrayed in erotic or affectionate terms, pregnancy, physical sexual acts, including those portrayed as an
     * assault or a forced sexual violent act against one's will, prostitution, pornography, and abuse.
     * 
     * @return the sexual value.
     */
    @Generated
    public AzureContentFilterSeverityResult getSexual() {
        return this.sexual;
    }

    /**
     * Get the hate property: A content filter category that can refer to any content that attacks or uses pejorative or
     * discriminatory
     * language with reference to a person or identity group based on certain differentiating attributes of these groups
     * including but not limited to race, ethnicity, nationality, gender identity and expression, sexual orientation,
     * religion, immigration status, ability status, personal appearance, and body size.
     * 
     * @return the hate value.
     */
    @Generated
    public AzureContentFilterSeverityResult getHate() {
        return this.hate;
    }

    /**
     * Get the violence property: A content filter category for language related to physical actions intended to hurt,
     * injure, damage, or kill
     * someone or something; describes weapons, guns and related entities, such as manufactures, associations,
     * legislation, and so on.
     * 
     * @return the violence value.
     */
    @Generated
    public AzureContentFilterSeverityResult getViolence() {
        return this.violence;
    }

    /**
     * Get the selfHarm property: A content filter category that describes language related to physical actions intended
     * to purposely hurt, injure,
     * damage one's body or kill oneself.
     * 
     * @return the selfHarm value.
     */
    @Generated
    public AzureContentFilterSeverityResult getSelfHarm() {
        return this.selfHarm;
    }

    /**
     * Get the profanity property: A detection result that identifies whether crude, vulgar, or otherwise objection
     * language is present in the
     * content.
     * 
     * @return the profanity value.
     */
    @Generated
    public AzureContentFilterDetectionResult getProfanity() {
        return this.profanity;
    }

    /**
     * Get the customBlocklists property: A collection of binary filtering outcomes for configured custom blocklists.
     * 
     * @return the customBlocklists value.
     */
    @Generated
    public AzureContentFilterBlocklistResult getCustomBlocklists() {
        return this.customBlocklists;
    }

    /**
     * Get the error property: If present, details about an error that prevented content filtering from completing its
     * evaluation.
     * 
     * @return the error value.
     */
    @Generated
    public AzureContentFilterResultForChoiceError getError() {
        return this.error;
    }

    /**
     * Get the jailbreak property: A detection result that describes user prompt injection attacks, where malicious
     * users deliberately exploit
     * system vulnerabilities to elicit unauthorized behavior from the LLM. This could lead to inappropriate content
     * generation or violations of system-imposed restrictions.
     * 
     * @return the jailbreak value.
     */
    @Generated
    public AzureContentFilterDetectionResult getJailbreak() {
        return this.jailbreak;
    }

    /**
     * Get the indirectAttack property: A detection result that describes attacks on systems powered by Generative AI
     * models that can happen every time
     * an application processes information that wasn’t directly authored by either the developer of the application or
     * the user.
     * 
     * @return the indirectAttack value.
     */
    @Generated
    public AzureContentFilterDetectionResult getIndirectAttack() {
        return this.indirectAttack;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("jailbreak", this.jailbreak);
        jsonWriter.writeJsonField("indirect_attack", this.indirectAttack);
        jsonWriter.writeJsonField("sexual", this.sexual);
        jsonWriter.writeJsonField("hate", this.hate);
        jsonWriter.writeJsonField("violence", this.violence);
        jsonWriter.writeJsonField("self_harm", this.selfHarm);
        jsonWriter.writeJsonField("profanity", this.profanity);
        jsonWriter.writeJsonField("custom_blocklists", this.customBlocklists);
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureContentFilterResultForPromptContentFilterResults from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureContentFilterResultForPromptContentFilterResults if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureContentFilterResultForPromptContentFilterResults.
     */
    @Generated
    public static AzureContentFilterResultForPromptContentFilterResults fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            AzureContentFilterDetectionResult jailbreak = null;
            AzureContentFilterDetectionResult indirectAttack = null;
            AzureContentFilterSeverityResult sexual = null;
            AzureContentFilterSeverityResult hate = null;
            AzureContentFilterSeverityResult violence = null;
            AzureContentFilterSeverityResult selfHarm = null;
            AzureContentFilterDetectionResult profanity = null;
            AzureContentFilterBlocklistResult customBlocklists = null;
            AzureContentFilterResultForChoiceError error = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jailbreak".equals(fieldName)) {
                    jailbreak = AzureContentFilterDetectionResult.fromJson(reader);
                } else if ("indirect_attack".equals(fieldName)) {
                    indirectAttack = AzureContentFilterDetectionResult.fromJson(reader);
                } else if ("sexual".equals(fieldName)) {
                    sexual = AzureContentFilterSeverityResult.fromJson(reader);
                } else if ("hate".equals(fieldName)) {
                    hate = AzureContentFilterSeverityResult.fromJson(reader);
                } else if ("violence".equals(fieldName)) {
                    violence = AzureContentFilterSeverityResult.fromJson(reader);
                } else if ("self_harm".equals(fieldName)) {
                    selfHarm = AzureContentFilterSeverityResult.fromJson(reader);
                } else if ("profanity".equals(fieldName)) {
                    profanity = AzureContentFilterDetectionResult.fromJson(reader);
                } else if ("custom_blocklists".equals(fieldName)) {
                    customBlocklists = AzureContentFilterBlocklistResult.fromJson(reader);
                } else if ("error".equals(fieldName)) {
                    error = AzureContentFilterResultForChoiceError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            AzureContentFilterResultForPromptContentFilterResults deserializedAzureContentFilterResultForPromptContentFilterResults
                = new AzureContentFilterResultForPromptContentFilterResults(jailbreak, indirectAttack);
            deserializedAzureContentFilterResultForPromptContentFilterResults.sexual = sexual;
            deserializedAzureContentFilterResultForPromptContentFilterResults.hate = hate;
            deserializedAzureContentFilterResultForPromptContentFilterResults.violence = violence;
            deserializedAzureContentFilterResultForPromptContentFilterResults.selfHarm = selfHarm;
            deserializedAzureContentFilterResultForPromptContentFilterResults.profanity = profanity;
            deserializedAzureContentFilterResultForPromptContentFilterResults.customBlocklists = customBlocklists;
            deserializedAzureContentFilterResultForPromptContentFilterResults.error = error;

            return deserializedAzureContentFilterResultForPromptContentFilterResults;
        });
    }
}
