// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.implementation;

import com.azure.ai.openai.AzureOpenAIServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in AzureAudioTranslations.
 */
public final class AzureAudioTranslationsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AzureAudioTranslationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureOpenAIClientImpl client;

    /**
     * Initializes an instance of AzureAudioTranslationsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    AzureAudioTranslationsImpl(AzureOpenAIClientImpl client) {
        this.service = RestProxy.create(AzureAudioTranslationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public AzureOpenAIServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for AzureOpenAIClientAzureAudioTranslations to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}/openai")
    @ServiceInterface(name = "AzureOpenAIClientAzu")
    public interface AzureAudioTranslationsService {
        // @Multipart not supported by RestProxy
        @Post("/deployments/{deployment_id}/audio/translations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> translationsCreate(@HostParam("endpoint") String endpoint,
            @PathParam("deployment_id") String deploymentId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("content-type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("multipart/form-data") BinaryData request, RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Post("/deployments/{deployment_id}/audio/translations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> translationsCreateSync(@HostParam("endpoint") String endpoint,
            @PathParam("deployment_id") String deploymentId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("content-type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("multipart/form-data") BinaryData request, RequestOptions requestOptions, Context context);
    }

    /**
     * Gets English language transcribed text and associated metadata from provided spoken audio data.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param deploymentId Deployment ID of the model to use with this operation.
     * @param accept The accept parameter.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return english language transcribed text and associated metadata from provided spoken audio data along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> translationsCreateWithResponseAsync(String deploymentId, String accept,
        BinaryData request, RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        return FluxUtil.withContext(context -> service.translationsCreate(this.client.getEndpoint(), deploymentId,
            this.client.getServiceVersion().getVersion(), contentType, accept, request, requestOptions, context));
    }

    /**
     * Gets English language transcribed text and associated metadata from provided spoken audio data.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * String
     * }
     * </pre>
     * 
     * @param deploymentId Deployment ID of the model to use with this operation.
     * @param accept The accept parameter.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return english language transcribed text and associated metadata from provided spoken audio data along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> translationsCreateWithResponse(String deploymentId, String accept, BinaryData request,
        RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        return service.translationsCreateSync(this.client.getEndpoint(), deploymentId,
            this.client.getServiceVersion().getVersion(), contentType, accept, request, requestOptions, Context.NONE);
    }
}
