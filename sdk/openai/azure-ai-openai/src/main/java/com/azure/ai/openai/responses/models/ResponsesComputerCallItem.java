// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.responses.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ResponsesComputerCallItem model.
 */
@Fluent
public final class ResponsesComputerCallItem extends ResponsesItem {

    /*
     * The type property.
     */
    @Generated
    private ResponsesItemType type = ResponsesItemType.COMPUTER_CALL;

    /*
     * The call_id property.
     */
    @Generated
    private final String callId;

    /*
     * The action property.
     */
    @Generated
    private final ResponsesComputerCallItemAction action;

    /**
     * Creates an instance of ResponsesComputerCallItem class.
     *
     * @param id the id value to set.
     * @param callId the callId value to set.
     * @param action the action value to set.
     */
    @Generated
    public ResponsesComputerCallItem(String id, String callId, ResponsesComputerCallItemAction action) {
        super(id);
        this.callId = callId;
        this.action = action;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ResponsesItemType getType() {
        return this.type;
    }

    /**
     * Get the callId property: The call_id property.
     *
     * @return the callId value.
     */
    @Generated
    public String getCallId() {
        return this.callId;
    }

    /**
     * Get the action property: The action property.
     *
     * @return the action value.
     */
    @Generated
    public ResponsesComputerCallItemAction getAction() {
        return this.action;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeStringField("call_id", this.callId);
        jsonWriter.writeJsonField("action", this.action);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeArrayField("pending_safety_checks", this.pendingSafetyChecks,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponsesComputerCallItem from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponsesComputerCallItem if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResponsesComputerCallItem.
     */
    @Generated
    public static ResponsesComputerCallItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String callId = null;
            ResponsesComputerCallItemAction action = null;
            ResponsesItemType type = ResponsesItemType.COMPUTER_CALL;
            List<ResponsesComputerCallSafetyCheck> pendingSafetyChecks = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("call_id".equals(fieldName)) {
                    callId = reader.getString();
                } else if ("action".equals(fieldName)) {
                    action = ResponsesComputerCallItemAction.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    type = ResponsesItemType.fromString(reader.getString());
                } else if ("pending_safety_checks".equals(fieldName)) {
                    pendingSafetyChecks
                        = reader.readArray(reader1 -> ResponsesComputerCallSafetyCheck.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            ResponsesComputerCallItem deserializedResponsesComputerCallItem
                = new ResponsesComputerCallItem(id, callId, action);
            deserializedResponsesComputerCallItem.type = type;
            deserializedResponsesComputerCallItem.pendingSafetyChecks = pendingSafetyChecks;
            return deserializedResponsesComputerCallItem;
        });
    }

    /*
     * The pending_safety_checks property.
     */
    @Generated
    private List<ResponsesComputerCallSafetyCheck> pendingSafetyChecks;

    /**
     * Get the pendingSafetyChecks property: The pending_safety_checks property.
     *
     * @return the pendingSafetyChecks value.
     */
    @Generated
    public List<ResponsesComputerCallSafetyCheck> getPendingSafetyChecks() {
        return this.pendingSafetyChecks;
    }

    /**
     * Set the pendingSafetyChecks property: The pending_safety_checks property.
     *
     * @param pendingSafetyChecks the pendingSafetyChecks value to set.
     * @return the ResponsesComputerCallItem object itself.
     */
    @Generated
    public ResponsesComputerCallItem
        setPendingSafetyChecks(List<ResponsesComputerCallSafetyCheck> pendingSafetyChecks) {
        this.pendingSafetyChecks = pendingSafetyChecks;
        return this;
    }
}
