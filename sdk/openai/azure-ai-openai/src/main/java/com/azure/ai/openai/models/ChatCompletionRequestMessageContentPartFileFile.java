// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ChatCompletionRequestMessageContentPartFileFile model.
 */
@Fluent
public final class ChatCompletionRequestMessageContentPartFileFile
    implements JsonSerializable<ChatCompletionRequestMessageContentPartFileFile> {

    /*
     * The name of the file, used when passing the file to the model as a
     * string.
     */
    @Generated
    private String filename;

    /*
     * The base64 encoded file data, used when passing the file to the model
     * as a string.
     */
    @Generated
    private String fileData;

    /*
     * The ID of an uploaded file to use as input.
     */
    @Generated
    private String fileId;

    /**
     * Creates an instance of ChatCompletionRequestMessageContentPartFileFile class.
     */
    @Generated
    public ChatCompletionRequestMessageContentPartFileFile() {
    }

    /**
     * Get the filename property: The name of the file, used when passing the file to the model as a
     * string.
     *
     * @return the filename value.
     */
    @Generated
    public String getFilename() {
        return this.filename;
    }

    /**
     * Set the filename property: The name of the file, used when passing the file to the model as a
     * string.
     *
     * @param filename the filename value to set.
     * @return the ChatCompletionRequestMessageContentPartFileFile object itself.
     */
    @Generated
    public ChatCompletionRequestMessageContentPartFileFile setFilename(String filename) {
        this.filename = filename;
        return this;
    }

    /**
     * Get the fileData property: The base64 encoded file data, used when passing the file to the model
     * as a string.
     *
     * @return the fileData value.
     */
    @Generated
    public String getFileData() {
        return this.fileData;
    }

    /**
     * Set the fileData property: The base64 encoded file data, used when passing the file to the model
     * as a string.
     *
     * @param fileData the fileData value to set.
     * @return the ChatCompletionRequestMessageContentPartFileFile object itself.
     */
    @Generated
    public ChatCompletionRequestMessageContentPartFileFile setFileData(String fileData) {
        this.fileData = fileData;
        return this;
    }

    /**
     * Get the fileId property: The ID of an uploaded file to use as input.
     *
     * @return the fileId value.
     */
    @Generated
    public String getFileId() {
        return this.fileId;
    }

    /**
     * Set the fileId property: The ID of an uploaded file to use as input.
     *
     * @param fileId the fileId value to set.
     * @return the ChatCompletionRequestMessageContentPartFileFile object itself.
     */
    @Generated
    public ChatCompletionRequestMessageContentPartFileFile setFileId(String fileId) {
        this.fileId = fileId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("filename", this.filename);
        jsonWriter.writeStringField("file_data", this.fileData);
        jsonWriter.writeStringField("file_id", this.fileId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatCompletionRequestMessageContentPartFileFile from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatCompletionRequestMessageContentPartFileFile if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ChatCompletionRequestMessageContentPartFileFile.
     */
    @Generated
    public static ChatCompletionRequestMessageContentPartFileFile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChatCompletionRequestMessageContentPartFileFile deserializedChatCompletionRequestMessageContentPartFileFile
                = new ChatCompletionRequestMessageContentPartFileFile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("filename".equals(fieldName)) {
                    deserializedChatCompletionRequestMessageContentPartFileFile.filename = reader.getString();
                } else if ("file_data".equals(fieldName)) {
                    deserializedChatCompletionRequestMessageContentPartFileFile.fileData = reader.getString();
                } else if ("file_id".equals(fieldName)) {
                    deserializedChatCompletionRequestMessageContentPartFileFile.fileId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedChatCompletionRequestMessageContentPartFileFile;
        });
    }
}
