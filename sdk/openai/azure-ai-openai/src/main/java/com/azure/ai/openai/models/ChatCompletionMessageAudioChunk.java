// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;

/**
 * The ChatCompletionMessageAudioChunk model.
 */
@Immutable
public final class ChatCompletionMessageAudioChunk {
    /*
     * The id property.
     */
    @Generated
    @JsonProperty(value = "id")
    private String id;

    /*
     * The transcript property.
     */
    @Generated
    @JsonProperty(value = "transcript")
    private String transcript;

    /*
     * The data property.
     */
    @Generated
    @JsonProperty(value = "data")
    private byte[] data;

    /*
     * The expires_at property.
     */
    @Generated
    @JsonProperty(value = "expires_at")
    private Long expiresAt;

    /**
     * Creates an instance of ChatCompletionMessageAudioChunk class.
     */
    @Generated
    private ChatCompletionMessageAudioChunk() {
    }

    /**
     * Get the id property: The id property.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the transcript property: The transcript property.
     * 
     * @return the transcript value.
     */
    @Generated
    public String getTranscript() {
        return this.transcript;
    }

    /**
     * Get the data property: The data property.
     * 
     * @return the data value.
     */
    @Generated
    public byte[] getData() {
        return CoreUtils.clone(this.data);
    }

    /**
     * Get the expiresAt property: The expires_at property.
     * 
     * @return the expiresAt value.
     */
    @Generated
    public OffsetDateTime getExpiresAt() {
        if (this.expiresAt == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.expiresAt), ZoneOffset.UTC);
    }
}
