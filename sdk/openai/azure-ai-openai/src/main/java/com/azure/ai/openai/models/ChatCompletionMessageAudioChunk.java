// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;

/**
 * The ChatCompletionMessageAudioChunk model.
 */
@Immutable
public final class ChatCompletionMessageAudioChunk implements JsonSerializable<ChatCompletionMessageAudioChunk> {

    /*
     * The id property.
     */
    @Generated
    private String id;

    /*
     * The transcript property.
     */
    @Generated
    private String transcript;

    /*
     * The data property.
     */
    @Generated
    private byte[] data;

    /*
     * The expires_at property.
     */
    @Generated
    private Long expiresAt;

    /**
     * Creates an instance of ChatCompletionMessageAudioChunk class.
     */
    @Generated
    private ChatCompletionMessageAudioChunk() {
    }

    /**
     * Get the id property: The id property.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the transcript property: The transcript property.
     *
     * @return the transcript value.
     */
    @Generated
    public String getTranscript() {
        return this.transcript;
    }

    /**
     * Get the data property: The data property.
     *
     * @return the data value.
     */
    @Generated
    public byte[] getData() {
        return CoreUtils.clone(this.data);
    }

    /**
     * Get the expiresAt property: The expires_at property.
     *
     * @return the expiresAt value.
     */
    @Generated
    public OffsetDateTime getExpiresAt() {
        if (this.expiresAt == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.expiresAt), ZoneOffset.UTC);
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("transcript", this.transcript);
        jsonWriter.writeBinaryField("data", this.data);
        jsonWriter.writeNumberField("expires_at", this.expiresAt);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatCompletionMessageAudioChunk from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatCompletionMessageAudioChunk if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ChatCompletionMessageAudioChunk.
     */
    @Generated
    public static ChatCompletionMessageAudioChunk fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChatCompletionMessageAudioChunk deserializedChatCompletionMessageAudioChunk
                = new ChatCompletionMessageAudioChunk();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    deserializedChatCompletionMessageAudioChunk.id = reader.getString();
                } else if ("transcript".equals(fieldName)) {
                    deserializedChatCompletionMessageAudioChunk.transcript = reader.getString();
                } else if ("data".equals(fieldName)) {
                    deserializedChatCompletionMessageAudioChunk.data = reader.getBinary();
                } else if ("expires_at".equals(fieldName)) {
                    deserializedChatCompletionMessageAudioChunk.expiresAt = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedChatCompletionMessageAudioChunk;
        });
    }
}
