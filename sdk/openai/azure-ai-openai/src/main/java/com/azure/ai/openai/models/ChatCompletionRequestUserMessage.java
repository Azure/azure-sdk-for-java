// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Messages sent by an end user, containing prompts or additional context
 * information.
 */
@Fluent
public final class ChatCompletionRequestUserMessage extends ChatCompletionRequestMessage {

    /*
     * The role of the author of this message.
     */
    @Generated
    private String role = "user";

    /*
     * The contents of the user message.
     */
    @Generated
    private final BinaryData content;

    /*
     * An optional name for the participant. Provides the model information to differentiate between participants of the
     * same role.
     */
    @Generated
    private String name;

    /**
     * Creates an instance of ChatCompletionRequestUserMessage class.
     *
     * @param content the content value to set.
     */
    @Generated
    public ChatCompletionRequestUserMessage(BinaryData content) {
        this.content = content;
    }

    /**
     * Get the role property: The role of the author of this message.
     *
     * @return the role value.
     */
    @Generated
    @Override
    public String getRole() {
        return this.role;
    }

    /**
     * Get the content property: The contents of the user message.
     *
     * @return the content value.
     */
    @Generated
    public BinaryData getContent() {
        return this.content;
    }

    /**
     * Get the name property: An optional name for the participant. Provides the model information to differentiate
     * between participants of the same role.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: An optional name for the participant. Provides the model information to differentiate
     * between participants of the same role.
     *
     * @param name the name value to set.
     * @return the ChatCompletionRequestUserMessage object itself.
     */
    @Generated
    public ChatCompletionRequestUserMessage setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeFieldName("content");
        this.content.writeTo(jsonWriter);
        jsonWriter.writeStringField("role", this.role);
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatCompletionRequestUserMessage from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatCompletionRequestUserMessage if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatCompletionRequestUserMessage.
     */
    @Generated
    public static ChatCompletionRequestUserMessage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BinaryData content = null;
            String role = "user";
            String name = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("content".equals(fieldName)) {
                    content = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("role".equals(fieldName)) {
                    role = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ChatCompletionRequestUserMessage deserializedChatCompletionRequestUserMessage
                = new ChatCompletionRequestUserMessage(content);
            deserializedChatCompletionRequestUserMessage.role = role;
            deserializedChatCompletionRequestUserMessage.name = name;
            return deserializedChatCompletionRequestUserMessage;
        });
    }
}
