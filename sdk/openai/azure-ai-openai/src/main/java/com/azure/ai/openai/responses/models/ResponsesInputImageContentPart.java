// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.responses.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ResponsesInputImageContentPart model.
 */
@Immutable
public final class ResponsesInputImageContentPart extends ResponsesContentPart {

    /*
     * The type property.
     */
    @Generated
    private ResponsesContentType type = ResponsesContentType.INPUT_IMAGE;

    /*
     * The asset_pointer property.
     */
    @Generated
    private final String assetPointer;

    /*
     * The image_detail property.
     */
    @Generated
    private final ResponsesInputImageContentPartImageDetail imageDetail;

    /**
     * Creates an instance of ResponsesInputImageContentPart class.
     *
     * @param assetPointer the assetPointer value to set.
     * @param imageDetail the imageDetail value to set.
     */
    @Generated
    public ResponsesInputImageContentPart(String assetPointer, ResponsesInputImageContentPartImageDetail imageDetail) {
        this.assetPointer = assetPointer;
        this.imageDetail = imageDetail;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ResponsesContentType getType() {
        return this.type;
    }

    /**
     * Get the assetPointer property: The asset_pointer property.
     *
     * @return the assetPointer value.
     */
    @Generated
    public String getAssetPointer() {
        return this.assetPointer;
    }

    /**
     * Get the imageDetail property: The image_detail property.
     *
     * @return the imageDetail value.
     */
    @Generated
    public ResponsesInputImageContentPartImageDetail getImageDetail() {
        return this.imageDetail;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("asset_pointer", this.assetPointer);
        jsonWriter.writeStringField("image_detail", this.imageDetail == null ? null : this.imageDetail.toString());
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponsesInputImageContentPart from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponsesInputImageContentPart if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResponsesInputImageContentPart.
     */
    @Generated
    public static ResponsesInputImageContentPart fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String assetPointer = null;
            ResponsesInputImageContentPartImageDetail imageDetail = null;
            ResponsesContentType type = ResponsesContentType.INPUT_IMAGE;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("asset_pointer".equals(fieldName)) {
                    assetPointer = reader.getString();
                } else if ("image_detail".equals(fieldName)) {
                    imageDetail = ResponsesInputImageContentPartImageDetail.fromString(reader.getString());
                } else if ("type".equals(fieldName)) {
                    type = ResponsesContentType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ResponsesInputImageContentPart deserializedResponsesInputImageContentPart
                = new ResponsesInputImageContentPart(assetPointer, imageDetail);
            deserializedResponsesInputImageContentPart.type = type;
            return deserializedResponsesInputImageContentPart;
        });
    }
}
