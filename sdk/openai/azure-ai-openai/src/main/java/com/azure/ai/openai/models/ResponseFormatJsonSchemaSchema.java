// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import io.clientcore.core.util.binarydata.BinaryData;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * The schema for the response format, described as a JSON Schema object.
 * Learn how to build JSON schemas [here](https://json-schema.org/).
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class ResponseFormatJsonSchemaSchema implements JsonSerializable<ResponseFormatJsonSchemaSchema> {
    /*
     * The schema for the response format, described as a JSON Schema object.
     * Learn how to build JSON schemas [here](https://json-schema.org/).
     */
    @Metadata(generated = true)
    private Map<String, BinaryData> additionalProperties;

    /**
     * Creates an instance of ResponseFormatJsonSchemaSchema class.
     */
    @Metadata(generated = true)
    public ResponseFormatJsonSchemaSchema() {
    }

    /**
     * Get the additionalProperties property: The schema for the response format, described as a JSON Schema object.
     * Learn how to build JSON schemas [here](https://json-schema.org/).
     * 
     * @return the additionalProperties value.
     */
    @Metadata(generated = true)
    public Map<String, BinaryData> getAdditionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: The schema for the response format, described as a JSON Schema object.
     * Learn how to build JSON schemas [here](https://json-schema.org/).
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the ResponseFormatJsonSchemaSchema object itself.
     */
    @Metadata(generated = true)
    public ResponseFormatJsonSchemaSchema setAdditionalProperties(Map<String, BinaryData> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (additionalProperties != null) {
            for (Map.Entry<String, BinaryData> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeFieldName(additionalProperty.getKey());
                if (additionalProperty.getValue() == null) {
                    jsonWriter.writeNull();
                } else {
                    additionalProperty.getValue().writeTo(jsonWriter);
                }
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponseFormatJsonSchemaSchema from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponseFormatJsonSchemaSchema if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResponseFormatJsonSchemaSchema.
     */
    @Metadata(generated = true)
    public static ResponseFormatJsonSchemaSchema fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResponseFormatJsonSchemaSchema deserializedResponseFormatJsonSchemaSchema
                = new ResponseFormatJsonSchemaSchema();
            Map<String, BinaryData> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if (additionalProperties == null) {
                    additionalProperties = new LinkedHashMap<>();
                }

                additionalProperties.put(fieldName,
                    reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
            }
            deserializedResponseFormatJsonSchemaSchema.additionalProperties = additionalProperties;

            return deserializedResponseFormatJsonSchemaSchema;
        });
    }
}
