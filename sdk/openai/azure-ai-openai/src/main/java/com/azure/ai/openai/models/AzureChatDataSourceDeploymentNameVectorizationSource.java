// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a vectorization source that makes internal service calls against an Azure OpenAI embedding model
 * deployment. In contrast with the endpoint-based vectorization source, a deployment-name-based vectorization source
 * must be part of the same Azure OpenAI resource but can be used even in private networks.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class AzureChatDataSourceDeploymentNameVectorizationSource extends AzureChatDataSourceVectorizationSource {
    /*
     * The differentiating identifier for the concrete vectorization source.
     */
    @Metadata(generated = true)
    private String type = "deployment_name";

    /*
     * The embedding model deployment to use for vectorization. This deployment must exist within the same Azure OpenAI
     * resource as the model deployment being used for chat completions.
     */
    @Metadata(generated = true)
    private final String deploymentName;

    /*
     * The number of dimensions to request on embeddings.
     * Only supported in 'text-embedding-3' and later models.
     */
    @Metadata(generated = true)
    private Integer dimensions;

    /**
     * Creates an instance of AzureChatDataSourceDeploymentNameVectorizationSource class.
     * 
     * @param deploymentName the deploymentName value to set.
     */
    @Metadata(generated = true)
    public AzureChatDataSourceDeploymentNameVectorizationSource(String deploymentName) {
        this.deploymentName = deploymentName;
    }

    /**
     * Get the type property: The differentiating identifier for the concrete vectorization source.
     * 
     * @return the type value.
     */
    @Metadata(generated = true)
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the deploymentName property: The embedding model deployment to use for vectorization. This deployment must
     * exist within the same Azure OpenAI
     * resource as the model deployment being used for chat completions.
     * 
     * @return the deploymentName value.
     */
    @Metadata(generated = true)
    public String getDeploymentName() {
        return this.deploymentName;
    }

    /**
     * Get the dimensions property: The number of dimensions to request on embeddings.
     * Only supported in 'text-embedding-3' and later models.
     * 
     * @return the dimensions value.
     */
    @Metadata(generated = true)
    public Integer getDimensions() {
        return this.dimensions;
    }

    /**
     * Set the dimensions property: The number of dimensions to request on embeddings.
     * Only supported in 'text-embedding-3' and later models.
     * 
     * @param dimensions the dimensions value to set.
     * @return the AzureChatDataSourceDeploymentNameVectorizationSource object itself.
     */
    @Metadata(generated = true)
    public AzureChatDataSourceDeploymentNameVectorizationSource setDimensions(Integer dimensions) {
        this.dimensions = dimensions;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deployment_name", this.deploymentName);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeNumberField("dimensions", this.dimensions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureChatDataSourceDeploymentNameVectorizationSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureChatDataSourceDeploymentNameVectorizationSource if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureChatDataSourceDeploymentNameVectorizationSource.
     */
    @Metadata(generated = true)
    public static AzureChatDataSourceDeploymentNameVectorizationSource fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            String deploymentName = null;
            String type = "deployment_name";
            Integer dimensions = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deployment_name".equals(fieldName)) {
                    deploymentName = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("dimensions".equals(fieldName)) {
                    dimensions = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            AzureChatDataSourceDeploymentNameVectorizationSource deserializedAzureChatDataSourceDeploymentNameVectorizationSource
                = new AzureChatDataSourceDeploymentNameVectorizationSource(deploymentName);
            deserializedAzureChatDataSourceDeploymentNameVectorizationSource.type = type;
            deserializedAzureChatDataSourceDeploymentNameVectorizationSource.dimensions = dimensions;

            return deserializedAzureChatDataSourceDeploymentNameVectorizationSource;
        });
    }
}
