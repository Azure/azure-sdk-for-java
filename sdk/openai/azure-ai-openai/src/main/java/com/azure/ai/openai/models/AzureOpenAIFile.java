// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;

/**
 * The AzureOpenAIFile model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class AzureOpenAIFile implements JsonSerializable<AzureOpenAIFile> {
    /*
     * The file identifier, which can be referenced in the API endpoints.
     */
    @Metadata(generated = true)
    private final String id;

    /*
     * The size of the file, in bytes.
     */
    @Metadata(generated = true)
    private final Integer bytes;

    /*
     * The Unix timestamp (in seconds) for when the file was created.
     */
    @Metadata(generated = true)
    private final long createdAt;

    /*
     * The Unix timestamp (in seconds) for when the file will expire.
     */
    @Metadata(generated = true)
    private Long expiresAt;

    /*
     * The name of the file.
     */
    @Metadata(generated = true)
    private final String filename;

    /*
     * The object type, which is always `file`.
     */
    @Metadata(generated = true)
    private final String object = "file";

    /*
     * The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`,
     * `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.
     */
    @Metadata(generated = true)
    private final AzureOpenAIFilePurpose purpose;

    /*
     * Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on
     * `fine_tuning.job`.
     */
    @Metadata(generated = true)
    private String statusDetails;

    /*
     * The status property.
     */
    @Metadata(generated = true)
    private final AzureOpenAIFileStatus status;

    /**
     * Creates an instance of AzureOpenAIFile class.
     * 
     * @param id the id value to set.
     * @param bytes the bytes value to set.
     * @param createdAt the createdAt value to set.
     * @param filename the filename value to set.
     * @param purpose the purpose value to set.
     * @param status the status value to set.
     */
    @Metadata(generated = true)
    private AzureOpenAIFile(String id, Integer bytes, OffsetDateTime createdAt, String filename,
        AzureOpenAIFilePurpose purpose, AzureOpenAIFileStatus status) {
        this.id = id;
        this.bytes = bytes;
        if (createdAt == null) {
            this.createdAt = 0L;
        } else {
            this.createdAt = createdAt.toEpochSecond();
        }
        this.filename = filename;
        this.purpose = purpose;
        this.status = status;
    }

    /**
     * Get the id property: The file identifier, which can be referenced in the API endpoints.
     * 
     * @return the id value.
     */
    @Metadata(generated = true)
    public String getId() {
        return this.id;
    }

    /**
     * Get the bytes property: The size of the file, in bytes.
     * 
     * @return the bytes value.
     */
    @Metadata(generated = true)
    public Integer getBytes() {
        return this.bytes;
    }

    /**
     * Get the createdAt property: The Unix timestamp (in seconds) for when the file was created.
     * 
     * @return the createdAt value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getCreatedAt() {
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.createdAt), ZoneOffset.UTC);
    }

    /**
     * Get the expiresAt property: The Unix timestamp (in seconds) for when the file will expire.
     * 
     * @return the expiresAt value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getExpiresAt() {
        if (this.expiresAt == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.expiresAt), ZoneOffset.UTC);
    }

    /**
     * Get the filename property: The name of the file.
     * 
     * @return the filename value.
     */
    @Metadata(generated = true)
    public String getFilename() {
        return this.filename;
    }

    /**
     * Get the object property: The object type, which is always `file`.
     * 
     * @return the object value.
     */
    @Metadata(generated = true)
    public String getObject() {
        return this.object;
    }

    /**
     * Get the purpose property: The intended purpose of the file. Supported values are `assistants`,
     * `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.
     * 
     * @return the purpose value.
     */
    @Metadata(generated = true)
    public AzureOpenAIFilePurpose getPurpose() {
        return this.purpose;
    }

    /**
     * Get the statusDetails property: Deprecated. For details on why a fine-tuning training file failed validation, see
     * the `error` field on `fine_tuning.job`.
     * 
     * @return the statusDetails value.
     */
    @Metadata(generated = true)
    public String getStatusDetails() {
        return this.statusDetails;
    }

    /**
     * Get the status property: The status property.
     * 
     * @return the status value.
     */
    @Metadata(generated = true)
    public AzureOpenAIFileStatus getStatus() {
        return this.status;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeNumberField("bytes", this.bytes);
        jsonWriter.writeLongField("created_at", this.createdAt);
        jsonWriter.writeStringField("filename", this.filename);
        jsonWriter.writeStringField("object", this.object);
        jsonWriter.writeStringField("purpose", this.purpose == null ? null : this.purpose.toString());
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeNumberField("expires_at", this.expiresAt);
        jsonWriter.writeStringField("status_details", this.statusDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureOpenAIFile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureOpenAIFile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureOpenAIFile.
     */
    @Metadata(generated = true)
    public static AzureOpenAIFile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            Integer bytes = null;
            OffsetDateTime createdAt = null;
            String filename = null;
            AzureOpenAIFilePurpose purpose = null;
            AzureOpenAIFileStatus status = null;
            Long expiresAt = null;
            String statusDetails = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("bytes".equals(fieldName)) {
                    bytes = reader.getNullable(JsonReader::getInt);
                } else if ("created_at".equals(fieldName)) {
                    createdAt = OffsetDateTime.ofInstant(Instant.ofEpochSecond(reader.getLong()), ZoneOffset.UTC);
                } else if ("filename".equals(fieldName)) {
                    filename = reader.getString();
                } else if ("purpose".equals(fieldName)) {
                    purpose = AzureOpenAIFilePurpose.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    status = AzureOpenAIFileStatus.fromString(reader.getString());
                } else if ("expires_at".equals(fieldName)) {
                    expiresAt = reader.getNullable(JsonReader::getLong);
                } else if ("status_details".equals(fieldName)) {
                    statusDetails = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AzureOpenAIFile deserializedAzureOpenAIFile
                = new AzureOpenAIFile(id, bytes, createdAt, filename, purpose, status);
            deserializedAzureOpenAIFile.expiresAt = expiresAt;
            deserializedAzureOpenAIFile.statusDetails = statusDetails;

            return deserializedAzureOpenAIFile;
        });
    }
}
