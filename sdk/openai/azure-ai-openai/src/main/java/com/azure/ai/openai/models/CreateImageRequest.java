// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * The CreateImageRequest model.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class CreateImageRequest implements JsonSerializable<CreateImageRequest> {
    /*
     * A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000
     * characters for `dall-e-3`.
     */
    @Metadata(generated = true)
    private final String prompt;

    /*
     * The model to use for image generation.
     */
    @Metadata(generated = true)
    private CreateImageRequestModel model;

    /*
     * The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
     */
    @Metadata(generated = true)
    private Integer n;

    /*
     * The quality of the image that will be generated. `hd` creates images with finer details and greater consistency
     * across the image. This param is only supported for `dall-e-3`.
     */
    @Metadata(generated = true)
    private CreateImageRequestQuality quality;

    /*
     * The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid
     * for 60 minutes after the image has been generated.
     */
    @Metadata(generated = true)
    private CreateImageRequestResponseFormat responseFormat;

    /*
     * The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one
     * of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
     */
    @Metadata(generated = true)
    private CreateImageRequestSize size;

    /*
     * The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards
     * generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real
     * looking images. This param is only supported for `dall-e-3`.
     */
    @Metadata(generated = true)
    private CreateImageRequestStyle style;

    /*
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
     */
    @Metadata(generated = true)
    private String user;

    /**
     * Creates an instance of CreateImageRequest class.
     * 
     * @param prompt the prompt value to set.
     */
    @Metadata(generated = true)
    public CreateImageRequest(String prompt) {
        this.prompt = prompt;
    }

    /**
     * Get the prompt property: A text description of the desired image(s). The maximum length is 1000 characters for
     * `dall-e-2` and 4000 characters for `dall-e-3`.
     * 
     * @return the prompt value.
     */
    @Metadata(generated = true)
    public String getPrompt() {
        return this.prompt;
    }

    /**
     * Get the model property: The model to use for image generation.
     * 
     * @return the model value.
     */
    @Metadata(generated = true)
    public CreateImageRequestModel getModel() {
        return this.model;
    }

    /**
     * Set the model property: The model to use for image generation.
     * 
     * @param model the model value to set.
     * @return the CreateImageRequest object itself.
     */
    @Metadata(generated = true)
    public CreateImageRequest setModel(CreateImageRequestModel model) {
        this.model = model;
        return this;
    }

    /**
     * Get the n property: The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is
     * supported.
     * 
     * @return the n value.
     */
    @Metadata(generated = true)
    public Integer getN() {
        return this.n;
    }

    /**
     * Set the n property: The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is
     * supported.
     * 
     * @param n the n value to set.
     * @return the CreateImageRequest object itself.
     */
    @Metadata(generated = true)
    public CreateImageRequest setN(Integer n) {
        this.n = n;
        return this;
    }

    /**
     * Get the quality property: The quality of the image that will be generated. `hd` creates images with finer details
     * and greater consistency across the image. This param is only supported for `dall-e-3`.
     * 
     * @return the quality value.
     */
    @Metadata(generated = true)
    public CreateImageRequestQuality getQuality() {
        return this.quality;
    }

    /**
     * Set the quality property: The quality of the image that will be generated. `hd` creates images with finer details
     * and greater consistency across the image. This param is only supported for `dall-e-3`.
     * 
     * @param quality the quality value to set.
     * @return the CreateImageRequest object itself.
     */
    @Metadata(generated = true)
    public CreateImageRequest setQuality(CreateImageRequestQuality quality) {
        this.quality = quality;
        return this;
    }

    /**
     * Get the responseFormat property: The format in which the generated images are returned. Must be one of `url` or
     * `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
     * 
     * @return the responseFormat value.
     */
    @Metadata(generated = true)
    public CreateImageRequestResponseFormat getResponseFormat() {
        return this.responseFormat;
    }

    /**
     * Set the responseFormat property: The format in which the generated images are returned. Must be one of `url` or
     * `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
     * 
     * @param responseFormat the responseFormat value to set.
     * @return the CreateImageRequest object itself.
     */
    @Metadata(generated = true)
    public CreateImageRequest setResponseFormat(CreateImageRequestResponseFormat responseFormat) {
        this.responseFormat = responseFormat;
        return this;
    }

    /**
     * Get the size property: The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for
     * `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
     * 
     * @return the size value.
     */
    @Metadata(generated = true)
    public CreateImageRequestSize getSize() {
        return this.size;
    }

    /**
     * Set the size property: The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for
     * `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
     * 
     * @param size the size value to set.
     * @return the CreateImageRequest object itself.
     */
    @Metadata(generated = true)
    public CreateImageRequest setSize(CreateImageRequestSize size) {
        this.size = size;
        return this;
    }

    /**
     * Get the style property: The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the
     * model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more
     * natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
     * 
     * @return the style value.
     */
    @Metadata(generated = true)
    public CreateImageRequestStyle getStyle() {
        return this.style;
    }

    /**
     * Set the style property: The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the
     * model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more
     * natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
     * 
     * @param style the style value to set.
     * @return the CreateImageRequest object itself.
     */
    @Metadata(generated = true)
    public CreateImageRequest setStyle(CreateImageRequestStyle style) {
        this.style = style;
        return this;
    }

    /**
     * Get the user property: A unique identifier representing your end-user, which can help OpenAI to monitor and
     * detect abuse.
     * 
     * @return the user value.
     */
    @Metadata(generated = true)
    public String getUser() {
        return this.user;
    }

    /**
     * Set the user property: A unique identifier representing your end-user, which can help OpenAI to monitor and
     * detect abuse.
     * 
     * @param user the user value to set.
     * @return the CreateImageRequest object itself.
     */
    @Metadata(generated = true)
    public CreateImageRequest setUser(String user) {
        this.user = user;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("prompt", this.prompt);
        jsonWriter.writeStringField("model", this.model == null ? null : this.model.getValue());
        jsonWriter.writeNumberField("n", this.n);
        jsonWriter.writeStringField("quality", this.quality == null ? null : this.quality.toString());
        jsonWriter.writeStringField("response_format",
            this.responseFormat == null ? null : this.responseFormat.toString());
        jsonWriter.writeStringField("size", this.size == null ? null : this.size.toString());
        jsonWriter.writeStringField("style", this.style == null ? null : this.style.toString());
        jsonWriter.writeStringField("user", this.user);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateImageRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateImageRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateImageRequest.
     */
    @Metadata(generated = true)
    public static CreateImageRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String prompt = null;
            CreateImageRequestModel model = null;
            Integer n = null;
            CreateImageRequestQuality quality = null;
            CreateImageRequestResponseFormat responseFormat = null;
            CreateImageRequestSize size = null;
            CreateImageRequestStyle style = null;
            String user = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("prompt".equals(fieldName)) {
                    prompt = reader.getString();
                } else if ("model".equals(fieldName)) {
                    model = CreateImageRequestModel.fromValue(reader.getString());
                } else if ("n".equals(fieldName)) {
                    n = reader.getNullable(JsonReader::getInt);
                } else if ("quality".equals(fieldName)) {
                    quality = CreateImageRequestQuality.fromString(reader.getString());
                } else if ("response_format".equals(fieldName)) {
                    responseFormat = CreateImageRequestResponseFormat.fromString(reader.getString());
                } else if ("size".equals(fieldName)) {
                    size = CreateImageRequestSize.fromString(reader.getString());
                } else if ("style".equals(fieldName)) {
                    style = CreateImageRequestStyle.fromString(reader.getString());
                } else if ("user".equals(fieldName)) {
                    user = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            CreateImageRequest deserializedCreateImageRequest = new CreateImageRequest(prompt);
            deserializedCreateImageRequest.model = model;
            deserializedCreateImageRequest.n = n;
            deserializedCreateImageRequest.quality = quality;
            deserializedCreateImageRequest.responseFormat = responseFormat;
            deserializedCreateImageRequest.size = size;
            deserializedCreateImageRequest.style = style;
            deserializedCreateImageRequest.user = user;

            return deserializedCreateImageRequest;
        });
    }
}
