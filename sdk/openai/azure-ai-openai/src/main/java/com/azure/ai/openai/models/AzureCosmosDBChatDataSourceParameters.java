// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The AzureCosmosDBChatDataSourceParameters model.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class AzureCosmosDBChatDataSourceParameters
    implements JsonSerializable<AzureCosmosDBChatDataSourceParameters> {
    /*
     * The configured number of documents to feature in the query.
     */
    @Metadata(generated = true)
    private Integer topNDocuments;

    /*
     * Whether queries should be restricted to use of the indexed data.
     */
    @Metadata(generated = true)
    private Boolean inScope;

    /*
     * The configured strictness of the search relevance filtering.
     * Higher strictness will increase precision but lower recall of the answer.
     */
    @Metadata(generated = true)
    private Integer strictness;

    /*
     * The maximum number of rewritten queries that should be sent to the search provider for a single user message.
     * By default, the system will make an automatic determination.
     */
    @Metadata(generated = true)
    private Integer maxSearchQueries;

    /*
     * If set to true, the system will allow partial search results to be used and the request will fail if all
     * partial queries fail. If not specified or specified as false, the request will fail if any search query fails.
     */
    @Metadata(generated = true)
    private Boolean allowPartialResult;

    /*
     * The output context properties to include on the response.
     * By default, citations and intent will be requested.
     */
    @Metadata(generated = true)
    private List<AzureSearchChatDataSourceParametersIncludeContext> includeContexts;

    /*
     * The container_name property.
     */
    @Metadata(generated = true)
    private final String containerName;

    /*
     * The database_name property.
     */
    @Metadata(generated = true)
    private final String databaseName;

    /*
     * The embedding_dependency property.
     */
    @Metadata(generated = true)
    private final AzureChatDataSourceVectorizationSource embeddingDependency;

    /*
     * The index_name property.
     */
    @Metadata(generated = true)
    private final String indexName;

    /*
     * The authentication property.
     */
    @Metadata(generated = true)
    private final AzureChatDataSourceConnectionStringAuthenticationOptions authentication;

    /*
     * The fields_mapping property.
     */
    @Metadata(generated = true)
    private final AzureCosmosDBChatDataSourceParametersFieldsMapping fieldsMapping;

    /**
     * Creates an instance of AzureCosmosDBChatDataSourceParameters class.
     * 
     * @param containerName the containerName value to set.
     * @param databaseName the databaseName value to set.
     * @param embeddingDependency the embeddingDependency value to set.
     * @param indexName the indexName value to set.
     * @param authentication the authentication value to set.
     * @param fieldsMapping the fieldsMapping value to set.
     */
    @Metadata(generated = true)
    public AzureCosmosDBChatDataSourceParameters(String containerName, String databaseName,
        AzureChatDataSourceVectorizationSource embeddingDependency, String indexName,
        AzureChatDataSourceConnectionStringAuthenticationOptions authentication,
        AzureCosmosDBChatDataSourceParametersFieldsMapping fieldsMapping) {
        this.containerName = containerName;
        this.databaseName = databaseName;
        this.embeddingDependency = embeddingDependency;
        this.indexName = indexName;
        this.authentication = authentication;
        this.fieldsMapping = fieldsMapping;
    }

    /**
     * Get the topNDocuments property: The configured number of documents to feature in the query.
     * 
     * @return the topNDocuments value.
     */
    @Metadata(generated = true)
    public Integer getTopNDocuments() {
        return this.topNDocuments;
    }

    /**
     * Set the topNDocuments property: The configured number of documents to feature in the query.
     * 
     * @param topNDocuments the topNDocuments value to set.
     * @return the AzureCosmosDBChatDataSourceParameters object itself.
     */
    @Metadata(generated = true)
    public AzureCosmosDBChatDataSourceParameters setTopNDocuments(Integer topNDocuments) {
        this.topNDocuments = topNDocuments;
        return this;
    }

    /**
     * Get the inScope property: Whether queries should be restricted to use of the indexed data.
     * 
     * @return the inScope value.
     */
    @Metadata(generated = true)
    public Boolean isInScope() {
        return this.inScope;
    }

    /**
     * Set the inScope property: Whether queries should be restricted to use of the indexed data.
     * 
     * @param inScope the inScope value to set.
     * @return the AzureCosmosDBChatDataSourceParameters object itself.
     */
    @Metadata(generated = true)
    public AzureCosmosDBChatDataSourceParameters setInScope(Boolean inScope) {
        this.inScope = inScope;
        return this;
    }

    /**
     * Get the strictness property: The configured strictness of the search relevance filtering.
     * Higher strictness will increase precision but lower recall of the answer.
     * 
     * @return the strictness value.
     */
    @Metadata(generated = true)
    public Integer getStrictness() {
        return this.strictness;
    }

    /**
     * Set the strictness property: The configured strictness of the search relevance filtering.
     * Higher strictness will increase precision but lower recall of the answer.
     * 
     * @param strictness the strictness value to set.
     * @return the AzureCosmosDBChatDataSourceParameters object itself.
     */
    @Metadata(generated = true)
    public AzureCosmosDBChatDataSourceParameters setStrictness(Integer strictness) {
        this.strictness = strictness;
        return this;
    }

    /**
     * Get the maxSearchQueries property: The maximum number of rewritten queries that should be sent to the search
     * provider for a single user message.
     * By default, the system will make an automatic determination.
     * 
     * @return the maxSearchQueries value.
     */
    @Metadata(generated = true)
    public Integer getMaxSearchQueries() {
        return this.maxSearchQueries;
    }

    /**
     * Set the maxSearchQueries property: The maximum number of rewritten queries that should be sent to the search
     * provider for a single user message.
     * By default, the system will make an automatic determination.
     * 
     * @param maxSearchQueries the maxSearchQueries value to set.
     * @return the AzureCosmosDBChatDataSourceParameters object itself.
     */
    @Metadata(generated = true)
    public AzureCosmosDBChatDataSourceParameters setMaxSearchQueries(Integer maxSearchQueries) {
        this.maxSearchQueries = maxSearchQueries;
        return this;
    }

    /**
     * Get the allowPartialResult property: If set to true, the system will allow partial search results to be used and
     * the request will fail if all
     * partial queries fail. If not specified or specified as false, the request will fail if any search query fails.
     * 
     * @return the allowPartialResult value.
     */
    @Metadata(generated = true)
    public Boolean isAllowPartialResult() {
        return this.allowPartialResult;
    }

    /**
     * Set the allowPartialResult property: If set to true, the system will allow partial search results to be used and
     * the request will fail if all
     * partial queries fail. If not specified or specified as false, the request will fail if any search query fails.
     * 
     * @param allowPartialResult the allowPartialResult value to set.
     * @return the AzureCosmosDBChatDataSourceParameters object itself.
     */
    @Metadata(generated = true)
    public AzureCosmosDBChatDataSourceParameters setAllowPartialResult(Boolean allowPartialResult) {
        this.allowPartialResult = allowPartialResult;
        return this;
    }

    /**
     * Get the includeContexts property: The output context properties to include on the response.
     * By default, citations and intent will be requested.
     * 
     * @return the includeContexts value.
     */
    @Metadata(generated = true)
    public List<AzureSearchChatDataSourceParametersIncludeContext> getIncludeContexts() {
        return this.includeContexts;
    }

    /**
     * Set the includeContexts property: The output context properties to include on the response.
     * By default, citations and intent will be requested.
     * 
     * @param includeContexts the includeContexts value to set.
     * @return the AzureCosmosDBChatDataSourceParameters object itself.
     */
    @Metadata(generated = true)
    public AzureCosmosDBChatDataSourceParameters
        setIncludeContexts(List<AzureSearchChatDataSourceParametersIncludeContext> includeContexts) {
        this.includeContexts = includeContexts;
        return this;
    }

    /**
     * Get the containerName property: The container_name property.
     * 
     * @return the containerName value.
     */
    @Metadata(generated = true)
    public String getContainerName() {
        return this.containerName;
    }

    /**
     * Get the databaseName property: The database_name property.
     * 
     * @return the databaseName value.
     */
    @Metadata(generated = true)
    public String getDatabaseName() {
        return this.databaseName;
    }

    /**
     * Get the embeddingDependency property: The embedding_dependency property.
     * 
     * @return the embeddingDependency value.
     */
    @Metadata(generated = true)
    public AzureChatDataSourceVectorizationSource getEmbeddingDependency() {
        return this.embeddingDependency;
    }

    /**
     * Get the indexName property: The index_name property.
     * 
     * @return the indexName value.
     */
    @Metadata(generated = true)
    public String getIndexName() {
        return this.indexName;
    }

    /**
     * Get the authentication property: The authentication property.
     * 
     * @return the authentication value.
     */
    @Metadata(generated = true)
    public AzureChatDataSourceConnectionStringAuthenticationOptions getAuthentication() {
        return this.authentication;
    }

    /**
     * Get the fieldsMapping property: The fields_mapping property.
     * 
     * @return the fieldsMapping value.
     */
    @Metadata(generated = true)
    public AzureCosmosDBChatDataSourceParametersFieldsMapping getFieldsMapping() {
        return this.fieldsMapping;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("container_name", this.containerName);
        jsonWriter.writeStringField("database_name", this.databaseName);
        jsonWriter.writeJsonField("embedding_dependency", this.embeddingDependency);
        jsonWriter.writeStringField("index_name", this.indexName);
        jsonWriter.writeJsonField("authentication", this.authentication);
        jsonWriter.writeJsonField("fields_mapping", this.fieldsMapping);
        jsonWriter.writeNumberField("top_n_documents", this.topNDocuments);
        jsonWriter.writeBooleanField("in_scope", this.inScope);
        jsonWriter.writeNumberField("strictness", this.strictness);
        jsonWriter.writeNumberField("max_search_queries", this.maxSearchQueries);
        jsonWriter.writeBooleanField("allow_partial_result", this.allowPartialResult);
        jsonWriter.writeArrayField("include_contexts", this.includeContexts,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureCosmosDBChatDataSourceParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureCosmosDBChatDataSourceParameters if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureCosmosDBChatDataSourceParameters.
     */
    @Metadata(generated = true)
    public static AzureCosmosDBChatDataSourceParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String containerName = null;
            String databaseName = null;
            AzureChatDataSourceVectorizationSource embeddingDependency = null;
            String indexName = null;
            AzureChatDataSourceConnectionStringAuthenticationOptions authentication = null;
            AzureCosmosDBChatDataSourceParametersFieldsMapping fieldsMapping = null;
            Integer topNDocuments = null;
            Boolean inScope = null;
            Integer strictness = null;
            Integer maxSearchQueries = null;
            Boolean allowPartialResult = null;
            List<AzureSearchChatDataSourceParametersIncludeContext> includeContexts = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("container_name".equals(fieldName)) {
                    containerName = reader.getString();
                } else if ("database_name".equals(fieldName)) {
                    databaseName = reader.getString();
                } else if ("embedding_dependency".equals(fieldName)) {
                    embeddingDependency = AzureChatDataSourceVectorizationSource.fromJson(reader);
                } else if ("index_name".equals(fieldName)) {
                    indexName = reader.getString();
                } else if ("authentication".equals(fieldName)) {
                    authentication = AzureChatDataSourceConnectionStringAuthenticationOptions.fromJson(reader);
                } else if ("fields_mapping".equals(fieldName)) {
                    fieldsMapping = AzureCosmosDBChatDataSourceParametersFieldsMapping.fromJson(reader);
                } else if ("top_n_documents".equals(fieldName)) {
                    topNDocuments = reader.getNullable(JsonReader::getInt);
                } else if ("in_scope".equals(fieldName)) {
                    inScope = reader.getNullable(JsonReader::getBoolean);
                } else if ("strictness".equals(fieldName)) {
                    strictness = reader.getNullable(JsonReader::getInt);
                } else if ("max_search_queries".equals(fieldName)) {
                    maxSearchQueries = reader.getNullable(JsonReader::getInt);
                } else if ("allow_partial_result".equals(fieldName)) {
                    allowPartialResult = reader.getNullable(JsonReader::getBoolean);
                } else if ("include_contexts".equals(fieldName)) {
                    includeContexts = reader.readArray(
                        reader1 -> AzureSearchChatDataSourceParametersIncludeContext.fromString(reader1.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            AzureCosmosDBChatDataSourceParameters deserializedAzureCosmosDBChatDataSourceParameters
                = new AzureCosmosDBChatDataSourceParameters(containerName, databaseName, embeddingDependency, indexName,
                    authentication, fieldsMapping);
            deserializedAzureCosmosDBChatDataSourceParameters.topNDocuments = topNDocuments;
            deserializedAzureCosmosDBChatDataSourceParameters.inScope = inScope;
            deserializedAzureCosmosDBChatDataSourceParameters.strictness = strictness;
            deserializedAzureCosmosDBChatDataSourceParameters.maxSearchQueries = maxSearchQueries;
            deserializedAzureCosmosDBChatDataSourceParameters.allowPartialResult = allowPartialResult;
            deserializedAzureCosmosDBChatDataSourceParameters.includeContexts = includeContexts;

            return deserializedAzureCosmosDBChatDataSourceParameters;
        });
    }
}
