// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a
 * score_threshold of 0.
 * 
 * See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for
 * more information.
 */
@Fluent
public final class FileSearchRankingOptions implements JsonSerializable<FileSearchRankingOptions> {
    /*
     * The ranker property.
     */
    @Generated
    private FileSearchRanker ranker;

    /*
     * The score threshold for the file search. All values must be a floating point number between 0 and 1.
     */
    @Generated
    private final double scoreThreshold;

    /**
     * Creates an instance of FileSearchRankingOptions class.
     * 
     * @param scoreThreshold the scoreThreshold value to set.
     */
    @Generated
    public FileSearchRankingOptions(double scoreThreshold) {
        this.scoreThreshold = scoreThreshold;
    }

    /**
     * Get the ranker property: The ranker property.
     * 
     * @return the ranker value.
     */
    @Generated
    public FileSearchRanker getRanker() {
        return this.ranker;
    }

    /**
     * Set the ranker property: The ranker property.
     * 
     * @param ranker the ranker value to set.
     * @return the FileSearchRankingOptions object itself.
     */
    @Generated
    public FileSearchRankingOptions setRanker(FileSearchRanker ranker) {
        this.ranker = ranker;
        return this;
    }

    /**
     * Get the scoreThreshold property: The score threshold for the file search. All values must be a floating point
     * number between 0 and 1.
     * 
     * @return the scoreThreshold value.
     */
    @Generated
    public double getScoreThreshold() {
        return this.scoreThreshold;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeDoubleField("score_threshold", this.scoreThreshold);
        jsonWriter.writeStringField("ranker", this.ranker == null ? null : this.ranker.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FileSearchRankingOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FileSearchRankingOptions if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FileSearchRankingOptions.
     */
    @Generated
    public static FileSearchRankingOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            double scoreThreshold = 0.0;
            FileSearchRanker ranker = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("score_threshold".equals(fieldName)) {
                    scoreThreshold = reader.getDouble();
                } else if ("ranker".equals(fieldName)) {
                    ranker = FileSearchRanker.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            FileSearchRankingOptions deserializedFileSearchRankingOptions
                = new FileSearchRankingOptions(scoreThreshold);
            deserializedFileSearchRankingOptions.ranker = ranker;

            return deserializedFileSearchRankingOptions;
        });
    }
}
