// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import io.clientcore.core.util.binarydata.BinaryData;
import java.io.IOException;

/**
 * Static predicted output content, such as the content of a text file that is
 * being regenerated.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class ChatOutputPredictionContent extends ChatOutputPrediction {
    /*
     * The type property.
     */
    @Metadata(generated = true)
    private ChatOutputPredictionType type = ChatOutputPredictionType.CONTENT;

    /*
     * The content that should be matched when generating a model response.
     * If generated tokens would match this content, the entire model response
     * can be returned much more quickly.
     */
    @Metadata(generated = true)
    private final BinaryData content;

    /**
     * Creates an instance of ChatOutputPredictionContent class.
     * 
     * @param content the content value to set.
     */
    @Metadata(generated = true)
    public ChatOutputPredictionContent(BinaryData content) {
        this.content = content;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Metadata(generated = true)
    @Override
    public ChatOutputPredictionType getType() {
        return this.type;
    }

    /**
     * Get the content property: The content that should be matched when generating a model response.
     * If generated tokens would match this content, the entire model response
     * can be returned much more quickly.
     * 
     * @return the content value.
     */
    @Metadata(generated = true)
    public BinaryData getContent() {
        return this.content;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeFieldName("content");
        this.content.writeTo(jsonWriter);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.getValue());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatOutputPredictionContent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatOutputPredictionContent if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatOutputPredictionContent.
     */
    @Metadata(generated = true)
    public static ChatOutputPredictionContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BinaryData content = null;
            ChatOutputPredictionType type = ChatOutputPredictionType.CONTENT;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("content".equals(fieldName)) {
                    content = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("type".equals(fieldName)) {
                    type = ChatOutputPredictionType.fromValue(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ChatOutputPredictionContent deserializedChatOutputPredictionContent
                = new ChatOutputPredictionContent(content);
            deserializedChatOutputPredictionContent.type = type;

            return deserializedChatOutputPredictionContent;
        });
    }
}
