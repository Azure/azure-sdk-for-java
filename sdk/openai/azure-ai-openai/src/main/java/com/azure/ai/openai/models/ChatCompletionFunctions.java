// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import io.clientcore.core.util.binarydata.BinaryData;
import java.io.IOException;

/**
 * The ChatCompletionFunctions model.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class ChatCompletionFunctions implements JsonSerializable<ChatCompletionFunctions> {
    /*
     * A description of what the function does, used by the model to choose when and how to call the function.
     */
    @Metadata(generated = true)
    private String description;

    /*
     * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum
     * length of 64.
     */
    @Metadata(generated = true)
    private final String name;

    /*
     * The parameters the functions accepts, described as a JSON Schema object.
     * See the [JSON Schema reference](https://json-schema.org/understanding-json-schema/)
     * for documentation about the format.
     * 
     * Omitting `parameters` defines a function with an empty parameter list.
     */
    @Metadata(generated = true)
    private BinaryData parameters;

    /**
     * Creates an instance of ChatCompletionFunctions class.
     * 
     * @param name the name value to set.
     */
    @Metadata(generated = true)
    public ChatCompletionFunctions(String name) {
        this.name = name;
    }

    /**
     * Get the description property: A description of what the function does, used by the model to choose when and how
     * to call the function.
     * 
     * @return the description value.
     */
    @Metadata(generated = true)
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: A description of what the function does, used by the model to choose when and how
     * to call the function.
     * 
     * @param description the description value to set.
     * @return the ChatCompletionFunctions object itself.
     */
    @Metadata(generated = true)
    public ChatCompletionFunctions setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the name property: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and
     * dashes, with a maximum length of 64.
     * 
     * @return the name value.
     */
    @Metadata(generated = true)
    public String getName() {
        return this.name;
    }

    /**
     * Get the parameters property: The parameters the functions accepts, described as a JSON Schema object.
     * See the [JSON Schema reference](https://json-schema.org/understanding-json-schema/)
     * for documentation about the format.
     * 
     * Omitting `parameters` defines a function with an empty parameter list.
     * 
     * @return the parameters value.
     */
    @Metadata(generated = true)
    public BinaryData getParameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: The parameters the functions accepts, described as a JSON Schema object.
     * See the [JSON Schema reference](https://json-schema.org/understanding-json-schema/)
     * for documentation about the format.
     * 
     * Omitting `parameters` defines a function with an empty parameter list.
     * 
     * @param parameters the parameters value to set.
     * @return the ChatCompletionFunctions object itself.
     */
    @Metadata(generated = true)
    public ChatCompletionFunctions setParameters(BinaryData parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("description", this.description);
        if (this.parameters != null) {
            jsonWriter.writeFieldName("parameters");
            this.parameters.writeTo(jsonWriter);
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatCompletionFunctions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatCompletionFunctions if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatCompletionFunctions.
     */
    @Metadata(generated = true)
    public static ChatCompletionFunctions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String description = null;
            BinaryData parameters = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("parameters".equals(fieldName)) {
                    parameters
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else {
                    reader.skipChildren();
                }
            }
            ChatCompletionFunctions deserializedChatCompletionFunctions = new ChatCompletionFunctions(name);
            deserializedChatCompletionFunctions.description = description;
            deserializedChatCompletionFunctions.parameters = parameters;

            return deserializedChatCompletionFunctions;
        });
    }
}
