// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai;

import com.azure.ai.openai.implementation.AzureVectorStoresImpl;
import com.azure.ai.openai.models.UpdateVectorStoreFileAttributesRequest;
import com.azure.ai.openai.models.VectorStoreFileObject;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the synchronous AzureOpenAIClient type.
 */
@ServiceClient(builder = AzureOpenAIClientBuilder.class)
public final class AzureVectorStoresClient {
    @Generated
    private final AzureVectorStoresImpl serviceClient;

    /**
     * Initializes an instance of AzureVectorStoresClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    AzureVectorStoresClient(AzureVectorStoresImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * The updateVectorStoreFileAttributes operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     attributes (Required): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     usage_bytes: int (Required)
     *     created_at: long (Required)
     *     vector_store_id: String (Required)
     *     status: String(in_progress/completed/cancelled/failed) (Required)
     *     last_error (Required): {
     *         code: String(server_error/unsupported_file/invalid_file) (Required)
     *         message: String (Required)
     *     }
     *     chunking_strategy: BinaryData (Optional)
     *     attributes (Optional): {
     *          (Optional): {
     *             String: BinaryData (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param vectorStoreId The vectorStoreId parameter.
     * @param fileId The fileId parameter.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of files attached to a vector store along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateVectorStoreFileAttributesWithResponse(String vectorStoreId, String fileId,
        BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.updateVectorStoreFileAttributesWithResponse(vectorStoreId, fileId, request,
            requestOptions);
    }

    /**
     * The updateVectorStoreFileAttributes operation.
     * 
     * @param vectorStoreId The vectorStoreId parameter.
     * @param fileId The fileId parameter.
     * @param request The request parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of files attached to a vector store.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VectorStoreFileObject updateVectorStoreFileAttributes(String vectorStoreId, String fileId,
        UpdateVectorStoreFileAttributesRequest request) {
        // Generated convenience method for updateVectorStoreFileAttributesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return updateVectorStoreFileAttributesWithResponse(vectorStoreId, fileId, BinaryData.fromObject(request),
            requestOptions).getValue().toObject(VectorStoreFileObject.class);
    }
}
