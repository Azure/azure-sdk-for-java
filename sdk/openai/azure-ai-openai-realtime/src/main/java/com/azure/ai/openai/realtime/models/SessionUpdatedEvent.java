// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.realtime.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Returned when a session is updated.
 */
@Immutable
public final class SessionUpdatedEvent extends RealtimeServerEvent {

    /*
     * The type property.
     */
    @Generated
    private RealtimeServerEventType type = RealtimeServerEventType.SESSION_UPDATED;

    /*
     * The updated session resource.
     */
    @Generated
    private final RealtimeResponseSession session;

    /**
     * Creates an instance of SessionUpdatedEvent class.
     *
     * @param eventId the eventId value to set.
     * @param session the session value to set.
     */
    @Generated
    private SessionUpdatedEvent(String eventId, RealtimeResponseSession session) {
        super(eventId);
        this.session = session;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public RealtimeServerEventType getType() {
        return this.type;
    }

    /**
     * Get the session property: The updated session resource.
     *
     * @return the session value.
     */
    @Generated
    public RealtimeResponseSession getSession() {
        return this.session;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeJsonField("session", this.session);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SessionUpdatedEvent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SessionUpdatedEvent if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SessionUpdatedEvent.
     */
    @Generated
    public static SessionUpdatedEvent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String eventId = null;
            RealtimeResponseSession session = null;
            RealtimeServerEventType type = RealtimeServerEventType.SESSION_UPDATED;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("event_id".equals(fieldName)) {
                    eventId = reader.getString();
                } else if ("session".equals(fieldName)) {
                    session = RealtimeResponseSession.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    type = RealtimeServerEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            SessionUpdatedEvent deserializedSessionUpdatedEvent = new SessionUpdatedEvent(eventId, session);
            deserializedSessionUpdatedEvent.type = type;
            return deserializedSessionUpdatedEvent;
        });
    }
}
