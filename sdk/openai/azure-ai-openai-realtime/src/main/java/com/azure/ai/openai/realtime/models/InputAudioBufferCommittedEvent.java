// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.realtime.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Returned when an input audio buffer is committed, either by the client or automatically in server VAD mode.
 */
@Immutable
public final class InputAudioBufferCommittedEvent extends RealtimeServerEvent {

    /*
     * The type property.
     */
    @Generated
    private RealtimeServerEventType type = RealtimeServerEventType.INPUT_AUDIO_BUFFER_COMMITTED;

    /*
     * The ID of the preceding item after which the new item will be inserted.
     */
    @Generated
    private final String previousItemId;

    /*
     * The ID of the user message item that will be created.
     */
    @Generated
    private final String itemId;

    /**
     * Creates an instance of InputAudioBufferCommittedEvent class.
     *
     * @param eventId the eventId value to set.
     * @param previousItemId the previousItemId value to set.
     * @param itemId the itemId value to set.
     */
    @Generated
    private InputAudioBufferCommittedEvent(String eventId, String previousItemId, String itemId) {
        super(eventId);
        this.previousItemId = previousItemId;
        this.itemId = itemId;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public RealtimeServerEventType getType() {
        return this.type;
    }

    /**
     * Get the previousItemId property: The ID of the preceding item after which the new item will be inserted.
     *
     * @return the previousItemId value.
     */
    @Generated
    public String getPreviousItemId() {
        return this.previousItemId;
    }

    /**
     * Get the itemId property: The ID of the user message item that will be created.
     *
     * @return the itemId value.
     */
    @Generated
    public String getItemId() {
        return this.itemId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeStringField("previous_item_id", this.previousItemId);
        jsonWriter.writeStringField("item_id", this.itemId);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InputAudioBufferCommittedEvent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of InputAudioBufferCommittedEvent if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InputAudioBufferCommittedEvent.
     */
    @Generated
    public static InputAudioBufferCommittedEvent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String eventId = null;
            String previousItemId = null;
            String itemId = null;
            RealtimeServerEventType type = RealtimeServerEventType.INPUT_AUDIO_BUFFER_COMMITTED;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("event_id".equals(fieldName)) {
                    eventId = reader.getString();
                } else if ("previous_item_id".equals(fieldName)) {
                    previousItemId = reader.getString();
                } else if ("item_id".equals(fieldName)) {
                    itemId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = RealtimeServerEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            InputAudioBufferCommittedEvent deserializedInputAudioBufferCommittedEvent
                = new InputAudioBufferCommittedEvent(eventId, previousItemId, itemId);
            deserializedInputAudioBufferCommittedEvent.type = type;
            return deserializedInputAudioBufferCommittedEvent;
        });
    }
}
