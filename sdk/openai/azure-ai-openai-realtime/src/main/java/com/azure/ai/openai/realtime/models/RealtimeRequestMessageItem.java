// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.realtime.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The RealtimeRequestMessageItem model.
 */
@Fluent
public class RealtimeRequestMessageItem extends RealtimeRequestItem {

    /*
     * The type property.
     */
    @Generated
    private RealtimeItemType type = RealtimeItemType.MESSAGE;

    /*
     * The role property.
     */
    @Generated
    private RealtimeMessageRole role = RealtimeMessageRole.fromString("message");

    /*
     * The status property.
     */
    @Generated
    private RealtimeItemStatus status;

    /**
     * Creates an instance of RealtimeRequestMessageItem class.
     */
    @Generated
    public RealtimeRequestMessageItem() {
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public RealtimeItemType getType() {
        return this.type;
    }

    /**
     * Get the role property: The role property.
     *
     * @return the role value.
     */
    @Generated
    public RealtimeMessageRole getRole() {
        return this.role;
    }

    /**
     * Get the status property: The status property.
     *
     * @return the status value.
     */
    @Generated
    public RealtimeItemStatus getStatus() {
        return this.status;
    }

    /**
     * Set the status property: The status property.
     *
     * @param status the status value to set.
     * @return the RealtimeRequestMessageItem object itself.
     */
    @Generated
    public RealtimeRequestMessageItem setStatus(RealtimeItemStatus status) {
        this.status = status;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public RealtimeRequestMessageItem setId(String id) {
        super.setId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RealtimeRequestMessageItem from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RealtimeRequestMessageItem if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RealtimeRequestMessageItem.
     */
    @Generated
    public static RealtimeRequestMessageItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                // Prepare for reading
                readerToUse.nextToken();
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("role".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("system".equals(discriminatorValue)) {
                    return RealtimeRequestSystemMessageItem.fromJson(readerToUse.reset());
                } else if ("user".equals(discriminatorValue)) {
                    return RealtimeRequestUserMessageItem.fromJson(readerToUse.reset());
                } else if ("assistant".equals(discriminatorValue)) {
                    return RealtimeRequestAssistantMessageItem.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static RealtimeRequestMessageItem fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RealtimeRequestMessageItem deserializedRealtimeRequestMessageItem = new RealtimeRequestMessageItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    deserializedRealtimeRequestMessageItem.setId(reader.getString());
                } else if ("role".equals(fieldName)) {
                    deserializedRealtimeRequestMessageItem.role = RealtimeMessageRole.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedRealtimeRequestMessageItem.status = RealtimeItemStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedRealtimeRequestMessageItem;
        });
    }
}
