// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.realtime.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The RealtimeServerVadTurnDetection model.
 */
@Fluent
public final class RealtimeServerVadTurnDetection extends RealtimeTurnDetection {

    /*
     * The type property.
     */
    @Generated
    private RealtimeTurnDetectionType type = RealtimeTurnDetectionType.SERVER_VAD;

    /*
     * The threshold property.
     */
    @Generated
    private Double threshold;

    /*
     * The prefix_padding_ms property.
     */
    private Integer prefixPaddingMs;

    /*
     * The silence_duration_ms property.
     */
    private Integer silenceDurationMs;

    /**
     * Creates an instance of RealtimeServerVadTurnDetection class.
     */
    @Generated
    public RealtimeServerVadTurnDetection() {
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public RealtimeTurnDetectionType getType() {
        return this.type;
    }

    /**
     * Get the threshold property: The threshold property.
     *
     * @return the threshold value.
     */
    @Generated
    public Double getThreshold() {
        return this.threshold;
    }

    /**
     * Set the threshold property: The threshold property.
     *
     * @param threshold the threshold value to set.
     * @return the RealtimeServerVadTurnDetection object itself.
     */
    @Generated
    public RealtimeServerVadTurnDetection setThreshold(Double threshold) {
        this.threshold = threshold;
        return this;
    }

    /**
     * Get the prefixPaddingMs property: The prefix_padding_ms property.
     *
     * @return the prefixPaddingMs value.
     */
    public Integer getPrefixPaddingMs() {
        return this.prefixPaddingMs;
    }

    /**
     * Set the prefixPaddingMs property: The prefix_padding_ms property.
     *
     * @param prefixPaddingMs the prefixPaddingMs value to set.
     * @return the RealtimeServerVadTurnDetection object itself.
     */
    public RealtimeServerVadTurnDetection setPrefixPaddingMs(Integer prefixPaddingMs) {
        this.prefixPaddingMs = prefixPaddingMs;
        return this;
    }

    /**
     * Get the silenceDurationMs property: The silence_duration_ms property.
     *
     * @return the silenceDurationMs value.
     */
    public Integer getSilenceDurationMs() {
        return this.silenceDurationMs;
    }

    /**
     * Set the silenceDurationMs property: The silence_duration_ms property.
     *
     * @param silenceDurationMs the silenceDurationMs value to set.
     * @return the RealtimeServerVadTurnDetection object itself.
     */
    public RealtimeServerVadTurnDetection setSilenceDurationMs(Integer silenceDurationMs) {
        this.silenceDurationMs = silenceDurationMs;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeNumberField("threshold", this.threshold);
        if (this.prefixPaddingMs != null) {
            jsonWriter.writeNumberField("prefix_padding_ms", this.prefixPaddingMs);
        }
        if (this.silenceDurationMs != null) {
            jsonWriter.writeNumberField("silence_duration_ms", this.silenceDurationMs);
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RealtimeServerVadTurnDetection from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RealtimeServerVadTurnDetection if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RealtimeServerVadTurnDetection.
     */
    @Generated
    @SuppressWarnings("removal")
    public static RealtimeServerVadTurnDetection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RealtimeServerVadTurnDetection deserializedRealtimeServerVadTurnDetection
                = new RealtimeServerVadTurnDetection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    deserializedRealtimeServerVadTurnDetection.type
                        = RealtimeTurnDetectionType.fromString(reader.getString());
                } else if ("threshold".equals(fieldName)) {
                    deserializedRealtimeServerVadTurnDetection.threshold = reader.getNullable(JsonReader::getDouble);
                } else if ("prefix_padding_ms".equals(fieldName)) {
                    deserializedRealtimeServerVadTurnDetection.prefixPaddingMs
                        = reader.getNullable(nonNullReader -> new Integer(nonNullReader.getInt()));
                } else if ("silence_duration_ms".equals(fieldName)) {
                    deserializedRealtimeServerVadTurnDetection.silenceDurationMs
                        = reader.getNullable(nonNullReader -> new Integer(nonNullReader.getInt()));
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedRealtimeServerVadTurnDetection;
        });
    }
}
