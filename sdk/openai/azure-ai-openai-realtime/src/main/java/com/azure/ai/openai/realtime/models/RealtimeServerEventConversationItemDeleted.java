// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.realtime.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;

/**
 * Returned when an item in the conversation is deleted.
 */
@Immutable
public final class RealtimeServerEventConversationItemDeleted extends RealtimeServerEvent {
    /*
     * The type property.
     */
    @Generated
    private RealtimeServerEventType type = RealtimeServerEventType.CONVERSATION_ITEM_DELETED;

    //    /*
    //     * The unique ID of the server event.
    //     */
    //    @Generated
    //    private final String eventId;

    /*
     * The ID of the item that was deleted.
     */
    @Generated
    private final String itemId;

    /**
     * Creates an instance of RealtimeServerEventConversationItemDeleted class.
     * 
     * @param eventId the eventId value to set.
     * @param itemId the itemId value to set.
     */
    @Generated
    private RealtimeServerEventConversationItemDeleted(String eventId, String itemId) {
        super(eventId);
        this.itemId = itemId;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public RealtimeServerEventType getType() {
        return this.type;
    }

    /**
     * Get the eventId property: The unique ID of the server event.
     * 
     * @return the eventId value.
     */
    @Generated
    public String getEventId() {
        return this.eventId;
    }

    /**
     * Get the itemId property: The ID of the item that was deleted.
     * 
     * @return the itemId value.
     */
    @Generated
    public String getItemId() {
        return this.itemId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeStringField("event_id", this.eventId);
        jsonWriter.writeStringField("item_id", this.itemId);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RealtimeServerEventConversationItemDeleted from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RealtimeServerEventConversationItemDeleted if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RealtimeServerEventConversationItemDeleted.
     */
    @Generated
    public static RealtimeServerEventConversationItemDeleted fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String eventId = null;
            //            String eventId = null;
            String itemId = null;
            RealtimeServerEventType type = RealtimeServerEventType.CONVERSATION_ITEM_DELETED;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("event_id".equals(fieldName)) {
                    eventId = reader.getString();
                } else if ("item_id".equals(fieldName)) {
                    itemId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = RealtimeServerEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            RealtimeServerEventConversationItemDeleted deserializedRealtimeServerEventConversationItemDeleted
                = new RealtimeServerEventConversationItemDeleted(eventId, itemId);
            deserializedRealtimeServerEventConversationItemDeleted.type = type;

            return deserializedRealtimeServerEventConversationItemDeleted;
        });
    }
}
