// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.realtime.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The RealtimeResponseSession model.
 */
@Immutable
public final class RealtimeResponseSession implements JsonSerializable<RealtimeResponseSession> {

    /*
     * The object property.
     */
    @Generated
    private final String object = "realtime.session";

    /*
     * The id property.
     */
    @Generated
    private final String id;

    /*
     * The model property.
     */
    @Generated
    private final String model;

    /*
     * The modalities property.
     */
    @Generated
    private final List<RealtimeRequestSessionModality> modalities;

    /*
     * The instructions property.
     */
    @Generated
    private final String instructions;

    /*
     * The voice property.
     */
    @Generated
    private final RealtimeVoice voice;

    /*
     * The input_audio_format property.
     */
    @Generated
    private final RealtimeAudioFormat inputAudioFormat;

    /*
     * The output_audio_format property.
     */
    @Generated
    private final RealtimeAudioFormat outputAudioFormat;

    /*
     * The input_audio_transcription property.
     */
    @Generated
    private final RealtimeAudioInputTranscriptionSettings inputAudioTranscription;

    /*
     * The turn_detection property.
     */
    @Generated
    private final RealtimeTurnDetection turnDetection;

    /*
     * The tools property.
     */
    @Generated
    private final List<RealtimeTool> tools;

    /*
     * The tool_choice property.
     */
    @Generated
    private final BinaryData toolChoice;

    /*
     * The temperature property.
     */
    @Generated
    private final double temperature;

    /*
     * The max_response_output_tokens property.
     */
    @Generated
    private final BinaryData maxResponseOutputTokens;

    /**
     * Creates an instance of RealtimeResponseSession class.
     *
     * @param id the id value to set.
     * @param model the model value to set.
     * @param modalities the modalities value to set.
     * @param instructions the instructions value to set.
     * @param voice the voice value to set.
     * @param inputAudioFormat the inputAudioFormat value to set.
     * @param outputAudioFormat the outputAudioFormat value to set.
     * @param inputAudioTranscription the inputAudioTranscription value to set.
     * @param turnDetection the turnDetection value to set.
     * @param tools the tools value to set.
     * @param toolChoice the toolChoice value to set.
     * @param temperature the temperature value to set.
     * @param maxResponseOutputTokens the maxResponseOutputTokens value to set.
     */
    @Generated
    private RealtimeResponseSession(String id, String model, List<RealtimeRequestSessionModality> modalities,
        String instructions, RealtimeVoice voice, RealtimeAudioFormat inputAudioFormat,
        RealtimeAudioFormat outputAudioFormat, RealtimeAudioInputTranscriptionSettings inputAudioTranscription,
        RealtimeTurnDetection turnDetection, List<RealtimeTool> tools, BinaryData toolChoice, double temperature,
        BinaryData maxResponseOutputTokens) {
        this.id = id;
        this.model = model;
        this.modalities = modalities;
        this.instructions = instructions;
        this.voice = voice;
        this.inputAudioFormat = inputAudioFormat;
        this.outputAudioFormat = outputAudioFormat;
        this.inputAudioTranscription = inputAudioTranscription;
        this.turnDetection = turnDetection;
        this.tools = tools;
        this.toolChoice = toolChoice;
        this.temperature = temperature;
        this.maxResponseOutputTokens = maxResponseOutputTokens;
    }

    /**
     * Get the object property: The object property.
     *
     * @return the object value.
     */
    @Generated
    public String getObject() {
        return this.object;
    }

    /**
     * Get the id property: The id property.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the model property: The model property.
     *
     * @return the model value.
     */
    @Generated
    public String getModel() {
        return this.model;
    }

    /**
     * Get the modalities property: The modalities property.
     *
     * @return the modalities value.
     */
    @Generated
    public List<RealtimeRequestSessionModality> getModalities() {
        return this.modalities;
    }

    /**
     * Get the instructions property: The instructions property.
     *
     * @return the instructions value.
     */
    @Generated
    public String getInstructions() {
        return this.instructions;
    }

    /**
     * Get the voice property: The voice property.
     *
     * @return the voice value.
     */
    @Generated
    public RealtimeVoice getVoice() {
        return this.voice;
    }

    /**
     * Get the inputAudioFormat property: The input_audio_format property.
     *
     * @return the inputAudioFormat value.
     */
    @Generated
    public RealtimeAudioFormat getInputAudioFormat() {
        return this.inputAudioFormat;
    }

    /**
     * Get the outputAudioFormat property: The output_audio_format property.
     *
     * @return the outputAudioFormat value.
     */
    @Generated
    public RealtimeAudioFormat getOutputAudioFormat() {
        return this.outputAudioFormat;
    }

    /**
     * Get the inputAudioTranscription property: The input_audio_transcription property.
     *
     * @return the inputAudioTranscription value.
     */
    @Generated
    public RealtimeAudioInputTranscriptionSettings getInputAudioTranscription() {
        return this.inputAudioTranscription;
    }

    /**
     * Get the turnDetection property: The turn_detection property.
     *
     * @return the turnDetection value.
     */
    @Generated
    public RealtimeTurnDetection getTurnDetection() {
        return this.turnDetection;
    }

    /**
     * Get the tools property: The tools property.
     *
     * @return the tools value.
     */
    @Generated
    public List<RealtimeTool> getTools() {
        return this.tools;
    }

    /**
     * Get the toolChoice property: The tool_choice property.
     *
     * @return the toolChoice value.
     */
    @Generated
    public BinaryData getToolChoice() {
        return this.toolChoice;
    }

    /**
     * Get the temperature property: The temperature property.
     *
     * @return the temperature value.
     */
    @Generated
    public double getTemperature() {
        return this.temperature;
    }

    /**
     * Get the maxResponseOutputTokens property: The max_response_output_tokens property.
     *
     * @return the maxResponseOutputTokens value.
     */
    @Generated
    public BinaryData getMaxResponseOutputTokens() {
        return this.maxResponseOutputTokens;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("object", this.object);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("model", this.model);
        jsonWriter.writeArrayField("modalities", this.modalities,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("instructions", this.instructions);
        jsonWriter.writeStringField("voice", this.voice == null ? null : this.voice.toString());
        jsonWriter.writeStringField("input_audio_format",
            this.inputAudioFormat == null ? null : this.inputAudioFormat.toString());
        jsonWriter.writeStringField("output_audio_format",
            this.outputAudioFormat == null ? null : this.outputAudioFormat.toString());
        jsonWriter.writeJsonField("input_audio_transcription", this.inputAudioTranscription);
        jsonWriter.writeJsonField("turn_detection", this.turnDetection);
        jsonWriter.writeArrayField("tools", this.tools, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeUntypedField("tool_choice", this.toolChoice.toObject(Object.class));
        jsonWriter.writeDoubleField("temperature", this.temperature);
        jsonWriter.writeUntypedField("max_response_output_tokens", this.maxResponseOutputTokens.toObject(Object.class));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RealtimeResponseSession from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RealtimeResponseSession if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RealtimeResponseSession.
     */
    @Generated
    public static RealtimeResponseSession fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String model = null;
            List<RealtimeRequestSessionModality> modalities = null;
            String instructions = null;
            RealtimeVoice voice = null;
            RealtimeAudioFormat inputAudioFormat = null;
            RealtimeAudioFormat outputAudioFormat = null;
            RealtimeAudioInputTranscriptionSettings inputAudioTranscription = null;
            RealtimeTurnDetection turnDetection = null;
            List<RealtimeTool> tools = null;
            BinaryData toolChoice = null;
            double temperature = 0.0;
            BinaryData maxResponseOutputTokens = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("model".equals(fieldName)) {
                    model = reader.getString();
                } else if ("modalities".equals(fieldName)) {
                    modalities
                        = reader.readArray(reader1 -> RealtimeRequestSessionModality.fromString(reader1.getString()));
                } else if ("instructions".equals(fieldName)) {
                    instructions = reader.getString();
                } else if ("voice".equals(fieldName)) {
                    voice = RealtimeVoice.fromString(reader.getString());
                } else if ("input_audio_format".equals(fieldName)) {
                    inputAudioFormat = RealtimeAudioFormat.fromString(reader.getString());
                } else if ("output_audio_format".equals(fieldName)) {
                    outputAudioFormat = RealtimeAudioFormat.fromString(reader.getString());
                } else if ("input_audio_transcription".equals(fieldName)) {
                    inputAudioTranscription = RealtimeAudioInputTranscriptionSettings.fromJson(reader);
                } else if ("turn_detection".equals(fieldName)) {
                    turnDetection = RealtimeTurnDetection.fromJson(reader);
                } else if ("tools".equals(fieldName)) {
                    tools = reader.readArray(reader1 -> RealtimeTool.fromJson(reader1));
                } else if ("tool_choice".equals(fieldName)) {
                    toolChoice
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("temperature".equals(fieldName)) {
                    temperature = reader.getDouble();
                } else if ("max_response_output_tokens".equals(fieldName)) {
                    maxResponseOutputTokens
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else {
                    reader.skipChildren();
                }
            }
            return new RealtimeResponseSession(id, model, modalities, instructions, voice, inputAudioFormat,
                outputAudioFormat, inputAudioTranscription, turnDetection, tools, toolChoice, temperature,
                maxResponseOutputTokens);
        });
    }
}
