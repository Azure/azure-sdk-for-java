// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.realtime.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The RealtimeResponseUsage model.
 */
@Immutable
public final class RealtimeResponseUsage implements JsonSerializable<RealtimeResponseUsage> {

    /*
     * The total_tokens property.
     */
    @Generated
    private final int totalTokens;

    /*
     * The input_tokens property.
     */
    @Generated
    private final int inputTokens;

    /*
     * The output_tokens property.
     */
    @Generated
    private final int outputTokens;

    /*
     * The input_token_details property.
     */
    @Generated
    private final RealtimeResponseUsageInputTokenDetails inputTokenDetails;

    /*
     * The output_token_details property.
     */
    @Generated
    private final RealtimeResponseUsageOutputTokenDetails outputTokenDetails;

    /**
     * Creates an instance of RealtimeResponseUsage class.
     *
     * @param totalTokens the totalTokens value to set.
     * @param inputTokens the inputTokens value to set.
     * @param outputTokens the outputTokens value to set.
     * @param inputTokenDetails the inputTokenDetails value to set.
     * @param outputTokenDetails the outputTokenDetails value to set.
     */
    @Generated
    private RealtimeResponseUsage(int totalTokens, int inputTokens, int outputTokens,
        RealtimeResponseUsageInputTokenDetails inputTokenDetails,
        RealtimeResponseUsageOutputTokenDetails outputTokenDetails) {
        this.totalTokens = totalTokens;
        this.inputTokens = inputTokens;
        this.outputTokens = outputTokens;
        this.inputTokenDetails = inputTokenDetails;
        this.outputTokenDetails = outputTokenDetails;
    }

    /**
     * Get the totalTokens property: The total_tokens property.
     *
     * @return the totalTokens value.
     */
    @Generated
    public int getTotalTokens() {
        return this.totalTokens;
    }

    /**
     * Get the inputTokens property: The input_tokens property.
     *
     * @return the inputTokens value.
     */
    @Generated
    public int getInputTokens() {
        return this.inputTokens;
    }

    /**
     * Get the outputTokens property: The output_tokens property.
     *
     * @return the outputTokens value.
     */
    @Generated
    public int getOutputTokens() {
        return this.outputTokens;
    }

    /**
     * Get the inputTokenDetails property: The input_token_details property.
     *
     * @return the inputTokenDetails value.
     */
    @Generated
    public RealtimeResponseUsageInputTokenDetails getInputTokenDetails() {
        return this.inputTokenDetails;
    }

    /**
     * Get the outputTokenDetails property: The output_token_details property.
     *
     * @return the outputTokenDetails value.
     */
    @Generated
    public RealtimeResponseUsageOutputTokenDetails getOutputTokenDetails() {
        return this.outputTokenDetails;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("total_tokens", this.totalTokens);
        jsonWriter.writeIntField("input_tokens", this.inputTokens);
        jsonWriter.writeIntField("output_tokens", this.outputTokens);
        jsonWriter.writeJsonField("input_token_details", this.inputTokenDetails);
        jsonWriter.writeJsonField("output_token_details", this.outputTokenDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RealtimeResponseUsage from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RealtimeResponseUsage if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RealtimeResponseUsage.
     */
    @Generated
    public static RealtimeResponseUsage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int totalTokens = 0;
            int inputTokens = 0;
            int outputTokens = 0;
            RealtimeResponseUsageInputTokenDetails inputTokenDetails = null;
            RealtimeResponseUsageOutputTokenDetails outputTokenDetails = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("total_tokens".equals(fieldName)) {
                    totalTokens = reader.getInt();
                } else if ("input_tokens".equals(fieldName)) {
                    inputTokens = reader.getInt();
                } else if ("output_tokens".equals(fieldName)) {
                    outputTokens = reader.getInt();
                } else if ("input_token_details".equals(fieldName)) {
                    inputTokenDetails = RealtimeResponseUsageInputTokenDetails.fromJson(reader);
                } else if ("output_token_details".equals(fieldName)) {
                    outputTokenDetails = RealtimeResponseUsageOutputTokenDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new RealtimeResponseUsage(totalTokens, inputTokens, outputTokens, inputTokenDetails,
                outputTokenDetails);
        });
    }
}
