// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.realtime.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;

/**
 * Send this event when you want to remove any item from the conversation history.
 */
@Fluent
public final class RealtimeClientEventConversationItemDelete extends RealtimeClientEvent {
    /*
     * The type property.
     */
    @Generated
    private RealtimeClientEventType type = RealtimeClientEventType.CONVERSATION_ITEM_DELETE;

    /*
     * Optional client-generated ID used to identify this event.
     */
    @Generated
    private String eventId;

    /*
     * The ID of the item to delete.
     */
    @Generated
    private final String itemId;

    /**
     * Creates an instance of RealtimeClientEventConversationItemDelete class.
     * 
     * @param itemId the itemId value to set.
     */
    @Generated
    public RealtimeClientEventConversationItemDelete(String itemId) {
        this.itemId = itemId;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public RealtimeClientEventType getType() {
        return this.type;
    }

    /**
     * Get the eventId property: Optional client-generated ID used to identify this event.
     * 
     * @return the eventId value.
     */
    @Generated
    public String getEventId() {
        return this.eventId;
    }

    /**
     * Set the eventId property: Optional client-generated ID used to identify this event.
     * 
     * @param eventId the eventId value to set.
     * @return the RealtimeClientEventConversationItemDelete object itself.
     */
    @Generated
    public RealtimeClientEventConversationItemDelete setEventId(String eventId) {
        this.eventId = eventId;
        return this;
    }

    /**
     * Get the itemId property: The ID of the item to delete.
     * 
     * @return the itemId value.
     */
    @Generated
    public String getItemId() {
        return this.itemId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeStringField("item_id", this.itemId);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("event_id", this.eventId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RealtimeClientEventConversationItemDelete from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RealtimeClientEventConversationItemDelete if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RealtimeClientEventConversationItemDelete.
     */
    @Generated
    public static RealtimeClientEventConversationItemDelete fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String eventId = null;
            String itemId = null;
            RealtimeClientEventType type = RealtimeClientEventType.CONVERSATION_ITEM_DELETE;
//            String eventId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("item_id".equals(fieldName)) {
                    itemId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = RealtimeClientEventType.fromString(reader.getString());
                } else if ("event_id".equals(fieldName)) {
                    eventId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            RealtimeClientEventConversationItemDelete deserializedRealtimeClientEventConversationItemDelete
                = new RealtimeClientEventConversationItemDelete(itemId);
            deserializedRealtimeClientEventConversationItemDelete.setEventId(eventId);
            deserializedRealtimeClientEventConversationItemDelete.type = type;
            deserializedRealtimeClientEventConversationItemDelete.eventId = eventId;

            return deserializedRealtimeClientEventConversationItemDelete;
        });
    }
}
