// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.realtime.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The RealtimeServerEvent model.
 */
@Immutable
public class RealtimeServerEvent implements JsonSerializable<RealtimeServerEvent> {

    /*
     * The type property.
     */
    @Generated
    private RealtimeServerEventType type = RealtimeServerEventType.fromString("RealtimeServerEvent");

    /*
     * The event_id property.
     */
    @Generated
    private final String eventId;

    /**
     * Creates an instance of RealtimeServerEvent class.
     *
     * @param eventId the eventId value to set.
     */
    @Generated
    protected RealtimeServerEvent(String eventId) {
        this.eventId = eventId;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    public RealtimeServerEventType getType() {
        return this.type;
    }

    /**
     * Get the eventId property: The event_id property.
     *
     * @return the eventId value.
     */
    @Generated
    public String getEventId() {
        return this.eventId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", this.eventId);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RealtimeServerEvent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RealtimeServerEvent if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RealtimeServerEvent.
     */
    @Generated
    public static RealtimeServerEvent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                // Prepare for reading
                readerToUse.nextToken();
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("error".equals(discriminatorValue)) {
                    return RealtimeServerEventError.fromJson(readerToUse.reset());
                } else if ("session.created".equals(discriminatorValue)) {
                    return SessionCreatedEvent.fromJson(readerToUse.reset());
                } else if ("session.updated".equals(discriminatorValue)) {
                    return SessionUpdatedEvent.fromJson(readerToUse.reset());
                } else if ("conversation.created".equals(discriminatorValue)) {
                    return ConversationCreatedEvent.fromJson(readerToUse.reset());
                } else if ("input_audio_buffer.committed".equals(discriminatorValue)) {
                    return InputAudioBufferCommittedEvent.fromJson(readerToUse.reset());
                } else if ("input_audio_buffer.cleared".equals(discriminatorValue)) {
                    return InputAudioBufferClearedEvent.fromJson(readerToUse.reset());
                } else if ("input_audio_buffer.speech_started".equals(discriminatorValue)) {
                    return InputAudioBufferSpeechStartedEvent.fromJson(readerToUse.reset());
                } else if ("input_audio_buffer.speech_stopped".equals(discriminatorValue)) {
                    return InputAudioBufferSpeechStoppedEvent.fromJson(readerToUse.reset());
                } else if ("conversation.item.created".equals(discriminatorValue)) {
                    return ConversationItemCreatedEvent.fromJson(readerToUse.reset());
                } else if ("conversation.item.input_audio_transcription.completed".equals(discriminatorValue)) {
                    return ConversationItemInputAudioTranscriptionCompletedEvent.fromJson(readerToUse.reset());
                } else if ("conversation.item.input_audio_transcription.failed".equals(discriminatorValue)) {
                    return ConversationItemInputAudioTranscriptionFailedEvent.fromJson(readerToUse.reset());
                } else if ("conversation.item.truncated".equals(discriminatorValue)) {
                    return ConversationItemTruncatedEvent.fromJson(readerToUse.reset());
                } else if ("conversation.item.deleted".equals(discriminatorValue)) {
                    return ConversationItemDeletedEvent.fromJson(readerToUse.reset());
                } else if ("response.created".equals(discriminatorValue)) {
                    return ResponseCreatedEvent.fromJson(readerToUse.reset());
                } else if ("response.done".equals(discriminatorValue)) {
                    return ResponseDoneEvent.fromJson(readerToUse.reset());
                } else if ("response.output_item.added".equals(discriminatorValue)) {
                    return ResponseOutputItemAddedEvent.fromJson(readerToUse.reset());
                } else if ("response.output_item.done".equals(discriminatorValue)) {
                    return ResponseOutputItemDoneEvent.fromJson(readerToUse.reset());
                } else if ("response.content_part.added".equals(discriminatorValue)) {
                    return ResponseContentPartAddedEvent.fromJson(readerToUse.reset());
                } else if ("response.content_part.done".equals(discriminatorValue)) {
                    return ResponseContentPartDoneEvent.fromJson(readerToUse.reset());
                } else if ("response.text.delta".equals(discriminatorValue)) {
                    return ResponseTextDeltaEvent.fromJson(readerToUse.reset());
                } else if ("response.text.done".equals(discriminatorValue)) {
                    return ResponseTextDoneEvent.fromJson(readerToUse.reset());
                } else if ("response.audio_transcript.delta".equals(discriminatorValue)) {
                    return ResponseAudioTranscriptDeltaEvent.fromJson(readerToUse.reset());
                } else if ("response.audio_transcript.done".equals(discriminatorValue)) {
                    return ResponseAudioTranscriptDoneEvent.fromJson(readerToUse.reset());
                } else if ("response.audio.delta".equals(discriminatorValue)) {
                    return ResponseAudioDeltaEvent.fromJson(readerToUse.reset());
                } else if ("response.audio.done".equals(discriminatorValue)) {
                    return ResponseAudioDoneEvent.fromJson(readerToUse.reset());
                } else if ("response.function_call_arguments.delta".equals(discriminatorValue)) {
                    return ResponseFunctionCallArgumentsDeltaEvent.fromJson(readerToUse.reset());
                } else if ("response.function_call_arguments.done".equals(discriminatorValue)) {
                    return ResponseFunctionCallArgumentsDoneEvent.fromJson(readerToUse.reset());
                } else if ("rate_limits.updated".equals(discriminatorValue)) {
                    return RateLimitsUpdatedEvent.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static RealtimeServerEvent fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String eventId = null;
            RealtimeServerEventType type = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("event_id".equals(fieldName)) {
                    eventId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = RealtimeServerEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            RealtimeServerEvent deserializedRealtimeServerEvent = new RealtimeServerEvent(eventId);
            deserializedRealtimeServerEvent.type = type;
            return deserializedRealtimeServerEvent;
        });
    }
}
