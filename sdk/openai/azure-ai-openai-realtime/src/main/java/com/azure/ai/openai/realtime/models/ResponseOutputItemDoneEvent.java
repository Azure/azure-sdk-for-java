// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.realtime.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Returned when an Item is done streaming. Also emitted when a Response is interrupted, incomplete, or cancelled.
 */
@Immutable
public final class ResponseOutputItemDoneEvent extends RealtimeServerEvent {

    /*
     * The type property.
     */
    @Generated
    private RealtimeServerEventType type = RealtimeServerEventType.RESPONSE_OUTPUT_ITEM_DONE;

    /*
     * The ID of the response to which the item belongs.
     */
    @Generated
    private final String responseId;

    /*
     * The index of the output item in the response.
     */
    @Generated
    private final int outputIndex;

    /*
     * The completed item.
     */
    @Generated
    private final RealtimeResponseItem item;

    /**
     * Creates an instance of ResponseOutputItemDoneEvent class.
     *
     * @param eventId the eventId value to set.
     * @param responseId the responseId value to set.
     * @param outputIndex the outputIndex value to set.
     * @param item the item value to set.
     */
    @Generated
    private ResponseOutputItemDoneEvent(String eventId, String responseId, int outputIndex, RealtimeResponseItem item) {
        super(eventId);
        this.responseId = responseId;
        this.outputIndex = outputIndex;
        this.item = item;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public RealtimeServerEventType getType() {
        return this.type;
    }

    /**
     * Get the responseId property: The ID of the response to which the item belongs.
     *
     * @return the responseId value.
     */
    @Generated
    public String getResponseId() {
        return this.responseId;
    }

    /**
     * Get the outputIndex property: The index of the output item in the response.
     *
     * @return the outputIndex value.
     */
    @Generated
    public int getOutputIndex() {
        return this.outputIndex;
    }

    /**
     * Get the item property: The completed item.
     *
     * @return the item value.
     */
    @Generated
    public RealtimeResponseItem getItem() {
        return this.item;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeStringField("response_id", this.responseId);
        jsonWriter.writeIntField("output_index", this.outputIndex);
        jsonWriter.writeJsonField("item", this.item);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponseOutputItemDoneEvent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponseOutputItemDoneEvent if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResponseOutputItemDoneEvent.
     */
    @Generated
    public static ResponseOutputItemDoneEvent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String eventId = null;
            String responseId = null;
            int outputIndex = 0;
            RealtimeResponseItem item = null;
            RealtimeServerEventType type = RealtimeServerEventType.RESPONSE_OUTPUT_ITEM_DONE;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("event_id".equals(fieldName)) {
                    eventId = reader.getString();
                } else if ("response_id".equals(fieldName)) {
                    responseId = reader.getString();
                } else if ("output_index".equals(fieldName)) {
                    outputIndex = reader.getInt();
                } else if ("item".equals(fieldName)) {
                    item = RealtimeResponseItem.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    type = RealtimeServerEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ResponseOutputItemDoneEvent deserializedResponseOutputItemDoneEvent
                = new ResponseOutputItemDoneEvent(eventId, responseId, outputIndex, item);
            deserializedResponseOutputItemDoneEvent.type = type;
            return deserializedResponseOutputItemDoneEvent;
        });
    }
}
