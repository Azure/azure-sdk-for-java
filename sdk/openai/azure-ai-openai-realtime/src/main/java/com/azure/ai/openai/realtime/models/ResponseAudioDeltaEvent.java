// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.realtime.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Returned when the model-generated audio is updated.
 */
@Immutable
public final class ResponseAudioDeltaEvent extends RealtimeServerEvent {

    /*
     * The type property.
     */
    @Generated
    private RealtimeServerEventType type = RealtimeServerEventType.RESPONSE_AUDIO_DELTA;

    /*
     * The ID of the response.
     */
    @Generated
    private final String responseId;

    /*
     * The ID of the item.
     */
    @Generated
    private final String itemId;

    /*
     * The index of the output item in the response.
     */
    @Generated
    private final int outputIndex;

    /*
     * The index of the content part in the item's content array.
     */
    @Generated
    private final int contentIndex;

    /*
     * Base64-encoded audio data delta.
     */
    @Generated
    private final byte[] delta;

    /**
     * Creates an instance of ResponseAudioDeltaEvent class.
     *
     * @param eventId the eventId value to set.
     * @param responseId the responseId value to set.
     * @param itemId the itemId value to set.
     * @param outputIndex the outputIndex value to set.
     * @param contentIndex the contentIndex value to set.
     * @param delta the delta value to set.
     */
    @Generated
    private ResponseAudioDeltaEvent(String eventId, String responseId, String itemId, int outputIndex, int contentIndex,
        byte[] delta) {
        super(eventId);
        this.responseId = responseId;
        this.itemId = itemId;
        this.outputIndex = outputIndex;
        this.contentIndex = contentIndex;
        this.delta = delta;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public RealtimeServerEventType getType() {
        return this.type;
    }

    /**
     * Get the responseId property: The ID of the response.
     *
     * @return the responseId value.
     */
    @Generated
    public String getResponseId() {
        return this.responseId;
    }

    /**
     * Get the itemId property: The ID of the item.
     *
     * @return the itemId value.
     */
    @Generated
    public String getItemId() {
        return this.itemId;
    }

    /**
     * Get the outputIndex property: The index of the output item in the response.
     *
     * @return the outputIndex value.
     */
    @Generated
    public int getOutputIndex() {
        return this.outputIndex;
    }

    /**
     * Get the contentIndex property: The index of the content part in the item's content array.
     *
     * @return the contentIndex value.
     */
    @Generated
    public int getContentIndex() {
        return this.contentIndex;
    }

    /**
     * Get the delta property: Base64-encoded audio data delta.
     *
     * @return the delta value.
     */
    @Generated
    public byte[] getDelta() {
        return CoreUtils.clone(this.delta);
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event_id", getEventId());
        jsonWriter.writeStringField("response_id", this.responseId);
        jsonWriter.writeStringField("item_id", this.itemId);
        jsonWriter.writeIntField("output_index", this.outputIndex);
        jsonWriter.writeIntField("content_index", this.contentIndex);
        jsonWriter.writeBinaryField("delta", this.delta);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponseAudioDeltaEvent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponseAudioDeltaEvent if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResponseAudioDeltaEvent.
     */
    @Generated
    public static ResponseAudioDeltaEvent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String eventId = null;
            String responseId = null;
            String itemId = null;
            int outputIndex = 0;
            int contentIndex = 0;
            byte[] delta = null;
            RealtimeServerEventType type = RealtimeServerEventType.RESPONSE_AUDIO_DELTA;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("event_id".equals(fieldName)) {
                    eventId = reader.getString();
                } else if ("response_id".equals(fieldName)) {
                    responseId = reader.getString();
                } else if ("item_id".equals(fieldName)) {
                    itemId = reader.getString();
                } else if ("output_index".equals(fieldName)) {
                    outputIndex = reader.getInt();
                } else if ("content_index".equals(fieldName)) {
                    contentIndex = reader.getInt();
                } else if ("delta".equals(fieldName)) {
                    delta = reader.getBinary();
                } else if ("type".equals(fieldName)) {
                    type = RealtimeServerEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ResponseAudioDeltaEvent deserializedResponseAudioDeltaEvent
                = new ResponseAudioDeltaEvent(eventId, responseId, itemId, outputIndex, contentIndex, delta);
            deserializedResponseAudioDeltaEvent.type = type;
            return deserializedResponseAudioDeltaEvent;
        });
    }
}
