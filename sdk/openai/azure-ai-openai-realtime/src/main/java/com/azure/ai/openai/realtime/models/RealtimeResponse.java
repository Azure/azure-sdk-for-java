// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.realtime.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The RealtimeResponse model.
 */
@Immutable
public final class RealtimeResponse implements JsonSerializable<RealtimeResponse> {

    /*
     * The object property.
     */
    @Generated
    private final String object = "realtime.response";

    /*
     * The id property.
     */
    @Generated
    private final String id;

    /*
     * The status property.
     */
    @Generated
    private final RealtimeResponseStatus status;

    /*
     * The status_details property.
     */
    @Generated
    private final RealtimeResponseStatusDetails statusDetails;

    /*
     * The output property.
     */
    @Generated
    private final List<RealtimeResponseItem> output;

    /*
     * The usage property.
     */
    @Generated
    private final RealtimeResponseUsage usage;

    /**
     * Creates an instance of RealtimeResponse class.
     *
     * @param id the id value to set.
     * @param status the status value to set.
     * @param statusDetails the statusDetails value to set.
     * @param output the output value to set.
     * @param usage the usage value to set.
     */
    @Generated
    private RealtimeResponse(String id, RealtimeResponseStatus status, RealtimeResponseStatusDetails statusDetails,
        List<RealtimeResponseItem> output, RealtimeResponseUsage usage) {
        this.id = id;
        this.status = status;
        this.statusDetails = statusDetails;
        this.output = output;
        this.usage = usage;
    }

    /**
     * Get the object property: The object property.
     *
     * @return the object value.
     */
    @Generated
    public String getObject() {
        return this.object;
    }

    /**
     * Get the id property: The id property.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the status property: The status property.
     *
     * @return the status value.
     */
    @Generated
    public RealtimeResponseStatus getStatus() {
        return this.status;
    }

    /**
     * Get the statusDetails property: The status_details property.
     *
     * @return the statusDetails value.
     */
    @Generated
    public RealtimeResponseStatusDetails getStatusDetails() {
        return this.statusDetails;
    }

    /**
     * Get the output property: The output property.
     *
     * @return the output value.
     */
    @Generated
    public List<RealtimeResponseItem> getOutput() {
        return this.output;
    }

    /**
     * Get the usage property: The usage property.
     *
     * @return the usage value.
     */
    @Generated
    public RealtimeResponseUsage getUsage() {
        return this.usage;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("object", this.object);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeJsonField("status_details", this.statusDetails);
        jsonWriter.writeArrayField("output", this.output, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("usage", this.usage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RealtimeResponse from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RealtimeResponse if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RealtimeResponse.
     */
    @Generated
    public static RealtimeResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            RealtimeResponseStatus status = null;
            RealtimeResponseStatusDetails statusDetails = null;
            List<RealtimeResponseItem> output = null;
            RealtimeResponseUsage usage = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = RealtimeResponseStatus.fromString(reader.getString());
                } else if ("status_details".equals(fieldName)) {
                    statusDetails = RealtimeResponseStatusDetails.fromJson(reader);
                } else if ("output".equals(fieldName)) {
                    output = reader.readArray(reader1 -> RealtimeResponseItem.fromJson(reader1));
                } else if ("usage".equals(fieldName)) {
                    usage = RealtimeResponseUsage.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new RealtimeResponse(id, status, statusDetails, output, usage);
        });
    }
}
