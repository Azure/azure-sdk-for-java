// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.weightsandbiases.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.weightsandbiases.WeightsAndBiasesManager;
import com.azure.resourcemanager.weightsandbiases.models.InstanceResource;
import com.azure.resourcemanager.weightsandbiases.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.weightsandbiases.models.Region;
import com.azure.resourcemanager.weightsandbiases.models.SingleSignOnStates;
import com.azure.resourcemanager.weightsandbiases.models.SingleSignOnType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InstancesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"marketplace\":{\"subscriptionId\":\"cciw\",\"subscriptionStatus\":\"PendingFulfillmentStart\",\"offerDetails\":{\"publisherId\":\"uqkhrsajiwku\",\"offerId\":\"foskghsauuimj\",\"planId\":\"vxieduugidyj\",\"planName\":\"f\",\"termUnit\":\"aos\",\"termId\":\"xc\"}},\"user\":{\"firstName\":\"npc\",\"lastName\":\"ocohslkevleg\",\"emailAddress\":\"fbuhfmvfaxkffe\",\"upn\":\"th\",\"phoneNumber\":\"m\"},\"provisioningState\":\"Failed\",\"partnerProperties\":{\"region\":\"centralus\",\"subdomain\":\"hxmzsbbzoggig\"},\"singleSignOnProperties\":{\"type\":\"OpenId\",\"state\":\"Enable\",\"enterpriseAppId\":\"vjxxjnsp\",\"url\":\"ptkoenkoukn\",\"aadDomains\":[\"wtiukbldn\",\"kpoc\",\"pazyxoegukg\",\"npiucgygevqznty\"]}},\"identity\":{\"principalId\":\"bpizcdrqjsdpydn\",\"tenantId\":\"hxdeoejz\",\"type\":\"None\",\"userAssignedIdentities\":{\"eyeam\":{\"clientId\":\"sjttgzfbish\",\"principalId\":\"khaj\"},\"gshwankixz\":{\"clientId\":\"hagalpbuxwgipwh\",\"principalId\":\"ow\"},\"yx\":{\"clientId\":\"njeputtmrywn\",\"principalId\":\"oqftiyqzrnkcq\"},\"hheunmmqhgyx\":{\"clientId\":\"hzls\",\"principalId\":\"ohoqqnwvlryav\"}}},\"location\":\"onocukok\",\"tags\":{\"szfkbe\":\"xuconu\",\"jmwvvj\":\"pewr\"},\"id\":\"kt\",\"name\":\"xsenhwlr\",\"type\":\"ffrzpwvlqdqgbiqy\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WeightsAndBiasesManager manager = WeightsAndBiasesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        InstanceResource response = manager.instances()
            .getByResourceGroupWithResponse("yokacspkw", "hzdobpxjmflbvvnc", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("onocukok", response.location());
        Assertions.assertEquals("xuconu", response.tags().get("szfkbe"));
        Assertions.assertEquals("cciw", response.properties().marketplace().subscriptionId());
        Assertions.assertEquals("uqkhrsajiwku", response.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("foskghsauuimj", response.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("vxieduugidyj", response.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("f", response.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("aos", response.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("xc", response.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("npc", response.properties().user().firstName());
        Assertions.assertEquals("ocohslkevleg", response.properties().user().lastName());
        Assertions.assertEquals("fbuhfmvfaxkffe", response.properties().user().emailAddress());
        Assertions.assertEquals("th", response.properties().user().upn());
        Assertions.assertEquals("m", response.properties().user().phoneNumber());
        Assertions.assertEquals(Region.CENTRALUS, response.properties().partnerProperties().region());
        Assertions.assertEquals("hxmzsbbzoggig", response.properties().partnerProperties().subdomain());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID, response.properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.ENABLE, response.properties().singleSignOnProperties().state());
        Assertions.assertEquals("vjxxjnsp", response.properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("ptkoenkoukn", response.properties().singleSignOnProperties().url());
        Assertions.assertEquals("wtiukbldn", response.properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.identity().type());
    }
}
