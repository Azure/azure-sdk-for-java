// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.weightsandbiases.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.weightsandbiases.WeightsAndBiasesManager;
import com.azure.resourcemanager.weightsandbiases.models.InstanceResource;
import com.azure.resourcemanager.weightsandbiases.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.weightsandbiases.models.Region;
import com.azure.resourcemanager.weightsandbiases.models.SingleSignOnStates;
import com.azure.resourcemanager.weightsandbiases.models.SingleSignOnType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InstancesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"marketplace\":{\"subscriptionId\":\"snkymuctq\",\"subscriptionStatus\":\"Suspended\",\"offerDetails\":{\"publisherId\":\"bebrjcxerfuwuttt\",\"offerId\":\"fvjrbirphxepcy\",\"planId\":\"ahfn\",\"planName\":\"kyqxjvuujqgidokg\",\"termUnit\":\"jyoxgvclt\",\"termId\":\"sncghkjeszz\"}},\"user\":{\"firstName\":\"ijhtxf\",\"lastName\":\"xbf\",\"emailAddress\":\"xnehmpvec\",\"upn\":\"odebfqkkrbmpu\",\"phoneNumber\":\"riwflzlfb\"},\"provisioningState\":\"Succeeded\",\"partnerProperties\":{\"region\":\"westus\",\"subdomain\":\"ycispnqzahmgkb\"},\"singleSignOnProperties\":{\"type\":\"OpenId\",\"state\":\"Disable\",\"enterpriseAppId\":\"ibnuqqkpik\",\"url\":\"rgvtqag\",\"aadDomains\":[\"ynhijggme\",\"fsiarbutr\"]}},\"identity\":{\"principalId\":\"na\",\"tenantId\":\"mhjrunmpxttdbhr\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"tnrsyn\":{\"clientId\":\"kx\",\"principalId\":\"skpbhenbtkcxywn\"},\"rqlfktsthsucocmn\":{\"clientId\":\"idybyxczf\",\"principalId\":\"haaxdbabphl\"},\"edckzywbiexzfey\":{\"clientId\":\"azt\",\"principalId\":\"twwrqp\"},\"zjancuxr\":{\"clientId\":\"axibxujw\",\"principalId\":\"qwalmuzyoxaepd\"}}},\"location\":\"wbavxbniwdj\",\"tags\":{\"ytxhp\":\"tsdbpgn\"},\"id\":\"xbzpfzab\",\"name\":\"lcuhxwtctyqiklb\",\"type\":\"ovplw\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WeightsAndBiasesManager manager = WeightsAndBiasesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<InstanceResource> response
            = manager.instances().listByResourceGroup("ihkaetcktvfc", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wbavxbniwdj", response.iterator().next().location());
        Assertions.assertEquals("tsdbpgn", response.iterator().next().tags().get("ytxhp"));
        Assertions.assertEquals("snkymuctq", response.iterator().next().properties().marketplace().subscriptionId());
        Assertions.assertEquals("bebrjcxerfuwuttt",
            response.iterator().next().properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("fvjrbirphxepcy",
            response.iterator().next().properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("ahfn", response.iterator().next().properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("kyqxjvuujqgidokg",
            response.iterator().next().properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("jyoxgvclt",
            response.iterator().next().properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("sncghkjeszz",
            response.iterator().next().properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("ijhtxf", response.iterator().next().properties().user().firstName());
        Assertions.assertEquals("xbf", response.iterator().next().properties().user().lastName());
        Assertions.assertEquals("xnehmpvec", response.iterator().next().properties().user().emailAddress());
        Assertions.assertEquals("odebfqkkrbmpu", response.iterator().next().properties().user().upn());
        Assertions.assertEquals("riwflzlfb", response.iterator().next().properties().user().phoneNumber());
        Assertions.assertEquals(Region.WESTUS, response.iterator().next().properties().partnerProperties().region());
        Assertions.assertEquals("ycispnqzahmgkb",
            response.iterator().next().properties().partnerProperties().subdomain());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID,
            response.iterator().next().properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.DISABLE,
            response.iterator().next().properties().singleSignOnProperties().state());
        Assertions.assertEquals("ibnuqqkpik",
            response.iterator().next().properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("rgvtqag", response.iterator().next().properties().singleSignOnProperties().url());
        Assertions.assertEquals("ynhijggme",
            response.iterator().next().properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
    }
}
