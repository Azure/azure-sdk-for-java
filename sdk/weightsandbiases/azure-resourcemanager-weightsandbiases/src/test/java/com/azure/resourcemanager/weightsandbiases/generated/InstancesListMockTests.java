// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.weightsandbiases.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.weightsandbiases.WeightsAndBiasesManager;
import com.azure.resourcemanager.weightsandbiases.models.InstanceResource;
import com.azure.resourcemanager.weightsandbiases.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.weightsandbiases.models.Region;
import com.azure.resourcemanager.weightsandbiases.models.SingleSignOnStates;
import com.azure.resourcemanager.weightsandbiases.models.SingleSignOnType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InstancesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"marketplace\":{\"subscriptionId\":\"vgyuguos\",\"subscriptionStatus\":\"Suspended\",\"offerDetails\":{\"publisherId\":\"fssxqukkfplg\",\"offerId\":\"gsxnkjzkdeslpv\",\"planId\":\"opwi\",\"planName\":\"ghxpkdw\",\"termUnit\":\"aiuebbaumnyqu\",\"termId\":\"deoj\"}},\"user\":{\"firstName\":\"bckhsmtxpsi\",\"lastName\":\"tfhvpesapskrdqmh\",\"emailAddress\":\"dhtldwkyz\",\"upn\":\"utknc\",\"phoneNumber\":\"cwsvlxotog\"},\"provisioningState\":\"Canceled\",\"partnerProperties\":{\"region\":\"eastus\",\"subdomain\":\"qsx\"},\"singleSignOnProperties\":{\"type\":\"OpenId\",\"state\":\"Disable\",\"enterpriseAppId\":\"kvceoveilovnotyf\",\"url\":\"cnjbkcnxdhbt\",\"aadDomains\":[\"h\",\"wpn\"]}},\"identity\":{\"principalId\":\"oqnermclfpl\",\"tenantId\":\"oxuscrpabgyepsbj\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"kqujidsuyono\":{\"clientId\":\"gxywpmue\",\"principalId\":\"jzwf\"},\"moyrxvwfudwpz\":{\"clientId\":\"laocqxtccmg\",\"principalId\":\"dxyt\"},\"vpycanuzbp\":{\"clientId\":\"xhdzhlrqjbhckf\",\"principalId\":\"hrxsbk\"},\"seyvj\":{\"clientId\":\"afkuwb\",\"principalId\":\"nwbmeh\"}}},\"location\":\"rts\",\"tags\":{\"elmqk\":\"pkdeemaofmxagkvt\",\"hcdhmdual\":\"hahvljuahaq\"},\"id\":\"exq\",\"name\":\"vfadmws\",\"type\":\"crgvxpvgom\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WeightsAndBiasesManager manager = WeightsAndBiasesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<InstanceResource> response = manager.instances().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("rts", response.iterator().next().location());
        Assertions.assertEquals("pkdeemaofmxagkvt", response.iterator().next().tags().get("elmqk"));
        Assertions.assertEquals("vgyuguos", response.iterator().next().properties().marketplace().subscriptionId());
        Assertions.assertEquals("fssxqukkfplg",
            response.iterator().next().properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("gsxnkjzkdeslpv",
            response.iterator().next().properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("opwi", response.iterator().next().properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("ghxpkdw",
            response.iterator().next().properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("aiuebbaumnyqu",
            response.iterator().next().properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("deoj", response.iterator().next().properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("bckhsmtxpsi", response.iterator().next().properties().user().firstName());
        Assertions.assertEquals("tfhvpesapskrdqmh", response.iterator().next().properties().user().lastName());
        Assertions.assertEquals("dhtldwkyz", response.iterator().next().properties().user().emailAddress());
        Assertions.assertEquals("utknc", response.iterator().next().properties().user().upn());
        Assertions.assertEquals("cwsvlxotog", response.iterator().next().properties().user().phoneNumber());
        Assertions.assertEquals(Region.EASTUS, response.iterator().next().properties().partnerProperties().region());
        Assertions.assertEquals("qsx", response.iterator().next().properties().partnerProperties().subdomain());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID,
            response.iterator().next().properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.DISABLE,
            response.iterator().next().properties().singleSignOnProperties().state());
        Assertions.assertEquals("kvceoveilovnotyf",
            response.iterator().next().properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("cnjbkcnxdhbt", response.iterator().next().properties().singleSignOnProperties().url());
        Assertions.assertEquals("h",
            response.iterator().next().properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            response.iterator().next().identity().type());
    }
}
