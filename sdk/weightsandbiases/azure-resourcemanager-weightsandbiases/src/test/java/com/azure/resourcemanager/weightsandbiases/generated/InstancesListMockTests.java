// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.weightsandbiases.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.weightsandbiases.WeightsAndBiasesManager;
import com.azure.resourcemanager.weightsandbiases.models.InstanceResource;
import com.azure.resourcemanager.weightsandbiases.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.weightsandbiases.models.Region;
import com.azure.resourcemanager.weightsandbiases.models.SingleSignOnStates;
import com.azure.resourcemanager.weightsandbiases.models.SingleSignOnType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InstancesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"marketplace\":{\"subscriptionId\":\"iwkuofos\",\"subscriptionStatus\":\"Unsubscribed\",\"offerDetails\":{\"publisherId\":\"sauuimj\",\"offerId\":\"vxieduugidyj\",\"planId\":\"rfbyaosvexcso\",\"planName\":\"clhocohsl\",\"termUnit\":\"vleggzfbuhfmvfax\",\"termId\":\"feiithlvmez\"}},\"user\":{\"firstName\":\"shxmzsbbzoggigrx\",\"lastName\":\"ur\",\"emailAddress\":\"xxjnspydptk\",\"upn\":\"nkoukn\",\"phoneNumber\":\"dwtiukbldngkp\"},\"provisioningState\":\"Canceled\",\"partnerProperties\":{\"region\":\"eastus\",\"subdomain\":\"azyxoegukg\"},\"singleSignOnProperties\":{\"type\":\"Saml\",\"state\":\"Disable\",\"enterpriseAppId\":\"gygev\",\"url\":\"ntypmrbpizcdrqj\",\"aadDomains\":[\"ydnfyhxdeoejz\"]}},\"identity\":{\"principalId\":\"ifsjttgzfbishcb\",\"tenantId\":\"ajdeyeamdphaga\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"injep\":{\"principalId\":\"wgipwhono\",\"clientId\":\"gshwankixz\"},\"lwh\":{\"principalId\":\"tmryw\",\"clientId\":\"zoqftiyqzrnkcqvy\"},\"heun\":{\"principalId\":\"sicohoqqnwvlry\",\"clientId\":\"w\"}}},\"location\":\"qhgyxzkonocukok\",\"tags\":{\"szfkbe\":\"xuconu\",\"jmwvvj\":\"pewr\"},\"id\":\"kt\",\"name\":\"xsenhwlr\",\"type\":\"ffrzpwvlqdqgbiqy\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WeightsAndBiasesManager manager = WeightsAndBiasesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<InstanceResource> response = manager.instances().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("qhgyxzkonocukok", response.iterator().next().location());
        Assertions.assertEquals("xuconu", response.iterator().next().tags().get("szfkbe"));
        Assertions.assertEquals("iwkuofos", response.iterator().next().properties().marketplace().subscriptionId());
        Assertions.assertEquals("sauuimj",
            response.iterator().next().properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("vxieduugidyj",
            response.iterator().next().properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("rfbyaosvexcso",
            response.iterator().next().properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("clhocohsl",
            response.iterator().next().properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("vleggzfbuhfmvfax",
            response.iterator().next().properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("feiithlvmez",
            response.iterator().next().properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("shxmzsbbzoggigrx", response.iterator().next().properties().user().firstName());
        Assertions.assertEquals("ur", response.iterator().next().properties().user().lastName());
        Assertions.assertEquals("xxjnspydptk", response.iterator().next().properties().user().emailAddress());
        Assertions.assertEquals("nkoukn", response.iterator().next().properties().user().upn());
        Assertions.assertEquals("dwtiukbldngkp", response.iterator().next().properties().user().phoneNumber());
        Assertions.assertEquals(Region.EASTUS, response.iterator().next().properties().partnerProperties().region());
        Assertions.assertEquals("azyxoegukg", response.iterator().next().properties().partnerProperties().subdomain());
        Assertions.assertEquals(SingleSignOnType.SAML,
            response.iterator().next().properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.DISABLE,
            response.iterator().next().properties().singleSignOnProperties().state());
        Assertions.assertEquals("gygev",
            response.iterator().next().properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("ntypmrbpizcdrqj",
            response.iterator().next().properties().singleSignOnProperties().url());
        Assertions.assertEquals("ydnfyhxdeoejz",
            response.iterator().next().properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
    }
}
