// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.weightsandbiases.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.weightsandbiases.WeightsAndBiasesManager;
import com.azure.resourcemanager.weightsandbiases.models.InstanceProperties;
import com.azure.resourcemanager.weightsandbiases.models.InstanceResource;
import com.azure.resourcemanager.weightsandbiases.models.ManagedServiceIdentity;
import com.azure.resourcemanager.weightsandbiases.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.weightsandbiases.models.MarketplaceDetails;
import com.azure.resourcemanager.weightsandbiases.models.OfferDetails;
import com.azure.resourcemanager.weightsandbiases.models.PartnerProperties;
import com.azure.resourcemanager.weightsandbiases.models.Region;
import com.azure.resourcemanager.weightsandbiases.models.SingleSignOnPropertiesV2;
import com.azure.resourcemanager.weightsandbiases.models.SingleSignOnStates;
import com.azure.resourcemanager.weightsandbiases.models.SingleSignOnType;
import com.azure.resourcemanager.weightsandbiases.models.UserAssignedIdentity;
import com.azure.resourcemanager.weightsandbiases.models.UserDetails;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InstancesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"marketplace\":{\"subscriptionId\":\"n\",\"subscriptionStatus\":\"Subscribed\",\"offerDetails\":{\"publisherId\":\"xipeilpjzuaejx\",\"offerId\":\"ultskzbbtdz\",\"planId\":\"mv\",\"planName\":\"kgpwoz\",\"termUnit\":\"kfpbs\",\"termId\":\"ofd\"}},\"user\":{\"firstName\":\"uusdttouwa\",\"lastName\":\"ekqvkeln\",\"emailAddress\":\"vbxwyjsflhh\",\"upn\":\"aln\",\"phoneNumber\":\"xisxyawjoyaqcsl\"},\"provisioningState\":\"Succeeded\",\"partnerProperties\":{\"region\":\"eastus\",\"subdomain\":\"idzyexznelixhnr\"},\"singleSignOnProperties\":{\"type\":\"OpenId\",\"state\":\"Initial\",\"enterpriseAppId\":\"bnxknalaulppg\",\"url\":\"tpnapnyiropuhpig\",\"aadDomains\":[\"ylgqgitxmedjvcsl\",\"n\",\"wwncwzzhxgk\",\"rmgucnap\"]}},\"identity\":{\"principalId\":\"oellwp\",\"tenantId\":\"d\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"cq\":{\"clientId\":\"b\",\"principalId\":\"ceopzfqrhhuaopp\"},\"stmgrcfbunrmfqjh\":{\"clientId\":\"xolzdahzx\",\"principalId\":\"obgbkdmoizp\"},\"tswb\":{\"clientId\":\"xbpvjymjhx\",\"principalId\":\"yngudivk\"}}},\"location\":\"zvszj\",\"tags\":{\"ivetvtcq\":\"vjfdx\",\"mcbxvwvxysl\":\"qtdo\",\"ytkblmpew\":\"bhsfxob\"},\"id\":\"wfbkrvrns\",\"name\":\"shqjohxcrsbf\",\"type\":\"vasrruvwb\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WeightsAndBiasesManager manager = WeightsAndBiasesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        InstanceResource response = manager.instances()
            .define("isgwbnbbeldawkz")
            .withRegion("yzm")
            .withExistingResourceGroup("lf")
            .withTags(mapOf("jcbpwxqpsrknft", "ongmtsa", "yvxqtayriwwroy", "uvriuhprwm", "bycnojvkn", "bexrmcq",
                "qsgzvahapj", "e"))
            .withProperties(new InstanceProperties()
                .withMarketplace(new MarketplaceDetails().withSubscriptionId("io")
                    .withOfferDetails(new OfferDetails().withPublisherId("hakauhashsf")
                        .withOfferId("xosow")
                        .withPlanId("xcug")
                        .withPlanName("jooxdjebw")
                        .withTermUnit("cwwfvovbvme")
                        .withTermId("civyhzceuo")))
                .withUser(new UserDetails().withFirstName("jrwjueiotwm")
                    .withLastName("ytdxwit")
                    .withEmailAddress("rjaw")
                    .withUpn("wgxhn")
                    .withPhoneNumber("kxfbkpycgklwndn"))
                .withPartnerProperties(new PartnerProperties().withRegion(Region.JAPANEAST).withSubdomain("whvylw"))
                .withSingleSignOnProperties(new SingleSignOnPropertiesV2().withType(SingleSignOnType.OPEN_ID)
                    .withState(SingleSignOnStates.ENABLE)
                    .withEnterpriseAppId("ujznb")
                    .withUrl("ow")
                    .withAadDomains(Arrays.asList("rzqlveu", "lupj"))))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("cgwrtzjuz", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("zvszj", response.location());
        Assertions.assertEquals("vjfdx", response.tags().get("ivetvtcq"));
        Assertions.assertEquals("n", response.properties().marketplace().subscriptionId());
        Assertions.assertEquals("xipeilpjzuaejx", response.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("ultskzbbtdz", response.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("mv", response.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("kgpwoz", response.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("kfpbs", response.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("ofd", response.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("uusdttouwa", response.properties().user().firstName());
        Assertions.assertEquals("ekqvkeln", response.properties().user().lastName());
        Assertions.assertEquals("vbxwyjsflhh", response.properties().user().emailAddress());
        Assertions.assertEquals("aln", response.properties().user().upn());
        Assertions.assertEquals("xisxyawjoyaqcsl", response.properties().user().phoneNumber());
        Assertions.assertEquals(Region.EASTUS, response.properties().partnerProperties().region());
        Assertions.assertEquals("idzyexznelixhnr", response.properties().partnerProperties().subdomain());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID, response.properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.INITIAL, response.properties().singleSignOnProperties().state());
        Assertions.assertEquals("bnxknalaulppg", response.properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("tpnapnyiropuhpig", response.properties().singleSignOnProperties().url());
        Assertions.assertEquals("ylgqgitxmedjvcsl", response.properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
