// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.weightsandbiases.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.weightsandbiases.WeightsAndBiasesManager;
import com.azure.resourcemanager.weightsandbiases.models.InstanceProperties;
import com.azure.resourcemanager.weightsandbiases.models.InstanceResource;
import com.azure.resourcemanager.weightsandbiases.models.ManagedServiceIdentity;
import com.azure.resourcemanager.weightsandbiases.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.weightsandbiases.models.MarketplaceDetails;
import com.azure.resourcemanager.weightsandbiases.models.OfferDetails;
import com.azure.resourcemanager.weightsandbiases.models.PartnerProperties;
import com.azure.resourcemanager.weightsandbiases.models.Region;
import com.azure.resourcemanager.weightsandbiases.models.SingleSignOnPropertiesV2;
import com.azure.resourcemanager.weightsandbiases.models.SingleSignOnStates;
import com.azure.resourcemanager.weightsandbiases.models.SingleSignOnType;
import com.azure.resourcemanager.weightsandbiases.models.UserAssignedIdentity;
import com.azure.resourcemanager.weightsandbiases.models.UserDetails;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InstancesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"marketplace\":{\"subscriptionId\":\"vgyuguos\",\"subscriptionStatus\":\"Suspended\",\"offerDetails\":{\"publisherId\":\"fssxqukkfplg\",\"offerId\":\"gsxnkjzkdeslpv\",\"planId\":\"opwi\",\"planName\":\"ghxpkdw\",\"termUnit\":\"aiuebbaumnyqu\",\"termId\":\"deoj\"}},\"user\":{\"firstName\":\"bckhsmtxpsi\",\"lastName\":\"tfhvpesapskrdqmh\",\"emailAddress\":\"dhtldwkyz\",\"upn\":\"utknc\",\"phoneNumber\":\"cwsvlxotog\"},\"provisioningState\":\"Succeeded\",\"partnerProperties\":{\"region\":\"koreacentral\",\"subdomain\":\"pqsxvnmicy\"},\"singleSignOnProperties\":{\"type\":\"OpenId\",\"state\":\"Disable\",\"enterpriseAppId\":\"eil\",\"url\":\"notyfjfcnjbkcn\",\"aadDomains\":[\"bttk\",\"h\",\"wpn\"]}},\"identity\":{\"principalId\":\"oqnermclfpl\",\"tenantId\":\"oxuscrpabgyepsbj\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"kqujidsuyono\":{\"principalId\":\"gxywpmue\",\"clientId\":\"jzwf\"},\"moyrxvwfudwpz\":{\"principalId\":\"laocqxtccmg\",\"clientId\":\"dxyt\"},\"vpycanuzbp\":{\"principalId\":\"xhdzhlrqjbhckf\",\"clientId\":\"hrxsbk\"},\"seyvj\":{\"principalId\":\"afkuwb\",\"clientId\":\"nwbmeh\"}}},\"location\":\"rts\",\"tags\":{\"elmqk\":\"pkdeemaofmxagkvt\",\"hcdhmdual\":\"hahvljuahaq\"},\"id\":\"exq\",\"name\":\"vfadmws\",\"type\":\"crgvxpvgom\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WeightsAndBiasesManager manager = WeightsAndBiasesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        InstanceResource response = manager.instances()
            .define("vf")
            .withRegion("wbavxbniwdj")
            .withExistingResourceGroup("ihkaetcktvfc")
            .withTags(mapOf("ytxhp", "tsdbpgn"))
            .withProperties(new InstanceProperties()
                .withMarketplace(new MarketplaceDetails().withSubscriptionId("ymuctqhjfbebrj")
                    .withOfferDetails(new OfferDetails().withPublisherId("rfuwutt")
                        .withOfferId("xfvjrbirp")
                        .withPlanId("xepcyvahfn")
                        .withPlanName("kyqxjvuujqgidokg")
                        .withTermUnit("jyoxgvclt")
                        .withTermId("sncghkjeszz")))
                .withUser(new UserDetails().withFirstName("ijhtxf")
                    .withLastName("xbf")
                    .withEmailAddress("xnehmpvec")
                    .withUpn("odebfqkkrbmpu")
                    .withPhoneNumber("riwflzlfb"))
                .withPartnerProperties(new PartnerProperties().withRegion(Region.KOREACENTRAL).withSubdomain("zycispn"))
                .withSingleSignOnProperties(new SingleSignOnPropertiesV2().withType(SingleSignOnType.SAML)
                    .withState(SingleSignOnStates.DISABLE)
                    .withEnterpriseAppId("kbrpyydhibnuq")
                    .withUrl("pikad")
                    .withAadDomains(Arrays.asList("tqagnbuynh"))))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(
                    mapOf("yn", new UserAssignedIdentity(), "rqlfktsthsucocmn", new UserAssignedIdentity(),
                        "edckzywbiexzfey", new UserAssignedIdentity(), "zjancuxr", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("rts", response.location());
        Assertions.assertEquals("pkdeemaofmxagkvt", response.tags().get("elmqk"));
        Assertions.assertEquals("vgyuguos", response.properties().marketplace().subscriptionId());
        Assertions.assertEquals("fssxqukkfplg", response.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("gsxnkjzkdeslpv", response.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("opwi", response.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("ghxpkdw", response.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("aiuebbaumnyqu", response.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("deoj", response.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("bckhsmtxpsi", response.properties().user().firstName());
        Assertions.assertEquals("tfhvpesapskrdqmh", response.properties().user().lastName());
        Assertions.assertEquals("dhtldwkyz", response.properties().user().emailAddress());
        Assertions.assertEquals("utknc", response.properties().user().upn());
        Assertions.assertEquals("cwsvlxotog", response.properties().user().phoneNumber());
        Assertions.assertEquals(Region.KOREACENTRAL, response.properties().partnerProperties().region());
        Assertions.assertEquals("pqsxvnmicy", response.properties().partnerProperties().subdomain());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID, response.properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.DISABLE, response.properties().singleSignOnProperties().state());
        Assertions.assertEquals("eil", response.properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("notyfjfcnjbkcn", response.properties().singleSignOnProperties().url());
        Assertions.assertEquals("bttk", response.properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
