// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.weightsandbiases.generated;

import com.azure.resourcemanager.weightsandbiases.models.InstanceProperties;
import com.azure.resourcemanager.weightsandbiases.models.ManagedServiceIdentity;
import com.azure.resourcemanager.weightsandbiases.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.weightsandbiases.models.MarketplaceDetails;
import com.azure.resourcemanager.weightsandbiases.models.OfferDetails;
import com.azure.resourcemanager.weightsandbiases.models.PartnerProperties;
import com.azure.resourcemanager.weightsandbiases.models.Region;
import com.azure.resourcemanager.weightsandbiases.models.SingleSignOnPropertiesV2;
import com.azure.resourcemanager.weightsandbiases.models.SingleSignOnStates;
import com.azure.resourcemanager.weightsandbiases.models.SingleSignOnType;
import com.azure.resourcemanager.weightsandbiases.models.UserDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Instances CreateOrUpdate.
 */
public final class InstancesCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2024-09-18-preview/Instances_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: Instances_CreateOrUpdate - generated by [MaximumSet] rule.
     * 
     * @param manager Entry point to WeightsAndBiasesManager.
     */
    public static void instancesCreateOrUpdateGeneratedByMaximumSetRule(
        com.azure.resourcemanager.weightsandbiases.WeightsAndBiasesManager manager) {
        manager.instances()
            .define("myinstance")
            .withRegion("pudewmshbcvbt")
            .withExistingResourceGroup("rgopenapi")
            .withTags(mapOf())
            .withProperties(new InstanceProperties()
                .withMarketplace(new MarketplaceDetails().withSubscriptionId("00000000-0000-0000-0000-000000000000")
                    .withOfferDetails(new OfferDetails().withPublisherId("kf")
                        .withOfferId("rfgoevxeke")
                        .withPlanId("ufopn")
                        .withPlanName("adysakgqlryufffz")
                        .withTermUnit("dgrkojow")
                        .withTermId("kklscqq")))
                .withUser(new UserDetails().withFirstName("kiiehcojcldrlndoid")
                    .withLastName("zhkvsfqvthwkfkvgxcruyud")
                    .withEmailAddress("user@outlook.com")
                    .withUpn("rmjpgqchpbw")
                    .withPhoneNumber("cogmqmuwfcpstkwbzgkgo"))
                .withPartnerProperties(
                    new PartnerProperties().withRegion(Region.EASTUS).withSubdomain("xkecokwnwtkwnkxfgucmzybzzb"))
                .withSingleSignOnProperties(new SingleSignOnPropertiesV2().withType(SingleSignOnType.SAML)
                    .withState(SingleSignOnStates.INITIAL)
                    .withEnterpriseAppId("hkxtmpv")
                    .withUrl("iqlemoksqdygqyxpp")
                    .withAadDomains(Arrays.asList("mxnw"))))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf()))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
