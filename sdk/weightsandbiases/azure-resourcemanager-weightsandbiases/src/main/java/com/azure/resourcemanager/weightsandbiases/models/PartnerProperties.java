// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.weightsandbiases.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Partner's specific Properties.
 */
@Fluent
public final class PartnerProperties implements JsonSerializable<PartnerProperties> {
    /*
     * The region of the instance
     */
    private Region region;

    /*
     * The subdomain of the instance
     */
    private String subdomain;

    /**
     * Creates an instance of PartnerProperties class.
     */
    public PartnerProperties() {
    }

    /**
     * Get the region property: The region of the instance.
     * 
     * @return the region value.
     */
    public Region region() {
        return this.region;
    }

    /**
     * Set the region property: The region of the instance.
     * 
     * @param region the region value to set.
     * @return the PartnerProperties object itself.
     */
    public PartnerProperties withRegion(Region region) {
        this.region = region;
        return this;
    }

    /**
     * Get the subdomain property: The subdomain of the instance.
     * 
     * @return the subdomain value.
     */
    public String subdomain() {
        return this.subdomain;
    }

    /**
     * Set the subdomain property: The subdomain of the instance.
     * 
     * @param subdomain the subdomain value to set.
     * @return the PartnerProperties object itself.
     */
    public PartnerProperties withSubdomain(String subdomain) {
        this.subdomain = subdomain;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (region() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property region in model PartnerProperties"));
        }
        if (subdomain() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property subdomain in model PartnerProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PartnerProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("region", this.region == null ? null : this.region.toString());
        jsonWriter.writeStringField("subdomain", this.subdomain);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PartnerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PartnerProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PartnerProperties.
     */
    public static PartnerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PartnerProperties deserializedPartnerProperties = new PartnerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("region".equals(fieldName)) {
                    deserializedPartnerProperties.region = Region.fromString(reader.getString());
                } else if ("subdomain".equals(fieldName)) {
                    deserializedPartnerProperties.subdomain = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPartnerProperties;
        });
    }
}
