// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.astro.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.astro.fluent.models.OrganizationResourceInner;
import com.azure.resourcemanager.astro.models.LiftrBaseDataOrganizationProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseDataPartnerOrganizationProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseMarketplaceDetails;
import com.azure.resourcemanager.astro.models.LiftrBaseOfferDetails;
import com.azure.resourcemanager.astro.models.LiftrBaseSingleSignOnProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseUserDetails;
import com.azure.resourcemanager.astro.models.ManagedServiceIdentity;
import com.azure.resourcemanager.astro.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.astro.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.astro.models.OrganizationResourceListResult;
import com.azure.resourcemanager.astro.models.SingleSignOnStates;
import com.azure.resourcemanager.astro.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OrganizationResourceListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OrganizationResourceListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"marketplace\":{\"subscriptionId\":\"ithxqhabifpi\",\"subscriptionStatus\":\"Subscribed\",\"offerDetails\":{\"publisherId\":\"czbysc\",\"offerId\":\"pqxu\",\"planId\":\"ivyqniwbybrkxvd\",\"planName\":\"jgrtfwvukxga\",\"termUnit\":\"ccsnhsjc\",\"termId\":\"ejhkry\"}},\"user\":{\"firstName\":\"tnapczwlokjyemkk\",\"lastName\":\"ni\",\"emailAddress\":\"joxzjnchgejspodm\",\"upn\":\"lzydehojwyahux\",\"phoneNumber\":\"pmqnja\"},\"provisioningState\":\"Canceled\",\"partnerOrganizationProperties\":{\"organizationId\":\"sprozvcput\",\"workspaceId\":\"jvwmfda\",\"organizationName\":\"scmdvpjhulsuu\",\"workspaceName\":\"kjozkrwfnd\",\"singleSignOnProperties\":{\"singleSignOnState\":\"Enable\",\"enterpriseAppId\":\"slwejdpvw\",\"singleSignOnUrl\":\"oqpsoa\",\"aadDomains\":[\"azakl\",\"lahbcryff\"],\"provisioningState\":\"Succeeded\"}}},\"identity\":{\"principalId\":\"845d2b3a-6d1b-4a85-a909-9b1a9df5cd82\",\"tenantId\":\"b653b4b1-fa83-48b8-948e-92d72dd6862f\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"ojakhmsbzjhcrze\":{\"principalId\":\"0068932c-6d30-4279-a2ab-f67cf269a3a0\",\"clientId\":\"174cfcb2-7979-45a6-bbfb-8e52cbbce6ac\"},\"hlxaolthqtr\":{\"principalId\":\"4d47d5f5-982e-4049-8d79-b8ed003a94a7\",\"clientId\":\"d2f323b0-6a7d-43de-8611-295a6e187980\"},\"bpf\":{\"principalId\":\"04958410-0711-4d98-b848-bc1d6d02970b\",\"clientId\":\"bf6ad3e9-5605-4d10-a6ea-3647629e92dc\"}}},\"location\":\"s\",\"tags\":{\"wzo\":\"gvfcj\",\"np\":\"xjtfelluwfzit\",\"lxofpdvhpfxxypin\":\"qfpjk\"},\"id\":\"nmayhuybb\",\"name\":\"podepoo\",\"type\":\"inuvamiheogn\"}],\"nextLink\":\"xzxtheo\"}")
            .toObject(OrganizationResourceListResult.class);
        Assertions.assertEquals("s", model.value().get(0).location());
        Assertions.assertEquals("gvfcj", model.value().get(0).tags().get("wzo"));
        Assertions.assertEquals("ithxqhabifpi", model.value().get(0).properties().marketplace().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.SUBSCRIBED,
            model.value().get(0).properties().marketplace().subscriptionStatus());
        Assertions.assertEquals("czbysc", model.value().get(0).properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("pqxu", model.value().get(0).properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("ivyqniwbybrkxvd",
            model.value().get(0).properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("jgrtfwvukxga",
            model.value().get(0).properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("ccsnhsjc", model.value().get(0).properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("ejhkry", model.value().get(0).properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("tnapczwlokjyemkk", model.value().get(0).properties().user().firstName());
        Assertions.assertEquals("ni", model.value().get(0).properties().user().lastName());
        Assertions.assertEquals("joxzjnchgejspodm", model.value().get(0).properties().user().emailAddress());
        Assertions.assertEquals("lzydehojwyahux", model.value().get(0).properties().user().upn());
        Assertions.assertEquals("pmqnja", model.value().get(0).properties().user().phoneNumber());
        Assertions.assertEquals("sprozvcput",
            model.value().get(0).properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("jvwmfda",
            model.value().get(0).properties().partnerOrganizationProperties().workspaceId());
        Assertions.assertEquals("scmdvpjhulsuu",
            model.value().get(0).properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals("kjozkrwfnd",
            model.value().get(0).properties().partnerOrganizationProperties().workspaceName());
        Assertions.assertEquals(SingleSignOnStates.ENABLE,
            model.value()
                .get(0)
                .properties()
                .partnerOrganizationProperties()
                .singleSignOnProperties()
                .singleSignOnState());
        Assertions.assertEquals("slwejdpvw",
            model.value()
                .get(0)
                .properties()
                .partnerOrganizationProperties()
                .singleSignOnProperties()
                .enterpriseAppId());
        Assertions.assertEquals("oqpsoa",
            model.value()
                .get(0)
                .properties()
                .partnerOrganizationProperties()
                .singleSignOnProperties()
                .singleSignOnUrl());
        Assertions.assertEquals("azakl",
            model.value()
                .get(0)
                .properties()
                .partnerOrganizationProperties()
                .singleSignOnProperties()
                .aadDomains()
                .get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            model.value().get(0).identity().type());
        Assertions.assertEquals("xzxtheo", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OrganizationResourceListResult model
            = new OrganizationResourceListResult()
                .withValue(
                    Arrays
                        .asList(new OrganizationResourceInner().withLocation("s")
                            .withTags(mapOf("wzo", "gvfcj", "np", "xjtfelluwfzit", "lxofpdvhpfxxypin", "qfpjk"))
                            .withProperties(new LiftrBaseDataOrganizationProperties()
                                .withMarketplace(new LiftrBaseMarketplaceDetails().withSubscriptionId("ithxqhabifpi")
                                    .withSubscriptionStatus(MarketplaceSubscriptionStatus.SUBSCRIBED)
                                    .withOfferDetails(new LiftrBaseOfferDetails().withPublisherId("czbysc")
                                        .withOfferId("pqxu")
                                        .withPlanId("ivyqniwbybrkxvd")
                                        .withPlanName("jgrtfwvukxga")
                                        .withTermUnit("ccsnhsjc")
                                        .withTermId("ejhkry")))
                                .withUser(new LiftrBaseUserDetails().withFirstName("tnapczwlokjyemkk")
                                    .withLastName("ni")
                                    .withEmailAddress("joxzjnchgejspodm")
                                    .withUpn("lzydehojwyahux")
                                    .withPhoneNumber("pmqnja"))
                                .withPartnerOrganizationProperties(
                                    new LiftrBaseDataPartnerOrganizationProperties().withOrganizationId("sprozvcput")
                                        .withWorkspaceId("jvwmfda")
                                        .withOrganizationName("scmdvpjhulsuu")
                                        .withWorkspaceName("kjozkrwfnd")
                                        .withSingleSignOnProperties(new LiftrBaseSingleSignOnProperties()
                                            .withSingleSignOnState(SingleSignOnStates.ENABLE)
                                            .withEnterpriseAppId("slwejdpvw")
                                            .withSingleSignOnUrl("oqpsoa")
                                            .withAadDomains(Arrays.asList("azakl", "lahbcryff")))))
                            .withIdentity(new ManagedServiceIdentity()
                                .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                                .withUserAssignedIdentities(mapOf("ojakhmsbzjhcrze", new UserAssignedIdentity(),
                                    "hlxaolthqtr", new UserAssignedIdentity(), "bpf", new UserAssignedIdentity())))))
                .withNextLink("xzxtheo");
        model = BinaryData.fromObject(model).toObject(OrganizationResourceListResult.class);
        Assertions.assertEquals("s", model.value().get(0).location());
        Assertions.assertEquals("gvfcj", model.value().get(0).tags().get("wzo"));
        Assertions.assertEquals("ithxqhabifpi", model.value().get(0).properties().marketplace().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.SUBSCRIBED,
            model.value().get(0).properties().marketplace().subscriptionStatus());
        Assertions.assertEquals("czbysc", model.value().get(0).properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("pqxu", model.value().get(0).properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("ivyqniwbybrkxvd",
            model.value().get(0).properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("jgrtfwvukxga",
            model.value().get(0).properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("ccsnhsjc", model.value().get(0).properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("ejhkry", model.value().get(0).properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("tnapczwlokjyemkk", model.value().get(0).properties().user().firstName());
        Assertions.assertEquals("ni", model.value().get(0).properties().user().lastName());
        Assertions.assertEquals("joxzjnchgejspodm", model.value().get(0).properties().user().emailAddress());
        Assertions.assertEquals("lzydehojwyahux", model.value().get(0).properties().user().upn());
        Assertions.assertEquals("pmqnja", model.value().get(0).properties().user().phoneNumber());
        Assertions.assertEquals("sprozvcput",
            model.value().get(0).properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("jvwmfda",
            model.value().get(0).properties().partnerOrganizationProperties().workspaceId());
        Assertions.assertEquals("scmdvpjhulsuu",
            model.value().get(0).properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals("kjozkrwfnd",
            model.value().get(0).properties().partnerOrganizationProperties().workspaceName());
        Assertions.assertEquals(SingleSignOnStates.ENABLE,
            model.value()
                .get(0)
                .properties()
                .partnerOrganizationProperties()
                .singleSignOnProperties()
                .singleSignOnState());
        Assertions.assertEquals("slwejdpvw",
            model.value()
                .get(0)
                .properties()
                .partnerOrganizationProperties()
                .singleSignOnProperties()
                .enterpriseAppId());
        Assertions.assertEquals("oqpsoa",
            model.value()
                .get(0)
                .properties()
                .partnerOrganizationProperties()
                .singleSignOnProperties()
                .singleSignOnUrl());
        Assertions.assertEquals("azakl",
            model.value()
                .get(0)
                .properties()
                .partnerOrganizationProperties()
                .singleSignOnProperties()
                .aadDomains()
                .get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            model.value().get(0).identity().type());
        Assertions.assertEquals("xzxtheo", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
