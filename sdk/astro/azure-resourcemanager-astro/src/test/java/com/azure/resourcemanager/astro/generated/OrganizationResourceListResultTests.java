// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.astro.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.astro.fluent.models.OrganizationResourceInner;
import com.azure.resourcemanager.astro.models.LiftrBaseDataOrganizationProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseDataPartnerOrganizationProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseMarketplaceDetails;
import com.azure.resourcemanager.astro.models.LiftrBaseOfferDetails;
import com.azure.resourcemanager.astro.models.LiftrBaseSingleSignOnProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseUserDetails;
import com.azure.resourcemanager.astro.models.ManagedServiceIdentity;
import com.azure.resourcemanager.astro.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.astro.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.astro.models.OrganizationResourceListResult;
import com.azure.resourcemanager.astro.models.SingleSignOnStates;
import com.azure.resourcemanager.astro.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OrganizationResourceListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OrganizationResourceListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"marketplace\":{\"subscriptionId\":\"git\",\"subscriptionStatus\":\"Unsubscribed\",\"offerDetails\":{\"publisherId\":\"hab\",\"offerId\":\"fpikxwczb\",\"planId\":\"scnpqxuhivy\",\"planName\":\"iwbybrkxvdumjg\",\"termUnit\":\"fwvuk\",\"termId\":\"audccsnhs\"}},\"user\":{\"firstName\":\"cnyejhkryhtnapcz\",\"lastName\":\"lokjyemkk\",\"emailAddress\":\"ni\",\"upn\":\"oxzjnchgejspod\",\"phoneNumber\":\"ilzyd\"},\"provisioningState\":\"Succeeded\",\"partnerOrganizationProperties\":{\"organizationId\":\"yahux\",\"workspaceId\":\"pmqnja\",\"organizationName\":\"wixjsprozvcp\",\"workspaceName\":\"eg\",\"singleSignOnProperties\":{\"singleSignOnState\":\"Enable\",\"enterpriseAppId\":\"datscmd\",\"singleSignOnUrl\":\"jhulsuuvmkjo\",\"aadDomains\":[\"wfndiodjpsl\",\"ej\"],\"provisioningState\":\"Succeeded\"}}},\"identity\":{\"principalId\":\"b9794e59-fd49-4c19-b69f-bb840ec86cde\",\"tenantId\":\"a1fc1684-4306-4849-a41e-f3dab88f2135\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"acctazakljla\":{\"principalId\":\"d039d860-8373-46be-99ae-9c2e9e439935\",\"clientId\":\"9ba83c08-232e-4f47-ac60-0eb0509a2698\"},\"ryffdfdosy\":{\"principalId\":\"deaadb12-20d2-4a39-ac6e-772196727fcc\",\"clientId\":\"82fd21b1-1830-47d0-9964-c423322ec8df\"},\"paojakhmsbzjh\":{\"principalId\":\"fe297875-2234-40c7-946a-603328f353b2\",\"clientId\":\"d359e950-efed-4aa0-a8b4-7dfd79d135b3\"},\"evdphlxaol\":{\"principalId\":\"9206da08-b089-4f7a-bffe-9263337b3694\",\"clientId\":\"cd745d3a-f042-4669-baad-0e57c9fd6c99\"}}},\"location\":\"qtrgqjbpfzfsinzg\",\"tags\":{\"j\":\"jrwzox\",\"fpjkjlxofp\":\"felluwfzitonpe\",\"uybbkpodep\":\"vhpfxxypininmay\",\"zxtheotusivyevcc\":\"oginuvamiheognar\"},\"id\":\"qi\",\"name\":\"nhungbw\",\"type\":\"zrnf\"}],\"nextLink\":\"xgispemvtzfkufu\"}")
            .toObject(OrganizationResourceListResult.class);
        Assertions.assertEquals("qtrgqjbpfzfsinzg", model.value().get(0).location());
        Assertions.assertEquals("jrwzox", model.value().get(0).tags().get("j"));
        Assertions.assertEquals("git", model.value().get(0).properties().marketplace().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.UNSUBSCRIBED,
            model.value().get(0).properties().marketplace().subscriptionStatus());
        Assertions.assertEquals("hab", model.value().get(0).properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("fpikxwczb", model.value().get(0).properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("scnpqxuhivy", model.value().get(0).properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("iwbybrkxvdumjg",
            model.value().get(0).properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("fwvuk", model.value().get(0).properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("audccsnhs", model.value().get(0).properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("cnyejhkryhtnapcz", model.value().get(0).properties().user().firstName());
        Assertions.assertEquals("lokjyemkk", model.value().get(0).properties().user().lastName());
        Assertions.assertEquals("ni", model.value().get(0).properties().user().emailAddress());
        Assertions.assertEquals("oxzjnchgejspod", model.value().get(0).properties().user().upn());
        Assertions.assertEquals("ilzyd", model.value().get(0).properties().user().phoneNumber());
        Assertions.assertEquals("yahux",
            model.value().get(0).properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("pmqnja",
            model.value().get(0).properties().partnerOrganizationProperties().workspaceId());
        Assertions.assertEquals("wixjsprozvcp",
            model.value().get(0).properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals("eg",
            model.value().get(0).properties().partnerOrganizationProperties().workspaceName());
        Assertions.assertEquals(SingleSignOnStates.ENABLE, model.value().get(0).properties()
            .partnerOrganizationProperties().singleSignOnProperties().singleSignOnState());
        Assertions.assertEquals("datscmd", model.value().get(0).properties().partnerOrganizationProperties()
            .singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("jhulsuuvmkjo", model.value().get(0).properties().partnerOrganizationProperties()
            .singleSignOnProperties().singleSignOnUrl());
        Assertions.assertEquals("wfndiodjpsl", model.value().get(0).properties().partnerOrganizationProperties()
            .singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("xgispemvtzfkufu", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OrganizationResourceListResult model = new OrganizationResourceListResult()
            .withValue(Arrays.asList(new OrganizationResourceInner().withLocation("qtrgqjbpfzfsinzg")
                .withTags(mapOf("j", "jrwzox", "fpjkjlxofp", "felluwfzitonpe", "uybbkpodep", "vhpfxxypininmay",
                    "zxtheotusivyevcc", "oginuvamiheognar"))
                .withProperties(new LiftrBaseDataOrganizationProperties()
                    .withMarketplace(new LiftrBaseMarketplaceDetails().withSubscriptionId("git")
                        .withSubscriptionStatus(MarketplaceSubscriptionStatus.UNSUBSCRIBED)
                        .withOfferDetails(new LiftrBaseOfferDetails().withPublisherId("hab").withOfferId("fpikxwczb")
                            .withPlanId("scnpqxuhivy").withPlanName("iwbybrkxvdumjg").withTermUnit("fwvuk")
                            .withTermId("audccsnhs")))
                    .withUser(new LiftrBaseUserDetails().withFirstName("cnyejhkryhtnapcz").withLastName("lokjyemkk")
                        .withEmailAddress("ni").withUpn("oxzjnchgejspod").withPhoneNumber("ilzyd"))
                    .withPartnerOrganizationProperties(new LiftrBaseDataPartnerOrganizationProperties()
                        .withOrganizationId("yahux").withWorkspaceId("pmqnja").withOrganizationName("wixjsprozvcp")
                        .withWorkspaceName("eg")
                        .withSingleSignOnProperties(new LiftrBaseSingleSignOnProperties()
                            .withSingleSignOnState(SingleSignOnStates.ENABLE).withEnterpriseAppId("datscmd")
                            .withSingleSignOnUrl("jhulsuuvmkjo").withAadDomains(Arrays.asList("wfndiodjpsl", "ej")))))
                .withIdentity(
                    new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                        .withUserAssignedIdentities(mapOf("acctazakljla", new UserAssignedIdentity(), "ryffdfdosy",
                            new UserAssignedIdentity(), "paojakhmsbzjh", new UserAssignedIdentity(), "evdphlxaol",
                            new UserAssignedIdentity())))))
            .withNextLink("xgispemvtzfkufu");
        model = BinaryData.fromObject(model).toObject(OrganizationResourceListResult.class);
        Assertions.assertEquals("qtrgqjbpfzfsinzg", model.value().get(0).location());
        Assertions.assertEquals("jrwzox", model.value().get(0).tags().get("j"));
        Assertions.assertEquals("git", model.value().get(0).properties().marketplace().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.UNSUBSCRIBED,
            model.value().get(0).properties().marketplace().subscriptionStatus());
        Assertions.assertEquals("hab", model.value().get(0).properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("fpikxwczb", model.value().get(0).properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("scnpqxuhivy", model.value().get(0).properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("iwbybrkxvdumjg",
            model.value().get(0).properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("fwvuk", model.value().get(0).properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("audccsnhs", model.value().get(0).properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("cnyejhkryhtnapcz", model.value().get(0).properties().user().firstName());
        Assertions.assertEquals("lokjyemkk", model.value().get(0).properties().user().lastName());
        Assertions.assertEquals("ni", model.value().get(0).properties().user().emailAddress());
        Assertions.assertEquals("oxzjnchgejspod", model.value().get(0).properties().user().upn());
        Assertions.assertEquals("ilzyd", model.value().get(0).properties().user().phoneNumber());
        Assertions.assertEquals("yahux",
            model.value().get(0).properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("pmqnja",
            model.value().get(0).properties().partnerOrganizationProperties().workspaceId());
        Assertions.assertEquals("wixjsprozvcp",
            model.value().get(0).properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals("eg",
            model.value().get(0).properties().partnerOrganizationProperties().workspaceName());
        Assertions.assertEquals(SingleSignOnStates.ENABLE, model.value().get(0).properties()
            .partnerOrganizationProperties().singleSignOnProperties().singleSignOnState());
        Assertions.assertEquals("datscmd", model.value().get(0).properties().partnerOrganizationProperties()
            .singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("jhulsuuvmkjo", model.value().get(0).properties().partnerOrganizationProperties()
            .singleSignOnProperties().singleSignOnUrl());
        Assertions.assertEquals("wfndiodjpsl", model.value().get(0).properties().partnerOrganizationProperties()
            .singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("xgispemvtzfkufu", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
