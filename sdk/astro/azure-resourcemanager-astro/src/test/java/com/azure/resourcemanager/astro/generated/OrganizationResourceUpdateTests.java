// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.astro.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.astro.models.LiftrBaseDataPartnerOrganizationPropertiesUpdate;
import com.azure.resourcemanager.astro.models.LiftrBaseSingleSignOnProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseUserDetailsUpdate;
import com.azure.resourcemanager.astro.models.ManagedServiceIdentity;
import com.azure.resourcemanager.astro.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.astro.models.OrganizationResourceUpdate;
import com.azure.resourcemanager.astro.models.OrganizationResourceUpdateProperties;
import com.azure.resourcemanager.astro.models.SingleSignOnStates;
import com.azure.resourcemanager.astro.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OrganizationResourceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OrganizationResourceUpdate model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"041df0ad-7acb-4136-bc88-01aa59ff4a9e\",\"tenantId\":\"7dcd50a0-0656-4e28-b6c1-0cddfa003e86\",\"type\":\"None\",\"userAssignedIdentities\":{\"ocjjxhvpmouexh\":{\"principalId\":\"3b33d132-b045-48ba-9d2c-0214dfee602a\",\"clientId\":\"85b8f365-aca2-4028-ba9f-46c1ec65e614\"},\"i\":{\"principalId\":\"cc193b46-ff6d-4b3c-a553-f00b8b2f0a04\",\"clientId\":\"e968b5d5-2b7f-4228-b8a1-638c99a74d5c\"},\"ojnxqbzvdd\":{\"principalId\":\"b783da99-c0f2-4568-a3bb-61484d5a3d8d\",\"clientId\":\"75e8a5ac-2bb4-49d6-99e5-19de114daf96\"}}},\"tags\":{\"btwnpzaoqvuhrhcf\":\"ndei\",\"pyeicxm\":\"cyddglmjthjqk\",\"ixuigdtopbobj\":\"ciwqvhk\"},\"properties\":{\"user\":{\"firstName\":\"e\",\"lastName\":\"a\",\"emailAddress\":\"uhrzayvvt\",\"upn\":\"vdfgiotk\",\"phoneNumber\":\"utqxlngx\"},\"partnerOrganizationProperties\":{\"organizationId\":\"gug\",\"workspaceId\":\"krxd\",\"organizationName\":\"i\",\"workspaceName\":\"thz\",\"singleSignOnProperties\":{\"singleSignOnState\":\"Disable\",\"enterpriseAppId\":\"abhjybi\",\"singleSignOnUrl\":\"h\",\"aadDomains\":[\"bowsk\",\"nyktzlcuiy\",\"gqywgndrv\"],\"provisioningState\":\"Succeeded\"}}}}")
            .toObject(OrganizationResourceUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("ndei", model.tags().get("btwnpzaoqvuhrhcf"));
        Assertions.assertEquals("e", model.properties().user().firstName());
        Assertions.assertEquals("a", model.properties().user().lastName());
        Assertions.assertEquals("uhrzayvvt", model.properties().user().emailAddress());
        Assertions.assertEquals("vdfgiotk", model.properties().user().upn());
        Assertions.assertEquals("utqxlngx", model.properties().user().phoneNumber());
        Assertions.assertEquals("gug", model.properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("krxd", model.properties().partnerOrganizationProperties().workspaceId());
        Assertions.assertEquals("i", model.properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals("thz", model.properties().partnerOrganizationProperties().workspaceName());
        Assertions.assertEquals(SingleSignOnStates.DISABLE,
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnState());
        Assertions.assertEquals("abhjybi",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("h",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnUrl());
        Assertions.assertEquals("bowsk",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().aadDomains().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OrganizationResourceUpdate model = new OrganizationResourceUpdate()
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("ocjjxhvpmouexh", new UserAssignedIdentity(), "i",
                    new UserAssignedIdentity(), "ojnxqbzvdd", new UserAssignedIdentity())))
            .withTags(mapOf("btwnpzaoqvuhrhcf", "ndei", "pyeicxm", "cyddglmjthjqk", "ixuigdtopbobj", "ciwqvhk"))
            .withProperties(new OrganizationResourceUpdateProperties()
                .withUser(new LiftrBaseUserDetailsUpdate().withFirstName("e").withLastName("a")
                    .withEmailAddress("uhrzayvvt").withUpn("vdfgiotk").withPhoneNumber("utqxlngx"))
                .withPartnerOrganizationProperties(new LiftrBaseDataPartnerOrganizationPropertiesUpdate()
                    .withOrganizationId("gug").withWorkspaceId("krxd").withOrganizationName("i")
                    .withWorkspaceName("thz")
                    .withSingleSignOnProperties(new LiftrBaseSingleSignOnProperties()
                        .withSingleSignOnState(SingleSignOnStates.DISABLE).withEnterpriseAppId("abhjybi")
                        .withSingleSignOnUrl("h").withAadDomains(Arrays.asList("bowsk", "nyktzlcuiy", "gqywgndrv")))));
        model = BinaryData.fromObject(model).toObject(OrganizationResourceUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("ndei", model.tags().get("btwnpzaoqvuhrhcf"));
        Assertions.assertEquals("e", model.properties().user().firstName());
        Assertions.assertEquals("a", model.properties().user().lastName());
        Assertions.assertEquals("uhrzayvvt", model.properties().user().emailAddress());
        Assertions.assertEquals("vdfgiotk", model.properties().user().upn());
        Assertions.assertEquals("utqxlngx", model.properties().user().phoneNumber());
        Assertions.assertEquals("gug", model.properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("krxd", model.properties().partnerOrganizationProperties().workspaceId());
        Assertions.assertEquals("i", model.properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals("thz", model.properties().partnerOrganizationProperties().workspaceName());
        Assertions.assertEquals(SingleSignOnStates.DISABLE,
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnState());
        Assertions.assertEquals("abhjybi",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("h",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnUrl());
        Assertions.assertEquals("bowsk",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().aadDomains().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
