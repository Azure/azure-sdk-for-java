// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.astro.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.astro.models.LiftrBaseDataPartnerOrganizationPropertiesUpdate;
import com.azure.resourcemanager.astro.models.LiftrBaseMarketplaceDetailsUpdate;
import com.azure.resourcemanager.astro.models.LiftrBaseOfferDetailsUpdate;
import com.azure.resourcemanager.astro.models.LiftrBaseSingleSignOnProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseUserDetailsUpdate;
import com.azure.resourcemanager.astro.models.ManagedServiceIdentity;
import com.azure.resourcemanager.astro.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.astro.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.astro.models.OrganizationResourceUpdate;
import com.azure.resourcemanager.astro.models.OrganizationResourceUpdateProperties;
import com.azure.resourcemanager.astro.models.SingleSignOnStates;
import com.azure.resourcemanager.astro.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OrganizationResourceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OrganizationResourceUpdate model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"81c1549d-4d0b-440a-96fd-731fe413551e\",\"tenantId\":\"4e83b083-f6d0-4558-bab6-659c5a4904da\",\"type\":\"None\",\"userAssignedIdentities\":{\"ocjjxhvpmouexh\":{\"principalId\":\"1783fc52-5cd9-4c4e-8fdc-401703a512e6\",\"clientId\":\"021e4589-1282-4d97-9b22-ed2d6372b16a\"},\"i\":{\"principalId\":\"1c6b1c59-eaee-4ce4-9901-156e62ab1263\",\"clientId\":\"017543d5-9482-4331-aa95-ba7968051e8c\"},\"ojnxqbzvdd\":{\"principalId\":\"231cf6e1-92d4-40ed-8764-4730ed6f1722\",\"clientId\":\"4ee66af8-97aa-4f49-b24c-4e39184d5d72\"}}},\"tags\":{\"btwnpzaoqvuhrhcf\":\"ndei\",\"pyeicxm\":\"cyddglmjthjqk\",\"ixuigdtopbobj\":\"ciwqvhk\"},\"properties\":{\"marketplace\":{\"subscriptionId\":\"e\",\"subscriptionStatus\":\"PendingFulfillmentStart\",\"offerDetails\":{\"publisherId\":\"uhrzayvvt\",\"offerId\":\"vdfgiotk\",\"planId\":\"utqxlngx\",\"planName\":\"fgugnxkrxdqmid\",\"termUnit\":\"hzrvqd\",\"termId\":\"bhj\"}},\"user\":{\"firstName\":\"gehoqfbowskany\",\"lastName\":\"zlcuiywgqywgndrv\",\"emailAddress\":\"hzgpphrcgyncocpe\",\"upn\":\"vmmcoofs\",\"phoneNumber\":\"zevgb\"},\"partnerOrganizationProperties\":{\"organizationId\":\"qabcypm\",\"workspaceId\":\"kwlzuvccfwnfn\",\"organizationName\":\"cfionl\",\"workspaceName\":\"x\",\"singleSignOnProperties\":{\"singleSignOnState\":\"Enable\",\"enterpriseAppId\":\"zxdpnqbqqw\",\"singleSignOnUrl\":\"jfeallnwsub\",\"aadDomains\":[\"jampmngnzscxaqw\",\"ochcbonqvpkvl\"],\"provisioningState\":\"Canceled\"}}}}")
            .toObject(OrganizationResourceUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("ndei", model.tags().get("btwnpzaoqvuhrhcf"));
        Assertions.assertEquals("e", model.properties().marketplace().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.PENDING_FULFILLMENT_START,
            model.properties().marketplace().subscriptionStatus());
        Assertions.assertEquals("uhrzayvvt", model.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("vdfgiotk", model.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("utqxlngx", model.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("fgugnxkrxdqmid", model.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("hzrvqd", model.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("bhj", model.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("gehoqfbowskany", model.properties().user().firstName());
        Assertions.assertEquals("zlcuiywgqywgndrv", model.properties().user().lastName());
        Assertions.assertEquals("hzgpphrcgyncocpe", model.properties().user().emailAddress());
        Assertions.assertEquals("vmmcoofs", model.properties().user().upn());
        Assertions.assertEquals("zevgb", model.properties().user().phoneNumber());
        Assertions.assertEquals("qabcypm", model.properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("kwlzuvccfwnfn", model.properties().partnerOrganizationProperties().workspaceId());
        Assertions.assertEquals("cfionl", model.properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals("x", model.properties().partnerOrganizationProperties().workspaceName());
        Assertions.assertEquals(SingleSignOnStates.ENABLE,
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnState());
        Assertions.assertEquals("zxdpnqbqqw",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("jfeallnwsub",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnUrl());
        Assertions.assertEquals("jampmngnzscxaqw",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().aadDomains().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OrganizationResourceUpdate model = new OrganizationResourceUpdate()
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("ocjjxhvpmouexh", new UserAssignedIdentity(), "i",
                    new UserAssignedIdentity(), "ojnxqbzvdd", new UserAssignedIdentity())))
            .withTags(mapOf("btwnpzaoqvuhrhcf", "ndei", "pyeicxm", "cyddglmjthjqk", "ixuigdtopbobj", "ciwqvhk"))
            .withProperties(new OrganizationResourceUpdateProperties()
                .withMarketplace(new LiftrBaseMarketplaceDetailsUpdate().withSubscriptionId("e")
                    .withSubscriptionStatus(MarketplaceSubscriptionStatus.PENDING_FULFILLMENT_START)
                    .withOfferDetails(new LiftrBaseOfferDetailsUpdate().withPublisherId("uhrzayvvt")
                        .withOfferId("vdfgiotk")
                        .withPlanId("utqxlngx")
                        .withPlanName("fgugnxkrxdqmid")
                        .withTermUnit("hzrvqd")
                        .withTermId("bhj")))
                .withUser(new LiftrBaseUserDetailsUpdate().withFirstName("gehoqfbowskany")
                    .withLastName("zlcuiywgqywgndrv")
                    .withEmailAddress("hzgpphrcgyncocpe")
                    .withUpn("vmmcoofs")
                    .withPhoneNumber("zevgb"))
                .withPartnerOrganizationProperties(
                    new LiftrBaseDataPartnerOrganizationPropertiesUpdate().withOrganizationId("qabcypm")
                        .withWorkspaceId("kwlzuvccfwnfn")
                        .withOrganizationName("cfionl")
                        .withWorkspaceName("x")
                        .withSingleSignOnProperties(
                            new LiftrBaseSingleSignOnProperties().withSingleSignOnState(SingleSignOnStates.ENABLE)
                                .withEnterpriseAppId("zxdpnqbqqw")
                                .withSingleSignOnUrl("jfeallnwsub")
                                .withAadDomains(Arrays.asList("jampmngnzscxaqw", "ochcbonqvpkvl")))));
        model = BinaryData.fromObject(model).toObject(OrganizationResourceUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("ndei", model.tags().get("btwnpzaoqvuhrhcf"));
        Assertions.assertEquals("e", model.properties().marketplace().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.PENDING_FULFILLMENT_START,
            model.properties().marketplace().subscriptionStatus());
        Assertions.assertEquals("uhrzayvvt", model.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("vdfgiotk", model.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("utqxlngx", model.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("fgugnxkrxdqmid", model.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("hzrvqd", model.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("bhj", model.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("gehoqfbowskany", model.properties().user().firstName());
        Assertions.assertEquals("zlcuiywgqywgndrv", model.properties().user().lastName());
        Assertions.assertEquals("hzgpphrcgyncocpe", model.properties().user().emailAddress());
        Assertions.assertEquals("vmmcoofs", model.properties().user().upn());
        Assertions.assertEquals("zevgb", model.properties().user().phoneNumber());
        Assertions.assertEquals("qabcypm", model.properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("kwlzuvccfwnfn", model.properties().partnerOrganizationProperties().workspaceId());
        Assertions.assertEquals("cfionl", model.properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals("x", model.properties().partnerOrganizationProperties().workspaceName());
        Assertions.assertEquals(SingleSignOnStates.ENABLE,
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnState());
        Assertions.assertEquals("zxdpnqbqqw",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("jfeallnwsub",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnUrl());
        Assertions.assertEquals("jampmngnzscxaqw",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().aadDomains().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
