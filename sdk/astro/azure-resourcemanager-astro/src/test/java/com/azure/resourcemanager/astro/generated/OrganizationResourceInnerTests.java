// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.astro.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.astro.fluent.models.OrganizationResourceInner;
import com.azure.resourcemanager.astro.models.LiftrBaseDataOrganizationProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseDataPartnerOrganizationProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseMarketplaceDetails;
import com.azure.resourcemanager.astro.models.LiftrBaseOfferDetails;
import com.azure.resourcemanager.astro.models.LiftrBaseSingleSignOnProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseUserDetails;
import com.azure.resourcemanager.astro.models.ManagedServiceIdentity;
import com.azure.resourcemanager.astro.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.astro.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.astro.models.SingleSignOnStates;
import com.azure.resourcemanager.astro.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OrganizationResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OrganizationResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"marketplace\":{\"subscriptionId\":\"jofxqe\",\"subscriptionStatus\":\"PendingFulfillmentStart\",\"offerDetails\":{\"publisherId\":\"aeqjhqjbasvms\",\"offerId\":\"jqul\",\"planId\":\"gsntnbybkzgcwr\",\"planName\":\"lxxwrljdouskc\",\"termUnit\":\"kocrcjdkwtnhx\",\"termId\":\"jbiksqrglssai\"}},\"user\":{\"firstName\":\"qpjwnzlljfm\",\"lastName\":\"pee\",\"emailAddress\":\"vmgxsab\",\"upn\":\"qduujitcjczdz\",\"phoneNumber\":\"ndhkrw\"},\"provisioningState\":\"Failed\",\"partnerOrganizationProperties\":{\"organizationId\":\"dsbdkvwrwjf\",\"workspaceId\":\"snhu\",\"organizationName\":\"je\",\"workspaceName\":\"mrldhu\",\"singleSignOnProperties\":{\"singleSignOnState\":\"Initial\",\"enterpriseAppId\":\"atqxho\",\"singleSignOnUrl\":\"geablgphuticndvk\",\"aadDomains\":[\"wyiftyhxhur\",\"k\",\"tyxolniwpwc\"],\"provisioningState\":\"Failed\"}}},\"identity\":{\"principalId\":\"5266b6b1-f132-4667-af22-219439f39985\",\"tenantId\":\"85f6f9c0-8a65-4fb4-b763-c5db4c67fe9f\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"lryplwckbasyy\":{\"principalId\":\"a01f29f8-275f-4483-bd4e-4cd4affdf1fe\",\"clientId\":\"67189864-bf71-4916-8df9-6f95146aab84\"}}},\"location\":\"ddhsgcbacphe\",\"tags\":{\"ndlik\":\"tynqgoul\"},\"id\":\"yqkgfg\",\"name\":\"bmadgak\",\"type\":\"qsrxybzqqed\"}")
            .toObject(OrganizationResourceInner.class);
        Assertions.assertEquals("ddhsgcbacphe", model.location());
        Assertions.assertEquals("tynqgoul", model.tags().get("ndlik"));
        Assertions.assertEquals("jofxqe", model.properties().marketplace().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.PENDING_FULFILLMENT_START,
            model.properties().marketplace().subscriptionStatus());
        Assertions.assertEquals("aeqjhqjbasvms", model.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("jqul", model.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("gsntnbybkzgcwr", model.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("lxxwrljdouskc", model.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("kocrcjdkwtnhx", model.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("jbiksqrglssai", model.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("qpjwnzlljfm", model.properties().user().firstName());
        Assertions.assertEquals("pee", model.properties().user().lastName());
        Assertions.assertEquals("vmgxsab", model.properties().user().emailAddress());
        Assertions.assertEquals("qduujitcjczdz", model.properties().user().upn());
        Assertions.assertEquals("ndhkrw", model.properties().user().phoneNumber());
        Assertions.assertEquals("dsbdkvwrwjf", model.properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("snhu", model.properties().partnerOrganizationProperties().workspaceId());
        Assertions.assertEquals("je", model.properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals("mrldhu", model.properties().partnerOrganizationProperties().workspaceName());
        Assertions.assertEquals(SingleSignOnStates.INITIAL,
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnState());
        Assertions.assertEquals("atqxho",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("geablgphuticndvk",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnUrl());
        Assertions.assertEquals("wyiftyhxhur",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OrganizationResourceInner model
            = new OrganizationResourceInner().withLocation("ddhsgcbacphe").withTags(mapOf("ndlik", "tynqgoul"))
                .withProperties(new LiftrBaseDataOrganizationProperties()
                    .withMarketplace(new LiftrBaseMarketplaceDetails().withSubscriptionId("jofxqe")
                        .withSubscriptionStatus(MarketplaceSubscriptionStatus.PENDING_FULFILLMENT_START)
                        .withOfferDetails(new LiftrBaseOfferDetails().withPublisherId("aeqjhqjbasvms")
                            .withOfferId("jqul").withPlanId("gsntnbybkzgcwr").withPlanName("lxxwrljdouskc")
                            .withTermUnit("kocrcjdkwtnhx").withTermId("jbiksqrglssai")))
                    .withUser(new LiftrBaseUserDetails().withFirstName("qpjwnzlljfm").withLastName("pee")
                        .withEmailAddress("vmgxsab").withUpn("qduujitcjczdz").withPhoneNumber("ndhkrw"))
                    .withPartnerOrganizationProperties(new LiftrBaseDataPartnerOrganizationProperties()
                        .withOrganizationId("dsbdkvwrwjf").withWorkspaceId("snhu").withOrganizationName("je")
                        .withWorkspaceName("mrldhu").withSingleSignOnProperties(
                            new LiftrBaseSingleSignOnProperties().withSingleSignOnState(SingleSignOnStates.INITIAL)
                                .withEnterpriseAppId("atqxho").withSingleSignOnUrl("geablgphuticndvk")
                                .withAadDomains(Arrays.asList("wyiftyhxhur", "k", "tyxolniwpwc")))))
                .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("lryplwckbasyy", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(OrganizationResourceInner.class);
        Assertions.assertEquals("ddhsgcbacphe", model.location());
        Assertions.assertEquals("tynqgoul", model.tags().get("ndlik"));
        Assertions.assertEquals("jofxqe", model.properties().marketplace().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.PENDING_FULFILLMENT_START,
            model.properties().marketplace().subscriptionStatus());
        Assertions.assertEquals("aeqjhqjbasvms", model.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("jqul", model.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("gsntnbybkzgcwr", model.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("lxxwrljdouskc", model.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("kocrcjdkwtnhx", model.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("jbiksqrglssai", model.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("qpjwnzlljfm", model.properties().user().firstName());
        Assertions.assertEquals("pee", model.properties().user().lastName());
        Assertions.assertEquals("vmgxsab", model.properties().user().emailAddress());
        Assertions.assertEquals("qduujitcjczdz", model.properties().user().upn());
        Assertions.assertEquals("ndhkrw", model.properties().user().phoneNumber());
        Assertions.assertEquals("dsbdkvwrwjf", model.properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("snhu", model.properties().partnerOrganizationProperties().workspaceId());
        Assertions.assertEquals("je", model.properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals("mrldhu", model.properties().partnerOrganizationProperties().workspaceName());
        Assertions.assertEquals(SingleSignOnStates.INITIAL,
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnState());
        Assertions.assertEquals("atqxho",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("geablgphuticndvk",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnUrl());
        Assertions.assertEquals("wyiftyhxhur",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
