// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.astro.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.astro.fluent.models.OrganizationResourceInner;
import com.azure.resourcemanager.astro.models.LiftrBaseDataOrganizationProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseDataPartnerOrganizationProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseMarketplaceDetails;
import com.azure.resourcemanager.astro.models.LiftrBaseOfferDetails;
import com.azure.resourcemanager.astro.models.LiftrBaseSingleSignOnProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseUserDetails;
import com.azure.resourcemanager.astro.models.ManagedServiceIdentity;
import com.azure.resourcemanager.astro.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.astro.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.astro.models.SingleSignOnStates;
import com.azure.resourcemanager.astro.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OrganizationResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OrganizationResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"marketplace\":{\"subscriptionId\":\"ivyevcciqihnhun\",\"subscriptionStatus\":\"Unsubscribed\",\"offerDetails\":{\"publisherId\":\"jzrnf\",\"offerId\":\"gxg\",\"planId\":\"spemvtzfk\",\"planName\":\"ubljofxqe\",\"termUnit\":\"jaeq\",\"termId\":\"qjbasvms\"}},\"user\":{\"firstName\":\"jqul\",\"lastName\":\"gsntnbybkzgcwr\",\"emailAddress\":\"clxxwrljdo\",\"upn\":\"kcqvkocrc\",\"phoneNumber\":\"kwt\"},\"provisioningState\":\"Canceled\",\"partnerOrganizationProperties\":{\"organizationId\":\"jbiksqrglssai\",\"workspaceId\":\"p\",\"organizationName\":\"wnzlljfmppeeb\",\"workspaceName\":\"gxsabkyq\",\"singleSignOnProperties\":{\"singleSignOnState\":\"Enable\",\"enterpriseAppId\":\"tcj\",\"singleSignOnUrl\":\"dzevndhkrw\",\"aadDomains\":[\"ppdsbdkvwrwj\"],\"provisioningState\":\"Succeeded\"}}},\"identity\":{\"principalId\":\"42f6f59b-1c48-400c-8cb9-57619cd16877\",\"tenantId\":\"d8006ab6-a305-46c7-885c-16f890447145\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"tmrldhugjzzdatq\":{\"principalId\":\"1e9c280c-6a6c-421e-8f30-e845c51e0b51\",\"clientId\":\"a89f226b-20ce-4eaf-aa4f-4f0f1803fc87\"}}},\"location\":\"oc\",\"tags\":{\"ozwyiftyhxhuro\":\"ablgphuticndvk\",\"wcukjfkgiawxk\":\"ftyxolniw\"},\"id\":\"ryplwckbasyypn\",\"name\":\"dhsgcba\",\"type\":\"phejkotynqgoulz\"}")
            .toObject(OrganizationResourceInner.class);
        Assertions.assertEquals("oc", model.location());
        Assertions.assertEquals("ablgphuticndvk", model.tags().get("ozwyiftyhxhuro"));
        Assertions.assertEquals("ivyevcciqihnhun", model.properties().marketplace().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.UNSUBSCRIBED,
            model.properties().marketplace().subscriptionStatus());
        Assertions.assertEquals("jzrnf", model.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("gxg", model.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("spemvtzfk", model.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("ubljofxqe", model.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("jaeq", model.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("qjbasvms", model.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("jqul", model.properties().user().firstName());
        Assertions.assertEquals("gsntnbybkzgcwr", model.properties().user().lastName());
        Assertions.assertEquals("clxxwrljdo", model.properties().user().emailAddress());
        Assertions.assertEquals("kcqvkocrc", model.properties().user().upn());
        Assertions.assertEquals("kwt", model.properties().user().phoneNumber());
        Assertions.assertEquals("jbiksqrglssai", model.properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("p", model.properties().partnerOrganizationProperties().workspaceId());
        Assertions.assertEquals("wnzlljfmppeeb", model.properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals("gxsabkyq", model.properties().partnerOrganizationProperties().workspaceName());
        Assertions.assertEquals(SingleSignOnStates.ENABLE,
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnState());
        Assertions.assertEquals("tcj",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("dzevndhkrw",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnUrl());
        Assertions.assertEquals("ppdsbdkvwrwj",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OrganizationResourceInner model = new OrganizationResourceInner().withLocation("oc")
            .withTags(mapOf("ozwyiftyhxhuro", "ablgphuticndvk", "wcukjfkgiawxk", "ftyxolniw"))
            .withProperties(new LiftrBaseDataOrganizationProperties()
                .withMarketplace(new LiftrBaseMarketplaceDetails().withSubscriptionId("ivyevcciqihnhun")
                    .withSubscriptionStatus(MarketplaceSubscriptionStatus.UNSUBSCRIBED)
                    .withOfferDetails(new LiftrBaseOfferDetails().withPublisherId("jzrnf")
                        .withOfferId("gxg")
                        .withPlanId("spemvtzfk")
                        .withPlanName("ubljofxqe")
                        .withTermUnit("jaeq")
                        .withTermId("qjbasvms")))
                .withUser(new LiftrBaseUserDetails().withFirstName("jqul")
                    .withLastName("gsntnbybkzgcwr")
                    .withEmailAddress("clxxwrljdo")
                    .withUpn("kcqvkocrc")
                    .withPhoneNumber("kwt"))
                .withPartnerOrganizationProperties(
                    new LiftrBaseDataPartnerOrganizationProperties().withOrganizationId("jbiksqrglssai")
                        .withWorkspaceId("p")
                        .withOrganizationName("wnzlljfmppeeb")
                        .withWorkspaceName("gxsabkyq")
                        .withSingleSignOnProperties(
                            new LiftrBaseSingleSignOnProperties().withSingleSignOnState(SingleSignOnStates.ENABLE)
                                .withEnterpriseAppId("tcj")
                                .withSingleSignOnUrl("dzevndhkrw")
                                .withAadDomains(Arrays.asList("ppdsbdkvwrwj")))))
            .withIdentity(
                new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("tmrldhugjzzdatq", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(OrganizationResourceInner.class);
        Assertions.assertEquals("oc", model.location());
        Assertions.assertEquals("ablgphuticndvk", model.tags().get("ozwyiftyhxhuro"));
        Assertions.assertEquals("ivyevcciqihnhun", model.properties().marketplace().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.UNSUBSCRIBED,
            model.properties().marketplace().subscriptionStatus());
        Assertions.assertEquals("jzrnf", model.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("gxg", model.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("spemvtzfk", model.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("ubljofxqe", model.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("jaeq", model.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("qjbasvms", model.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("jqul", model.properties().user().firstName());
        Assertions.assertEquals("gsntnbybkzgcwr", model.properties().user().lastName());
        Assertions.assertEquals("clxxwrljdo", model.properties().user().emailAddress());
        Assertions.assertEquals("kcqvkocrc", model.properties().user().upn());
        Assertions.assertEquals("kwt", model.properties().user().phoneNumber());
        Assertions.assertEquals("jbiksqrglssai", model.properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("p", model.properties().partnerOrganizationProperties().workspaceId());
        Assertions.assertEquals("wnzlljfmppeeb", model.properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals("gxsabkyq", model.properties().partnerOrganizationProperties().workspaceName());
        Assertions.assertEquals(SingleSignOnStates.ENABLE,
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnState());
        Assertions.assertEquals("tcj",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("dzevndhkrw",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnUrl());
        Assertions.assertEquals("ppdsbdkvwrwj",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
