// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.astro.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.astro.AstroManager;
import com.azure.resourcemanager.astro.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.astro.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.astro.models.OrganizationResource;
import com.azure.resourcemanager.astro.models.SingleSignOnStates;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class OrganizationsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"marketplace\":{\"subscriptionId\":\"leggzfbu\",\"subscriptionStatus\":\"Unsubscribed\",\"offerDetails\":{\"publisherId\":\"vfaxkffeiith\",\"offerId\":\"vmezy\",\"planId\":\"shxmzsbbzoggigrx\",\"planName\":\"ur\",\"termUnit\":\"xxjnspydptk\",\"termId\":\"nkoukn\"}},\"user\":{\"firstName\":\"udwtiukbl\",\"lastName\":\"ngkpocipazy\",\"emailAddress\":\"o\",\"upn\":\"ukgjnpiucgygevq\",\"phoneNumber\":\"typmrbpizcdrqjsd\"},\"provisioningState\":\"Succeeded\",\"partnerOrganizationProperties\":{\"organizationId\":\"yhxdeoejzicwi\",\"workspaceId\":\"jttgzf\",\"organizationName\":\"ishc\",\"workspaceName\":\"hajdeyeamdpha\",\"singleSignOnProperties\":{\"singleSignOnState\":\"Enable\",\"enterpriseAppId\":\"uxwgipwho\",\"singleSignOnUrl\":\"wkgshwa\",\"aadDomains\":[\"xzbinjeputt\",\"rywn\",\"zoqftiyqzrnkcqvy\",\"lwh\"],\"provisioningState\":\"Failed\"}}},\"identity\":{\"principalId\":\"91d6c3b6-fc72-4c81-ab77-d9248cc8c483\",\"tenantId\":\"8fe438a3-0658-44f5-9c82-7cdb2daad567\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"wvl\":{\"principalId\":\"e83f22ab-be36-48b9-94a3-d64016f455e2\",\"clientId\":\"f48b4c2f-9a0d-4e8b-9d1d-e309ae839006\"}}},\"location\":\"avwhheunm\",\"tags\":{\"noc\":\"gyxzk\",\"uconuqszfkbey\":\"koklya\",\"senhwlrs\":\"ewrmjmwvvjektc\"},\"id\":\"frzpwvlqdqgb\",\"name\":\"qylihkaetckt\",\"type\":\"fcivfsnkym\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        AstroManager manager = AstroManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<OrganizationResource> response
            = manager.organizations().listByResourceGroup("pclhocohslk", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("avwhheunm", response.iterator().next().location());
        Assertions.assertEquals("gyxzk", response.iterator().next().tags().get("noc"));
        Assertions.assertEquals("leggzfbu", response.iterator().next().properties().marketplace().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.UNSUBSCRIBED,
            response.iterator().next().properties().marketplace().subscriptionStatus());
        Assertions.assertEquals("vfaxkffeiith",
            response.iterator().next().properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("vmezy",
            response.iterator().next().properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("shxmzsbbzoggigrx",
            response.iterator().next().properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("ur", response.iterator().next().properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("xxjnspydptk",
            response.iterator().next().properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("nkoukn",
            response.iterator().next().properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("udwtiukbl", response.iterator().next().properties().user().firstName());
        Assertions.assertEquals("ngkpocipazy", response.iterator().next().properties().user().lastName());
        Assertions.assertEquals("o", response.iterator().next().properties().user().emailAddress());
        Assertions.assertEquals("ukgjnpiucgygevq", response.iterator().next().properties().user().upn());
        Assertions.assertEquals("typmrbpizcdrqjsd", response.iterator().next().properties().user().phoneNumber());
        Assertions.assertEquals("yhxdeoejzicwi",
            response.iterator().next().properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("jttgzf",
            response.iterator().next().properties().partnerOrganizationProperties().workspaceId());
        Assertions.assertEquals("ishc",
            response.iterator().next().properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals("hajdeyeamdpha",
            response.iterator().next().properties().partnerOrganizationProperties().workspaceName());
        Assertions.assertEquals(SingleSignOnStates.ENABLE, response.iterator().next().properties()
            .partnerOrganizationProperties().singleSignOnProperties().singleSignOnState());
        Assertions.assertEquals("uxwgipwho", response.iterator().next().properties().partnerOrganizationProperties()
            .singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("wkgshwa", response.iterator().next().properties().partnerOrganizationProperties()
            .singleSignOnProperties().singleSignOnUrl());
        Assertions.assertEquals("xzbinjeputt", response.iterator().next().properties().partnerOrganizationProperties()
            .singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
    }
}
