// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.astro.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.astro.AstroManager;
import com.azure.resourcemanager.astro.models.LiftrBaseDataOrganizationProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseDataPartnerOrganizationProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseMarketplaceDetails;
import com.azure.resourcemanager.astro.models.LiftrBaseOfferDetails;
import com.azure.resourcemanager.astro.models.LiftrBaseSingleSignOnProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseUserDetails;
import com.azure.resourcemanager.astro.models.ManagedServiceIdentity;
import com.azure.resourcemanager.astro.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.astro.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.astro.models.OrganizationResource;
import com.azure.resourcemanager.astro.models.SingleSignOnStates;
import com.azure.resourcemanager.astro.models.UserAssignedIdentity;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class OrganizationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"marketplace\":{\"subscriptionId\":\"yudxytlmoy\",\"subscriptionStatus\":\"Unsubscribed\",\"offerDetails\":{\"publisherId\":\"wfudwpzntxhdzhl\",\"offerId\":\"qj\",\"planId\":\"hckfrlhrx\",\"planName\":\"kyv\",\"termUnit\":\"ca\",\"termId\":\"z\"}},\"user\":{\"firstName\":\"p\",\"lastName\":\"kafkuwbcrnwbm\",\"emailAddress\":\"hhseyv\",\"upn\":\"srtslhspkdeem\",\"phoneNumber\":\"fm\"},\"provisioningState\":\"Succeeded\",\"partnerOrganizationProperties\":{\"organizationId\":\"t\",\"workspaceId\":\"lmqkrhahvlj\",\"organizationName\":\"ahaquh\",\"workspaceName\":\"hmdua\",\"singleSignOnProperties\":{\"singleSignOnState\":\"Initial\",\"enterpriseAppId\":\"pvfadmwsrcr\",\"singleSignOnUrl\":\"xpvgo\",\"aadDomains\":[\"fmisg\"],\"provisioningState\":\"Canceled\"}}},\"identity\":{\"principalId\":\"7b173769-6f47-4f90-bd6b-174679e68faf\",\"tenantId\":\"69f055d0-3943-46e7-b013-3ba073df585b\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"zbaliourqha\":{\"principalId\":\"811d9437-a9e5-4d8f-8c9b-ea3e4948818b\",\"clientId\":\"d3c5045e-70bd-47f0-a9d7-9038d4e01fc8\"}}},\"location\":\"uhashsfwx\",\"tags\":{\"xcug\":\"w\",\"ovbvmeueciv\":\"cjooxdjebwpucwwf\"},\"id\":\"hzceuojgjrwjue\",\"name\":\"otwmcdyt\",\"type\":\"x\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        AstroManager manager = AstroManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        OrganizationResource response = manager.organizations().define("wz").withRegion("njbkcnxdhbttkph")
            .withExistingResourceGroup("bniwdj")
            .withTags(mapOf("t", "nv", "crpab", "qnermclfplphoxu", "sbj", "ye", "wfqkquj", "azqugxywpmueefj"))
            .withProperties(new LiftrBaseDataOrganizationProperties()
                .withMarketplace(new LiftrBaseMarketplaceDetails().withSubscriptionId("dbpgnxytxhp")
                    .withSubscriptionStatus(MarketplaceSubscriptionStatus.SUBSCRIBED)
                    .withOfferDetails(new LiftrBaseOfferDetails().withPublisherId("zpfzabglc").withOfferId("hxw")
                        .withPlanId("ctyqik").withPlanName("bovpl").withTermUnit("bhvgy").withTermId("uosvmkfssxqukk")))
                .withUser(new LiftrBaseUserDetails().withFirstName("plgmgsxnk").withLastName("zkd")
                    .withEmailAddress("slpvlop").withUpn("yighxpk").withPhoneNumber("zb"))
                .withPartnerOrganizationProperties(new LiftrBaseDataPartnerOrganizationProperties()
                    .withOrganizationId("baumnyqupedeoj").withWorkspaceId("bckhsmtxpsi")
                    .withOrganizationName("btfhvpesaps").withWorkspaceName("dqmh")
                    .withSingleSignOnProperties(new LiftrBaseSingleSignOnProperties()
                        .withSingleSignOnState(SingleSignOnStates.DISABLE).withEnterpriseAppId("ldwkyzxuutkn")
                        .withSingleSignOnUrl("scwsv").withAadDomains(Arrays.asList("togt", "rupqsxvnmicy", "vce")))))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("fj", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("uhashsfwx", response.location());
        Assertions.assertEquals("w", response.tags().get("xcug"));
        Assertions.assertEquals("yudxytlmoy", response.properties().marketplace().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.UNSUBSCRIBED,
            response.properties().marketplace().subscriptionStatus());
        Assertions.assertEquals("wfudwpzntxhdzhl", response.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("qj", response.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("hckfrlhrx", response.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("kyv", response.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("ca", response.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("z", response.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("p", response.properties().user().firstName());
        Assertions.assertEquals("kafkuwbcrnwbm", response.properties().user().lastName());
        Assertions.assertEquals("hhseyv", response.properties().user().emailAddress());
        Assertions.assertEquals("srtslhspkdeem", response.properties().user().upn());
        Assertions.assertEquals("fm", response.properties().user().phoneNumber());
        Assertions.assertEquals("t", response.properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("lmqkrhahvlj", response.properties().partnerOrganizationProperties().workspaceId());
        Assertions.assertEquals("ahaquh", response.properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals("hmdua", response.properties().partnerOrganizationProperties().workspaceName());
        Assertions.assertEquals(SingleSignOnStates.INITIAL,
            response.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnState());
        Assertions.assertEquals("pvfadmwsrcr",
            response.properties().partnerOrganizationProperties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("xpvgo",
            response.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnUrl());
        Assertions.assertEquals("fmisg",
            response.properties().partnerOrganizationProperties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
