// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.astro.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.astro.AstroManager;
import com.azure.resourcemanager.astro.models.LiftrBaseDataOrganizationProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseDataPartnerOrganizationProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseMarketplaceDetails;
import com.azure.resourcemanager.astro.models.LiftrBaseOfferDetails;
import com.azure.resourcemanager.astro.models.LiftrBaseSingleSignOnProperties;
import com.azure.resourcemanager.astro.models.LiftrBaseUserDetails;
import com.azure.resourcemanager.astro.models.ManagedServiceIdentity;
import com.azure.resourcemanager.astro.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.astro.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.astro.models.OrganizationResource;
import com.azure.resourcemanager.astro.models.SingleSignOnStates;
import com.azure.resourcemanager.astro.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"marketplace\":{\"subscriptionId\":\"ualupjmkh\",\"subscriptionStatus\":\"PendingFulfillmentStart\",\"offerDetails\":{\"publisherId\":\"bbcswsrtjri\",\"offerId\":\"lrbpbewtghfgbl\",\"planId\":\"gw\",\"planName\":\"vlvqhjkbegi\",\"termUnit\":\"nmxiebwwaloayqc\",\"termId\":\"rtzju\"}},\"user\":{\"firstName\":\"gwyzm\",\"lastName\":\"txon\",\"emailAddress\":\"mtsavjcbpwxqp\",\"upn\":\"knftguvriuh\",\"phoneNumber\":\"wmdyvxqtay\"},\"provisioningState\":\"Succeeded\",\"partnerOrganizationProperties\":{\"organizationId\":\"oyq\",\"workspaceId\":\"xrmcqibycnojvk\",\"organizationName\":\"mefqsgzvahapjyzh\",\"workspaceName\":\"gqzcjr\",\"singleSignOnProperties\":{\"singleSignOnState\":\"Disable\",\"enterpriseAppId\":\"lmwlxkvugfhzo\",\"singleSignOnUrl\":\"wjvzunluthnn\",\"aadDomains\":[\"xipeilpjzuaejx\",\"ultskzbbtdz\"],\"provisioningState\":\"Succeeded\"}}},\"identity\":{\"principalId\":\"95cc2bdf-5381-48bb-befd-ed3da2a3c245\",\"tenantId\":\"df628b89-7fa2-44af-9912-e22a0f4a4932\",\"type\":\"None\",\"userAssignedIdentities\":{\"uh\":{\"principalId\":\"42ab805d-123b-4aa4-b0b4-1a90988d48b8\",\"clientId\":\"7739e159-e2d5-4573-8699-290fc782156a\"},\"bsjyofdx\":{\"principalId\":\"ff178077-7217-44d6-857c-09b55b5dc3ff\",\"clientId\":\"8033f849-f734-47e2-9a52-19d53dbce544\"}}},\"location\":\"us\",\"tags\":{\"mvb\":\"ouwaboekqvkeln\",\"sxyawjoyaqcs\":\"wyjsflhhcaalnjix\",\"eli\":\"yjpkiidzyexz\"},\"id\":\"hnrztfol\",\"name\":\"bnxknalaulppg\",\"type\":\"dtpnapnyiropuhp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AstroManager manager = AstroManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        OrganizationResource response = manager.organizations()
            .define("udxytlmoyrx")
            .withRegion("txnrjaw")
            .withExistingResourceGroup("g")
            .withTags(mapOf("fbkp", "gxhnisk", "lwn", "cg"))
            .withProperties(new LiftrBaseDataOrganizationProperties()
                .withMarketplace(new LiftrBaseMarketplaceDetails().withSubscriptionId("u")
                    .withSubscriptionStatus(MarketplaceSubscriptionStatus.PENDING_FULFILLMENT_START)
                    .withOfferDetails(new LiftrBaseOfferDetails().withPublisherId("zntxhdz")
                        .withOfferId("lrqjbhckfr")
                        .withPlanId("hrxsbk")
                        .withPlanName("pycanuzbpz")
                        .withTermUnit("fkuwbcrnwbmehhse")
                        .withTermId("jusrtslhspk")))
                .withUser(new LiftrBaseUserDetails().withFirstName("eemaofmxagkvtme")
                    .withLastName("mqkrhahvljuahaqu")
                    .withEmailAddress("c")
                    .withUpn("mdua")
                    .withPhoneNumber("exq"))
                .withPartnerOrganizationProperties(
                    new LiftrBaseDataPartnerOrganizationProperties().withOrganizationId("mwsrcrgvxpvgo")
                        .withWorkspaceId("lf")
                        .withOrganizationName("isgwbnbbeldawkz")
                        .withWorkspaceName("liourqhak")
                        .withSingleSignOnProperties(
                            new LiftrBaseSingleSignOnProperties().withSingleSignOnState(SingleSignOnStates.ENABLE)
                                .withEnterpriseAppId("hsfwxosowzxcug")
                                .withSingleSignOnUrl("jooxdjebw")
                                .withAadDomains(Arrays.asList("wwfvov", "vmeueci", "yhz")))))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("eiotwmcdytdx", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("us", response.location());
        Assertions.assertEquals("ouwaboekqvkeln", response.tags().get("mvb"));
        Assertions.assertEquals("ualupjmkh", response.properties().marketplace().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.PENDING_FULFILLMENT_START,
            response.properties().marketplace().subscriptionStatus());
        Assertions.assertEquals("bbcswsrtjri", response.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("lrbpbewtghfgbl", response.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("gw", response.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("vlvqhjkbegi", response.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("nmxiebwwaloayqc", response.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("rtzju", response.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("gwyzm", response.properties().user().firstName());
        Assertions.assertEquals("txon", response.properties().user().lastName());
        Assertions.assertEquals("mtsavjcbpwxqp", response.properties().user().emailAddress());
        Assertions.assertEquals("knftguvriuh", response.properties().user().upn());
        Assertions.assertEquals("wmdyvxqtay", response.properties().user().phoneNumber());
        Assertions.assertEquals("oyq", response.properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("xrmcqibycnojvk", response.properties().partnerOrganizationProperties().workspaceId());
        Assertions.assertEquals("mefqsgzvahapjyzh",
            response.properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals("gqzcjr", response.properties().partnerOrganizationProperties().workspaceName());
        Assertions.assertEquals(SingleSignOnStates.DISABLE,
            response.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnState());
        Assertions.assertEquals("lmwlxkvugfhzo",
            response.properties().partnerOrganizationProperties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("wjvzunluthnn",
            response.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnUrl());
        Assertions.assertEquals("xipeilpjzuaejx",
            response.properties().partnerOrganizationProperties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
