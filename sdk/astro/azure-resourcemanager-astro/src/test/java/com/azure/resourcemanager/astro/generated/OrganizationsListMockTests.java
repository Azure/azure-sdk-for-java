// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.astro.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.astro.AstroManager;
import com.azure.resourcemanager.astro.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.astro.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.astro.models.OrganizationResource;
import com.azure.resourcemanager.astro.models.SingleSignOnStates;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class OrganizationsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"marketplace\":{\"subscriptionId\":\"cibvyvdcsitynn\",\"subscriptionStatus\":\"Unsubscribed\",\"offerDetails\":{\"publisherId\":\"dectehfiqsc\",\"offerId\":\"eypvhezrkg\",\"planId\":\"hcjrefovgmk\",\"planName\":\"leyyvx\",\"termUnit\":\"jpkcattpng\",\"termId\":\"rcczsqpjhvmd\"}},\"user\":{\"firstName\":\"jvnysounqe\",\"lastName\":\"a\",\"emailAddress\":\"oaeupfhyhltrpmo\",\"upn\":\"mcmatuokthfuiu\",\"phoneNumber\":\"dsfcpkvxodpuoz\"},\"provisioningState\":\"Failed\",\"partnerOrganizationProperties\":{\"organizationId\":\"agfuaxbezyiu\",\"workspaceId\":\"ktwh\",\"organizationName\":\"dxwzywqsmbsurexi\",\"workspaceName\":\"ryocfsfksymdd\",\"singleSignOnProperties\":{\"singleSignOnState\":\"Disable\",\"enterpriseAppId\":\"iuxhqyudxorr\",\"singleSignOnUrl\":\"b\",\"aadDomains\":[\"zvyifqrvkdvj\",\"llr\"],\"provisioningState\":\"Canceled\"}}},\"identity\":{\"principalId\":\"bb87040c-f07d-4ad0-9c36-cb8d2941454a\",\"tenantId\":\"8de36aa3-b3ac-41ea-b779-9f63e4d63145\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"pulexxbczw\":{\"principalId\":\"4595cef5-df60-4eca-894a-3b01ae27a78a\",\"clientId\":\"cdef699d-b397-429b-9983-24043392e2ed\"},\"wiqzbqjvsovmyo\":{\"principalId\":\"de53b1cd-3a74-4f23-b252-c80993cdd937\",\"clientId\":\"139253c9-d093-4285-bb2a-5080207f04d7\"},\"spkwlhzdobpxjm\":{\"principalId\":\"e2394db2-778d-41f4-9c4c-095ebdd9ce09\",\"clientId\":\"7044b321-5526-4871-80fa-693b63f76151\"},\"vvnchrkcc\":{\"principalId\":\"2ba04324-cace-480f-a4da-c96c438211ec\",\"clientId\":\"512d443f-dd19-4ff3-b443-98589467a372\"}}},\"location\":\"wzjuqk\",\"tags\":{\"oskg\":\"ajiwkuo\"},\"id\":\"sauuimj\",\"name\":\"vxieduugidyj\",\"type\":\"rfbyaosvexcso\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        AstroManager manager = AstroManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<OrganizationResource> response = manager.organizations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wzjuqk", response.iterator().next().location());
        Assertions.assertEquals("ajiwkuo", response.iterator().next().tags().get("oskg"));
        Assertions.assertEquals("cibvyvdcsitynn",
            response.iterator().next().properties().marketplace().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.UNSUBSCRIBED,
            response.iterator().next().properties().marketplace().subscriptionStatus());
        Assertions.assertEquals("dectehfiqsc",
            response.iterator().next().properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("eypvhezrkg",
            response.iterator().next().properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("hcjrefovgmk",
            response.iterator().next().properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("leyyvx",
            response.iterator().next().properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("jpkcattpng",
            response.iterator().next().properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("rcczsqpjhvmd",
            response.iterator().next().properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("jvnysounqe", response.iterator().next().properties().user().firstName());
        Assertions.assertEquals("a", response.iterator().next().properties().user().lastName());
        Assertions.assertEquals("oaeupfhyhltrpmo", response.iterator().next().properties().user().emailAddress());
        Assertions.assertEquals("mcmatuokthfuiu", response.iterator().next().properties().user().upn());
        Assertions.assertEquals("dsfcpkvxodpuoz", response.iterator().next().properties().user().phoneNumber());
        Assertions.assertEquals("agfuaxbezyiu",
            response.iterator().next().properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("ktwh",
            response.iterator().next().properties().partnerOrganizationProperties().workspaceId());
        Assertions.assertEquals("dxwzywqsmbsurexi",
            response.iterator().next().properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals("ryocfsfksymdd",
            response.iterator().next().properties().partnerOrganizationProperties().workspaceName());
        Assertions.assertEquals(SingleSignOnStates.DISABLE, response.iterator().next().properties()
            .partnerOrganizationProperties().singleSignOnProperties().singleSignOnState());
        Assertions.assertEquals("iuxhqyudxorr", response.iterator().next().properties().partnerOrganizationProperties()
            .singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("b", response.iterator().next().properties().partnerOrganizationProperties()
            .singleSignOnProperties().singleSignOnUrl());
        Assertions.assertEquals("zvyifqrvkdvj", response.iterator().next().properties().partnerOrganizationProperties()
            .singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED,
            response.iterator().next().identity().type());
    }
}
