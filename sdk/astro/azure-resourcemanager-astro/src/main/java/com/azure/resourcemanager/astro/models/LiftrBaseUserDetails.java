// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.astro.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * User details for an organization.
 */
@Fluent
public final class LiftrBaseUserDetails implements JsonSerializable<LiftrBaseUserDetails> {
    /*
     * First name of the user
     */
    private String firstName;

    /*
     * Last name of the user
     */
    private String lastName;

    /*
     * Email address of the user
     */
    private String emailAddress;

    /*
     * User's principal name
     */
    private String upn;

    /*
     * User's phone number
     */
    private String phoneNumber;

    /**
     * Creates an instance of LiftrBaseUserDetails class.
     */
    public LiftrBaseUserDetails() {
    }

    /**
     * Get the firstName property: First name of the user.
     * 
     * @return the firstName value.
     */
    public String firstName() {
        return this.firstName;
    }

    /**
     * Set the firstName property: First name of the user.
     * 
     * @param firstName the firstName value to set.
     * @return the LiftrBaseUserDetails object itself.
     */
    public LiftrBaseUserDetails withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }

    /**
     * Get the lastName property: Last name of the user.
     * 
     * @return the lastName value.
     */
    public String lastName() {
        return this.lastName;
    }

    /**
     * Set the lastName property: Last name of the user.
     * 
     * @param lastName the lastName value to set.
     * @return the LiftrBaseUserDetails object itself.
     */
    public LiftrBaseUserDetails withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }

    /**
     * Get the emailAddress property: Email address of the user.
     * 
     * @return the emailAddress value.
     */
    public String emailAddress() {
        return this.emailAddress;
    }

    /**
     * Set the emailAddress property: Email address of the user.
     * 
     * @param emailAddress the emailAddress value to set.
     * @return the LiftrBaseUserDetails object itself.
     */
    public LiftrBaseUserDetails withEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
        return this;
    }

    /**
     * Get the upn property: User's principal name.
     * 
     * @return the upn value.
     */
    public String upn() {
        return this.upn;
    }

    /**
     * Set the upn property: User's principal name.
     * 
     * @param upn the upn value to set.
     * @return the LiftrBaseUserDetails object itself.
     */
    public LiftrBaseUserDetails withUpn(String upn) {
        this.upn = upn;
        return this;
    }

    /**
     * Get the phoneNumber property: User's phone number.
     * 
     * @return the phoneNumber value.
     */
    public String phoneNumber() {
        return this.phoneNumber;
    }

    /**
     * Set the phoneNumber property: User's phone number.
     * 
     * @param phoneNumber the phoneNumber value to set.
     * @return the LiftrBaseUserDetails object itself.
     */
    public LiftrBaseUserDetails withPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (firstName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property firstName in model LiftrBaseUserDetails"));
        }
        if (lastName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property lastName in model LiftrBaseUserDetails"));
        }
        if (emailAddress() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property emailAddress in model LiftrBaseUserDetails"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LiftrBaseUserDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("firstName", this.firstName);
        jsonWriter.writeStringField("lastName", this.lastName);
        jsonWriter.writeStringField("emailAddress", this.emailAddress);
        jsonWriter.writeStringField("upn", this.upn);
        jsonWriter.writeStringField("phoneNumber", this.phoneNumber);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LiftrBaseUserDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LiftrBaseUserDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LiftrBaseUserDetails.
     */
    public static LiftrBaseUserDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LiftrBaseUserDetails deserializedLiftrBaseUserDetails = new LiftrBaseUserDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("firstName".equals(fieldName)) {
                    deserializedLiftrBaseUserDetails.firstName = reader.getString();
                } else if ("lastName".equals(fieldName)) {
                    deserializedLiftrBaseUserDetails.lastName = reader.getString();
                } else if ("emailAddress".equals(fieldName)) {
                    deserializedLiftrBaseUserDetails.emailAddress = reader.getString();
                } else if ("upn".equals(fieldName)) {
                    deserializedLiftrBaseUserDetails.upn = reader.getString();
                } else if ("phoneNumber".equals(fieldName)) {
                    deserializedLiftrBaseUserDetails.phoneNumber = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLiftrBaseUserDetails;
        });
    }
}
