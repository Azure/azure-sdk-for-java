// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.astro.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties specific to Data Organization resource.
 */
@Fluent
public final class LiftrBaseDataOrganizationProperties
    implements JsonSerializable<LiftrBaseDataOrganizationProperties> {
    /*
     * Marketplace details of the resource.
     */
    private LiftrBaseMarketplaceDetails marketplace;

    /*
     * Details of the user.
     */
    private LiftrBaseUserDetails user;

    /*
     * Provisioning state of the resource.
     */
    private ResourceProvisioningState provisioningState;

    /*
     * Organization properties
     */
    private LiftrBaseDataPartnerOrganizationProperties partnerOrganizationProperties;

    /**
     * Creates an instance of LiftrBaseDataOrganizationProperties class.
     */
    public LiftrBaseDataOrganizationProperties() {
    }

    /**
     * Get the marketplace property: Marketplace details of the resource.
     * 
     * @return the marketplace value.
     */
    public LiftrBaseMarketplaceDetails marketplace() {
        return this.marketplace;
    }

    /**
     * Set the marketplace property: Marketplace details of the resource.
     * 
     * @param marketplace the marketplace value to set.
     * @return the LiftrBaseDataOrganizationProperties object itself.
     */
    public LiftrBaseDataOrganizationProperties withMarketplace(LiftrBaseMarketplaceDetails marketplace) {
        this.marketplace = marketplace;
        return this;
    }

    /**
     * Get the user property: Details of the user.
     * 
     * @return the user value.
     */
    public LiftrBaseUserDetails user() {
        return this.user;
    }

    /**
     * Set the user property: Details of the user.
     * 
     * @param user the user value to set.
     * @return the LiftrBaseDataOrganizationProperties object itself.
     */
    public LiftrBaseDataOrganizationProperties withUser(LiftrBaseUserDetails user) {
        this.user = user;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the partnerOrganizationProperties property: Organization properties.
     * 
     * @return the partnerOrganizationProperties value.
     */
    public LiftrBaseDataPartnerOrganizationProperties partnerOrganizationProperties() {
        return this.partnerOrganizationProperties;
    }

    /**
     * Set the partnerOrganizationProperties property: Organization properties.
     * 
     * @param partnerOrganizationProperties the partnerOrganizationProperties value to set.
     * @return the LiftrBaseDataOrganizationProperties object itself.
     */
    public LiftrBaseDataOrganizationProperties
        withPartnerOrganizationProperties(LiftrBaseDataPartnerOrganizationProperties partnerOrganizationProperties) {
        this.partnerOrganizationProperties = partnerOrganizationProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (marketplace() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property marketplace in model LiftrBaseDataOrganizationProperties"));
        } else {
            marketplace().validate();
        }
        if (user() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property user in model LiftrBaseDataOrganizationProperties"));
        } else {
            user().validate();
        }
        if (partnerOrganizationProperties() != null) {
            partnerOrganizationProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LiftrBaseDataOrganizationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("marketplace", this.marketplace);
        jsonWriter.writeJsonField("user", this.user);
        jsonWriter.writeJsonField("partnerOrganizationProperties", this.partnerOrganizationProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LiftrBaseDataOrganizationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LiftrBaseDataOrganizationProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LiftrBaseDataOrganizationProperties.
     */
    public static LiftrBaseDataOrganizationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LiftrBaseDataOrganizationProperties deserializedLiftrBaseDataOrganizationProperties
                = new LiftrBaseDataOrganizationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("marketplace".equals(fieldName)) {
                    deserializedLiftrBaseDataOrganizationProperties.marketplace
                        = LiftrBaseMarketplaceDetails.fromJson(reader);
                } else if ("user".equals(fieldName)) {
                    deserializedLiftrBaseDataOrganizationProperties.user = LiftrBaseUserDetails.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedLiftrBaseDataOrganizationProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("partnerOrganizationProperties".equals(fieldName)) {
                    deserializedLiftrBaseDataOrganizationProperties.partnerOrganizationProperties
                        = LiftrBaseDataPartnerOrganizationProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLiftrBaseDataOrganizationProperties;
        });
    }
}
