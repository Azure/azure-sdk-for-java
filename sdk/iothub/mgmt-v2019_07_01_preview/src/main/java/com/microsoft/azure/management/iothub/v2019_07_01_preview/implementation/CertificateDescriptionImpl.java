/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.iothub.v2019_07_01_preview.implementation;

import com.microsoft.azure.management.iothub.v2019_07_01_preview.CertificateDescription;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.iothub.v2019_07_01_preview.CertificateProperties;

class CertificateDescriptionImpl extends CreatableUpdatableImpl<CertificateDescription, CertificateDescriptionInner, CertificateDescriptionImpl> implements CertificateDescription, CertificateDescription.Definition, CertificateDescription.Update {
    private final IoTHubManager manager;
    private String resourceGroupName;
    private String resourceName;
    private String certificateName;
    private String cifMatch;
    private String ccertificate;
    private String uifMatch;
    private String ucertificate;

    CertificateDescriptionImpl(String name, IoTHubManager manager) {
        super(name, new CertificateDescriptionInner());
        this.manager = manager;
        // Set resource name
        this.certificateName = name;
        //
    }

    CertificateDescriptionImpl(CertificateDescriptionInner inner, IoTHubManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.certificateName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.resourceName = IdParsingUtils.getValueFromIdByName(inner.id(), "IotHubs");
        this.certificateName = IdParsingUtils.getValueFromIdByName(inner.id(), "certificates");
        //
    }

    @Override
    public IoTHubManager manager() {
        return this.manager;
    }

    @Override
    public Observable<CertificateDescription> createResourceAsync() {
        CertificatesInner client = this.manager().inner().certificates();
        return client.createOrUpdateAsync(this.resourceGroupName, this.resourceName, this.certificateName, this.cifMatch, this.ccertificate)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<CertificateDescription> updateResourceAsync() {
        CertificatesInner client = this.manager().inner().certificates();
        return client.createOrUpdateAsync(this.resourceGroupName, this.resourceName, this.certificateName, this.uifMatch, this.ucertificate)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<CertificateDescriptionInner> getInnerAsync() {
        CertificatesInner client = this.manager().inner().certificates();
        return client.getAsync(this.resourceGroupName, this.resourceName, this.certificateName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public CertificateProperties properties() {
        return this.inner().properties();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public CertificateDescriptionImpl withExistingIotHub(String resourceGroupName, String resourceName) {
        this.resourceGroupName = resourceGroupName;
        this.resourceName = resourceName;
        return this;
    }

    @Override
    public CertificateDescriptionImpl withIfMatch(String ifMatch) {
        if (isInCreateMode()) {
            this.cifMatch = ifMatch;
        } else {
            this.uifMatch = ifMatch;
        }
        return this;
    }

    @Override
    public CertificateDescriptionImpl withCertificate(String certificate) {
        if (isInCreateMode()) {
            this.ccertificate = certificate;
        } else {
            this.ucertificate = certificate;
        }
        return this;
    }

}
