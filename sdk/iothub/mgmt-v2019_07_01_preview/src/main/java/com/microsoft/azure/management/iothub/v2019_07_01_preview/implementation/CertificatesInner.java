/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.iothub.v2019_07_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.iothub.v2019_07_01_preview.CertificateBodyDescription;
import com.microsoft.azure.management.iothub.v2019_07_01_preview.CertificateVerificationDescription;
import com.microsoft.azure.management.iothub.v2019_07_01_preview.ErrorDetailsException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Certificates.
 */
public class CertificatesInner {
    /** The Retrofit service to perform REST calls. */
    private CertificatesService service;
    /** The service client containing this operation class. */
    private IotHubClientImpl client;

    /**
     * Initializes an instance of CertificatesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public CertificatesInner(Retrofit retrofit, IotHubClientImpl client) {
        this.service = retrofit.create(CertificatesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Certificates to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CertificatesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.iothub.v2019_07_01_preview.Certificates listByIotHub" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates")
        Observable<Response<ResponseBody>> listByIotHub(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.iothub.v2019_07_01_preview.Certificates get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Path("certificateName") String certificateName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.iothub.v2019_07_01_preview.Certificates createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Path("certificateName") String certificateName, @Query("api-version") String apiVersion, @Header("If-Match") String ifMatch, @Header("accept-language") String acceptLanguage, @Body CertificateBodyDescription certificateDescription, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.iothub.v2019_07_01_preview.Certificates delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Path("certificateName") String certificateName, @Query("api-version") String apiVersion, @Header("If-Match") String ifMatch, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.iothub.v2019_07_01_preview.Certificates generateVerificationCode" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}/generateVerificationCode")
        Observable<Response<ResponseBody>> generateVerificationCode(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Path("certificateName") String certificateName, @Query("api-version") String apiVersion, @Header("If-Match") String ifMatch, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.iothub.v2019_07_01_preview.Certificates verify" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}/verify")
        Observable<Response<ResponseBody>> verify(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Path("certificateName") String certificateName, @Query("api-version") String apiVersion, @Header("If-Match") String ifMatch, @Header("accept-language") String acceptLanguage, @Body CertificateVerificationDescription certificateVerificationBody, @Header("User-Agent") String userAgent);

    }

    /**
     * Get the certificate list.
     * Returns the list of certificates.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateListDescriptionInner object if successful.
     */
    public CertificateListDescriptionInner listByIotHub(String resourceGroupName, String resourceName) {
        return listByIotHubWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().single().body();
    }

    /**
     * Get the certificate list.
     * Returns the list of certificates.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CertificateListDescriptionInner> listByIotHubAsync(String resourceGroupName, String resourceName, final ServiceCallback<CertificateListDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByIotHubWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Get the certificate list.
     * Returns the list of certificates.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateListDescriptionInner object
     */
    public Observable<CertificateListDescriptionInner> listByIotHubAsync(String resourceGroupName, String resourceName) {
        return listByIotHubWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<CertificateListDescriptionInner>, CertificateListDescriptionInner>() {
            @Override
            public CertificateListDescriptionInner call(ServiceResponse<CertificateListDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the certificate list.
     * Returns the list of certificates.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateListDescriptionInner object
     */
    public Observable<ServiceResponse<CertificateListDescriptionInner>> listByIotHubWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByIotHub(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CertificateListDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<CertificateListDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CertificateListDescriptionInner> clientResponse = listByIotHubDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CertificateListDescriptionInner> listByIotHubDelegate(Response<ResponseBody> response) throws ErrorDetailsException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CertificateListDescriptionInner, ErrorDetailsException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CertificateListDescriptionInner>() { }.getType())
                .registerError(ErrorDetailsException.class)
                .build(response);
    }

    /**
     * Get the certificate.
     * Returns the certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateDescriptionInner object if successful.
     */
    public CertificateDescriptionInner get(String resourceGroupName, String resourceName, String certificateName) {
        return getWithServiceResponseAsync(resourceGroupName, resourceName, certificateName).toBlocking().single().body();
    }

    /**
     * Get the certificate.
     * Returns the certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CertificateDescriptionInner> getAsync(String resourceGroupName, String resourceName, String certificateName, final ServiceCallback<CertificateDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, resourceName, certificateName), serviceCallback);
    }

    /**
     * Get the certificate.
     * Returns the certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateDescriptionInner object
     */
    public Observable<CertificateDescriptionInner> getAsync(String resourceGroupName, String resourceName, String certificateName) {
        return getWithServiceResponseAsync(resourceGroupName, resourceName, certificateName).map(new Func1<ServiceResponse<CertificateDescriptionInner>, CertificateDescriptionInner>() {
            @Override
            public CertificateDescriptionInner call(ServiceResponse<CertificateDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the certificate.
     * Returns the certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateDescriptionInner object
     */
    public Observable<ServiceResponse<CertificateDescriptionInner>> getWithServiceResponseAsync(String resourceGroupName, String resourceName, String certificateName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, resourceName, certificateName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CertificateDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<CertificateDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CertificateDescriptionInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CertificateDescriptionInner> getDelegate(Response<ResponseBody> response) throws ErrorDetailsException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CertificateDescriptionInner, ErrorDetailsException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CertificateDescriptionInner>() { }.getType())
                .registerError(ErrorDetailsException.class)
                .build(response);
    }

    /**
     * Upload the certificate to the IoT hub.
     * Adds new or replaces existing certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateDescriptionInner object if successful.
     */
    public CertificateDescriptionInner createOrUpdate(String resourceGroupName, String resourceName, String certificateName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, certificateName).toBlocking().single().body();
    }

    /**
     * Upload the certificate to the IoT hub.
     * Adds new or replaces existing certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CertificateDescriptionInner> createOrUpdateAsync(String resourceGroupName, String resourceName, String certificateName, final ServiceCallback<CertificateDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, certificateName), serviceCallback);
    }

    /**
     * Upload the certificate to the IoT hub.
     * Adds new or replaces existing certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateDescriptionInner object
     */
    public Observable<CertificateDescriptionInner> createOrUpdateAsync(String resourceGroupName, String resourceName, String certificateName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, certificateName).map(new Func1<ServiceResponse<CertificateDescriptionInner>, CertificateDescriptionInner>() {
            @Override
            public CertificateDescriptionInner call(ServiceResponse<CertificateDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Upload the certificate to the IoT hub.
     * Adds new or replaces existing certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateDescriptionInner object
     */
    public Observable<ServiceResponse<CertificateDescriptionInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String resourceName, String certificateName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String ifMatch = null;
        final String certificate = null;
        CertificateBodyDescription certificateDescription = new CertificateBodyDescription();
        certificateDescription.withCertificate(null);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, resourceName, certificateName, this.client.apiVersion(), ifMatch, this.client.acceptLanguage(), certificateDescription, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CertificateDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<CertificateDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CertificateDescriptionInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Upload the certificate to the IoT hub.
     * Adds new or replaces existing certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate. Do not specify for creating a brand new certificate. Required to update an existing certificate.
     * @param certificate base-64 representation of the X509 leaf certificate .cer file or just .pem file content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateDescriptionInner object if successful.
     */
    public CertificateDescriptionInner createOrUpdate(String resourceGroupName, String resourceName, String certificateName, String ifMatch, String certificate) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, certificateName, ifMatch, certificate).toBlocking().single().body();
    }

    /**
     * Upload the certificate to the IoT hub.
     * Adds new or replaces existing certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate. Do not specify for creating a brand new certificate. Required to update an existing certificate.
     * @param certificate base-64 representation of the X509 leaf certificate .cer file or just .pem file content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CertificateDescriptionInner> createOrUpdateAsync(String resourceGroupName, String resourceName, String certificateName, String ifMatch, String certificate, final ServiceCallback<CertificateDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, certificateName, ifMatch, certificate), serviceCallback);
    }

    /**
     * Upload the certificate to the IoT hub.
     * Adds new or replaces existing certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate. Do not specify for creating a brand new certificate. Required to update an existing certificate.
     * @param certificate base-64 representation of the X509 leaf certificate .cer file or just .pem file content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateDescriptionInner object
     */
    public Observable<CertificateDescriptionInner> createOrUpdateAsync(String resourceGroupName, String resourceName, String certificateName, String ifMatch, String certificate) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, certificateName, ifMatch, certificate).map(new Func1<ServiceResponse<CertificateDescriptionInner>, CertificateDescriptionInner>() {
            @Override
            public CertificateDescriptionInner call(ServiceResponse<CertificateDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Upload the certificate to the IoT hub.
     * Adds new or replaces existing certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate. Do not specify for creating a brand new certificate. Required to update an existing certificate.
     * @param certificate base-64 representation of the X509 leaf certificate .cer file or just .pem file content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateDescriptionInner object
     */
    public Observable<ServiceResponse<CertificateDescriptionInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String resourceName, String certificateName, String ifMatch, String certificate) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        CertificateBodyDescription certificateDescription = new CertificateBodyDescription();
        certificateDescription.withCertificate(certificate);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, resourceName, certificateName, this.client.apiVersion(), ifMatch, this.client.acceptLanguage(), certificateDescription, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CertificateDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<CertificateDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CertificateDescriptionInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CertificateDescriptionInner> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorDetailsException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CertificateDescriptionInner, ErrorDetailsException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CertificateDescriptionInner>() { }.getType())
                .register(201, new TypeToken<CertificateDescriptionInner>() { }.getType())
                .registerError(ErrorDetailsException.class)
                .build(response);
    }

    /**
     * Delete an X509 certificate.
     * Deletes an existing X509 certificate or does nothing if it does not exist.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String resourceName, String certificateName, String ifMatch) {
        deleteWithServiceResponseAsync(resourceGroupName, resourceName, certificateName, ifMatch).toBlocking().single().body();
    }

    /**
     * Delete an X509 certificate.
     * Deletes an existing X509 certificate or does nothing if it does not exist.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String resourceName, String certificateName, String ifMatch, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, resourceName, certificateName, ifMatch), serviceCallback);
    }

    /**
     * Delete an X509 certificate.
     * Deletes an existing X509 certificate or does nothing if it does not exist.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String resourceName, String certificateName, String ifMatch) {
        return deleteWithServiceResponseAsync(resourceGroupName, resourceName, certificateName, ifMatch).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete an X509 certificate.
     * Deletes an existing X509 certificate or does nothing if it does not exist.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String resourceName, String certificateName, String ifMatch) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (ifMatch == null) {
            throw new IllegalArgumentException("Parameter ifMatch is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, resourceName, certificateName, this.client.apiVersion(), ifMatch, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorDetailsException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorDetailsException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorDetailsException.class)
                .build(response);
    }

    /**
     * Generate verification code for proof of possession flow.
     * Generates verification code for proof of possession flow. The verification code will be used to generate a leaf certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateWithNonceDescriptionInner object if successful.
     */
    public CertificateWithNonceDescriptionInner generateVerificationCode(String resourceGroupName, String resourceName, String certificateName, String ifMatch) {
        return generateVerificationCodeWithServiceResponseAsync(resourceGroupName, resourceName, certificateName, ifMatch).toBlocking().single().body();
    }

    /**
     * Generate verification code for proof of possession flow.
     * Generates verification code for proof of possession flow. The verification code will be used to generate a leaf certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CertificateWithNonceDescriptionInner> generateVerificationCodeAsync(String resourceGroupName, String resourceName, String certificateName, String ifMatch, final ServiceCallback<CertificateWithNonceDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(generateVerificationCodeWithServiceResponseAsync(resourceGroupName, resourceName, certificateName, ifMatch), serviceCallback);
    }

    /**
     * Generate verification code for proof of possession flow.
     * Generates verification code for proof of possession flow. The verification code will be used to generate a leaf certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateWithNonceDescriptionInner object
     */
    public Observable<CertificateWithNonceDescriptionInner> generateVerificationCodeAsync(String resourceGroupName, String resourceName, String certificateName, String ifMatch) {
        return generateVerificationCodeWithServiceResponseAsync(resourceGroupName, resourceName, certificateName, ifMatch).map(new Func1<ServiceResponse<CertificateWithNonceDescriptionInner>, CertificateWithNonceDescriptionInner>() {
            @Override
            public CertificateWithNonceDescriptionInner call(ServiceResponse<CertificateWithNonceDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Generate verification code for proof of possession flow.
     * Generates verification code for proof of possession flow. The verification code will be used to generate a leaf certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateWithNonceDescriptionInner object
     */
    public Observable<ServiceResponse<CertificateWithNonceDescriptionInner>> generateVerificationCodeWithServiceResponseAsync(String resourceGroupName, String resourceName, String certificateName, String ifMatch) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (ifMatch == null) {
            throw new IllegalArgumentException("Parameter ifMatch is required and cannot be null.");
        }
        return service.generateVerificationCode(this.client.subscriptionId(), resourceGroupName, resourceName, certificateName, this.client.apiVersion(), ifMatch, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CertificateWithNonceDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<CertificateWithNonceDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CertificateWithNonceDescriptionInner> clientResponse = generateVerificationCodeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CertificateWithNonceDescriptionInner> generateVerificationCodeDelegate(Response<ResponseBody> response) throws ErrorDetailsException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CertificateWithNonceDescriptionInner, ErrorDetailsException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CertificateWithNonceDescriptionInner>() { }.getType())
                .registerError(ErrorDetailsException.class)
                .build(response);
    }

    /**
     * Verify certificate's private key possession.
     * Verifies the certificate's private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateDescriptionInner object if successful.
     */
    public CertificateDescriptionInner verify(String resourceGroupName, String resourceName, String certificateName, String ifMatch) {
        return verifyWithServiceResponseAsync(resourceGroupName, resourceName, certificateName, ifMatch).toBlocking().single().body();
    }

    /**
     * Verify certificate's private key possession.
     * Verifies the certificate's private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CertificateDescriptionInner> verifyAsync(String resourceGroupName, String resourceName, String certificateName, String ifMatch, final ServiceCallback<CertificateDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(verifyWithServiceResponseAsync(resourceGroupName, resourceName, certificateName, ifMatch), serviceCallback);
    }

    /**
     * Verify certificate's private key possession.
     * Verifies the certificate's private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateDescriptionInner object
     */
    public Observable<CertificateDescriptionInner> verifyAsync(String resourceGroupName, String resourceName, String certificateName, String ifMatch) {
        return verifyWithServiceResponseAsync(resourceGroupName, resourceName, certificateName, ifMatch).map(new Func1<ServiceResponse<CertificateDescriptionInner>, CertificateDescriptionInner>() {
            @Override
            public CertificateDescriptionInner call(ServiceResponse<CertificateDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Verify certificate's private key possession.
     * Verifies the certificate's private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateDescriptionInner object
     */
    public Observable<ServiceResponse<CertificateDescriptionInner>> verifyWithServiceResponseAsync(String resourceGroupName, String resourceName, String certificateName, String ifMatch) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (ifMatch == null) {
            throw new IllegalArgumentException("Parameter ifMatch is required and cannot be null.");
        }
        final String certificate = null;
        CertificateVerificationDescription certificateVerificationBody = new CertificateVerificationDescription();
        certificateVerificationBody.withCertificate(null);
        return service.verify(this.client.subscriptionId(), resourceGroupName, resourceName, certificateName, this.client.apiVersion(), ifMatch, this.client.acceptLanguage(), certificateVerificationBody, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CertificateDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<CertificateDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CertificateDescriptionInner> clientResponse = verifyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Verify certificate's private key possession.
     * Verifies the certificate's private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @param certificate base-64 representation of X509 certificate .cer file or just .pem file content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateDescriptionInner object if successful.
     */
    public CertificateDescriptionInner verify(String resourceGroupName, String resourceName, String certificateName, String ifMatch, String certificate) {
        return verifyWithServiceResponseAsync(resourceGroupName, resourceName, certificateName, ifMatch, certificate).toBlocking().single().body();
    }

    /**
     * Verify certificate's private key possession.
     * Verifies the certificate's private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @param certificate base-64 representation of X509 certificate .cer file or just .pem file content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CertificateDescriptionInner> verifyAsync(String resourceGroupName, String resourceName, String certificateName, String ifMatch, String certificate, final ServiceCallback<CertificateDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(verifyWithServiceResponseAsync(resourceGroupName, resourceName, certificateName, ifMatch, certificate), serviceCallback);
    }

    /**
     * Verify certificate's private key possession.
     * Verifies the certificate's private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @param certificate base-64 representation of X509 certificate .cer file or just .pem file content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateDescriptionInner object
     */
    public Observable<CertificateDescriptionInner> verifyAsync(String resourceGroupName, String resourceName, String certificateName, String ifMatch, String certificate) {
        return verifyWithServiceResponseAsync(resourceGroupName, resourceName, certificateName, ifMatch, certificate).map(new Func1<ServiceResponse<CertificateDescriptionInner>, CertificateDescriptionInner>() {
            @Override
            public CertificateDescriptionInner call(ServiceResponse<CertificateDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Verify certificate's private key possession.
     * Verifies the certificate's private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.
     *
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @param certificate base-64 representation of X509 certificate .cer file or just .pem file content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateDescriptionInner object
     */
    public Observable<ServiceResponse<CertificateDescriptionInner>> verifyWithServiceResponseAsync(String resourceGroupName, String resourceName, String certificateName, String ifMatch, String certificate) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (ifMatch == null) {
            throw new IllegalArgumentException("Parameter ifMatch is required and cannot be null.");
        }
        CertificateVerificationDescription certificateVerificationBody = new CertificateVerificationDescription();
        certificateVerificationBody.withCertificate(certificate);
        return service.verify(this.client.subscriptionId(), resourceGroupName, resourceName, certificateName, this.client.apiVersion(), ifMatch, this.client.acceptLanguage(), certificateVerificationBody, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CertificateDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<CertificateDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CertificateDescriptionInner> clientResponse = verifyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CertificateDescriptionInner> verifyDelegate(Response<ResponseBody> response) throws ErrorDetailsException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CertificateDescriptionInner, ErrorDetailsException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CertificateDescriptionInner>() { }.getType())
                .registerError(ErrorDetailsException.class)
                .build(response);
    }

}
