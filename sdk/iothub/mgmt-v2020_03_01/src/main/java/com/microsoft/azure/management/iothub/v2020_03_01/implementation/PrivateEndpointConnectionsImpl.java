/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.iothub.v2020_03_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.iothub.v2020_03_01.PrivateEndpointConnections;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.iothub.v2020_03_01.PrivateEndpointConnection;

class PrivateEndpointConnectionsImpl extends WrapperImpl<PrivateEndpointConnectionsInner> implements PrivateEndpointConnections {
    private final DevicesManager manager;

    PrivateEndpointConnectionsImpl(DevicesManager manager) {
        super(manager.inner().privateEndpointConnections());
        this.manager = manager;
    }

    public DevicesManager manager() {
        return this.manager;
    }

    private PrivateEndpointConnectionImpl wrapModel(PrivateEndpointConnectionInner inner) {
        return  new PrivateEndpointConnectionImpl(inner, manager());
    }

    @Override
    public Observable<PrivateEndpointConnection> listAsync(String resourceGroupName, String resourceName) {
        PrivateEndpointConnectionsInner client = this.inner();
        return client.listAsync(resourceGroupName, resourceName)
        .flatMap(new Func1<List<PrivateEndpointConnectionInner>, Observable<PrivateEndpointConnectionInner>>() {
            @Override
            public Observable<PrivateEndpointConnectionInner> call(List<PrivateEndpointConnectionInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<PrivateEndpointConnectionInner, PrivateEndpointConnection>() {
            @Override
            public PrivateEndpointConnection call(PrivateEndpointConnectionInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<PrivateEndpointConnection> getAsync(String resourceGroupName, String resourceName, String privateEndpointConnectionName) {
        PrivateEndpointConnectionsInner client = this.inner();
        return client.getAsync(resourceGroupName, resourceName, privateEndpointConnectionName)
        .flatMap(new Func1<PrivateEndpointConnectionInner, Observable<PrivateEndpointConnection>>() {
            @Override
            public Observable<PrivateEndpointConnection> call(PrivateEndpointConnectionInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((PrivateEndpointConnection)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String resourceName, String privateEndpointConnectionName) {
        PrivateEndpointConnectionsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, resourceName, privateEndpointConnectionName).toCompletable();
    }

}
