// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The health data for an endpoint. */
@Fluent
public final class EndpointHealthData {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(EndpointHealthData.class);

    /*
     * Id of the endpoint
     */
    @JsonProperty(value = "endpointId")
    private String endpointId;

    /*
     * Health statuses have following meanings. The 'healthy' status shows that
     * the endpoint is accepting messages as expected. The 'unhealthy' status
     * shows that the endpoint is not accepting messages as expected and IoT
     * Hub is retrying to send data to this endpoint. The status of an
     * unhealthy endpoint will be updated to healthy when IoT Hub has
     * established an eventually consistent state of health. The 'dead' status
     * shows that the endpoint is not accepting messages, after IoT Hub retried
     * sending messages for the retrial period. See IoT Hub metrics to identify
     * errors and monitor issues with endpoints. The 'unknown' status shows
     * that the IoT Hub has not established a connection with the endpoint. No
     * messages have been delivered to or rejected from this endpoint
     */
    @JsonProperty(value = "healthStatus")
    private EndpointHealthStatus healthStatus;

    /**
     * Get the endpointId property: Id of the endpoint.
     *
     * @return the endpointId value.
     */
    public String getEndpointId() {
        return this.endpointId;
    }

    /**
     * Set the endpointId property: Id of the endpoint.
     *
     * @param endpointId the endpointId value to set.
     * @return the EndpointHealthData object itself.
     */
    public EndpointHealthData setEndpointId(String endpointId) {
        this.endpointId = endpointId;
        return this;
    }

    /**
     * Get the healthStatus property: Health statuses have following meanings. The 'healthy' status shows that the
     * endpoint is accepting messages as expected. The 'unhealthy' status shows that the endpoint is not accepting
     * messages as expected and IoT Hub is retrying to send data to this endpoint. The status of an unhealthy endpoint
     * will be updated to healthy when IoT Hub has established an eventually consistent state of health. The 'dead'
     * status shows that the endpoint is not accepting messages, after IoT Hub retried sending messages for the retrial
     * period. See IoT Hub metrics to identify errors and monitor issues with endpoints. The 'unknown' status shows that
     * the IoT Hub has not established a connection with the endpoint. No messages have been delivered to or rejected
     * from this endpoint.
     *
     * @return the healthStatus value.
     */
    public EndpointHealthStatus getHealthStatus() {
        return this.healthStatus;
    }

    /**
     * Set the healthStatus property: Health statuses have following meanings. The 'healthy' status shows that the
     * endpoint is accepting messages as expected. The 'unhealthy' status shows that the endpoint is not accepting
     * messages as expected and IoT Hub is retrying to send data to this endpoint. The status of an unhealthy endpoint
     * will be updated to healthy when IoT Hub has established an eventually consistent state of health. The 'dead'
     * status shows that the endpoint is not accepting messages, after IoT Hub retried sending messages for the retrial
     * period. See IoT Hub metrics to identify errors and monitor issues with endpoints. The 'unknown' status shows that
     * the IoT Hub has not established a connection with the endpoint. No messages have been delivered to or rejected
     * from this endpoint.
     *
     * @param healthStatus the healthStatus value to set.
     * @return the EndpointHealthData object itself.
     */
    public EndpointHealthData setHealthStatus(EndpointHealthStatus healthStatus) {
        this.healthStatus = healthStatus;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {}
}
