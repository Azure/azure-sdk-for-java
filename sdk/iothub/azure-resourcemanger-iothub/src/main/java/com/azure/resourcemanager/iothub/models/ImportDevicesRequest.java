// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Use to provide parameters when requesting an import of all devices in the hub. */
@Fluent
public final class ImportDevicesRequest {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ImportDevicesRequest.class);

    /*
     * The input blob container URI.
     */
    @JsonProperty(value = "inputBlobContainerUri", required = true)
    private String inputBlobContainerUri;

    /*
     * The output blob container URI.
     */
    @JsonProperty(value = "outputBlobContainerUri", required = true)
    private String outputBlobContainerUri;

    /*
     * The blob name to be used when importing from the provided input blob
     * container.
     */
    @JsonProperty(value = "inputBlobName")
    private String inputBlobName;

    /*
     * The blob name to use for storing the status of the import job.
     */
    @JsonProperty(value = "outputBlobName")
    private String outputBlobName;

    /*
     * Specifies authentication type being used for connecting to the storage
     * account.
     */
    @JsonProperty(value = "authenticationType")
    private AuthenticationType authenticationType;

    /**
     * Get the inputBlobContainerUri property: The input blob container URI.
     *
     * @return the inputBlobContainerUri value.
     */
    public String getInputBlobContainerUri() {
        return this.inputBlobContainerUri;
    }

    /**
     * Set the inputBlobContainerUri property: The input blob container URI.
     *
     * @param inputBlobContainerUri the inputBlobContainerUri value to set.
     * @return the ImportDevicesRequest object itself.
     */
    public ImportDevicesRequest setInputBlobContainerUri(String inputBlobContainerUri) {
        this.inputBlobContainerUri = inputBlobContainerUri;
        return this;
    }

    /**
     * Get the outputBlobContainerUri property: The output blob container URI.
     *
     * @return the outputBlobContainerUri value.
     */
    public String getOutputBlobContainerUri() {
        return this.outputBlobContainerUri;
    }

    /**
     * Set the outputBlobContainerUri property: The output blob container URI.
     *
     * @param outputBlobContainerUri the outputBlobContainerUri value to set.
     * @return the ImportDevicesRequest object itself.
     */
    public ImportDevicesRequest setOutputBlobContainerUri(String outputBlobContainerUri) {
        this.outputBlobContainerUri = outputBlobContainerUri;
        return this;
    }

    /**
     * Get the inputBlobName property: The blob name to be used when importing from the provided input blob container.
     *
     * @return the inputBlobName value.
     */
    public String getInputBlobName() {
        return this.inputBlobName;
    }

    /**
     * Set the inputBlobName property: The blob name to be used when importing from the provided input blob container.
     *
     * @param inputBlobName the inputBlobName value to set.
     * @return the ImportDevicesRequest object itself.
     */
    public ImportDevicesRequest setInputBlobName(String inputBlobName) {
        this.inputBlobName = inputBlobName;
        return this;
    }

    /**
     * Get the outputBlobName property: The blob name to use for storing the status of the import job.
     *
     * @return the outputBlobName value.
     */
    public String getOutputBlobName() {
        return this.outputBlobName;
    }

    /**
     * Set the outputBlobName property: The blob name to use for storing the status of the import job.
     *
     * @param outputBlobName the outputBlobName value to set.
     * @return the ImportDevicesRequest object itself.
     */
    public ImportDevicesRequest setOutputBlobName(String outputBlobName) {
        this.outputBlobName = outputBlobName;
        return this;
    }

    /**
     * Get the authenticationType property: Specifies authentication type being used for connecting to the storage
     * account.
     *
     * @return the authenticationType value.
     */
    public AuthenticationType getAuthenticationType() {
        return this.authenticationType;
    }

    /**
     * Set the authenticationType property: Specifies authentication type being used for connecting to the storage
     * account.
     *
     * @param authenticationType the authenticationType value to set.
     * @return the ImportDevicesRequest object itself.
     */
    public ImportDevicesRequest setAuthenticationType(AuthenticationType authenticationType) {
        this.authenticationType = authenticationType;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (getInputBlobContainerUri() == null) {
            throw logger.logExceptionAsError(
                    new IllegalArgumentException(
                            "Missing required property inputBlobContainerUri in model ImportDevicesRequest"));
        }
        if (getOutputBlobContainerUri() == null) {
            throw logger.logExceptionAsError(
                    new IllegalArgumentException(
                            "Missing required property outputBlobContainerUri in model ImportDevicesRequest"));
        }
    }
}
