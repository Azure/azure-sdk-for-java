// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.iothub.IotHubManager;
import com.azure.resourcemanager.iothub.models.ArmIdentity;
import com.azure.resourcemanager.iothub.models.Capabilities;
import com.azure.resourcemanager.iothub.models.CloudToDeviceProperties;
import com.azure.resourcemanager.iothub.models.DefaultAction;
import com.azure.resourcemanager.iothub.models.EncryptionPropertiesDescription;
import com.azure.resourcemanager.iothub.models.IotHubDescription;
import com.azure.resourcemanager.iothub.models.IotHubProperties;
import com.azure.resourcemanager.iothub.models.IotHubPropertiesDeviceStreams;
import com.azure.resourcemanager.iothub.models.IotHubSku;
import com.azure.resourcemanager.iothub.models.IotHubSkuInfo;
import com.azure.resourcemanager.iothub.models.NetworkRuleSetProperties;
import com.azure.resourcemanager.iothub.models.PublicNetworkAccess;
import com.azure.resourcemanager.iothub.models.ResourceIdentityType;
import com.azure.resourcemanager.iothub.models.RootCertificateProperties;
import com.azure.resourcemanager.iothub.models.RoutingProperties;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class IotHubResourcesCreateOrUpdateTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"etag\":\"tnwxy\",\"properties\":{\"authorizationPolicies\":[],\"disableLocalAuth\":false,\"disableDeviceSAS\":true,\"disableModuleSAS\":true,\"restrictOutboundNetworkAccess\":false,\"allowedFqdnList\":[\"xkdmligo\",\"ibrxkp\",\"loazuruocbgoo\"],\"publicNetworkAccess\":\"Enabled\",\"ipFilterRules\":[],\"networkRuleSets\":{\"defaultAction\":\"Allow\",\"applyToBuiltInEventHubEndpoint\":false,\"ipRules\":[]},\"minTlsVersion\":\"xakvvjgslor\",\"privateEndpointConnections\":[],\"provisioningState\":\"Succeeded\",\"state\":\"kgkxn\",\"hostName\":\"dabg\",\"eventHubEndpoints\":{},\"routing\":{\"routes\":[],\"enrichments\":[]},\"storageEndpoints\":{},\"messagingEndpoints\":{},\"enableFileUploadNotifications\":false,\"cloudToDevice\":{\"maxDeliveryCount\":1985861684,\"defaultTtlAsIso8601\":\"PT200H4M43S\"},\"comments\":\"xccybvpa\",\"deviceStreams\":{\"streamingEndpoints\":[]},\"features\":\"DeviceManagement\",\"encryption\":{\"keySource\":\"px\",\"keyVaultProperties\":[]},\"locations\":[],\"enableDataResidency\":false,\"rootCertificate\":{\"enableRootCertificateV2\":true,\"lastUpdatedTimeUtc\":\"2021-10-13T06:57:05Z\"}},\"sku\":{\"name\":\"S3\",\"tier\":\"Standard\",\"capacity\":4659615612373215411},\"identity\":{\"principalId\":\"kdbdgiogsj\",\"tenantId\":\"nwqjnoba\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{}},\"location\":\"iacegfnmn\",\"tags\":{\"vvbalx\":\"mvmemfnczd\",\"chp\":\"l\",\"evwrdnhfuk\":\"db\",\"fcvlerch\":\"vsjcswsmystuluqy\"},\"id\":\"qbmfpjbabwidf\",\"name\":\"xsspuunnoxyhk\",\"type\":\"g\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        IotHubManager manager =
            IotHubManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        IotHubDescription response =
            manager
                .iotHubResources()
                .define("fomiloxgg")
                .withRegion("tsttktlahbq")
                .withExistingResourceGroup("nhxmsi")
                .withSku(new IotHubSkuInfo().withName(IotHubSku.B1).withCapacity(4848854115585115882L))
                .withTags(mapOf("x", "xtgzukxitmmqtgqq"))
                .withEtag("fi")
                .withProperties(
                    new IotHubProperties()
                        .withAuthorizationPolicies(Arrays.asList())
                        .withDisableLocalAuth(true)
                        .withDisableDeviceSas(false)
                        .withDisableModuleSas(false)
                        .withRestrictOutboundNetworkAccess(true)
                        .withAllowedFqdnList(Arrays.asList("cyyysfgdot"))
                        .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                        .withIpFilterRules(Arrays.asList())
                        .withNetworkRuleSets(
                            new NetworkRuleSetProperties()
                                .withDefaultAction(DefaultAction.ALLOW)
                                .withApplyToBuiltInEventHubEndpoint(false)
                                .withIpRules(Arrays.asList()))
                        .withMinTlsVersion("oqonma")
                        .withPrivateEndpointConnections(Arrays.asList())
                        .withEventHubEndpoints(mapOf())
                        .withRouting(
                            new RoutingProperties().withRoutes(Arrays.asList()).withEnrichments(Arrays.asList()))
                        .withStorageEndpoints(mapOf())
                        .withMessagingEndpoints(mapOf())
                        .withEnableFileUploadNotifications(true)
                        .withCloudToDevice(
                            new CloudToDeviceProperties()
                                .withMaxDeliveryCount(1634271875)
                                .withDefaultTtlAsIso8601(Duration.parse("PT92H40M47S")))
                        .withComments("bblgyavut")
                        .withDeviceStreams(new IotHubPropertiesDeviceStreams().withStreamingEndpoints(Arrays.asList()))
                        .withFeatures(Capabilities.DEVICE_MANAGEMENT)
                        .withEncryption(
                            new EncryptionPropertiesDescription()
                                .withKeySource("ismsksbpimlqolj")
                                .withKeyVaultProperties(Arrays.asList()))
                        .withEnableDataResidency(false)
                        .withRootCertificate(new RootCertificateProperties().withEnableRootCertificateV2(true)))
                .withIdentity(
                    new ArmIdentity()
                        .withType(ResourceIdentityType.SYSTEM_ASSIGNED)
                        .withUserAssignedIdentities(mapOf()))
                .withIfMatch("azivjlfrqttbajl")
                .create();

        Assertions.assertEquals("iacegfnmn", response.location());
        Assertions.assertEquals("mvmemfnczd", response.tags().get("vvbalx"));
        Assertions.assertEquals("tnwxy", response.etag());
        Assertions.assertEquals(false, response.properties().disableLocalAuth());
        Assertions.assertEquals(true, response.properties().disableDeviceSas());
        Assertions.assertEquals(true, response.properties().disableModuleSas());
        Assertions.assertEquals(false, response.properties().restrictOutboundNetworkAccess());
        Assertions.assertEquals("xkdmligo", response.properties().allowedFqdnList().get(0));
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.properties().publicNetworkAccess());
        Assertions.assertEquals(DefaultAction.ALLOW, response.properties().networkRuleSets().defaultAction());
        Assertions.assertEquals(false, response.properties().networkRuleSets().applyToBuiltInEventHubEndpoint());
        Assertions.assertEquals("xakvvjgslor", response.properties().minTlsVersion());
        Assertions.assertEquals(false, response.properties().enableFileUploadNotifications());
        Assertions.assertEquals(1985861684, response.properties().cloudToDevice().maxDeliveryCount());
        Assertions
            .assertEquals(Duration.parse("PT200H4M43S"), response.properties().cloudToDevice().defaultTtlAsIso8601());
        Assertions.assertEquals("xccybvpa", response.properties().comments());
        Assertions.assertEquals(Capabilities.DEVICE_MANAGEMENT, response.properties().features());
        Assertions.assertEquals("px", response.properties().encryption().keySource());
        Assertions.assertEquals(false, response.properties().enableDataResidency());
        Assertions.assertEquals(true, response.properties().rootCertificate().enableRootCertificateV2());
        Assertions.assertEquals(IotHubSku.S3, response.sku().name());
        Assertions.assertEquals(4659615612373215411L, response.sku().capacity());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
