// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iothub.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.iothub.fluent.models.SharedAccessSignatureAuthorizationRuleInner;
import com.azure.resourcemanager.iothub.models.AccessRights;
import com.azure.resourcemanager.iothub.models.AuthenticationType;
import com.azure.resourcemanager.iothub.models.Capabilities;
import com.azure.resourcemanager.iothub.models.CloudToDeviceProperties;
import com.azure.resourcemanager.iothub.models.DefaultAction;
import com.azure.resourcemanager.iothub.models.EncryptionPropertiesDescription;
import com.azure.resourcemanager.iothub.models.EnrichmentProperties;
import com.azure.resourcemanager.iothub.models.EventHubProperties;
import com.azure.resourcemanager.iothub.models.FallbackRouteProperties;
import com.azure.resourcemanager.iothub.models.FeedbackProperties;
import com.azure.resourcemanager.iothub.models.IotHubProperties;
import com.azure.resourcemanager.iothub.models.IotHubPropertiesDeviceStreams;
import com.azure.resourcemanager.iothub.models.IpFilterActionType;
import com.azure.resourcemanager.iothub.models.IpFilterRule;
import com.azure.resourcemanager.iothub.models.KeyVaultKeyProperties;
import com.azure.resourcemanager.iothub.models.ManagedIdentity;
import com.azure.resourcemanager.iothub.models.MessagingEndpointProperties;
import com.azure.resourcemanager.iothub.models.NetworkRuleIpAction;
import com.azure.resourcemanager.iothub.models.NetworkRuleSetIpRule;
import com.azure.resourcemanager.iothub.models.NetworkRuleSetProperties;
import com.azure.resourcemanager.iothub.models.PrivateEndpointConnectionProperties;
import com.azure.resourcemanager.iothub.models.PublicNetworkAccess;
import com.azure.resourcemanager.iothub.models.RootCertificateProperties;
import com.azure.resourcemanager.iothub.models.RouteProperties;
import com.azure.resourcemanager.iothub.models.RoutingEndpoints;
import com.azure.resourcemanager.iothub.models.RoutingProperties;
import com.azure.resourcemanager.iothub.models.RoutingSource;
import com.azure.resourcemanager.iothub.models.StorageEndpointProperties;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class IotHubPropertiesTests {
    @Test
    public void testDeserialize() {
        IotHubProperties model =
            BinaryData
                .fromString(
                    "{\"authorizationPolicies\":[{\"keyName\":\"xppbhtqqro\",\"primaryKey\":\"p\",\"secondaryKey\":\"s\",\"rights\":\"RegistryRead,"
                        + " RegistryWrite,"
                        + " ServiceConnect\"}],\"disableLocalAuth\":false,\"disableDeviceSAS\":false,\"disableModuleSAS\":false,\"restrictOutboundNetworkAccess\":false,\"allowedFqdnList\":[\"gzjaoyfhrtxilne\",\"kujysvlejuvfq\",\"wrlyxwjkcprb\"],\"publicNetworkAccess\":\"Enabled\",\"ipFilterRules\":[{\"filterName\":\"jvtbvpyss\",\"action\":\"Reject\",\"ipMask\":\"nruj\"},{\"filterName\":\"guhmuouqfpr\",\"action\":\"Accept\",\"ipMask\":\"wbnguitnwui\"}],\"networkRuleSets\":{\"defaultAction\":\"Deny\",\"applyToBuiltInEventHubEndpoint\":false,\"ipRules\":[{\"filterName\":\"fizuckyf\",\"action\":\"Allow\",\"ipMask\":\"fidfvzw\"},{\"filterName\":\"zuhtymwisdkfthwx\",\"action\":\"Allow\",\"ipMask\":\"eiwaopvkmi\"},{\"filterName\":\"c\",\"action\":\"Allow\",\"ipMask\":\"dcuf\"}]},\"minTlsVersion\":\"srp\",\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"dnsezcxtbzs\",\"name\":\"fycc\",\"type\":\"newmdwzjeiachbo\"},{\"properties\":{},\"id\":\"flnrosfqpteehzz\",\"name\":\"ypyqrimzinp\",\"type\":\"swjdkirso\"},{\"properties\":{},\"id\":\"qxhcrmn\",\"name\":\"hjtckwhd\",\"type\":\"oifiyipjxsqwpgr\"},{\"properties\":{},\"id\":\"znorcj\",\"name\":\"vsnb\",\"type\":\"xqabnmocpcysh\"}],\"provisioningState\":\"zafb\",\"state\":\"j\",\"hostName\":\"btoqcjmkljavbqid\",\"eventHubEndpoints\":{\"majtjaod\":{\"retentionTimeInDays\":4874464992113438939,\"partitionCount\":234614005,\"partitionIds\":[\"u\",\"jkrlkhbzhfepg\",\"gqexzlocxs\"],\"path\":\"aierhhb\",\"endpoint\":\"glu\"},\"dg\":{\"retentionTimeInDays\":8659441410597698690,\"partitionCount\":1455975978,\"partitionIds\":[\"qp\"],\"path\":\"kajionpim\",\"endpoint\":\"gstxgcp\"}},\"routing\":{\"endpoints\":{\"serviceBusQueues\":[],\"serviceBusTopics\":[],\"eventHubs\":[],\"storageContainers\":[],\"cosmosDBSqlCollections\":[]},\"routes\":[{\"name\":\"mcl\",\"source\":\"TwinChangeEvents\",\"condition\":\"j\",\"endpointNames\":[],\"isEnabled\":true},{\"name\":\"ejctbzaqsqsycb\",\"source\":\"DeviceJobLifecycleEvents\",\"condition\":\"k\",\"endpointNames\":[],\"isEnabled\":true}],\"fallbackRoute\":{\"name\":\"kexxppof\",\"source\":\"MqttBrokerMessages\",\"condition\":\"x\",\"endpointNames\":[\"jpgd\",\"toc\",\"j\",\"hvpmoue\"],\"isEnabled\":false},\"enrichments\":[{\"key\":\"xibqeojnx\",\"value\":\"bzv\",\"endpointNames\":[]},{\"key\":\"dntwndeicbtw\",\"value\":\"pzaoqvuhr\",\"endpointNames\":[]}]},\"storageEndpoints\":{\"ixuigdtopbobj\":{\"sasTtlAsIso8601\":\"PT165H16M7S\",\"connectionString\":\"yd\",\"containerName\":\"glmjth\",\"authenticationType\":\"keyBased\",\"identity\":{\"userAssignedIdentity\":\"yeicxmqciwqvhk\"}}},\"messagingEndpoints\":{\"a\":{\"lockDurationAsIso8601\":\"PT187H37M36S\",\"ttlAsIso8601\":\"PT189H17M16S\",\"maxDeliveryCount\":54099605}},\"enableFileUploadNotifications\":false,\"cloudToDevice\":{\"maxDeliveryCount\":999138845,\"defaultTtlAsIso8601\":\"PT45H55M49S\",\"feedback\":{\"lockDurationAsIso8601\":\"PT201H19S\",\"ttlAsIso8601\":\"PT22H47M41S\",\"maxDeliveryCount\":1696516626}},\"comments\":\"otkftutqxlngx\",\"deviceStreams\":{\"streamingEndpoints\":[\"ugnxkrxdqmi\"]},\"features\":\"None\",\"encryption\":{\"keySource\":\"rvqdra\",\"keyVaultProperties\":[{\"keyIdentifier\":\"big\"},{\"keyIdentifier\":\"qfbow\"}]},\"locations\":[{\"location\":\"ktzlcuiywg\",\"role\":\"secondary\"},{\"location\":\"ndrvynhzg\",\"role\":\"primary\"},{\"location\":\"cgyncocpecf\",\"role\":\"primary\"}],\"enableDataResidency\":false,\"rootCertificate\":{\"enableRootCertificateV2\":true,\"lastUpdatedTimeUtc\":\"2021-02-04T11:14:29Z\"}}")
                .toObject(IotHubProperties.class);
        Assertions.assertEquals("xppbhtqqro", model.authorizationPolicies().get(0).keyName());
        Assertions.assertEquals("p", model.authorizationPolicies().get(0).primaryKey());
        Assertions.assertEquals("s", model.authorizationPolicies().get(0).secondaryKey());
        Assertions
            .assertEquals(
                AccessRights.REGISTRY_READ_REGISTRY_WRITE_SERVICE_CONNECT,
                model.authorizationPolicies().get(0).rights());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(false, model.disableDeviceSas());
        Assertions.assertEquals(false, model.disableModuleSas());
        Assertions.assertEquals(false, model.restrictOutboundNetworkAccess());
        Assertions.assertEquals("gzjaoyfhrtxilne", model.allowedFqdnList().get(0));
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals("jvtbvpyss", model.ipFilterRules().get(0).filterName());
        Assertions.assertEquals(IpFilterActionType.REJECT, model.ipFilterRules().get(0).action());
        Assertions.assertEquals("nruj", model.ipFilterRules().get(0).ipMask());
        Assertions.assertEquals(DefaultAction.DENY, model.networkRuleSets().defaultAction());
        Assertions.assertEquals(false, model.networkRuleSets().applyToBuiltInEventHubEndpoint());
        Assertions.assertEquals("fizuckyf", model.networkRuleSets().ipRules().get(0).filterName());
        Assertions.assertEquals(NetworkRuleIpAction.ALLOW, model.networkRuleSets().ipRules().get(0).action());
        Assertions.assertEquals("fidfvzw", model.networkRuleSets().ipRules().get(0).ipMask());
        Assertions.assertEquals("srp", model.minTlsVersion());
        Assertions.assertEquals(4874464992113438939L, model.eventHubEndpoints().get("majtjaod").retentionTimeInDays());
        Assertions.assertEquals(234614005, model.eventHubEndpoints().get("majtjaod").partitionCount());
        Assertions.assertEquals("mcl", model.routing().routes().get(0).name());
        Assertions.assertEquals(RoutingSource.TWIN_CHANGE_EVENTS, model.routing().routes().get(0).source());
        Assertions.assertEquals("j", model.routing().routes().get(0).condition());
        Assertions.assertEquals(true, model.routing().routes().get(0).isEnabled());
        Assertions.assertEquals("kexxppof", model.routing().fallbackRoute().name());
        Assertions.assertEquals(RoutingSource.MQTT_BROKER_MESSAGES, model.routing().fallbackRoute().source());
        Assertions.assertEquals("x", model.routing().fallbackRoute().condition());
        Assertions.assertEquals("jpgd", model.routing().fallbackRoute().endpointNames().get(0));
        Assertions.assertEquals(false, model.routing().fallbackRoute().isEnabled());
        Assertions.assertEquals("xibqeojnx", model.routing().enrichments().get(0).key());
        Assertions.assertEquals("bzv", model.routing().enrichments().get(0).value());
        Assertions
            .assertEquals(
                Duration.parse("PT165H16M7S"), model.storageEndpoints().get("ixuigdtopbobj").sasTtlAsIso8601());
        Assertions.assertEquals("yd", model.storageEndpoints().get("ixuigdtopbobj").connectionString());
        Assertions.assertEquals("glmjth", model.storageEndpoints().get("ixuigdtopbobj").containerName());
        Assertions
            .assertEquals(
                AuthenticationType.KEY_BASED, model.storageEndpoints().get("ixuigdtopbobj").authenticationType());
        Assertions
            .assertEquals(
                "yeicxmqciwqvhk", model.storageEndpoints().get("ixuigdtopbobj").identity().userAssignedIdentity());
        Assertions
            .assertEquals(Duration.parse("PT187H37M36S"), model.messagingEndpoints().get("a").lockDurationAsIso8601());
        Assertions.assertEquals(Duration.parse("PT189H17M16S"), model.messagingEndpoints().get("a").ttlAsIso8601());
        Assertions.assertEquals(54099605, model.messagingEndpoints().get("a").maxDeliveryCount());
        Assertions.assertEquals(false, model.enableFileUploadNotifications());
        Assertions.assertEquals(999138845, model.cloudToDevice().maxDeliveryCount());
        Assertions.assertEquals(Duration.parse("PT45H55M49S"), model.cloudToDevice().defaultTtlAsIso8601());
        Assertions.assertEquals(Duration.parse("PT201H19S"), model.cloudToDevice().feedback().lockDurationAsIso8601());
        Assertions.assertEquals(Duration.parse("PT22H47M41S"), model.cloudToDevice().feedback().ttlAsIso8601());
        Assertions.assertEquals(1696516626, model.cloudToDevice().feedback().maxDeliveryCount());
        Assertions.assertEquals("otkftutqxlngx", model.comments());
        Assertions.assertEquals("ugnxkrxdqmi", model.deviceStreams().streamingEndpoints().get(0));
        Assertions.assertEquals(Capabilities.NONE, model.features());
        Assertions.assertEquals("rvqdra", model.encryption().keySource());
        Assertions.assertEquals("big", model.encryption().keyVaultProperties().get(0).keyIdentifier());
        Assertions.assertEquals(false, model.enableDataResidency());
        Assertions.assertEquals(true, model.rootCertificate().enableRootCertificateV2());
    }

    @Test
    public void testSerialize() {
        IotHubProperties model =
            new IotHubProperties()
                .withAuthorizationPolicies(
                    Arrays
                        .asList(
                            new SharedAccessSignatureAuthorizationRuleInner()
                                .withKeyName("xppbhtqqro")
                                .withPrimaryKey("p")
                                .withSecondaryKey("s")
                                .withRights(AccessRights.REGISTRY_READ_REGISTRY_WRITE_SERVICE_CONNECT)))
                .withDisableLocalAuth(false)
                .withDisableDeviceSas(false)
                .withDisableModuleSas(false)
                .withRestrictOutboundNetworkAccess(false)
                .withAllowedFqdnList(Arrays.asList("gzjaoyfhrtxilne", "kujysvlejuvfq", "wrlyxwjkcprb"))
                .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                .withIpFilterRules(
                    Arrays
                        .asList(
                            new IpFilterRule()
                                .withFilterName("jvtbvpyss")
                                .withAction(IpFilterActionType.REJECT)
                                .withIpMask("nruj"),
                            new IpFilterRule()
                                .withFilterName("guhmuouqfpr")
                                .withAction(IpFilterActionType.ACCEPT)
                                .withIpMask("wbnguitnwui")))
                .withNetworkRuleSets(
                    new NetworkRuleSetProperties()
                        .withDefaultAction(DefaultAction.DENY)
                        .withApplyToBuiltInEventHubEndpoint(false)
                        .withIpRules(
                            Arrays
                                .asList(
                                    new NetworkRuleSetIpRule()
                                        .withFilterName("fizuckyf")
                                        .withAction(NetworkRuleIpAction.ALLOW)
                                        .withIpMask("fidfvzw"),
                                    new NetworkRuleSetIpRule()
                                        .withFilterName("zuhtymwisdkfthwx")
                                        .withAction(NetworkRuleIpAction.ALLOW)
                                        .withIpMask("eiwaopvkmi"),
                                    new NetworkRuleSetIpRule()
                                        .withFilterName("c")
                                        .withAction(NetworkRuleIpAction.ALLOW)
                                        .withIpMask("dcuf"))))
                .withMinTlsVersion("srp")
                .withPrivateEndpointConnections(
                    Arrays
                        .asList(
                            new PrivateEndpointConnectionInner()
                                .withProperties(new PrivateEndpointConnectionProperties()),
                            new PrivateEndpointConnectionInner()
                                .withProperties(new PrivateEndpointConnectionProperties()),
                            new PrivateEndpointConnectionInner()
                                .withProperties(new PrivateEndpointConnectionProperties()),
                            new PrivateEndpointConnectionInner()
                                .withProperties(new PrivateEndpointConnectionProperties())))
                .withEventHubEndpoints(
                    mapOf(
                        "majtjaod",
                        new EventHubProperties()
                            .withRetentionTimeInDays(4874464992113438939L)
                            .withPartitionCount(234614005),
                        "dg",
                        new EventHubProperties()
                            .withRetentionTimeInDays(8659441410597698690L)
                            .withPartitionCount(1455975978)))
                .withRouting(
                    new RoutingProperties()
                        .withEndpoints(
                            new RoutingEndpoints()
                                .withServiceBusQueues(Arrays.asList())
                                .withServiceBusTopics(Arrays.asList())
                                .withEventHubs(Arrays.asList())
                                .withStorageContainers(Arrays.asList())
                                .withCosmosDBSqlCollections(Arrays.asList()))
                        .withRoutes(
                            Arrays
                                .asList(
                                    new RouteProperties()
                                        .withName("mcl")
                                        .withSource(RoutingSource.TWIN_CHANGE_EVENTS)
                                        .withCondition("j")
                                        .withEndpointNames(Arrays.asList())
                                        .withIsEnabled(true),
                                    new RouteProperties()
                                        .withName("ejctbzaqsqsycb")
                                        .withSource(RoutingSource.DEVICE_JOB_LIFECYCLE_EVENTS)
                                        .withCondition("k")
                                        .withEndpointNames(Arrays.asList())
                                        .withIsEnabled(true)))
                        .withFallbackRoute(
                            new FallbackRouteProperties()
                                .withName("kexxppof")
                                .withSource(RoutingSource.MQTT_BROKER_MESSAGES)
                                .withCondition("x")
                                .withEndpointNames(Arrays.asList("jpgd", "toc", "j", "hvpmoue"))
                                .withIsEnabled(false))
                        .withEnrichments(
                            Arrays
                                .asList(
                                    new EnrichmentProperties()
                                        .withKey("xibqeojnx")
                                        .withValue("bzv")
                                        .withEndpointNames(Arrays.asList()),
                                    new EnrichmentProperties()
                                        .withKey("dntwndeicbtw")
                                        .withValue("pzaoqvuhr")
                                        .withEndpointNames(Arrays.asList()))))
                .withStorageEndpoints(
                    mapOf(
                        "ixuigdtopbobj",
                        new StorageEndpointProperties()
                            .withSasTtlAsIso8601(Duration.parse("PT165H16M7S"))
                            .withConnectionString("yd")
                            .withContainerName("glmjth")
                            .withAuthenticationType(AuthenticationType.KEY_BASED)
                            .withIdentity(new ManagedIdentity().withUserAssignedIdentity("yeicxmqciwqvhk"))))
                .withMessagingEndpoints(
                    mapOf(
                        "a",
                        new MessagingEndpointProperties()
                            .withLockDurationAsIso8601(Duration.parse("PT187H37M36S"))
                            .withTtlAsIso8601(Duration.parse("PT189H17M16S"))
                            .withMaxDeliveryCount(54099605)))
                .withEnableFileUploadNotifications(false)
                .withCloudToDevice(
                    new CloudToDeviceProperties()
                        .withMaxDeliveryCount(999138845)
                        .withDefaultTtlAsIso8601(Duration.parse("PT45H55M49S"))
                        .withFeedback(
                            new FeedbackProperties()
                                .withLockDurationAsIso8601(Duration.parse("PT201H19S"))
                                .withTtlAsIso8601(Duration.parse("PT22H47M41S"))
                                .withMaxDeliveryCount(1696516626)))
                .withComments("otkftutqxlngx")
                .withDeviceStreams(
                    new IotHubPropertiesDeviceStreams().withStreamingEndpoints(Arrays.asList("ugnxkrxdqmi")))
                .withFeatures(Capabilities.NONE)
                .withEncryption(
                    new EncryptionPropertiesDescription()
                        .withKeySource("rvqdra")
                        .withKeyVaultProperties(
                            Arrays
                                .asList(
                                    new KeyVaultKeyProperties().withKeyIdentifier("big"),
                                    new KeyVaultKeyProperties().withKeyIdentifier("qfbow"))))
                .withEnableDataResidency(false)
                .withRootCertificate(new RootCertificateProperties().withEnableRootCertificateV2(true));
        model = BinaryData.fromObject(model).toObject(IotHubProperties.class);
        Assertions.assertEquals("xppbhtqqro", model.authorizationPolicies().get(0).keyName());
        Assertions.assertEquals("p", model.authorizationPolicies().get(0).primaryKey());
        Assertions.assertEquals("s", model.authorizationPolicies().get(0).secondaryKey());
        Assertions
            .assertEquals(
                AccessRights.REGISTRY_READ_REGISTRY_WRITE_SERVICE_CONNECT,
                model.authorizationPolicies().get(0).rights());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(false, model.disableDeviceSas());
        Assertions.assertEquals(false, model.disableModuleSas());
        Assertions.assertEquals(false, model.restrictOutboundNetworkAccess());
        Assertions.assertEquals("gzjaoyfhrtxilne", model.allowedFqdnList().get(0));
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals("jvtbvpyss", model.ipFilterRules().get(0).filterName());
        Assertions.assertEquals(IpFilterActionType.REJECT, model.ipFilterRules().get(0).action());
        Assertions.assertEquals("nruj", model.ipFilterRules().get(0).ipMask());
        Assertions.assertEquals(DefaultAction.DENY, model.networkRuleSets().defaultAction());
        Assertions.assertEquals(false, model.networkRuleSets().applyToBuiltInEventHubEndpoint());
        Assertions.assertEquals("fizuckyf", model.networkRuleSets().ipRules().get(0).filterName());
        Assertions.assertEquals(NetworkRuleIpAction.ALLOW, model.networkRuleSets().ipRules().get(0).action());
        Assertions.assertEquals("fidfvzw", model.networkRuleSets().ipRules().get(0).ipMask());
        Assertions.assertEquals("srp", model.minTlsVersion());
        Assertions.assertEquals(4874464992113438939L, model.eventHubEndpoints().get("majtjaod").retentionTimeInDays());
        Assertions.assertEquals(234614005, model.eventHubEndpoints().get("majtjaod").partitionCount());
        Assertions.assertEquals("mcl", model.routing().routes().get(0).name());
        Assertions.assertEquals(RoutingSource.TWIN_CHANGE_EVENTS, model.routing().routes().get(0).source());
        Assertions.assertEquals("j", model.routing().routes().get(0).condition());
        Assertions.assertEquals(true, model.routing().routes().get(0).isEnabled());
        Assertions.assertEquals("kexxppof", model.routing().fallbackRoute().name());
        Assertions.assertEquals(RoutingSource.MQTT_BROKER_MESSAGES, model.routing().fallbackRoute().source());
        Assertions.assertEquals("x", model.routing().fallbackRoute().condition());
        Assertions.assertEquals("jpgd", model.routing().fallbackRoute().endpointNames().get(0));
        Assertions.assertEquals(false, model.routing().fallbackRoute().isEnabled());
        Assertions.assertEquals("xibqeojnx", model.routing().enrichments().get(0).key());
        Assertions.assertEquals("bzv", model.routing().enrichments().get(0).value());
        Assertions
            .assertEquals(
                Duration.parse("PT165H16M7S"), model.storageEndpoints().get("ixuigdtopbobj").sasTtlAsIso8601());
        Assertions.assertEquals("yd", model.storageEndpoints().get("ixuigdtopbobj").connectionString());
        Assertions.assertEquals("glmjth", model.storageEndpoints().get("ixuigdtopbobj").containerName());
        Assertions
            .assertEquals(
                AuthenticationType.KEY_BASED, model.storageEndpoints().get("ixuigdtopbobj").authenticationType());
        Assertions
            .assertEquals(
                "yeicxmqciwqvhk", model.storageEndpoints().get("ixuigdtopbobj").identity().userAssignedIdentity());
        Assertions
            .assertEquals(Duration.parse("PT187H37M36S"), model.messagingEndpoints().get("a").lockDurationAsIso8601());
        Assertions.assertEquals(Duration.parse("PT189H17M16S"), model.messagingEndpoints().get("a").ttlAsIso8601());
        Assertions.assertEquals(54099605, model.messagingEndpoints().get("a").maxDeliveryCount());
        Assertions.assertEquals(false, model.enableFileUploadNotifications());
        Assertions.assertEquals(999138845, model.cloudToDevice().maxDeliveryCount());
        Assertions.assertEquals(Duration.parse("PT45H55M49S"), model.cloudToDevice().defaultTtlAsIso8601());
        Assertions.assertEquals(Duration.parse("PT201H19S"), model.cloudToDevice().feedback().lockDurationAsIso8601());
        Assertions.assertEquals(Duration.parse("PT22H47M41S"), model.cloudToDevice().feedback().ttlAsIso8601());
        Assertions.assertEquals(1696516626, model.cloudToDevice().feedback().maxDeliveryCount());
        Assertions.assertEquals("otkftutqxlngx", model.comments());
        Assertions.assertEquals("ugnxkrxdqmi", model.deviceStreams().streamingEndpoints().get(0));
        Assertions.assertEquals(Capabilities.NONE, model.features());
        Assertions.assertEquals("rvqdra", model.encryption().keySource());
        Assertions.assertEquals("big", model.encryption().keyVaultProperties().get(0).keyIdentifier());
        Assertions.assertEquals(false, model.enableDataResidency());
        Assertions.assertEquals(true, model.rootCertificate().enableRootCertificateV2());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
