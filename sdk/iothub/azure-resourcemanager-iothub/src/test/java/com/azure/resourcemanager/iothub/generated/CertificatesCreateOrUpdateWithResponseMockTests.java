// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iothub.IotHubManager;
import com.azure.resourcemanager.iothub.models.CertificateDescription;
import com.azure.resourcemanager.iothub.models.CertificateProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CertificatesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"subject\":\"sjnhn\",\"expiry\":\"Thu, 15 Apr 2021 22:34:41 GMT\",\"thumbprint\":\"fq\",\"isVerified\":true,\"created\":\"Mon, 01 Mar 2021 20:41:09 GMT\",\"updated\":\"Sat, 17 Jul 2021 07:30:37 GMT\",\"certificate\":\"blwpcesutrgj\"},\"etag\":\"auutpwoqhihe\",\"id\":\"qg\",\"name\":\"zpnfqntcypsxj\",\"type\":\"foimwkslircizjxv\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IotHubManager manager = IotHubManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CertificateDescription response = manager.certificates()
            .define("bgye")
            .withExistingIotHub("ujviylwdshfs", "n")
            .withProperties(new CertificateProperties().withIsVerified(true).withCertificate("oxoftpipiwycz"))
            .withIfMatch("euzvx")
            .create();

        Assertions.assertEquals(true, response.properties().isVerified());
        Assertions.assertEquals("blwpcesutrgj", response.properties().certificate());
    }
}
