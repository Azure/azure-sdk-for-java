// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iothub.fluent.models.IotHubDescriptionInner;
import com.azure.resourcemanager.iothub.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.iothub.fluent.models.SharedAccessSignatureAuthorizationRuleInner;
import com.azure.resourcemanager.iothub.models.AccessRights;
import com.azure.resourcemanager.iothub.models.ArmIdentity;
import com.azure.resourcemanager.iothub.models.ArmUserIdentity;
import com.azure.resourcemanager.iothub.models.AuthenticationType;
import com.azure.resourcemanager.iothub.models.Capabilities;
import com.azure.resourcemanager.iothub.models.CloudToDeviceProperties;
import com.azure.resourcemanager.iothub.models.DefaultAction;
import com.azure.resourcemanager.iothub.models.EncryptionPropertiesDescription;
import com.azure.resourcemanager.iothub.models.EventHubProperties;
import com.azure.resourcemanager.iothub.models.IotHubProperties;
import com.azure.resourcemanager.iothub.models.IotHubPropertiesDeviceStreams;
import com.azure.resourcemanager.iothub.models.IotHubSku;
import com.azure.resourcemanager.iothub.models.IotHubSkuInfo;
import com.azure.resourcemanager.iothub.models.IpFilterActionType;
import com.azure.resourcemanager.iothub.models.IpFilterRule;
import com.azure.resourcemanager.iothub.models.MessagingEndpointProperties;
import com.azure.resourcemanager.iothub.models.NetworkRuleSetProperties;
import com.azure.resourcemanager.iothub.models.PublicNetworkAccess;
import com.azure.resourcemanager.iothub.models.ResourceIdentityType;
import com.azure.resourcemanager.iothub.models.RootCertificateProperties;
import com.azure.resourcemanager.iothub.models.RoutingProperties;
import com.azure.resourcemanager.iothub.models.StorageEndpointProperties;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class IotHubDescriptionInnerTests {
    @Test
    public void testDeserialize() {
        IotHubDescriptionInner model =
            BinaryData
                .fromString(
                    "{\"etag\":\"ijbpzvgnwzsymgl\",\"properties\":{\"authorizationPolicies\":[{\"keyName\":\"yzkohdbihanuf\",\"primaryKey\":\"cbjy\",\"secondaryKey\":\"git\",\"rights\":\"RegistryRead,"
                        + " RegistryWrite,"
                        + " ServiceConnect\"},{\"keyName\":\"qhabifpikxwcz\",\"primaryKey\":\"scnpqxuhivy\",\"secondaryKey\":\"iwbybrkxvdumjg\",\"rights\":\"RegistryRead,"
                        + " ServiceConnect\"},{\"keyName\":\"fwvuk\",\"primaryKey\":\"audccsnhs\",\"secondaryKey\":\"nyejhkryhtnap\",\"rights\":\"ServiceConnect,"
                        + " DeviceConnect\"},{\"keyName\":\"wlokjyem\",\"primaryKey\":\"vnipjox\",\"secondaryKey\":\"nchgej\",\"rights\":\"RegistryRead,"
                        + " DeviceConnect\"}],\"disableLocalAuth\":true,\"disableDeviceSAS\":true,\"disableModuleSAS\":true,\"restrictOutboundNetworkAccess\":false,\"allowedFqdnList\":[\"h\"],\"publicNetworkAccess\":\"Disabled\",\"ipFilterRules\":[{\"filterName\":\"huxinpmqnj\",\"action\":\"Reject\",\"ipMask\":\"wixjsprozvcp\"},{\"filterName\":\"tegjvwmf\",\"action\":\"Accept\",\"ipMask\":\"t\"}],\"networkRuleSets\":{\"defaultAction\":\"Allow\",\"applyToBuiltInEventHubEndpoint\":true,\"ipRules\":[]},\"minTlsVersion\":\"hulsuuvmkjozkrwf\",\"privateEndpointConnections\":[{\"id\":\"odjpslwejd\",\"name\":\"vwryoqpso\",\"type\":\"cctazakljlahbc\"},{\"id\":\"yffdfdos\",\"name\":\"gexpaojakhmsbz\",\"type\":\"hcrzevd\"}],\"provisioningState\":\"lxaolthqtrgqjbp\",\"state\":\"fsinzgvfcjrwzoxx\",\"hostName\":\"felluwfzitonpe\",\"eventHubEndpoints\":{\"inuvamiheogn\":{\"retentionTimeInDays\":3493306452967883237,\"partitionCount\":1383266559,\"partitionIds\":[],\"path\":\"pdvhpfxxypin\",\"endpoint\":\"mayhuybbkpodepoo\"},\"yevc\":{\"retentionTimeInDays\":7650711998155459286,\"partitionCount\":183676503,\"partitionIds\":[],\"path\":\"o\",\"endpoint\":\"si\"},\"fublj\":{\"retentionTimeInDays\":1324665084948795844,\"partitionCount\":1645427123,\"partitionIds\":[],\"path\":\"ngbwjz\",\"endpoint\":\"fygxgispemvtzfk\"}},\"routing\":{\"routes\":[],\"enrichments\":[]},\"storageEndpoints\":{\"zgcwrw\":{\"sasTtlAsIso8601\":\"PT129H4M14S\",\"connectionString\":\"hqjbasvmsmj\",\"containerName\":\"ulngsntn\",\"authenticationType\":\"identityBased\"}},\"messagingEndpoints\":{\"ouskcqvkocrc\":{\"lockDurationAsIso8601\":\"PT181H48M53S\",\"ttlAsIso8601\":\"PT226H40M21S\",\"maxDeliveryCount\":2010758823}},\"enableFileUploadNotifications\":false,\"cloudToDevice\":{\"maxDeliveryCount\":371451274,\"defaultTtlAsIso8601\":\"PT208H39M29S\"},\"comments\":\"jbiksqrglssai\",\"deviceStreams\":{\"streamingEndpoints\":[\"wnzlljfmppeeb\",\"mgxsab\",\"yqduujit\"]},\"features\":\"None\",\"encryption\":{\"keySource\":\"zevndhkrwpdappds\",\"keyVaultProperties\":[]},\"locations\":[{\"location\":\"wjfeusnhutjel\",\"role\":\"primary\"},{\"location\":\"dhugjzzdatqxhocd\",\"role\":\"secondary\"}],\"enableDataResidency\":false,\"rootCertificate\":{\"enableRootCertificateV2\":true,\"lastUpdatedTimeUtc\":\"2021-04-11T10:07:02Z\"}},\"sku\":{\"name\":\"B1\",\"tier\":\"Free\",\"capacity\":8186282377812445874},\"identity\":{\"principalId\":\"zwyiftyhxhur\",\"tenantId\":\"ftyxolniw\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"ckbasyypndd\":{\"principalId\":\"fkgiawxk\",\"clientId\":\"ypl\"},\"i\":{\"principalId\":\"gcbacphejkot\",\"clientId\":\"qgoulznd\"}}},\"location\":\"yqkgfg\",\"tags\":{\"qedqytbciqfoufl\":\"adgakeqsrxybz\",\"glougpbk\":\"mnkzsmod\",\"uqktap\":\"tmut\",\"kdosvqw\":\"pwgcuertu\"},\"id\":\"bmdg\",\"name\":\"bjf\",\"type\":\"dgmb\"}")
                .toObject(IotHubDescriptionInner.class);
        Assertions.assertEquals("yqkgfg", model.location());
        Assertions.assertEquals("adgakeqsrxybz", model.tags().get("qedqytbciqfoufl"));
        Assertions.assertEquals("ijbpzvgnwzsymgl", model.etag());
        Assertions.assertEquals("yzkohdbihanuf", model.properties().authorizationPolicies().get(0).keyName());
        Assertions.assertEquals("cbjy", model.properties().authorizationPolicies().get(0).primaryKey());
        Assertions.assertEquals("git", model.properties().authorizationPolicies().get(0).secondaryKey());
        Assertions
            .assertEquals(
                AccessRights.REGISTRY_READ_REGISTRY_WRITE_SERVICE_CONNECT,
                model.properties().authorizationPolicies().get(0).rights());
        Assertions.assertEquals(true, model.properties().disableLocalAuth());
        Assertions.assertEquals(true, model.properties().disableDeviceSas());
        Assertions.assertEquals(true, model.properties().disableModuleSas());
        Assertions.assertEquals(false, model.properties().restrictOutboundNetworkAccess());
        Assertions.assertEquals("h", model.properties().allowedFqdnList().get(0));
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.properties().publicNetworkAccess());
        Assertions.assertEquals("huxinpmqnj", model.properties().ipFilterRules().get(0).filterName());
        Assertions.assertEquals(IpFilterActionType.REJECT, model.properties().ipFilterRules().get(0).action());
        Assertions.assertEquals("wixjsprozvcp", model.properties().ipFilterRules().get(0).ipMask());
        Assertions.assertEquals(DefaultAction.ALLOW, model.properties().networkRuleSets().defaultAction());
        Assertions.assertEquals(true, model.properties().networkRuleSets().applyToBuiltInEventHubEndpoint());
        Assertions.assertEquals("hulsuuvmkjozkrwf", model.properties().minTlsVersion());
        Assertions
            .assertEquals(
                3493306452967883237L, model.properties().eventHubEndpoints().get("inuvamiheogn").retentionTimeInDays());
        Assertions
            .assertEquals(1383266559, model.properties().eventHubEndpoints().get("inuvamiheogn").partitionCount());
        Assertions
            .assertEquals(
                Duration.parse("PT129H4M14S"), model.properties().storageEndpoints().get("zgcwrw").sasTtlAsIso8601());
        Assertions.assertEquals("hqjbasvmsmj", model.properties().storageEndpoints().get("zgcwrw").connectionString());
        Assertions.assertEquals("ulngsntn", model.properties().storageEndpoints().get("zgcwrw").containerName());
        Assertions
            .assertEquals(
                AuthenticationType.IDENTITY_BASED,
                model.properties().storageEndpoints().get("zgcwrw").authenticationType());
        Assertions
            .assertEquals(
                Duration.parse("PT181H48M53S"),
                model.properties().messagingEndpoints().get("ouskcqvkocrc").lockDurationAsIso8601());
        Assertions
            .assertEquals(
                Duration.parse("PT226H40M21S"),
                model.properties().messagingEndpoints().get("ouskcqvkocrc").ttlAsIso8601());
        Assertions
            .assertEquals(2010758823, model.properties().messagingEndpoints().get("ouskcqvkocrc").maxDeliveryCount());
        Assertions.assertEquals(false, model.properties().enableFileUploadNotifications());
        Assertions.assertEquals(371451274, model.properties().cloudToDevice().maxDeliveryCount());
        Assertions
            .assertEquals(Duration.parse("PT208H39M29S"), model.properties().cloudToDevice().defaultTtlAsIso8601());
        Assertions.assertEquals("jbiksqrglssai", model.properties().comments());
        Assertions.assertEquals("wnzlljfmppeeb", model.properties().deviceStreams().streamingEndpoints().get(0));
        Assertions.assertEquals(Capabilities.NONE, model.properties().features());
        Assertions.assertEquals("zevndhkrwpdappds", model.properties().encryption().keySource());
        Assertions.assertEquals(false, model.properties().enableDataResidency());
        Assertions.assertEquals(true, model.properties().rootCertificate().enableRootCertificateV2());
        Assertions.assertEquals(IotHubSku.B1, model.sku().name());
        Assertions.assertEquals(8186282377812445874L, model.sku().capacity());
        Assertions.assertEquals(ResourceIdentityType.USER_ASSIGNED, model.identity().type());
    }

    @Test
    public void testSerialize() {
        IotHubDescriptionInner model =
            new IotHubDescriptionInner()
                .withLocation("yqkgfg")
                .withTags(
                    mapOf(
                        "qedqytbciqfoufl",
                        "adgakeqsrxybz",
                        "glougpbk",
                        "mnkzsmod",
                        "uqktap",
                        "tmut",
                        "kdosvqw",
                        "pwgcuertu"))
                .withEtag("ijbpzvgnwzsymgl")
                .withProperties(
                    new IotHubProperties()
                        .withAuthorizationPolicies(
                            Arrays
                                .asList(
                                    new SharedAccessSignatureAuthorizationRuleInner()
                                        .withKeyName("yzkohdbihanuf")
                                        .withPrimaryKey("cbjy")
                                        .withSecondaryKey("git")
                                        .withRights(AccessRights.REGISTRY_READ_REGISTRY_WRITE_SERVICE_CONNECT),
                                    new SharedAccessSignatureAuthorizationRuleInner()
                                        .withKeyName("qhabifpikxwcz")
                                        .withPrimaryKey("scnpqxuhivy")
                                        .withSecondaryKey("iwbybrkxvdumjg")
                                        .withRights(AccessRights.REGISTRY_READ_SERVICE_CONNECT),
                                    new SharedAccessSignatureAuthorizationRuleInner()
                                        .withKeyName("fwvuk")
                                        .withPrimaryKey("audccsnhs")
                                        .withSecondaryKey("nyejhkryhtnap")
                                        .withRights(AccessRights.SERVICE_CONNECT_DEVICE_CONNECT),
                                    new SharedAccessSignatureAuthorizationRuleInner()
                                        .withKeyName("wlokjyem")
                                        .withPrimaryKey("vnipjox")
                                        .withSecondaryKey("nchgej")
                                        .withRights(AccessRights.REGISTRY_READ_DEVICE_CONNECT)))
                        .withDisableLocalAuth(true)
                        .withDisableDeviceSas(true)
                        .withDisableModuleSas(true)
                        .withRestrictOutboundNetworkAccess(false)
                        .withAllowedFqdnList(Arrays.asList("h"))
                        .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
                        .withIpFilterRules(
                            Arrays
                                .asList(
                                    new IpFilterRule()
                                        .withFilterName("huxinpmqnj")
                                        .withAction(IpFilterActionType.REJECT)
                                        .withIpMask("wixjsprozvcp"),
                                    new IpFilterRule()
                                        .withFilterName("tegjvwmf")
                                        .withAction(IpFilterActionType.ACCEPT)
                                        .withIpMask("t")))
                        .withNetworkRuleSets(
                            new NetworkRuleSetProperties()
                                .withDefaultAction(DefaultAction.ALLOW)
                                .withApplyToBuiltInEventHubEndpoint(true)
                                .withIpRules(Arrays.asList()))
                        .withMinTlsVersion("hulsuuvmkjozkrwf")
                        .withPrivateEndpointConnections(
                            Arrays.asList(new PrivateEndpointConnectionInner(), new PrivateEndpointConnectionInner()))
                        .withEventHubEndpoints(
                            mapOf(
                                "inuvamiheogn",
                                new EventHubProperties()
                                    .withRetentionTimeInDays(3493306452967883237L)
                                    .withPartitionCount(1383266559),
                                "yevc",
                                new EventHubProperties()
                                    .withRetentionTimeInDays(7650711998155459286L)
                                    .withPartitionCount(183676503),
                                "fublj",
                                new EventHubProperties()
                                    .withRetentionTimeInDays(1324665084948795844L)
                                    .withPartitionCount(1645427123)))
                        .withRouting(
                            new RoutingProperties().withRoutes(Arrays.asList()).withEnrichments(Arrays.asList()))
                        .withStorageEndpoints(
                            mapOf(
                                "zgcwrw",
                                new StorageEndpointProperties()
                                    .withSasTtlAsIso8601(Duration.parse("PT129H4M14S"))
                                    .withConnectionString("hqjbasvmsmj")
                                    .withContainerName("ulngsntn")
                                    .withAuthenticationType(AuthenticationType.IDENTITY_BASED)))
                        .withMessagingEndpoints(
                            mapOf(
                                "ouskcqvkocrc",
                                new MessagingEndpointProperties()
                                    .withLockDurationAsIso8601(Duration.parse("PT181H48M53S"))
                                    .withTtlAsIso8601(Duration.parse("PT226H40M21S"))
                                    .withMaxDeliveryCount(2010758823)))
                        .withEnableFileUploadNotifications(false)
                        .withCloudToDevice(
                            new CloudToDeviceProperties()
                                .withMaxDeliveryCount(371451274)
                                .withDefaultTtlAsIso8601(Duration.parse("PT208H39M29S")))
                        .withComments("jbiksqrglssai")
                        .withDeviceStreams(
                            new IotHubPropertiesDeviceStreams()
                                .withStreamingEndpoints(Arrays.asList("wnzlljfmppeeb", "mgxsab", "yqduujit")))
                        .withFeatures(Capabilities.NONE)
                        .withEncryption(
                            new EncryptionPropertiesDescription()
                                .withKeySource("zevndhkrwpdappds")
                                .withKeyVaultProperties(Arrays.asList()))
                        .withEnableDataResidency(false)
                        .withRootCertificate(new RootCertificateProperties().withEnableRootCertificateV2(true)))
                .withSku(new IotHubSkuInfo().withName(IotHubSku.B1).withCapacity(8186282377812445874L))
                .withIdentity(
                    new ArmIdentity()
                        .withType(ResourceIdentityType.USER_ASSIGNED)
                        .withUserAssignedIdentities(
                            mapOf("ckbasyypndd", new ArmUserIdentity(), "i", new ArmUserIdentity())));
        model = BinaryData.fromObject(model).toObject(IotHubDescriptionInner.class);
        Assertions.assertEquals("yqkgfg", model.location());
        Assertions.assertEquals("adgakeqsrxybz", model.tags().get("qedqytbciqfoufl"));
        Assertions.assertEquals("ijbpzvgnwzsymgl", model.etag());
        Assertions.assertEquals("yzkohdbihanuf", model.properties().authorizationPolicies().get(0).keyName());
        Assertions.assertEquals("cbjy", model.properties().authorizationPolicies().get(0).primaryKey());
        Assertions.assertEquals("git", model.properties().authorizationPolicies().get(0).secondaryKey());
        Assertions
            .assertEquals(
                AccessRights.REGISTRY_READ_REGISTRY_WRITE_SERVICE_CONNECT,
                model.properties().authorizationPolicies().get(0).rights());
        Assertions.assertEquals(true, model.properties().disableLocalAuth());
        Assertions.assertEquals(true, model.properties().disableDeviceSas());
        Assertions.assertEquals(true, model.properties().disableModuleSas());
        Assertions.assertEquals(false, model.properties().restrictOutboundNetworkAccess());
        Assertions.assertEquals("h", model.properties().allowedFqdnList().get(0));
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.properties().publicNetworkAccess());
        Assertions.assertEquals("huxinpmqnj", model.properties().ipFilterRules().get(0).filterName());
        Assertions.assertEquals(IpFilterActionType.REJECT, model.properties().ipFilterRules().get(0).action());
        Assertions.assertEquals("wixjsprozvcp", model.properties().ipFilterRules().get(0).ipMask());
        Assertions.assertEquals(DefaultAction.ALLOW, model.properties().networkRuleSets().defaultAction());
        Assertions.assertEquals(true, model.properties().networkRuleSets().applyToBuiltInEventHubEndpoint());
        Assertions.assertEquals("hulsuuvmkjozkrwf", model.properties().minTlsVersion());
        Assertions
            .assertEquals(
                3493306452967883237L, model.properties().eventHubEndpoints().get("inuvamiheogn").retentionTimeInDays());
        Assertions
            .assertEquals(1383266559, model.properties().eventHubEndpoints().get("inuvamiheogn").partitionCount());
        Assertions
            .assertEquals(
                Duration.parse("PT129H4M14S"), model.properties().storageEndpoints().get("zgcwrw").sasTtlAsIso8601());
        Assertions.assertEquals("hqjbasvmsmj", model.properties().storageEndpoints().get("zgcwrw").connectionString());
        Assertions.assertEquals("ulngsntn", model.properties().storageEndpoints().get("zgcwrw").containerName());
        Assertions
            .assertEquals(
                AuthenticationType.IDENTITY_BASED,
                model.properties().storageEndpoints().get("zgcwrw").authenticationType());
        Assertions
            .assertEquals(
                Duration.parse("PT181H48M53S"),
                model.properties().messagingEndpoints().get("ouskcqvkocrc").lockDurationAsIso8601());
        Assertions
            .assertEquals(
                Duration.parse("PT226H40M21S"),
                model.properties().messagingEndpoints().get("ouskcqvkocrc").ttlAsIso8601());
        Assertions
            .assertEquals(2010758823, model.properties().messagingEndpoints().get("ouskcqvkocrc").maxDeliveryCount());
        Assertions.assertEquals(false, model.properties().enableFileUploadNotifications());
        Assertions.assertEquals(371451274, model.properties().cloudToDevice().maxDeliveryCount());
        Assertions
            .assertEquals(Duration.parse("PT208H39M29S"), model.properties().cloudToDevice().defaultTtlAsIso8601());
        Assertions.assertEquals("jbiksqrglssai", model.properties().comments());
        Assertions.assertEquals("wnzlljfmppeeb", model.properties().deviceStreams().streamingEndpoints().get(0));
        Assertions.assertEquals(Capabilities.NONE, model.properties().features());
        Assertions.assertEquals("zevndhkrwpdappds", model.properties().encryption().keySource());
        Assertions.assertEquals(false, model.properties().enableDataResidency());
        Assertions.assertEquals(true, model.properties().rootCertificate().enableRootCertificateV2());
        Assertions.assertEquals(IotHubSku.B1, model.sku().name());
        Assertions.assertEquals(8186282377812445874L, model.sku().capacity());
        Assertions.assertEquals(ResourceIdentityType.USER_ASSIGNED, model.identity().type());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
