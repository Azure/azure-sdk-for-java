// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iothub.fluent.models.EndpointHealthDataInner;
import com.azure.resourcemanager.iothub.models.EndpointHealthStatus;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class EndpointHealthDataInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EndpointHealthDataInner model =
            BinaryData
                .fromString(
                    "{\"endpointId\":\"nrmfqjhhk\",\"healthStatus\":\"dead\",\"lastKnownError\":\"jy\",\"lastKnownErrorTime\":\"Sun,"
                        + " 10 Jan 2021 13:36:41 GMT\",\"lastSuccessfulSendAttemptTime\":\"Thu, 29 Jul 2021 03:03:57"
                        + " GMT\",\"lastSendAttemptTime\":\"Wed, 01 Dec 2021 23:11:57 GMT\"}")
                .toObject(EndpointHealthDataInner.class);
        Assertions.assertEquals("nrmfqjhhk", model.endpointId());
        Assertions.assertEquals(EndpointHealthStatus.DEAD, model.healthStatus());
        Assertions.assertEquals("jy", model.lastKnownError());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-10T13:36:41Z"), model.lastKnownErrorTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-29T03:03:57Z"), model.lastSuccessfulSendAttemptTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-01T23:11:57Z"), model.lastSendAttemptTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EndpointHealthDataInner model =
            new EndpointHealthDataInner()
                .withEndpointId("nrmfqjhhk")
                .withHealthStatus(EndpointHealthStatus.DEAD)
                .withLastKnownError("jy")
                .withLastKnownErrorTime(OffsetDateTime.parse("2021-01-10T13:36:41Z"))
                .withLastSuccessfulSendAttemptTime(OffsetDateTime.parse("2021-07-29T03:03:57Z"))
                .withLastSendAttemptTime(OffsetDateTime.parse("2021-12-01T23:11:57Z"));
        model = BinaryData.fromObject(model).toObject(EndpointHealthDataInner.class);
        Assertions.assertEquals("nrmfqjhhk", model.endpointId());
        Assertions.assertEquals(EndpointHealthStatus.DEAD, model.healthStatus());
        Assertions.assertEquals("jy", model.lastKnownError());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-10T13:36:41Z"), model.lastKnownErrorTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-29T03:03:57Z"), model.lastSuccessfulSendAttemptTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-01T23:11:57Z"), model.lastSendAttemptTime());
    }
}
