// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iothub.fluent.models.EndpointHealthDataInner;
import com.azure.resourcemanager.iothub.models.EndpointHealthDataListResult;
import com.azure.resourcemanager.iothub.models.EndpointHealthStatus;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class EndpointHealthDataListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EndpointHealthDataListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"endpointId\":\"ovawjvzunlu\",\"healthStatus\":\"degraded\",\"lastKnownError\":\"prnxipeil\",\"lastKnownErrorTime\":\"Mon,"
                        + " 12 Jul 2021 01:35:59 GMT\",\"lastSuccessfulSendAttemptTime\":\"Fri, 04 Jun 2021 13:01:56"
                        + " GMT\",\"lastSendAttemptTime\":\"Tue, 12 Oct 2021 12:24:32"
                        + " GMT\"},{\"endpointId\":\"dultskz\",\"healthStatus\":\"unhealthy\",\"lastKnownError\":\"zumveekgpwo\",\"lastKnownErrorTime\":\"Sat,"
                        + " 16 Jan 2021 14:31:18 GMT\",\"lastSuccessfulSendAttemptTime\":\"Sun, 10 Oct 2021 22:25:32"
                        + " GMT\",\"lastSendAttemptTime\":\"Sat, 16 Oct 2021 05:20:45"
                        + " GMT\"},{\"endpointId\":\"jyofdxluusdtto\",\"healthStatus\":\"unknown\",\"lastKnownError\":\"oekqvk\",\"lastKnownErrorTime\":\"Fri,"
                        + " 20 Aug 2021 19:20:25 GMT\",\"lastSuccessfulSendAttemptTime\":\"Mon, 11 Oct 2021 10:00:24"
                        + " GMT\",\"lastSendAttemptTime\":\"Tue, 29 Jun 2021 22:28:15"
                        + " GMT\"},{\"endpointId\":\"wyjsflhhcaalnjix\",\"healthStatus\":\"unknown\",\"lastKnownError\":\"awjoyaqcslyjp\",\"lastKnownErrorTime\":\"Tue,"
                        + " 12 Jan 2021 19:26:56 GMT\",\"lastSuccessfulSendAttemptTime\":\"Wed, 28 Jul 2021 19:21:39"
                        + " GMT\",\"lastSendAttemptTime\":\"Tue, 31 Aug 2021 19:18:26"
                        + " GMT\"}],\"nextLink\":\"znelixhnrztfolh\"}")
                .toObject(EndpointHealthDataListResult.class);
        Assertions.assertEquals("ovawjvzunlu", model.value().get(0).endpointId());
        Assertions.assertEquals(EndpointHealthStatus.DEGRADED, model.value().get(0).healthStatus());
        Assertions.assertEquals("prnxipeil", model.value().get(0).lastKnownError());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-07-12T01:35:59Z"), model.value().get(0).lastKnownErrorTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-04T13:01:56Z"), model.value().get(0).lastSuccessfulSendAttemptTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-10-12T12:24:32Z"), model.value().get(0).lastSendAttemptTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EndpointHealthDataListResult model =
            new EndpointHealthDataListResult()
                .withValue(
                    Arrays
                        .asList(
                            new EndpointHealthDataInner()
                                .withEndpointId("ovawjvzunlu")
                                .withHealthStatus(EndpointHealthStatus.DEGRADED)
                                .withLastKnownError("prnxipeil")
                                .withLastKnownErrorTime(OffsetDateTime.parse("2021-07-12T01:35:59Z"))
                                .withLastSuccessfulSendAttemptTime(OffsetDateTime.parse("2021-06-04T13:01:56Z"))
                                .withLastSendAttemptTime(OffsetDateTime.parse("2021-10-12T12:24:32Z")),
                            new EndpointHealthDataInner()
                                .withEndpointId("dultskz")
                                .withHealthStatus(EndpointHealthStatus.UNHEALTHY)
                                .withLastKnownError("zumveekgpwo")
                                .withLastKnownErrorTime(OffsetDateTime.parse("2021-01-16T14:31:18Z"))
                                .withLastSuccessfulSendAttemptTime(OffsetDateTime.parse("2021-10-10T22:25:32Z"))
                                .withLastSendAttemptTime(OffsetDateTime.parse("2021-10-16T05:20:45Z")),
                            new EndpointHealthDataInner()
                                .withEndpointId("jyofdxluusdtto")
                                .withHealthStatus(EndpointHealthStatus.UNKNOWN)
                                .withLastKnownError("oekqvk")
                                .withLastKnownErrorTime(OffsetDateTime.parse("2021-08-20T19:20:25Z"))
                                .withLastSuccessfulSendAttemptTime(OffsetDateTime.parse("2021-10-11T10:00:24Z"))
                                .withLastSendAttemptTime(OffsetDateTime.parse("2021-06-29T22:28:15Z")),
                            new EndpointHealthDataInner()
                                .withEndpointId("wyjsflhhcaalnjix")
                                .withHealthStatus(EndpointHealthStatus.UNKNOWN)
                                .withLastKnownError("awjoyaqcslyjp")
                                .withLastKnownErrorTime(OffsetDateTime.parse("2021-01-12T19:26:56Z"))
                                .withLastSuccessfulSendAttemptTime(OffsetDateTime.parse("2021-07-28T19:21:39Z"))
                                .withLastSendAttemptTime(OffsetDateTime.parse("2021-08-31T19:18:26Z"))));
        model = BinaryData.fromObject(model).toObject(EndpointHealthDataListResult.class);
        Assertions.assertEquals("ovawjvzunlu", model.value().get(0).endpointId());
        Assertions.assertEquals(EndpointHealthStatus.DEGRADED, model.value().get(0).healthStatus());
        Assertions.assertEquals("prnxipeil", model.value().get(0).lastKnownError());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-07-12T01:35:59Z"), model.value().get(0).lastKnownErrorTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-04T13:01:56Z"), model.value().get(0).lastSuccessfulSendAttemptTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-10-12T12:24:32Z"), model.value().get(0).lastSendAttemptTime());
    }
}
