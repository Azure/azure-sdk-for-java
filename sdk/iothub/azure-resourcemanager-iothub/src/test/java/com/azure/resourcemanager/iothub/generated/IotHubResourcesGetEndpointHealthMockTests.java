// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.iothub.IotHubManager;
import com.azure.resourcemanager.iothub.models.EndpointHealthData;
import com.azure.resourcemanager.iothub.models.EndpointHealthStatus;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class IotHubResourcesGetEndpointHealthMockTests {
    @Test
    public void testGetEndpointHealth() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"endpointId\":\"piyylhalnswhccsp\",\"healthStatus\":\"unhealthy\",\"lastKnownError\":\"vwitqscyw\",\"lastKnownErrorTime\":\"Wed,"
                + " 25 Aug 2021 09:04:10 GMT\",\"lastSuccessfulSendAttemptTime\":\"Sat, 13 Feb 2021 16:07:26"
                + " GMT\",\"lastSendAttemptTime\":\"Tue, 12 Jan 2021 18:05:25 GMT\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        IotHubManager manager =
            IotHubManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<EndpointHealthData> response =
            manager.iotHubResources().getEndpointHealth("oftrmaequia", "xicslfao", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("piyylhalnswhccsp", response.iterator().next().endpointId());
        Assertions.assertEquals(EndpointHealthStatus.UNHEALTHY, response.iterator().next().healthStatus());
        Assertions.assertEquals("vwitqscyw", response.iterator().next().lastKnownError());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-25T09:04:10Z"), response.iterator().next().lastKnownErrorTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-02-13T16:07:26Z"),
                response.iterator().next().lastSuccessfulSendAttemptTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-12T18:05:25Z"), response.iterator().next().lastSendAttemptTime());
    }
}
