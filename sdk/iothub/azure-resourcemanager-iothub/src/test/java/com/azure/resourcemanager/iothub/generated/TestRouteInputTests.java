// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iothub.models.RouteProperties;
import com.azure.resourcemanager.iothub.models.RoutingMessage;
import com.azure.resourcemanager.iothub.models.RoutingSource;
import com.azure.resourcemanager.iothub.models.RoutingTwin;
import com.azure.resourcemanager.iothub.models.RoutingTwinProperties;
import com.azure.resourcemanager.iothub.models.TestRouteInput;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TestRouteInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TestRouteInput model =
            BinaryData
                .fromString(
                    "{\"message\":{\"body\":\"uuvxz\",\"appProperties\":{\"zonosgg\":\"vithh\",\"ljuti\":\"hcohfwdsjnk\",\"wkfvhqcrailvp\":\"swacffgdkzz\",\"wdmhdlxyjrxs\":\"ppfufl\"},\"systemProperties\":{\"pnedgf\":\"fcnihgwq\",\"rhvoods\":\"cvkcvqvpkeqdcv\"}},\"route\":{\"name\":\"tbobz\",\"source\":\"DeviceJobLifecycleEvents\",\"condition\":\"cjwvn\",\"endpointNames\":[\"ld\",\"mgxcxrslpm\"],\"isEnabled\":true},\"twin\":{\"tags\":\"dataoegrpkhjwn\",\"properties\":{\"desired\":\"datasluicpdggkzz\",\"reported\":\"datambmpaxmodfvuefy\"}}}")
                .toObject(TestRouteInput.class);
        Assertions.assertEquals("uuvxz", model.message().body());
        Assertions.assertEquals("vithh", model.message().appProperties().get("zonosgg"));
        Assertions.assertEquals("fcnihgwq", model.message().systemProperties().get("pnedgf"));
        Assertions.assertEquals("tbobz", model.route().name());
        Assertions.assertEquals(RoutingSource.DEVICE_JOB_LIFECYCLE_EVENTS, model.route().source());
        Assertions.assertEquals("cjwvn", model.route().condition());
        Assertions.assertEquals("ld", model.route().endpointNames().get(0));
        Assertions.assertEquals(true, model.route().isEnabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TestRouteInput model =
            new TestRouteInput()
                .withMessage(
                    new RoutingMessage()
                        .withBody("uuvxz")
                        .withAppProperties(
                            mapOf(
                                "zonosgg",
                                "vithh",
                                "ljuti",
                                "hcohfwdsjnk",
                                "wkfvhqcrailvp",
                                "swacffgdkzz",
                                "wdmhdlxyjrxs",
                                "ppfufl"))
                        .withSystemProperties(mapOf("pnedgf", "fcnihgwq", "rhvoods", "cvkcvqvpkeqdcv")))
                .withRoute(
                    new RouteProperties()
                        .withName("tbobz")
                        .withSource(RoutingSource.DEVICE_JOB_LIFECYCLE_EVENTS)
                        .withCondition("cjwvn")
                        .withEndpointNames(Arrays.asList("ld", "mgxcxrslpm"))
                        .withIsEnabled(true))
                .withTwin(
                    new RoutingTwin()
                        .withTags("dataoegrpkhjwn")
                        .withProperties(
                            new RoutingTwinProperties()
                                .withDesired("datasluicpdggkzz")
                                .withReported("datambmpaxmodfvuefy")));
        model = BinaryData.fromObject(model).toObject(TestRouteInput.class);
        Assertions.assertEquals("uuvxz", model.message().body());
        Assertions.assertEquals("vithh", model.message().appProperties().get("zonosgg"));
        Assertions.assertEquals("fcnihgwq", model.message().systemProperties().get("pnedgf"));
        Assertions.assertEquals("tbobz", model.route().name());
        Assertions.assertEquals(RoutingSource.DEVICE_JOB_LIFECYCLE_EVENTS, model.route().source());
        Assertions.assertEquals("cjwvn", model.route().condition());
        Assertions.assertEquals("ld", model.route().endpointNames().get(0));
        Assertions.assertEquals(true, model.route().isEnabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
