// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iothub.models.RouteProperties;
import com.azure.resourcemanager.iothub.models.RoutingMessage;
import com.azure.resourcemanager.iothub.models.RoutingSource;
import com.azure.resourcemanager.iothub.models.RoutingTwin;
import com.azure.resourcemanager.iothub.models.RoutingTwinProperties;
import com.azure.resourcemanager.iothub.models.TestRouteInput;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class TestRouteInputTests {
    @Test
    public void testDeserialize() {
        TestRouteInput model =
            BinaryData
                .fromString(
                    "{\"message\":{\"body\":\"bhshfwpracstwity\",\"appProperties\":{\"md\":\"vxccedcp\",\"zxltjcvn\":\"odn\",\"xqi\":\"ltiugcxnavv\"},\"systemProperties\":{\"djrkvfgbvfvpd\":\"unyowxwl\",\"q\":\"odacizs\",\"ibdeibq\":\"hkr\",\"kghv\":\"p\"}},\"route\":{\"name\":\"ndzwmkrefa\",\"source\":\"DigitalTwinChangeEvents\",\"condition\":\"orwkqnyh\",\"endpointNames\":[\"ij\"],\"isEnabled\":true},\"twin\":{\"properties\":{}}}")
                .toObject(TestRouteInput.class);
        Assertions.assertEquals("bhshfwpracstwity", model.message().body());
        Assertions.assertEquals("vxccedcp", model.message().appProperties().get("md"));
        Assertions.assertEquals("unyowxwl", model.message().systemProperties().get("djrkvfgbvfvpd"));
        Assertions.assertEquals("ndzwmkrefa", model.route().name());
        Assertions.assertEquals(RoutingSource.DIGITAL_TWIN_CHANGE_EVENTS, model.route().source());
        Assertions.assertEquals("orwkqnyh", model.route().condition());
        Assertions.assertEquals("ij", model.route().endpointNames().get(0));
        Assertions.assertEquals(true, model.route().isEnabled());
    }

    @Test
    public void testSerialize() {
        TestRouteInput model =
            new TestRouteInput()
                .withMessage(
                    new RoutingMessage()
                        .withBody("bhshfwpracstwity")
                        .withAppProperties(mapOf("md", "vxccedcp", "zxltjcvn", "odn", "xqi", "ltiugcxnavv"))
                        .withSystemProperties(
                            mapOf("djrkvfgbvfvpd", "unyowxwl", "q", "odacizs", "ibdeibq", "hkr", "kghv", "p")))
                .withRoute(
                    new RouteProperties()
                        .withName("ndzwmkrefa")
                        .withSource(RoutingSource.DIGITAL_TWIN_CHANGE_EVENTS)
                        .withCondition("orwkqnyh")
                        .withEndpointNames(Arrays.asList("ij"))
                        .withIsEnabled(true))
                .withTwin(new RoutingTwin().withProperties(new RoutingTwinProperties()));
        model = BinaryData.fromObject(model).toObject(TestRouteInput.class);
        Assertions.assertEquals("bhshfwpracstwity", model.message().body());
        Assertions.assertEquals("vxccedcp", model.message().appProperties().get("md"));
        Assertions.assertEquals("unyowxwl", model.message().systemProperties().get("djrkvfgbvfvpd"));
        Assertions.assertEquals("ndzwmkrefa", model.route().name());
        Assertions.assertEquals(RoutingSource.DIGITAL_TWIN_CHANGE_EVENTS, model.route().source());
        Assertions.assertEquals("orwkqnyh", model.route().condition());
        Assertions.assertEquals("ij", model.route().endpointNames().get(0));
        Assertions.assertEquals(true, model.route().isEnabled());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
