// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iothub.models.AuthenticationType;
import com.azure.resourcemanager.iothub.models.ManagedIdentity;
import com.azure.resourcemanager.iothub.models.RoutingEventHubProperties;
import org.junit.jupiter.api.Assertions;

public final class RoutingEventHubPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RoutingEventHubProperties model =
            BinaryData
                .fromString(
                    "{\"id\":\"onuq\",\"connectionString\":\"fkbey\",\"endpointUri\":\"wrmjmwvvjektc\",\"entityPath\":\"enhwlrs\",\"authenticationType\":\"identityBased\",\"identity\":{\"userAssignedIdentity\":\"wvlqdqgb\"},\"name\":\"qylihkaetckt\",\"subscriptionId\":\"civfsnkymuctq\",\"resourceGroup\":\"fbebrjcxer\"}")
                .toObject(RoutingEventHubProperties.class);
        Assertions.assertEquals("onuq", model.id());
        Assertions.assertEquals("fkbey", model.connectionString());
        Assertions.assertEquals("wrmjmwvvjektc", model.endpointUri());
        Assertions.assertEquals("enhwlrs", model.entityPath());
        Assertions.assertEquals(AuthenticationType.IDENTITY_BASED, model.authenticationType());
        Assertions.assertEquals("wvlqdqgb", model.identity().userAssignedIdentity());
        Assertions.assertEquals("qylihkaetckt", model.name());
        Assertions.assertEquals("civfsnkymuctq", model.subscriptionId());
        Assertions.assertEquals("fbebrjcxer", model.resourceGroup());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RoutingEventHubProperties model =
            new RoutingEventHubProperties()
                .withId("onuq")
                .withConnectionString("fkbey")
                .withEndpointUri("wrmjmwvvjektc")
                .withEntityPath("enhwlrs")
                .withAuthenticationType(AuthenticationType.IDENTITY_BASED)
                .withIdentity(new ManagedIdentity().withUserAssignedIdentity("wvlqdqgb"))
                .withName("qylihkaetckt")
                .withSubscriptionId("civfsnkymuctq")
                .withResourceGroup("fbebrjcxer");
        model = BinaryData.fromObject(model).toObject(RoutingEventHubProperties.class);
        Assertions.assertEquals("onuq", model.id());
        Assertions.assertEquals("fkbey", model.connectionString());
        Assertions.assertEquals("wrmjmwvvjektc", model.endpointUri());
        Assertions.assertEquals("enhwlrs", model.entityPath());
        Assertions.assertEquals(AuthenticationType.IDENTITY_BASED, model.authenticationType());
        Assertions.assertEquals("wvlqdqgb", model.identity().userAssignedIdentity());
        Assertions.assertEquals("qylihkaetckt", model.name());
        Assertions.assertEquals("civfsnkymuctq", model.subscriptionId());
        Assertions.assertEquals("fbebrjcxer", model.resourceGroup());
    }
}
