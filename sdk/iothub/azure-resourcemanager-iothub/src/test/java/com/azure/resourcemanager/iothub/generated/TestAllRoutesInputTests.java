// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iothub.models.RoutingMessage;
import com.azure.resourcemanager.iothub.models.RoutingSource;
import com.azure.resourcemanager.iothub.models.RoutingTwin;
import com.azure.resourcemanager.iothub.models.RoutingTwinProperties;
import com.azure.resourcemanager.iothub.models.TestAllRoutesInput;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class TestAllRoutesInputTests {
    @Test
    public void testDeserialize() {
        TestAllRoutesInput model =
            BinaryData
                .fromString(
                    "{\"routingSource\":\"DeviceConnectionStateEvents\",\"message\":{\"body\":\"qouicybxarzgsz\",\"appProperties\":{\"iqopidoamciod\":\"x\",\"oegokdwbwh\":\"khazxkhnzbonlwn\",\"t\":\"szzcmrvexztv\",\"lmnguxaw\":\"gsfraoyzkoow\"},\"systemProperties\":{\"yznkby\":\"dsyuuximerqfob\",\"gmhrskdsnfdsdoak\":\"utwpfhp\",\"hewpusdsttwv\":\"tdlmkkzevd\",\"qmoa\":\"gvbbejdcng\"}},\"twin\":{\"properties\":{}}}")
                .toObject(TestAllRoutesInput.class);
        Assertions.assertEquals(RoutingSource.DEVICE_CONNECTION_STATE_EVENTS, model.routingSource());
        Assertions.assertEquals("qouicybxarzgsz", model.message().body());
        Assertions.assertEquals("x", model.message().appProperties().get("iqopidoamciod"));
        Assertions.assertEquals("dsyuuximerqfob", model.message().systemProperties().get("yznkby"));
    }

    @Test
    public void testSerialize() {
        TestAllRoutesInput model =
            new TestAllRoutesInput()
                .withRoutingSource(RoutingSource.DEVICE_CONNECTION_STATE_EVENTS)
                .withMessage(
                    new RoutingMessage()
                        .withBody("qouicybxarzgsz")
                        .withAppProperties(
                            mapOf(
                                "iqopidoamciod",
                                "x",
                                "oegokdwbwh",
                                "khazxkhnzbonlwn",
                                "t",
                                "szzcmrvexztv",
                                "lmnguxaw",
                                "gsfraoyzkoow"))
                        .withSystemProperties(
                            mapOf(
                                "yznkby",
                                "dsyuuximerqfob",
                                "gmhrskdsnfdsdoak",
                                "utwpfhp",
                                "hewpusdsttwv",
                                "tdlmkkzevd",
                                "qmoa",
                                "gvbbejdcng")))
                .withTwin(new RoutingTwin().withProperties(new RoutingTwinProperties()));
        model = BinaryData.fromObject(model).toObject(TestAllRoutesInput.class);
        Assertions.assertEquals(RoutingSource.DEVICE_CONNECTION_STATE_EVENTS, model.routingSource());
        Assertions.assertEquals("qouicybxarzgsz", model.message().body());
        Assertions.assertEquals("x", model.message().appProperties().get("iqopidoamciod"));
        Assertions.assertEquals("dsyuuximerqfob", model.message().systemProperties().get("yznkby"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
