// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iothub.models.AuthenticationType;
import com.azure.resourcemanager.iothub.models.ManagedIdentity;
import com.azure.resourcemanager.iothub.models.RoutingStorageContainerProperties;
import com.azure.resourcemanager.iothub.models.RoutingStorageContainerPropertiesEncoding;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class RoutingStorageContainerPropertiesTests {
    @Test
    public void testDeserialize() {
        RoutingStorageContainerProperties model =
            BinaryData
                .fromString(
                    "{\"id\":\"ccymvaolpsslql\",\"connectionString\":\"mdnbbglzpswiy\",\"endpointUri\":\"cwyhzdxssa\",\"authenticationType\":\"identityBased\",\"identity\":{\"userAssignedIdentity\":\"vdfznudaodvxzb\"},\"name\":\"cblylpstdbhhxsr\",\"subscriptionId\":\"zucerscdntnev\",\"resourceGroup\":\"wjmy\",\"containerName\":\"tdss\",\"fileNameFormat\":\"wtmwerio\",\"batchFrequencyInSeconds\":893686819,\"maxChunkSizeInBytes\":158092972,\"encoding\":\"AvroDeflate\"}")
                .toObject(RoutingStorageContainerProperties.class);
        Assertions.assertEquals("ccymvaolpsslql", model.id());
        Assertions.assertEquals("mdnbbglzpswiy", model.connectionString());
        Assertions.assertEquals("cwyhzdxssa", model.endpointUri());
        Assertions.assertEquals(AuthenticationType.IDENTITY_BASED, model.authenticationType());
        Assertions.assertEquals("vdfznudaodvxzb", model.identity().userAssignedIdentity());
        Assertions.assertEquals("cblylpstdbhhxsr", model.name());
        Assertions.assertEquals("zucerscdntnev", model.subscriptionId());
        Assertions.assertEquals("wjmy", model.resourceGroup());
        Assertions.assertEquals("tdss", model.containerName());
        Assertions.assertEquals("wtmwerio", model.fileNameFormat());
        Assertions.assertEquals(893686819, model.batchFrequencyInSeconds());
        Assertions.assertEquals(158092972, model.maxChunkSizeInBytes());
        Assertions.assertEquals(RoutingStorageContainerPropertiesEncoding.AVRO_DEFLATE, model.encoding());
    }

    @Test
    public void testSerialize() {
        RoutingStorageContainerProperties model =
            new RoutingStorageContainerProperties()
                .withId("ccymvaolpsslql")
                .withConnectionString("mdnbbglzpswiy")
                .withEndpointUri("cwyhzdxssa")
                .withAuthenticationType(AuthenticationType.IDENTITY_BASED)
                .withIdentity(new ManagedIdentity().withUserAssignedIdentity("vdfznudaodvxzb"))
                .withName("cblylpstdbhhxsr")
                .withSubscriptionId("zucerscdntnev")
                .withResourceGroup("wjmy")
                .withContainerName("tdss")
                .withFileNameFormat("wtmwerio")
                .withBatchFrequencyInSeconds(893686819)
                .withMaxChunkSizeInBytes(158092972)
                .withEncoding(RoutingStorageContainerPropertiesEncoding.AVRO_DEFLATE);
        model = BinaryData.fromObject(model).toObject(RoutingStorageContainerProperties.class);
        Assertions.assertEquals("ccymvaolpsslql", model.id());
        Assertions.assertEquals("mdnbbglzpswiy", model.connectionString());
        Assertions.assertEquals("cwyhzdxssa", model.endpointUri());
        Assertions.assertEquals(AuthenticationType.IDENTITY_BASED, model.authenticationType());
        Assertions.assertEquals("vdfznudaodvxzb", model.identity().userAssignedIdentity());
        Assertions.assertEquals("cblylpstdbhhxsr", model.name());
        Assertions.assertEquals("zucerscdntnev", model.subscriptionId());
        Assertions.assertEquals("wjmy", model.resourceGroup());
        Assertions.assertEquals("tdss", model.containerName());
        Assertions.assertEquals("wtmwerio", model.fileNameFormat());
        Assertions.assertEquals(893686819, model.batchFrequencyInSeconds());
        Assertions.assertEquals(158092972, model.maxChunkSizeInBytes());
        Assertions.assertEquals(RoutingStorageContainerPropertiesEncoding.AVRO_DEFLATE, model.encoding());
    }
}
