// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.iothub.IotHubManager;
import com.azure.resourcemanager.iothub.models.Capabilities;
import com.azure.resourcemanager.iothub.models.DefaultAction;
import com.azure.resourcemanager.iothub.models.IotHubDescription;
import com.azure.resourcemanager.iothub.models.IotHubSku;
import com.azure.resourcemanager.iothub.models.PublicNetworkAccess;
import com.azure.resourcemanager.iothub.models.ResourceIdentityType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class IotHubResourcesDeleteTests {
    @Test
    public void testDelete() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"etag\":\"uu\",\"properties\":{\"authorizationPolicies\":[],\"disableLocalAuth\":false,\"disableDeviceSAS\":true,\"disableModuleSAS\":false,\"restrictOutboundNetworkAccess\":true,\"allowedFqdnList\":[\"vvt\",\"seinqfiuf\",\"qknp\",\"rgnepttwqmsniffc\"],\"publicNetworkAccess\":\"Disabled\",\"ipFilterRules\":[],\"networkRuleSets\":{\"defaultAction\":\"Allow\",\"applyToBuiltInEventHubEndpoint\":false,\"ipRules\":[]},\"minTlsVersion\":\"jnkrxf\",\"privateEndpointConnections\":[],\"provisioningState\":\"Succeeded\",\"state\":\"tizzronasxif\",\"hostName\":\"zq\",\"eventHubEndpoints\":{},\"routing\":{\"routes\":[],\"enrichments\":[]},\"storageEndpoints\":{},\"messagingEndpoints\":{},\"enableFileUploadNotifications\":true,\"cloudToDevice\":{\"maxDeliveryCount\":1907577103,\"defaultTtlAsIso8601\":\"PT169H53M13S\"},\"comments\":\"gnyhmossxkkg\",\"deviceStreams\":{\"streamingEndpoints\":[]},\"features\":\"None\",\"encryption\":{\"keySource\":\"jbdhqxvc\",\"keyVaultProperties\":[]},\"locations\":[],\"enableDataResidency\":true,\"rootCertificate\":{\"enableRootCertificateV2\":true,\"lastUpdatedTimeUtc\":\"2021-02-11T12:03:35Z\"}},\"sku\":{\"name\":\"S3\",\"tier\":\"Basic\",\"capacity\":6813694776618683723},\"identity\":{\"principalId\":\"wdvzyy\",\"tenantId\":\"cnunvjsr\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{}},\"location\":\"opqgikyzirtxdyux\",\"tags\":{\"wgioilqukry\":\"ntps\",\"gufhyaomtbg\":\"xtqmieoxor\",\"fo\":\"havgrvk\",\"mv\":\"jzhpjbibgjmfx\"},\"id\":\"cluyovwxnbkf\",\"name\":\"zzxscyhwzdgiruj\",\"type\":\"zbomvzzbtdcqvpni\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        IotHubManager manager =
            IotHubManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        IotHubDescription response = manager.iotHubResources().delete("fdntwjchrdgoih", "umwctondz", Context.NONE);

        Assertions.assertEquals("opqgikyzirtxdyux", response.location());
        Assertions.assertEquals("ntps", response.tags().get("wgioilqukry"));
        Assertions.assertEquals("uu", response.etag());
        Assertions.assertEquals(false, response.properties().disableLocalAuth());
        Assertions.assertEquals(true, response.properties().disableDeviceSas());
        Assertions.assertEquals(false, response.properties().disableModuleSas());
        Assertions.assertEquals(true, response.properties().restrictOutboundNetworkAccess());
        Assertions.assertEquals("vvt", response.properties().allowedFqdnList().get(0));
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, response.properties().publicNetworkAccess());
        Assertions.assertEquals(DefaultAction.ALLOW, response.properties().networkRuleSets().defaultAction());
        Assertions.assertEquals(false, response.properties().networkRuleSets().applyToBuiltInEventHubEndpoint());
        Assertions.assertEquals("jnkrxf", response.properties().minTlsVersion());
        Assertions.assertEquals(true, response.properties().enableFileUploadNotifications());
        Assertions.assertEquals(1907577103, response.properties().cloudToDevice().maxDeliveryCount());
        Assertions
            .assertEquals(Duration.parse("PT169H53M13S"), response.properties().cloudToDevice().defaultTtlAsIso8601());
        Assertions.assertEquals("gnyhmossxkkg", response.properties().comments());
        Assertions.assertEquals(Capabilities.NONE, response.properties().features());
        Assertions.assertEquals("jbdhqxvc", response.properties().encryption().keySource());
        Assertions.assertEquals(true, response.properties().enableDataResidency());
        Assertions.assertEquals(true, response.properties().rootCertificate().enableRootCertificateV2());
        Assertions.assertEquals(IotHubSku.S3, response.sku().name());
        Assertions.assertEquals(6813694776618683723L, response.sku().capacity());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
    }
}
