// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iothub.models.RoutingMessage;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RoutingMessageTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RoutingMessage model =
            BinaryData
                .fromString(
                    "{\"body\":\"xoblytkbl\",\"appProperties\":{\"rn\":\"wwwfbkr\",\"bfovasrruvwbhsq\":\"vshqjohxcr\",\"gjb\":\"sub\",\"rfbjf\":\"rxbpyb\"},\"systemProperties\":{\"zbexilzznfqqnvw\":\"ssotftpv\"}}")
                .toObject(RoutingMessage.class);
        Assertions.assertEquals("xoblytkbl", model.body());
        Assertions.assertEquals("wwwfbkr", model.appProperties().get("rn"));
        Assertions.assertEquals("ssotftpv", model.systemProperties().get("zbexilzznfqqnvw"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RoutingMessage model =
            new RoutingMessage()
                .withBody("xoblytkbl")
                .withAppProperties(
                    mapOf("rn", "wwwfbkr", "bfovasrruvwbhsq", "vshqjohxcr", "gjb", "sub", "rfbjf", "rxbpyb"))
                .withSystemProperties(mapOf("zbexilzznfqqnvw", "ssotftpv"));
        model = BinaryData.fromObject(model).toObject(RoutingMessage.class);
        Assertions.assertEquals("xoblytkbl", model.body());
        Assertions.assertEquals("wwwfbkr", model.appProperties().get("rn"));
        Assertions.assertEquals("ssotftpv", model.systemProperties().get("zbexilzznfqqnvw"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
