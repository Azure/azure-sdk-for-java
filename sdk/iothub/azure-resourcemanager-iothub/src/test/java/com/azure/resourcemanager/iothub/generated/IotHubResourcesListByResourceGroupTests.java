// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.iothub.IotHubManager;
import com.azure.resourcemanager.iothub.models.Capabilities;
import com.azure.resourcemanager.iothub.models.DefaultAction;
import com.azure.resourcemanager.iothub.models.IotHubDescription;
import com.azure.resourcemanager.iothub.models.IotHubSku;
import com.azure.resourcemanager.iothub.models.PublicNetworkAccess;
import com.azure.resourcemanager.iothub.models.ResourceIdentityType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class IotHubResourcesListByResourceGroupTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"etag\":\"qfzgemjdftul\",\"properties\":{\"authorizationPolicies\":[],\"disableLocalAuth\":false,\"disableDeviceSAS\":false,\"disableModuleSAS\":true,\"restrictOutboundNetworkAccess\":false,\"allowedFqdnList\":[\"o\"],\"publicNetworkAccess\":\"Enabled\",\"ipFilterRules\":[],\"networkRuleSets\":{\"defaultAction\":\"Allow\",\"applyToBuiltInEventHubEndpoint\":true,\"ipRules\":[]},\"minTlsVersion\":\"knssxmojm\",\"privateEndpointConnections\":[],\"provisioningState\":\"jpr\",\"state\":\"wcfzqljyxgt\",\"hostName\":\"heyd\",\"eventHubEndpoints\":{},\"routing\":{\"routes\":[],\"enrichments\":[]},\"storageEndpoints\":{},\"messagingEndpoints\":{},\"enableFileUploadNotifications\":false,\"cloudToDevice\":{\"maxDeliveryCount\":857787446,\"defaultTtlAsIso8601\":\"PT228H11M55S\"},\"comments\":\"tfnhtbaxkgxywr\",\"deviceStreams\":{\"streamingEndpoints\":[]},\"features\":\"None\",\"encryption\":{\"keySource\":\"hpluodpvruudlg\",\"keyVaultProperties\":[]},\"locations\":[],\"enableDataResidency\":false,\"rootCertificate\":{\"enableRootCertificateV2\":true,\"lastUpdatedTimeUtc\":\"2021-06-25T20:50:06Z\"}},\"sku\":{\"name\":\"S3\",\"tier\":\"Standard\",\"capacity\":8531237538541595135},\"identity\":{\"principalId\":\"zedqbcvhzlhplo\",\"tenantId\":\"kdl\",\"type\":\"None\",\"userAssignedIdentities\":{}},\"location\":\"mlkxtrqjfs\",\"tags\":{\"w\":\"btx\",\"skh\":\"fwsrtawcoezbrhu\"},\"id\":\"dyg\",\"name\":\"ookk\",\"type\":\"fqjbvleo\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        IotHubManager manager =
            IotHubManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<IotHubDescription> response =
            manager.iotHubResources().listByResourceGroup("volvtn", Context.NONE);

        Assertions.assertEquals("mlkxtrqjfs", response.iterator().next().location());
        Assertions.assertEquals("btx", response.iterator().next().tags().get("w"));
        Assertions.assertEquals("qfzgemjdftul", response.iterator().next().etag());
        Assertions.assertEquals(false, response.iterator().next().properties().disableLocalAuth());
        Assertions.assertEquals(false, response.iterator().next().properties().disableDeviceSas());
        Assertions.assertEquals(true, response.iterator().next().properties().disableModuleSas());
        Assertions.assertEquals(false, response.iterator().next().properties().restrictOutboundNetworkAccess());
        Assertions.assertEquals("o", response.iterator().next().properties().allowedFqdnList().get(0));
        Assertions
            .assertEquals(PublicNetworkAccess.ENABLED, response.iterator().next().properties().publicNetworkAccess());
        Assertions
            .assertEquals(
                DefaultAction.ALLOW, response.iterator().next().properties().networkRuleSets().defaultAction());
        Assertions
            .assertEquals(
                true, response.iterator().next().properties().networkRuleSets().applyToBuiltInEventHubEndpoint());
        Assertions.assertEquals("knssxmojm", response.iterator().next().properties().minTlsVersion());
        Assertions.assertEquals(false, response.iterator().next().properties().enableFileUploadNotifications());
        Assertions.assertEquals(857787446, response.iterator().next().properties().cloudToDevice().maxDeliveryCount());
        Assertions
            .assertEquals(
                Duration.parse("PT228H11M55S"),
                response.iterator().next().properties().cloudToDevice().defaultTtlAsIso8601());
        Assertions.assertEquals("tfnhtbaxkgxywr", response.iterator().next().properties().comments());
        Assertions.assertEquals(Capabilities.NONE, response.iterator().next().properties().features());
        Assertions.assertEquals("hpluodpvruudlg", response.iterator().next().properties().encryption().keySource());
        Assertions.assertEquals(false, response.iterator().next().properties().enableDataResidency());
        Assertions
            .assertEquals(true, response.iterator().next().properties().rootCertificate().enableRootCertificateV2());
        Assertions.assertEquals(IotHubSku.S3, response.iterator().next().sku().name());
        Assertions.assertEquals(8531237538541595135L, response.iterator().next().sku().capacity());
        Assertions.assertEquals(ResourceIdentityType.NONE, response.iterator().next().identity().type());
    }
}
