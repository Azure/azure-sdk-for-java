// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iothub.IotHubManager;
import com.azure.resourcemanager.iothub.models.RouteErrorSeverity;
import com.azure.resourcemanager.iothub.models.RouteProperties;
import com.azure.resourcemanager.iothub.models.RoutingMessage;
import com.azure.resourcemanager.iothub.models.RoutingSource;
import com.azure.resourcemanager.iothub.models.RoutingTwin;
import com.azure.resourcemanager.iothub.models.RoutingTwinProperties;
import com.azure.resourcemanager.iothub.models.TestResultStatus;
import com.azure.resourcemanager.iothub.models.TestRouteInput;
import com.azure.resourcemanager.iothub.models.TestRouteResult;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IotHubResourcesTestRouteWithResponseMockTests {
    @Test
    public void testTestRouteWithResponse() throws Exception {
        String responseStr
            = "{\"result\":\"undefined\",\"details\":{\"compilationErrors\":[{\"message\":\"xdigrjg\",\"severity\":\"error\",\"location\":{\"start\":{},\"end\":{}}},{\"message\":\"yqtfihwh\",\"severity\":\"warning\",\"location\":{\"start\":{},\"end\":{}}},{\"message\":\"amvpphoszqzudph\",\"severity\":\"error\",\"location\":{\"start\":{},\"end\":{}}},{\"message\":\"wynwcvtbvkayhm\",\"severity\":\"error\",\"location\":{\"start\":{},\"end\":{}}}]}}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IotHubManager manager = IotHubManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        TestRouteResult response = manager.iotHubResources()
            .testRouteWithResponse("ss", "wutwbdsre",
                new TestRouteInput().withMessage(new RoutingMessage().withBody("rhneuyowq")
                    .withAppProperties(mapOf("gpikpzimejza", "ytisibir"))
                    .withSystemProperties(mapOf("zonokixrjqci", "zxiavrm", "szrnwo", "gzpfrla", "bt", "indfpwpjyl")))
                    .withRoute(new RouteProperties().withName("h")
                        .withSource(RoutingSource.DEVICE_MESSAGES)
                        .withCondition("jcdh")
                        .withEndpointNames(Arrays.asList("fjvfbgofeljagr", "mqhldvrii", "ojnal"))
                        .withIsEnabled(true))
                    .withTwin(new RoutingTwin().withTags("datavtvsexsowueluq")
                        .withProperties(new RoutingTwinProperties().withDesired("datahhxvrhmzkwpj")
                            .withReported("datawspughftqsxhqx"))),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(TestResultStatus.UNDEFINED, response.result());
        Assertions.assertEquals("xdigrjg", response.details().compilationErrors().get(0).message());
        Assertions.assertEquals(RouteErrorSeverity.ERROR, response.details().compilationErrors().get(0).severity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
