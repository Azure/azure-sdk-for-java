// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iothub.models.FallbackRouteProperties;
import com.azure.resourcemanager.iothub.models.RoutingSource;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class FallbackRoutePropertiesTests {
    @Test
    public void testDeserialize() {
        FallbackRouteProperties model =
            BinaryData
                .fromString(
                    "{\"name\":\"gcj\",\"source\":\"DeviceJobLifecycleEvents\",\"condition\":\"zmuvpbttdumorppx\",\"endpointNames\":[\"mnzb\",\"bhjpglkfgohdne\",\"el\"],\"isEnabled\":false}")
                .toObject(FallbackRouteProperties.class);
        Assertions.assertEquals("gcj", model.name());
        Assertions.assertEquals(RoutingSource.DEVICE_JOB_LIFECYCLE_EVENTS, model.source());
        Assertions.assertEquals("zmuvpbttdumorppx", model.condition());
        Assertions.assertEquals("mnzb", model.endpointNames().get(0));
        Assertions.assertEquals(false, model.isEnabled());
    }

    @Test
    public void testSerialize() {
        FallbackRouteProperties model =
            new FallbackRouteProperties()
                .withName("gcj")
                .withSource(RoutingSource.DEVICE_JOB_LIFECYCLE_EVENTS)
                .withCondition("zmuvpbttdumorppx")
                .withEndpointNames(Arrays.asList("mnzb", "bhjpglkfgohdne", "el"))
                .withIsEnabled(false);
        model = BinaryData.fromObject(model).toObject(FallbackRouteProperties.class);
        Assertions.assertEquals("gcj", model.name());
        Assertions.assertEquals(RoutingSource.DEVICE_JOB_LIFECYCLE_EVENTS, model.source());
        Assertions.assertEquals("zmuvpbttdumorppx", model.condition());
        Assertions.assertEquals("mnzb", model.endpointNames().get(0));
        Assertions.assertEquals(false, model.isEnabled());
    }
}
