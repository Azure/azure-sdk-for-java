// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iothub.IotHubManager;
import com.azure.resourcemanager.iothub.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.iothub.models.PrivateEndpoint;
import com.azure.resourcemanager.iothub.models.PrivateEndpointConnection;
import com.azure.resourcemanager.iothub.models.PrivateEndpointConnectionProperties;
import com.azure.resourcemanager.iothub.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.iothub.models.PrivateLinkServiceConnectionStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsUpdateMockTests {
    @Test
    public void testUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"privateEndpoint\":{\"id\":\"av\"},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"qdzfvazivjlfrqtt\",\"actionsRequired\":\"jlkatnwxy\"}},\"id\":\"opidkqqfkuv\",\"name\":\"cxkdmligovi\",\"type\":\"rxkpmloazuruoc\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IotHubManager manager = IotHubManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PrivateEndpointConnection response = manager.privateEndpointConnections()
            .update("cgxxlxs", "fgcviz", "zdwlvwlyoupfgfb",
                new PrivateEndpointConnectionInner()
                    .withProperties(new PrivateEndpointConnectionProperties().withPrivateEndpoint(new PrivateEndpoint())
                        .withPrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                            .withStatus(PrivateLinkServiceConnectionStatus.DISCONNECTED)
                            .withDescription("tsttktlahbq")
                            .withActionsRequired("tx"))),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals(PrivateLinkServiceConnectionStatus.PENDING,
            response.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("qdzfvazivjlfrqtt",
            response.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("jlkatnwxy",
            response.properties().privateLinkServiceConnectionState().actionsRequired());
    }
}
