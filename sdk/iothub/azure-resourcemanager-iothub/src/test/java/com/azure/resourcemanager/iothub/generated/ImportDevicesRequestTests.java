// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iothub.models.AuthenticationType;
import com.azure.resourcemanager.iothub.models.ImportDevicesRequest;
import com.azure.resourcemanager.iothub.models.ManagedIdentity;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ImportDevicesRequestTests {
    @Test
    public void testDeserialize() {
        ImportDevicesRequest model =
            BinaryData
                .fromString(
                    "{\"inputBlobContainerUri\":\"jvfbgofelja\",\"outputBlobContainerUri\":\"rqmq\",\"inputBlobName\":\"dvriiiojnal\",\"outputBlobName\":\"fk\",\"authenticationType\":\"identityBased\",\"identity\":{\"userAssignedIdentity\":\"xsowu\"},\"includeConfigurations\":true,\"configurationsBlobName\":\"hhahhxvrhmzkwpjg\"}")
                .toObject(ImportDevicesRequest.class);
        Assertions.assertEquals("jvfbgofelja", model.inputBlobContainerUri());
        Assertions.assertEquals("rqmq", model.outputBlobContainerUri());
        Assertions.assertEquals("dvriiiojnal", model.inputBlobName());
        Assertions.assertEquals("fk", model.outputBlobName());
        Assertions.assertEquals(AuthenticationType.IDENTITY_BASED, model.authenticationType());
        Assertions.assertEquals("xsowu", model.identity().userAssignedIdentity());
        Assertions.assertEquals(true, model.includeConfigurations());
        Assertions.assertEquals("hhahhxvrhmzkwpjg", model.configurationsBlobName());
    }

    @Test
    public void testSerialize() {
        ImportDevicesRequest model =
            new ImportDevicesRequest()
                .withInputBlobContainerUri("jvfbgofelja")
                .withOutputBlobContainerUri("rqmq")
                .withInputBlobName("dvriiiojnal")
                .withOutputBlobName("fk")
                .withAuthenticationType(AuthenticationType.IDENTITY_BASED)
                .withIdentity(new ManagedIdentity().withUserAssignedIdentity("xsowu"))
                .withIncludeConfigurations(true)
                .withConfigurationsBlobName("hhahhxvrhmzkwpjg");
        model = BinaryData.fromObject(model).toObject(ImportDevicesRequest.class);
        Assertions.assertEquals("jvfbgofelja", model.inputBlobContainerUri());
        Assertions.assertEquals("rqmq", model.outputBlobContainerUri());
        Assertions.assertEquals("dvriiiojnal", model.inputBlobName());
        Assertions.assertEquals("fk", model.outputBlobName());
        Assertions.assertEquals(AuthenticationType.IDENTITY_BASED, model.authenticationType());
        Assertions.assertEquals("xsowu", model.identity().userAssignedIdentity());
        Assertions.assertEquals(true, model.includeConfigurations());
        Assertions.assertEquals("hhahhxvrhmzkwpjg", model.configurationsBlobName());
    }
}
