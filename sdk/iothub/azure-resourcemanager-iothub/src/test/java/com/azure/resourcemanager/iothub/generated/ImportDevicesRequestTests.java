// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iothub.models.AuthenticationType;
import com.azure.resourcemanager.iothub.models.ImportDevicesRequest;
import com.azure.resourcemanager.iothub.models.ManagedIdentity;
import org.junit.jupiter.api.Assertions;

public final class ImportDevicesRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ImportDevicesRequest model =
            BinaryData
                .fromString(
                    "{\"inputBlobContainerUri\":\"jrjxgciqibrhosx\",\"outputBlobContainerUri\":\"dqrhzoymib\",\"inputBlobName\":\"qyib\",\"outputBlobName\":\"wfluszdt\",\"authenticationType\":\"identityBased\",\"identity\":{\"userAssignedIdentity\":\"ofyyvoqacpi\"},\"includeConfigurations\":false,\"configurationsBlobName\":\"tg\"}")
                .toObject(ImportDevicesRequest.class);
        Assertions.assertEquals("jrjxgciqibrhosx", model.inputBlobContainerUri());
        Assertions.assertEquals("dqrhzoymib", model.outputBlobContainerUri());
        Assertions.assertEquals("qyib", model.inputBlobName());
        Assertions.assertEquals("wfluszdt", model.outputBlobName());
        Assertions.assertEquals(AuthenticationType.IDENTITY_BASED, model.authenticationType());
        Assertions.assertEquals("ofyyvoqacpi", model.identity().userAssignedIdentity());
        Assertions.assertEquals(false, model.includeConfigurations());
        Assertions.assertEquals("tg", model.configurationsBlobName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ImportDevicesRequest model =
            new ImportDevicesRequest()
                .withInputBlobContainerUri("jrjxgciqibrhosx")
                .withOutputBlobContainerUri("dqrhzoymib")
                .withInputBlobName("qyib")
                .withOutputBlobName("wfluszdt")
                .withAuthenticationType(AuthenticationType.IDENTITY_BASED)
                .withIdentity(new ManagedIdentity().withUserAssignedIdentity("ofyyvoqacpi"))
                .withIncludeConfigurations(false)
                .withConfigurationsBlobName("tg");
        model = BinaryData.fromObject(model).toObject(ImportDevicesRequest.class);
        Assertions.assertEquals("jrjxgciqibrhosx", model.inputBlobContainerUri());
        Assertions.assertEquals("dqrhzoymib", model.outputBlobContainerUri());
        Assertions.assertEquals("qyib", model.inputBlobName());
        Assertions.assertEquals("wfluszdt", model.outputBlobName());
        Assertions.assertEquals(AuthenticationType.IDENTITY_BASED, model.authenticationType());
        Assertions.assertEquals("ofyyvoqacpi", model.identity().userAssignedIdentity());
        Assertions.assertEquals(false, model.includeConfigurations());
        Assertions.assertEquals("tg", model.configurationsBlobName());
    }
}
