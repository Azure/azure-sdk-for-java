// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.iothub.IotHubManager;
import com.azure.resourcemanager.iothub.models.Capabilities;
import com.azure.resourcemanager.iothub.models.DefaultAction;
import com.azure.resourcemanager.iothub.models.IotHubDescription;
import com.azure.resourcemanager.iothub.models.IotHubSku;
import com.azure.resourcemanager.iothub.models.PublicNetworkAccess;
import com.azure.resourcemanager.iothub.models.ResourceIdentityType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class IotHubResourcesListTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"etag\":\"jviylwdshfs\",\"properties\":{\"authorizationPolicies\":[],\"disableLocalAuth\":false,\"disableDeviceSAS\":true,\"disableModuleSAS\":true,\"restrictOutboundNetworkAccess\":true,\"allowedFqdnList\":[\"ojfmwnco\",\"mrfhirctymox\"],\"publicNetworkAccess\":\"Disabled\",\"ipFilterRules\":[],\"networkRuleSets\":{\"defaultAction\":\"Deny\",\"applyToBuiltInEventHubEndpoint\":true,\"ipRules\":[]},\"minTlsVersion\":\"zuhx\",\"privateEndpointConnections\":[],\"provisioningState\":\"jlihhyus\",\"state\":\"kasdvlm\",\"hostName\":\"dgzxulucvpamrsr\",\"eventHubEndpoints\":{},\"routing\":{\"routes\":[],\"enrichments\":[]},\"storageEndpoints\":{},\"messagingEndpoints\":{},\"enableFileUploadNotifications\":true,\"cloudToDevice\":{\"maxDeliveryCount\":1315745127,\"defaultTtlAsIso8601\":\"PT76H18M3S\"},\"comments\":\"gxmrhublwp\",\"deviceStreams\":{\"streamingEndpoints\":[]},\"features\":\"DeviceManagement\",\"encryption\":{\"keySource\":\"jupauut\",\"keyVaultProperties\":[]},\"locations\":[],\"enableDataResidency\":false,\"rootCertificate\":{\"enableRootCertificateV2\":false,\"lastUpdatedTimeUtc\":\"2021-05-31T05:16:14Z\"}},\"sku\":{\"name\":\"B2\",\"tier\":\"Basic\",\"capacity\":7151697593673556210},\"identity\":{\"principalId\":\"cypsxjv\",\"tenantId\":\"imwkslircizj\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{}},\"location\":\"eacvl\",\"tags\":{\"jslb\":\"gdyftumrtwna\",\"aeqphchqnr\":\"wkojgcyztsfmzn\",\"wrykqgai\":\"rpxeh\"},\"id\":\"mvikl\",\"name\":\"ydv\",\"type\":\"hbejdznxcvdsrhnj\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        IotHubManager manager =
            IotHubManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<IotHubDescription> response = manager.iotHubResources().list(Context.NONE);

        Assertions.assertEquals("eacvl", response.iterator().next().location());
        Assertions.assertEquals("gdyftumrtwna", response.iterator().next().tags().get("jslb"));
        Assertions.assertEquals("jviylwdshfs", response.iterator().next().etag());
        Assertions.assertEquals(false, response.iterator().next().properties().disableLocalAuth());
        Assertions.assertEquals(true, response.iterator().next().properties().disableDeviceSas());
        Assertions.assertEquals(true, response.iterator().next().properties().disableModuleSas());
        Assertions.assertEquals(true, response.iterator().next().properties().restrictOutboundNetworkAccess());
        Assertions.assertEquals("ojfmwnco", response.iterator().next().properties().allowedFqdnList().get(0));
        Assertions
            .assertEquals(PublicNetworkAccess.DISABLED, response.iterator().next().properties().publicNetworkAccess());
        Assertions
            .assertEquals(
                DefaultAction.DENY, response.iterator().next().properties().networkRuleSets().defaultAction());
        Assertions
            .assertEquals(
                true, response.iterator().next().properties().networkRuleSets().applyToBuiltInEventHubEndpoint());
        Assertions.assertEquals("zuhx", response.iterator().next().properties().minTlsVersion());
        Assertions.assertEquals(true, response.iterator().next().properties().enableFileUploadNotifications());
        Assertions.assertEquals(1315745127, response.iterator().next().properties().cloudToDevice().maxDeliveryCount());
        Assertions
            .assertEquals(
                Duration.parse("PT76H18M3S"),
                response.iterator().next().properties().cloudToDevice().defaultTtlAsIso8601());
        Assertions.assertEquals("gxmrhublwp", response.iterator().next().properties().comments());
        Assertions.assertEquals(Capabilities.DEVICE_MANAGEMENT, response.iterator().next().properties().features());
        Assertions.assertEquals("jupauut", response.iterator().next().properties().encryption().keySource());
        Assertions.assertEquals(false, response.iterator().next().properties().enableDataResidency());
        Assertions
            .assertEquals(false, response.iterator().next().properties().rootCertificate().enableRootCertificateV2());
        Assertions.assertEquals(IotHubSku.B2, response.iterator().next().sku().name());
        Assertions.assertEquals(7151697593673556210L, response.iterator().next().sku().capacity());
        Assertions.assertEquals(ResourceIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
    }
}
