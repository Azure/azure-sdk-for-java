// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * User subscription quota response.
 */
@Fluent
public final class UserSubscriptionQuota implements JsonSerializable<UserSubscriptionQuota> {
    /*
     * IotHub type id
     */
    private String id;

    /*
     * Response type
     */
    private String type;

    /*
     * Unit of IotHub type
     */
    private String unit;

    /*
     * Current number of IotHub type
     */
    private Integer currentValue;

    /*
     * Numerical limit on IotHub type
     */
    private Integer limit;

    /*
     * IotHub type
     */
    private Name name;

    /**
     * Creates an instance of UserSubscriptionQuota class.
     */
    public UserSubscriptionQuota() {
    }

    /**
     * Get the id property: IotHub type id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: IotHub type id.
     * 
     * @param id the id value to set.
     * @return the UserSubscriptionQuota object itself.
     */
    public UserSubscriptionQuota withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the type property: Response type.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Response type.
     * 
     * @param type the type value to set.
     * @return the UserSubscriptionQuota object itself.
     */
    public UserSubscriptionQuota withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the unit property: Unit of IotHub type.
     * 
     * @return the unit value.
     */
    public String unit() {
        return this.unit;
    }

    /**
     * Set the unit property: Unit of IotHub type.
     * 
     * @param unit the unit value to set.
     * @return the UserSubscriptionQuota object itself.
     */
    public UserSubscriptionQuota withUnit(String unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Get the currentValue property: Current number of IotHub type.
     * 
     * @return the currentValue value.
     */
    public Integer currentValue() {
        return this.currentValue;
    }

    /**
     * Set the currentValue property: Current number of IotHub type.
     * 
     * @param currentValue the currentValue value to set.
     * @return the UserSubscriptionQuota object itself.
     */
    public UserSubscriptionQuota withCurrentValue(Integer currentValue) {
        this.currentValue = currentValue;
        return this;
    }

    /**
     * Get the limit property: Numerical limit on IotHub type.
     * 
     * @return the limit value.
     */
    public Integer limit() {
        return this.limit;
    }

    /**
     * Set the limit property: Numerical limit on IotHub type.
     * 
     * @param limit the limit value to set.
     * @return the UserSubscriptionQuota object itself.
     */
    public UserSubscriptionQuota withLimit(Integer limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Get the name property: IotHub type.
     * 
     * @return the name value.
     */
    public Name name() {
        return this.name;
    }

    /**
     * Set the name property: IotHub type.
     * 
     * @param name the name value to set.
     * @return the UserSubscriptionQuota object itself.
     */
    public UserSubscriptionQuota withName(Name name) {
        this.name = name;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() != null) {
            name().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("unit", this.unit);
        jsonWriter.writeNumberField("currentValue", this.currentValue);
        jsonWriter.writeNumberField("limit", this.limit);
        jsonWriter.writeJsonField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserSubscriptionQuota from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserSubscriptionQuota if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UserSubscriptionQuota.
     */
    public static UserSubscriptionQuota fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserSubscriptionQuota deserializedUserSubscriptionQuota = new UserSubscriptionQuota();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedUserSubscriptionQuota.id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedUserSubscriptionQuota.type = reader.getString();
                } else if ("unit".equals(fieldName)) {
                    deserializedUserSubscriptionQuota.unit = reader.getString();
                } else if ("currentValue".equals(fieldName)) {
                    deserializedUserSubscriptionQuota.currentValue = reader.getNullable(JsonReader::getInt);
                } else if ("limit".equals(fieldName)) {
                    deserializedUserSubscriptionQuota.limit = reader.getNullable(JsonReader::getInt);
                } else if ("name".equals(fieldName)) {
                    deserializedUserSubscriptionQuota.name = Name.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserSubscriptionQuota;
        });
    }
}
