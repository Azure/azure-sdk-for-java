// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.DateTimeRfc1123;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.iothub.models.JobStatus;
import com.azure.resourcemanager.iothub.models.JobType;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The properties of the Job Response object.
 */
@Immutable
public final class JobResponseInner implements JsonSerializable<JobResponseInner> {
    /*
     * The job identifier.
     */
    private String jobId;

    /*
     * The start time of the job.
     */
    private DateTimeRfc1123 startTimeUtc;

    /*
     * The time the job stopped processing.
     */
    private DateTimeRfc1123 endTimeUtc;

    /*
     * The type of the job.
     */
    private JobType type;

    /*
     * The status of the job.
     */
    private JobStatus status;

    /*
     * If status == failed, this string containing the reason for the failure.
     */
    private String failureReason;

    /*
     * The status message for the job.
     */
    private String statusMessage;

    /*
     * The job identifier of the parent job, if any.
     */
    private String parentJobId;

    /**
     * Creates an instance of JobResponseInner class.
     */
    public JobResponseInner() {
    }

    /**
     * Get the jobId property: The job identifier.
     * 
     * @return the jobId value.
     */
    public String jobId() {
        return this.jobId;
    }

    /**
     * Get the startTimeUtc property: The start time of the job.
     * 
     * @return the startTimeUtc value.
     */
    public OffsetDateTime startTimeUtc() {
        if (this.startTimeUtc == null) {
            return null;
        }
        return this.startTimeUtc.getDateTime();
    }

    /**
     * Get the endTimeUtc property: The time the job stopped processing.
     * 
     * @return the endTimeUtc value.
     */
    public OffsetDateTime endTimeUtc() {
        if (this.endTimeUtc == null) {
            return null;
        }
        return this.endTimeUtc.getDateTime();
    }

    /**
     * Get the type property: The type of the job.
     * 
     * @return the type value.
     */
    public JobType type() {
        return this.type;
    }

    /**
     * Get the status property: The status of the job.
     * 
     * @return the status value.
     */
    public JobStatus status() {
        return this.status;
    }

    /**
     * Get the failureReason property: If status == failed, this string containing the reason for the failure.
     * 
     * @return the failureReason value.
     */
    public String failureReason() {
        return this.failureReason;
    }

    /**
     * Get the statusMessage property: The status message for the job.
     * 
     * @return the statusMessage value.
     */
    public String statusMessage() {
        return this.statusMessage;
    }

    /**
     * Get the parentJobId property: The job identifier of the parent job, if any.
     * 
     * @return the parentJobId value.
     */
    public String parentJobId() {
        return this.parentJobId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobResponseInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the JobResponseInner.
     */
    public static JobResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobResponseInner deserializedJobResponseInner = new JobResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobId".equals(fieldName)) {
                    deserializedJobResponseInner.jobId = reader.getString();
                } else if ("startTimeUtc".equals(fieldName)) {
                    deserializedJobResponseInner.startTimeUtc
                        = reader.getNullable(nonNullReader -> new DateTimeRfc1123(nonNullReader.getString()));
                } else if ("endTimeUtc".equals(fieldName)) {
                    deserializedJobResponseInner.endTimeUtc
                        = reader.getNullable(nonNullReader -> new DateTimeRfc1123(nonNullReader.getString()));
                } else if ("type".equals(fieldName)) {
                    deserializedJobResponseInner.type = JobType.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedJobResponseInner.status = JobStatus.fromString(reader.getString());
                } else if ("failureReason".equals(fieldName)) {
                    deserializedJobResponseInner.failureReason = reader.getString();
                } else if ("statusMessage".equals(fieldName)) {
                    deserializedJobResponseInner.statusMessage = reader.getString();
                } else if ("parentJobId".equals(fieldName)) {
                    deserializedJobResponseInner.parentJobId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobResponseInner;
        });
    }
}
