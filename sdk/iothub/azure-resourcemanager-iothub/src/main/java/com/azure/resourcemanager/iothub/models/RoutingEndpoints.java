// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties related to the custom endpoints to which your IoT hub routes messages based on the routing rules. A
 * maximum of 10 custom endpoints are allowed across all endpoint types for paid hubs and only 1 custom endpoint is
 * allowed across all endpoint types for free hubs.
 */
@Fluent
public final class RoutingEndpoints implements JsonSerializable<RoutingEndpoints> {
    /*
     * The list of Service Bus queue endpoints that IoT hub routes the messages to, based on the routing rules.
     */
    private List<RoutingServiceBusQueueEndpointProperties> serviceBusQueues;

    /*
     * The list of Service Bus topic endpoints that the IoT hub routes the messages to, based on the routing rules.
     */
    private List<RoutingServiceBusTopicEndpointProperties> serviceBusTopics;

    /*
     * The list of Event Hubs endpoints that IoT hub routes messages to, based on the routing rules. This list does not
     * include the built-in Event Hubs endpoint.
     */
    private List<RoutingEventHubProperties> eventHubs;

    /*
     * The list of storage container endpoints that IoT hub routes messages to, based on the routing rules.
     */
    private List<RoutingStorageContainerProperties> storageContainers;

    /*
     * The list of Cosmos DB container endpoints that IoT hub routes messages to, based on the routing rules.
     */
    private List<RoutingCosmosDBSqlApiProperties> cosmosDBSqlContainers;

    /**
     * Creates an instance of RoutingEndpoints class.
     */
    public RoutingEndpoints() {
    }

    /**
     * Get the serviceBusQueues property: The list of Service Bus queue endpoints that IoT hub routes the messages to,
     * based on the routing rules.
     * 
     * @return the serviceBusQueues value.
     */
    public List<RoutingServiceBusQueueEndpointProperties> serviceBusQueues() {
        return this.serviceBusQueues;
    }

    /**
     * Set the serviceBusQueues property: The list of Service Bus queue endpoints that IoT hub routes the messages to,
     * based on the routing rules.
     * 
     * @param serviceBusQueues the serviceBusQueues value to set.
     * @return the RoutingEndpoints object itself.
     */
    public RoutingEndpoints withServiceBusQueues(List<RoutingServiceBusQueueEndpointProperties> serviceBusQueues) {
        this.serviceBusQueues = serviceBusQueues;
        return this;
    }

    /**
     * Get the serviceBusTopics property: The list of Service Bus topic endpoints that the IoT hub routes the messages
     * to, based on the routing rules.
     * 
     * @return the serviceBusTopics value.
     */
    public List<RoutingServiceBusTopicEndpointProperties> serviceBusTopics() {
        return this.serviceBusTopics;
    }

    /**
     * Set the serviceBusTopics property: The list of Service Bus topic endpoints that the IoT hub routes the messages
     * to, based on the routing rules.
     * 
     * @param serviceBusTopics the serviceBusTopics value to set.
     * @return the RoutingEndpoints object itself.
     */
    public RoutingEndpoints withServiceBusTopics(List<RoutingServiceBusTopicEndpointProperties> serviceBusTopics) {
        this.serviceBusTopics = serviceBusTopics;
        return this;
    }

    /**
     * Get the eventHubs property: The list of Event Hubs endpoints that IoT hub routes messages to, based on the
     * routing rules. This list does not include the built-in Event Hubs endpoint.
     * 
     * @return the eventHubs value.
     */
    public List<RoutingEventHubProperties> eventHubs() {
        return this.eventHubs;
    }

    /**
     * Set the eventHubs property: The list of Event Hubs endpoints that IoT hub routes messages to, based on the
     * routing rules. This list does not include the built-in Event Hubs endpoint.
     * 
     * @param eventHubs the eventHubs value to set.
     * @return the RoutingEndpoints object itself.
     */
    public RoutingEndpoints withEventHubs(List<RoutingEventHubProperties> eventHubs) {
        this.eventHubs = eventHubs;
        return this;
    }

    /**
     * Get the storageContainers property: The list of storage container endpoints that IoT hub routes messages to,
     * based on the routing rules.
     * 
     * @return the storageContainers value.
     */
    public List<RoutingStorageContainerProperties> storageContainers() {
        return this.storageContainers;
    }

    /**
     * Set the storageContainers property: The list of storage container endpoints that IoT hub routes messages to,
     * based on the routing rules.
     * 
     * @param storageContainers the storageContainers value to set.
     * @return the RoutingEndpoints object itself.
     */
    public RoutingEndpoints withStorageContainers(List<RoutingStorageContainerProperties> storageContainers) {
        this.storageContainers = storageContainers;
        return this;
    }

    /**
     * Get the cosmosDBSqlContainers property: The list of Cosmos DB container endpoints that IoT hub routes messages
     * to, based on the routing rules.
     * 
     * @return the cosmosDBSqlContainers value.
     */
    public List<RoutingCosmosDBSqlApiProperties> cosmosDBSqlContainers() {
        return this.cosmosDBSqlContainers;
    }

    /**
     * Set the cosmosDBSqlContainers property: The list of Cosmos DB container endpoints that IoT hub routes messages
     * to, based on the routing rules.
     * 
     * @param cosmosDBSqlContainers the cosmosDBSqlContainers value to set.
     * @return the RoutingEndpoints object itself.
     */
    public RoutingEndpoints withCosmosDBSqlContainers(List<RoutingCosmosDBSqlApiProperties> cosmosDBSqlContainers) {
        this.cosmosDBSqlContainers = cosmosDBSqlContainers;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (serviceBusQueues() != null) {
            serviceBusQueues().forEach(e -> e.validate());
        }
        if (serviceBusTopics() != null) {
            serviceBusTopics().forEach(e -> e.validate());
        }
        if (eventHubs() != null) {
            eventHubs().forEach(e -> e.validate());
        }
        if (storageContainers() != null) {
            storageContainers().forEach(e -> e.validate());
        }
        if (cosmosDBSqlContainers() != null) {
            cosmosDBSqlContainers().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("serviceBusQueues", this.serviceBusQueues,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("serviceBusTopics", this.serviceBusTopics,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("eventHubs", this.eventHubs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("storageContainers", this.storageContainers,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("cosmosDBSqlContainers", this.cosmosDBSqlContainers,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RoutingEndpoints from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RoutingEndpoints if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RoutingEndpoints.
     */
    public static RoutingEndpoints fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RoutingEndpoints deserializedRoutingEndpoints = new RoutingEndpoints();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceBusQueues".equals(fieldName)) {
                    List<RoutingServiceBusQueueEndpointProperties> serviceBusQueues
                        = reader.readArray(reader1 -> RoutingServiceBusQueueEndpointProperties.fromJson(reader1));
                    deserializedRoutingEndpoints.serviceBusQueues = serviceBusQueues;
                } else if ("serviceBusTopics".equals(fieldName)) {
                    List<RoutingServiceBusTopicEndpointProperties> serviceBusTopics
                        = reader.readArray(reader1 -> RoutingServiceBusTopicEndpointProperties.fromJson(reader1));
                    deserializedRoutingEndpoints.serviceBusTopics = serviceBusTopics;
                } else if ("eventHubs".equals(fieldName)) {
                    List<RoutingEventHubProperties> eventHubs
                        = reader.readArray(reader1 -> RoutingEventHubProperties.fromJson(reader1));
                    deserializedRoutingEndpoints.eventHubs = eventHubs;
                } else if ("storageContainers".equals(fieldName)) {
                    List<RoutingStorageContainerProperties> storageContainers
                        = reader.readArray(reader1 -> RoutingStorageContainerProperties.fromJson(reader1));
                    deserializedRoutingEndpoints.storageContainers = storageContainers;
                } else if ("cosmosDBSqlContainers".equals(fieldName)) {
                    List<RoutingCosmosDBSqlApiProperties> cosmosDBSqlContainers
                        = reader.readArray(reader1 -> RoutingCosmosDBSqlApiProperties.fromJson(reader1));
                    deserializedRoutingEndpoints.cosmosDBSqlContainers = cosmosDBSqlContainers;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRoutingEndpoints;
        });
    }
}
