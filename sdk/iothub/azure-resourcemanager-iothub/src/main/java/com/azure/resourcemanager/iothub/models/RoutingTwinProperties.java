// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The RoutingTwinProperties model.
 */
@Fluent
public final class RoutingTwinProperties implements JsonSerializable<RoutingTwinProperties> {
    /*
     * Twin desired properties
     */
    private Object desired;

    /*
     * Twin desired properties
     */
    private Object reported;

    /**
     * Creates an instance of RoutingTwinProperties class.
     */
    public RoutingTwinProperties() {
    }

    /**
     * Get the desired property: Twin desired properties.
     * 
     * @return the desired value.
     */
    public Object desired() {
        return this.desired;
    }

    /**
     * Set the desired property: Twin desired properties.
     * 
     * @param desired the desired value to set.
     * @return the RoutingTwinProperties object itself.
     */
    public RoutingTwinProperties withDesired(Object desired) {
        this.desired = desired;
        return this;
    }

    /**
     * Get the reported property: Twin desired properties.
     * 
     * @return the reported value.
     */
    public Object reported() {
        return this.reported;
    }

    /**
     * Set the reported property: Twin desired properties.
     * 
     * @param reported the reported value to set.
     * @return the RoutingTwinProperties object itself.
     */
    public RoutingTwinProperties withReported(Object reported) {
        this.reported = reported;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("desired", this.desired);
        jsonWriter.writeUntypedField("reported", this.reported);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RoutingTwinProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RoutingTwinProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RoutingTwinProperties.
     */
    public static RoutingTwinProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RoutingTwinProperties deserializedRoutingTwinProperties = new RoutingTwinProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("desired".equals(fieldName)) {
                    deserializedRoutingTwinProperties.desired = reader.readUntyped();
                } else if ("reported".equals(fieldName)) {
                    deserializedRoutingTwinProperties.reported = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRoutingTwinProperties;
        });
    }
}
