// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.iothub.models.AccessRights;
import java.io.IOException;

/**
 * The properties of an IoT hub shared access policy.
 */
@Fluent
public final class SharedAccessSignatureAuthorizationRuleInner
    implements JsonSerializable<SharedAccessSignatureAuthorizationRuleInner> {
    /*
     * The name of the shared access policy.
     */
    private String keyName;

    /*
     * The primary key.
     */
    private String primaryKey;

    /*
     * The secondary key.
     */
    private String secondaryKey;

    /*
     * The permissions assigned to the shared access policy.
     */
    private AccessRights rights;

    /**
     * Creates an instance of SharedAccessSignatureAuthorizationRuleInner class.
     */
    public SharedAccessSignatureAuthorizationRuleInner() {
    }

    /**
     * Get the keyName property: The name of the shared access policy.
     * 
     * @return the keyName value.
     */
    public String keyName() {
        return this.keyName;
    }

    /**
     * Set the keyName property: The name of the shared access policy.
     * 
     * @param keyName the keyName value to set.
     * @return the SharedAccessSignatureAuthorizationRuleInner object itself.
     */
    public SharedAccessSignatureAuthorizationRuleInner withKeyName(String keyName) {
        this.keyName = keyName;
        return this;
    }

    /**
     * Get the primaryKey property: The primary key.
     * 
     * @return the primaryKey value.
     */
    public String primaryKey() {
        return this.primaryKey;
    }

    /**
     * Set the primaryKey property: The primary key.
     * 
     * @param primaryKey the primaryKey value to set.
     * @return the SharedAccessSignatureAuthorizationRuleInner object itself.
     */
    public SharedAccessSignatureAuthorizationRuleInner withPrimaryKey(String primaryKey) {
        this.primaryKey = primaryKey;
        return this;
    }

    /**
     * Get the secondaryKey property: The secondary key.
     * 
     * @return the secondaryKey value.
     */
    public String secondaryKey() {
        return this.secondaryKey;
    }

    /**
     * Set the secondaryKey property: The secondary key.
     * 
     * @param secondaryKey the secondaryKey value to set.
     * @return the SharedAccessSignatureAuthorizationRuleInner object itself.
     */
    public SharedAccessSignatureAuthorizationRuleInner withSecondaryKey(String secondaryKey) {
        this.secondaryKey = secondaryKey;
        return this;
    }

    /**
     * Get the rights property: The permissions assigned to the shared access policy.
     * 
     * @return the rights value.
     */
    public AccessRights rights() {
        return this.rights;
    }

    /**
     * Set the rights property: The permissions assigned to the shared access policy.
     * 
     * @param rights the rights value to set.
     * @return the SharedAccessSignatureAuthorizationRuleInner object itself.
     */
    public SharedAccessSignatureAuthorizationRuleInner withRights(AccessRights rights) {
        this.rights = rights;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keyName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property keyName in model SharedAccessSignatureAuthorizationRuleInner"));
        }
        if (rights() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property rights in model SharedAccessSignatureAuthorizationRuleInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SharedAccessSignatureAuthorizationRuleInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyName", this.keyName);
        jsonWriter.writeStringField("rights", this.rights == null ? null : this.rights.toString());
        jsonWriter.writeStringField("primaryKey", this.primaryKey);
        jsonWriter.writeStringField("secondaryKey", this.secondaryKey);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SharedAccessSignatureAuthorizationRuleInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SharedAccessSignatureAuthorizationRuleInner if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SharedAccessSignatureAuthorizationRuleInner.
     */
    public static SharedAccessSignatureAuthorizationRuleInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SharedAccessSignatureAuthorizationRuleInner deserializedSharedAccessSignatureAuthorizationRuleInner
                = new SharedAccessSignatureAuthorizationRuleInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyName".equals(fieldName)) {
                    deserializedSharedAccessSignatureAuthorizationRuleInner.keyName = reader.getString();
                } else if ("rights".equals(fieldName)) {
                    deserializedSharedAccessSignatureAuthorizationRuleInner.rights
                        = AccessRights.fromString(reader.getString());
                } else if ("primaryKey".equals(fieldName)) {
                    deserializedSharedAccessSignatureAuthorizationRuleInner.primaryKey = reader.getString();
                } else if ("secondaryKey".equals(fieldName)) {
                    deserializedSharedAccessSignatureAuthorizationRuleInner.secondaryKey = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSharedAccessSignatureAuthorizationRuleInner;
        });
    }
}
