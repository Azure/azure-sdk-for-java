// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Use to provide failover region when requesting manual Failover for a hub.
 */
@Fluent
public final class FailoverInput implements JsonSerializable<FailoverInput> {
    /*
     * Region the hub will be failed over to
     */
    private String failoverRegion;

    /**
     * Creates an instance of FailoverInput class.
     */
    public FailoverInput() {
    }

    /**
     * Get the failoverRegion property: Region the hub will be failed over to.
     * 
     * @return the failoverRegion value.
     */
    public String failoverRegion() {
        return this.failoverRegion;
    }

    /**
     * Set the failoverRegion property: Region the hub will be failed over to.
     * 
     * @param failoverRegion the failoverRegion value to set.
     * @return the FailoverInput object itself.
     */
    public FailoverInput withFailoverRegion(String failoverRegion) {
        this.failoverRegion = failoverRegion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (failoverRegion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property failoverRegion in model FailoverInput"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FailoverInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("failoverRegion", this.failoverRegion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FailoverInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FailoverInput if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FailoverInput.
     */
    public static FailoverInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FailoverInput deserializedFailoverInput = new FailoverInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("failoverRegion".equals(fieldName)) {
                    deserializedFailoverInput.failoverRegion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFailoverInput;
        });
    }
}
