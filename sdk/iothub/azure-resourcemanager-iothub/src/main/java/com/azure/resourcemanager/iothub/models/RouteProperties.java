// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties of a routing rule that your IoT hub uses to route messages to endpoints.
 */
@Fluent
public final class RouteProperties implements JsonSerializable<RouteProperties> {
    /*
     * The name of the route. The name can only include alphanumeric characters, periods, underscores, hyphens, has a
     * maximum length of 64 characters, and must be unique.
     */
    private String name;

    /*
     * The source that the routing rule is to be applied to, such as DeviceMessages.
     */
    private RoutingSource source;

    /*
     * The condition that is evaluated to apply the routing rule. If no condition is provided, it evaluates to true by
     * default. For grammar, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language
     */
    private String condition;

    /*
     * The list of endpoints to which messages that satisfy the condition are routed. Currently only one endpoint is
     * allowed.
     */
    private List<String> endpointNames;

    /*
     * Used to specify whether a route is enabled.
     */
    private boolean isEnabled;

    /**
     * Creates an instance of RouteProperties class.
     */
    public RouteProperties() {
    }

    /**
     * Get the name property: The name of the route. The name can only include alphanumeric characters, periods,
     * underscores, hyphens, has a maximum length of 64 characters, and must be unique.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the route. The name can only include alphanumeric characters, periods,
     * underscores, hyphens, has a maximum length of 64 characters, and must be unique.
     * 
     * @param name the name value to set.
     * @return the RouteProperties object itself.
     */
    public RouteProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the source property: The source that the routing rule is to be applied to, such as DeviceMessages.
     * 
     * @return the source value.
     */
    public RoutingSource source() {
        return this.source;
    }

    /**
     * Set the source property: The source that the routing rule is to be applied to, such as DeviceMessages.
     * 
     * @param source the source value to set.
     * @return the RouteProperties object itself.
     */
    public RouteProperties withSource(RoutingSource source) {
        this.source = source;
        return this;
    }

    /**
     * Get the condition property: The condition that is evaluated to apply the routing rule. If no condition is
     * provided, it evaluates to true by default. For grammar, see:
     * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
     * 
     * @return the condition value.
     */
    public String condition() {
        return this.condition;
    }

    /**
     * Set the condition property: The condition that is evaluated to apply the routing rule. If no condition is
     * provided, it evaluates to true by default. For grammar, see:
     * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
     * 
     * @param condition the condition value to set.
     * @return the RouteProperties object itself.
     */
    public RouteProperties withCondition(String condition) {
        this.condition = condition;
        return this;
    }

    /**
     * Get the endpointNames property: The list of endpoints to which messages that satisfy the condition are routed.
     * Currently only one endpoint is allowed.
     * 
     * @return the endpointNames value.
     */
    public List<String> endpointNames() {
        return this.endpointNames;
    }

    /**
     * Set the endpointNames property: The list of endpoints to which messages that satisfy the condition are routed.
     * Currently only one endpoint is allowed.
     * 
     * @param endpointNames the endpointNames value to set.
     * @return the RouteProperties object itself.
     */
    public RouteProperties withEndpointNames(List<String> endpointNames) {
        this.endpointNames = endpointNames;
        return this;
    }

    /**
     * Get the isEnabled property: Used to specify whether a route is enabled.
     * 
     * @return the isEnabled value.
     */
    public boolean isEnabled() {
        return this.isEnabled;
    }

    /**
     * Set the isEnabled property: Used to specify whether a route is enabled.
     * 
     * @param isEnabled the isEnabled value to set.
     * @return the RouteProperties object itself.
     */
    public RouteProperties withIsEnabled(boolean isEnabled) {
        this.isEnabled = isEnabled;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model RouteProperties"));
        }
        if (source() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property source in model RouteProperties"));
        }
        if (endpointNames() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property endpointNames in model RouteProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RouteProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("source", this.source == null ? null : this.source.toString());
        jsonWriter.writeArrayField("endpointNames", this.endpointNames,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("isEnabled", this.isEnabled);
        jsonWriter.writeStringField("condition", this.condition);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RouteProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RouteProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RouteProperties.
     */
    public static RouteProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RouteProperties deserializedRouteProperties = new RouteProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedRouteProperties.name = reader.getString();
                } else if ("source".equals(fieldName)) {
                    deserializedRouteProperties.source = RoutingSource.fromString(reader.getString());
                } else if ("endpointNames".equals(fieldName)) {
                    List<String> endpointNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedRouteProperties.endpointNames = endpointNames;
                } else if ("isEnabled".equals(fieldName)) {
                    deserializedRouteProperties.isEnabled = reader.getBoolean();
                } else if ("condition".equals(fieldName)) {
                    deserializedRouteProperties.condition = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRouteProperties;
        });
    }
}
