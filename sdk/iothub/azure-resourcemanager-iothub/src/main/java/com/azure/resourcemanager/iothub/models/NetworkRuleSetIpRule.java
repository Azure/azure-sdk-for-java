// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * IP Rule to be applied as part of Network Rule Set.
 */
@Fluent
public final class NetworkRuleSetIpRule implements JsonSerializable<NetworkRuleSetIpRule> {
    /*
     * Name of the IP filter rule.
     */
    private String filterName;

    /*
     * IP Filter Action
     */
    private NetworkRuleIpAction action;

    /*
     * A string that contains the IP address range in CIDR notation for the rule.
     */
    private String ipMask;

    /**
     * Creates an instance of NetworkRuleSetIpRule class.
     */
    public NetworkRuleSetIpRule() {
    }

    /**
     * Get the filterName property: Name of the IP filter rule.
     * 
     * @return the filterName value.
     */
    public String filterName() {
        return this.filterName;
    }

    /**
     * Set the filterName property: Name of the IP filter rule.
     * 
     * @param filterName the filterName value to set.
     * @return the NetworkRuleSetIpRule object itself.
     */
    public NetworkRuleSetIpRule withFilterName(String filterName) {
        this.filterName = filterName;
        return this;
    }

    /**
     * Get the action property: IP Filter Action.
     * 
     * @return the action value.
     */
    public NetworkRuleIpAction action() {
        return this.action;
    }

    /**
     * Set the action property: IP Filter Action.
     * 
     * @param action the action value to set.
     * @return the NetworkRuleSetIpRule object itself.
     */
    public NetworkRuleSetIpRule withAction(NetworkRuleIpAction action) {
        this.action = action;
        return this;
    }

    /**
     * Get the ipMask property: A string that contains the IP address range in CIDR notation for the rule.
     * 
     * @return the ipMask value.
     */
    public String ipMask() {
        return this.ipMask;
    }

    /**
     * Set the ipMask property: A string that contains the IP address range in CIDR notation for the rule.
     * 
     * @param ipMask the ipMask value to set.
     * @return the NetworkRuleSetIpRule object itself.
     */
    public NetworkRuleSetIpRule withIpMask(String ipMask) {
        this.ipMask = ipMask;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (filterName() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property filterName in model NetworkRuleSetIpRule"));
        }
        if (ipMask() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property ipMask in model NetworkRuleSetIpRule"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NetworkRuleSetIpRule.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("filterName", this.filterName);
        jsonWriter.writeStringField("ipMask", this.ipMask);
        jsonWriter.writeStringField("action", this.action == null ? null : this.action.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkRuleSetIpRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkRuleSetIpRule if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NetworkRuleSetIpRule.
     */
    public static NetworkRuleSetIpRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkRuleSetIpRule deserializedNetworkRuleSetIpRule = new NetworkRuleSetIpRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("filterName".equals(fieldName)) {
                    deserializedNetworkRuleSetIpRule.filterName = reader.getString();
                } else if ("ipMask".equals(fieldName)) {
                    deserializedNetworkRuleSetIpRule.ipMask = reader.getString();
                } else if ("action".equals(fieldName)) {
                    deserializedNetworkRuleSetIpRule.action = NetworkRuleIpAction.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkRuleSetIpRule;
        });
    }
}
