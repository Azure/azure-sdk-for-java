// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Use to provide parameters when requesting an export of all devices in the IoT hub.
 */
@Fluent
public final class ExportDevicesRequest implements JsonSerializable<ExportDevicesRequest> {
    /*
     * The export blob container URI.
     */
    private String exportBlobContainerUri;

    /*
     * The value indicating whether keys should be excluded during export.
     */
    private boolean excludeKeys;

    /*
     * The name of the blob that will be created in the provided output blob container. This blob will contain the
     * exported device registry information for the IoT Hub.
     */
    private String exportBlobName;

    /*
     * Specifies authentication type being used for connecting to the storage account.
     */
    private AuthenticationType authenticationType;

    /*
     * Managed identity properties of storage endpoint for export devices.
     */
    private ManagedIdentity identity;

    /*
     * The value indicating whether configurations should be exported.
     */
    private Boolean includeConfigurations;

    /*
     * The name of the blob that will be created in the provided output blob container. This blob will contain the
     * exported configurations for the Iot Hub.
     */
    private String configurationsBlobName;

    /**
     * Creates an instance of ExportDevicesRequest class.
     */
    public ExportDevicesRequest() {
    }

    /**
     * Get the exportBlobContainerUri property: The export blob container URI.
     * 
     * @return the exportBlobContainerUri value.
     */
    public String exportBlobContainerUri() {
        return this.exportBlobContainerUri;
    }

    /**
     * Set the exportBlobContainerUri property: The export blob container URI.
     * 
     * @param exportBlobContainerUri the exportBlobContainerUri value to set.
     * @return the ExportDevicesRequest object itself.
     */
    public ExportDevicesRequest withExportBlobContainerUri(String exportBlobContainerUri) {
        this.exportBlobContainerUri = exportBlobContainerUri;
        return this;
    }

    /**
     * Get the excludeKeys property: The value indicating whether keys should be excluded during export.
     * 
     * @return the excludeKeys value.
     */
    public boolean excludeKeys() {
        return this.excludeKeys;
    }

    /**
     * Set the excludeKeys property: The value indicating whether keys should be excluded during export.
     * 
     * @param excludeKeys the excludeKeys value to set.
     * @return the ExportDevicesRequest object itself.
     */
    public ExportDevicesRequest withExcludeKeys(boolean excludeKeys) {
        this.excludeKeys = excludeKeys;
        return this;
    }

    /**
     * Get the exportBlobName property: The name of the blob that will be created in the provided output blob container.
     * This blob will contain the exported device registry information for the IoT Hub.
     * 
     * @return the exportBlobName value.
     */
    public String exportBlobName() {
        return this.exportBlobName;
    }

    /**
     * Set the exportBlobName property: The name of the blob that will be created in the provided output blob container.
     * This blob will contain the exported device registry information for the IoT Hub.
     * 
     * @param exportBlobName the exportBlobName value to set.
     * @return the ExportDevicesRequest object itself.
     */
    public ExportDevicesRequest withExportBlobName(String exportBlobName) {
        this.exportBlobName = exportBlobName;
        return this;
    }

    /**
     * Get the authenticationType property: Specifies authentication type being used for connecting to the storage
     * account.
     * 
     * @return the authenticationType value.
     */
    public AuthenticationType authenticationType() {
        return this.authenticationType;
    }

    /**
     * Set the authenticationType property: Specifies authentication type being used for connecting to the storage
     * account.
     * 
     * @param authenticationType the authenticationType value to set.
     * @return the ExportDevicesRequest object itself.
     */
    public ExportDevicesRequest withAuthenticationType(AuthenticationType authenticationType) {
        this.authenticationType = authenticationType;
        return this;
    }

    /**
     * Get the identity property: Managed identity properties of storage endpoint for export devices.
     * 
     * @return the identity value.
     */
    public ManagedIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Managed identity properties of storage endpoint for export devices.
     * 
     * @param identity the identity value to set.
     * @return the ExportDevicesRequest object itself.
     */
    public ExportDevicesRequest withIdentity(ManagedIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the includeConfigurations property: The value indicating whether configurations should be exported.
     * 
     * @return the includeConfigurations value.
     */
    public Boolean includeConfigurations() {
        return this.includeConfigurations;
    }

    /**
     * Set the includeConfigurations property: The value indicating whether configurations should be exported.
     * 
     * @param includeConfigurations the includeConfigurations value to set.
     * @return the ExportDevicesRequest object itself.
     */
    public ExportDevicesRequest withIncludeConfigurations(Boolean includeConfigurations) {
        this.includeConfigurations = includeConfigurations;
        return this;
    }

    /**
     * Get the configurationsBlobName property: The name of the blob that will be created in the provided output blob
     * container. This blob will contain the exported configurations for the Iot Hub.
     * 
     * @return the configurationsBlobName value.
     */
    public String configurationsBlobName() {
        return this.configurationsBlobName;
    }

    /**
     * Set the configurationsBlobName property: The name of the blob that will be created in the provided output blob
     * container. This blob will contain the exported configurations for the Iot Hub.
     * 
     * @param configurationsBlobName the configurationsBlobName value to set.
     * @return the ExportDevicesRequest object itself.
     */
    public ExportDevicesRequest withConfigurationsBlobName(String configurationsBlobName) {
        this.configurationsBlobName = configurationsBlobName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (exportBlobContainerUri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property exportBlobContainerUri in model ExportDevicesRequest"));
        }
        if (identity() != null) {
            identity().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExportDevicesRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("exportBlobContainerUri", this.exportBlobContainerUri);
        jsonWriter.writeBooleanField("excludeKeys", this.excludeKeys);
        jsonWriter.writeStringField("exportBlobName", this.exportBlobName);
        jsonWriter.writeStringField("authenticationType",
            this.authenticationType == null ? null : this.authenticationType.toString());
        jsonWriter.writeJsonField("identity", this.identity);
        jsonWriter.writeBooleanField("includeConfigurations", this.includeConfigurations);
        jsonWriter.writeStringField("configurationsBlobName", this.configurationsBlobName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExportDevicesRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExportDevicesRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExportDevicesRequest.
     */
    public static ExportDevicesRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExportDevicesRequest deserializedExportDevicesRequest = new ExportDevicesRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("exportBlobContainerUri".equals(fieldName)) {
                    deserializedExportDevicesRequest.exportBlobContainerUri = reader.getString();
                } else if ("excludeKeys".equals(fieldName)) {
                    deserializedExportDevicesRequest.excludeKeys = reader.getBoolean();
                } else if ("exportBlobName".equals(fieldName)) {
                    deserializedExportDevicesRequest.exportBlobName = reader.getString();
                } else if ("authenticationType".equals(fieldName)) {
                    deserializedExportDevicesRequest.authenticationType
                        = AuthenticationType.fromString(reader.getString());
                } else if ("identity".equals(fieldName)) {
                    deserializedExportDevicesRequest.identity = ManagedIdentity.fromJson(reader);
                } else if ("includeConfigurations".equals(fieldName)) {
                    deserializedExportDevicesRequest.includeConfigurations = reader.getNullable(JsonReader::getBoolean);
                } else if ("configurationsBlobName".equals(fieldName)) {
                    deserializedExportDevicesRequest.configurationsBlobName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExportDevicesRequest;
        });
    }
}
