// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * This property store root certificate related information.
 */
@Fluent
public final class RootCertificateProperties implements JsonSerializable<RootCertificateProperties> {
    /*
     * This property when set to true, hub will use G2 cert; while it's set to false, hub uses Baltimore Cert.
     */
    private Boolean enableRootCertificateV2;

    /*
     * the last update time to root certificate flag.
     */
    private OffsetDateTime lastUpdatedTimeUtc;

    /**
     * Creates an instance of RootCertificateProperties class.
     */
    public RootCertificateProperties() {
    }

    /**
     * Get the enableRootCertificateV2 property: This property when set to true, hub will use G2 cert; while it's set to
     * false, hub uses Baltimore Cert.
     * 
     * @return the enableRootCertificateV2 value.
     */
    public Boolean enableRootCertificateV2() {
        return this.enableRootCertificateV2;
    }

    /**
     * Set the enableRootCertificateV2 property: This property when set to true, hub will use G2 cert; while it's set to
     * false, hub uses Baltimore Cert.
     * 
     * @param enableRootCertificateV2 the enableRootCertificateV2 value to set.
     * @return the RootCertificateProperties object itself.
     */
    public RootCertificateProperties withEnableRootCertificateV2(Boolean enableRootCertificateV2) {
        this.enableRootCertificateV2 = enableRootCertificateV2;
        return this;
    }

    /**
     * Get the lastUpdatedTimeUtc property: the last update time to root certificate flag.
     * 
     * @return the lastUpdatedTimeUtc value.
     */
    public OffsetDateTime lastUpdatedTimeUtc() {
        return this.lastUpdatedTimeUtc;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enableRootCertificateV2", this.enableRootCertificateV2);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RootCertificateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RootCertificateProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RootCertificateProperties.
     */
    public static RootCertificateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RootCertificateProperties deserializedRootCertificateProperties = new RootCertificateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enableRootCertificateV2".equals(fieldName)) {
                    deserializedRootCertificateProperties.enableRootCertificateV2
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("lastUpdatedTimeUtc".equals(fieldName)) {
                    deserializedRootCertificateProperties.lastUpdatedTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRootCertificateProperties;
        });
    }
}
