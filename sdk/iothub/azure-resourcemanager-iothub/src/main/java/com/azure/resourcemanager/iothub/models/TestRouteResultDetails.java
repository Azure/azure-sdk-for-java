// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iothub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Detailed result of testing a route.
 */
@Fluent
public final class TestRouteResultDetails implements JsonSerializable<TestRouteResultDetails> {
    /*
     * JSON-serialized list of route compilation errors
     */
    private List<RouteCompilationError> compilationErrors;

    /**
     * Creates an instance of TestRouteResultDetails class.
     */
    public TestRouteResultDetails() {
    }

    /**
     * Get the compilationErrors property: JSON-serialized list of route compilation errors.
     * 
     * @return the compilationErrors value.
     */
    public List<RouteCompilationError> compilationErrors() {
        return this.compilationErrors;
    }

    /**
     * Set the compilationErrors property: JSON-serialized list of route compilation errors.
     * 
     * @param compilationErrors the compilationErrors value to set.
     * @return the TestRouteResultDetails object itself.
     */
    public TestRouteResultDetails withCompilationErrors(List<RouteCompilationError> compilationErrors) {
        this.compilationErrors = compilationErrors;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (compilationErrors() != null) {
            compilationErrors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("compilationErrors", this.compilationErrors,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestRouteResultDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestRouteResultDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TestRouteResultDetails.
     */
    public static TestRouteResultDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TestRouteResultDetails deserializedTestRouteResultDetails = new TestRouteResultDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("compilationErrors".equals(fieldName)) {
                    List<RouteCompilationError> compilationErrors
                        = reader.readArray(reader1 -> RouteCompilationError.fromJson(reader1));
                    deserializedTestRouteResultDetails.compilationErrors = compilationErrors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTestRouteResultDetails;
        });
    }
}
