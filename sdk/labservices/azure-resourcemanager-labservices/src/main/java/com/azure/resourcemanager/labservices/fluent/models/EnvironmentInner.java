// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.labservices.models.LatestOperationResult;
import com.azure.resourcemanager.labservices.models.NetworkInterface;
import com.azure.resourcemanager.labservices.models.ResourceSet;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Map;

/** Represents an environment instance. */
@JsonFlatten
@Fluent
public class EnvironmentInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(EnvironmentInner.class);

    /*
     * The set of a VM and the setting id it was created for
     */
    @JsonProperty(value = "properties.resourceSets")
    private ResourceSet resourceSets;

    /*
     * The AAD object Id of the user who has claimed the environment
     */
    @JsonProperty(value = "properties.claimedByUserObjectId", access = JsonProperty.Access.WRITE_ONLY)
    private String claimedByUserObjectId;

    /*
     * The user principal Id of the user who has claimed the environment
     */
    @JsonProperty(value = "properties.claimedByUserPrincipalId", access = JsonProperty.Access.WRITE_ONLY)
    private String claimedByUserPrincipalId;

    /*
     * The name or email address of the user who has claimed the environment
     */
    @JsonProperty(value = "properties.claimedByUserName", access = JsonProperty.Access.WRITE_ONLY)
    private String claimedByUsername;

    /*
     * Is the environment claimed or not
     */
    @JsonProperty(value = "properties.isClaimed", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean isClaimed;

    /*
     * Last known power state of the environment
     */
    @JsonProperty(value = "properties.lastKnownPowerState", access = JsonProperty.Access.WRITE_ONLY)
    private String lastKnownPowerState;

    /*
     * Network details of the environment
     */
    @JsonProperty(value = "properties.networkInterface", access = JsonProperty.Access.WRITE_ONLY)
    private NetworkInterface networkInterface;

    /*
     * How long the environment has been used by a lab user
     */
    @JsonProperty(value = "properties.totalUsage", access = JsonProperty.Access.WRITE_ONLY)
    private Duration totalUsage;

    /*
     * When the password was last reset on the environment.
     */
    @JsonProperty(value = "properties.passwordLastReset", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime passwordLastReset;

    /*
     * The provisioning status of the resource.
     */
    @JsonProperty(value = "properties.provisioningState")
    private String provisioningState;

    /*
     * The unique immutable identifier of a resource (Guid).
     */
    @JsonProperty(value = "properties.uniqueIdentifier")
    private String uniqueIdentifier;

    /*
     * The details of the latest operation. ex: status, error
     */
    @JsonProperty(value = "properties.latestOperationResult", access = JsonProperty.Access.WRITE_ONLY)
    private LatestOperationResult latestOperationResult;

    /**
     * Get the resourceSets property: The set of a VM and the setting id it was created for.
     *
     * @return the resourceSets value.
     */
    public ResourceSet resourceSets() {
        return this.resourceSets;
    }

    /**
     * Set the resourceSets property: The set of a VM and the setting id it was created for.
     *
     * @param resourceSets the resourceSets value to set.
     * @return the EnvironmentInner object itself.
     */
    public EnvironmentInner withResourceSets(ResourceSet resourceSets) {
        this.resourceSets = resourceSets;
        return this;
    }

    /**
     * Get the claimedByUserObjectId property: The AAD object Id of the user who has claimed the environment.
     *
     * @return the claimedByUserObjectId value.
     */
    public String claimedByUserObjectId() {
        return this.claimedByUserObjectId;
    }

    /**
     * Get the claimedByUserPrincipalId property: The user principal Id of the user who has claimed the environment.
     *
     * @return the claimedByUserPrincipalId value.
     */
    public String claimedByUserPrincipalId() {
        return this.claimedByUserPrincipalId;
    }

    /**
     * Get the claimedByUsername property: The name or email address of the user who has claimed the environment.
     *
     * @return the claimedByUsername value.
     */
    public String claimedByUsername() {
        return this.claimedByUsername;
    }

    /**
     * Get the isClaimed property: Is the environment claimed or not.
     *
     * @return the isClaimed value.
     */
    public Boolean isClaimed() {
        return this.isClaimed;
    }

    /**
     * Get the lastKnownPowerState property: Last known power state of the environment.
     *
     * @return the lastKnownPowerState value.
     */
    public String lastKnownPowerState() {
        return this.lastKnownPowerState;
    }

    /**
     * Get the networkInterface property: Network details of the environment.
     *
     * @return the networkInterface value.
     */
    public NetworkInterface networkInterface() {
        return this.networkInterface;
    }

    /**
     * Get the totalUsage property: How long the environment has been used by a lab user.
     *
     * @return the totalUsage value.
     */
    public Duration totalUsage() {
        return this.totalUsage;
    }

    /**
     * Get the passwordLastReset property: When the password was last reset on the environment.
     *
     * @return the passwordLastReset value.
     */
    public OffsetDateTime passwordLastReset() {
        return this.passwordLastReset;
    }

    /**
     * Get the provisioningState property: The provisioning status of the resource.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The provisioning status of the resource.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the EnvironmentInner object itself.
     */
    public EnvironmentInner withProvisioningState(String provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @return the uniqueIdentifier value.
     */
    public String uniqueIdentifier() {
        return this.uniqueIdentifier;
    }

    /**
     * Set the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @param uniqueIdentifier the uniqueIdentifier value to set.
     * @return the EnvironmentInner object itself.
     */
    public EnvironmentInner withUniqueIdentifier(String uniqueIdentifier) {
        this.uniqueIdentifier = uniqueIdentifier;
        return this;
    }

    /**
     * Get the latestOperationResult property: The details of the latest operation. ex: status, error.
     *
     * @return the latestOperationResult value.
     */
    public LatestOperationResult latestOperationResult() {
        return this.latestOperationResult;
    }

    /** {@inheritDoc} */
    @Override
    public EnvironmentInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public EnvironmentInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceSets() != null) {
            resourceSets().validate();
        }
        if (networkInterface() != null) {
            networkInterface().validate();
        }
        if (latestOperationResult() != null) {
            latestOperationResult().validate();
        }
    }
}
