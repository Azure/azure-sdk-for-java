// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The lab security profile.
 */
@Fluent
public final class SecurityProfile implements JsonSerializable<SecurityProfile> {
    /*
     * The registration code for the lab.
     */
    private String registrationCode;

    /*
     * Whether any user or only specified users can register to a lab.
     */
    private EnableState openAccess;

    /**
     * Creates an instance of SecurityProfile class.
     */
    public SecurityProfile() {
    }

    /**
     * Get the registrationCode property: The registration code for the lab.
     * 
     * @return the registrationCode value.
     */
    public String registrationCode() {
        return this.registrationCode;
    }

    /**
     * Get the openAccess property: Whether any user or only specified users can register to a lab.
     * 
     * @return the openAccess value.
     */
    public EnableState openAccess() {
        return this.openAccess;
    }

    /**
     * Set the openAccess property: Whether any user or only specified users can register to a lab.
     * 
     * @param openAccess the openAccess value to set.
     * @return the SecurityProfile object itself.
     */
    public SecurityProfile withOpenAccess(EnableState openAccess) {
        this.openAccess = openAccess;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("openAccess", this.openAccess == null ? null : this.openAccess.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecurityProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecurityProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SecurityProfile.
     */
    public static SecurityProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecurityProfile deserializedSecurityProfile = new SecurityProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("registrationCode".equals(fieldName)) {
                    deserializedSecurityProfile.registrationCode = reader.getString();
                } else if ("openAccess".equals(fieldName)) {
                    deserializedSecurityProfile.openAccess = EnableState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecurityProfile;
        });
    }
}
