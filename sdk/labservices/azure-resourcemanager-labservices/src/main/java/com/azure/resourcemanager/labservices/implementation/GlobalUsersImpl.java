// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.labservices.fluent.GlobalUsersClient;
import com.azure.resourcemanager.labservices.fluent.models.GetEnvironmentResponseInner;
import com.azure.resourcemanager.labservices.fluent.models.GetPersonalPreferencesResponseInner;
import com.azure.resourcemanager.labservices.fluent.models.ListEnvironmentsResponseInner;
import com.azure.resourcemanager.labservices.fluent.models.ListLabsResponseInner;
import com.azure.resourcemanager.labservices.fluent.models.OperationBatchStatusResponseInner;
import com.azure.resourcemanager.labservices.fluent.models.OperationStatusResponseInner;
import com.azure.resourcemanager.labservices.models.EnvironmentOperationsPayload;
import com.azure.resourcemanager.labservices.models.GetEnvironmentResponse;
import com.azure.resourcemanager.labservices.models.GetPersonalPreferencesResponse;
import com.azure.resourcemanager.labservices.models.GlobalUsers;
import com.azure.resourcemanager.labservices.models.ListEnvironmentsPayload;
import com.azure.resourcemanager.labservices.models.ListEnvironmentsResponse;
import com.azure.resourcemanager.labservices.models.ListLabsResponse;
import com.azure.resourcemanager.labservices.models.OperationBatchStatusPayload;
import com.azure.resourcemanager.labservices.models.OperationBatchStatusResponse;
import com.azure.resourcemanager.labservices.models.OperationStatusPayload;
import com.azure.resourcemanager.labservices.models.OperationStatusResponse;
import com.azure.resourcemanager.labservices.models.PersonalPreferencesOperationsPayload;
import com.azure.resourcemanager.labservices.models.RegisterPayload;
import com.azure.resourcemanager.labservices.models.ResetPasswordPayload;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class GlobalUsersImpl implements GlobalUsers {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(GlobalUsersImpl.class);

    private final GlobalUsersClient innerClient;

    private final com.azure.resourcemanager.labservices.ManagedLabsManager serviceManager;

    public GlobalUsersImpl(
        GlobalUsersClient innerClient, com.azure.resourcemanager.labservices.ManagedLabsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public GetEnvironmentResponse getEnvironment(
        String username, EnvironmentOperationsPayload environmentOperationsPayload) {
        GetEnvironmentResponseInner inner = this.serviceClient().getEnvironment(username, environmentOperationsPayload);
        if (inner != null) {
            return new GetEnvironmentResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GetEnvironmentResponse> getEnvironmentWithResponse(
        String username, EnvironmentOperationsPayload environmentOperationsPayload, String expand, Context context) {
        Response<GetEnvironmentResponseInner> inner =
            this.serviceClient().getEnvironmentWithResponse(username, environmentOperationsPayload, expand, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new GetEnvironmentResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public OperationBatchStatusResponse getOperationBatchStatus(
        String username, OperationBatchStatusPayload operationBatchStatusPayload) {
        OperationBatchStatusResponseInner inner =
            this.serviceClient().getOperationBatchStatus(username, operationBatchStatusPayload);
        if (inner != null) {
            return new OperationBatchStatusResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<OperationBatchStatusResponse> getOperationBatchStatusWithResponse(
        String username, OperationBatchStatusPayload operationBatchStatusPayload, Context context) {
        Response<OperationBatchStatusResponseInner> inner =
            this.serviceClient().getOperationBatchStatusWithResponse(username, operationBatchStatusPayload, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new OperationBatchStatusResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public OperationStatusResponse getOperationStatus(String username, OperationStatusPayload operationStatusPayload) {
        OperationStatusResponseInner inner = this.serviceClient().getOperationStatus(username, operationStatusPayload);
        if (inner != null) {
            return new OperationStatusResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<OperationStatusResponse> getOperationStatusWithResponse(
        String username, OperationStatusPayload operationStatusPayload, Context context) {
        Response<OperationStatusResponseInner> inner =
            this.serviceClient().getOperationStatusWithResponse(username, operationStatusPayload, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new OperationStatusResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GetPersonalPreferencesResponse getPersonalPreferences(
        String username, PersonalPreferencesOperationsPayload personalPreferencesOperationsPayload) {
        GetPersonalPreferencesResponseInner inner =
            this.serviceClient().getPersonalPreferences(username, personalPreferencesOperationsPayload);
        if (inner != null) {
            return new GetPersonalPreferencesResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GetPersonalPreferencesResponse> getPersonalPreferencesWithResponse(
        String username, PersonalPreferencesOperationsPayload personalPreferencesOperationsPayload, Context context) {
        Response<GetPersonalPreferencesResponseInner> inner =
            this
                .serviceClient()
                .getPersonalPreferencesWithResponse(username, personalPreferencesOperationsPayload, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new GetPersonalPreferencesResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ListEnvironmentsResponse listEnvironments(String username, ListEnvironmentsPayload listEnvironmentsPayload) {
        ListEnvironmentsResponseInner inner = this.serviceClient().listEnvironments(username, listEnvironmentsPayload);
        if (inner != null) {
            return new ListEnvironmentsResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ListEnvironmentsResponse> listEnvironmentsWithResponse(
        String username, ListEnvironmentsPayload listEnvironmentsPayload, Context context) {
        Response<ListEnvironmentsResponseInner> inner =
            this.serviceClient().listEnvironmentsWithResponse(username, listEnvironmentsPayload, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ListEnvironmentsResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ListLabsResponse listLabs(String username) {
        ListLabsResponseInner inner = this.serviceClient().listLabs(username);
        if (inner != null) {
            return new ListLabsResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ListLabsResponse> listLabsWithResponse(String username, Context context) {
        Response<ListLabsResponseInner> inner = this.serviceClient().listLabsWithResponse(username, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ListLabsResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void register(String username, RegisterPayload registerPayload) {
        this.serviceClient().register(username, registerPayload);
    }

    public Response<Void> registerWithResponse(String username, RegisterPayload registerPayload, Context context) {
        return this.serviceClient().registerWithResponse(username, registerPayload, context);
    }

    public void resetPassword(String username, ResetPasswordPayload resetPasswordPayload) {
        this.serviceClient().resetPassword(username, resetPasswordPayload);
    }

    public void resetPassword(String username, ResetPasswordPayload resetPasswordPayload, Context context) {
        this.serviceClient().resetPassword(username, resetPasswordPayload, context);
    }

    public void startEnvironment(String username, EnvironmentOperationsPayload environmentOperationsPayload) {
        this.serviceClient().startEnvironment(username, environmentOperationsPayload);
    }

    public void startEnvironment(
        String username, EnvironmentOperationsPayload environmentOperationsPayload, Context context) {
        this.serviceClient().startEnvironment(username, environmentOperationsPayload, context);
    }

    public void stopEnvironment(String username, EnvironmentOperationsPayload environmentOperationsPayload) {
        this.serviceClient().stopEnvironment(username, environmentOperationsPayload);
    }

    public void stopEnvironment(
        String username, EnvironmentOperationsPayload environmentOperationsPayload, Context context) {
        this.serviceClient().stopEnvironment(username, environmentOperationsPayload, context);
    }

    private GlobalUsersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.labservices.ManagedLabsManager manager() {
        return this.serviceManager;
    }
}
