// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Support contact information and instructions.
 */
@Fluent
public final class SupportInfo implements JsonSerializable<SupportInfo> {
    /*
     * Support web address.
     */
    private String url;

    /*
     * Support contact email address.
     */
    private String email;

    /*
     * Support contact phone number.
     */
    private String phone;

    /*
     * Support instructions.
     */
    private String instructions;

    /**
     * Creates an instance of SupportInfo class.
     */
    public SupportInfo() {
    }

    /**
     * Get the url property: Support web address.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Set the url property: Support web address.
     * 
     * @param url the url value to set.
     * @return the SupportInfo object itself.
     */
    public SupportInfo withUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Get the email property: Support contact email address.
     * 
     * @return the email value.
     */
    public String email() {
        return this.email;
    }

    /**
     * Set the email property: Support contact email address.
     * 
     * @param email the email value to set.
     * @return the SupportInfo object itself.
     */
    public SupportInfo withEmail(String email) {
        this.email = email;
        return this;
    }

    /**
     * Get the phone property: Support contact phone number.
     * 
     * @return the phone value.
     */
    public String phone() {
        return this.phone;
    }

    /**
     * Set the phone property: Support contact phone number.
     * 
     * @param phone the phone value to set.
     * @return the SupportInfo object itself.
     */
    public SupportInfo withPhone(String phone) {
        this.phone = phone;
        return this;
    }

    /**
     * Get the instructions property: Support instructions.
     * 
     * @return the instructions value.
     */
    public String instructions() {
        return this.instructions;
    }

    /**
     * Set the instructions property: Support instructions.
     * 
     * @param instructions the instructions value to set.
     * @return the SupportInfo object itself.
     */
    public SupportInfo withInstructions(String instructions) {
        this.instructions = instructions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("email", this.email);
        jsonWriter.writeStringField("phone", this.phone);
        jsonWriter.writeStringField("instructions", this.instructions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SupportInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SupportInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SupportInfo.
     */
    public static SupportInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SupportInfo deserializedSupportInfo = new SupportInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("url".equals(fieldName)) {
                    deserializedSupportInfo.url = reader.getString();
                } else if ("email".equals(fieldName)) {
                    deserializedSupportInfo.email = reader.getString();
                } else if ("phone".equals(fieldName)) {
                    deserializedSupportInfo.phone = reader.getString();
                } else if ("instructions".equals(fieldName)) {
                    deserializedSupportInfo.instructions = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSupportInfo;
        });
    }
}
