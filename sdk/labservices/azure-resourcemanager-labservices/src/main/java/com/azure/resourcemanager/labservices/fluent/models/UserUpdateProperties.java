// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;

/**
 * User resource properties used for updates.
 */
@Fluent
public class UserUpdateProperties implements JsonSerializable<UserUpdateProperties> {
    /*
     * The amount of usage quota time the user gets in addition to the lab usage quota.
     */
    private Duration additionalUsageQuota;

    /**
     * Creates an instance of UserUpdateProperties class.
     */
    public UserUpdateProperties() {
    }

    /**
     * Get the additionalUsageQuota property: The amount of usage quota time the user gets in addition to the lab usage
     * quota.
     * 
     * @return the additionalUsageQuota value.
     */
    public Duration additionalUsageQuota() {
        return this.additionalUsageQuota;
    }

    /**
     * Set the additionalUsageQuota property: The amount of usage quota time the user gets in addition to the lab usage
     * quota.
     * 
     * @param additionalUsageQuota the additionalUsageQuota value to set.
     * @return the UserUpdateProperties object itself.
     */
    public UserUpdateProperties withAdditionalUsageQuota(Duration additionalUsageQuota) {
        this.additionalUsageQuota = additionalUsageQuota;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("additionalUsageQuota",
            CoreUtils.durationToStringWithDays(this.additionalUsageQuota));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserUpdateProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UserUpdateProperties.
     */
    public static UserUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserUpdateProperties deserializedUserUpdateProperties = new UserUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("additionalUsageQuota".equals(fieldName)) {
                    deserializedUserUpdateProperties.additionalUsageQuota
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserUpdateProperties;
        });
    }
}
