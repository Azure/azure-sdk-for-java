// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.labservices.fluent.EnvironmentSettingsClient;
import com.azure.resourcemanager.labservices.fluent.models.EnvironmentSettingInner;
import com.azure.resourcemanager.labservices.models.EnvironmentSetting;
import com.azure.resourcemanager.labservices.models.EnvironmentSettings;
import com.azure.resourcemanager.labservices.models.PublishPayload;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class EnvironmentSettingsImpl implements EnvironmentSettings {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(EnvironmentSettingsImpl.class);

    private final EnvironmentSettingsClient innerClient;

    private final com.azure.resourcemanager.labservices.ManagedLabsManager serviceManager;

    public EnvironmentSettingsImpl(
        EnvironmentSettingsClient innerClient,
        com.azure.resourcemanager.labservices.ManagedLabsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<EnvironmentSetting> list(String resourceGroupName, String labAccountName, String labName) {
        PagedIterable<EnvironmentSettingInner> inner =
            this.serviceClient().list(resourceGroupName, labAccountName, labName);
        return Utils.mapPage(inner, inner1 -> new EnvironmentSettingImpl(inner1, this.manager()));
    }

    public PagedIterable<EnvironmentSetting> list(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String expand,
        String filter,
        Integer top,
        String orderby,
        Context context) {
        PagedIterable<EnvironmentSettingInner> inner =
            this
                .serviceClient()
                .list(resourceGroupName, labAccountName, labName, expand, filter, top, orderby, context);
        return Utils.mapPage(inner, inner1 -> new EnvironmentSettingImpl(inner1, this.manager()));
    }

    public EnvironmentSetting get(
        String resourceGroupName, String labAccountName, String labName, String environmentSettingName) {
        EnvironmentSettingInner inner =
            this.serviceClient().get(resourceGroupName, labAccountName, labName, environmentSettingName);
        if (inner != null) {
            return new EnvironmentSettingImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<EnvironmentSetting> getWithResponse(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String expand,
        Context context) {
        Response<EnvironmentSettingInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, labAccountName, labName, environmentSettingName, expand, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new EnvironmentSettingImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String labAccountName, String labName, String environmentSettingName) {
        this.serviceClient().delete(resourceGroupName, labAccountName, labName, environmentSettingName);
    }

    public void delete(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, labAccountName, labName, environmentSettingName, context);
    }

    public void claimAny(
        String resourceGroupName, String labAccountName, String labName, String environmentSettingName) {
        this.serviceClient().claimAny(resourceGroupName, labAccountName, labName, environmentSettingName);
    }

    public Response<Void> claimAnyWithResponse(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        Context context) {
        return this
            .serviceClient()
            .claimAnyWithResponse(resourceGroupName, labAccountName, labName, environmentSettingName, context);
    }

    public void publish(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        PublishPayload publishPayload) {
        this
            .serviceClient()
            .publish(resourceGroupName, labAccountName, labName, environmentSettingName, publishPayload);
    }

    public Response<Void> publishWithResponse(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        PublishPayload publishPayload,
        Context context) {
        return this
            .serviceClient()
            .publishWithResponse(
                resourceGroupName, labAccountName, labName, environmentSettingName, publishPayload, context);
    }

    public void start(String resourceGroupName, String labAccountName, String labName, String environmentSettingName) {
        this.serviceClient().start(resourceGroupName, labAccountName, labName, environmentSettingName);
    }

    public void start(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        Context context) {
        this.serviceClient().start(resourceGroupName, labAccountName, labName, environmentSettingName, context);
    }

    public void stop(String resourceGroupName, String labAccountName, String labName, String environmentSettingName) {
        this.serviceClient().stop(resourceGroupName, labAccountName, labName, environmentSettingName);
    }

    public void stop(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        Context context) {
        this.serviceClient().stop(resourceGroupName, labAccountName, labName, environmentSettingName, context);
    }

    public EnvironmentSetting getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String labAccountName = Utils.getValueFromIdByName(id, "labaccounts");
        if (labAccountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labaccounts'.", id)));
        }
        String labName = Utils.getValueFromIdByName(id, "labs");
        if (labName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labs'.", id)));
        }
        String environmentSettingName = Utils.getValueFromIdByName(id, "environmentsettings");
        if (environmentSettingName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'environmentsettings'.", id)));
        }
        String localExpand = null;
        return this
            .getWithResponse(
                resourceGroupName, labAccountName, labName, environmentSettingName, localExpand, Context.NONE)
            .getValue();
    }

    public Response<EnvironmentSetting> getByIdWithResponse(String id, String expand, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String labAccountName = Utils.getValueFromIdByName(id, "labaccounts");
        if (labAccountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labaccounts'.", id)));
        }
        String labName = Utils.getValueFromIdByName(id, "labs");
        if (labName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labs'.", id)));
        }
        String environmentSettingName = Utils.getValueFromIdByName(id, "environmentsettings");
        if (environmentSettingName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'environmentsettings'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, labAccountName, labName, environmentSettingName, expand, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String labAccountName = Utils.getValueFromIdByName(id, "labaccounts");
        if (labAccountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labaccounts'.", id)));
        }
        String labName = Utils.getValueFromIdByName(id, "labs");
        if (labName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labs'.", id)));
        }
        String environmentSettingName = Utils.getValueFromIdByName(id, "environmentsettings");
        if (environmentSettingName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'environmentsettings'.", id)));
        }
        this.delete(resourceGroupName, labAccountName, labName, environmentSettingName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String labAccountName = Utils.getValueFromIdByName(id, "labaccounts");
        if (labAccountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labaccounts'.", id)));
        }
        String labName = Utils.getValueFromIdByName(id, "labs");
        if (labName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labs'.", id)));
        }
        String environmentSettingName = Utils.getValueFromIdByName(id, "environmentsettings");
        if (environmentSettingName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'environmentsettings'.", id)));
        }
        this.delete(resourceGroupName, labAccountName, labName, environmentSettingName, context);
    }

    private EnvironmentSettingsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.labservices.ManagedLabsManager manager() {
        return this.serviceManager;
    }

    public EnvironmentSettingImpl define(String name) {
        return new EnvironmentSettingImpl(name, this.manager());
    }
}
