// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.labservices.fluent.models.EnvironmentInner;
import com.azure.resourcemanager.labservices.models.Environment;
import com.azure.resourcemanager.labservices.models.EnvironmentFragment;
import com.azure.resourcemanager.labservices.models.LatestOperationResult;
import com.azure.resourcemanager.labservices.models.NetworkInterface;
import com.azure.resourcemanager.labservices.models.ResetPasswordPayload;
import com.azure.resourcemanager.labservices.models.ResourceSet;
import com.azure.resourcemanager.labservices.models.ResourceSetFragment;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.Map;

public final class EnvironmentImpl implements Environment, Environment.Definition, Environment.Update {
    private EnvironmentInner innerObject;

    private final com.azure.resourcemanager.labservices.ManagedLabsManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ResourceSet resourceSets() {
        return this.innerModel().resourceSets();
    }

    public String claimedByUserObjectId() {
        return this.innerModel().claimedByUserObjectId();
    }

    public String claimedByUserPrincipalId() {
        return this.innerModel().claimedByUserPrincipalId();
    }

    public String claimedByUsername() {
        return this.innerModel().claimedByUsername();
    }

    public Boolean isClaimed() {
        return this.innerModel().isClaimed();
    }

    public String lastKnownPowerState() {
        return this.innerModel().lastKnownPowerState();
    }

    public NetworkInterface networkInterface() {
        return this.innerModel().networkInterface();
    }

    public Duration totalUsage() {
        return this.innerModel().totalUsage();
    }

    public OffsetDateTime passwordLastReset() {
        return this.innerModel().passwordLastReset();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String uniqueIdentifier() {
        return this.innerModel().uniqueIdentifier();
    }

    public LatestOperationResult latestOperationResult() {
        return this.innerModel().latestOperationResult();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public EnvironmentInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.labservices.ManagedLabsManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String labAccountName;

    private String labName;

    private String environmentSettingName;

    private String environmentName;

    private EnvironmentFragment updateEnvironment;

    public EnvironmentImpl withExistingEnvironmentsetting(
        String resourceGroupName, String labAccountName, String labName, String environmentSettingName) {
        this.resourceGroupName = resourceGroupName;
        this.labAccountName = labAccountName;
        this.labName = labName;
        this.environmentSettingName = environmentSettingName;
        return this;
    }

    public Environment create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEnvironments()
                .createOrUpdateWithResponse(
                    resourceGroupName,
                    labAccountName,
                    labName,
                    environmentSettingName,
                    environmentName,
                    this.innerModel(),
                    Context.NONE)
                .getValue();
        return this;
    }

    public Environment create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEnvironments()
                .createOrUpdateWithResponse(
                    resourceGroupName,
                    labAccountName,
                    labName,
                    environmentSettingName,
                    environmentName,
                    this.innerModel(),
                    context)
                .getValue();
        return this;
    }

    EnvironmentImpl(String name, com.azure.resourcemanager.labservices.ManagedLabsManager serviceManager) {
        this.innerObject = new EnvironmentInner();
        this.serviceManager = serviceManager;
        this.environmentName = name;
    }

    public EnvironmentImpl update() {
        this.updateEnvironment = new EnvironmentFragment();
        return this;
    }

    public Environment apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEnvironments()
                .updateWithResponse(
                    resourceGroupName,
                    labAccountName,
                    labName,
                    environmentSettingName,
                    environmentName,
                    updateEnvironment,
                    Context.NONE)
                .getValue();
        return this;
    }

    public Environment apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEnvironments()
                .updateWithResponse(
                    resourceGroupName,
                    labAccountName,
                    labName,
                    environmentSettingName,
                    environmentName,
                    updateEnvironment,
                    context)
                .getValue();
        return this;
    }

    EnvironmentImpl(
        EnvironmentInner innerObject, com.azure.resourcemanager.labservices.ManagedLabsManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.labAccountName = Utils.getValueFromIdByName(innerObject.id(), "labaccounts");
        this.labName = Utils.getValueFromIdByName(innerObject.id(), "labs");
        this.environmentSettingName = Utils.getValueFromIdByName(innerObject.id(), "environmentsettings");
        this.environmentName = Utils.getValueFromIdByName(innerObject.id(), "environments");
    }

    public Environment refresh() {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEnvironments()
                .getWithResponse(
                    resourceGroupName,
                    labAccountName,
                    labName,
                    environmentSettingName,
                    environmentName,
                    localExpand,
                    Context.NONE)
                .getValue();
        return this;
    }

    public Environment refresh(Context context) {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEnvironments()
                .getWithResponse(
                    resourceGroupName,
                    labAccountName,
                    labName,
                    environmentSettingName,
                    environmentName,
                    localExpand,
                    context)
                .getValue();
        return this;
    }

    public void claim() {
        serviceManager
            .environments()
            .claim(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName);
    }

    public Response<Void> claimWithResponse(Context context) {
        return serviceManager
            .environments()
            .claimWithResponse(
                resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, context);
    }

    public void resetPassword(ResetPasswordPayload resetPasswordPayload) {
        serviceManager
            .environments()
            .resetPassword(
                resourceGroupName,
                labAccountName,
                labName,
                environmentSettingName,
                environmentName,
                resetPasswordPayload);
    }

    public void resetPassword(ResetPasswordPayload resetPasswordPayload, Context context) {
        serviceManager
            .environments()
            .resetPassword(
                resourceGroupName,
                labAccountName,
                labName,
                environmentSettingName,
                environmentName,
                resetPasswordPayload,
                context);
    }

    public void start() {
        serviceManager
            .environments()
            .start(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName);
    }

    public void start(Context context) {
        serviceManager
            .environments()
            .start(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, context);
    }

    public void stop() {
        serviceManager
            .environments()
            .stop(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName);
    }

    public void stop(Context context) {
        serviceManager
            .environments()
            .stop(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, context);
    }

    public EnvironmentImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public EnvironmentImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public EnvironmentImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateEnvironment.withTags(tags);
            return this;
        }
    }

    public EnvironmentImpl withResourceSets(ResourceSet resourceSets) {
        this.innerModel().withResourceSets(resourceSets);
        return this;
    }

    public EnvironmentImpl withProvisioningState(String provisioningState) {
        if (isInCreateMode()) {
            this.innerModel().withProvisioningState(provisioningState);
            return this;
        } else {
            this.updateEnvironment.withProvisioningState(provisioningState);
            return this;
        }
    }

    public EnvironmentImpl withUniqueIdentifier(String uniqueIdentifier) {
        if (isInCreateMode()) {
            this.innerModel().withUniqueIdentifier(uniqueIdentifier);
            return this;
        } else {
            this.updateEnvironment.withUniqueIdentifier(uniqueIdentifier);
            return this;
        }
    }

    public EnvironmentImpl withResourceSets(ResourceSetFragment resourceSets) {
        this.updateEnvironment.withResourceSets(resourceSets);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
