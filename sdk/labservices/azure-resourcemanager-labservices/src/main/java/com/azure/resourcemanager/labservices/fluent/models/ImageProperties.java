// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.labservices.models.EnableState;
import com.azure.resourcemanager.labservices.models.OsState;
import com.azure.resourcemanager.labservices.models.OsType;
import com.azure.resourcemanager.labservices.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * Properties of an image resource.
 */
@Fluent
public final class ImageProperties extends ImageUpdateProperties {
    /*
     * Current provisioning state of the image.
     */
    private ProvisioningState provisioningState;

    /*
     * The image display name.
     */
    private String displayName;

    /*
     * A description of the image.
     */
    private String description;

    /*
     * URL of the image icon.
     */
    private String iconUrl;

    /*
     * The image author.
     */
    private String author;

    /*
     * The OS Type of the image.
     */
    private OsType osType;

    /*
     * The ID of marketplace plan associated with the image (optional).
     */
    private String plan;

    /*
     * The status of image terms of use (enabled = accepted, disabled = not accepted).
     */
    private EnableState termsStatus;

    /*
     * The ID of an offer associated with the image.
     */
    private String offer;

    /*
     * The ID of the publisher of the image.
     */
    private String publisher;

    /*
     * The image SKU.
     */
    private String sku;

    /*
     * The image version.
     */
    private String version;

    /*
     * The ID for the image in the shared gallery.
     */
    private String sharedGalleryId;

    /*
     * The available regions of the image in the shared gallery.
     */
    private List<String> availableRegions;

    /*
     * The OS State of the image.
     */
    private OsState osState;

    /**
     * Creates an instance of ImageProperties class.
     */
    public ImageProperties() {
    }

    /**
     * Get the provisioningState property: Current provisioning state of the image.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the displayName property: The image display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the description property: A description of the image.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the iconUrl property: URL of the image icon.
     * 
     * @return the iconUrl value.
     */
    public String iconUrl() {
        return this.iconUrl;
    }

    /**
     * Get the author property: The image author.
     * 
     * @return the author value.
     */
    public String author() {
        return this.author;
    }

    /**
     * Get the osType property: The OS Type of the image.
     * 
     * @return the osType value.
     */
    public OsType osType() {
        return this.osType;
    }

    /**
     * Get the plan property: The ID of marketplace plan associated with the image (optional).
     * 
     * @return the plan value.
     */
    public String plan() {
        return this.plan;
    }

    /**
     * Get the termsStatus property: The status of image terms of use (enabled = accepted, disabled = not accepted).
     * 
     * @return the termsStatus value.
     */
    public EnableState termsStatus() {
        return this.termsStatus;
    }

    /**
     * Get the offer property: The ID of an offer associated with the image.
     * 
     * @return the offer value.
     */
    public String offer() {
        return this.offer;
    }

    /**
     * Get the publisher property: The ID of the publisher of the image.
     * 
     * @return the publisher value.
     */
    public String publisher() {
        return this.publisher;
    }

    /**
     * Get the sku property: The image SKU.
     * 
     * @return the sku value.
     */
    public String sku() {
        return this.sku;
    }

    /**
     * Get the version property: The image version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the sharedGalleryId property: The ID for the image in the shared gallery.
     * 
     * @return the sharedGalleryId value.
     */
    public String sharedGalleryId() {
        return this.sharedGalleryId;
    }

    /**
     * Get the availableRegions property: The available regions of the image in the shared gallery.
     * 
     * @return the availableRegions value.
     */
    public List<String> availableRegions() {
        return this.availableRegions;
    }

    /**
     * Set the availableRegions property: The available regions of the image in the shared gallery.
     * 
     * @param availableRegions the availableRegions value to set.
     * @return the ImageProperties object itself.
     */
    public ImageProperties withAvailableRegions(List<String> availableRegions) {
        this.availableRegions = availableRegions;
        return this;
    }

    /**
     * Get the osState property: The OS State of the image.
     * 
     * @return the osState value.
     */
    public OsState osState() {
        return this.osState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ImageProperties withEnabledState(EnableState enabledState) {
        super.withEnabledState(enabledState);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("enabledState", enabledState() == null ? null : enabledState().toString());
        jsonWriter.writeArrayField("availableRegions", this.availableRegions,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImageProperties.
     */
    public static ImageProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageProperties deserializedImageProperties = new ImageProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabledState".equals(fieldName)) {
                    deserializedImageProperties.withEnabledState(EnableState.fromString(reader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedImageProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedImageProperties.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedImageProperties.description = reader.getString();
                } else if ("iconUrl".equals(fieldName)) {
                    deserializedImageProperties.iconUrl = reader.getString();
                } else if ("author".equals(fieldName)) {
                    deserializedImageProperties.author = reader.getString();
                } else if ("osType".equals(fieldName)) {
                    deserializedImageProperties.osType = OsType.fromString(reader.getString());
                } else if ("plan".equals(fieldName)) {
                    deserializedImageProperties.plan = reader.getString();
                } else if ("termsStatus".equals(fieldName)) {
                    deserializedImageProperties.termsStatus = EnableState.fromString(reader.getString());
                } else if ("offer".equals(fieldName)) {
                    deserializedImageProperties.offer = reader.getString();
                } else if ("publisher".equals(fieldName)) {
                    deserializedImageProperties.publisher = reader.getString();
                } else if ("sku".equals(fieldName)) {
                    deserializedImageProperties.sku = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedImageProperties.version = reader.getString();
                } else if ("sharedGalleryId".equals(fieldName)) {
                    deserializedImageProperties.sharedGalleryId = reader.getString();
                } else if ("availableRegions".equals(fieldName)) {
                    List<String> availableRegions = reader.readArray(reader1 -> reader1.getString());
                    deserializedImageProperties.availableRegions = availableRegions;
                } else if ("osState".equals(fieldName)) {
                    deserializedImageProperties.osState = OsState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageProperties;
        });
    }
}
