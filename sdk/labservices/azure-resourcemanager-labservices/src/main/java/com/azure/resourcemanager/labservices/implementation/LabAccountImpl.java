// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.labservices.fluent.models.LabAccountInner;
import com.azure.resourcemanager.labservices.models.CreateLabProperties;
import com.azure.resourcemanager.labservices.models.GetRegionalAvailabilityResponse;
import com.azure.resourcemanager.labservices.models.LabAccount;
import com.azure.resourcemanager.labservices.models.LabAccountFragment;
import com.azure.resourcemanager.labservices.models.LatestOperationResult;
import com.azure.resourcemanager.labservices.models.SizeConfigurationProperties;
import java.util.Collections;
import java.util.Map;

public final class LabAccountImpl implements LabAccount, LabAccount.Definition, LabAccount.Update {
    private LabAccountInner innerObject;

    private final com.azure.resourcemanager.labservices.ManagedLabsManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SizeConfigurationProperties sizeConfiguration() {
        return this.innerModel().sizeConfiguration();
    }

    public Boolean enabledRegionSelection() {
        return this.innerModel().enabledRegionSelection();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String uniqueIdentifier() {
        return this.innerModel().uniqueIdentifier();
    }

    public LatestOperationResult latestOperationResult() {
        return this.innerModel().latestOperationResult();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public LabAccountInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.labservices.ManagedLabsManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String labAccountName;

    private LabAccountFragment updateLabAccount;

    public LabAccountImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public LabAccount create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLabAccounts()
                .createOrUpdateWithResponse(resourceGroupName, labAccountName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public LabAccount create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLabAccounts()
                .createOrUpdateWithResponse(resourceGroupName, labAccountName, this.innerModel(), context)
                .getValue();
        return this;
    }

    LabAccountImpl(String name, com.azure.resourcemanager.labservices.ManagedLabsManager serviceManager) {
        this.innerObject = new LabAccountInner();
        this.serviceManager = serviceManager;
        this.labAccountName = name;
    }

    public LabAccountImpl update() {
        this.updateLabAccount = new LabAccountFragment();
        return this;
    }

    public LabAccount apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLabAccounts()
                .updateWithResponse(resourceGroupName, labAccountName, updateLabAccount, Context.NONE)
                .getValue();
        return this;
    }

    public LabAccount apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLabAccounts()
                .updateWithResponse(resourceGroupName, labAccountName, updateLabAccount, context)
                .getValue();
        return this;
    }

    LabAccountImpl(
        LabAccountInner innerObject, com.azure.resourcemanager.labservices.ManagedLabsManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.labAccountName = Utils.getValueFromIdByName(innerObject.id(), "labaccounts");
    }

    public LabAccount refresh() {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLabAccounts()
                .getByResourceGroupWithResponse(resourceGroupName, labAccountName, localExpand, Context.NONE)
                .getValue();
        return this;
    }

    public LabAccount refresh(Context context) {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLabAccounts()
                .getByResourceGroupWithResponse(resourceGroupName, labAccountName, localExpand, context)
                .getValue();
        return this;
    }

    public void createLab(CreateLabProperties createLabProperties) {
        serviceManager.labAccounts().createLab(resourceGroupName, labAccountName, createLabProperties);
    }

    public Response<Void> createLabWithResponse(CreateLabProperties createLabProperties, Context context) {
        return serviceManager
            .labAccounts()
            .createLabWithResponse(resourceGroupName, labAccountName, createLabProperties, context);
    }

    public GetRegionalAvailabilityResponse getRegionalAvailability() {
        return serviceManager.labAccounts().getRegionalAvailability(resourceGroupName, labAccountName);
    }

    public Response<GetRegionalAvailabilityResponse> getRegionalAvailabilityWithResponse(Context context) {
        return serviceManager
            .labAccounts()
            .getRegionalAvailabilityWithResponse(resourceGroupName, labAccountName, context);
    }

    public LabAccountImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public LabAccountImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public LabAccountImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateLabAccount.withTags(tags);
            return this;
        }
    }

    public LabAccountImpl withEnabledRegionSelection(Boolean enabledRegionSelection) {
        if (isInCreateMode()) {
            this.innerModel().withEnabledRegionSelection(enabledRegionSelection);
            return this;
        } else {
            this.updateLabAccount.withEnabledRegionSelection(enabledRegionSelection);
            return this;
        }
    }

    public LabAccountImpl withProvisioningState(String provisioningState) {
        if (isInCreateMode()) {
            this.innerModel().withProvisioningState(provisioningState);
            return this;
        } else {
            this.updateLabAccount.withProvisioningState(provisioningState);
            return this;
        }
    }

    public LabAccountImpl withUniqueIdentifier(String uniqueIdentifier) {
        if (isInCreateMode()) {
            this.innerModel().withUniqueIdentifier(uniqueIdentifier);
            return this;
        } else {
            this.updateLabAccount.withUniqueIdentifier(uniqueIdentifier);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
