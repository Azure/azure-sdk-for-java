// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.labservices.fluent.models.EnvironmentSettingInner;
import com.azure.resourcemanager.labservices.models.ConfigurationState;
import com.azure.resourcemanager.labservices.models.EnvironmentSetting;
import com.azure.resourcemanager.labservices.models.EnvironmentSettingFragment;
import com.azure.resourcemanager.labservices.models.LatestOperationResult;
import com.azure.resourcemanager.labservices.models.PublishPayload;
import com.azure.resourcemanager.labservices.models.PublishingState;
import com.azure.resourcemanager.labservices.models.ResourceSettings;
import com.azure.resourcemanager.labservices.models.ResourceSettingsFragment;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.Map;

public final class EnvironmentSettingImpl
    implements EnvironmentSetting, EnvironmentSetting.Definition, EnvironmentSetting.Update {
    private EnvironmentSettingInner innerObject;

    private final com.azure.resourcemanager.labservices.ManagedLabsManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public PublishingState publishingState() {
        return this.innerModel().publishingState();
    }

    public ConfigurationState configurationState() {
        return this.innerModel().configurationState();
    }

    public String description() {
        return this.innerModel().description();
    }

    public String title() {
        return this.innerModel().title();
    }

    public ResourceSettings resourceSettings() {
        return this.innerModel().resourceSettings();
    }

    public OffsetDateTime lastChanged() {
        return this.innerModel().lastChanged();
    }

    public OffsetDateTime lastPublished() {
        return this.innerModel().lastPublished();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String uniqueIdentifier() {
        return this.innerModel().uniqueIdentifier();
    }

    public LatestOperationResult latestOperationResult() {
        return this.innerModel().latestOperationResult();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public EnvironmentSettingInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.labservices.ManagedLabsManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String labAccountName;

    private String labName;

    private String environmentSettingName;

    private EnvironmentSettingFragment updateEnvironmentSetting;

    public EnvironmentSettingImpl withExistingLab(String resourceGroupName, String labAccountName, String labName) {
        this.resourceGroupName = resourceGroupName;
        this.labAccountName = labAccountName;
        this.labName = labName;
        return this;
    }

    public EnvironmentSetting create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEnvironmentSettings()
                .createOrUpdate(
                    resourceGroupName,
                    labAccountName,
                    labName,
                    environmentSettingName,
                    this.innerModel(),
                    Context.NONE);
        return this;
    }

    public EnvironmentSetting create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEnvironmentSettings()
                .createOrUpdate(
                    resourceGroupName, labAccountName, labName, environmentSettingName, this.innerModel(), context);
        return this;
    }

    EnvironmentSettingImpl(String name, com.azure.resourcemanager.labservices.ManagedLabsManager serviceManager) {
        this.innerObject = new EnvironmentSettingInner();
        this.serviceManager = serviceManager;
        this.environmentSettingName = name;
    }

    public EnvironmentSettingImpl update() {
        this.updateEnvironmentSetting = new EnvironmentSettingFragment();
        return this;
    }

    public EnvironmentSetting apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEnvironmentSettings()
                .updateWithResponse(
                    resourceGroupName,
                    labAccountName,
                    labName,
                    environmentSettingName,
                    updateEnvironmentSetting,
                    Context.NONE)
                .getValue();
        return this;
    }

    public EnvironmentSetting apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEnvironmentSettings()
                .updateWithResponse(
                    resourceGroupName,
                    labAccountName,
                    labName,
                    environmentSettingName,
                    updateEnvironmentSetting,
                    context)
                .getValue();
        return this;
    }

    EnvironmentSettingImpl(
        EnvironmentSettingInner innerObject, com.azure.resourcemanager.labservices.ManagedLabsManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.labAccountName = Utils.getValueFromIdByName(innerObject.id(), "labaccounts");
        this.labName = Utils.getValueFromIdByName(innerObject.id(), "labs");
        this.environmentSettingName = Utils.getValueFromIdByName(innerObject.id(), "environmentsettings");
    }

    public EnvironmentSetting refresh() {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEnvironmentSettings()
                .getWithResponse(
                    resourceGroupName, labAccountName, labName, environmentSettingName, localExpand, Context.NONE)
                .getValue();
        return this;
    }

    public EnvironmentSetting refresh(Context context) {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEnvironmentSettings()
                .getWithResponse(
                    resourceGroupName, labAccountName, labName, environmentSettingName, localExpand, context)
                .getValue();
        return this;
    }

    public void claimAny() {
        serviceManager
            .environmentSettings()
            .claimAny(resourceGroupName, labAccountName, labName, environmentSettingName);
    }

    public Response<Void> claimAnyWithResponse(Context context) {
        return serviceManager
            .environmentSettings()
            .claimAnyWithResponse(resourceGroupName, labAccountName, labName, environmentSettingName, context);
    }

    public void publish(PublishPayload publishPayload) {
        serviceManager
            .environmentSettings()
            .publish(resourceGroupName, labAccountName, labName, environmentSettingName, publishPayload);
    }

    public Response<Void> publishWithResponse(PublishPayload publishPayload, Context context) {
        return serviceManager
            .environmentSettings()
            .publishWithResponse(
                resourceGroupName, labAccountName, labName, environmentSettingName, publishPayload, context);
    }

    public void start() {
        serviceManager.environmentSettings().start(resourceGroupName, labAccountName, labName, environmentSettingName);
    }

    public void start(Context context) {
        serviceManager
            .environmentSettings()
            .start(resourceGroupName, labAccountName, labName, environmentSettingName, context);
    }

    public void stop() {
        serviceManager.environmentSettings().stop(resourceGroupName, labAccountName, labName, environmentSettingName);
    }

    public void stop(Context context) {
        serviceManager
            .environmentSettings()
            .stop(resourceGroupName, labAccountName, labName, environmentSettingName, context);
    }

    public EnvironmentSettingImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public EnvironmentSettingImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public EnvironmentSettingImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateEnvironmentSetting.withTags(tags);
            return this;
        }
    }

    public EnvironmentSettingImpl withConfigurationState(ConfigurationState configurationState) {
        if (isInCreateMode()) {
            this.innerModel().withConfigurationState(configurationState);
            return this;
        } else {
            this.updateEnvironmentSetting.withConfigurationState(configurationState);
            return this;
        }
    }

    public EnvironmentSettingImpl withDescription(String description) {
        if (isInCreateMode()) {
            this.innerModel().withDescription(description);
            return this;
        } else {
            this.updateEnvironmentSetting.withDescription(description);
            return this;
        }
    }

    public EnvironmentSettingImpl withTitle(String title) {
        if (isInCreateMode()) {
            this.innerModel().withTitle(title);
            return this;
        } else {
            this.updateEnvironmentSetting.withTitle(title);
            return this;
        }
    }

    public EnvironmentSettingImpl withResourceSettings(ResourceSettings resourceSettings) {
        this.innerModel().withResourceSettings(resourceSettings);
        return this;
    }

    public EnvironmentSettingImpl withProvisioningState(String provisioningState) {
        if (isInCreateMode()) {
            this.innerModel().withProvisioningState(provisioningState);
            return this;
        } else {
            this.updateEnvironmentSetting.withProvisioningState(provisioningState);
            return this;
        }
    }

    public EnvironmentSettingImpl withUniqueIdentifier(String uniqueIdentifier) {
        if (isInCreateMode()) {
            this.innerModel().withUniqueIdentifier(uniqueIdentifier);
            return this;
        } else {
            this.updateEnvironmentSetting.withUniqueIdentifier(uniqueIdentifier);
            return this;
        }
    }

    public EnvironmentSettingImpl withResourceSettings(ResourceSettingsFragment resourceSettings) {
        this.updateEnvironmentSetting.withResourceSettings(resourceSettings);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
