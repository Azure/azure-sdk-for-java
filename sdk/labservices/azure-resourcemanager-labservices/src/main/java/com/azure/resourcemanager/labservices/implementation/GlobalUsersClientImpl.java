// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.labservices.fluent.GlobalUsersClient;
import com.azure.resourcemanager.labservices.fluent.models.GetEnvironmentResponseInner;
import com.azure.resourcemanager.labservices.fluent.models.GetPersonalPreferencesResponseInner;
import com.azure.resourcemanager.labservices.fluent.models.ListEnvironmentsResponseInner;
import com.azure.resourcemanager.labservices.fluent.models.ListLabsResponseInner;
import com.azure.resourcemanager.labservices.fluent.models.OperationBatchStatusResponseInner;
import com.azure.resourcemanager.labservices.fluent.models.OperationStatusResponseInner;
import com.azure.resourcemanager.labservices.models.EnvironmentOperationsPayload;
import com.azure.resourcemanager.labservices.models.ListEnvironmentsPayload;
import com.azure.resourcemanager.labservices.models.OperationBatchStatusPayload;
import com.azure.resourcemanager.labservices.models.OperationStatusPayload;
import com.azure.resourcemanager.labservices.models.PersonalPreferencesOperationsPayload;
import com.azure.resourcemanager.labservices.models.RegisterPayload;
import com.azure.resourcemanager.labservices.models.ResetPasswordPayload;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in GlobalUsersClient. */
public final class GlobalUsersClientImpl implements GlobalUsersClient {
    private final ClientLogger logger = new ClientLogger(GlobalUsersClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final GlobalUsersService service;

    /** The service client containing this operation class. */
    private final ManagedLabsClientImpl client;

    /**
     * Initializes an instance of GlobalUsersClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    GlobalUsersClientImpl(ManagedLabsClientImpl client) {
        this.service =
            RestProxy.create(GlobalUsersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ManagedLabsClientGlobalUsers to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ManagedLabsClientGlo")
    private interface GlobalUsersService {
        @Headers({"Content-Type: application/json"})
        @Post("/providers/Microsoft.LabServices/users/{userName}/getEnvironment")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GetEnvironmentResponseInner>> getEnvironment(
            @HostParam("$host") String endpoint,
            @PathParam("userName") String username,
            @QueryParam("$expand") String expand,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") EnvironmentOperationsPayload environmentOperationsPayload,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/providers/Microsoft.LabServices/users/{userName}/getOperationBatchStatus")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OperationBatchStatusResponseInner>> getOperationBatchStatus(
            @HostParam("$host") String endpoint,
            @PathParam("userName") String username,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") OperationBatchStatusPayload operationBatchStatusPayload,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/providers/Microsoft.LabServices/users/{userName}/getOperationStatus")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OperationStatusResponseInner>> getOperationStatus(
            @HostParam("$host") String endpoint,
            @PathParam("userName") String username,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") OperationStatusPayload operationStatusPayload,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/providers/Microsoft.LabServices/users/{userName}/getPersonalPreferences")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GetPersonalPreferencesResponseInner>> getPersonalPreferences(
            @HostParam("$host") String endpoint,
            @PathParam("userName") String username,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") PersonalPreferencesOperationsPayload personalPreferencesOperationsPayload,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/providers/Microsoft.LabServices/users/{userName}/listEnvironments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ListEnvironmentsResponseInner>> listEnvironments(
            @HostParam("$host") String endpoint,
            @PathParam("userName") String username,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ListEnvironmentsPayload listEnvironmentsPayload,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/providers/Microsoft.LabServices/users/{userName}/listLabs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ListLabsResponseInner>> listLabs(
            @HostParam("$host") String endpoint,
            @PathParam("userName") String username,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/providers/Microsoft.LabServices/users/{userName}/register")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> register(
            @HostParam("$host") String endpoint,
            @PathParam("userName") String username,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") RegisterPayload registerPayload,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/providers/Microsoft.LabServices/users/{userName}/resetPassword")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> resetPassword(
            @HostParam("$host") String endpoint,
            @PathParam("userName") String username,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ResetPasswordPayload resetPasswordPayload,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/providers/Microsoft.LabServices/users/{userName}/startEnvironment")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> startEnvironment(
            @HostParam("$host") String endpoint,
            @PathParam("userName") String username,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") EnvironmentOperationsPayload environmentOperationsPayload,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/providers/Microsoft.LabServices/users/{userName}/stopEnvironment")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> stopEnvironment(
            @HostParam("$host") String endpoint,
            @PathParam("userName") String username,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") EnvironmentOperationsPayload environmentOperationsPayload,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets the virtual machine details.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param expand Specify the $expand query. Example: 'properties($expand=environment)'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the virtual machine details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GetEnvironmentResponseInner>> getEnvironmentWithResponseAsync(
        String username, EnvironmentOperationsPayload environmentOperationsPayload, String expand) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (username == null) {
            return Mono.error(new IllegalArgumentException("Parameter username is required and cannot be null."));
        }
        if (environmentOperationsPayload == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter environmentOperationsPayload is required and cannot be null."));
        } else {
            environmentOperationsPayload.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getEnvironment(
                            this.client.getEndpoint(),
                            username,
                            expand,
                            this.client.getApiVersion(),
                            environmentOperationsPayload,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the virtual machine details.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param expand Specify the $expand query. Example: 'properties($expand=environment)'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the virtual machine details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GetEnvironmentResponseInner>> getEnvironmentWithResponseAsync(
        String username, EnvironmentOperationsPayload environmentOperationsPayload, String expand, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (username == null) {
            return Mono.error(new IllegalArgumentException("Parameter username is required and cannot be null."));
        }
        if (environmentOperationsPayload == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter environmentOperationsPayload is required and cannot be null."));
        } else {
            environmentOperationsPayload.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getEnvironment(
                this.client.getEndpoint(),
                username,
                expand,
                this.client.getApiVersion(),
                environmentOperationsPayload,
                accept,
                context);
    }

    /**
     * Gets the virtual machine details.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param expand Specify the $expand query. Example: 'properties($expand=environment)'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the virtual machine details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GetEnvironmentResponseInner> getEnvironmentAsync(
        String username, EnvironmentOperationsPayload environmentOperationsPayload, String expand) {
        return getEnvironmentWithResponseAsync(username, environmentOperationsPayload, expand)
            .flatMap(
                (Response<GetEnvironmentResponseInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the virtual machine details.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the virtual machine details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GetEnvironmentResponseInner> getEnvironmentAsync(
        String username, EnvironmentOperationsPayload environmentOperationsPayload) {
        final String expand = null;
        return getEnvironmentWithResponseAsync(username, environmentOperationsPayload, expand)
            .flatMap(
                (Response<GetEnvironmentResponseInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the virtual machine details.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the virtual machine details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GetEnvironmentResponseInner getEnvironment(
        String username, EnvironmentOperationsPayload environmentOperationsPayload) {
        final String expand = null;
        return getEnvironmentAsync(username, environmentOperationsPayload, expand).block();
    }

    /**
     * Gets the virtual machine details.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param expand Specify the $expand query. Example: 'properties($expand=environment)'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the virtual machine details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GetEnvironmentResponseInner> getEnvironmentWithResponse(
        String username, EnvironmentOperationsPayload environmentOperationsPayload, String expand, Context context) {
        return getEnvironmentWithResponseAsync(username, environmentOperationsPayload, expand, context).block();
    }

    /**
     * Get batch operation status.
     *
     * @param username The name of the user.
     * @param operationBatchStatusPayload Payload to get the status of an operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return batch operation status.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OperationBatchStatusResponseInner>> getOperationBatchStatusWithResponseAsync(
        String username, OperationBatchStatusPayload operationBatchStatusPayload) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (username == null) {
            return Mono.error(new IllegalArgumentException("Parameter username is required and cannot be null."));
        }
        if (operationBatchStatusPayload == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter operationBatchStatusPayload is required and cannot be null."));
        } else {
            operationBatchStatusPayload.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getOperationBatchStatus(
                            this.client.getEndpoint(),
                            username,
                            this.client.getApiVersion(),
                            operationBatchStatusPayload,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get batch operation status.
     *
     * @param username The name of the user.
     * @param operationBatchStatusPayload Payload to get the status of an operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return batch operation status.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OperationBatchStatusResponseInner>> getOperationBatchStatusWithResponseAsync(
        String username, OperationBatchStatusPayload operationBatchStatusPayload, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (username == null) {
            return Mono.error(new IllegalArgumentException("Parameter username is required and cannot be null."));
        }
        if (operationBatchStatusPayload == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter operationBatchStatusPayload is required and cannot be null."));
        } else {
            operationBatchStatusPayload.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getOperationBatchStatus(
                this.client.getEndpoint(),
                username,
                this.client.getApiVersion(),
                operationBatchStatusPayload,
                accept,
                context);
    }

    /**
     * Get batch operation status.
     *
     * @param username The name of the user.
     * @param operationBatchStatusPayload Payload to get the status of an operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return batch operation status.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationBatchStatusResponseInner> getOperationBatchStatusAsync(
        String username, OperationBatchStatusPayload operationBatchStatusPayload) {
        return getOperationBatchStatusWithResponseAsync(username, operationBatchStatusPayload)
            .flatMap(
                (Response<OperationBatchStatusResponseInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get batch operation status.
     *
     * @param username The name of the user.
     * @param operationBatchStatusPayload Payload to get the status of an operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return batch operation status.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationBatchStatusResponseInner getOperationBatchStatus(
        String username, OperationBatchStatusPayload operationBatchStatusPayload) {
        return getOperationBatchStatusAsync(username, operationBatchStatusPayload).block();
    }

    /**
     * Get batch operation status.
     *
     * @param username The name of the user.
     * @param operationBatchStatusPayload Payload to get the status of an operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return batch operation status.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<OperationBatchStatusResponseInner> getOperationBatchStatusWithResponse(
        String username, OperationBatchStatusPayload operationBatchStatusPayload, Context context) {
        return getOperationBatchStatusWithResponseAsync(username, operationBatchStatusPayload, context).block();
    }

    /**
     * Gets the status of long running operation.
     *
     * @param username The name of the user.
     * @param operationStatusPayload Payload to get the status of an operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of long running operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OperationStatusResponseInner>> getOperationStatusWithResponseAsync(
        String username, OperationStatusPayload operationStatusPayload) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (username == null) {
            return Mono.error(new IllegalArgumentException("Parameter username is required and cannot be null."));
        }
        if (operationStatusPayload == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter operationStatusPayload is required and cannot be null."));
        } else {
            operationStatusPayload.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getOperationStatus(
                            this.client.getEndpoint(),
                            username,
                            this.client.getApiVersion(),
                            operationStatusPayload,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the status of long running operation.
     *
     * @param username The name of the user.
     * @param operationStatusPayload Payload to get the status of an operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of long running operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OperationStatusResponseInner>> getOperationStatusWithResponseAsync(
        String username, OperationStatusPayload operationStatusPayload, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (username == null) {
            return Mono.error(new IllegalArgumentException("Parameter username is required and cannot be null."));
        }
        if (operationStatusPayload == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter operationStatusPayload is required and cannot be null."));
        } else {
            operationStatusPayload.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getOperationStatus(
                this.client.getEndpoint(),
                username,
                this.client.getApiVersion(),
                operationStatusPayload,
                accept,
                context);
    }

    /**
     * Gets the status of long running operation.
     *
     * @param username The name of the user.
     * @param operationStatusPayload Payload to get the status of an operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of long running operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResponseInner> getOperationStatusAsync(
        String username, OperationStatusPayload operationStatusPayload) {
        return getOperationStatusWithResponseAsync(username, operationStatusPayload)
            .flatMap(
                (Response<OperationStatusResponseInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the status of long running operation.
     *
     * @param username The name of the user.
     * @param operationStatusPayload Payload to get the status of an operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of long running operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResponseInner getOperationStatus(
        String username, OperationStatusPayload operationStatusPayload) {
        return getOperationStatusAsync(username, operationStatusPayload).block();
    }

    /**
     * Gets the status of long running operation.
     *
     * @param username The name of the user.
     * @param operationStatusPayload Payload to get the status of an operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of long running operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<OperationStatusResponseInner> getOperationStatusWithResponse(
        String username, OperationStatusPayload operationStatusPayload, Context context) {
        return getOperationStatusWithResponseAsync(username, operationStatusPayload, context).block();
    }

    /**
     * Get personal preferences for a user.
     *
     * @param username The name of the user.
     * @param personalPreferencesOperationsPayload Represents payload for any Environment operations like get, start,
     *     stop, connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personal preferences for a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GetPersonalPreferencesResponseInner>> getPersonalPreferencesWithResponseAsync(
        String username, PersonalPreferencesOperationsPayload personalPreferencesOperationsPayload) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (username == null) {
            return Mono.error(new IllegalArgumentException("Parameter username is required and cannot be null."));
        }
        if (personalPreferencesOperationsPayload == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter personalPreferencesOperationsPayload is required and cannot be null."));
        } else {
            personalPreferencesOperationsPayload.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getPersonalPreferences(
                            this.client.getEndpoint(),
                            username,
                            this.client.getApiVersion(),
                            personalPreferencesOperationsPayload,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get personal preferences for a user.
     *
     * @param username The name of the user.
     * @param personalPreferencesOperationsPayload Represents payload for any Environment operations like get, start,
     *     stop, connect.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personal preferences for a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GetPersonalPreferencesResponseInner>> getPersonalPreferencesWithResponseAsync(
        String username, PersonalPreferencesOperationsPayload personalPreferencesOperationsPayload, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (username == null) {
            return Mono.error(new IllegalArgumentException("Parameter username is required and cannot be null."));
        }
        if (personalPreferencesOperationsPayload == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter personalPreferencesOperationsPayload is required and cannot be null."));
        } else {
            personalPreferencesOperationsPayload.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getPersonalPreferences(
                this.client.getEndpoint(),
                username,
                this.client.getApiVersion(),
                personalPreferencesOperationsPayload,
                accept,
                context);
    }

    /**
     * Get personal preferences for a user.
     *
     * @param username The name of the user.
     * @param personalPreferencesOperationsPayload Represents payload for any Environment operations like get, start,
     *     stop, connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personal preferences for a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GetPersonalPreferencesResponseInner> getPersonalPreferencesAsync(
        String username, PersonalPreferencesOperationsPayload personalPreferencesOperationsPayload) {
        return getPersonalPreferencesWithResponseAsync(username, personalPreferencesOperationsPayload)
            .flatMap(
                (Response<GetPersonalPreferencesResponseInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get personal preferences for a user.
     *
     * @param username The name of the user.
     * @param personalPreferencesOperationsPayload Represents payload for any Environment operations like get, start,
     *     stop, connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personal preferences for a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GetPersonalPreferencesResponseInner getPersonalPreferences(
        String username, PersonalPreferencesOperationsPayload personalPreferencesOperationsPayload) {
        return getPersonalPreferencesAsync(username, personalPreferencesOperationsPayload).block();
    }

    /**
     * Get personal preferences for a user.
     *
     * @param username The name of the user.
     * @param personalPreferencesOperationsPayload Represents payload for any Environment operations like get, start,
     *     stop, connect.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personal preferences for a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GetPersonalPreferencesResponseInner> getPersonalPreferencesWithResponse(
        String username, PersonalPreferencesOperationsPayload personalPreferencesOperationsPayload, Context context) {
        return getPersonalPreferencesWithResponseAsync(username, personalPreferencesOperationsPayload, context).block();
    }

    /**
     * List Environments for the user.
     *
     * @param username The name of the user.
     * @param listEnvironmentsPayload Represents the payload to list environments owned by a user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the list of environments owned by a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ListEnvironmentsResponseInner>> listEnvironmentsWithResponseAsync(
        String username, ListEnvironmentsPayload listEnvironmentsPayload) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (username == null) {
            return Mono.error(new IllegalArgumentException("Parameter username is required and cannot be null."));
        }
        if (listEnvironmentsPayload == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter listEnvironmentsPayload is required and cannot be null."));
        } else {
            listEnvironmentsPayload.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listEnvironments(
                            this.client.getEndpoint(),
                            username,
                            this.client.getApiVersion(),
                            listEnvironmentsPayload,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List Environments for the user.
     *
     * @param username The name of the user.
     * @param listEnvironmentsPayload Represents the payload to list environments owned by a user.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the list of environments owned by a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ListEnvironmentsResponseInner>> listEnvironmentsWithResponseAsync(
        String username, ListEnvironmentsPayload listEnvironmentsPayload, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (username == null) {
            return Mono.error(new IllegalArgumentException("Parameter username is required and cannot be null."));
        }
        if (listEnvironmentsPayload == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter listEnvironmentsPayload is required and cannot be null."));
        } else {
            listEnvironmentsPayload.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listEnvironments(
                this.client.getEndpoint(),
                username,
                this.client.getApiVersion(),
                listEnvironmentsPayload,
                accept,
                context);
    }

    /**
     * List Environments for the user.
     *
     * @param username The name of the user.
     * @param listEnvironmentsPayload Represents the payload to list environments owned by a user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the list of environments owned by a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ListEnvironmentsResponseInner> listEnvironmentsAsync(
        String username, ListEnvironmentsPayload listEnvironmentsPayload) {
        return listEnvironmentsWithResponseAsync(username, listEnvironmentsPayload)
            .flatMap(
                (Response<ListEnvironmentsResponseInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * List Environments for the user.
     *
     * @param username The name of the user.
     * @param listEnvironmentsPayload Represents the payload to list environments owned by a user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the list of environments owned by a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListEnvironmentsResponseInner listEnvironments(
        String username, ListEnvironmentsPayload listEnvironmentsPayload) {
        return listEnvironmentsAsync(username, listEnvironmentsPayload).block();
    }

    /**
     * List Environments for the user.
     *
     * @param username The name of the user.
     * @param listEnvironmentsPayload Represents the payload to list environments owned by a user.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the list of environments owned by a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ListEnvironmentsResponseInner> listEnvironmentsWithResponse(
        String username, ListEnvironmentsPayload listEnvironmentsPayload, Context context) {
        return listEnvironmentsWithResponseAsync(username, listEnvironmentsPayload, context).block();
    }

    /**
     * List labs for the user.
     *
     * @param username The name of the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lists the labs owned by a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ListLabsResponseInner>> listLabsWithResponseAsync(String username) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (username == null) {
            return Mono.error(new IllegalArgumentException("Parameter username is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.listLabs(this.client.getEndpoint(), username, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List labs for the user.
     *
     * @param username The name of the user.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lists the labs owned by a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ListLabsResponseInner>> listLabsWithResponseAsync(String username, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (username == null) {
            return Mono.error(new IllegalArgumentException("Parameter username is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listLabs(this.client.getEndpoint(), username, this.client.getApiVersion(), accept, context);
    }

    /**
     * List labs for the user.
     *
     * @param username The name of the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lists the labs owned by a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ListLabsResponseInner> listLabsAsync(String username) {
        return listLabsWithResponseAsync(username)
            .flatMap(
                (Response<ListLabsResponseInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * List labs for the user.
     *
     * @param username The name of the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lists the labs owned by a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListLabsResponseInner listLabs(String username) {
        return listLabsAsync(username).block();
    }

    /**
     * List labs for the user.
     *
     * @param username The name of the user.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lists the labs owned by a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ListLabsResponseInner> listLabsWithResponse(String username, Context context) {
        return listLabsWithResponseAsync(username, context).block();
    }

    /**
     * Register a user to a managed lab.
     *
     * @param username The name of the user.
     * @param registerPayload Represents payload for Register action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> registerWithResponseAsync(String username, RegisterPayload registerPayload) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (username == null) {
            return Mono.error(new IllegalArgumentException("Parameter username is required and cannot be null."));
        }
        if (registerPayload == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registerPayload is required and cannot be null."));
        } else {
            registerPayload.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .register(
                            this.client.getEndpoint(),
                            username,
                            this.client.getApiVersion(),
                            registerPayload,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Register a user to a managed lab.
     *
     * @param username The name of the user.
     * @param registerPayload Represents payload for Register action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> registerWithResponseAsync(
        String username, RegisterPayload registerPayload, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (username == null) {
            return Mono.error(new IllegalArgumentException("Parameter username is required and cannot be null."));
        }
        if (registerPayload == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registerPayload is required and cannot be null."));
        } else {
            registerPayload.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .register(
                this.client.getEndpoint(), username, this.client.getApiVersion(), registerPayload, accept, context);
    }

    /**
     * Register a user to a managed lab.
     *
     * @param username The name of the user.
     * @param registerPayload Represents payload for Register action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> registerAsync(String username, RegisterPayload registerPayload) {
        return registerWithResponseAsync(username, registerPayload).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Register a user to a managed lab.
     *
     * @param username The name of the user.
     * @param registerPayload Represents payload for Register action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void register(String username, RegisterPayload registerPayload) {
        registerAsync(username, registerPayload).block();
    }

    /**
     * Register a user to a managed lab.
     *
     * @param username The name of the user.
     * @param registerPayload Represents payload for Register action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> registerWithResponse(String username, RegisterPayload registerPayload, Context context) {
        return registerWithResponseAsync(username, registerPayload, context).block();
    }

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param username The name of the user.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> resetPasswordWithResponseAsync(
        String username, ResetPasswordPayload resetPasswordPayload) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (username == null) {
            return Mono.error(new IllegalArgumentException("Parameter username is required and cannot be null."));
        }
        if (resetPasswordPayload == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resetPasswordPayload is required and cannot be null."));
        } else {
            resetPasswordPayload.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .resetPassword(
                            this.client.getEndpoint(),
                            username,
                            this.client.getApiVersion(),
                            resetPasswordPayload,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param username The name of the user.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> resetPasswordWithResponseAsync(
        String username, ResetPasswordPayload resetPasswordPayload, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (username == null) {
            return Mono.error(new IllegalArgumentException("Parameter username is required and cannot be null."));
        }
        if (resetPasswordPayload == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resetPasswordPayload is required and cannot be null."));
        } else {
            resetPasswordPayload.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .resetPassword(
                this.client.getEndpoint(),
                username,
                this.client.getApiVersion(),
                resetPasswordPayload,
                accept,
                context);
    }

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param username The name of the user.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginResetPasswordAsync(
        String username, ResetPasswordPayload resetPasswordPayload) {
        Mono<Response<Flux<ByteBuffer>>> mono = resetPasswordWithResponseAsync(username, resetPasswordPayload);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param username The name of the user.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginResetPasswordAsync(
        String username, ResetPasswordPayload resetPasswordPayload, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = resetPasswordWithResponseAsync(username, resetPasswordPayload, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param username The name of the user.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginResetPassword(
        String username, ResetPasswordPayload resetPasswordPayload) {
        return beginResetPasswordAsync(username, resetPasswordPayload).getSyncPoller();
    }

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param username The name of the user.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginResetPassword(
        String username, ResetPasswordPayload resetPasswordPayload, Context context) {
        return beginResetPasswordAsync(username, resetPasswordPayload, context).getSyncPoller();
    }

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param username The name of the user.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> resetPasswordAsync(String username, ResetPasswordPayload resetPasswordPayload) {
        return beginResetPasswordAsync(username, resetPasswordPayload)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param username The name of the user.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> resetPasswordAsync(String username, ResetPasswordPayload resetPasswordPayload, Context context) {
        return beginResetPasswordAsync(username, resetPasswordPayload, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param username The name of the user.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void resetPassword(String username, ResetPasswordPayload resetPasswordPayload) {
        resetPasswordAsync(username, resetPasswordPayload).block();
    }

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param username The name of the user.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void resetPassword(String username, ResetPasswordPayload resetPasswordPayload, Context context) {
        resetPasswordAsync(username, resetPasswordPayload, context).block();
    }

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> startEnvironmentWithResponseAsync(
        String username, EnvironmentOperationsPayload environmentOperationsPayload) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (username == null) {
            return Mono.error(new IllegalArgumentException("Parameter username is required and cannot be null."));
        }
        if (environmentOperationsPayload == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter environmentOperationsPayload is required and cannot be null."));
        } else {
            environmentOperationsPayload.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .startEnvironment(
                            this.client.getEndpoint(),
                            username,
                            this.client.getApiVersion(),
                            environmentOperationsPayload,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> startEnvironmentWithResponseAsync(
        String username, EnvironmentOperationsPayload environmentOperationsPayload, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (username == null) {
            return Mono.error(new IllegalArgumentException("Parameter username is required and cannot be null."));
        }
        if (environmentOperationsPayload == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter environmentOperationsPayload is required and cannot be null."));
        } else {
            environmentOperationsPayload.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .startEnvironment(
                this.client.getEndpoint(),
                username,
                this.client.getApiVersion(),
                environmentOperationsPayload,
                accept,
                context);
    }

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginStartEnvironmentAsync(
        String username, EnvironmentOperationsPayload environmentOperationsPayload) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            startEnvironmentWithResponseAsync(username, environmentOperationsPayload);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginStartEnvironmentAsync(
        String username, EnvironmentOperationsPayload environmentOperationsPayload, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            startEnvironmentWithResponseAsync(username, environmentOperationsPayload, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginStartEnvironment(
        String username, EnvironmentOperationsPayload environmentOperationsPayload) {
        return beginStartEnvironmentAsync(username, environmentOperationsPayload).getSyncPoller();
    }

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginStartEnvironment(
        String username, EnvironmentOperationsPayload environmentOperationsPayload, Context context) {
        return beginStartEnvironmentAsync(username, environmentOperationsPayload, context).getSyncPoller();
    }

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> startEnvironmentAsync(
        String username, EnvironmentOperationsPayload environmentOperationsPayload) {
        return beginStartEnvironmentAsync(username, environmentOperationsPayload)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> startEnvironmentAsync(
        String username, EnvironmentOperationsPayload environmentOperationsPayload, Context context) {
        return beginStartEnvironmentAsync(username, environmentOperationsPayload, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void startEnvironment(String username, EnvironmentOperationsPayload environmentOperationsPayload) {
        startEnvironmentAsync(username, environmentOperationsPayload).block();
    }

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void startEnvironment(
        String username, EnvironmentOperationsPayload environmentOperationsPayload, Context context) {
        startEnvironmentAsync(username, environmentOperationsPayload, context).block();
    }

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> stopEnvironmentWithResponseAsync(
        String username, EnvironmentOperationsPayload environmentOperationsPayload) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (username == null) {
            return Mono.error(new IllegalArgumentException("Parameter username is required and cannot be null."));
        }
        if (environmentOperationsPayload == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter environmentOperationsPayload is required and cannot be null."));
        } else {
            environmentOperationsPayload.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .stopEnvironment(
                            this.client.getEndpoint(),
                            username,
                            this.client.getApiVersion(),
                            environmentOperationsPayload,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> stopEnvironmentWithResponseAsync(
        String username, EnvironmentOperationsPayload environmentOperationsPayload, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (username == null) {
            return Mono.error(new IllegalArgumentException("Parameter username is required and cannot be null."));
        }
        if (environmentOperationsPayload == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter environmentOperationsPayload is required and cannot be null."));
        } else {
            environmentOperationsPayload.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .stopEnvironment(
                this.client.getEndpoint(),
                username,
                this.client.getApiVersion(),
                environmentOperationsPayload,
                accept,
                context);
    }

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginStopEnvironmentAsync(
        String username, EnvironmentOperationsPayload environmentOperationsPayload) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            stopEnvironmentWithResponseAsync(username, environmentOperationsPayload);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginStopEnvironmentAsync(
        String username, EnvironmentOperationsPayload environmentOperationsPayload, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            stopEnvironmentWithResponseAsync(username, environmentOperationsPayload, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginStopEnvironment(
        String username, EnvironmentOperationsPayload environmentOperationsPayload) {
        return beginStopEnvironmentAsync(username, environmentOperationsPayload).getSyncPoller();
    }

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginStopEnvironment(
        String username, EnvironmentOperationsPayload environmentOperationsPayload, Context context) {
        return beginStopEnvironmentAsync(username, environmentOperationsPayload, context).getSyncPoller();
    }

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> stopEnvironmentAsync(
        String username, EnvironmentOperationsPayload environmentOperationsPayload) {
        return beginStopEnvironmentAsync(username, environmentOperationsPayload)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> stopEnvironmentAsync(
        String username, EnvironmentOperationsPayload environmentOperationsPayload, Context context) {
        return beginStopEnvironmentAsync(username, environmentOperationsPayload, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void stopEnvironment(String username, EnvironmentOperationsPayload environmentOperationsPayload) {
        stopEnvironmentAsync(username, environmentOperationsPayload).block();
    }

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void stopEnvironment(
        String username, EnvironmentOperationsPayload environmentOperationsPayload, Context context) {
        stopEnvironmentAsync(username, environmentOperationsPayload, context).block();
    }
}
