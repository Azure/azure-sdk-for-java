// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.labservices.fluent.models.LabInner;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Map;

/** An immutable client-side representation of Lab. */
public interface Lab {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the maxUsersInLab property: Maximum number of users allowed in the lab.
     *
     * @return the maxUsersInLab value.
     */
    Integer maxUsersInLab();

    /**
     * Gets the userQuota property: Maximum value MaxUsersInLab can be set to, as specified by the service.
     *
     * @return the userQuota value.
     */
    Integer userQuota();

    /**
     * Gets the invitationCode property: Invitation code that users can use to join a lab.
     *
     * @return the invitationCode value.
     */
    String invitationCode();

    /**
     * Gets the createdByObjectId property: Object id of the user that created the lab.
     *
     * @return the createdByObjectId value.
     */
    String createdByObjectId();

    /**
     * Gets the usageQuota property: Maximum duration a user can use an environment for in the lab.
     *
     * @return the usageQuota value.
     */
    Duration usageQuota();

    /**
     * Gets the userAccessMode property: Lab user access mode (open to all vs. restricted to those listed on the lab).
     *
     * @return the userAccessMode value.
     */
    LabUserAccessMode userAccessMode();

    /**
     * Gets the createdByUserPrincipalName property: Lab creator name.
     *
     * @return the createdByUserPrincipalName value.
     */
    String createdByUserPrincipalName();

    /**
     * Gets the createdDate property: Creation date for the lab.
     *
     * @return the createdDate value.
     */
    OffsetDateTime createdDate();

    /**
     * Gets the provisioningState property: The provisioning status of the resource.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @return the uniqueIdentifier value.
     */
    String uniqueIdentifier();

    /**
     * Gets the latestOperationResult property: The details of the latest operation. ex: status, error.
     *
     * @return the latestOperationResult value.
     */
    LatestOperationResult latestOperationResult();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.labservices.fluent.models.LabInner object.
     *
     * @return the inner object.
     */
    LabInner innerModel();

    /** The entirety of the Lab definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }
    /** The Lab definition stages. */
    interface DefinitionStages {
        /** The first stage of the Lab definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the Lab definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }
        /** The stage of the Lab definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, labAccountName.
             *
             * @param resourceGroupName The name of the resource group.
             * @param labAccountName The name of the lab Account.
             * @return the next definition stage.
             */
            WithCreate withExistingLabaccount(String resourceGroupName, String labAccountName);
        }
        /**
         * The stage of the Lab definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithMaxUsersInLab,
                DefinitionStages.WithUsageQuota,
                DefinitionStages.WithUserAccessMode,
                DefinitionStages.WithProvisioningState,
                DefinitionStages.WithUniqueIdentifier {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Lab create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Lab create(Context context);
        }
        /** The stage of the Lab definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the Lab definition allowing to specify maxUsersInLab. */
        interface WithMaxUsersInLab {
            /**
             * Specifies the maxUsersInLab property: Maximum number of users allowed in the lab..
             *
             * @param maxUsersInLab Maximum number of users allowed in the lab.
             * @return the next definition stage.
             */
            WithCreate withMaxUsersInLab(Integer maxUsersInLab);
        }
        /** The stage of the Lab definition allowing to specify usageQuota. */
        interface WithUsageQuota {
            /**
             * Specifies the usageQuota property: Maximum duration a user can use an environment for in the lab..
             *
             * @param usageQuota Maximum duration a user can use an environment for in the lab.
             * @return the next definition stage.
             */
            WithCreate withUsageQuota(Duration usageQuota);
        }
        /** The stage of the Lab definition allowing to specify userAccessMode. */
        interface WithUserAccessMode {
            /**
             * Specifies the userAccessMode property: Lab user access mode (open to all vs. restricted to those listed
             * on the lab)..
             *
             * @param userAccessMode Lab user access mode (open to all vs. restricted to those listed on the lab).
             * @return the next definition stage.
             */
            WithCreate withUserAccessMode(LabUserAccessMode userAccessMode);
        }
        /** The stage of the Lab definition allowing to specify provisioningState. */
        interface WithProvisioningState {
            /**
             * Specifies the provisioningState property: The provisioning status of the resource..
             *
             * @param provisioningState The provisioning status of the resource.
             * @return the next definition stage.
             */
            WithCreate withProvisioningState(String provisioningState);
        }
        /** The stage of the Lab definition allowing to specify uniqueIdentifier. */
        interface WithUniqueIdentifier {
            /**
             * Specifies the uniqueIdentifier property: The unique immutable identifier of a resource (Guid)..
             *
             * @param uniqueIdentifier The unique immutable identifier of a resource (Guid).
             * @return the next definition stage.
             */
            WithCreate withUniqueIdentifier(String uniqueIdentifier);
        }
    }
    /**
     * Begins update for the Lab resource.
     *
     * @return the stage of resource update.
     */
    Lab.Update update();

    /** The template for Lab update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithMaxUsersInLab,
            UpdateStages.WithUsageQuota,
            UpdateStages.WithUserAccessMode,
            UpdateStages.WithProvisioningState,
            UpdateStages.WithUniqueIdentifier {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Lab apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Lab apply(Context context);
    }
    /** The Lab update stages. */
    interface UpdateStages {
        /** The stage of the Lab update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the Lab update allowing to specify maxUsersInLab. */
        interface WithMaxUsersInLab {
            /**
             * Specifies the maxUsersInLab property: Maximum number of users allowed in the lab..
             *
             * @param maxUsersInLab Maximum number of users allowed in the lab.
             * @return the next definition stage.
             */
            Update withMaxUsersInLab(Integer maxUsersInLab);
        }
        /** The stage of the Lab update allowing to specify usageQuota. */
        interface WithUsageQuota {
            /**
             * Specifies the usageQuota property: Maximum duration a user can use an environment for in the lab..
             *
             * @param usageQuota Maximum duration a user can use an environment for in the lab.
             * @return the next definition stage.
             */
            Update withUsageQuota(Duration usageQuota);
        }
        /** The stage of the Lab update allowing to specify userAccessMode. */
        interface WithUserAccessMode {
            /**
             * Specifies the userAccessMode property: Lab user access mode (open to all vs. restricted to those listed
             * on the lab)..
             *
             * @param userAccessMode Lab user access mode (open to all vs. restricted to those listed on the lab).
             * @return the next definition stage.
             */
            Update withUserAccessMode(LabUserAccessMode userAccessMode);
        }
        /** The stage of the Lab update allowing to specify provisioningState. */
        interface WithProvisioningState {
            /**
             * Specifies the provisioningState property: The provisioning status of the resource..
             *
             * @param provisioningState The provisioning status of the resource.
             * @return the next definition stage.
             */
            Update withProvisioningState(String provisioningState);
        }
        /** The stage of the Lab update allowing to specify uniqueIdentifier. */
        interface WithUniqueIdentifier {
            /**
             * Specifies the uniqueIdentifier property: The unique immutable identifier of a resource (Guid)..
             *
             * @param uniqueIdentifier The unique immutable identifier of a resource (Guid).
             * @return the next definition stage.
             */
            Update withUniqueIdentifier(String uniqueIdentifier);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Lab refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Lab refresh(Context context);

    /**
     * Add users to a lab.
     *
     * @param addUsersPayload Payload for Add Users operation on a Lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void addUsers(AddUsersPayload addUsersPayload);

    /**
     * Add users to a lab.
     *
     * @param addUsersPayload Payload for Add Users operation on a Lab.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<Void> addUsersWithResponse(AddUsersPayload addUsersPayload, Context context);

    /**
     * Register to managed lab.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void register();

    /**
     * Register to managed lab.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<Void> registerWithResponse(Context context);
}
