// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of Environments. */
public interface Environments {
    /**
     * List environments in a given environment setting.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a list operation.
     */
    PagedIterable<Environment> list(
        String resourceGroupName, String labAccountName, String labName, String environmentSettingName);

    /**
     * List environments in a given environment setting.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param expand Specify the $expand query. Example: 'properties($expand=networkInterface)'.
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a list operation.
     */
    PagedIterable<Environment> list(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String expand,
        String filter,
        Integer top,
        String orderby,
        Context context);

    /**
     * Get environment.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return environment.
     */
    Environment get(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName);

    /**
     * Get environment.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param expand Specify the $expand query. Example: 'properties($expand=networkInterface)'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return environment.
     */
    Response<Environment> getWithResponse(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName,
        String expand,
        Context context);

    /**
     * Delete environment. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName);

    /**
     * Delete environment. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName,
        Context context);

    /**
     * Claims the environment and assigns it to the user.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void claim(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName);

    /**
     * Claims the environment and assigns it to the user.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<Void> claimWithResponse(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName,
        Context context);

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void resetPassword(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName,
        ResetPasswordPayload resetPasswordPayload);

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void resetPassword(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName,
        ResetPasswordPayload resetPasswordPayload,
        Context context);

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to
     * complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName);

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to
     * complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName,
        Context context);

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to
     * complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void stop(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName);

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to
     * complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void stop(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName,
        Context context);

    /**
     * Get environment.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return environment.
     */
    Environment getById(String id);

    /**
     * Get environment.
     *
     * @param id the resource ID.
     * @param expand Specify the $expand query. Example: 'properties($expand=networkInterface)'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return environment.
     */
    Response<Environment> getByIdWithResponse(String id, String expand, Context context);

    /**
     * Delete environment. This operation can take a while to complete.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete environment. This operation can take a while to complete.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new Environment resource.
     *
     * @param name resource name.
     * @return the first stage of the new Environment definition.
     */
    Environment.DefinitionStages.Blank define(String name);
}
