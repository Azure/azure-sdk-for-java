// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Recurrence pattern of a lab schedule.
 */
@Fluent
public final class RecurrencePattern implements JsonSerializable<RecurrencePattern> {
    /*
     * The frequency of the recurrence.
     */
    private RecurrenceFrequency frequency;

    /*
     * The week days the schedule runs. Used for when the Frequency is set to Weekly.
     */
    private List<WeekDay> weekDays;

    /*
     * The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2
     * days. When no interval is supplied, an interval of 1 is used.
     */
    private Integer interval;

    /*
     * When the recurrence will expire. This date is inclusive.
     */
    private OffsetDateTime expirationDate;

    /**
     * Creates an instance of RecurrencePattern class.
     */
    public RecurrencePattern() {
    }

    /**
     * Get the frequency property: The frequency of the recurrence.
     * 
     * @return the frequency value.
     */
    public RecurrenceFrequency frequency() {
        return this.frequency;
    }

    /**
     * Set the frequency property: The frequency of the recurrence.
     * 
     * @param frequency the frequency value to set.
     * @return the RecurrencePattern object itself.
     */
    public RecurrencePattern withFrequency(RecurrenceFrequency frequency) {
        this.frequency = frequency;
        return this;
    }

    /**
     * Get the weekDays property: The week days the schedule runs. Used for when the Frequency is set to Weekly.
     * 
     * @return the weekDays value.
     */
    public List<WeekDay> weekDays() {
        return this.weekDays;
    }

    /**
     * Set the weekDays property: The week days the schedule runs. Used for when the Frequency is set to Weekly.
     * 
     * @param weekDays the weekDays value to set.
     * @return the RecurrencePattern object itself.
     */
    public RecurrencePattern withWeekDays(List<WeekDay> weekDays) {
        this.weekDays = weekDays;
        return this;
    }

    /**
     * Get the interval property: The interval to invoke the schedule on. For example, interval = 2 and
     * RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
     * 
     * @return the interval value.
     */
    public Integer interval() {
        return this.interval;
    }

    /**
     * Set the interval property: The interval to invoke the schedule on. For example, interval = 2 and
     * RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
     * 
     * @param interval the interval value to set.
     * @return the RecurrencePattern object itself.
     */
    public RecurrencePattern withInterval(Integer interval) {
        this.interval = interval;
        return this;
    }

    /**
     * Get the expirationDate property: When the recurrence will expire. This date is inclusive.
     * 
     * @return the expirationDate value.
     */
    public OffsetDateTime expirationDate() {
        return this.expirationDate;
    }

    /**
     * Set the expirationDate property: When the recurrence will expire. This date is inclusive.
     * 
     * @param expirationDate the expirationDate value to set.
     * @return the RecurrencePattern object itself.
     */
    public RecurrencePattern withExpirationDate(OffsetDateTime expirationDate) {
        this.expirationDate = expirationDate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (frequency() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property frequency in model RecurrencePattern"));
        }
        if (expirationDate() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property expirationDate in model RecurrencePattern"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RecurrencePattern.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("frequency", this.frequency == null ? null : this.frequency.toString());
        jsonWriter.writeStringField("expirationDate",
            this.expirationDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expirationDate));
        jsonWriter.writeArrayField("weekDays", this.weekDays,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeNumberField("interval", this.interval);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecurrencePattern from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecurrencePattern if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RecurrencePattern.
     */
    public static RecurrencePattern fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecurrencePattern deserializedRecurrencePattern = new RecurrencePattern();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("frequency".equals(fieldName)) {
                    deserializedRecurrencePattern.frequency = RecurrenceFrequency.fromString(reader.getString());
                } else if ("expirationDate".equals(fieldName)) {
                    deserializedRecurrencePattern.expirationDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("weekDays".equals(fieldName)) {
                    List<WeekDay> weekDays = reader.readArray(reader1 -> WeekDay.fromString(reader1.getString()));
                    deserializedRecurrencePattern.weekDays = weekDays;
                } else if ("interval".equals(fieldName)) {
                    deserializedRecurrencePattern.interval = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecurrencePattern;
        });
    }
}
