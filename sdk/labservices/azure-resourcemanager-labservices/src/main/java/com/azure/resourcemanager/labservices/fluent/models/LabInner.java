// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.labservices.models.LabUserAccessMode;
import com.azure.resourcemanager.labservices.models.LatestOperationResult;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Map;

/** Represents a lab. */
@JsonFlatten
@Fluent
public class LabInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(LabInner.class);

    /*
     * Maximum number of users allowed in the lab.
     */
    @JsonProperty(value = "properties.maxUsersInLab")
    private Integer maxUsersInLab;

    /*
     * Maximum value MaxUsersInLab can be set to, as specified by the service
     */
    @JsonProperty(value = "properties.userQuota", access = JsonProperty.Access.WRITE_ONLY)
    private Integer userQuota;

    /*
     * Invitation code that users can use to join a lab.
     */
    @JsonProperty(value = "properties.invitationCode", access = JsonProperty.Access.WRITE_ONLY)
    private String invitationCode;

    /*
     * Object id of the user that created the lab.
     */
    @JsonProperty(value = "properties.createdByObjectId", access = JsonProperty.Access.WRITE_ONLY)
    private String createdByObjectId;

    /*
     * Maximum duration a user can use an environment for in the lab.
     */
    @JsonProperty(value = "properties.usageQuota")
    private Duration usageQuota;

    /*
     * Lab user access mode (open to all vs. restricted to those listed on the
     * lab).
     */
    @JsonProperty(value = "properties.userAccessMode")
    private LabUserAccessMode userAccessMode;

    /*
     * Lab creator name
     */
    @JsonProperty(value = "properties.createdByUserPrincipalName", access = JsonProperty.Access.WRITE_ONLY)
    private String createdByUserPrincipalName;

    /*
     * Creation date for the lab
     */
    @JsonProperty(value = "properties.createdDate", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime createdDate;

    /*
     * The provisioning status of the resource.
     */
    @JsonProperty(value = "properties.provisioningState")
    private String provisioningState;

    /*
     * The unique immutable identifier of a resource (Guid).
     */
    @JsonProperty(value = "properties.uniqueIdentifier")
    private String uniqueIdentifier;

    /*
     * The details of the latest operation. ex: status, error
     */
    @JsonProperty(value = "properties.latestOperationResult", access = JsonProperty.Access.WRITE_ONLY)
    private LatestOperationResult latestOperationResult;

    /**
     * Get the maxUsersInLab property: Maximum number of users allowed in the lab.
     *
     * @return the maxUsersInLab value.
     */
    public Integer maxUsersInLab() {
        return this.maxUsersInLab;
    }

    /**
     * Set the maxUsersInLab property: Maximum number of users allowed in the lab.
     *
     * @param maxUsersInLab the maxUsersInLab value to set.
     * @return the LabInner object itself.
     */
    public LabInner withMaxUsersInLab(Integer maxUsersInLab) {
        this.maxUsersInLab = maxUsersInLab;
        return this;
    }

    /**
     * Get the userQuota property: Maximum value MaxUsersInLab can be set to, as specified by the service.
     *
     * @return the userQuota value.
     */
    public Integer userQuota() {
        return this.userQuota;
    }

    /**
     * Get the invitationCode property: Invitation code that users can use to join a lab.
     *
     * @return the invitationCode value.
     */
    public String invitationCode() {
        return this.invitationCode;
    }

    /**
     * Get the createdByObjectId property: Object id of the user that created the lab.
     *
     * @return the createdByObjectId value.
     */
    public String createdByObjectId() {
        return this.createdByObjectId;
    }

    /**
     * Get the usageQuota property: Maximum duration a user can use an environment for in the lab.
     *
     * @return the usageQuota value.
     */
    public Duration usageQuota() {
        return this.usageQuota;
    }

    /**
     * Set the usageQuota property: Maximum duration a user can use an environment for in the lab.
     *
     * @param usageQuota the usageQuota value to set.
     * @return the LabInner object itself.
     */
    public LabInner withUsageQuota(Duration usageQuota) {
        this.usageQuota = usageQuota;
        return this;
    }

    /**
     * Get the userAccessMode property: Lab user access mode (open to all vs. restricted to those listed on the lab).
     *
     * @return the userAccessMode value.
     */
    public LabUserAccessMode userAccessMode() {
        return this.userAccessMode;
    }

    /**
     * Set the userAccessMode property: Lab user access mode (open to all vs. restricted to those listed on the lab).
     *
     * @param userAccessMode the userAccessMode value to set.
     * @return the LabInner object itself.
     */
    public LabInner withUserAccessMode(LabUserAccessMode userAccessMode) {
        this.userAccessMode = userAccessMode;
        return this;
    }

    /**
     * Get the createdByUserPrincipalName property: Lab creator name.
     *
     * @return the createdByUserPrincipalName value.
     */
    public String createdByUserPrincipalName() {
        return this.createdByUserPrincipalName;
    }

    /**
     * Get the createdDate property: Creation date for the lab.
     *
     * @return the createdDate value.
     */
    public OffsetDateTime createdDate() {
        return this.createdDate;
    }

    /**
     * Get the provisioningState property: The provisioning status of the resource.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The provisioning status of the resource.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the LabInner object itself.
     */
    public LabInner withProvisioningState(String provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @return the uniqueIdentifier value.
     */
    public String uniqueIdentifier() {
        return this.uniqueIdentifier;
    }

    /**
     * Set the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @param uniqueIdentifier the uniqueIdentifier value to set.
     * @return the LabInner object itself.
     */
    public LabInner withUniqueIdentifier(String uniqueIdentifier) {
        this.uniqueIdentifier = uniqueIdentifier;
        return this;
    }

    /**
     * Get the latestOperationResult property: The details of the latest operation. ex: status, error.
     *
     * @return the latestOperationResult value.
     */
    public LatestOperationResult latestOperationResult() {
        return this.latestOperationResult;
    }

    /** {@inheritDoc} */
    @Override
    public LabInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LabInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (latestOperationResult() != null) {
            latestOperationResult().validate();
        }
    }
}
