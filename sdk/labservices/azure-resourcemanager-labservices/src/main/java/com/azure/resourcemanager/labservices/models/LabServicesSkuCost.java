// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The array of costs of a lab services SKU.
 */
@Immutable
public final class LabServicesSkuCost implements JsonSerializable<LabServicesSkuCost> {
    /*
     * The meter id.
     */
    private String meterId;

    /*
     * The quantity of units charged.
     */
    private Float quantity;

    /*
     * The extended unit.
     */
    private String extendedUnit;

    /**
     * Creates an instance of LabServicesSkuCost class.
     */
    public LabServicesSkuCost() {
    }

    /**
     * Get the meterId property: The meter id.
     * 
     * @return the meterId value.
     */
    public String meterId() {
        return this.meterId;
    }

    /**
     * Get the quantity property: The quantity of units charged.
     * 
     * @return the quantity value.
     */
    public Float quantity() {
        return this.quantity;
    }

    /**
     * Get the extendedUnit property: The extended unit.
     * 
     * @return the extendedUnit value.
     */
    public String extendedUnit() {
        return this.extendedUnit;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LabServicesSkuCost from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LabServicesSkuCost if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LabServicesSkuCost.
     */
    public static LabServicesSkuCost fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LabServicesSkuCost deserializedLabServicesSkuCost = new LabServicesSkuCost();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("meterId".equals(fieldName)) {
                    deserializedLabServicesSkuCost.meterId = reader.getString();
                } else if ("quantity".equals(fieldName)) {
                    deserializedLabServicesSkuCost.quantity = reader.getNullable(JsonReader::getFloat);
                } else if ("extendedUnit".equals(fieldName)) {
                    deserializedLabServicesSkuCost.extendedUnit = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLabServicesSkuCost;
        });
    }
}
