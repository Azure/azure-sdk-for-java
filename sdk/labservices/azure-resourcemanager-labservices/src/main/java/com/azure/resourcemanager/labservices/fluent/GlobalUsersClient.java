// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.labservices.fluent.models.GetEnvironmentResponseInner;
import com.azure.resourcemanager.labservices.fluent.models.GetPersonalPreferencesResponseInner;
import com.azure.resourcemanager.labservices.fluent.models.ListEnvironmentsResponseInner;
import com.azure.resourcemanager.labservices.fluent.models.ListLabsResponseInner;
import com.azure.resourcemanager.labservices.fluent.models.OperationBatchStatusResponseInner;
import com.azure.resourcemanager.labservices.fluent.models.OperationStatusResponseInner;
import com.azure.resourcemanager.labservices.models.EnvironmentOperationsPayload;
import com.azure.resourcemanager.labservices.models.ListEnvironmentsPayload;
import com.azure.resourcemanager.labservices.models.OperationBatchStatusPayload;
import com.azure.resourcemanager.labservices.models.OperationStatusPayload;
import com.azure.resourcemanager.labservices.models.PersonalPreferencesOperationsPayload;
import com.azure.resourcemanager.labservices.models.RegisterPayload;
import com.azure.resourcemanager.labservices.models.ResetPasswordPayload;

/** An instance of this class provides access to all the operations defined in GlobalUsersClient. */
public interface GlobalUsersClient {
    /**
     * Gets the virtual machine details.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the virtual machine details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GetEnvironmentResponseInner getEnvironment(
        String username, EnvironmentOperationsPayload environmentOperationsPayload);

    /**
     * Gets the virtual machine details.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param expand Specify the $expand query. Example: 'properties($expand=environment)'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the virtual machine details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<GetEnvironmentResponseInner> getEnvironmentWithResponse(
        String username, EnvironmentOperationsPayload environmentOperationsPayload, String expand, Context context);

    /**
     * Get batch operation status.
     *
     * @param username The name of the user.
     * @param operationBatchStatusPayload Payload to get the status of an operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return batch operation status.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OperationBatchStatusResponseInner getOperationBatchStatus(
        String username, OperationBatchStatusPayload operationBatchStatusPayload);

    /**
     * Get batch operation status.
     *
     * @param username The name of the user.
     * @param operationBatchStatusPayload Payload to get the status of an operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return batch operation status.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<OperationBatchStatusResponseInner> getOperationBatchStatusWithResponse(
        String username, OperationBatchStatusPayload operationBatchStatusPayload, Context context);

    /**
     * Gets the status of long running operation.
     *
     * @param username The name of the user.
     * @param operationStatusPayload Payload to get the status of an operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of long running operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OperationStatusResponseInner getOperationStatus(String username, OperationStatusPayload operationStatusPayload);

    /**
     * Gets the status of long running operation.
     *
     * @param username The name of the user.
     * @param operationStatusPayload Payload to get the status of an operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of long running operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<OperationStatusResponseInner> getOperationStatusWithResponse(
        String username, OperationStatusPayload operationStatusPayload, Context context);

    /**
     * Get personal preferences for a user.
     *
     * @param username The name of the user.
     * @param personalPreferencesOperationsPayload Represents payload for any Environment operations like get, start,
     *     stop, connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personal preferences for a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GetPersonalPreferencesResponseInner getPersonalPreferences(
        String username, PersonalPreferencesOperationsPayload personalPreferencesOperationsPayload);

    /**
     * Get personal preferences for a user.
     *
     * @param username The name of the user.
     * @param personalPreferencesOperationsPayload Represents payload for any Environment operations like get, start,
     *     stop, connect.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personal preferences for a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<GetPersonalPreferencesResponseInner> getPersonalPreferencesWithResponse(
        String username, PersonalPreferencesOperationsPayload personalPreferencesOperationsPayload, Context context);

    /**
     * List Environments for the user.
     *
     * @param username The name of the user.
     * @param listEnvironmentsPayload Represents the payload to list environments owned by a user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the list of environments owned by a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ListEnvironmentsResponseInner listEnvironments(String username, ListEnvironmentsPayload listEnvironmentsPayload);

    /**
     * List Environments for the user.
     *
     * @param username The name of the user.
     * @param listEnvironmentsPayload Represents the payload to list environments owned by a user.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the list of environments owned by a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ListEnvironmentsResponseInner> listEnvironmentsWithResponse(
        String username, ListEnvironmentsPayload listEnvironmentsPayload, Context context);

    /**
     * List labs for the user.
     *
     * @param username The name of the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lists the labs owned by a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ListLabsResponseInner listLabs(String username);

    /**
     * List labs for the user.
     *
     * @param username The name of the user.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lists the labs owned by a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ListLabsResponseInner> listLabsWithResponse(String username, Context context);

    /**
     * Register a user to a managed lab.
     *
     * @param username The name of the user.
     * @param registerPayload Represents payload for Register action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void register(String username, RegisterPayload registerPayload);

    /**
     * Register a user to a managed lab.
     *
     * @param username The name of the user.
     * @param registerPayload Represents payload for Register action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> registerWithResponse(String username, RegisterPayload registerPayload, Context context);

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param username The name of the user.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginResetPassword(String username, ResetPasswordPayload resetPasswordPayload);

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param username The name of the user.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginResetPassword(
        String username, ResetPasswordPayload resetPasswordPayload, Context context);

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param username The name of the user.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void resetPassword(String username, ResetPasswordPayload resetPasswordPayload);

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param username The name of the user.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void resetPassword(String username, ResetPasswordPayload resetPasswordPayload, Context context);

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginStartEnvironment(
        String username, EnvironmentOperationsPayload environmentOperationsPayload);

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginStartEnvironment(
        String username, EnvironmentOperationsPayload environmentOperationsPayload, Context context);

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void startEnvironment(String username, EnvironmentOperationsPayload environmentOperationsPayload);

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void startEnvironment(String username, EnvironmentOperationsPayload environmentOperationsPayload, Context context);

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginStopEnvironment(
        String username, EnvironmentOperationsPayload environmentOperationsPayload);

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginStopEnvironment(
        String username, EnvironmentOperationsPayload environmentOperationsPayload, Context context);

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void stopEnvironment(String username, EnvironmentOperationsPayload environmentOperationsPayload);

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void stopEnvironment(String username, EnvironmentOperationsPayload environmentOperationsPayload, Context context);
}
