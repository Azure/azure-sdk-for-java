// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.labservices.models.InvitationState;
import com.azure.resourcemanager.labservices.models.ProvisioningState;
import com.azure.resourcemanager.labservices.models.RegistrationState;
import java.io.IOException;
import java.time.Duration;
import java.time.OffsetDateTime;

/**
 * User resource properties.
 */
@Fluent
public final class UserProperties extends UserUpdateProperties {
    /*
     * Current provisioning state of the user resource.
     */
    private ProvisioningState provisioningState;

    /*
     * Display name of the user, for example user's full name.
     */
    private String displayName;

    /*
     * Email address of the user.
     */
    private String email;

    /*
     * State of the user's registration within the lab.
     */
    private RegistrationState registrationState;

    /*
     * State of the invitation message for the user.
     */
    private InvitationState invitationState;

    /*
     * Date and time when the invitation message was sent to the user.
     */
    private OffsetDateTime invitationSent;

    /*
     * How long the user has used their virtual machines in this lab.
     */
    private Duration totalUsage;

    /**
     * Creates an instance of UserProperties class.
     */
    public UserProperties() {
    }

    /**
     * Get the provisioningState property: Current provisioning state of the user resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the displayName property: Display name of the user, for example user's full name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the email property: Email address of the user.
     * 
     * @return the email value.
     */
    public String email() {
        return this.email;
    }

    /**
     * Set the email property: Email address of the user.
     * 
     * @param email the email value to set.
     * @return the UserProperties object itself.
     */
    public UserProperties withEmail(String email) {
        this.email = email;
        return this;
    }

    /**
     * Get the registrationState property: State of the user's registration within the lab.
     * 
     * @return the registrationState value.
     */
    public RegistrationState registrationState() {
        return this.registrationState;
    }

    /**
     * Get the invitationState property: State of the invitation message for the user.
     * 
     * @return the invitationState value.
     */
    public InvitationState invitationState() {
        return this.invitationState;
    }

    /**
     * Get the invitationSent property: Date and time when the invitation message was sent to the user.
     * 
     * @return the invitationSent value.
     */
    public OffsetDateTime invitationSent() {
        return this.invitationSent;
    }

    /**
     * Get the totalUsage property: How long the user has used their virtual machines in this lab.
     * 
     * @return the totalUsage value.
     */
    public Duration totalUsage() {
        return this.totalUsage;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserProperties withAdditionalUsageQuota(Duration additionalUsageQuota) {
        super.withAdditionalUsageQuota(additionalUsageQuota);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (email() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property email in model UserProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UserProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("additionalUsageQuota", CoreUtils.durationToStringWithDays(additionalUsageQuota()));
        jsonWriter.writeStringField("email", this.email);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UserProperties.
     */
    public static UserProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserProperties deserializedUserProperties = new UserProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("additionalUsageQuota".equals(fieldName)) {
                    deserializedUserProperties.withAdditionalUsageQuota(
                        reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString())));
                } else if ("email".equals(fieldName)) {
                    deserializedUserProperties.email = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedUserProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedUserProperties.displayName = reader.getString();
                } else if ("registrationState".equals(fieldName)) {
                    deserializedUserProperties.registrationState = RegistrationState.fromString(reader.getString());
                } else if ("invitationState".equals(fieldName)) {
                    deserializedUserProperties.invitationState = InvitationState.fromString(reader.getString());
                } else if ("invitationSent".equals(fieldName)) {
                    deserializedUserProperties.invitationSent = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("totalUsage".equals(fieldName)) {
                    deserializedUserProperties.totalUsage
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserProperties;
        });
    }
}
