// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of GlobalUsers. */
public interface GlobalUsers {
    /**
     * Gets the virtual machine details.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the virtual machine details.
     */
    GetEnvironmentResponse getEnvironment(String username, EnvironmentOperationsPayload environmentOperationsPayload);

    /**
     * Gets the virtual machine details.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param expand Specify the $expand query. Example: 'properties($expand=environment)'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the virtual machine details.
     */
    Response<GetEnvironmentResponse> getEnvironmentWithResponse(
        String username, EnvironmentOperationsPayload environmentOperationsPayload, String expand, Context context);

    /**
     * Get batch operation status.
     *
     * @param username The name of the user.
     * @param operationBatchStatusPayload Payload to get the status of an operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return batch operation status.
     */
    OperationBatchStatusResponse getOperationBatchStatus(
        String username, OperationBatchStatusPayload operationBatchStatusPayload);

    /**
     * Get batch operation status.
     *
     * @param username The name of the user.
     * @param operationBatchStatusPayload Payload to get the status of an operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return batch operation status.
     */
    Response<OperationBatchStatusResponse> getOperationBatchStatusWithResponse(
        String username, OperationBatchStatusPayload operationBatchStatusPayload, Context context);

    /**
     * Gets the status of long running operation.
     *
     * @param username The name of the user.
     * @param operationStatusPayload Payload to get the status of an operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of long running operation.
     */
    OperationStatusResponse getOperationStatus(String username, OperationStatusPayload operationStatusPayload);

    /**
     * Gets the status of long running operation.
     *
     * @param username The name of the user.
     * @param operationStatusPayload Payload to get the status of an operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of long running operation.
     */
    Response<OperationStatusResponse> getOperationStatusWithResponse(
        String username, OperationStatusPayload operationStatusPayload, Context context);

    /**
     * Get personal preferences for a user.
     *
     * @param username The name of the user.
     * @param personalPreferencesOperationsPayload Represents payload for any Environment operations like get, start,
     *     stop, connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personal preferences for a user.
     */
    GetPersonalPreferencesResponse getPersonalPreferences(
        String username, PersonalPreferencesOperationsPayload personalPreferencesOperationsPayload);

    /**
     * Get personal preferences for a user.
     *
     * @param username The name of the user.
     * @param personalPreferencesOperationsPayload Represents payload for any Environment operations like get, start,
     *     stop, connect.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personal preferences for a user.
     */
    Response<GetPersonalPreferencesResponse> getPersonalPreferencesWithResponse(
        String username, PersonalPreferencesOperationsPayload personalPreferencesOperationsPayload, Context context);

    /**
     * List Environments for the user.
     *
     * @param username The name of the user.
     * @param listEnvironmentsPayload Represents the payload to list environments owned by a user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the list of environments owned by a user.
     */
    ListEnvironmentsResponse listEnvironments(String username, ListEnvironmentsPayload listEnvironmentsPayload);

    /**
     * List Environments for the user.
     *
     * @param username The name of the user.
     * @param listEnvironmentsPayload Represents the payload to list environments owned by a user.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the list of environments owned by a user.
     */
    Response<ListEnvironmentsResponse> listEnvironmentsWithResponse(
        String username, ListEnvironmentsPayload listEnvironmentsPayload, Context context);

    /**
     * List labs for the user.
     *
     * @param username The name of the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lists the labs owned by a user.
     */
    ListLabsResponse listLabs(String username);

    /**
     * List labs for the user.
     *
     * @param username The name of the user.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lists the labs owned by a user.
     */
    Response<ListLabsResponse> listLabsWithResponse(String username, Context context);

    /**
     * Register a user to a managed lab.
     *
     * @param username The name of the user.
     * @param registerPayload Represents payload for Register action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void register(String username, RegisterPayload registerPayload);

    /**
     * Register a user to a managed lab.
     *
     * @param username The name of the user.
     * @param registerPayload Represents payload for Register action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<Void> registerWithResponse(String username, RegisterPayload registerPayload, Context context);

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param username The name of the user.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void resetPassword(String username, ResetPasswordPayload resetPasswordPayload);

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param username The name of the user.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void resetPassword(String username, ResetPasswordPayload resetPasswordPayload, Context context);

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void startEnvironment(String username, EnvironmentOperationsPayload environmentOperationsPayload);

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void startEnvironment(String username, EnvironmentOperationsPayload environmentOperationsPayload, Context context);

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void stopEnvironment(String username, EnvironmentOperationsPayload environmentOperationsPayload);

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to
     * complete.
     *
     * @param username The name of the user.
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop,
     *     connect.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void stopEnvironment(String username, EnvironmentOperationsPayload environmentOperationsPayload, Context context);
}
