// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Represents settings of an environment, from which environment instances would be created. */
@JsonFlatten
@Fluent
public class EnvironmentSettingFragment extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(EnvironmentSettingFragment.class);

    /*
     * Describes the user's progress in configuring their environment setting
     */
    @JsonProperty(value = "properties.configurationState")
    private ConfigurationState configurationState;

    /*
     * Describes the environment and its resource settings
     */
    @JsonProperty(value = "properties.description")
    private String description;

    /*
     * Brief title describing the environment and its resource settings
     */
    @JsonProperty(value = "properties.title")
    private String title;

    /*
     * The resource specific settings
     */
    @JsonProperty(value = "properties.resourceSettings")
    private ResourceSettingsFragment resourceSettings;

    /*
     * The provisioning status of the resource.
     */
    @JsonProperty(value = "properties.provisioningState")
    private String provisioningState;

    /*
     * The unique immutable identifier of a resource (Guid).
     */
    @JsonProperty(value = "properties.uniqueIdentifier")
    private String uniqueIdentifier;

    /**
     * Get the configurationState property: Describes the user's progress in configuring their environment setting.
     *
     * @return the configurationState value.
     */
    public ConfigurationState configurationState() {
        return this.configurationState;
    }

    /**
     * Set the configurationState property: Describes the user's progress in configuring their environment setting.
     *
     * @param configurationState the configurationState value to set.
     * @return the EnvironmentSettingFragment object itself.
     */
    public EnvironmentSettingFragment withConfigurationState(ConfigurationState configurationState) {
        this.configurationState = configurationState;
        return this;
    }

    /**
     * Get the description property: Describes the environment and its resource settings.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Describes the environment and its resource settings.
     *
     * @param description the description value to set.
     * @return the EnvironmentSettingFragment object itself.
     */
    public EnvironmentSettingFragment withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the title property: Brief title describing the environment and its resource settings.
     *
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: Brief title describing the environment and its resource settings.
     *
     * @param title the title value to set.
     * @return the EnvironmentSettingFragment object itself.
     */
    public EnvironmentSettingFragment withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the resourceSettings property: The resource specific settings.
     *
     * @return the resourceSettings value.
     */
    public ResourceSettingsFragment resourceSettings() {
        return this.resourceSettings;
    }

    /**
     * Set the resourceSettings property: The resource specific settings.
     *
     * @param resourceSettings the resourceSettings value to set.
     * @return the EnvironmentSettingFragment object itself.
     */
    public EnvironmentSettingFragment withResourceSettings(ResourceSettingsFragment resourceSettings) {
        this.resourceSettings = resourceSettings;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning status of the resource.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The provisioning status of the resource.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the EnvironmentSettingFragment object itself.
     */
    public EnvironmentSettingFragment withProvisioningState(String provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @return the uniqueIdentifier value.
     */
    public String uniqueIdentifier() {
        return this.uniqueIdentifier;
    }

    /**
     * Set the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @param uniqueIdentifier the uniqueIdentifier value to set.
     * @return the EnvironmentSettingFragment object itself.
     */
    public EnvironmentSettingFragment withUniqueIdentifier(String uniqueIdentifier) {
        this.uniqueIdentifier = uniqueIdentifier;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public EnvironmentSettingFragment withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public EnvironmentSettingFragment withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceSettings() != null) {
            resourceSettings().validate();
        }
    }
}
