// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The restriction details.
 */
@Immutable
public final class LabServicesSkuRestrictions implements JsonSerializable<LabServicesSkuRestrictions> {
    /*
     * The type of restriction.
     */
    private RestrictionType type;

    /*
     * The values of the restriction.
     */
    private List<String> values;

    /*
     * The reason for the restriction.
     */
    private RestrictionReasonCode reasonCode;

    /**
     * Creates an instance of LabServicesSkuRestrictions class.
     */
    public LabServicesSkuRestrictions() {
    }

    /**
     * Get the type property: The type of restriction.
     * 
     * @return the type value.
     */
    public RestrictionType type() {
        return this.type;
    }

    /**
     * Get the values property: The values of the restriction.
     * 
     * @return the values value.
     */
    public List<String> values() {
        return this.values;
    }

    /**
     * Get the reasonCode property: The reason for the restriction.
     * 
     * @return the reasonCode value.
     */
    public RestrictionReasonCode reasonCode() {
        return this.reasonCode;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LabServicesSkuRestrictions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LabServicesSkuRestrictions if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LabServicesSkuRestrictions.
     */
    public static LabServicesSkuRestrictions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LabServicesSkuRestrictions deserializedLabServicesSkuRestrictions = new LabServicesSkuRestrictions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedLabServicesSkuRestrictions.type = RestrictionType.fromString(reader.getString());
                } else if ("values".equals(fieldName)) {
                    List<String> values = reader.readArray(reader1 -> reader1.getString());
                    deserializedLabServicesSkuRestrictions.values = values;
                } else if ("reasonCode".equals(fieldName)) {
                    deserializedLabServicesSkuRestrictions.reasonCode
                        = RestrictionReasonCode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLabServicesSkuRestrictions;
        });
    }
}
