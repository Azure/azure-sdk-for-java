// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.labservices.models.AutoShutdownProfile;
import com.azure.resourcemanager.labservices.models.ConnectionProfile;
import com.azure.resourcemanager.labservices.models.LabPlanNetworkProfile;
import com.azure.resourcemanager.labservices.models.ProvisioningState;
import com.azure.resourcemanager.labservices.models.SupportInfo;
import java.io.IOException;
import java.util.List;

/**
 * Lab plan resource properties.
 */
@Fluent
public final class LabPlanProperties extends LabPlanUpdateProperties {
    /*
     * Current provisioning state of the lab plan.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of LabPlanProperties class.
     */
    public LabPlanProperties() {
    }

    /**
     * Get the provisioningState property: Current provisioning state of the lab plan.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LabPlanProperties withDefaultConnectionProfile(ConnectionProfile defaultConnectionProfile) {
        super.withDefaultConnectionProfile(defaultConnectionProfile);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LabPlanProperties withDefaultAutoShutdownProfile(AutoShutdownProfile defaultAutoShutdownProfile) {
        super.withDefaultAutoShutdownProfile(defaultAutoShutdownProfile);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LabPlanProperties withDefaultNetworkProfile(LabPlanNetworkProfile defaultNetworkProfile) {
        super.withDefaultNetworkProfile(defaultNetworkProfile);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LabPlanProperties withAllowedRegions(List<String> allowedRegions) {
        super.withAllowedRegions(allowedRegions);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LabPlanProperties withSharedGalleryId(String sharedGalleryId) {
        super.withSharedGalleryId(sharedGalleryId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LabPlanProperties withSupportInfo(SupportInfo supportInfo) {
        super.withSupportInfo(supportInfo);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LabPlanProperties withLinkedLmsInstance(String linkedLmsInstance) {
        super.withLinkedLmsInstance(linkedLmsInstance);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (defaultConnectionProfile() != null) {
            defaultConnectionProfile().validate();
        }
        if (defaultAutoShutdownProfile() != null) {
            defaultAutoShutdownProfile().validate();
        }
        if (defaultNetworkProfile() != null) {
            defaultNetworkProfile().validate();
        }
        if (supportInfo() != null) {
            supportInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("defaultConnectionProfile", defaultConnectionProfile());
        jsonWriter.writeJsonField("defaultAutoShutdownProfile", defaultAutoShutdownProfile());
        jsonWriter.writeJsonField("defaultNetworkProfile", defaultNetworkProfile());
        jsonWriter.writeArrayField("allowedRegions", allowedRegions(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("sharedGalleryId", sharedGalleryId());
        jsonWriter.writeJsonField("supportInfo", supportInfo());
        jsonWriter.writeStringField("linkedLmsInstance", linkedLmsInstance());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LabPlanProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LabPlanProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LabPlanProperties.
     */
    public static LabPlanProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LabPlanProperties deserializedLabPlanProperties = new LabPlanProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("defaultConnectionProfile".equals(fieldName)) {
                    deserializedLabPlanProperties.withDefaultConnectionProfile(ConnectionProfile.fromJson(reader));
                } else if ("defaultAutoShutdownProfile".equals(fieldName)) {
                    deserializedLabPlanProperties.withDefaultAutoShutdownProfile(AutoShutdownProfile.fromJson(reader));
                } else if ("defaultNetworkProfile".equals(fieldName)) {
                    deserializedLabPlanProperties.withDefaultNetworkProfile(LabPlanNetworkProfile.fromJson(reader));
                } else if ("allowedRegions".equals(fieldName)) {
                    List<String> allowedRegions = reader.readArray(reader1 -> reader1.getString());
                    deserializedLabPlanProperties.withAllowedRegions(allowedRegions);
                } else if ("sharedGalleryId".equals(fieldName)) {
                    deserializedLabPlanProperties.withSharedGalleryId(reader.getString());
                } else if ("supportInfo".equals(fieldName)) {
                    deserializedLabPlanProperties.withSupportInfo(SupportInfo.fromJson(reader));
                } else if ("linkedLmsInstance".equals(fieldName)) {
                    deserializedLabPlanProperties.withLinkedLmsInstance(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedLabPlanProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLabPlanProperties;
        });
    }
}
