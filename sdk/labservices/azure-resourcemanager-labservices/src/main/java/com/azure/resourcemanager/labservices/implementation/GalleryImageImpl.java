// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.labservices.fluent.models.GalleryImageInner;
import com.azure.resourcemanager.labservices.models.GalleryImage;
import com.azure.resourcemanager.labservices.models.GalleryImageFragment;
import com.azure.resourcemanager.labservices.models.GalleryImageReference;
import com.azure.resourcemanager.labservices.models.LatestOperationResult;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.Map;

public final class GalleryImageImpl implements GalleryImage, GalleryImage.Definition, GalleryImage.Update {
    private GalleryImageInner innerObject;

    private final com.azure.resourcemanager.labservices.ManagedLabsManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String author() {
        return this.innerModel().author();
    }

    public OffsetDateTime createdDate() {
        return this.innerModel().createdDate();
    }

    public String description() {
        return this.innerModel().description();
    }

    public GalleryImageReference imageReference() {
        return this.innerModel().imageReference();
    }

    public String icon() {
        return this.innerModel().icon();
    }

    public Boolean isEnabled() {
        return this.innerModel().isEnabled();
    }

    public Boolean isOverride() {
        return this.innerModel().isOverride();
    }

    public String planId() {
        return this.innerModel().planId();
    }

    public Boolean isPlanAuthorized() {
        return this.innerModel().isPlanAuthorized();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String uniqueIdentifier() {
        return this.innerModel().uniqueIdentifier();
    }

    public LatestOperationResult latestOperationResult() {
        return this.innerModel().latestOperationResult();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public GalleryImageInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.labservices.ManagedLabsManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String labAccountName;

    private String galleryImageName;

    private GalleryImageFragment updateGalleryImage;

    public GalleryImageImpl withExistingLabaccount(String resourceGroupName, String labAccountName) {
        this.resourceGroupName = resourceGroupName;
        this.labAccountName = labAccountName;
        return this;
    }

    public GalleryImage create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGalleryImages()
                .createOrUpdateWithResponse(
                    resourceGroupName, labAccountName, galleryImageName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public GalleryImage create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGalleryImages()
                .createOrUpdateWithResponse(
                    resourceGroupName, labAccountName, galleryImageName, this.innerModel(), context)
                .getValue();
        return this;
    }

    GalleryImageImpl(String name, com.azure.resourcemanager.labservices.ManagedLabsManager serviceManager) {
        this.innerObject = new GalleryImageInner();
        this.serviceManager = serviceManager;
        this.galleryImageName = name;
    }

    public GalleryImageImpl update() {
        this.updateGalleryImage = new GalleryImageFragment();
        return this;
    }

    public GalleryImage apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGalleryImages()
                .updateWithResponse(
                    resourceGroupName, labAccountName, galleryImageName, updateGalleryImage, Context.NONE)
                .getValue();
        return this;
    }

    public GalleryImage apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGalleryImages()
                .updateWithResponse(resourceGroupName, labAccountName, galleryImageName, updateGalleryImage, context)
                .getValue();
        return this;
    }

    GalleryImageImpl(
        GalleryImageInner innerObject, com.azure.resourcemanager.labservices.ManagedLabsManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.labAccountName = Utils.getValueFromIdByName(innerObject.id(), "labaccounts");
        this.galleryImageName = Utils.getValueFromIdByName(innerObject.id(), "galleryimages");
    }

    public GalleryImage refresh() {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGalleryImages()
                .getWithResponse(resourceGroupName, labAccountName, galleryImageName, localExpand, Context.NONE)
                .getValue();
        return this;
    }

    public GalleryImage refresh(Context context) {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGalleryImages()
                .getWithResponse(resourceGroupName, labAccountName, galleryImageName, localExpand, context)
                .getValue();
        return this;
    }

    public GalleryImageImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public GalleryImageImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public GalleryImageImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateGalleryImage.withTags(tags);
            return this;
        }
    }

    public GalleryImageImpl withIsEnabled(Boolean isEnabled) {
        if (isInCreateMode()) {
            this.innerModel().withIsEnabled(isEnabled);
            return this;
        } else {
            this.updateGalleryImage.withIsEnabled(isEnabled);
            return this;
        }
    }

    public GalleryImageImpl withIsOverride(Boolean isOverride) {
        if (isInCreateMode()) {
            this.innerModel().withIsOverride(isOverride);
            return this;
        } else {
            this.updateGalleryImage.withIsOverride(isOverride);
            return this;
        }
    }

    public GalleryImageImpl withIsPlanAuthorized(Boolean isPlanAuthorized) {
        if (isInCreateMode()) {
            this.innerModel().withIsPlanAuthorized(isPlanAuthorized);
            return this;
        } else {
            this.updateGalleryImage.withIsPlanAuthorized(isPlanAuthorized);
            return this;
        }
    }

    public GalleryImageImpl withProvisioningState(String provisioningState) {
        if (isInCreateMode()) {
            this.innerModel().withProvisioningState(provisioningState);
            return this;
        } else {
            this.updateGalleryImage.withProvisioningState(provisioningState);
            return this;
        }
    }

    public GalleryImageImpl withUniqueIdentifier(String uniqueIdentifier) {
        if (isInCreateMode()) {
            this.innerModel().withUniqueIdentifier(uniqueIdentifier);
            return this;
        } else {
            this.updateGalleryImage.withUniqueIdentifier(uniqueIdentifier);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
