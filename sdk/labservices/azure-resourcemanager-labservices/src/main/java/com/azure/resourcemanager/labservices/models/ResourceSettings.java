// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Represents resource specific settings. */
@Fluent
public final class ResourceSettings {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ResourceSettings.class);

    /*
     * The unique id of the resource setting
     */
    @JsonProperty(value = "id", access = JsonProperty.Access.WRITE_ONLY)
    private String id;

    /*
     * The resource id of the gallery image used for creating the virtual
     * machine
     */
    @JsonProperty(value = "galleryImageResourceId")
    private String galleryImageResourceId;

    /*
     * The name of the image used to created the environment setting
     */
    @JsonProperty(value = "imageName", access = JsonProperty.Access.WRITE_ONLY)
    private String imageName;

    /*
     * The size of the virtual machine
     */
    @JsonProperty(value = "size")
    private ManagedLabVmSize size;

    /*
     * The translated compute cores of the virtual machine
     */
    @JsonProperty(value = "cores", access = JsonProperty.Access.WRITE_ONLY)
    private Integer cores;

    /*
     * Details specific to Reference Vm
     */
    @JsonProperty(value = "referenceVm", required = true)
    private ReferenceVm referenceVm;

    /**
     * Get the id property: The unique id of the resource setting.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the galleryImageResourceId property: The resource id of the gallery image used for creating the virtual
     * machine.
     *
     * @return the galleryImageResourceId value.
     */
    public String galleryImageResourceId() {
        return this.galleryImageResourceId;
    }

    /**
     * Set the galleryImageResourceId property: The resource id of the gallery image used for creating the virtual
     * machine.
     *
     * @param galleryImageResourceId the galleryImageResourceId value to set.
     * @return the ResourceSettings object itself.
     */
    public ResourceSettings withGalleryImageResourceId(String galleryImageResourceId) {
        this.galleryImageResourceId = galleryImageResourceId;
        return this;
    }

    /**
     * Get the imageName property: The name of the image used to created the environment setting.
     *
     * @return the imageName value.
     */
    public String imageName() {
        return this.imageName;
    }

    /**
     * Get the size property: The size of the virtual machine.
     *
     * @return the size value.
     */
    public ManagedLabVmSize size() {
        return this.size;
    }

    /**
     * Set the size property: The size of the virtual machine.
     *
     * @param size the size value to set.
     * @return the ResourceSettings object itself.
     */
    public ResourceSettings withSize(ManagedLabVmSize size) {
        this.size = size;
        return this;
    }

    /**
     * Get the cores property: The translated compute cores of the virtual machine.
     *
     * @return the cores value.
     */
    public Integer cores() {
        return this.cores;
    }

    /**
     * Get the referenceVm property: Details specific to Reference Vm.
     *
     * @return the referenceVm value.
     */
    public ReferenceVm referenceVm() {
        return this.referenceVm;
    }

    /**
     * Set the referenceVm property: Details specific to Reference Vm.
     *
     * @param referenceVm the referenceVm value to set.
     * @return the ResourceSettings object itself.
     */
    public ResourceSettings withReferenceVm(ReferenceVm referenceVm) {
        this.referenceVm = referenceVm;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (referenceVm() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property referenceVm in model ResourceSettings"));
        } else {
            referenceVm().validate();
        }
    }
}
