// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Connection profile for how users connect to lab virtual machines.
 */
@Fluent
public final class ConnectionProfile implements JsonSerializable<ConnectionProfile> {
    /*
     * The enabled access level for Web Access over SSH.
     */
    private ConnectionType webSshAccess;

    /*
     * The enabled access level for Web Access over RDP.
     */
    private ConnectionType webRdpAccess;

    /*
     * The enabled access level for Client Access over SSH.
     */
    private ConnectionType clientSshAccess;

    /*
     * The enabled access level for Client Access over RDP.
     */
    private ConnectionType clientRdpAccess;

    /**
     * Creates an instance of ConnectionProfile class.
     */
    public ConnectionProfile() {
    }

    /**
     * Get the webSshAccess property: The enabled access level for Web Access over SSH.
     * 
     * @return the webSshAccess value.
     */
    public ConnectionType webSshAccess() {
        return this.webSshAccess;
    }

    /**
     * Set the webSshAccess property: The enabled access level for Web Access over SSH.
     * 
     * @param webSshAccess the webSshAccess value to set.
     * @return the ConnectionProfile object itself.
     */
    public ConnectionProfile withWebSshAccess(ConnectionType webSshAccess) {
        this.webSshAccess = webSshAccess;
        return this;
    }

    /**
     * Get the webRdpAccess property: The enabled access level for Web Access over RDP.
     * 
     * @return the webRdpAccess value.
     */
    public ConnectionType webRdpAccess() {
        return this.webRdpAccess;
    }

    /**
     * Set the webRdpAccess property: The enabled access level for Web Access over RDP.
     * 
     * @param webRdpAccess the webRdpAccess value to set.
     * @return the ConnectionProfile object itself.
     */
    public ConnectionProfile withWebRdpAccess(ConnectionType webRdpAccess) {
        this.webRdpAccess = webRdpAccess;
        return this;
    }

    /**
     * Get the clientSshAccess property: The enabled access level for Client Access over SSH.
     * 
     * @return the clientSshAccess value.
     */
    public ConnectionType clientSshAccess() {
        return this.clientSshAccess;
    }

    /**
     * Set the clientSshAccess property: The enabled access level for Client Access over SSH.
     * 
     * @param clientSshAccess the clientSshAccess value to set.
     * @return the ConnectionProfile object itself.
     */
    public ConnectionProfile withClientSshAccess(ConnectionType clientSshAccess) {
        this.clientSshAccess = clientSshAccess;
        return this;
    }

    /**
     * Get the clientRdpAccess property: The enabled access level for Client Access over RDP.
     * 
     * @return the clientRdpAccess value.
     */
    public ConnectionType clientRdpAccess() {
        return this.clientRdpAccess;
    }

    /**
     * Set the clientRdpAccess property: The enabled access level for Client Access over RDP.
     * 
     * @param clientRdpAccess the clientRdpAccess value to set.
     * @return the ConnectionProfile object itself.
     */
    public ConnectionProfile withClientRdpAccess(ConnectionType clientRdpAccess) {
        this.clientRdpAccess = clientRdpAccess;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("webSshAccess", this.webSshAccess == null ? null : this.webSshAccess.toString());
        jsonWriter.writeStringField("webRdpAccess", this.webRdpAccess == null ? null : this.webRdpAccess.toString());
        jsonWriter.writeStringField("clientSshAccess",
            this.clientSshAccess == null ? null : this.clientSshAccess.toString());
        jsonWriter.writeStringField("clientRdpAccess",
            this.clientRdpAccess == null ? null : this.clientRdpAccess.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectionProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectionProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectionProfile.
     */
    public static ConnectionProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectionProfile deserializedConnectionProfile = new ConnectionProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("webSshAccess".equals(fieldName)) {
                    deserializedConnectionProfile.webSshAccess = ConnectionType.fromString(reader.getString());
                } else if ("webRdpAccess".equals(fieldName)) {
                    deserializedConnectionProfile.webRdpAccess = ConnectionType.fromString(reader.getString());
                } else if ("clientSshAccess".equals(fieldName)) {
                    deserializedConnectionProfile.clientSshAccess = ConnectionType.fromString(reader.getString());
                } else if ("clientRdpAccess".equals(fieldName)) {
                    deserializedConnectionProfile.clientRdpAccess = ConnectionType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectionProfile;
        });
    }
}
