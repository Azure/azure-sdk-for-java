// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The connection information for the virtual machine. */
@Immutable
public final class VirtualMachineConnectionProfile {
    /*
     * The private IP address of the virtual machine.
     */
    @JsonProperty(value = "privateIpAddress", access = JsonProperty.Access.WRITE_ONLY)
    private String privateIpAddress;

    /*
     * Port and host name separated by semicolon for connecting via SSH protocol to the virtual machine.
     */
    @JsonProperty(value = "sshAuthority", access = JsonProperty.Access.WRITE_ONLY)
    private String sshAuthority;

    /*
     * URL for connecting via SSH protocol to the virtual machine in browser.
     */
    @JsonProperty(value = "sshInBrowserUrl", access = JsonProperty.Access.WRITE_ONLY)
    private String sshInBrowserUrl;

    /*
     * Port and host name separated by semicolon for connecting via RDP protocol to the virtual machine.
     */
    @JsonProperty(value = "rdpAuthority", access = JsonProperty.Access.WRITE_ONLY)
    private String rdpAuthority;

    /*
     * URL for connecting via RDP protocol to the virtual machine in browser.
     */
    @JsonProperty(value = "rdpInBrowserUrl", access = JsonProperty.Access.WRITE_ONLY)
    private String rdpInBrowserUrl;

    /*
     * The username used to log on to the virtual machine as admin.
     */
    @JsonProperty(value = "adminUsername", access = JsonProperty.Access.WRITE_ONLY)
    private String adminUsername;

    /*
     * The username used to log on to the virtual machine as non-admin, if one exists.
     */
    @JsonProperty(value = "nonAdminUsername", access = JsonProperty.Access.WRITE_ONLY)
    private String nonAdminUsername;

    /**
     * Get the privateIpAddress property: The private IP address of the virtual machine.
     *
     * @return the privateIpAddress value.
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }

    /**
     * Get the sshAuthority property: Port and host name separated by semicolon for connecting via SSH protocol to the
     * virtual machine.
     *
     * @return the sshAuthority value.
     */
    public String sshAuthority() {
        return this.sshAuthority;
    }

    /**
     * Get the sshInBrowserUrl property: URL for connecting via SSH protocol to the virtual machine in browser.
     *
     * @return the sshInBrowserUrl value.
     */
    public String sshInBrowserUrl() {
        return this.sshInBrowserUrl;
    }

    /**
     * Get the rdpAuthority property: Port and host name separated by semicolon for connecting via RDP protocol to the
     * virtual machine.
     *
     * @return the rdpAuthority value.
     */
    public String rdpAuthority() {
        return this.rdpAuthority;
    }

    /**
     * Get the rdpInBrowserUrl property: URL for connecting via RDP protocol to the virtual machine in browser.
     *
     * @return the rdpInBrowserUrl value.
     */
    public String rdpInBrowserUrl() {
        return this.rdpInBrowserUrl;
    }

    /**
     * Get the adminUsername property: The username used to log on to the virtual machine as admin.
     *
     * @return the adminUsername value.
     */
    public String adminUsername() {
        return this.adminUsername;
    }

    /**
     * Get the nonAdminUsername property: The username used to log on to the virtual machine as non-admin, if one
     * exists.
     *
     * @return the nonAdminUsername value.
     */
    public String nonAdminUsername() {
        return this.nonAdminUsername;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
