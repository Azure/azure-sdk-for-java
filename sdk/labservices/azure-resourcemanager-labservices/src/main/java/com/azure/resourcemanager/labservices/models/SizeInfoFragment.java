// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.math.BigDecimal;

/** Contains detailed information about a size. */
@Fluent
public final class SizeInfoFragment {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SizeInfoFragment.class);

    /*
     * Represents the actual compute size, e.g. Standard_A2_v2.
     */
    @JsonProperty(value = "computeSize")
    private String computeSize;

    /*
     * The pay-as-you-go price per hour this size will cost. It does not
     * include discounts and may not reflect the actual price the size will
     * cost.
     */
    @JsonProperty(value = "price")
    private BigDecimal price;

    /*
     * The number of cores a VM of this size has.
     */
    @JsonProperty(value = "numberOfCores")
    private Integer numberOfCores;

    /*
     * The amount of memory available (in GB).
     */
    @JsonProperty(value = "memory")
    private Double memory;

    /**
     * Get the computeSize property: Represents the actual compute size, e.g. Standard_A2_v2.
     *
     * @return the computeSize value.
     */
    public String computeSize() {
        return this.computeSize;
    }

    /**
     * Set the computeSize property: Represents the actual compute size, e.g. Standard_A2_v2.
     *
     * @param computeSize the computeSize value to set.
     * @return the SizeInfoFragment object itself.
     */
    public SizeInfoFragment withComputeSize(String computeSize) {
        this.computeSize = computeSize;
        return this;
    }

    /**
     * Get the price property: The pay-as-you-go price per hour this size will cost. It does not include discounts and
     * may not reflect the actual price the size will cost.
     *
     * @return the price value.
     */
    public BigDecimal price() {
        return this.price;
    }

    /**
     * Set the price property: The pay-as-you-go price per hour this size will cost. It does not include discounts and
     * may not reflect the actual price the size will cost.
     *
     * @param price the price value to set.
     * @return the SizeInfoFragment object itself.
     */
    public SizeInfoFragment withPrice(BigDecimal price) {
        this.price = price;
        return this;
    }

    /**
     * Get the numberOfCores property: The number of cores a VM of this size has.
     *
     * @return the numberOfCores value.
     */
    public Integer numberOfCores() {
        return this.numberOfCores;
    }

    /**
     * Set the numberOfCores property: The number of cores a VM of this size has.
     *
     * @param numberOfCores the numberOfCores value to set.
     * @return the SizeInfoFragment object itself.
     */
    public SizeInfoFragment withNumberOfCores(Integer numberOfCores) {
        this.numberOfCores = numberOfCores;
        return this;
    }

    /**
     * Get the memory property: The amount of memory available (in GB).
     *
     * @return the memory value.
     */
    public Double memory() {
        return this.memory;
    }

    /**
     * Set the memory property: The amount of memory available (in GB).
     *
     * @param memory the memory value to set.
     * @return the SizeInfoFragment object itself.
     */
    public SizeInfoFragment withMemory(Double memory) {
        this.memory = memory;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
