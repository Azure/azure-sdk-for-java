// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.labservices.models.RecurrencePattern;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Schedule resource properties used for updates.
 */
@Fluent
public class ScheduleUpdateProperties implements JsonSerializable<ScheduleUpdateProperties> {
    /*
     * When lab user virtual machines will be started. Timestamp offsets will be ignored and timeZoneId is used instead.
     */
    private OffsetDateTime startAt;

    /*
     * When lab user virtual machines will be stopped. Timestamp offsets will be ignored and timeZoneId is used instead.
     */
    private OffsetDateTime stopAt;

    /*
     * The recurrence pattern of the scheduled actions.
     */
    private RecurrencePattern recurrencePattern;

    /*
     * The IANA timezone id for the schedule.
     */
    private String timeZoneId;

    /*
     * Notes for this schedule.
     */
    private String notes;

    /**
     * Creates an instance of ScheduleUpdateProperties class.
     */
    public ScheduleUpdateProperties() {
    }

    /**
     * Get the startAt property: When lab user virtual machines will be started. Timestamp offsets will be ignored and
     * timeZoneId is used instead.
     * 
     * @return the startAt value.
     */
    public OffsetDateTime startAt() {
        return this.startAt;
    }

    /**
     * Set the startAt property: When lab user virtual machines will be started. Timestamp offsets will be ignored and
     * timeZoneId is used instead.
     * 
     * @param startAt the startAt value to set.
     * @return the ScheduleUpdateProperties object itself.
     */
    public ScheduleUpdateProperties withStartAt(OffsetDateTime startAt) {
        this.startAt = startAt;
        return this;
    }

    /**
     * Get the stopAt property: When lab user virtual machines will be stopped. Timestamp offsets will be ignored and
     * timeZoneId is used instead.
     * 
     * @return the stopAt value.
     */
    public OffsetDateTime stopAt() {
        return this.stopAt;
    }

    /**
     * Set the stopAt property: When lab user virtual machines will be stopped. Timestamp offsets will be ignored and
     * timeZoneId is used instead.
     * 
     * @param stopAt the stopAt value to set.
     * @return the ScheduleUpdateProperties object itself.
     */
    public ScheduleUpdateProperties withStopAt(OffsetDateTime stopAt) {
        this.stopAt = stopAt;
        return this;
    }

    /**
     * Get the recurrencePattern property: The recurrence pattern of the scheduled actions.
     * 
     * @return the recurrencePattern value.
     */
    public RecurrencePattern recurrencePattern() {
        return this.recurrencePattern;
    }

    /**
     * Set the recurrencePattern property: The recurrence pattern of the scheduled actions.
     * 
     * @param recurrencePattern the recurrencePattern value to set.
     * @return the ScheduleUpdateProperties object itself.
     */
    public ScheduleUpdateProperties withRecurrencePattern(RecurrencePattern recurrencePattern) {
        this.recurrencePattern = recurrencePattern;
        return this;
    }

    /**
     * Get the timeZoneId property: The IANA timezone id for the schedule.
     * 
     * @return the timeZoneId value.
     */
    public String timeZoneId() {
        return this.timeZoneId;
    }

    /**
     * Set the timeZoneId property: The IANA timezone id for the schedule.
     * 
     * @param timeZoneId the timeZoneId value to set.
     * @return the ScheduleUpdateProperties object itself.
     */
    public ScheduleUpdateProperties withTimeZoneId(String timeZoneId) {
        this.timeZoneId = timeZoneId;
        return this;
    }

    /**
     * Get the notes property: Notes for this schedule.
     * 
     * @return the notes value.
     */
    public String notes() {
        return this.notes;
    }

    /**
     * Set the notes property: Notes for this schedule.
     * 
     * @param notes the notes value to set.
     * @return the ScheduleUpdateProperties object itself.
     */
    public ScheduleUpdateProperties withNotes(String notes) {
        this.notes = notes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (recurrencePattern() != null) {
            recurrencePattern().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startAt",
            this.startAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startAt));
        jsonWriter.writeStringField("stopAt",
            this.stopAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.stopAt));
        jsonWriter.writeJsonField("recurrencePattern", this.recurrencePattern);
        jsonWriter.writeStringField("timeZoneId", this.timeZoneId);
        jsonWriter.writeStringField("notes", this.notes);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScheduleUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScheduleUpdateProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScheduleUpdateProperties.
     */
    public static ScheduleUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScheduleUpdateProperties deserializedScheduleUpdateProperties = new ScheduleUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startAt".equals(fieldName)) {
                    deserializedScheduleUpdateProperties.startAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("stopAt".equals(fieldName)) {
                    deserializedScheduleUpdateProperties.stopAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("recurrencePattern".equals(fieldName)) {
                    deserializedScheduleUpdateProperties.recurrencePattern = RecurrencePattern.fromJson(reader);
                } else if ("timeZoneId".equals(fieldName)) {
                    deserializedScheduleUpdateProperties.timeZoneId = reader.getString();
                } else if ("notes".equals(fieldName)) {
                    deserializedScheduleUpdateProperties.notes = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScheduleUpdateProperties;
        });
    }
}
