// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The availability information of sizes across regions. */
@Fluent
public final class RegionalAvailability {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RegionalAvailability.class);

    /*
     * Corresponding region
     */
    @JsonProperty(value = "region")
    private String region;

    /*
     * List of all the size information for the region
     */
    @JsonProperty(value = "sizeAvailabilities")
    private List<SizeAvailability> sizeAvailabilities;

    /**
     * Get the region property: Corresponding region.
     *
     * @return the region value.
     */
    public String region() {
        return this.region;
    }

    /**
     * Set the region property: Corresponding region.
     *
     * @param region the region value to set.
     * @return the RegionalAvailability object itself.
     */
    public RegionalAvailability withRegion(String region) {
        this.region = region;
        return this;
    }

    /**
     * Get the sizeAvailabilities property: List of all the size information for the region.
     *
     * @return the sizeAvailabilities value.
     */
    public List<SizeAvailability> sizeAvailabilities() {
        return this.sizeAvailabilities;
    }

    /**
     * Set the sizeAvailabilities property: List of all the size information for the region.
     *
     * @param sizeAvailabilities the sizeAvailabilities value to set.
     * @return the RegionalAvailability object itself.
     */
    public RegionalAvailability withSizeAvailabilities(List<SizeAvailability> sizeAvailabilities) {
        this.sizeAvailabilities = sizeAvailabilities;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sizeAvailabilities() != null) {
            sizeAvailabilities().forEach(e -> e.validate());
        }
    }
}
