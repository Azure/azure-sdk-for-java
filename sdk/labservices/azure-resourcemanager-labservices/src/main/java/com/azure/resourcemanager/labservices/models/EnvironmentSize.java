// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.math.BigDecimal;
import java.util.List;

/** Represents a size category supported by this Lab Account (small, medium or large). */
@Fluent
public final class EnvironmentSize {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(EnvironmentSize.class);

    /*
     * The size category
     */
    @JsonProperty(value = "name")
    private ManagedLabVmSize name;

    /*
     * Represents a set of compute sizes that can serve this given size type
     */
    @JsonProperty(value = "vmSizes")
    private List<SizeInfo> vmSizes;

    /*
     * The pay-as-you-go dollar price per hour this size will cost. It does not
     * include discounts and may not reflect the actual price the size will
     * cost. This is the maximum price of all prices within this tier.
     */
    @JsonProperty(value = "maxPrice", access = JsonProperty.Access.WRITE_ONLY)
    private BigDecimal maxPrice;

    /*
     * The number of cores a VM of this size has. This is the minimum number of
     * cores within this tier.
     */
    @JsonProperty(value = "minNumberOfCores", access = JsonProperty.Access.WRITE_ONLY)
    private Integer minNumberOfCores;

    /*
     * The amount of memory available (in GB). This is the minimum amount of
     * memory within this tier.
     */
    @JsonProperty(value = "minMemory", access = JsonProperty.Access.WRITE_ONLY)
    private Double minMemory;

    /**
     * Get the name property: The size category.
     *
     * @return the name value.
     */
    public ManagedLabVmSize name() {
        return this.name;
    }

    /**
     * Set the name property: The size category.
     *
     * @param name the name value to set.
     * @return the EnvironmentSize object itself.
     */
    public EnvironmentSize withName(ManagedLabVmSize name) {
        this.name = name;
        return this;
    }

    /**
     * Get the vmSizes property: Represents a set of compute sizes that can serve this given size type.
     *
     * @return the vmSizes value.
     */
    public List<SizeInfo> vmSizes() {
        return this.vmSizes;
    }

    /**
     * Set the vmSizes property: Represents a set of compute sizes that can serve this given size type.
     *
     * @param vmSizes the vmSizes value to set.
     * @return the EnvironmentSize object itself.
     */
    public EnvironmentSize withVmSizes(List<SizeInfo> vmSizes) {
        this.vmSizes = vmSizes;
        return this;
    }

    /**
     * Get the maxPrice property: The pay-as-you-go dollar price per hour this size will cost. It does not include
     * discounts and may not reflect the actual price the size will cost. This is the maximum price of all prices within
     * this tier.
     *
     * @return the maxPrice value.
     */
    public BigDecimal maxPrice() {
        return this.maxPrice;
    }

    /**
     * Get the minNumberOfCores property: The number of cores a VM of this size has. This is the minimum number of cores
     * within this tier.
     *
     * @return the minNumberOfCores value.
     */
    public Integer minNumberOfCores() {
        return this.minNumberOfCores;
    }

    /**
     * Get the minMemory property: The amount of memory available (in GB). This is the minimum amount of memory within
     * this tier.
     *
     * @return the minMemory value.
     */
    public Double minMemory() {
        return this.minMemory;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (vmSizes() != null) {
            vmSizes().forEach(e -> e.validate());
        }
    }
}
