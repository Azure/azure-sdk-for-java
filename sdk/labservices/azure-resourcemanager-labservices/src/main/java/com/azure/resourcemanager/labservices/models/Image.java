// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.labservices.fluent.models.ImageInner;
import java.util.List;

/** An immutable client-side representation of Image. */
public interface Image {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Metadata pertaining to creation and last modification of the image.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the provisioningState property: Current provisioning state of the image.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the displayName property: The image display name.
     *
     * @return the displayName value.
     */
    String displayName();

    /**
     * Gets the description property: A description of the image.
     *
     * @return the description value.
     */
    String description();

    /**
     * Gets the iconUrl property: URL of the image icon.
     *
     * @return the iconUrl value.
     */
    String iconUrl();

    /**
     * Gets the author property: The image author.
     *
     * @return the author value.
     */
    String author();

    /**
     * Gets the osType property: The OS Type of the image.
     *
     * @return the osType value.
     */
    OsType osType();

    /**
     * Gets the plan property: The ID of marketplace plan associated with the image (optional).
     *
     * @return the plan value.
     */
    String plan();

    /**
     * Gets the termsStatus property: The status of image terms of use (enabled = accepted, disabled = not accepted).
     *
     * @return the termsStatus value.
     */
    EnableState termsStatus();

    /**
     * Gets the offer property: The ID of an offer associated with the image.
     *
     * @return the offer value.
     */
    String offer();

    /**
     * Gets the publisher property: The ID of the publisher of the image.
     *
     * @return the publisher value.
     */
    String publisher();

    /**
     * Gets the sku property: The image SKU.
     *
     * @return the sku value.
     */
    String sku();

    /**
     * Gets the version property: The image version.
     *
     * @return the version value.
     */
    String version();

    /**
     * Gets the sharedGalleryId property: The ID for the image in the shared gallery.
     *
     * @return the sharedGalleryId value.
     */
    String sharedGalleryId();

    /**
     * Gets the availableRegions property: The available regions of the image in the shared gallery.
     *
     * @return the availableRegions value.
     */
    List<String> availableRegions();

    /**
     * Gets the osState property: The OS State of the image.
     *
     * @return the osState value.
     */
    OsState osState();

    /**
     * Gets the enabledState property: Is the image enabled.
     *
     * @return the enabledState value.
     */
    EnableState enabledState();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.labservices.fluent.models.ImageInner object.
     *
     * @return the inner object.
     */
    ImageInner innerModel();

    /** The entirety of the Image definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The Image definition stages. */
    interface DefinitionStages {
        /** The first stage of the Image definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the Image definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, labPlanName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param labPlanName The name of the lab plan that uniquely identifies it within containing resource group.
             *     Used in resource URIs and in UI.
             * @return the next definition stage.
             */
            WithCreate withExistingLabPlan(String resourceGroupName, String labPlanName);
        }
        /**
         * The stage of the Image definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithAvailableRegions, DefinitionStages.WithEnabledState {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Image create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Image create(Context context);
        }
        /** The stage of the Image definition allowing to specify availableRegions. */
        interface WithAvailableRegions {
            /**
             * Specifies the availableRegions property: The available regions of the image in the shared gallery..
             *
             * @param availableRegions The available regions of the image in the shared gallery.
             * @return the next definition stage.
             */
            WithCreate withAvailableRegions(List<String> availableRegions);
        }
        /** The stage of the Image definition allowing to specify enabledState. */
        interface WithEnabledState {
            /**
             * Specifies the enabledState property: Is the image enabled.
             *
             * @param enabledState Is the image enabled.
             * @return the next definition stage.
             */
            WithCreate withEnabledState(EnableState enabledState);
        }
    }
    /**
     * Begins update for the Image resource.
     *
     * @return the stage of resource update.
     */
    Image.Update update();

    /** The template for Image update. */
    interface Update extends UpdateStages.WithEnabledState {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Image apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Image apply(Context context);
    }
    /** The Image update stages. */
    interface UpdateStages {
        /** The stage of the Image update allowing to specify enabledState. */
        interface WithEnabledState {
            /**
             * Specifies the enabledState property: Is the image enabled.
             *
             * @param enabledState Is the image enabled.
             * @return the next definition stage.
             */
            Update withEnabledState(EnableState enabledState);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Image refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Image refresh(Context context);
}
