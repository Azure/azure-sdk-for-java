// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.labservices.fluent.models.EnvironmentSettingInner;
import java.time.OffsetDateTime;
import java.util.Map;

/** An immutable client-side representation of EnvironmentSetting. */
public interface EnvironmentSetting {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the publishingState property: Describes the readiness of this environment setting.
     *
     * @return the publishingState value.
     */
    PublishingState publishingState();

    /**
     * Gets the configurationState property: Describes the user's progress in configuring their environment setting.
     *
     * @return the configurationState value.
     */
    ConfigurationState configurationState();

    /**
     * Gets the description property: Describes the environment and its resource settings.
     *
     * @return the description value.
     */
    String description();

    /**
     * Gets the title property: Brief title describing the environment and its resource settings.
     *
     * @return the title value.
     */
    String title();

    /**
     * Gets the resourceSettings property: The resource specific settings.
     *
     * @return the resourceSettings value.
     */
    ResourceSettings resourceSettings();

    /**
     * Gets the lastChanged property: Time when the template VM was last changed.
     *
     * @return the lastChanged value.
     */
    OffsetDateTime lastChanged();

    /**
     * Gets the lastPublished property: Time when the template VM was last sent for publishing.
     *
     * @return the lastPublished value.
     */
    OffsetDateTime lastPublished();

    /**
     * Gets the provisioningState property: The provisioning status of the resource.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @return the uniqueIdentifier value.
     */
    String uniqueIdentifier();

    /**
     * Gets the latestOperationResult property: The details of the latest operation. ex: status, error.
     *
     * @return the latestOperationResult value.
     */
    LatestOperationResult latestOperationResult();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.labservices.fluent.models.EnvironmentSettingInner object.
     *
     * @return the inner object.
     */
    EnvironmentSettingInner innerModel();

    /** The entirety of the EnvironmentSetting definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }
    /** The EnvironmentSetting definition stages. */
    interface DefinitionStages {
        /** The first stage of the EnvironmentSetting definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the EnvironmentSetting definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }
        /** The stage of the EnvironmentSetting definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, labAccountName, labName.
             *
             * @param resourceGroupName The name of the resource group.
             * @param labAccountName The name of the lab Account.
             * @param labName The name of the lab.
             * @return the next definition stage.
             */
            WithCreate withExistingLab(String resourceGroupName, String labAccountName, String labName);
        }
        /**
         * The stage of the EnvironmentSetting definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithConfigurationState,
                DefinitionStages.WithDescription,
                DefinitionStages.WithTitle,
                DefinitionStages.WithResourceSettings,
                DefinitionStages.WithProvisioningState,
                DefinitionStages.WithUniqueIdentifier {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            EnvironmentSetting create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            EnvironmentSetting create(Context context);
        }
        /** The stage of the EnvironmentSetting definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the EnvironmentSetting definition allowing to specify configurationState. */
        interface WithConfigurationState {
            /**
             * Specifies the configurationState property: Describes the user's progress in configuring their environment
             * setting.
             *
             * @param configurationState Describes the user's progress in configuring their environment setting.
             * @return the next definition stage.
             */
            WithCreate withConfigurationState(ConfigurationState configurationState);
        }
        /** The stage of the EnvironmentSetting definition allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: Describes the environment and its resource settings.
             *
             * @param description Describes the environment and its resource settings.
             * @return the next definition stage.
             */
            WithCreate withDescription(String description);
        }
        /** The stage of the EnvironmentSetting definition allowing to specify title. */
        interface WithTitle {
            /**
             * Specifies the title property: Brief title describing the environment and its resource settings.
             *
             * @param title Brief title describing the environment and its resource settings.
             * @return the next definition stage.
             */
            WithCreate withTitle(String title);
        }
        /** The stage of the EnvironmentSetting definition allowing to specify resourceSettings. */
        interface WithResourceSettings {
            /**
             * Specifies the resourceSettings property: The resource specific settings.
             *
             * @param resourceSettings The resource specific settings.
             * @return the next definition stage.
             */
            WithCreate withResourceSettings(ResourceSettings resourceSettings);
        }
        /** The stage of the EnvironmentSetting definition allowing to specify provisioningState. */
        interface WithProvisioningState {
            /**
             * Specifies the provisioningState property: The provisioning status of the resource..
             *
             * @param provisioningState The provisioning status of the resource.
             * @return the next definition stage.
             */
            WithCreate withProvisioningState(String provisioningState);
        }
        /** The stage of the EnvironmentSetting definition allowing to specify uniqueIdentifier. */
        interface WithUniqueIdentifier {
            /**
             * Specifies the uniqueIdentifier property: The unique immutable identifier of a resource (Guid)..
             *
             * @param uniqueIdentifier The unique immutable identifier of a resource (Guid).
             * @return the next definition stage.
             */
            WithCreate withUniqueIdentifier(String uniqueIdentifier);
        }
    }
    /**
     * Begins update for the EnvironmentSetting resource.
     *
     * @return the stage of resource update.
     */
    EnvironmentSetting.Update update();

    /** The template for EnvironmentSetting update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithConfigurationState,
            UpdateStages.WithDescription,
            UpdateStages.WithTitle,
            UpdateStages.WithResourceSettings,
            UpdateStages.WithProvisioningState,
            UpdateStages.WithUniqueIdentifier {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        EnvironmentSetting apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        EnvironmentSetting apply(Context context);
    }
    /** The EnvironmentSetting update stages. */
    interface UpdateStages {
        /** The stage of the EnvironmentSetting update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the EnvironmentSetting update allowing to specify configurationState. */
        interface WithConfigurationState {
            /**
             * Specifies the configurationState property: Describes the user's progress in configuring their environment
             * setting.
             *
             * @param configurationState Describes the user's progress in configuring their environment setting.
             * @return the next definition stage.
             */
            Update withConfigurationState(ConfigurationState configurationState);
        }
        /** The stage of the EnvironmentSetting update allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: Describes the environment and its resource settings.
             *
             * @param description Describes the environment and its resource settings.
             * @return the next definition stage.
             */
            Update withDescription(String description);
        }
        /** The stage of the EnvironmentSetting update allowing to specify title. */
        interface WithTitle {
            /**
             * Specifies the title property: Brief title describing the environment and its resource settings.
             *
             * @param title Brief title describing the environment and its resource settings.
             * @return the next definition stage.
             */
            Update withTitle(String title);
        }
        /** The stage of the EnvironmentSetting update allowing to specify resourceSettings. */
        interface WithResourceSettings {
            /**
             * Specifies the resourceSettings property: The resource specific settings.
             *
             * @param resourceSettings The resource specific settings.
             * @return the next definition stage.
             */
            Update withResourceSettings(ResourceSettingsFragment resourceSettings);
        }
        /** The stage of the EnvironmentSetting update allowing to specify provisioningState. */
        interface WithProvisioningState {
            /**
             * Specifies the provisioningState property: The provisioning status of the resource..
             *
             * @param provisioningState The provisioning status of the resource.
             * @return the next definition stage.
             */
            Update withProvisioningState(String provisioningState);
        }
        /** The stage of the EnvironmentSetting update allowing to specify uniqueIdentifier. */
        interface WithUniqueIdentifier {
            /**
             * Specifies the uniqueIdentifier property: The unique immutable identifier of a resource (Guid)..
             *
             * @param uniqueIdentifier The unique immutable identifier of a resource (Guid).
             * @return the next definition stage.
             */
            Update withUniqueIdentifier(String uniqueIdentifier);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    EnvironmentSetting refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    EnvironmentSetting refresh(Context context);

    /**
     * Claims a random environment for a user in an environment settings.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void claimAny();

    /**
     * Claims a random environment for a user in an environment settings.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<Void> claimAnyWithResponse(Context context);

    /**
     * Provisions/deprovisions required resources for an environment setting based on current state of the
     * lab/environment setting.
     *
     * @param publishPayload Payload for Publish operation on EnvironmentSetting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void publish(PublishPayload publishPayload);

    /**
     * Provisions/deprovisions required resources for an environment setting based on current state of the
     * lab/environment setting.
     *
     * @param publishPayload Payload for Publish operation on EnvironmentSetting.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<Void> publishWithResponse(PublishPayload publishPayload, Context context);

    /**
     * Starts a template by starting all resources inside the template. This operation can take a while to complete.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start();

    /**
     * Starts a template by starting all resources inside the template. This operation can take a while to complete.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start(Context context);

    /**
     * Starts a template by starting all resources inside the template. This operation can take a while to complete.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void stop();

    /**
     * Starts a template by starting all resources inside the template. This operation can take a while to complete.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void stop(Context context);
}
