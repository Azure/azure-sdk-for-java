// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.labservices.fluent.EnvironmentsClient;
import com.azure.resourcemanager.labservices.fluent.models.EnvironmentInner;
import com.azure.resourcemanager.labservices.models.Environment;
import com.azure.resourcemanager.labservices.models.Environments;
import com.azure.resourcemanager.labservices.models.ResetPasswordPayload;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class EnvironmentsImpl implements Environments {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(EnvironmentsImpl.class);

    private final EnvironmentsClient innerClient;

    private final com.azure.resourcemanager.labservices.ManagedLabsManager serviceManager;

    public EnvironmentsImpl(
        EnvironmentsClient innerClient, com.azure.resourcemanager.labservices.ManagedLabsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Environment> list(
        String resourceGroupName, String labAccountName, String labName, String environmentSettingName) {
        PagedIterable<EnvironmentInner> inner =
            this.serviceClient().list(resourceGroupName, labAccountName, labName, environmentSettingName);
        return Utils.mapPage(inner, inner1 -> new EnvironmentImpl(inner1, this.manager()));
    }

    public PagedIterable<Environment> list(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String expand,
        String filter,
        Integer top,
        String orderby,
        Context context) {
        PagedIterable<EnvironmentInner> inner =
            this
                .serviceClient()
                .list(
                    resourceGroupName,
                    labAccountName,
                    labName,
                    environmentSettingName,
                    expand,
                    filter,
                    top,
                    orderby,
                    context);
        return Utils.mapPage(inner, inner1 -> new EnvironmentImpl(inner1, this.manager()));
    }

    public Environment get(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName) {
        EnvironmentInner inner =
            this
                .serviceClient()
                .get(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName);
        if (inner != null) {
            return new EnvironmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Environment> getWithResponse(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName,
        String expand,
        Context context) {
        Response<EnvironmentInner> inner =
            this
                .serviceClient()
                .getWithResponse(
                    resourceGroupName,
                    labAccountName,
                    labName,
                    environmentSettingName,
                    environmentName,
                    expand,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new EnvironmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName) {
        this
            .serviceClient()
            .delete(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName);
    }

    public void delete(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName,
        Context context) {
        this
            .serviceClient()
            .delete(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, context);
    }

    public void claim(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName) {
        this.serviceClient().claim(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName);
    }

    public Response<Void> claimWithResponse(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName,
        Context context) {
        return this
            .serviceClient()
            .claimWithResponse(
                resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, context);
    }

    public void resetPassword(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName,
        ResetPasswordPayload resetPasswordPayload) {
        this
            .serviceClient()
            .resetPassword(
                resourceGroupName,
                labAccountName,
                labName,
                environmentSettingName,
                environmentName,
                resetPasswordPayload);
    }

    public void resetPassword(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName,
        ResetPasswordPayload resetPasswordPayload,
        Context context) {
        this
            .serviceClient()
            .resetPassword(
                resourceGroupName,
                labAccountName,
                labName,
                environmentSettingName,
                environmentName,
                resetPasswordPayload,
                context);
    }

    public void start(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName) {
        this.serviceClient().start(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName);
    }

    public void start(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName,
        Context context) {
        this
            .serviceClient()
            .start(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, context);
    }

    public void stop(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName) {
        this.serviceClient().stop(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName);
    }

    public void stop(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String environmentName,
        Context context) {
        this
            .serviceClient()
            .stop(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, context);
    }

    public Environment getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String labAccountName = Utils.getValueFromIdByName(id, "labaccounts");
        if (labAccountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labaccounts'.", id)));
        }
        String labName = Utils.getValueFromIdByName(id, "labs");
        if (labName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labs'.", id)));
        }
        String environmentSettingName = Utils.getValueFromIdByName(id, "environmentsettings");
        if (environmentSettingName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'environmentsettings'.", id)));
        }
        String environmentName = Utils.getValueFromIdByName(id, "environments");
        if (environmentName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'environments'.", id)));
        }
        String localExpand = null;
        return this
            .getWithResponse(
                resourceGroupName,
                labAccountName,
                labName,
                environmentSettingName,
                environmentName,
                localExpand,
                Context.NONE)
            .getValue();
    }

    public Response<Environment> getByIdWithResponse(String id, String expand, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String labAccountName = Utils.getValueFromIdByName(id, "labaccounts");
        if (labAccountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labaccounts'.", id)));
        }
        String labName = Utils.getValueFromIdByName(id, "labs");
        if (labName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labs'.", id)));
        }
        String environmentSettingName = Utils.getValueFromIdByName(id, "environmentsettings");
        if (environmentSettingName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'environmentsettings'.", id)));
        }
        String environmentName = Utils.getValueFromIdByName(id, "environments");
        if (environmentName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'environments'.", id)));
        }
        return this
            .getWithResponse(
                resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, expand, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String labAccountName = Utils.getValueFromIdByName(id, "labaccounts");
        if (labAccountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labaccounts'.", id)));
        }
        String labName = Utils.getValueFromIdByName(id, "labs");
        if (labName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labs'.", id)));
        }
        String environmentSettingName = Utils.getValueFromIdByName(id, "environmentsettings");
        if (environmentSettingName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'environmentsettings'.", id)));
        }
        String environmentName = Utils.getValueFromIdByName(id, "environments");
        if (environmentName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'environments'.", id)));
        }
        this.delete(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String labAccountName = Utils.getValueFromIdByName(id, "labaccounts");
        if (labAccountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labaccounts'.", id)));
        }
        String labName = Utils.getValueFromIdByName(id, "labs");
        if (labName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labs'.", id)));
        }
        String environmentSettingName = Utils.getValueFromIdByName(id, "environmentsettings");
        if (environmentSettingName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'environmentsettings'.", id)));
        }
        String environmentName = Utils.getValueFromIdByName(id, "environments");
        if (environmentName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'environments'.", id)));
        }
        this.delete(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, context);
    }

    private EnvironmentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.labservices.ManagedLabsManager manager() {
        return this.serviceManager;
    }

    public EnvironmentImpl define(String name) {
        return new EnvironmentImpl(name, this.manager());
    }
}
