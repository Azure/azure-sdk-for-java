// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;

/**
 * The base virtual machine configuration for a lab.
 */
@Fluent
public final class VirtualMachineProfile implements JsonSerializable<VirtualMachineProfile> {
    /*
     * Indicates what lab virtual machines are created from.
     */
    private CreateOption createOption;

    /*
     * The image configuration for lab virtual machines.
     */
    private ImageReference imageReference;

    /*
     * The OS type of the image
     */
    private OsType osType;

    /*
     * The SKU for the lab. Defines the type of virtual machines used in the lab.
     */
    private Sku sku;

    /*
     * Additional VM capabilities.
     */
    private VirtualMachineAdditionalCapabilities additionalCapabilities;

    /*
     * The initial quota alloted to each lab user. Must be a time span between 0 and 9999 hours.
     */
    private Duration usageQuota;

    /*
     * Enabling this option will use the same password for all user VMs.
     */
    private EnableState useSharedPassword;

    /*
     * Credentials for the admin user on the VM.
     */
    private Credentials adminUser;

    /*
     * Credentials for the non-admin user on the VM, if one exists.
     */
    private Credentials nonAdminUser;

    /**
     * Creates an instance of VirtualMachineProfile class.
     */
    public VirtualMachineProfile() {
    }

    /**
     * Get the createOption property: Indicates what lab virtual machines are created from.
     * 
     * @return the createOption value.
     */
    public CreateOption createOption() {
        return this.createOption;
    }

    /**
     * Set the createOption property: Indicates what lab virtual machines are created from.
     * 
     * @param createOption the createOption value to set.
     * @return the VirtualMachineProfile object itself.
     */
    public VirtualMachineProfile withCreateOption(CreateOption createOption) {
        this.createOption = createOption;
        return this;
    }

    /**
     * Get the imageReference property: The image configuration for lab virtual machines.
     * 
     * @return the imageReference value.
     */
    public ImageReference imageReference() {
        return this.imageReference;
    }

    /**
     * Set the imageReference property: The image configuration for lab virtual machines.
     * 
     * @param imageReference the imageReference value to set.
     * @return the VirtualMachineProfile object itself.
     */
    public VirtualMachineProfile withImageReference(ImageReference imageReference) {
        this.imageReference = imageReference;
        return this;
    }

    /**
     * Get the osType property: The OS type of the image.
     * 
     * @return the osType value.
     */
    public OsType osType() {
        return this.osType;
    }

    /**
     * Get the sku property: The SKU for the lab. Defines the type of virtual machines used in the lab.
     * 
     * @return the sku value.
     */
    public Sku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The SKU for the lab. Defines the type of virtual machines used in the lab.
     * 
     * @param sku the sku value to set.
     * @return the VirtualMachineProfile object itself.
     */
    public VirtualMachineProfile withSku(Sku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the additionalCapabilities property: Additional VM capabilities.
     * 
     * @return the additionalCapabilities value.
     */
    public VirtualMachineAdditionalCapabilities additionalCapabilities() {
        return this.additionalCapabilities;
    }

    /**
     * Set the additionalCapabilities property: Additional VM capabilities.
     * 
     * @param additionalCapabilities the additionalCapabilities value to set.
     * @return the VirtualMachineProfile object itself.
     */
    public VirtualMachineProfile
        withAdditionalCapabilities(VirtualMachineAdditionalCapabilities additionalCapabilities) {
        this.additionalCapabilities = additionalCapabilities;
        return this;
    }

    /**
     * Get the usageQuota property: The initial quota alloted to each lab user. Must be a time span between 0 and 9999
     * hours.
     * 
     * @return the usageQuota value.
     */
    public Duration usageQuota() {
        return this.usageQuota;
    }

    /**
     * Set the usageQuota property: The initial quota alloted to each lab user. Must be a time span between 0 and 9999
     * hours.
     * 
     * @param usageQuota the usageQuota value to set.
     * @return the VirtualMachineProfile object itself.
     */
    public VirtualMachineProfile withUsageQuota(Duration usageQuota) {
        this.usageQuota = usageQuota;
        return this;
    }

    /**
     * Get the useSharedPassword property: Enabling this option will use the same password for all user VMs.
     * 
     * @return the useSharedPassword value.
     */
    public EnableState useSharedPassword() {
        return this.useSharedPassword;
    }

    /**
     * Set the useSharedPassword property: Enabling this option will use the same password for all user VMs.
     * 
     * @param useSharedPassword the useSharedPassword value to set.
     * @return the VirtualMachineProfile object itself.
     */
    public VirtualMachineProfile withUseSharedPassword(EnableState useSharedPassword) {
        this.useSharedPassword = useSharedPassword;
        return this;
    }

    /**
     * Get the adminUser property: Credentials for the admin user on the VM.
     * 
     * @return the adminUser value.
     */
    public Credentials adminUser() {
        return this.adminUser;
    }

    /**
     * Set the adminUser property: Credentials for the admin user on the VM.
     * 
     * @param adminUser the adminUser value to set.
     * @return the VirtualMachineProfile object itself.
     */
    public VirtualMachineProfile withAdminUser(Credentials adminUser) {
        this.adminUser = adminUser;
        return this;
    }

    /**
     * Get the nonAdminUser property: Credentials for the non-admin user on the VM, if one exists.
     * 
     * @return the nonAdminUser value.
     */
    public Credentials nonAdminUser() {
        return this.nonAdminUser;
    }

    /**
     * Set the nonAdminUser property: Credentials for the non-admin user on the VM, if one exists.
     * 
     * @param nonAdminUser the nonAdminUser value to set.
     * @return the VirtualMachineProfile object itself.
     */
    public VirtualMachineProfile withNonAdminUser(Credentials nonAdminUser) {
        this.nonAdminUser = nonAdminUser;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (createOption() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property createOption in model VirtualMachineProfile"));
        }
        if (imageReference() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property imageReference in model VirtualMachineProfile"));
        } else {
            imageReference().validate();
        }
        if (sku() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property sku in model VirtualMachineProfile"));
        } else {
            sku().validate();
        }
        if (additionalCapabilities() != null) {
            additionalCapabilities().validate();
        }
        if (usageQuota() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property usageQuota in model VirtualMachineProfile"));
        }
        if (adminUser() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property adminUser in model VirtualMachineProfile"));
        } else {
            adminUser().validate();
        }
        if (nonAdminUser() != null) {
            nonAdminUser().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VirtualMachineProfile.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("createOption", this.createOption == null ? null : this.createOption.toString());
        jsonWriter.writeJsonField("imageReference", this.imageReference);
        jsonWriter.writeJsonField("sku", this.sku);
        jsonWriter.writeStringField("usageQuota", CoreUtils.durationToStringWithDays(this.usageQuota));
        jsonWriter.writeJsonField("adminUser", this.adminUser);
        jsonWriter.writeJsonField("additionalCapabilities", this.additionalCapabilities);
        jsonWriter.writeStringField("useSharedPassword",
            this.useSharedPassword == null ? null : this.useSharedPassword.toString());
        jsonWriter.writeJsonField("nonAdminUser", this.nonAdminUser);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineProfile if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VirtualMachineProfile.
     */
    public static VirtualMachineProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineProfile deserializedVirtualMachineProfile = new VirtualMachineProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("createOption".equals(fieldName)) {
                    deserializedVirtualMachineProfile.createOption = CreateOption.fromString(reader.getString());
                } else if ("imageReference".equals(fieldName)) {
                    deserializedVirtualMachineProfile.imageReference = ImageReference.fromJson(reader);
                } else if ("sku".equals(fieldName)) {
                    deserializedVirtualMachineProfile.sku = Sku.fromJson(reader);
                } else if ("usageQuota".equals(fieldName)) {
                    deserializedVirtualMachineProfile.usageQuota
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("adminUser".equals(fieldName)) {
                    deserializedVirtualMachineProfile.adminUser = Credentials.fromJson(reader);
                } else if ("osType".equals(fieldName)) {
                    deserializedVirtualMachineProfile.osType = OsType.fromString(reader.getString());
                } else if ("additionalCapabilities".equals(fieldName)) {
                    deserializedVirtualMachineProfile.additionalCapabilities
                        = VirtualMachineAdditionalCapabilities.fromJson(reader);
                } else if ("useSharedPassword".equals(fieldName)) {
                    deserializedVirtualMachineProfile.useSharedPassword = EnableState.fromString(reader.getString());
                } else if ("nonAdminUser".equals(fieldName)) {
                    deserializedVirtualMachineProfile.nonAdminUser = Credentials.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineProfile;
        });
    }
}
