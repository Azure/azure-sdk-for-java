// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.labservices.fluent.models.EnvironmentSettingInner;
import com.azure.resourcemanager.labservices.models.EnvironmentSettingFragment;
import com.azure.resourcemanager.labservices.models.PublishPayload;

/** An instance of this class provides access to all the operations defined in EnvironmentSettingsClient. */
public interface EnvironmentSettingsClient {
    /**
     * List environment setting in a given lab.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a list operation.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<EnvironmentSettingInner> list(String resourceGroupName, String labAccountName, String labName);

    /**
     * List environment setting in a given lab.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param expand Specify the $expand query. Example: 'properties($select=publishingState)'.
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a list operation.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<EnvironmentSettingInner> list(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String expand,
        String filter,
        Integer top,
        String orderby,
        Context context);

    /**
     * Get environment setting.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return environment setting.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EnvironmentSettingInner get(
        String resourceGroupName, String labAccountName, String labName, String environmentSettingName);

    /**
     * Get environment setting.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param expand Specify the $expand query. Example: 'properties($select=publishingState)'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return environment setting.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<EnvironmentSettingInner> getWithResponse(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        String expand,
        Context context);

    /**
     * Create or replace an existing Environment Setting. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentSetting Represents settings of an environment, from which environment instances would be
     *     created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents settings of an environment, from which environment instances would be created.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<EnvironmentSettingInner>, EnvironmentSettingInner> beginCreateOrUpdate(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        EnvironmentSettingInner environmentSetting);

    /**
     * Create or replace an existing Environment Setting. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentSetting Represents settings of an environment, from which environment instances would be
     *     created.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents settings of an environment, from which environment instances would be created.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<EnvironmentSettingInner>, EnvironmentSettingInner> beginCreateOrUpdate(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        EnvironmentSettingInner environmentSetting,
        Context context);

    /**
     * Create or replace an existing Environment Setting. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentSetting Represents settings of an environment, from which environment instances would be
     *     created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents settings of an environment, from which environment instances would be created.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EnvironmentSettingInner createOrUpdate(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        EnvironmentSettingInner environmentSetting);

    /**
     * Create or replace an existing Environment Setting. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentSetting Represents settings of an environment, from which environment instances would be
     *     created.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents settings of an environment, from which environment instances would be created.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EnvironmentSettingInner createOrUpdate(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        EnvironmentSettingInner environmentSetting,
        Context context);

    /**
     * Delete environment setting. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String labAccountName, String labName, String environmentSettingName);

    /**
     * Delete environment setting. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        Context context);

    /**
     * Delete environment setting. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String labAccountName, String labName, String environmentSettingName);

    /**
     * Delete environment setting. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        Context context);

    /**
     * Modify properties of environment setting.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentSetting Represents settings of an environment, from which environment instances would be
     *     created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents settings of an environment, from which environment instances would be created.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EnvironmentSettingInner update(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        EnvironmentSettingFragment environmentSetting);

    /**
     * Modify properties of environment setting.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentSetting Represents settings of an environment, from which environment instances would be
     *     created.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents settings of an environment, from which environment instances would be created.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<EnvironmentSettingInner> updateWithResponse(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        EnvironmentSettingFragment environmentSetting,
        Context context);

    /**
     * Claims a random environment for a user in an environment settings.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void claimAny(String resourceGroupName, String labAccountName, String labName, String environmentSettingName);

    /**
     * Claims a random environment for a user in an environment settings.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> claimAnyWithResponse(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        Context context);

    /**
     * Provisions/deprovisions required resources for an environment setting based on current state of the
     * lab/environment setting.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param publishPayload Payload for Publish operation on EnvironmentSetting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void publish(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        PublishPayload publishPayload);

    /**
     * Provisions/deprovisions required resources for an environment setting based on current state of the
     * lab/environment setting.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param publishPayload Payload for Publish operation on EnvironmentSetting.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> publishWithResponse(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        PublishPayload publishPayload,
        Context context);

    /**
     * Starts a template by starting all resources inside the template. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginStart(
        String resourceGroupName, String labAccountName, String labName, String environmentSettingName);

    /**
     * Starts a template by starting all resources inside the template. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginStart(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        Context context);

    /**
     * Starts a template by starting all resources inside the template. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void start(String resourceGroupName, String labAccountName, String labName, String environmentSettingName);

    /**
     * Starts a template by starting all resources inside the template. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void start(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        Context context);

    /**
     * Starts a template by starting all resources inside the template. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginStop(
        String resourceGroupName, String labAccountName, String labName, String environmentSettingName);

    /**
     * Starts a template by starting all resources inside the template. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginStop(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        Context context);

    /**
     * Starts a template by starting all resources inside the template. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void stop(String resourceGroupName, String labAccountName, String labName, String environmentSettingName);

    /**
     * Starts a template by starting all resources inside the template. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void stop(
        String resourceGroupName,
        String labAccountName,
        String labName,
        String environmentSettingName,
        Context context);
}
