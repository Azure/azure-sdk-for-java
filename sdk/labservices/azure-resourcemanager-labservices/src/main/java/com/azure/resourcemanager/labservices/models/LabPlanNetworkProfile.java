// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Profile for how to handle networking for Lab Plans.
 */
@Fluent
public final class LabPlanNetworkProfile implements JsonSerializable<LabPlanNetworkProfile> {
    /*
     * The external subnet resource id
     */
    private String subnetId;

    /**
     * Creates an instance of LabPlanNetworkProfile class.
     */
    public LabPlanNetworkProfile() {
    }

    /**
     * Get the subnetId property: The external subnet resource id.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: The external subnet resource id.
     * 
     * @param subnetId the subnetId value to set.
     * @return the LabPlanNetworkProfile object itself.
     */
    public LabPlanNetworkProfile withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subnetId", this.subnetId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LabPlanNetworkProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LabPlanNetworkProfile if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LabPlanNetworkProfile.
     */
    public static LabPlanNetworkProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LabPlanNetworkProfile deserializedLabPlanNetworkProfile = new LabPlanNetworkProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subnetId".equals(fieldName)) {
                    deserializedLabPlanNetworkProfile.subnetId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLabPlanNetworkProfile;
        });
    }
}
