// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.labservices.fluent.models.ScheduleUpdateProperties;
import com.azure.resourcemanager.labservices.models.RecurrenceFrequency;
import com.azure.resourcemanager.labservices.models.RecurrencePattern;
import com.azure.resourcemanager.labservices.models.WeekDay;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScheduleUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleUpdateProperties model = BinaryData.fromString(
            "{\"startAt\":\"2021-02-26T17:22:44Z\",\"stopAt\":\"2021-08-06T07:06Z\",\"recurrencePattern\":{\"frequency\":\"Daily\",\"weekDays\":[\"Sunday\"],\"interval\":538641166,\"expirationDate\":\"2021-10-23T16:29:13Z\"},\"timeZoneId\":\"ktrmgucnapkt\",\"notes\":\"ellwptfdy\"}")
            .toObject(ScheduleUpdateProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-26T17:22:44Z"), model.startAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-06T07:06Z"), model.stopAt());
        Assertions.assertEquals(RecurrenceFrequency.DAILY, model.recurrencePattern().frequency());
        Assertions.assertEquals(WeekDay.SUNDAY, model.recurrencePattern().weekDays().get(0));
        Assertions.assertEquals(538641166, model.recurrencePattern().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-23T16:29:13Z"),
            model.recurrencePattern().expirationDate());
        Assertions.assertEquals("ktrmgucnapkt", model.timeZoneId());
        Assertions.assertEquals("ellwptfdy", model.notes());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleUpdateProperties model
            = new ScheduleUpdateProperties().withStartAt(OffsetDateTime.parse("2021-02-26T17:22:44Z"))
                .withStopAt(OffsetDateTime.parse("2021-08-06T07:06Z"))
                .withRecurrencePattern(new RecurrencePattern().withFrequency(RecurrenceFrequency.DAILY)
                    .withWeekDays(Arrays.asList(WeekDay.SUNDAY))
                    .withInterval(538641166)
                    .withExpirationDate(OffsetDateTime.parse("2021-10-23T16:29:13Z")))
                .withTimeZoneId("ktrmgucnapkt")
                .withNotes("ellwptfdy");
        model = BinaryData.fromObject(model).toObject(ScheduleUpdateProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-26T17:22:44Z"), model.startAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-06T07:06Z"), model.stopAt());
        Assertions.assertEquals(RecurrenceFrequency.DAILY, model.recurrencePattern().frequency());
        Assertions.assertEquals(WeekDay.SUNDAY, model.recurrencePattern().weekDays().get(0));
        Assertions.assertEquals(538641166, model.recurrencePattern().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-23T16:29:13Z"),
            model.recurrencePattern().expirationDate());
        Assertions.assertEquals("ktrmgucnapkt", model.timeZoneId());
        Assertions.assertEquals("ellwptfdy", model.notes());
    }
}
