// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.labservices.fluent.models.ScheduleInner;
import com.azure.resourcemanager.labservices.models.RecurrenceFrequency;
import com.azure.resourcemanager.labservices.models.RecurrencePattern;
import com.azure.resourcemanager.labservices.models.WeekDay;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScheduleInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Updating\",\"startAt\":\"2021-05-30T19:54:15Z\",\"stopAt\":\"2020-12-20T13:53:44Z\",\"recurrencePattern\":{\"frequency\":\"Daily\",\"weekDays\":[\"Friday\",\"Sunday\",\"Tuesday\"],\"interval\":589324262,\"expirationDate\":\"2021-02-28T22:24:22Z\"},\"timeZoneId\":\"joya\",\"notes\":\"slyjpkiid\"},\"id\":\"yexz\",\"name\":\"eli\",\"type\":\"hnrztfol\"}")
            .toObject(ScheduleInner.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-30T19:54:15Z"), model.startAt());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-20T13:53:44Z"), model.stopAt());
        Assertions.assertEquals(RecurrenceFrequency.DAILY, model.recurrencePattern().frequency());
        Assertions.assertEquals(WeekDay.FRIDAY, model.recurrencePattern().weekDays().get(0));
        Assertions.assertEquals(589324262, model.recurrencePattern().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-28T22:24:22Z"),
            model.recurrencePattern().expirationDate());
        Assertions.assertEquals("joya", model.timeZoneId());
        Assertions.assertEquals("slyjpkiid", model.notes());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleInner model = new ScheduleInner().withStartAt(OffsetDateTime.parse("2021-05-30T19:54:15Z"))
            .withStopAt(OffsetDateTime.parse("2020-12-20T13:53:44Z"))
            .withRecurrencePattern(new RecurrencePattern().withFrequency(RecurrenceFrequency.DAILY)
                .withWeekDays(Arrays.asList(WeekDay.FRIDAY, WeekDay.SUNDAY, WeekDay.TUESDAY))
                .withInterval(589324262)
                .withExpirationDate(OffsetDateTime.parse("2021-02-28T22:24:22Z")))
            .withTimeZoneId("joya")
            .withNotes("slyjpkiid");
        model = BinaryData.fromObject(model).toObject(ScheduleInner.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-30T19:54:15Z"), model.startAt());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-20T13:53:44Z"), model.stopAt());
        Assertions.assertEquals(RecurrenceFrequency.DAILY, model.recurrencePattern().frequency());
        Assertions.assertEquals(WeekDay.FRIDAY, model.recurrencePattern().weekDays().get(0));
        Assertions.assertEquals(589324262, model.recurrencePattern().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-28T22:24:22Z"),
            model.recurrencePattern().expirationDate());
        Assertions.assertEquals("joya", model.timeZoneId());
        Assertions.assertEquals("slyjpkiid", model.notes());
    }
}
