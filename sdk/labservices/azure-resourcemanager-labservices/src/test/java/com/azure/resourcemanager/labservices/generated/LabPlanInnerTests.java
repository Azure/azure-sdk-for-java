// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.labservices.fluent.models.LabPlanInner;
import com.azure.resourcemanager.labservices.models.AutoShutdownProfile;
import com.azure.resourcemanager.labservices.models.ConnectionProfile;
import com.azure.resourcemanager.labservices.models.ConnectionType;
import com.azure.resourcemanager.labservices.models.EnableState;
import com.azure.resourcemanager.labservices.models.Identity;
import com.azure.resourcemanager.labservices.models.LabPlanNetworkProfile;
import com.azure.resourcemanager.labservices.models.ResourceIdentityType;
import com.azure.resourcemanager.labservices.models.ShutdownOnIdleMode;
import com.azure.resourcemanager.labservices.models.SupportInfo;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LabPlanInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LabPlanInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"defaultConnectionProfile\":{\"webSshAccess\":\"Private\",\"webRdpAccess\":\"Public\",\"clientSshAccess\":\"Public\",\"clientRdpAccess\":\"None\"},\"defaultAutoShutdownProfile\":{\"shutdownOnDisconnect\":\"Disabled\",\"shutdownWhenNotConnected\":\"Enabled\",\"shutdownOnIdle\":\"UserAbsence\",\"disconnectDelay\":\"PT159H17M52S\",\"noConnectDelay\":\"PT143H50M40S\",\"idleDelay\":\"PT205H44M30S\"},\"defaultNetworkProfile\":{\"subnetId\":\"fbowskanyk\"},\"allowedRegions\":[\"cuiywgqyw\",\"ndrvynhzg\",\"phrcgyncoc\",\"ecfvmm\"],\"sharedGalleryId\":\"ofsx\",\"supportInfo\":{\"url\":\"v\",\"email\":\"m\",\"phone\":\"qabcypm\",\"instructions\":\"kwlzuvccfwnfn\"},\"linkedLmsInstance\":\"cfionl\"},\"identity\":{\"principalId\":\"etqgtzxdpnq\",\"tenantId\":\"qwxrjfeallnw\",\"type\":\"SystemAssigned\"},\"location\":\"isnjampmngnz\",\"tags\":{\"ochcbonqvpkvl\":\"aqw\",\"ase\":\"xnj\",\"enjbdlwtgrhp\":\"pheoflokeyy\",\"umasxazjpq\":\"jp\"},\"id\":\"e\",\"name\":\"ualhbxxhejj\",\"type\":\"zvdudgwdslfhotwm\"}")
            .toObject(LabPlanInner.class);
        Assertions.assertEquals("isnjampmngnz", model.location());
        Assertions.assertEquals("aqw", model.tags().get("ochcbonqvpkvl"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals(ConnectionType.PRIVATE, model.defaultConnectionProfile().webSshAccess());
        Assertions.assertEquals(ConnectionType.PUBLIC, model.defaultConnectionProfile().webRdpAccess());
        Assertions.assertEquals(ConnectionType.PUBLIC, model.defaultConnectionProfile().clientSshAccess());
        Assertions.assertEquals(ConnectionType.NONE, model.defaultConnectionProfile().clientRdpAccess());
        Assertions.assertEquals(EnableState.DISABLED, model.defaultAutoShutdownProfile().shutdownOnDisconnect());
        Assertions.assertEquals(EnableState.ENABLED, model.defaultAutoShutdownProfile().shutdownWhenNotConnected());
        Assertions.assertEquals(ShutdownOnIdleMode.USER_ABSENCE, model.defaultAutoShutdownProfile().shutdownOnIdle());
        Assertions.assertEquals(Duration.parse("PT159H17M52S"), model.defaultAutoShutdownProfile().disconnectDelay());
        Assertions.assertEquals(Duration.parse("PT143H50M40S"), model.defaultAutoShutdownProfile().noConnectDelay());
        Assertions.assertEquals(Duration.parse("PT205H44M30S"), model.defaultAutoShutdownProfile().idleDelay());
        Assertions.assertEquals("fbowskanyk", model.defaultNetworkProfile().subnetId());
        Assertions.assertEquals("cuiywgqyw", model.allowedRegions().get(0));
        Assertions.assertEquals("ofsx", model.sharedGalleryId());
        Assertions.assertEquals("v", model.supportInfo().url());
        Assertions.assertEquals("m", model.supportInfo().email());
        Assertions.assertEquals("qabcypm", model.supportInfo().phone());
        Assertions.assertEquals("kwlzuvccfwnfn", model.supportInfo().instructions());
        Assertions.assertEquals("cfionl", model.linkedLmsInstance());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LabPlanInner model = new LabPlanInner().withLocation("isnjampmngnz")
            .withTags(mapOf("ochcbonqvpkvl", "aqw", "ase", "xnj", "enjbdlwtgrhp", "pheoflokeyy", "umasxazjpq", "jp"))
            .withIdentity(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
            .withDefaultConnectionProfile(new ConnectionProfile().withWebSshAccess(ConnectionType.PRIVATE)
                .withWebRdpAccess(ConnectionType.PUBLIC)
                .withClientSshAccess(ConnectionType.PUBLIC)
                .withClientRdpAccess(ConnectionType.NONE))
            .withDefaultAutoShutdownProfile(new AutoShutdownProfile().withShutdownOnDisconnect(EnableState.DISABLED)
                .withShutdownWhenNotConnected(EnableState.ENABLED)
                .withShutdownOnIdle(ShutdownOnIdleMode.USER_ABSENCE)
                .withDisconnectDelay(Duration.parse("PT159H17M52S"))
                .withNoConnectDelay(Duration.parse("PT143H50M40S"))
                .withIdleDelay(Duration.parse("PT205H44M30S")))
            .withDefaultNetworkProfile(new LabPlanNetworkProfile().withSubnetId("fbowskanyk"))
            .withAllowedRegions(Arrays.asList("cuiywgqyw", "ndrvynhzg", "phrcgyncoc", "ecfvmm"))
            .withSharedGalleryId("ofsx")
            .withSupportInfo(
                new SupportInfo().withUrl("v").withEmail("m").withPhone("qabcypm").withInstructions("kwlzuvccfwnfn"))
            .withLinkedLmsInstance("cfionl");
        model = BinaryData.fromObject(model).toObject(LabPlanInner.class);
        Assertions.assertEquals("isnjampmngnz", model.location());
        Assertions.assertEquals("aqw", model.tags().get("ochcbonqvpkvl"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals(ConnectionType.PRIVATE, model.defaultConnectionProfile().webSshAccess());
        Assertions.assertEquals(ConnectionType.PUBLIC, model.defaultConnectionProfile().webRdpAccess());
        Assertions.assertEquals(ConnectionType.PUBLIC, model.defaultConnectionProfile().clientSshAccess());
        Assertions.assertEquals(ConnectionType.NONE, model.defaultConnectionProfile().clientRdpAccess());
        Assertions.assertEquals(EnableState.DISABLED, model.defaultAutoShutdownProfile().shutdownOnDisconnect());
        Assertions.assertEquals(EnableState.ENABLED, model.defaultAutoShutdownProfile().shutdownWhenNotConnected());
        Assertions.assertEquals(ShutdownOnIdleMode.USER_ABSENCE, model.defaultAutoShutdownProfile().shutdownOnIdle());
        Assertions.assertEquals(Duration.parse("PT159H17M52S"), model.defaultAutoShutdownProfile().disconnectDelay());
        Assertions.assertEquals(Duration.parse("PT143H50M40S"), model.defaultAutoShutdownProfile().noConnectDelay());
        Assertions.assertEquals(Duration.parse("PT205H44M30S"), model.defaultAutoShutdownProfile().idleDelay());
        Assertions.assertEquals("fbowskanyk", model.defaultNetworkProfile().subnetId());
        Assertions.assertEquals("cuiywgqyw", model.allowedRegions().get(0));
        Assertions.assertEquals("ofsx", model.sharedGalleryId());
        Assertions.assertEquals("v", model.supportInfo().url());
        Assertions.assertEquals("m", model.supportInfo().email());
        Assertions.assertEquals("qabcypm", model.supportInfo().phone());
        Assertions.assertEquals("kwlzuvccfwnfn", model.supportInfo().instructions());
        Assertions.assertEquals("cfionl", model.linkedLmsInstance());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
