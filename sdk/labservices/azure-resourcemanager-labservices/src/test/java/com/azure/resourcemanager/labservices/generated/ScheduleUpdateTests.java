// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.labservices.models.RecurrenceFrequency;
import com.azure.resourcemanager.labservices.models.RecurrencePattern;
import com.azure.resourcemanager.labservices.models.ScheduleUpdate;
import com.azure.resourcemanager.labservices.models.WeekDay;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScheduleUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleUpdate model = BinaryData.fromString(
            "{\"properties\":{\"startAt\":\"2021-05-17T02:44:39Z\",\"stopAt\":\"2021-11-21T18:50:14Z\",\"recurrencePattern\":{\"frequency\":\"Daily\",\"weekDays\":[\"Sunday\"],\"interval\":284689658,\"expirationDate\":\"2021-03-20T16:48:49Z\"},\"timeZoneId\":\"qeqxo\",\"notes\":\"dahzxctobg\"}}")
            .toObject(ScheduleUpdate.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-17T02:44:39Z"), model.startAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-21T18:50:14Z"), model.stopAt());
        Assertions.assertEquals(RecurrenceFrequency.DAILY, model.recurrencePattern().frequency());
        Assertions.assertEquals(WeekDay.SUNDAY, model.recurrencePattern().weekDays().get(0));
        Assertions.assertEquals(284689658, model.recurrencePattern().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-20T16:48:49Z"),
            model.recurrencePattern().expirationDate());
        Assertions.assertEquals("qeqxo", model.timeZoneId());
        Assertions.assertEquals("dahzxctobg", model.notes());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleUpdate model = new ScheduleUpdate().withStartAt(OffsetDateTime.parse("2021-05-17T02:44:39Z"))
            .withStopAt(OffsetDateTime.parse("2021-11-21T18:50:14Z"))
            .withRecurrencePattern(new RecurrencePattern().withFrequency(RecurrenceFrequency.DAILY)
                .withWeekDays(Arrays.asList(WeekDay.SUNDAY))
                .withInterval(284689658)
                .withExpirationDate(OffsetDateTime.parse("2021-03-20T16:48:49Z")))
            .withTimeZoneId("qeqxo")
            .withNotes("dahzxctobg");
        model = BinaryData.fromObject(model).toObject(ScheduleUpdate.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-17T02:44:39Z"), model.startAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-21T18:50:14Z"), model.stopAt());
        Assertions.assertEquals(RecurrenceFrequency.DAILY, model.recurrencePattern().frequency());
        Assertions.assertEquals(WeekDay.SUNDAY, model.recurrencePattern().weekDays().get(0));
        Assertions.assertEquals(284689658, model.recurrencePattern().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-20T16:48:49Z"),
            model.recurrencePattern().expirationDate());
        Assertions.assertEquals("qeqxo", model.timeZoneId());
        Assertions.assertEquals("dahzxctobg", model.notes());
    }
}
