// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.labservices.LabServicesManager;
import com.azure.resourcemanager.labservices.models.ConnectionType;
import com.azure.resourcemanager.labservices.models.EnableState;
import com.azure.resourcemanager.labservices.models.LabPlan;
import com.azure.resourcemanager.labservices.models.ResourceIdentityType;
import com.azure.resourcemanager.labservices.models.ShutdownOnIdleMode;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LabPlansListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Locked\",\"defaultConnectionProfile\":{\"webSshAccess\":\"Private\",\"webRdpAccess\":\"None\",\"clientSshAccess\":\"None\",\"clientRdpAccess\":\"Private\"},\"defaultAutoShutdownProfile\":{\"shutdownOnDisconnect\":\"Disabled\",\"shutdownWhenNotConnected\":\"Disabled\",\"shutdownOnIdle\":\"LowUsage\",\"disconnectDelay\":\"PT31H33M6S\",\"noConnectDelay\":\"PT114H51M39S\",\"idleDelay\":\"PT237H36M25S\"},\"defaultNetworkProfile\":{\"subnetId\":\"iiojnal\"},\"allowedRegions\":[\"kvtvsexso\"],\"sharedGalleryId\":\"el\",\"supportInfo\":{\"url\":\"hahhxvrhmzkwpj\",\"email\":\"wspughftqsxhqx\",\"phone\":\"xukndxdigr\",\"instructions\":\"uufzdmsyqtfihw\"},\"linkedLmsInstance\":\"otzi\"},\"identity\":{\"principalId\":\"mvpp\",\"tenantId\":\"szqzudphqamv\",\"type\":\"SystemAssigned\"},\"location\":\"wynwcvtbvkayhm\",\"tags\":{\"npwzcjaes\":\"yqiatkzwp\",\"hwyg\":\"vvsccyajguq\"},\"id\":\"lvdnkfx\",\"name\":\"semdwzrmu\",\"type\":\"apfcqdpsq\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LabServicesManager manager = LabServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<LabPlan> response
            = manager.labPlans().listByResourceGroup("lsj", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wynwcvtbvkayhm", response.iterator().next().location());
        Assertions.assertEquals("yqiatkzwp", response.iterator().next().tags().get("npwzcjaes"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals(ConnectionType.PRIVATE,
            response.iterator().next().defaultConnectionProfile().webSshAccess());
        Assertions.assertEquals(ConnectionType.NONE,
            response.iterator().next().defaultConnectionProfile().webRdpAccess());
        Assertions.assertEquals(ConnectionType.NONE,
            response.iterator().next().defaultConnectionProfile().clientSshAccess());
        Assertions.assertEquals(ConnectionType.PRIVATE,
            response.iterator().next().defaultConnectionProfile().clientRdpAccess());
        Assertions.assertEquals(EnableState.DISABLED,
            response.iterator().next().defaultAutoShutdownProfile().shutdownOnDisconnect());
        Assertions.assertEquals(EnableState.DISABLED,
            response.iterator().next().defaultAutoShutdownProfile().shutdownWhenNotConnected());
        Assertions.assertEquals(ShutdownOnIdleMode.LOW_USAGE,
            response.iterator().next().defaultAutoShutdownProfile().shutdownOnIdle());
        Assertions.assertEquals(Duration.parse("PT31H33M6S"),
            response.iterator().next().defaultAutoShutdownProfile().disconnectDelay());
        Assertions.assertEquals(Duration.parse("PT114H51M39S"),
            response.iterator().next().defaultAutoShutdownProfile().noConnectDelay());
        Assertions.assertEquals(Duration.parse("PT237H36M25S"),
            response.iterator().next().defaultAutoShutdownProfile().idleDelay());
        Assertions.assertEquals("iiojnal", response.iterator().next().defaultNetworkProfile().subnetId());
        Assertions.assertEquals("kvtvsexso", response.iterator().next().allowedRegions().get(0));
        Assertions.assertEquals("el", response.iterator().next().sharedGalleryId());
        Assertions.assertEquals("hahhxvrhmzkwpj", response.iterator().next().supportInfo().url());
        Assertions.assertEquals("wspughftqsxhqx", response.iterator().next().supportInfo().email());
        Assertions.assertEquals("xukndxdigr", response.iterator().next().supportInfo().phone());
        Assertions.assertEquals("uufzdmsyqtfihw", response.iterator().next().supportInfo().instructions());
        Assertions.assertEquals("otzi", response.iterator().next().linkedLmsInstance());
    }
}
