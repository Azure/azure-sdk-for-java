// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.labservices.LabServicesManager;
import com.azure.resourcemanager.labservices.models.RecurrenceFrequency;
import com.azure.resourcemanager.labservices.models.Schedule;
import com.azure.resourcemanager.labservices.models.WeekDay;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SchedulesListByLabMockTests {
    @Test
    public void testListByLab() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Deleting\",\"startAt\":\"2021-02-08T18:39:08Z\",\"stopAt\":\"2021-01-31T11:40:54Z\",\"recurrencePattern\":{\"frequency\":\"Weekly\",\"weekDays\":[\"Wednesday\",\"Thursday\"],\"interval\":2015960130,\"expirationDate\":\"2021-09-22T12:49:48Z\"},\"timeZoneId\":\"hlvnuuepzlr\",\"notes\":\"wzsoldweyuqdunv\"},\"id\":\"nnrwrbiork\",\"name\":\"alywjhhgdn\",\"type\":\"xmsivfomiloxggdu\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LabServicesManager manager = LabServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Schedule> response
            = manager.schedules().listByLab("ygdxpgpqchis", "epn", "bjcrxgibbdaxco", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(OffsetDateTime.parse("2021-02-08T18:39:08Z"), response.iterator().next().startAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-31T11:40:54Z"), response.iterator().next().stopAt());
        Assertions.assertEquals(RecurrenceFrequency.WEEKLY, response.iterator().next().recurrencePattern().frequency());
        Assertions.assertEquals(WeekDay.WEDNESDAY, response.iterator().next().recurrencePattern().weekDays().get(0));
        Assertions.assertEquals(2015960130, response.iterator().next().recurrencePattern().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-22T12:49:48Z"),
            response.iterator().next().recurrencePattern().expirationDate());
        Assertions.assertEquals("hlvnuuepzlr", response.iterator().next().timeZoneId());
        Assertions.assertEquals("wzsoldweyuqdunv", response.iterator().next().notes());
    }
}
