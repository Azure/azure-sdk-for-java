// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.labservices.LabServicesManager;
import com.azure.resourcemanager.labservices.models.ConnectionType;
import com.azure.resourcemanager.labservices.models.EnableState;
import com.azure.resourcemanager.labservices.models.LabPlan;
import com.azure.resourcemanager.labservices.models.ResourceIdentityType;
import com.azure.resourcemanager.labservices.models.ShutdownOnIdleMode;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LabPlansListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"defaultConnectionProfile\":{\"webSshAccess\":\"None\",\"webRdpAccess\":\"None\",\"clientSshAccess\":\"Public\",\"clientRdpAccess\":\"Public\"},\"defaultAutoShutdownProfile\":{\"shutdownOnDisconnect\":\"Disabled\",\"shutdownWhenNotConnected\":\"Enabled\",\"shutdownOnIdle\":\"None\",\"disconnectDelay\":\"PT90H28M41S\",\"noConnectDelay\":\"PT160H52M16S\",\"idleDelay\":\"PT76H47M51S\"},\"defaultNetworkProfile\":{\"subnetId\":\"abudurgk\"},\"allowedRegions\":[\"o\",\"zhjjklffhmouwq\",\"gzrf\"],\"sharedGalleryId\":\"eyebizikayuhql\",\"supportInfo\":{\"url\":\"sybbqwr\",\"email\":\"ldgmfpgvmpip\",\"phone\":\"ltha\",\"instructions\":\"x\"},\"linkedLmsInstance\":\"mwutwbdsre\"},\"identity\":{\"principalId\":\"rhneuyowq\",\"tenantId\":\"wyt\",\"type\":\"SystemAssigned\"},\"location\":\"bi\",\"tags\":{\"mejzanlfzxia\":\"pikpz\",\"okixrjqcir\":\"rmbzo\",\"szrnwo\":\"zpfrla\"},\"id\":\"indfpwpjyl\",\"name\":\"bt\",\"type\":\"h\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LabServicesManager manager = LabServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<LabPlan> response = manager.labPlans().list("sjabibs", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bi", response.iterator().next().location());
        Assertions.assertEquals("pikpz", response.iterator().next().tags().get("mejzanlfzxia"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals(ConnectionType.NONE,
            response.iterator().next().defaultConnectionProfile().webSshAccess());
        Assertions.assertEquals(ConnectionType.NONE,
            response.iterator().next().defaultConnectionProfile().webRdpAccess());
        Assertions.assertEquals(ConnectionType.PUBLIC,
            response.iterator().next().defaultConnectionProfile().clientSshAccess());
        Assertions.assertEquals(ConnectionType.PUBLIC,
            response.iterator().next().defaultConnectionProfile().clientRdpAccess());
        Assertions.assertEquals(EnableState.DISABLED,
            response.iterator().next().defaultAutoShutdownProfile().shutdownOnDisconnect());
        Assertions.assertEquals(EnableState.ENABLED,
            response.iterator().next().defaultAutoShutdownProfile().shutdownWhenNotConnected());
        Assertions.assertEquals(ShutdownOnIdleMode.NONE,
            response.iterator().next().defaultAutoShutdownProfile().shutdownOnIdle());
        Assertions.assertEquals(Duration.parse("PT90H28M41S"),
            response.iterator().next().defaultAutoShutdownProfile().disconnectDelay());
        Assertions.assertEquals(Duration.parse("PT160H52M16S"),
            response.iterator().next().defaultAutoShutdownProfile().noConnectDelay());
        Assertions.assertEquals(Duration.parse("PT76H47M51S"),
            response.iterator().next().defaultAutoShutdownProfile().idleDelay());
        Assertions.assertEquals("abudurgk", response.iterator().next().defaultNetworkProfile().subnetId());
        Assertions.assertEquals("o", response.iterator().next().allowedRegions().get(0));
        Assertions.assertEquals("eyebizikayuhql", response.iterator().next().sharedGalleryId());
        Assertions.assertEquals("sybbqwr", response.iterator().next().supportInfo().url());
        Assertions.assertEquals("ldgmfpgvmpip", response.iterator().next().supportInfo().email());
        Assertions.assertEquals("ltha", response.iterator().next().supportInfo().phone());
        Assertions.assertEquals("x", response.iterator().next().supportInfo().instructions());
        Assertions.assertEquals("mwutwbdsre", response.iterator().next().linkedLmsInstance());
    }
}
