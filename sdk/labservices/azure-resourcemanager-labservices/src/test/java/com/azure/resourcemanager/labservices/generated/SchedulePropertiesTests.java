// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.labservices.fluent.models.ScheduleProperties;
import com.azure.resourcemanager.labservices.models.RecurrenceFrequency;
import com.azure.resourcemanager.labservices.models.RecurrencePattern;
import com.azure.resourcemanager.labservices.models.WeekDay;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SchedulePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Updating\",\"startAt\":\"2021-09-08T07:53:31Z\",\"stopAt\":\"2021-06-25T15:29:39Z\",\"recurrencePattern\":{\"frequency\":\"Daily\",\"weekDays\":[\"Friday\"],\"interval\":1181953038,\"expirationDate\":\"2021-01-13T16:40:06Z\"},\"timeZoneId\":\"tpnapnyiropuhpig\",\"notes\":\"gylgqgitxmedjvcs\"}")
            .toObject(ScheduleProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-08T07:53:31Z"), model.startAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-25T15:29:39Z"), model.stopAt());
        Assertions.assertEquals(RecurrenceFrequency.DAILY, model.recurrencePattern().frequency());
        Assertions.assertEquals(WeekDay.FRIDAY, model.recurrencePattern().weekDays().get(0));
        Assertions.assertEquals(1181953038, model.recurrencePattern().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-13T16:40:06Z"),
            model.recurrencePattern().expirationDate());
        Assertions.assertEquals("tpnapnyiropuhpig", model.timeZoneId());
        Assertions.assertEquals("gylgqgitxmedjvcs", model.notes());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleProperties model = new ScheduleProperties().withStartAt(OffsetDateTime.parse("2021-09-08T07:53:31Z"))
            .withStopAt(OffsetDateTime.parse("2021-06-25T15:29:39Z"))
            .withRecurrencePattern(new RecurrencePattern().withFrequency(RecurrenceFrequency.DAILY)
                .withWeekDays(Arrays.asList(WeekDay.FRIDAY))
                .withInterval(1181953038)
                .withExpirationDate(OffsetDateTime.parse("2021-01-13T16:40:06Z")))
            .withTimeZoneId("tpnapnyiropuhpig")
            .withNotes("gylgqgitxmedjvcs");
        model = BinaryData.fromObject(model).toObject(ScheduleProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-08T07:53:31Z"), model.startAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-25T15:29:39Z"), model.stopAt());
        Assertions.assertEquals(RecurrenceFrequency.DAILY, model.recurrencePattern().frequency());
        Assertions.assertEquals(WeekDay.FRIDAY, model.recurrencePattern().weekDays().get(0));
        Assertions.assertEquals(1181953038, model.recurrencePattern().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-13T16:40:06Z"),
            model.recurrencePattern().expirationDate());
        Assertions.assertEquals("tpnapnyiropuhpig", model.timeZoneId());
        Assertions.assertEquals("gylgqgitxmedjvcs", model.notes());
    }
}
