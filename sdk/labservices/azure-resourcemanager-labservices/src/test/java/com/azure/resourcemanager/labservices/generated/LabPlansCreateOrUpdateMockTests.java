// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.labservices.LabServicesManager;
import com.azure.resourcemanager.labservices.models.AutoShutdownProfile;
import com.azure.resourcemanager.labservices.models.ConnectionProfile;
import com.azure.resourcemanager.labservices.models.ConnectionType;
import com.azure.resourcemanager.labservices.models.EnableState;
import com.azure.resourcemanager.labservices.models.Identity;
import com.azure.resourcemanager.labservices.models.LabPlan;
import com.azure.resourcemanager.labservices.models.LabPlanNetworkProfile;
import com.azure.resourcemanager.labservices.models.ResourceIdentityType;
import com.azure.resourcemanager.labservices.models.ShutdownOnIdleMode;
import com.azure.resourcemanager.labservices.models.SupportInfo;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LabPlansCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"defaultConnectionProfile\":{\"webSshAccess\":\"Private\",\"webRdpAccess\":\"Public\",\"clientSshAccess\":\"Public\",\"clientRdpAccess\":\"Private\"},\"defaultAutoShutdownProfile\":{\"shutdownOnDisconnect\":\"Enabled\",\"shutdownWhenNotConnected\":\"Disabled\",\"shutdownOnIdle\":\"None\",\"disconnectDelay\":\"PT157H58M9S\",\"noConnectDelay\":\"PT22H39M23S\",\"idleDelay\":\"PT140H44M7S\"},\"defaultNetworkProfile\":{\"subnetId\":\"udfdlwgg\"},\"allowedRegions\":[\"bwtovvtgseinqf\"],\"sharedGalleryId\":\"fxqknpirgneptt\",\"supportInfo\":{\"url\":\"sniffc\",\"email\":\"qnrojlpijnkrxfrd\",\"phone\":\"c\",\"instructions\":\"tizzronasxif\"},\"linkedLmsInstance\":\"zq\"},\"identity\":{\"principalId\":\"f\",\"tenantId\":\"esgogc\",\"type\":\"SystemAssigned\"},\"location\":\"nnxk\",\"tags\":{\"gh\":\"nyhmossxkkgthr\",\"gf\":\"jbdhqxvc\",\"bshrnsvbuswd\":\"pdso\"},\"id\":\"z\",\"name\":\"ybycnunvj\",\"type\":\"rtkfawnopq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LabServicesManager manager = LabServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        LabPlan response = manager.labPlans()
            .define("elfk")
            .withRegion("otxhojujby")
            .withExistingResourceGroup("pvuzlmv")
            .withTags(mapOf("vhixbjxy", "mc", "yl", "w", "ujrywvtyl", "coolsttpkiwkkb"))
            .withIdentity(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
            .withDefaultConnectionProfile(new ConnectionProfile().withWebSshAccess(ConnectionType.NONE)
                .withWebRdpAccess(ConnectionType.PRIVATE)
                .withClientSshAccess(ConnectionType.NONE)
                .withClientRdpAccess(ConnectionType.PUBLIC))
            .withDefaultAutoShutdownProfile(new AutoShutdownProfile().withShutdownOnDisconnect(EnableState.ENABLED)
                .withShutdownWhenNotConnected(EnableState.ENABLED)
                .withShutdownOnIdle(ShutdownOnIdleMode.USER_ABSENCE)
                .withDisconnectDelay(Duration.parse("PT145H41M30S"))
                .withNoConnectDelay(Duration.parse("PT204H13M28S"))
                .withIdleDelay(Duration.parse("PT50H28M23S")))
            .withDefaultNetworkProfile(new LabPlanNetworkProfile().withSubnetId("azej"))
            .withAllowedRegions(Arrays.asList("kagfhsxtt", "ugzxnf", "azpxdtnkdmkqjjl"))
            .withSharedGalleryId("envrkpyouaibrebq")
            .withSupportInfo(
                new SupportInfo().withUrl("sj").withEmail("xqtnq").withPhone("ezl").withInstructions("ffiakp"))
            .withLinkedLmsInstance("qqmtedltmmji")
            .create();

        Assertions.assertEquals("nnxk", response.location());
        Assertions.assertEquals("nyhmossxkkgthr", response.tags().get("gh"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals(ConnectionType.PRIVATE, response.defaultConnectionProfile().webSshAccess());
        Assertions.assertEquals(ConnectionType.PUBLIC, response.defaultConnectionProfile().webRdpAccess());
        Assertions.assertEquals(ConnectionType.PUBLIC, response.defaultConnectionProfile().clientSshAccess());
        Assertions.assertEquals(ConnectionType.PRIVATE, response.defaultConnectionProfile().clientRdpAccess());
        Assertions.assertEquals(EnableState.ENABLED, response.defaultAutoShutdownProfile().shutdownOnDisconnect());
        Assertions.assertEquals(EnableState.DISABLED, response.defaultAutoShutdownProfile().shutdownWhenNotConnected());
        Assertions.assertEquals(ShutdownOnIdleMode.NONE, response.defaultAutoShutdownProfile().shutdownOnIdle());
        Assertions.assertEquals(Duration.parse("PT157H58M9S"), response.defaultAutoShutdownProfile().disconnectDelay());
        Assertions.assertEquals(Duration.parse("PT22H39M23S"), response.defaultAutoShutdownProfile().noConnectDelay());
        Assertions.assertEquals(Duration.parse("PT140H44M7S"), response.defaultAutoShutdownProfile().idleDelay());
        Assertions.assertEquals("udfdlwgg", response.defaultNetworkProfile().subnetId());
        Assertions.assertEquals("bwtovvtgseinqf", response.allowedRegions().get(0));
        Assertions.assertEquals("fxqknpirgneptt", response.sharedGalleryId());
        Assertions.assertEquals("sniffc", response.supportInfo().url());
        Assertions.assertEquals("qnrojlpijnkrxfrd", response.supportInfo().email());
        Assertions.assertEquals("c", response.supportInfo().phone());
        Assertions.assertEquals("tizzronasxif", response.supportInfo().instructions());
        Assertions.assertEquals("zq", response.linkedLmsInstance());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
