// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.labservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.labservices.LabServicesManager;
import com.azure.resourcemanager.labservices.models.RecurrenceFrequency;
import com.azure.resourcemanager.labservices.models.Schedule;
import com.azure.resourcemanager.labservices.models.WeekDay;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SchedulesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Creating\",\"startAt\":\"2021-08-21T00:04:31Z\",\"stopAt\":\"2021-03-11T09:57:32Z\",\"recurrencePattern\":{\"frequency\":\"Daily\",\"weekDays\":[\"Tuesday\",\"Wednesday\"],\"interval\":167629289,\"expirationDate\":\"2021-08-08T02:00:14Z\"},\"timeZoneId\":\"zshq\",\"notes\":\"impevf\"},\"id\":\"mblrrilbywd\",\"name\":\"smiccwrwfscj\",\"type\":\"n\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LabServicesManager manager = LabServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Schedule response = manager.schedules()
            .getWithResponse("iqndieuzaofj", "hvcyyysfg", "otcubi", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(OffsetDateTime.parse("2021-08-21T00:04:31Z"), response.startAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-11T09:57:32Z"), response.stopAt());
        Assertions.assertEquals(RecurrenceFrequency.DAILY, response.recurrencePattern().frequency());
        Assertions.assertEquals(WeekDay.TUESDAY, response.recurrencePattern().weekDays().get(0));
        Assertions.assertEquals(167629289, response.recurrencePattern().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-08T02:00:14Z"),
            response.recurrencePattern().expirationDate());
        Assertions.assertEquals("zshq", response.timeZoneId());
        Assertions.assertEquals("impevf", response.notes());
    }
}
