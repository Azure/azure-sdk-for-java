/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.labservices.v2018_10_15;

import rx.Completable;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.labservices.v2018_10_15.implementation.GlobalUsersInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing GlobalUsers.
 */
public interface GlobalUsers extends HasInner<GlobalUsersInner> {
    /**
     * Gets the virtual machine details.
     *
     * @param userName The name of the user.
     * @param environmentId The resourceId of the environment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<GetEnvironmentResponse> getEnvironmentAsync(String userName, String environmentId);

    /**
     * Get batch operation status.
     *
     * @param userName The name of the user.
     * @param urls The operation url of long running operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<OperationBatchStatusResponse> getOperationBatchStatusAsync(String userName, List<String> urls);

    /**
     * Gets the status of long running operation.
     *
     * @param userName The name of the user.
     * @param operationUrl The operation url of long running operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<OperationStatusResponse> getOperationStatusAsync(String userName, String operationUrl);

    /**
     * Get personal preferences for a user.
     *
     * @param userName The name of the user.
     * @param personalPreferencesOperationsPayload Represents payload for any Environment operations like get, start, stop, connect
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<GetPersonalPreferencesResponse> getPersonalPreferencesAsync(String userName, PersonalPreferencesOperationsPayload personalPreferencesOperationsPayload);

    /**
     * List Environments for the user.
     *
     * @param userName The name of the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ListEnvironmentsResponse> listEnvironmentsAsync(String userName);

    /**
     * List labs for the user.
     *
     * @param userName The name of the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ListLabsResponse> listLabsAsync(String userName);

    /**
     * Register a user to a managed lab.
     *
     * @param userName The name of the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable registerAsync(String userName);

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param userName The name of the user.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable resetPasswordAsync(String userName, ResetPasswordPayload resetPasswordPayload);

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to complete.
     *
     * @param userName The name of the user.
     * @param environmentId The resourceId of the environment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable startEnvironmentAsync(String userName, String environmentId);

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to complete.
     *
     * @param userName The name of the user.
     * @param environmentId The resourceId of the environment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable stopEnvironmentAsync(String userName, String environmentId);

}
