/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.labservices.v2018_10_15.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.labservices.v2018_10_15.Environments;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.labservices.v2018_10_15.ResetPasswordPayload;
import com.microsoft.azure.management.labservices.v2018_10_15.Environment;

class EnvironmentsImpl extends WrapperImpl<EnvironmentsInner> implements Environments {
    private final LabServicesManager manager;

    EnvironmentsImpl(LabServicesManager manager) {
        super(manager.inner().environments());
        this.manager = manager;
    }

    public LabServicesManager manager() {
        return this.manager;
    }

    @Override
    public EnvironmentImpl define(String name) {
        return wrapModel(name);
    }

    private EnvironmentImpl wrapModel(EnvironmentInner inner) {
        return  new EnvironmentImpl(inner, manager());
    }

    private EnvironmentImpl wrapModel(String name) {
        return new EnvironmentImpl(name, this.manager());
    }

    @Override
    public Completable claimAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        EnvironmentsInner client = this.inner();
        return client.claimAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName).toCompletable();
    }

    @Override
    public Completable resetPasswordAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, ResetPasswordPayload resetPasswordPayload) {
        EnvironmentsInner client = this.inner();
        return client.resetPasswordAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, resetPasswordPayload).toCompletable();
    }

    @Override
    public Completable startAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        EnvironmentsInner client = this.inner();
        return client.startAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName).toCompletable();
    }

    @Override
    public Completable stopAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        EnvironmentsInner client = this.inner();
        return client.stopAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName).toCompletable();
    }

    @Override
    public Observable<Environment> listAsync(final String resourceGroupName, final String labAccountName, final String labName, final String environmentSettingName) {
        EnvironmentsInner client = this.inner();
        return client.listAsync(resourceGroupName, labAccountName, labName, environmentSettingName)
        .flatMapIterable(new Func1<Page<EnvironmentInner>, Iterable<EnvironmentInner>>() {
            @Override
            public Iterable<EnvironmentInner> call(Page<EnvironmentInner> page) {
                return page.items();
            }
        })
        .map(new Func1<EnvironmentInner, Environment>() {
            @Override
            public Environment call(EnvironmentInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<Environment> getAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        EnvironmentsInner client = this.inner();
        return client.getAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName)
        .map(new Func1<EnvironmentInner, Environment>() {
            @Override
            public Environment call(EnvironmentInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        EnvironmentsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName).toCompletable();
    }

}
