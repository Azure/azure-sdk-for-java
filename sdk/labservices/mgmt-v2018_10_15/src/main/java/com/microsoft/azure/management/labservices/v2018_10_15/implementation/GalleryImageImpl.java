/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.labservices.v2018_10_15.implementation;

import com.microsoft.azure.management.labservices.v2018_10_15.GalleryImage;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.labservices.v2018_10_15.GalleryImageFragment;
import java.util.Map;
import org.joda.time.DateTime;
import com.microsoft.azure.management.labservices.v2018_10_15.GalleryImageReference;
import com.microsoft.azure.management.labservices.v2018_10_15.LatestOperationResult;
import rx.functions.Func1;

class GalleryImageImpl extends CreatableUpdatableImpl<GalleryImage, GalleryImageInner, GalleryImageImpl> implements GalleryImage, GalleryImage.Definition, GalleryImage.Update {
    private final LabServicesManager manager;
    private String resourceGroupName;
    private String labAccountName;
    private String galleryImageName;
    private GalleryImageFragment updateParameter;

    GalleryImageImpl(String name, LabServicesManager manager) {
        super(name, new GalleryImageInner());
        this.manager = manager;
        // Set resource name
        this.galleryImageName = name;
        //
        this.updateParameter = new GalleryImageFragment();
    }

    GalleryImageImpl(GalleryImageInner inner, LabServicesManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.galleryImageName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.labAccountName = IdParsingUtils.getValueFromIdByName(inner.id(), "labaccounts");
        this.galleryImageName = IdParsingUtils.getValueFromIdByName(inner.id(), "galleryimages");
        //
        this.updateParameter = new GalleryImageFragment();
    }

    @Override
    public LabServicesManager manager() {
        return this.manager;
    }

    @Override
    public Observable<GalleryImage> createResourceAsync() {
        GalleryImagesInner client = this.manager().inner().galleryImages();
        return client.createOrUpdateAsync(this.resourceGroupName, this.labAccountName, this.galleryImageName, this.inner())
            .map(new Func1<GalleryImageInner, GalleryImageInner>() {
               @Override
               public GalleryImageInner call(GalleryImageInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<GalleryImage> updateResourceAsync() {
        GalleryImagesInner client = this.manager().inner().galleryImages();
        return client.updateAsync(this.resourceGroupName, this.labAccountName, this.galleryImageName, this.updateParameter)
            .map(new Func1<GalleryImageInner, GalleryImageInner>() {
               @Override
               public GalleryImageInner call(GalleryImageInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<GalleryImageInner> getInnerAsync() {
        GalleryImagesInner client = this.manager().inner().galleryImages();
        return client.getAsync(this.resourceGroupName, this.labAccountName, this.galleryImageName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new GalleryImageFragment();
    }

    @Override
    public String author() {
        return this.inner().author();
    }

    @Override
    public DateTime createdDate() {
        return this.inner().createdDate();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public String icon() {
        return this.inner().icon();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public GalleryImageReference imageReference() {
        return this.inner().imageReference();
    }

    @Override
    public Boolean isEnabled() {
        return this.inner().isEnabled();
    }

    @Override
    public Boolean isOverride() {
        return this.inner().isOverride();
    }

    @Override
    public Boolean isPlanAuthorized() {
        return this.inner().isPlanAuthorized();
    }

    @Override
    public LatestOperationResult latestOperationResult() {
        return this.inner().latestOperationResult();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String planId() {
        return this.inner().planId();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String uniqueIdentifier() {
        return this.inner().uniqueIdentifier();
    }

    @Override
    public GalleryImageImpl withExistingLabaccount(String resourceGroupName, String labAccountName) {
        this.resourceGroupName = resourceGroupName;
        this.labAccountName = labAccountName;
        return this;
    }

    @Override
    public GalleryImageImpl withIsEnabled(Boolean isEnabled) {
        if (isInCreateMode()) {
            this.inner().withIsEnabled(isEnabled);
        } else {
            this.updateParameter.withIsEnabled(isEnabled);
        }
        return this;
    }

    @Override
    public GalleryImageImpl withIsOverride(Boolean isOverride) {
        if (isInCreateMode()) {
            this.inner().withIsOverride(isOverride);
        } else {
            this.updateParameter.withIsOverride(isOverride);
        }
        return this;
    }

    @Override
    public GalleryImageImpl withIsPlanAuthorized(Boolean isPlanAuthorized) {
        if (isInCreateMode()) {
            this.inner().withIsPlanAuthorized(isPlanAuthorized);
        } else {
            this.updateParameter.withIsPlanAuthorized(isPlanAuthorized);
        }
        return this;
    }

    @Override
    public GalleryImageImpl withLocation(String location) {
        if (isInCreateMode()) {
            this.inner().withLocation(location);
        } else {
            this.updateParameter.withLocation(location);
        }
        return this;
    }

    @Override
    public GalleryImageImpl withProvisioningState(String provisioningState) {
        if (isInCreateMode()) {
            this.inner().withProvisioningState(provisioningState);
        } else {
            this.updateParameter.withProvisioningState(provisioningState);
        }
        return this;
    }

    @Override
    public GalleryImageImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.inner().withTags(tags);
        } else {
            this.updateParameter.withTags(tags);
        }
        return this;
    }

    @Override
    public GalleryImageImpl withUniqueIdentifier(String uniqueIdentifier) {
        if (isInCreateMode()) {
            this.inner().withUniqueIdentifier(uniqueIdentifier);
        } else {
            this.updateParameter.withUniqueIdentifier(uniqueIdentifier);
        }
        return this;
    }

}
