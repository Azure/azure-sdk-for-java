/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.labservices.v2018_10_15;

import com.microsoft.azure.arm.collection.SupportsCreating;
import com.microsoft.azure.arm.resources.collection.SupportsDeletingByResourceGroup;
import com.microsoft.azure.arm.resources.collection.SupportsBatchDeletion;
import com.microsoft.azure.arm.resources.collection.SupportsGettingByResourceGroup;
import rx.Observable;
import com.microsoft.azure.arm.resources.collection.SupportsListingByResourceGroup;
import com.microsoft.azure.arm.collection.SupportsListing;
import rx.Completable;
import com.microsoft.azure.management.labservices.v2018_10_15.implementation.LabAccountsInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing LabAccounts.
 */
public interface LabAccounts extends SupportsCreating<LabAccount.DefinitionStages.Blank>, SupportsDeletingByResourceGroup, SupportsBatchDeletion, SupportsGettingByResourceGroup<LabAccount>, SupportsListingByResourceGroup<LabAccount>, SupportsListing<LabAccount>, HasInner<LabAccountsInner> {
    /**
     * Create a lab in a lab account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param createLabProperties Properties for creating a managed lab and a default environment setting
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable createLabAsync(String resourceGroupName, String labAccountName, CreateLabProperties createLabProperties);

    /**
     * Get regional availability information for each size category configured under a lab account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<GetRegionalAvailabilityResponse> getRegionalAvailabilityAsync(String resourceGroupName, String labAccountName);

}
