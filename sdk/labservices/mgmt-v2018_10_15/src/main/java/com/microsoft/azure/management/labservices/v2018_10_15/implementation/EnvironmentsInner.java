/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.labservices.v2018_10_15.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.labservices.v2018_10_15.EnvironmentFragment;
import com.microsoft.azure.management.labservices.v2018_10_15.ResetPasswordPayload;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Environments.
 */
public class EnvironmentsInner {
    /** The Retrofit service to perform REST calls. */
    private EnvironmentsService service;
    /** The service client containing this operation class. */
    private ManagedLabsClientImpl client;

    /**
     * Initializes an instance of EnvironmentsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public EnvironmentsInner(Retrofit retrofit, ManagedLabsClientImpl client) {
        this.service = retrofit.create(EnvironmentsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Environments to be
     * used by Retrofit to perform actually REST calls.
     */
    interface EnvironmentsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.Environments list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("labAccountName") String labAccountName, @Path("labName") String labName, @Path("environmentSettingName") String environmentSettingName, @Query("$expand") String expand, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$orderby") String orderby, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.Environments get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("labAccountName") String labAccountName, @Path("labName") String labName, @Path("environmentSettingName") String environmentSettingName, @Path("environmentName") String environmentName, @Query("$expand") String expand, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.Environments createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("labAccountName") String labAccountName, @Path("labName") String labName, @Path("environmentSettingName") String environmentSettingName, @Path("environmentName") String environmentName, @Body EnvironmentInner environment, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.Environments delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("labAccountName") String labAccountName, @Path("labName") String labName, @Path("environmentSettingName") String environmentSettingName, @Path("environmentName") String environmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.Environments beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("labAccountName") String labAccountName, @Path("labName") String labName, @Path("environmentSettingName") String environmentSettingName, @Path("environmentName") String environmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.Environments update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("labAccountName") String labAccountName, @Path("labName") String labName, @Path("environmentSettingName") String environmentSettingName, @Path("environmentName") String environmentName, @Body EnvironmentFragment environment, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.Environments claim" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}/claim")
        Observable<Response<ResponseBody>> claim(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("labAccountName") String labAccountName, @Path("labName") String labName, @Path("environmentSettingName") String environmentSettingName, @Path("environmentName") String environmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.Environments resetPassword" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}/resetPassword")
        Observable<Response<ResponseBody>> resetPassword(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("labAccountName") String labAccountName, @Path("labName") String labName, @Path("environmentSettingName") String environmentSettingName, @Path("environmentName") String environmentName, @Body ResetPasswordPayload resetPasswordPayload, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.Environments beginResetPassword" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}/resetPassword")
        Observable<Response<ResponseBody>> beginResetPassword(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("labAccountName") String labAccountName, @Path("labName") String labName, @Path("environmentSettingName") String environmentSettingName, @Path("environmentName") String environmentName, @Body ResetPasswordPayload resetPasswordPayload, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.Environments start" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}/start")
        Observable<Response<ResponseBody>> start(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("labAccountName") String labAccountName, @Path("labName") String labName, @Path("environmentSettingName") String environmentSettingName, @Path("environmentName") String environmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.Environments beginStart" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}/start")
        Observable<Response<ResponseBody>> beginStart(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("labAccountName") String labAccountName, @Path("labName") String labName, @Path("environmentSettingName") String environmentSettingName, @Path("environmentName") String environmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.Environments stop" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}/stop")
        Observable<Response<ResponseBody>> stop(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("labAccountName") String labAccountName, @Path("labName") String labName, @Path("environmentSettingName") String environmentSettingName, @Path("environmentName") String environmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.Environments beginStop" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}/stop")
        Observable<Response<ResponseBody>> beginStop(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("labAccountName") String labAccountName, @Path("labName") String labName, @Path("environmentSettingName") String environmentSettingName, @Path("environmentName") String environmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.Environments listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * List environments in a given environment setting.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;EnvironmentInner&gt; object if successful.
     */
    public PagedList<EnvironmentInner> list(final String resourceGroupName, final String labAccountName, final String labName, final String environmentSettingName) {
        ServiceResponse<Page<EnvironmentInner>> response = listSinglePageAsync(resourceGroupName, labAccountName, labName, environmentSettingName).toBlocking().single();
        return new PagedList<EnvironmentInner>(response.body()) {
            @Override
            public Page<EnvironmentInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List environments in a given environment setting.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EnvironmentInner>> listAsync(final String resourceGroupName, final String labAccountName, final String labName, final String environmentSettingName, final ListOperationCallback<EnvironmentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, labAccountName, labName, environmentSettingName),
            new Func1<String, Observable<ServiceResponse<Page<EnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EnvironmentInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List environments in a given environment setting.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EnvironmentInner&gt; object
     */
    public Observable<Page<EnvironmentInner>> listAsync(final String resourceGroupName, final String labAccountName, final String labName, final String environmentSettingName) {
        return listWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName)
            .map(new Func1<ServiceResponse<Page<EnvironmentInner>>, Page<EnvironmentInner>>() {
                @Override
                public Page<EnvironmentInner> call(ServiceResponse<Page<EnvironmentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List environments in a given environment setting.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EnvironmentInner&gt; object
     */
    public Observable<ServiceResponse<Page<EnvironmentInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String labAccountName, final String labName, final String environmentSettingName) {
        return listSinglePageAsync(resourceGroupName, labAccountName, labName, environmentSettingName)
            .concatMap(new Func1<ServiceResponse<Page<EnvironmentInner>>, Observable<ServiceResponse<Page<EnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EnvironmentInner>>> call(ServiceResponse<Page<EnvironmentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List environments in a given environment setting.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;EnvironmentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<EnvironmentInner>>> listSinglePageAsync(final String resourceGroupName, final String labAccountName, final String labName, final String environmentSettingName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (labName == null) {
            throw new IllegalArgumentException("Parameter labName is required and cannot be null.");
        }
        if (environmentSettingName == null) {
            throw new IllegalArgumentException("Parameter environmentSettingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        final String filter = null;
        final Integer top = null;
        final String orderby = null;
        return service.list(this.client.subscriptionId(), resourceGroupName, labAccountName, labName, environmentSettingName, expand, filter, top, orderby, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<EnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EnvironmentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EnvironmentInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<EnvironmentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List environments in a given environment setting.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param expand Specify the $expand query. Example: 'properties($expand=networkInterface)'
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;EnvironmentInner&gt; object if successful.
     */
    public PagedList<EnvironmentInner> list(final String resourceGroupName, final String labAccountName, final String labName, final String environmentSettingName, final String expand, final String filter, final Integer top, final String orderby) {
        ServiceResponse<Page<EnvironmentInner>> response = listSinglePageAsync(resourceGroupName, labAccountName, labName, environmentSettingName, expand, filter, top, orderby).toBlocking().single();
        return new PagedList<EnvironmentInner>(response.body()) {
            @Override
            public Page<EnvironmentInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List environments in a given environment setting.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param expand Specify the $expand query. Example: 'properties($expand=networkInterface)'
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EnvironmentInner>> listAsync(final String resourceGroupName, final String labAccountName, final String labName, final String environmentSettingName, final String expand, final String filter, final Integer top, final String orderby, final ListOperationCallback<EnvironmentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, labAccountName, labName, environmentSettingName, expand, filter, top, orderby),
            new Func1<String, Observable<ServiceResponse<Page<EnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EnvironmentInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List environments in a given environment setting.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param expand Specify the $expand query. Example: 'properties($expand=networkInterface)'
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EnvironmentInner&gt; object
     */
    public Observable<Page<EnvironmentInner>> listAsync(final String resourceGroupName, final String labAccountName, final String labName, final String environmentSettingName, final String expand, final String filter, final Integer top, final String orderby) {
        return listWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, expand, filter, top, orderby)
            .map(new Func1<ServiceResponse<Page<EnvironmentInner>>, Page<EnvironmentInner>>() {
                @Override
                public Page<EnvironmentInner> call(ServiceResponse<Page<EnvironmentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List environments in a given environment setting.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param expand Specify the $expand query. Example: 'properties($expand=networkInterface)'
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EnvironmentInner&gt; object
     */
    public Observable<ServiceResponse<Page<EnvironmentInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String labAccountName, final String labName, final String environmentSettingName, final String expand, final String filter, final Integer top, final String orderby) {
        return listSinglePageAsync(resourceGroupName, labAccountName, labName, environmentSettingName, expand, filter, top, orderby)
            .concatMap(new Func1<ServiceResponse<Page<EnvironmentInner>>, Observable<ServiceResponse<Page<EnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EnvironmentInner>>> call(ServiceResponse<Page<EnvironmentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List environments in a given environment setting.
     *
    ServiceResponse<PageImpl<EnvironmentInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<EnvironmentInner>> * @param labAccountName The name of the lab Account.
    ServiceResponse<PageImpl<EnvironmentInner>> * @param labName The name of the lab.
    ServiceResponse<PageImpl<EnvironmentInner>> * @param environmentSettingName The name of the environment Setting.
    ServiceResponse<PageImpl<EnvironmentInner>> * @param expand Specify the $expand query. Example: 'properties($expand=networkInterface)'
    ServiceResponse<PageImpl<EnvironmentInner>> * @param filter The filter to apply to the operation.
    ServiceResponse<PageImpl<EnvironmentInner>> * @param top The maximum number of resources to return from the operation.
    ServiceResponse<PageImpl<EnvironmentInner>> * @param orderby The ordering expression for the results, using OData notation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;EnvironmentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<EnvironmentInner>>> listSinglePageAsync(final String resourceGroupName, final String labAccountName, final String labName, final String environmentSettingName, final String expand, final String filter, final Integer top, final String orderby) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (labName == null) {
            throw new IllegalArgumentException("Parameter labName is required and cannot be null.");
        }
        if (environmentSettingName == null) {
            throw new IllegalArgumentException("Parameter environmentSettingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroupName, labAccountName, labName, environmentSettingName, expand, filter, top, orderby, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<EnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EnvironmentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EnvironmentInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<EnvironmentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<EnvironmentInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<EnvironmentInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<EnvironmentInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get environment.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EnvironmentInner object if successful.
     */
    public EnvironmentInner get(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        return getWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName).toBlocking().single().body();
    }

    /**
     * Get environment.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EnvironmentInner> getAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, final ServiceCallback<EnvironmentInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName), serviceCallback);
    }

    /**
     * Get environment.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnvironmentInner object
     */
    public Observable<EnvironmentInner> getAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        return getWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName).map(new Func1<ServiceResponse<EnvironmentInner>, EnvironmentInner>() {
            @Override
            public EnvironmentInner call(ServiceResponse<EnvironmentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get environment.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnvironmentInner object
     */
    public Observable<ServiceResponse<EnvironmentInner>> getWithServiceResponseAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (labName == null) {
            throw new IllegalArgumentException("Parameter labName is required and cannot be null.");
        }
        if (environmentSettingName == null) {
            throw new IllegalArgumentException("Parameter environmentSettingName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        return service.get(this.client.subscriptionId(), resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, expand, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EnvironmentInner>>>() {
                @Override
                public Observable<ServiceResponse<EnvironmentInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EnvironmentInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get environment.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param expand Specify the $expand query. Example: 'properties($expand=networkInterface)'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EnvironmentInner object if successful.
     */
    public EnvironmentInner get(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String expand) {
        return getWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, expand).toBlocking().single().body();
    }

    /**
     * Get environment.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param expand Specify the $expand query. Example: 'properties($expand=networkInterface)'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EnvironmentInner> getAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String expand, final ServiceCallback<EnvironmentInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, expand), serviceCallback);
    }

    /**
     * Get environment.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param expand Specify the $expand query. Example: 'properties($expand=networkInterface)'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnvironmentInner object
     */
    public Observable<EnvironmentInner> getAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String expand) {
        return getWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, expand).map(new Func1<ServiceResponse<EnvironmentInner>, EnvironmentInner>() {
            @Override
            public EnvironmentInner call(ServiceResponse<EnvironmentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get environment.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param expand Specify the $expand query. Example: 'properties($expand=networkInterface)'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnvironmentInner object
     */
    public Observable<ServiceResponse<EnvironmentInner>> getWithServiceResponseAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String expand) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (labName == null) {
            throw new IllegalArgumentException("Parameter labName is required and cannot be null.");
        }
        if (environmentSettingName == null) {
            throw new IllegalArgumentException("Parameter environmentSettingName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, expand, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EnvironmentInner>>>() {
                @Override
                public Observable<ServiceResponse<EnvironmentInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EnvironmentInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EnvironmentInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EnvironmentInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<EnvironmentInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or replace an existing Environment.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param environment Represents an environment instance
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EnvironmentInner object if successful.
     */
    public EnvironmentInner createOrUpdate(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, EnvironmentInner environment) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, environment).toBlocking().single().body();
    }

    /**
     * Create or replace an existing Environment.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param environment Represents an environment instance
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EnvironmentInner> createOrUpdateAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, EnvironmentInner environment, final ServiceCallback<EnvironmentInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, environment), serviceCallback);
    }

    /**
     * Create or replace an existing Environment.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param environment Represents an environment instance
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnvironmentInner object
     */
    public Observable<EnvironmentInner> createOrUpdateAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, EnvironmentInner environment) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, environment).map(new Func1<ServiceResponse<EnvironmentInner>, EnvironmentInner>() {
            @Override
            public EnvironmentInner call(ServiceResponse<EnvironmentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or replace an existing Environment.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param environment Represents an environment instance
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnvironmentInner object
     */
    public Observable<ServiceResponse<EnvironmentInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, EnvironmentInner environment) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (labName == null) {
            throw new IllegalArgumentException("Parameter labName is required and cannot be null.");
        }
        if (environmentSettingName == null) {
            throw new IllegalArgumentException("Parameter environmentSettingName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (environment == null) {
            throw new IllegalArgumentException("Parameter environment is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(environment);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, environment, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EnvironmentInner>>>() {
                @Override
                public Observable<ServiceResponse<EnvironmentInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EnvironmentInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EnvironmentInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EnvironmentInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<EnvironmentInner>() { }.getType())
                .register(201, new TypeToken<EnvironmentInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete environment. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        deleteWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName).toBlocking().last().body();
    }

    /**
     * Delete environment. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName), serviceCallback);
    }

    /**
     * Delete environment. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        return deleteWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete environment. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (labName == null) {
            throw new IllegalArgumentException("Parameter labName is required and cannot be null.");
        }
        if (environmentSettingName == null) {
            throw new IllegalArgumentException("Parameter environmentSettingName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete environment. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName).toBlocking().single().body();
    }

    /**
     * Delete environment. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName), serviceCallback);
    }

    /**
     * Delete environment. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete environment. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (labName == null) {
            throw new IllegalArgumentException("Parameter labName is required and cannot be null.");
        }
        if (environmentSettingName == null) {
            throw new IllegalArgumentException("Parameter environmentSettingName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Modify properties of environments.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param environment Represents an environment instance
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EnvironmentInner object if successful.
     */
    public EnvironmentInner update(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, EnvironmentFragment environment) {
        return updateWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, environment).toBlocking().single().body();
    }

    /**
     * Modify properties of environments.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param environment Represents an environment instance
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EnvironmentInner> updateAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, EnvironmentFragment environment, final ServiceCallback<EnvironmentInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, environment), serviceCallback);
    }

    /**
     * Modify properties of environments.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param environment Represents an environment instance
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnvironmentInner object
     */
    public Observable<EnvironmentInner> updateAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, EnvironmentFragment environment) {
        return updateWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, environment).map(new Func1<ServiceResponse<EnvironmentInner>, EnvironmentInner>() {
            @Override
            public EnvironmentInner call(ServiceResponse<EnvironmentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Modify properties of environments.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param environment Represents an environment instance
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnvironmentInner object
     */
    public Observable<ServiceResponse<EnvironmentInner>> updateWithServiceResponseAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, EnvironmentFragment environment) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (labName == null) {
            throw new IllegalArgumentException("Parameter labName is required and cannot be null.");
        }
        if (environmentSettingName == null) {
            throw new IllegalArgumentException("Parameter environmentSettingName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (environment == null) {
            throw new IllegalArgumentException("Parameter environment is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(environment);
        return service.update(this.client.subscriptionId(), resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, environment, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EnvironmentInner>>>() {
                @Override
                public Observable<ServiceResponse<EnvironmentInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EnvironmentInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EnvironmentInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EnvironmentInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<EnvironmentInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Claims the environment and assigns it to the user.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void claim(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        claimWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName).toBlocking().single().body();
    }

    /**
     * Claims the environment and assigns it to the user.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> claimAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(claimWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName), serviceCallback);
    }

    /**
     * Claims the environment and assigns it to the user.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> claimAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        return claimWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Claims the environment and assigns it to the user.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> claimWithServiceResponseAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (labName == null) {
            throw new IllegalArgumentException("Parameter labName is required and cannot be null.");
        }
        if (environmentSettingName == null) {
            throw new IllegalArgumentException("Parameter environmentSettingName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.claim(this.client.subscriptionId(), resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = claimDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> claimDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void resetPassword(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, ResetPasswordPayload resetPasswordPayload) {
        resetPasswordWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, resetPasswordPayload).toBlocking().last().body();
    }

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> resetPasswordAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, ResetPasswordPayload resetPasswordPayload, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(resetPasswordWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, resetPasswordPayload), serviceCallback);
    }

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> resetPasswordAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, ResetPasswordPayload resetPasswordPayload) {
        return resetPasswordWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, resetPasswordPayload).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> resetPasswordWithServiceResponseAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, ResetPasswordPayload resetPasswordPayload) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (labName == null) {
            throw new IllegalArgumentException("Parameter labName is required and cannot be null.");
        }
        if (environmentSettingName == null) {
            throw new IllegalArgumentException("Parameter environmentSettingName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (resetPasswordPayload == null) {
            throw new IllegalArgumentException("Parameter resetPasswordPayload is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(resetPasswordPayload);
        Observable<Response<ResponseBody>> observable = service.resetPassword(this.client.subscriptionId(), resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, resetPasswordPayload, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginResetPassword(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, ResetPasswordPayload resetPasswordPayload) {
        beginResetPasswordWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, resetPasswordPayload).toBlocking().single().body();
    }

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginResetPasswordAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, ResetPasswordPayload resetPasswordPayload, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginResetPasswordWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, resetPasswordPayload), serviceCallback);
    }

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginResetPasswordAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, ResetPasswordPayload resetPasswordPayload) {
        return beginResetPasswordWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, resetPasswordPayload).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Resets the user password on an environment This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param resetPasswordPayload Represents the payload for resetting passwords.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginResetPasswordWithServiceResponseAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, ResetPasswordPayload resetPasswordPayload) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (labName == null) {
            throw new IllegalArgumentException("Parameter labName is required and cannot be null.");
        }
        if (environmentSettingName == null) {
            throw new IllegalArgumentException("Parameter environmentSettingName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (resetPasswordPayload == null) {
            throw new IllegalArgumentException("Parameter resetPasswordPayload is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(resetPasswordPayload);
        return service.beginResetPassword(this.client.subscriptionId(), resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, resetPasswordPayload, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginResetPasswordDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginResetPasswordDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void start(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        startWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName).toBlocking().last().body();
    }

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> startAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(startWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName), serviceCallback);
    }

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> startAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        return startWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> startWithServiceResponseAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (labName == null) {
            throw new IllegalArgumentException("Parameter labName is required and cannot be null.");
        }
        if (environmentSettingName == null) {
            throw new IllegalArgumentException("Parameter environmentSettingName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.start(this.client.subscriptionId(), resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginStart(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        beginStartWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName).toBlocking().single().body();
    }

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginStartAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginStartWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName), serviceCallback);
    }

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginStartAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        return beginStartWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginStartWithServiceResponseAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (labName == null) {
            throw new IllegalArgumentException("Parameter labName is required and cannot be null.");
        }
        if (environmentSettingName == null) {
            throw new IllegalArgumentException("Parameter environmentSettingName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginStart(this.client.subscriptionId(), resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginStartDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginStartDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void stop(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        stopWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName).toBlocking().last().body();
    }

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> stopAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(stopWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName), serviceCallback);
    }

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> stopAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        return stopWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> stopWithServiceResponseAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (labName == null) {
            throw new IllegalArgumentException("Parameter labName is required and cannot be null.");
        }
        if (environmentSettingName == null) {
            throw new IllegalArgumentException("Parameter environmentSettingName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.stop(this.client.subscriptionId(), resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginStop(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        beginStopWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName).toBlocking().single().body();
    }

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginStopAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginStopWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName), serviceCallback);
    }

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginStopAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        return beginStopWithServiceResponseAsync(resourceGroupName, labAccountName, labName, environmentSettingName, environmentName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labName The name of the lab.
     * @param environmentSettingName The name of the environment Setting.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginStopWithServiceResponseAsync(String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (labName == null) {
            throw new IllegalArgumentException("Parameter labName is required and cannot be null.");
        }
        if (environmentSettingName == null) {
            throw new IllegalArgumentException("Parameter environmentSettingName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginStop(this.client.subscriptionId(), resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginStopDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginStopDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List environments in a given environment setting.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;EnvironmentInner&gt; object if successful.
     */
    public PagedList<EnvironmentInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<EnvironmentInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<EnvironmentInner>(response.body()) {
            @Override
            public Page<EnvironmentInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List environments in a given environment setting.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EnvironmentInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<EnvironmentInner>> serviceFuture, final ListOperationCallback<EnvironmentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<EnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EnvironmentInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List environments in a given environment setting.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EnvironmentInner&gt; object
     */
    public Observable<Page<EnvironmentInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<EnvironmentInner>>, Page<EnvironmentInner>>() {
                @Override
                public Page<EnvironmentInner> call(ServiceResponse<Page<EnvironmentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List environments in a given environment setting.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EnvironmentInner&gt; object
     */
    public Observable<ServiceResponse<Page<EnvironmentInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<EnvironmentInner>>, Observable<ServiceResponse<Page<EnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EnvironmentInner>>> call(ServiceResponse<Page<EnvironmentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List environments in a given environment setting.
     *
    ServiceResponse<PageImpl<EnvironmentInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;EnvironmentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<EnvironmentInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<EnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EnvironmentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EnvironmentInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<EnvironmentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<EnvironmentInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<EnvironmentInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<EnvironmentInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
