/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.labservices.v2018_10_15.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.labservices.v2018_10_15.CreateLabProperties;
import com.microsoft.azure.management.labservices.v2018_10_15.LabAccountFragment;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in LabAccounts.
 */
public class LabAccountsInner implements InnerSupportsGet<LabAccountInner>, InnerSupportsDelete<Void>, InnerSupportsListing<LabAccountInner> {
    /** The Retrofit service to perform REST calls. */
    private LabAccountsService service;
    /** The service client containing this operation class. */
    private ManagedLabsClientImpl client;

    /**
     * Initializes an instance of LabAccountsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public LabAccountsInner(Retrofit retrofit, ManagedLabsClientImpl client) {
        this.service = retrofit.create(LabAccountsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for LabAccounts to be
     * used by Retrofit to perform actually REST calls.
     */
    interface LabAccountsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.LabAccounts list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.LabServices/labaccounts")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("$expand") String expand, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$orderby") String orderby, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.LabAccounts listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("$expand") String expand, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$orderby") String orderby, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.LabAccounts getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("labAccountName") String labAccountName, @Query("$expand") String expand, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.LabAccounts createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("labAccountName") String labAccountName, @Body LabAccountInner labAccount, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.LabAccounts delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("labAccountName") String labAccountName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.LabAccounts beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("labAccountName") String labAccountName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.LabAccounts update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("labAccountName") String labAccountName, @Body LabAccountFragment labAccount, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.LabAccounts createLab" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/createLab")
        Observable<Response<ResponseBody>> createLab(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("labAccountName") String labAccountName, @Body CreateLabProperties createLabProperties, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.LabAccounts getRegionalAvailability" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/getRegionalAvailability")
        Observable<Response<ResponseBody>> getRegionalAvailability(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("labAccountName") String labAccountName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.LabAccounts listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.labservices.v2018_10_15.LabAccounts listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * List lab accounts in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;LabAccountInner&gt; object if successful.
     */
    public PagedList<LabAccountInner> list() {
        ServiceResponse<Page<LabAccountInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<LabAccountInner>(response.body()) {
            @Override
            public Page<LabAccountInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List lab accounts in a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LabAccountInner>> listAsync(final ListOperationCallback<LabAccountInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<LabAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabAccountInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List lab accounts in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabAccountInner&gt; object
     */
    public Observable<Page<LabAccountInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<LabAccountInner>>, Page<LabAccountInner>>() {
                @Override
                public Page<LabAccountInner> call(ServiceResponse<Page<LabAccountInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List lab accounts in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabAccountInner&gt; object
     */
    public Observable<ServiceResponse<Page<LabAccountInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<LabAccountInner>>, Observable<ServiceResponse<Page<LabAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabAccountInner>>> call(ServiceResponse<Page<LabAccountInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List lab accounts in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;LabAccountInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<LabAccountInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        final String filter = null;
        final Integer top = null;
        final String orderby = null;
        return service.list(this.client.subscriptionId(), expand, filter, top, orderby, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<LabAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabAccountInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<LabAccountInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<LabAccountInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List lab accounts in a subscription.
     *
     * @param expand Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;LabAccountInner&gt; object if successful.
     */
    public PagedList<LabAccountInner> list(final String expand, final String filter, final Integer top, final String orderby) {
        ServiceResponse<Page<LabAccountInner>> response = listSinglePageAsync(expand, filter, top, orderby).toBlocking().single();
        return new PagedList<LabAccountInner>(response.body()) {
            @Override
            public Page<LabAccountInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List lab accounts in a subscription.
     *
     * @param expand Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LabAccountInner>> listAsync(final String expand, final String filter, final Integer top, final String orderby, final ListOperationCallback<LabAccountInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(expand, filter, top, orderby),
            new Func1<String, Observable<ServiceResponse<Page<LabAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabAccountInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List lab accounts in a subscription.
     *
     * @param expand Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabAccountInner&gt; object
     */
    public Observable<Page<LabAccountInner>> listAsync(final String expand, final String filter, final Integer top, final String orderby) {
        return listWithServiceResponseAsync(expand, filter, top, orderby)
            .map(new Func1<ServiceResponse<Page<LabAccountInner>>, Page<LabAccountInner>>() {
                @Override
                public Page<LabAccountInner> call(ServiceResponse<Page<LabAccountInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List lab accounts in a subscription.
     *
     * @param expand Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabAccountInner&gt; object
     */
    public Observable<ServiceResponse<Page<LabAccountInner>>> listWithServiceResponseAsync(final String expand, final String filter, final Integer top, final String orderby) {
        return listSinglePageAsync(expand, filter, top, orderby)
            .concatMap(new Func1<ServiceResponse<Page<LabAccountInner>>, Observable<ServiceResponse<Page<LabAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabAccountInner>>> call(ServiceResponse<Page<LabAccountInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List lab accounts in a subscription.
     *
    ServiceResponse<PageImpl<LabAccountInner>> * @param expand Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
    ServiceResponse<PageImpl<LabAccountInner>> * @param filter The filter to apply to the operation.
    ServiceResponse<PageImpl<LabAccountInner>> * @param top The maximum number of resources to return from the operation.
    ServiceResponse<PageImpl<LabAccountInner>> * @param orderby The ordering expression for the results, using OData notation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;LabAccountInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<LabAccountInner>>> listSinglePageAsync(final String expand, final String filter, final Integer top, final String orderby) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), expand, filter, top, orderby, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<LabAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabAccountInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<LabAccountInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<LabAccountInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<LabAccountInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<LabAccountInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<LabAccountInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List lab accounts in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;LabAccountInner&gt; object if successful.
     */
    public PagedList<LabAccountInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<LabAccountInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<LabAccountInner>(response.body()) {
            @Override
            public Page<LabAccountInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List lab accounts in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LabAccountInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<LabAccountInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<LabAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabAccountInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List lab accounts in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabAccountInner&gt; object
     */
    public Observable<Page<LabAccountInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<LabAccountInner>>, Page<LabAccountInner>>() {
                @Override
                public Page<LabAccountInner> call(ServiceResponse<Page<LabAccountInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List lab accounts in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabAccountInner&gt; object
     */
    public Observable<ServiceResponse<Page<LabAccountInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<LabAccountInner>>, Observable<ServiceResponse<Page<LabAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabAccountInner>>> call(ServiceResponse<Page<LabAccountInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List lab accounts in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;LabAccountInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<LabAccountInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        final String filter = null;
        final Integer top = null;
        final String orderby = null;
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, expand, filter, top, orderby, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<LabAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabAccountInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<LabAccountInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<LabAccountInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List lab accounts in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param expand Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;LabAccountInner&gt; object if successful.
     */
    public PagedList<LabAccountInner> listByResourceGroup(final String resourceGroupName, final String expand, final String filter, final Integer top, final String orderby) {
        ServiceResponse<Page<LabAccountInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName, expand, filter, top, orderby).toBlocking().single();
        return new PagedList<LabAccountInner>(response.body()) {
            @Override
            public Page<LabAccountInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List lab accounts in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param expand Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LabAccountInner>> listByResourceGroupAsync(final String resourceGroupName, final String expand, final String filter, final Integer top, final String orderby, final ListOperationCallback<LabAccountInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName, expand, filter, top, orderby),
            new Func1<String, Observable<ServiceResponse<Page<LabAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabAccountInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List lab accounts in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param expand Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabAccountInner&gt; object
     */
    public Observable<Page<LabAccountInner>> listByResourceGroupAsync(final String resourceGroupName, final String expand, final String filter, final Integer top, final String orderby) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName, expand, filter, top, orderby)
            .map(new Func1<ServiceResponse<Page<LabAccountInner>>, Page<LabAccountInner>>() {
                @Override
                public Page<LabAccountInner> call(ServiceResponse<Page<LabAccountInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List lab accounts in a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param expand Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
     * @param filter The filter to apply to the operation.
     * @param top The maximum number of resources to return from the operation.
     * @param orderby The ordering expression for the results, using OData notation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabAccountInner&gt; object
     */
    public Observable<ServiceResponse<Page<LabAccountInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String expand, final String filter, final Integer top, final String orderby) {
        return listByResourceGroupSinglePageAsync(resourceGroupName, expand, filter, top, orderby)
            .concatMap(new Func1<ServiceResponse<Page<LabAccountInner>>, Observable<ServiceResponse<Page<LabAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabAccountInner>>> call(ServiceResponse<Page<LabAccountInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List lab accounts in a resource group.
     *
    ServiceResponse<PageImpl<LabAccountInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<LabAccountInner>> * @param expand Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
    ServiceResponse<PageImpl<LabAccountInner>> * @param filter The filter to apply to the operation.
    ServiceResponse<PageImpl<LabAccountInner>> * @param top The maximum number of resources to return from the operation.
    ServiceResponse<PageImpl<LabAccountInner>> * @param orderby The ordering expression for the results, using OData notation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;LabAccountInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<LabAccountInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName, final String expand, final String filter, final Integer top, final String orderby) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, expand, filter, top, orderby, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<LabAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabAccountInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<LabAccountInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<LabAccountInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<LabAccountInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<LabAccountInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<LabAccountInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get lab account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LabAccountInner object if successful.
     */
    public LabAccountInner getByResourceGroup(String resourceGroupName, String labAccountName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, labAccountName).toBlocking().single().body();
    }

    /**
     * Get lab account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LabAccountInner> getByResourceGroupAsync(String resourceGroupName, String labAccountName, final ServiceCallback<LabAccountInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, labAccountName), serviceCallback);
    }

    /**
     * Get lab account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LabAccountInner object
     */
    public Observable<LabAccountInner> getByResourceGroupAsync(String resourceGroupName, String labAccountName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, labAccountName).map(new Func1<ServiceResponse<LabAccountInner>, LabAccountInner>() {
            @Override
            public LabAccountInner call(ServiceResponse<LabAccountInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get lab account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LabAccountInner object
     */
    public Observable<ServiceResponse<LabAccountInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String labAccountName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, labAccountName, expand, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LabAccountInner>>>() {
                @Override
                public Observable<ServiceResponse<LabAccountInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LabAccountInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get lab account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param expand Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LabAccountInner object if successful.
     */
    public LabAccountInner getByResourceGroup(String resourceGroupName, String labAccountName, String expand) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, labAccountName, expand).toBlocking().single().body();
    }

    /**
     * Get lab account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param expand Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LabAccountInner> getByResourceGroupAsync(String resourceGroupName, String labAccountName, String expand, final ServiceCallback<LabAccountInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, labAccountName, expand), serviceCallback);
    }

    /**
     * Get lab account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param expand Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LabAccountInner object
     */
    public Observable<LabAccountInner> getByResourceGroupAsync(String resourceGroupName, String labAccountName, String expand) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, labAccountName, expand).map(new Func1<ServiceResponse<LabAccountInner>, LabAccountInner>() {
            @Override
            public LabAccountInner call(ServiceResponse<LabAccountInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get lab account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param expand Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LabAccountInner object
     */
    public Observable<ServiceResponse<LabAccountInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String labAccountName, String expand) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, labAccountName, expand, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LabAccountInner>>>() {
                @Override
                public Observable<ServiceResponse<LabAccountInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LabAccountInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LabAccountInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<LabAccountInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<LabAccountInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or replace an existing Lab Account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labAccount Represents a lab account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LabAccountInner object if successful.
     */
    public LabAccountInner createOrUpdate(String resourceGroupName, String labAccountName, LabAccountInner labAccount) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, labAccountName, labAccount).toBlocking().single().body();
    }

    /**
     * Create or replace an existing Lab Account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labAccount Represents a lab account.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LabAccountInner> createOrUpdateAsync(String resourceGroupName, String labAccountName, LabAccountInner labAccount, final ServiceCallback<LabAccountInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, labAccountName, labAccount), serviceCallback);
    }

    /**
     * Create or replace an existing Lab Account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labAccount Represents a lab account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LabAccountInner object
     */
    public Observable<LabAccountInner> createOrUpdateAsync(String resourceGroupName, String labAccountName, LabAccountInner labAccount) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, labAccountName, labAccount).map(new Func1<ServiceResponse<LabAccountInner>, LabAccountInner>() {
            @Override
            public LabAccountInner call(ServiceResponse<LabAccountInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or replace an existing Lab Account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labAccount Represents a lab account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LabAccountInner object
     */
    public Observable<ServiceResponse<LabAccountInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String labAccountName, LabAccountInner labAccount) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (labAccount == null) {
            throw new IllegalArgumentException("Parameter labAccount is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(labAccount);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, labAccountName, labAccount, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LabAccountInner>>>() {
                @Override
                public Observable<ServiceResponse<LabAccountInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LabAccountInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LabAccountInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<LabAccountInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<LabAccountInner>() { }.getType())
                .register(201, new TypeToken<LabAccountInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete lab account. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String labAccountName) {
        deleteWithServiceResponseAsync(resourceGroupName, labAccountName).toBlocking().last().body();
    }

    /**
     * Delete lab account. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String labAccountName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, labAccountName), serviceCallback);
    }

    /**
     * Delete lab account. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String labAccountName) {
        return deleteWithServiceResponseAsync(resourceGroupName, labAccountName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete lab account. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String labAccountName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, labAccountName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete lab account. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String labAccountName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, labAccountName).toBlocking().single().body();
    }

    /**
     * Delete lab account. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String labAccountName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, labAccountName), serviceCallback);
    }

    /**
     * Delete lab account. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String labAccountName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, labAccountName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete lab account. This operation can take a while to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String labAccountName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, labAccountName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Modify properties of lab accounts.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labAccount Represents a lab account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LabAccountInner object if successful.
     */
    public LabAccountInner update(String resourceGroupName, String labAccountName, LabAccountFragment labAccount) {
        return updateWithServiceResponseAsync(resourceGroupName, labAccountName, labAccount).toBlocking().single().body();
    }

    /**
     * Modify properties of lab accounts.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labAccount Represents a lab account.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LabAccountInner> updateAsync(String resourceGroupName, String labAccountName, LabAccountFragment labAccount, final ServiceCallback<LabAccountInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, labAccountName, labAccount), serviceCallback);
    }

    /**
     * Modify properties of lab accounts.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labAccount Represents a lab account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LabAccountInner object
     */
    public Observable<LabAccountInner> updateAsync(String resourceGroupName, String labAccountName, LabAccountFragment labAccount) {
        return updateWithServiceResponseAsync(resourceGroupName, labAccountName, labAccount).map(new Func1<ServiceResponse<LabAccountInner>, LabAccountInner>() {
            @Override
            public LabAccountInner call(ServiceResponse<LabAccountInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Modify properties of lab accounts.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param labAccount Represents a lab account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LabAccountInner object
     */
    public Observable<ServiceResponse<LabAccountInner>> updateWithServiceResponseAsync(String resourceGroupName, String labAccountName, LabAccountFragment labAccount) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (labAccount == null) {
            throw new IllegalArgumentException("Parameter labAccount is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(labAccount);
        return service.update(this.client.subscriptionId(), resourceGroupName, labAccountName, labAccount, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LabAccountInner>>>() {
                @Override
                public Observable<ServiceResponse<LabAccountInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LabAccountInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LabAccountInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<LabAccountInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<LabAccountInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create a lab in a lab account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param createLabProperties Properties for creating a managed lab and a default environment setting
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void createLab(String resourceGroupName, String labAccountName, CreateLabProperties createLabProperties) {
        createLabWithServiceResponseAsync(resourceGroupName, labAccountName, createLabProperties).toBlocking().single().body();
    }

    /**
     * Create a lab in a lab account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param createLabProperties Properties for creating a managed lab and a default environment setting
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> createLabAsync(String resourceGroupName, String labAccountName, CreateLabProperties createLabProperties, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(createLabWithServiceResponseAsync(resourceGroupName, labAccountName, createLabProperties), serviceCallback);
    }

    /**
     * Create a lab in a lab account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param createLabProperties Properties for creating a managed lab and a default environment setting
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> createLabAsync(String resourceGroupName, String labAccountName, CreateLabProperties createLabProperties) {
        return createLabWithServiceResponseAsync(resourceGroupName, labAccountName, createLabProperties).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a lab in a lab account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param createLabProperties Properties for creating a managed lab and a default environment setting
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> createLabWithServiceResponseAsync(String resourceGroupName, String labAccountName, CreateLabProperties createLabProperties) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (createLabProperties == null) {
            throw new IllegalArgumentException("Parameter createLabProperties is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(createLabProperties);
        return service.createLab(this.client.subscriptionId(), resourceGroupName, labAccountName, createLabProperties, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = createLabDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> createLabDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get regional availability information for each size category configured under a lab account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GetRegionalAvailabilityResponseInner object if successful.
     */
    public GetRegionalAvailabilityResponseInner getRegionalAvailability(String resourceGroupName, String labAccountName) {
        return getRegionalAvailabilityWithServiceResponseAsync(resourceGroupName, labAccountName).toBlocking().single().body();
    }

    /**
     * Get regional availability information for each size category configured under a lab account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GetRegionalAvailabilityResponseInner> getRegionalAvailabilityAsync(String resourceGroupName, String labAccountName, final ServiceCallback<GetRegionalAvailabilityResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(getRegionalAvailabilityWithServiceResponseAsync(resourceGroupName, labAccountName), serviceCallback);
    }

    /**
     * Get regional availability information for each size category configured under a lab account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GetRegionalAvailabilityResponseInner object
     */
    public Observable<GetRegionalAvailabilityResponseInner> getRegionalAvailabilityAsync(String resourceGroupName, String labAccountName) {
        return getRegionalAvailabilityWithServiceResponseAsync(resourceGroupName, labAccountName).map(new Func1<ServiceResponse<GetRegionalAvailabilityResponseInner>, GetRegionalAvailabilityResponseInner>() {
            @Override
            public GetRegionalAvailabilityResponseInner call(ServiceResponse<GetRegionalAvailabilityResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get regional availability information for each size category configured under a lab account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param labAccountName The name of the lab Account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GetRegionalAvailabilityResponseInner object
     */
    public Observable<ServiceResponse<GetRegionalAvailabilityResponseInner>> getRegionalAvailabilityWithServiceResponseAsync(String resourceGroupName, String labAccountName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (labAccountName == null) {
            throw new IllegalArgumentException("Parameter labAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getRegionalAvailability(this.client.subscriptionId(), resourceGroupName, labAccountName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GetRegionalAvailabilityResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<GetRegionalAvailabilityResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GetRegionalAvailabilityResponseInner> clientResponse = getRegionalAvailabilityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<GetRegionalAvailabilityResponseInner> getRegionalAvailabilityDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<GetRegionalAvailabilityResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<GetRegionalAvailabilityResponseInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List lab accounts in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;LabAccountInner&gt; object if successful.
     */
    public PagedList<LabAccountInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<LabAccountInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<LabAccountInner>(response.body()) {
            @Override
            public Page<LabAccountInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List lab accounts in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LabAccountInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<LabAccountInner>> serviceFuture, final ListOperationCallback<LabAccountInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<LabAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabAccountInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List lab accounts in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabAccountInner&gt; object
     */
    public Observable<Page<LabAccountInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<LabAccountInner>>, Page<LabAccountInner>>() {
                @Override
                public Page<LabAccountInner> call(ServiceResponse<Page<LabAccountInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List lab accounts in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabAccountInner&gt; object
     */
    public Observable<ServiceResponse<Page<LabAccountInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<LabAccountInner>>, Observable<ServiceResponse<Page<LabAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabAccountInner>>> call(ServiceResponse<Page<LabAccountInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List lab accounts in a subscription.
     *
    ServiceResponse<PageImpl<LabAccountInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;LabAccountInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<LabAccountInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<LabAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabAccountInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<LabAccountInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<LabAccountInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<LabAccountInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<LabAccountInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<LabAccountInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List lab accounts in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;LabAccountInner&gt; object if successful.
     */
    public PagedList<LabAccountInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<LabAccountInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<LabAccountInner>(response.body()) {
            @Override
            public Page<LabAccountInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List lab accounts in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LabAccountInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<LabAccountInner>> serviceFuture, final ListOperationCallback<LabAccountInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<LabAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabAccountInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List lab accounts in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabAccountInner&gt; object
     */
    public Observable<Page<LabAccountInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<LabAccountInner>>, Page<LabAccountInner>>() {
                @Override
                public Page<LabAccountInner> call(ServiceResponse<Page<LabAccountInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List lab accounts in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;LabAccountInner&gt; object
     */
    public Observable<ServiceResponse<Page<LabAccountInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<LabAccountInner>>, Observable<ServiceResponse<Page<LabAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabAccountInner>>> call(ServiceResponse<Page<LabAccountInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List lab accounts in a resource group.
     *
    ServiceResponse<PageImpl<LabAccountInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;LabAccountInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<LabAccountInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<LabAccountInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<LabAccountInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<LabAccountInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<LabAccountInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<LabAccountInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<LabAccountInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<LabAccountInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
