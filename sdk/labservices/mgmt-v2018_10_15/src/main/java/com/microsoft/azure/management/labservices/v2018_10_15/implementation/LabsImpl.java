/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.labservices.v2018_10_15.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.labservices.v2018_10_15.Labs;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import java.util.List;
import com.microsoft.azure.management.labservices.v2018_10_15.Lab;

class LabsImpl extends WrapperImpl<LabsInner> implements Labs {
    private final LabServicesManager manager;

    LabsImpl(LabServicesManager manager) {
        super(manager.inner().labs());
        this.manager = manager;
    }

    public LabServicesManager manager() {
        return this.manager;
    }

    @Override
    public LabImpl define(String name) {
        return wrapModel(name);
    }

    private LabImpl wrapModel(LabInner inner) {
        return  new LabImpl(inner, manager());
    }

    private LabImpl wrapModel(String name) {
        return new LabImpl(name, this.manager());
    }

    @Override
    public Completable addUsersAsync(String resourceGroupName, String labAccountName, String labName, List<String> emailAddresses) {
        LabsInner client = this.inner();
        return client.addUsersAsync(resourceGroupName, labAccountName, labName, emailAddresses).toCompletable();
    }

    @Override
    public Completable registerAsync(String resourceGroupName, String labAccountName, String labName) {
        LabsInner client = this.inner();
        return client.registerAsync(resourceGroupName, labAccountName, labName).toCompletable();
    }

    @Override
    public Observable<Lab> listAsync(final String resourceGroupName, final String labAccountName) {
        LabsInner client = this.inner();
        return client.listAsync(resourceGroupName, labAccountName)
        .flatMapIterable(new Func1<Page<LabInner>, Iterable<LabInner>>() {
            @Override
            public Iterable<LabInner> call(Page<LabInner> page) {
                return page.items();
            }
        })
        .map(new Func1<LabInner, Lab>() {
            @Override
            public Lab call(LabInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<Lab> getAsync(String resourceGroupName, String labAccountName, String labName) {
        LabsInner client = this.inner();
        return client.getAsync(resourceGroupName, labAccountName, labName)
        .map(new Func1<LabInner, Lab>() {
            @Override
            public Lab call(LabInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String labAccountName, String labName) {
        LabsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, labAccountName, labName).toCompletable();
    }

}
