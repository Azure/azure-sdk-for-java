/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.timeseriesinsights.v2017_11_15;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.timeseriesinsights.v2017_11_15.implementation.ReferenceDataSetResourceInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.timeseriesinsights.v2017_11_15.implementation.TimeSeriesInsightsManager;
import java.util.Map;
import java.util.List;
import org.joda.time.DateTime;

/**
 * Type representing ReferenceDataSetResource.
 */
public interface ReferenceDataSetResource extends HasInner<ReferenceDataSetResourceInner>, Indexable, Refreshable<ReferenceDataSetResource>, Updatable<ReferenceDataSetResource.Update>, HasManager<TimeSeriesInsightsManager> {
    /**
     * @return the creationTime value.
     */
    DateTime creationTime();

    /**
     * @return the dataStringComparisonBehavior value.
     */
    DataStringComparisonBehavior dataStringComparisonBehavior();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the keyProperties value.
     */
    List<ReferenceDataSetKeyProperty> keyProperties();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the ReferenceDataSetResource definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithEnvironment, DefinitionStages.WithKeyProperties, DefinitionStages.WithLocation, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of ReferenceDataSetResource definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a ReferenceDataSetResource definition.
         */
        interface Blank extends WithEnvironment {
        }

        /**
         * The stage of the referencedatasetresource definition allowing to specify Environment.
         */
        interface WithEnvironment {
           /**
            * Specifies resourceGroupName, environmentName.
            * @param resourceGroupName Name of an Azure Resource group
            * @param environmentName The name of the Time Series Insights environment associated with the specified resource group
            * @return the next definition stage
            */
            WithKeyProperties withExistingEnvironment(String resourceGroupName, String environmentName);
        }

        /**
         * The stage of the referencedatasetresource definition allowing to specify KeyProperties.
         */
        interface WithKeyProperties {
           /**
            * Specifies keyProperties.
            * @param keyProperties The list of key properties for the reference data set
            * @return the next definition stage
            */
            WithLocation withKeyProperties(List<ReferenceDataSetKeyProperty> keyProperties);
        }

        /**
         * The stage of the referencedatasetresource definition allowing to specify Location.
         */
        interface WithLocation {
           /**
            * Specifies location.
            * @param location The location of the resource
            * @return the next definition stage
            */
            WithCreate withLocation(String location);
        }

        /**
         * The stage of the referencedatasetresource definition allowing to specify DataStringComparisonBehavior.
         */
        interface WithDataStringComparisonBehavior {
            /**
             * Specifies dataStringComparisonBehavior.
             * @param dataStringComparisonBehavior The reference data set key comparison behavior can be set using this property. By default, the value is 'Ordinal' - which means case sensitive key comparison will be performed while joining reference data with events or while adding new reference data. When 'OrdinalIgnoreCase' is set, case insensitive comparison will be used. Possible values include: 'Ordinal', 'OrdinalIgnoreCase'
             * @return the next definition stage
             */
            WithCreate withDataStringComparisonBehavior(DataStringComparisonBehavior dataStringComparisonBehavior);
        }

        /**
         * The stage of the referencedatasetresource definition allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Key-value pairs of additional properties for the resource
             * @return the next definition stage
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<ReferenceDataSetResource>, DefinitionStages.WithDataStringComparisonBehavior, DefinitionStages.WithTags {
        }
    }
    /**
     * The template for a ReferenceDataSetResource update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<ReferenceDataSetResource>, UpdateStages.WithDataStringComparisonBehavior, UpdateStages.WithTags {
    }

    /**
     * Grouping of ReferenceDataSetResource update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the referencedatasetresource update allowing to specify DataStringComparisonBehavior.
         */
        interface WithDataStringComparisonBehavior {
            /**
             * Specifies dataStringComparisonBehavior.
             * @param dataStringComparisonBehavior The reference data set key comparison behavior can be set using this property. By default, the value is 'Ordinal' - which means case sensitive key comparison will be performed while joining reference data with events or while adding new reference data. When 'OrdinalIgnoreCase' is set, case insensitive comparison will be used. Possible values include: 'Ordinal', 'OrdinalIgnoreCase'
             * @return the next update stage
             */
            Update withDataStringComparisonBehavior(DataStringComparisonBehavior dataStringComparisonBehavior);
        }

        /**
         * The stage of the referencedatasetresource update allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Key-value pairs of additional properties for the resource
             * @return the next update stage
             */
            Update withTags(Map<String, String> tags);
        }

    }
}
