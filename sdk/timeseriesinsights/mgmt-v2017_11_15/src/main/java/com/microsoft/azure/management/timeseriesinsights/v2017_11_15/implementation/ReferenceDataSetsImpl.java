/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.timeseriesinsights.v2017_11_15.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.timeseriesinsights.v2017_11_15.ReferenceDataSets;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.timeseriesinsights.v2017_11_15.ReferenceDataSetListResponse;
import com.microsoft.azure.management.timeseriesinsights.v2017_11_15.ReferenceDataSetResource;

class ReferenceDataSetsImpl extends WrapperImpl<ReferenceDataSetsInner> implements ReferenceDataSets {
    private final TimeSeriesInsightsManager manager;

    ReferenceDataSetsImpl(TimeSeriesInsightsManager manager) {
        super(manager.inner().referenceDataSets());
        this.manager = manager;
    }

    public TimeSeriesInsightsManager manager() {
        return this.manager;
    }

    @Override
    public ReferenceDataSetResourceImpl define(String name) {
        return wrapModel(name);
    }

    private ReferenceDataSetResourceImpl wrapModel(ReferenceDataSetResourceInner inner) {
        return  new ReferenceDataSetResourceImpl(inner, manager());
    }

    private ReferenceDataSetResourceImpl wrapModel(String name) {
        return new ReferenceDataSetResourceImpl(name, this.manager());
    }

    @Override
    public Observable<ReferenceDataSetListResponse> listByEnvironmentAsync(String resourceGroupName, String environmentName) {
        ReferenceDataSetsInner client = this.inner();
        return client.listByEnvironmentAsync(resourceGroupName, environmentName)
        .map(new Func1<ReferenceDataSetListResponseInner, ReferenceDataSetListResponse>() {
            @Override
            public ReferenceDataSetListResponse call(ReferenceDataSetListResponseInner inner) {
                return new ReferenceDataSetListResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ReferenceDataSetResource> getAsync(String resourceGroupName, String environmentName, String referenceDataSetName) {
        ReferenceDataSetsInner client = this.inner();
        return client.getAsync(resourceGroupName, environmentName, referenceDataSetName)
        .flatMap(new Func1<ReferenceDataSetResourceInner, Observable<ReferenceDataSetResource>>() {
            @Override
            public Observable<ReferenceDataSetResource> call(ReferenceDataSetResourceInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((ReferenceDataSetResource)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String environmentName, String referenceDataSetName) {
        ReferenceDataSetsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, environmentName, referenceDataSetName).toCompletable();
    }

}
