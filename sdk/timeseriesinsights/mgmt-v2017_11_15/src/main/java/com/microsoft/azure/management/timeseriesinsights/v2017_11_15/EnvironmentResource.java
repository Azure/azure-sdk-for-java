/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.timeseriesinsights.v2017_11_15;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.timeseriesinsights.v2017_11_15.implementation.TimeSeriesInsightsManager;
import org.joda.time.Period;
import java.util.List;
import org.joda.time.DateTime;
import java.util.UUID;
import com.microsoft.azure.management.timeseriesinsights.v2017_11_15.implementation.EnvironmentResourceInner;

/**
 * Type representing EnvironmentResource.
 */
public interface EnvironmentResource extends HasInner<EnvironmentResourceInner>, Resource, GroupableResourceCore<TimeSeriesInsightsManager, EnvironmentResourceInner>, HasResourceGroup, Refreshable<EnvironmentResource>, Updatable<EnvironmentResource.Update>, HasManager<TimeSeriesInsightsManager> {
    /**
     * @return the creationTime value.
     */
    DateTime creationTime();

    /**
     * @return the dataAccessFqdn value.
     */
    String dataAccessFqdn();

    /**
     * @return the dataAccessId value.
     */
    UUID dataAccessId();

    /**
     * @return the dataRetentionTime value.
     */
    Period dataRetentionTime();

    /**
     * @return the partitionKeyProperties value.
     */
    List<PartitionKeyProperty> partitionKeyProperties();

    /**
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * @return the sku value.
     */
    Sku sku();

    /**
     * @return the status value.
     */
    EnvironmentStatus status();

    /**
     * @return the storageLimitExceededBehavior value.
     */
    StorageLimitExceededBehavior storageLimitExceededBehavior();

    /**
     * The entirety of the EnvironmentResource definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithDataRetentionTime, DefinitionStages.WithSku, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of EnvironmentResource definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a EnvironmentResource definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the EnvironmentResource definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithDataRetentionTime> {
        }

        /**
         * The stage of the environmentresource definition allowing to specify DataRetentionTime.
         */
        interface WithDataRetentionTime {
           /**
            * Specifies dataRetentionTime.
            * @param dataRetentionTime ISO8601 timespan specifying the minimum number of days the environment's events will be available for query
            * @return the next definition stage
*/
            WithSku withDataRetentionTime(Period dataRetentionTime);
        }

        /**
         * The stage of the environmentresource definition allowing to specify Sku.
         */
        interface WithSku {
           /**
            * Specifies sku.
            * @param sku The sku determines the capacity of the environment, the SLA (in queries-per-minute and total capacity), and the billing rate
            * @return the next definition stage
*/
            WithCreate withSku(Sku sku);
        }

        /**
         * The stage of the environmentresource definition allowing to specify PartitionKeyProperties.
         */
        interface WithPartitionKeyProperties {
            /**
             * Specifies partitionKeyProperties.
             * @param partitionKeyProperties The list of partition keys according to which the data in the environment will be ordered
             * @return the next definition stage
             */
            WithCreate withPartitionKeyProperties(List<PartitionKeyProperty> partitionKeyProperties);
        }

        /**
         * The stage of the environmentresource definition allowing to specify StorageLimitExceededBehavior.
         */
        interface WithStorageLimitExceededBehavior {
            /**
             * Specifies storageLimitExceededBehavior.
             * @param storageLimitExceededBehavior The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If "PauseIngress" is specified, new events will not be read from the event source. If "PurgeOldData" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData. Possible values include: 'PurgeOldData', 'PauseIngress'
             * @return the next definition stage
             */
            WithCreate withStorageLimitExceededBehavior(StorageLimitExceededBehavior storageLimitExceededBehavior);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<EnvironmentResource>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithPartitionKeyProperties, DefinitionStages.WithStorageLimitExceededBehavior {
        }
    }
    /**
     * The template for a EnvironmentResource update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<EnvironmentResource>, Resource.UpdateWithTags<Update>, UpdateStages.WithDataRetentionTime, UpdateStages.WithPartitionKeyProperties, UpdateStages.WithSku, UpdateStages.WithStorageLimitExceededBehavior {
    }

    /**
     * Grouping of EnvironmentResource update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the environmentresource update allowing to specify DataRetentionTime.
         */
        interface WithDataRetentionTime {
            /**
             * Specifies dataRetentionTime.
             * @param dataRetentionTime ISO8601 timespan specifying the minimum number of days the environment's events will be available for query
             * @return the next update stage
             */
            Update withDataRetentionTime(Period dataRetentionTime);
        }

        /**
         * The stage of the environmentresource update allowing to specify PartitionKeyProperties.
         */
        interface WithPartitionKeyProperties {
            /**
             * Specifies partitionKeyProperties.
             * @param partitionKeyProperties The list of event properties which will be used to partition data in the environment
             * @return the next update stage
             */
            Update withPartitionKeyProperties(List<PartitionKeyProperty> partitionKeyProperties);
        }

        /**
         * The stage of the environmentresource update allowing to specify Sku.
         */
        interface WithSku {
            /**
             * Specifies sku.
             * @param sku The sku of the environment
             * @return the next update stage
             */
            Update withSku(Sku sku);
        }

        /**
         * The stage of the environmentresource update allowing to specify StorageLimitExceededBehavior.
         */
        interface WithStorageLimitExceededBehavior {
            /**
             * Specifies storageLimitExceededBehavior.
             * @param storageLimitExceededBehavior The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If "PauseIngress" is specified, new events will not be read from the event source. If "PurgeOldData" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData. Possible values include: 'PurgeOldData', 'PauseIngress'
             * @return the next update stage
             */
            Update withStorageLimitExceededBehavior(StorageLimitExceededBehavior storageLimitExceededBehavior);
        }

    }
}
