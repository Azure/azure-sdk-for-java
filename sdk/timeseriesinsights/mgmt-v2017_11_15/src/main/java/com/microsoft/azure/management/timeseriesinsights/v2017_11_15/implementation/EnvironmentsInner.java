/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.timeseriesinsights.v2017_11_15.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.timeseriesinsights.v2017_11_15.EnvironmentCreateOrUpdateParameters;
import com.microsoft.azure.management.timeseriesinsights.v2017_11_15.EnvironmentUpdateParameters;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Environments.
 */
public class EnvironmentsInner implements InnerSupportsGet<EnvironmentResourceInner>, InnerSupportsDelete<Void>, InnerSupportsListing<EnvironmentResourceInner> {
    /** The Retrofit service to perform REST calls. */
    private EnvironmentsService service;
    /** The service client containing this operation class. */
    private TimeSeriesInsightsClientImpl client;

    /**
     * Initializes an instance of EnvironmentsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public EnvironmentsInner(Retrofit retrofit, TimeSeriesInsightsClientImpl client) {
        this.service = retrofit.create(EnvironmentsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Environments to be
     * used by Retrofit to perform actually REST calls.
     */
    interface EnvironmentsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.timeseriesinsights.v2017_11_15.Environments createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("environmentName") String environmentName, @Query("api-version") String apiVersion, @Body EnvironmentCreateOrUpdateParameters parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.timeseriesinsights.v2017_11_15.Environments beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("environmentName") String environmentName, @Query("api-version") String apiVersion, @Body EnvironmentCreateOrUpdateParameters parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.timeseriesinsights.v2017_11_15.Environments getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("environmentName") String environmentName, @Query("$expand") String expand, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.timeseriesinsights.v2017_11_15.Environments update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("environmentName") String environmentName, @Body EnvironmentUpdateParameters environmentUpdateParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.timeseriesinsights.v2017_11_15.Environments beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("environmentName") String environmentName, @Body EnvironmentUpdateParameters environmentUpdateParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.timeseriesinsights.v2017_11_15.Environments delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("environmentName") String environmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.timeseriesinsights.v2017_11_15.Environments listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.timeseriesinsights.v2017_11_15.Environments list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.TimeSeriesInsights/environments")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Create or update an environment in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName Name of the environment
     * @param parameters Parameters for creating an environment resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EnvironmentResourceInner object if successful.
     */
    public EnvironmentResourceInner createOrUpdate(String resourceGroupName, String environmentName, EnvironmentCreateOrUpdateParameters parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, environmentName, parameters).toBlocking().last().body();
    }

    /**
     * Create or update an environment in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName Name of the environment
     * @param parameters Parameters for creating an environment resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EnvironmentResourceInner> createOrUpdateAsync(String resourceGroupName, String environmentName, EnvironmentCreateOrUpdateParameters parameters, final ServiceCallback<EnvironmentResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, environmentName, parameters), serviceCallback);
    }

    /**
     * Create or update an environment in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName Name of the environment
     * @param parameters Parameters for creating an environment resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<EnvironmentResourceInner> createOrUpdateAsync(String resourceGroupName, String environmentName, EnvironmentCreateOrUpdateParameters parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, environmentName, parameters).map(new Func1<ServiceResponse<EnvironmentResourceInner>, EnvironmentResourceInner>() {
            @Override
            public EnvironmentResourceInner call(ServiceResponse<EnvironmentResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update an environment in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName Name of the environment
     * @param parameters Parameters for creating an environment resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<EnvironmentResourceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String environmentName, EnvironmentCreateOrUpdateParameters parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, environmentName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<EnvironmentResourceInner>() { }.getType());
    }

    /**
     * Create or update an environment in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName Name of the environment
     * @param parameters Parameters for creating an environment resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EnvironmentResourceInner object if successful.
     */
    public EnvironmentResourceInner beginCreateOrUpdate(String resourceGroupName, String environmentName, EnvironmentCreateOrUpdateParameters parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, environmentName, parameters).toBlocking().single().body();
    }

    /**
     * Create or update an environment in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName Name of the environment
     * @param parameters Parameters for creating an environment resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EnvironmentResourceInner> beginCreateOrUpdateAsync(String resourceGroupName, String environmentName, EnvironmentCreateOrUpdateParameters parameters, final ServiceCallback<EnvironmentResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, environmentName, parameters), serviceCallback);
    }

    /**
     * Create or update an environment in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName Name of the environment
     * @param parameters Parameters for creating an environment resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnvironmentResourceInner object
     */
    public Observable<EnvironmentResourceInner> beginCreateOrUpdateAsync(String resourceGroupName, String environmentName, EnvironmentCreateOrUpdateParameters parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, environmentName, parameters).map(new Func1<ServiceResponse<EnvironmentResourceInner>, EnvironmentResourceInner>() {
            @Override
            public EnvironmentResourceInner call(ServiceResponse<EnvironmentResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update an environment in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName Name of the environment
     * @param parameters Parameters for creating an environment resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnvironmentResourceInner object
     */
    public Observable<ServiceResponse<EnvironmentResourceInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String environmentName, EnvironmentCreateOrUpdateParameters parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, environmentName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EnvironmentResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<EnvironmentResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EnvironmentResourceInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EnvironmentResourceInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EnvironmentResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<EnvironmentResourceInner>() { }.getType())
                .register(201, new TypeToken<EnvironmentResourceInner>() { }.getType())
                .register(404, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the environment with the specified name in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EnvironmentResourceInner object if successful.
     */
    public EnvironmentResourceInner getByResourceGroup(String resourceGroupName, String environmentName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, environmentName).toBlocking().single().body();
    }

    /**
     * Gets the environment with the specified name in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EnvironmentResourceInner> getByResourceGroupAsync(String resourceGroupName, String environmentName, final ServiceCallback<EnvironmentResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, environmentName), serviceCallback);
    }

    /**
     * Gets the environment with the specified name in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnvironmentResourceInner object
     */
    public Observable<EnvironmentResourceInner> getByResourceGroupAsync(String resourceGroupName, String environmentName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, environmentName).map(new Func1<ServiceResponse<EnvironmentResourceInner>, EnvironmentResourceInner>() {
            @Override
            public EnvironmentResourceInner call(ServiceResponse<EnvironmentResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the environment with the specified name in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnvironmentResourceInner object
     */
    public Observable<ServiceResponse<EnvironmentResourceInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String environmentName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, environmentName, expand, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EnvironmentResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<EnvironmentResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EnvironmentResourceInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets the environment with the specified name in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param expand Setting $expand=status will include the status of the internal services of the environment in the Time Series Insights service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EnvironmentResourceInner object if successful.
     */
    public EnvironmentResourceInner getByResourceGroup(String resourceGroupName, String environmentName, String expand) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, environmentName, expand).toBlocking().single().body();
    }

    /**
     * Gets the environment with the specified name in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param expand Setting $expand=status will include the status of the internal services of the environment in the Time Series Insights service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EnvironmentResourceInner> getByResourceGroupAsync(String resourceGroupName, String environmentName, String expand, final ServiceCallback<EnvironmentResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, environmentName, expand), serviceCallback);
    }

    /**
     * Gets the environment with the specified name in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param expand Setting $expand=status will include the status of the internal services of the environment in the Time Series Insights service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnvironmentResourceInner object
     */
    public Observable<EnvironmentResourceInner> getByResourceGroupAsync(String resourceGroupName, String environmentName, String expand) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, environmentName, expand).map(new Func1<ServiceResponse<EnvironmentResourceInner>, EnvironmentResourceInner>() {
            @Override
            public EnvironmentResourceInner call(ServiceResponse<EnvironmentResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the environment with the specified name in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param expand Setting $expand=status will include the status of the internal services of the environment in the Time Series Insights service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnvironmentResourceInner object
     */
    public Observable<ServiceResponse<EnvironmentResourceInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String environmentName, String expand) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, environmentName, expand, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EnvironmentResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<EnvironmentResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EnvironmentResourceInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EnvironmentResourceInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EnvironmentResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<EnvironmentResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates the environment with the specified name in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param environmentUpdateParameters Request object that contains the updated information for the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EnvironmentResourceInner object if successful.
     */
    public EnvironmentResourceInner update(String resourceGroupName, String environmentName, EnvironmentUpdateParameters environmentUpdateParameters) {
        return updateWithServiceResponseAsync(resourceGroupName, environmentName, environmentUpdateParameters).toBlocking().last().body();
    }

    /**
     * Updates the environment with the specified name in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param environmentUpdateParameters Request object that contains the updated information for the environment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EnvironmentResourceInner> updateAsync(String resourceGroupName, String environmentName, EnvironmentUpdateParameters environmentUpdateParameters, final ServiceCallback<EnvironmentResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, environmentName, environmentUpdateParameters), serviceCallback);
    }

    /**
     * Updates the environment with the specified name in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param environmentUpdateParameters Request object that contains the updated information for the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<EnvironmentResourceInner> updateAsync(String resourceGroupName, String environmentName, EnvironmentUpdateParameters environmentUpdateParameters) {
        return updateWithServiceResponseAsync(resourceGroupName, environmentName, environmentUpdateParameters).map(new Func1<ServiceResponse<EnvironmentResourceInner>, EnvironmentResourceInner>() {
            @Override
            public EnvironmentResourceInner call(ServiceResponse<EnvironmentResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the environment with the specified name in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param environmentUpdateParameters Request object that contains the updated information for the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<EnvironmentResourceInner>> updateWithServiceResponseAsync(String resourceGroupName, String environmentName, EnvironmentUpdateParameters environmentUpdateParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (environmentUpdateParameters == null) {
            throw new IllegalArgumentException("Parameter environmentUpdateParameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(environmentUpdateParameters);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, environmentName, environmentUpdateParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<EnvironmentResourceInner>() { }.getType());
    }

    /**
     * Updates the environment with the specified name in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param environmentUpdateParameters Request object that contains the updated information for the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EnvironmentResourceInner object if successful.
     */
    public EnvironmentResourceInner beginUpdate(String resourceGroupName, String environmentName, EnvironmentUpdateParameters environmentUpdateParameters) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, environmentName, environmentUpdateParameters).toBlocking().single().body();
    }

    /**
     * Updates the environment with the specified name in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param environmentUpdateParameters Request object that contains the updated information for the environment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EnvironmentResourceInner> beginUpdateAsync(String resourceGroupName, String environmentName, EnvironmentUpdateParameters environmentUpdateParameters, final ServiceCallback<EnvironmentResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, environmentName, environmentUpdateParameters), serviceCallback);
    }

    /**
     * Updates the environment with the specified name in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param environmentUpdateParameters Request object that contains the updated information for the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnvironmentResourceInner object
     */
    public Observable<EnvironmentResourceInner> beginUpdateAsync(String resourceGroupName, String environmentName, EnvironmentUpdateParameters environmentUpdateParameters) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, environmentName, environmentUpdateParameters).map(new Func1<ServiceResponse<EnvironmentResourceInner>, EnvironmentResourceInner>() {
            @Override
            public EnvironmentResourceInner call(ServiceResponse<EnvironmentResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the environment with the specified name in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param environmentUpdateParameters Request object that contains the updated information for the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnvironmentResourceInner object
     */
    public Observable<ServiceResponse<EnvironmentResourceInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String environmentName, EnvironmentUpdateParameters environmentUpdateParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (environmentUpdateParameters == null) {
            throw new IllegalArgumentException("Parameter environmentUpdateParameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(environmentUpdateParameters);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, environmentName, environmentUpdateParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EnvironmentResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<EnvironmentResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EnvironmentResourceInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EnvironmentResourceInner> beginUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EnvironmentResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<EnvironmentResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes the environment with the specified name in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String environmentName) {
        deleteWithServiceResponseAsync(resourceGroupName, environmentName).toBlocking().single().body();
    }

    /**
     * Deletes the environment with the specified name in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String environmentName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, environmentName), serviceCallback);
    }

    /**
     * Deletes the environment with the specified name in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String environmentName) {
        return deleteWithServiceResponseAsync(resourceGroupName, environmentName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the environment with the specified name in the specified subscription and resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String environmentName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, environmentName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all the available environments associated with the subscription and within the specified resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @return the PagedList<EnvironmentResourceInner> object if successful.
     */
    public PagedList<EnvironmentResourceInner> listByResourceGroup(String resourceGroupName) {
        PageImpl1<EnvironmentResourceInner> page = new PageImpl1<>();
        page.setItems(listByResourceGroupWithServiceResponseAsync(resourceGroupName).toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<EnvironmentResourceInner>(page) {
            @Override
            public Page<EnvironmentResourceInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Lists all the available environments associated with the subscription and within the specified resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EnvironmentResourceInner>> listByResourceGroupAsync(String resourceGroupName, final ServiceCallback<List<EnvironmentResourceInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listByResourceGroupWithServiceResponseAsync(resourceGroupName), serviceCallback);
    }

    /**
     * Lists all the available environments associated with the subscription and within the specified resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @return the observable to the List&lt;EnvironmentResourceInner&gt; object
     */
    public Observable<Page<EnvironmentResourceInner>> listByResourceGroupAsync(String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName).map(new Func1<ServiceResponse<List<EnvironmentResourceInner>>, Page<EnvironmentResourceInner>>() {
            @Override
            public Page<EnvironmentResourceInner> call(ServiceResponse<List<EnvironmentResourceInner>> response) {
                PageImpl1<EnvironmentResourceInner> page = new PageImpl1<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Lists all the available environments associated with the subscription and within the specified resource group.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @return the observable to the List&lt;EnvironmentResourceInner&gt; object
     */
    public Observable<ServiceResponse<List<EnvironmentResourceInner>>> listByResourceGroupWithServiceResponseAsync(String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<EnvironmentResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<EnvironmentResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<EnvironmentResourceInner>> result = listByResourceGroupDelegate(response);
                        List<EnvironmentResourceInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<EnvironmentResourceInner>> clientResponse = new ServiceResponse<List<EnvironmentResourceInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<EnvironmentResourceInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<EnvironmentResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<EnvironmentResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all the available environments within a subscription, irrespective of the resource groups.
     *
     * @return the PagedList<EnvironmentResourceInner> object if successful.
     */
    public PagedList<EnvironmentResourceInner> list() {
        PageImpl1<EnvironmentResourceInner> page = new PageImpl1<>();
        page.setItems(listWithServiceResponseAsync().toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<EnvironmentResourceInner>(page) {
            @Override
            public Page<EnvironmentResourceInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Lists all the available environments within a subscription, irrespective of the resource groups.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EnvironmentResourceInner>> listAsync(final ServiceCallback<List<EnvironmentResourceInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Lists all the available environments within a subscription, irrespective of the resource groups.
     *
     * @return the observable to the List&lt;EnvironmentResourceInner&gt; object
     */
    public Observable<Page<EnvironmentResourceInner>> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<List<EnvironmentResourceInner>>, Page<EnvironmentResourceInner>>() {
            @Override
            public Page<EnvironmentResourceInner> call(ServiceResponse<List<EnvironmentResourceInner>> response) {
                PageImpl1<EnvironmentResourceInner> page = new PageImpl1<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Lists all the available environments within a subscription, irrespective of the resource groups.
     *
     * @return the observable to the List&lt;EnvironmentResourceInner&gt; object
     */
    public Observable<ServiceResponse<List<EnvironmentResourceInner>>> listWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<EnvironmentResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<EnvironmentResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<EnvironmentResourceInner>> result = listDelegate(response);
                        List<EnvironmentResourceInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<EnvironmentResourceInner>> clientResponse = new ServiceResponse<List<EnvironmentResourceInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<EnvironmentResourceInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<EnvironmentResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<EnvironmentResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
