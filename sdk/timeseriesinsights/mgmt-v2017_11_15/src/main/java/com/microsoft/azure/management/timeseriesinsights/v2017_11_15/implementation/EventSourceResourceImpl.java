/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.timeseriesinsights.v2017_11_15.implementation;

import com.microsoft.azure.management.timeseriesinsights.v2017_11_15.EventSourceResource;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.timeseriesinsights.v2017_11_15.EventSourceCreateOrUpdateParameters;
import java.util.Map;
import rx.functions.Func1;

class EventSourceResourceImpl extends CreatableUpdatableImpl<EventSourceResource, EventSourceResourceInner, EventSourceResourceImpl> implements EventSourceResource, EventSourceResource.Definition, EventSourceResource.Update {
    private final TimeSeriesInsightsManager manager;
    private String resourceGroupName;
    private String environmentName;
    private String eventSourceName;
    private EventSourceCreateOrUpdateParameters createOrUpdateParameter;

    EventSourceResourceImpl(String name, TimeSeriesInsightsManager manager) {
        super(name, new EventSourceResourceInner());
        this.manager = manager;
        // Set resource name
        this.eventSourceName = name;
        //
        this.createOrUpdateParameter = new EventSourceCreateOrUpdateParameters();
    }

    EventSourceResourceImpl(EventSourceResourceInner inner, TimeSeriesInsightsManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.eventSourceName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.environmentName = IdParsingUtils.getValueFromIdByName(inner.id(), "environments");
        this.eventSourceName = IdParsingUtils.getValueFromIdByName(inner.id(), "eventSources");
        //
        this.createOrUpdateParameter = new EventSourceCreateOrUpdateParameters();
    }

    @Override
    public TimeSeriesInsightsManager manager() {
        return this.manager;
    }

    @Override
    public Observable<EventSourceResource> createResourceAsync() {
        EventSourcesInner client = this.manager().inner().eventSources();
        return client.createOrUpdateAsync(this.resourceGroupName, this.environmentName, this.eventSourceName, this.createOrUpdateParameter)
            .map(new Func1<EventSourceResourceInner, EventSourceResourceInner>() {
               @Override
               public EventSourceResourceInner call(EventSourceResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<EventSourceResource> updateResourceAsync() {
        EventSourcesInner client = this.manager().inner().eventSources();
        return client.createOrUpdateAsync(this.resourceGroupName, this.environmentName, this.eventSourceName, this.createOrUpdateParameter)
            .map(new Func1<EventSourceResourceInner, EventSourceResourceInner>() {
               @Override
               public EventSourceResourceInner call(EventSourceResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<EventSourceResourceInner> getInnerAsync() {
        EventSourcesInner client = this.manager().inner().eventSources();
        return client.getAsync(this.resourceGroupName, this.environmentName, this.eventSourceName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createOrUpdateParameter = new EventSourceCreateOrUpdateParameters();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public EventSourceResourceImpl withExistingEnvironment(String resourceGroupName, String environmentName) {
        this.resourceGroupName = resourceGroupName;
        this.environmentName = environmentName;
        return this;
    }

    @Override
    public EventSourceResourceImpl withLocation(String location) {
        this.createOrUpdateParameter.withLocation(location);
        return this;
    }

    @Override
    public EventSourceResourceImpl withTags(Map<String, String> tags) {
        this.createOrUpdateParameter.withTags(tags);
        return this;
    }

}
