/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.timeseriesinsights.v2017_11_15.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.timeseriesinsights.v2017_11_15.ReferenceDataSetCreateOrUpdateParameters;
import com.microsoft.azure.management.timeseriesinsights.v2017_11_15.ReferenceDataSetUpdateParameters;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ReferenceDataSets.
 */
public class ReferenceDataSetsInner {
    /** The Retrofit service to perform REST calls. */
    private ReferenceDataSetsService service;
    /** The service client containing this operation class. */
    private TimeSeriesInsightsClientImpl client;

    /**
     * Initializes an instance of ReferenceDataSetsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ReferenceDataSetsInner(Retrofit retrofit, TimeSeriesInsightsClientImpl client) {
        this.service = retrofit.create(ReferenceDataSetsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ReferenceDataSets to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ReferenceDataSetsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.timeseriesinsights.v2017_11_15.ReferenceDataSets createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/referenceDataSets/{referenceDataSetName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("environmentName") String environmentName, @Path("referenceDataSetName") String referenceDataSetName, @Query("api-version") String apiVersion, @Body ReferenceDataSetCreateOrUpdateParameters parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.timeseriesinsights.v2017_11_15.ReferenceDataSets get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/referenceDataSets/{referenceDataSetName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("environmentName") String environmentName, @Path("referenceDataSetName") String referenceDataSetName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.timeseriesinsights.v2017_11_15.ReferenceDataSets update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/referenceDataSets/{referenceDataSetName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("environmentName") String environmentName, @Path("referenceDataSetName") String referenceDataSetName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ReferenceDataSetUpdateParameters referenceDataSetUpdateParameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.timeseriesinsights.v2017_11_15.ReferenceDataSets delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/referenceDataSets/{referenceDataSetName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("environmentName") String environmentName, @Path("referenceDataSetName") String referenceDataSetName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.timeseriesinsights.v2017_11_15.ReferenceDataSets listByEnvironment" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/referenceDataSets")
        Observable<Response<ResponseBody>> listByEnvironment(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("environmentName") String environmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Create or update a reference data set in the specified environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param referenceDataSetName Name of the reference data set.
     * @param parameters Parameters for creating a reference data set.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReferenceDataSetResourceInner object if successful.
     */
    public ReferenceDataSetResourceInner createOrUpdate(String resourceGroupName, String environmentName, String referenceDataSetName, ReferenceDataSetCreateOrUpdateParameters parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, environmentName, referenceDataSetName, parameters).toBlocking().single().body();
    }

    /**
     * Create or update a reference data set in the specified environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param referenceDataSetName Name of the reference data set.
     * @param parameters Parameters for creating a reference data set.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReferenceDataSetResourceInner> createOrUpdateAsync(String resourceGroupName, String environmentName, String referenceDataSetName, ReferenceDataSetCreateOrUpdateParameters parameters, final ServiceCallback<ReferenceDataSetResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, environmentName, referenceDataSetName, parameters), serviceCallback);
    }

    /**
     * Create or update a reference data set in the specified environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param referenceDataSetName Name of the reference data set.
     * @param parameters Parameters for creating a reference data set.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReferenceDataSetResourceInner object
     */
    public Observable<ReferenceDataSetResourceInner> createOrUpdateAsync(String resourceGroupName, String environmentName, String referenceDataSetName, ReferenceDataSetCreateOrUpdateParameters parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, environmentName, referenceDataSetName, parameters).map(new Func1<ServiceResponse<ReferenceDataSetResourceInner>, ReferenceDataSetResourceInner>() {
            @Override
            public ReferenceDataSetResourceInner call(ServiceResponse<ReferenceDataSetResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a reference data set in the specified environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param referenceDataSetName Name of the reference data set.
     * @param parameters Parameters for creating a reference data set.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReferenceDataSetResourceInner object
     */
    public Observable<ServiceResponse<ReferenceDataSetResourceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String environmentName, String referenceDataSetName, ReferenceDataSetCreateOrUpdateParameters parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (referenceDataSetName == null) {
            throw new IllegalArgumentException("Parameter referenceDataSetName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, environmentName, referenceDataSetName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReferenceDataSetResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ReferenceDataSetResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReferenceDataSetResourceInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReferenceDataSetResourceInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReferenceDataSetResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ReferenceDataSetResourceInner>() { }.getType())
                .register(201, new TypeToken<ReferenceDataSetResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the reference data set with the specified name in the specified environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with the specified environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReferenceDataSetResourceInner object if successful.
     */
    public ReferenceDataSetResourceInner get(String resourceGroupName, String environmentName, String referenceDataSetName) {
        return getWithServiceResponseAsync(resourceGroupName, environmentName, referenceDataSetName).toBlocking().single().body();
    }

    /**
     * Gets the reference data set with the specified name in the specified environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with the specified environment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReferenceDataSetResourceInner> getAsync(String resourceGroupName, String environmentName, String referenceDataSetName, final ServiceCallback<ReferenceDataSetResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, environmentName, referenceDataSetName), serviceCallback);
    }

    /**
     * Gets the reference data set with the specified name in the specified environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with the specified environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReferenceDataSetResourceInner object
     */
    public Observable<ReferenceDataSetResourceInner> getAsync(String resourceGroupName, String environmentName, String referenceDataSetName) {
        return getWithServiceResponseAsync(resourceGroupName, environmentName, referenceDataSetName).map(new Func1<ServiceResponse<ReferenceDataSetResourceInner>, ReferenceDataSetResourceInner>() {
            @Override
            public ReferenceDataSetResourceInner call(ServiceResponse<ReferenceDataSetResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the reference data set with the specified name in the specified environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with the specified environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReferenceDataSetResourceInner object
     */
    public Observable<ServiceResponse<ReferenceDataSetResourceInner>> getWithServiceResponseAsync(String resourceGroupName, String environmentName, String referenceDataSetName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (referenceDataSetName == null) {
            throw new IllegalArgumentException("Parameter referenceDataSetName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, environmentName, referenceDataSetName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReferenceDataSetResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ReferenceDataSetResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReferenceDataSetResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReferenceDataSetResourceInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReferenceDataSetResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ReferenceDataSetResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates the reference data set with the specified name in the specified subscription, resource group, and environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with the specified environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReferenceDataSetResourceInner object if successful.
     */
    public ReferenceDataSetResourceInner update(String resourceGroupName, String environmentName, String referenceDataSetName) {
        return updateWithServiceResponseAsync(resourceGroupName, environmentName, referenceDataSetName).toBlocking().single().body();
    }

    /**
     * Updates the reference data set with the specified name in the specified subscription, resource group, and environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with the specified environment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReferenceDataSetResourceInner> updateAsync(String resourceGroupName, String environmentName, String referenceDataSetName, final ServiceCallback<ReferenceDataSetResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, environmentName, referenceDataSetName), serviceCallback);
    }

    /**
     * Updates the reference data set with the specified name in the specified subscription, resource group, and environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with the specified environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReferenceDataSetResourceInner object
     */
    public Observable<ReferenceDataSetResourceInner> updateAsync(String resourceGroupName, String environmentName, String referenceDataSetName) {
        return updateWithServiceResponseAsync(resourceGroupName, environmentName, referenceDataSetName).map(new Func1<ServiceResponse<ReferenceDataSetResourceInner>, ReferenceDataSetResourceInner>() {
            @Override
            public ReferenceDataSetResourceInner call(ServiceResponse<ReferenceDataSetResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the reference data set with the specified name in the specified subscription, resource group, and environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with the specified environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReferenceDataSetResourceInner object
     */
    public Observable<ServiceResponse<ReferenceDataSetResourceInner>> updateWithServiceResponseAsync(String resourceGroupName, String environmentName, String referenceDataSetName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (referenceDataSetName == null) {
            throw new IllegalArgumentException("Parameter referenceDataSetName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        ReferenceDataSetUpdateParameters referenceDataSetUpdateParameters = new ReferenceDataSetUpdateParameters();
        referenceDataSetUpdateParameters.withTags(null);
        return service.update(this.client.subscriptionId(), resourceGroupName, environmentName, referenceDataSetName, this.client.apiVersion(), this.client.acceptLanguage(), referenceDataSetUpdateParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReferenceDataSetResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ReferenceDataSetResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReferenceDataSetResourceInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Updates the reference data set with the specified name in the specified subscription, resource group, and environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with the specified environment.
     * @param tags Key-value pairs of additional properties for the reference data set.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReferenceDataSetResourceInner object if successful.
     */
    public ReferenceDataSetResourceInner update(String resourceGroupName, String environmentName, String referenceDataSetName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, environmentName, referenceDataSetName, tags).toBlocking().single().body();
    }

    /**
     * Updates the reference data set with the specified name in the specified subscription, resource group, and environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with the specified environment.
     * @param tags Key-value pairs of additional properties for the reference data set.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReferenceDataSetResourceInner> updateAsync(String resourceGroupName, String environmentName, String referenceDataSetName, Map<String, String> tags, final ServiceCallback<ReferenceDataSetResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, environmentName, referenceDataSetName, tags), serviceCallback);
    }

    /**
     * Updates the reference data set with the specified name in the specified subscription, resource group, and environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with the specified environment.
     * @param tags Key-value pairs of additional properties for the reference data set.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReferenceDataSetResourceInner object
     */
    public Observable<ReferenceDataSetResourceInner> updateAsync(String resourceGroupName, String environmentName, String referenceDataSetName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, environmentName, referenceDataSetName, tags).map(new Func1<ServiceResponse<ReferenceDataSetResourceInner>, ReferenceDataSetResourceInner>() {
            @Override
            public ReferenceDataSetResourceInner call(ServiceResponse<ReferenceDataSetResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the reference data set with the specified name in the specified subscription, resource group, and environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with the specified environment.
     * @param tags Key-value pairs of additional properties for the reference data set.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReferenceDataSetResourceInner object
     */
    public Observable<ServiceResponse<ReferenceDataSetResourceInner>> updateWithServiceResponseAsync(String resourceGroupName, String environmentName, String referenceDataSetName, Map<String, String> tags) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (referenceDataSetName == null) {
            throw new IllegalArgumentException("Parameter referenceDataSetName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        ReferenceDataSetUpdateParameters referenceDataSetUpdateParameters = new ReferenceDataSetUpdateParameters();
        referenceDataSetUpdateParameters.withTags(tags);
        return service.update(this.client.subscriptionId(), resourceGroupName, environmentName, referenceDataSetName, this.client.apiVersion(), this.client.acceptLanguage(), referenceDataSetUpdateParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReferenceDataSetResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ReferenceDataSetResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReferenceDataSetResourceInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReferenceDataSetResourceInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReferenceDataSetResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ReferenceDataSetResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes the reference data set with the specified name in the specified subscription, resource group, and environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with the specified environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String environmentName, String referenceDataSetName) {
        deleteWithServiceResponseAsync(resourceGroupName, environmentName, referenceDataSetName).toBlocking().single().body();
    }

    /**
     * Deletes the reference data set with the specified name in the specified subscription, resource group, and environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with the specified environment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String environmentName, String referenceDataSetName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, environmentName, referenceDataSetName), serviceCallback);
    }

    /**
     * Deletes the reference data set with the specified name in the specified subscription, resource group, and environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with the specified environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String environmentName, String referenceDataSetName) {
        return deleteWithServiceResponseAsync(resourceGroupName, environmentName, referenceDataSetName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the reference data set with the specified name in the specified subscription, resource group, and environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param referenceDataSetName The name of the Time Series Insights reference data set associated with the specified environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String environmentName, String referenceDataSetName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (referenceDataSetName == null) {
            throw new IllegalArgumentException("Parameter referenceDataSetName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, environmentName, referenceDataSetName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all the available reference data sets associated with the subscription and within the specified resource group and environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReferenceDataSetListResponseInner object if successful.
     */
    public ReferenceDataSetListResponseInner listByEnvironment(String resourceGroupName, String environmentName) {
        return listByEnvironmentWithServiceResponseAsync(resourceGroupName, environmentName).toBlocking().single().body();
    }

    /**
     * Lists all the available reference data sets associated with the subscription and within the specified resource group and environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReferenceDataSetListResponseInner> listByEnvironmentAsync(String resourceGroupName, String environmentName, final ServiceCallback<ReferenceDataSetListResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByEnvironmentWithServiceResponseAsync(resourceGroupName, environmentName), serviceCallback);
    }

    /**
     * Lists all the available reference data sets associated with the subscription and within the specified resource group and environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReferenceDataSetListResponseInner object
     */
    public Observable<ReferenceDataSetListResponseInner> listByEnvironmentAsync(String resourceGroupName, String environmentName) {
        return listByEnvironmentWithServiceResponseAsync(resourceGroupName, environmentName).map(new Func1<ServiceResponse<ReferenceDataSetListResponseInner>, ReferenceDataSetListResponseInner>() {
            @Override
            public ReferenceDataSetListResponseInner call(ServiceResponse<ReferenceDataSetListResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all the available reference data sets associated with the subscription and within the specified resource group and environment.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param environmentName The name of the Time Series Insights environment associated with the specified resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReferenceDataSetListResponseInner object
     */
    public Observable<ServiceResponse<ReferenceDataSetListResponseInner>> listByEnvironmentWithServiceResponseAsync(String resourceGroupName, String environmentName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (environmentName == null) {
            throw new IllegalArgumentException("Parameter environmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByEnvironment(this.client.subscriptionId(), resourceGroupName, environmentName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReferenceDataSetListResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<ReferenceDataSetListResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReferenceDataSetListResponseInner> clientResponse = listByEnvironmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReferenceDataSetListResponseInner> listByEnvironmentDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReferenceDataSetListResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ReferenceDataSetListResponseInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
