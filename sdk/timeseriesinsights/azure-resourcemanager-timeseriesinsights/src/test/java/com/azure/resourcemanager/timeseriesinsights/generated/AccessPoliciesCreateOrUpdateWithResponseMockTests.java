// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.timeseriesinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.timeseriesinsights.TimeSeriesInsightsManager;
import com.azure.resourcemanager.timeseriesinsights.models.AccessPolicyResource;
import com.azure.resourcemanager.timeseriesinsights.models.AccessPolicyRole;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AccessPoliciesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"principalObjectId\":\"gsfraoyzkoow\",\"description\":\"mnguxawqaldsyu\",\"roles\":[\"Contributor\",\"Reader\",\"Reader\",\"Reader\"]},\"id\":\"fobwy\",\"name\":\"nkbykutwpfhp\",\"type\":\"gmhrskdsnfdsdoak\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        TimeSeriesInsightsManager manager = TimeSeriesInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AccessPolicyResource response = manager.accessPolicies()
            .define("oxciqopidoamcio")
            .withExistingEnvironment("i", "ybxarzgszu")
            .withPrincipalObjectId("khazxkhnzbonlwn")
            .withDescription("egokdwbwhkszzcmr")
            .withRoles(Arrays.asList(AccessPolicyRole.CONTRIBUTOR, AccessPolicyRole.READER,
                AccessPolicyRole.CONTRIBUTOR, AccessPolicyRole.READER))
            .create();

        Assertions.assertEquals("gsfraoyzkoow", response.principalObjectId());
        Assertions.assertEquals("mnguxawqaldsyu", response.description());
        Assertions.assertEquals(AccessPolicyRole.CONTRIBUTOR, response.roles().get(0));
    }
}
