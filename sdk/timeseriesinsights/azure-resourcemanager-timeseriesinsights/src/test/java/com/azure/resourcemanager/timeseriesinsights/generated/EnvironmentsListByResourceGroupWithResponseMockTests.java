// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.timeseriesinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.timeseriesinsights.TimeSeriesInsightsManager;
import com.azure.resourcemanager.timeseriesinsights.models.EnvironmentListResponse;
import com.azure.resourcemanager.timeseriesinsights.models.SkuName;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class EnvironmentsListByResourceGroupWithResponseMockTests {
    @Test
    public void testListByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"value\":[{\"kind\":\"EnvironmentResource\",\"sku\":{\"name\":\"L1\",\"capacity\":1742091153},\"location\":\"zl\",\"tags\":{\"fvmwy\":\"mpaxmodfvuefywsb\",\"yzvqt\":\"rfouyftaakcpw\",\"zksmondj\":\"nubexk\"},\"id\":\"quxvypomgkop\",\"name\":\"whojvp\",\"type\":\"jqg\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        TimeSeriesInsightsManager manager = TimeSeriesInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        EnvironmentListResponse response = manager.environments()
            .listByResourceGroupWithResponse("qsluicp", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("zl", response.value().get(0).location());
        Assertions.assertEquals("mpaxmodfvuefywsb", response.value().get(0).tags().get("fvmwy"));
        Assertions.assertEquals(SkuName.L1, response.value().get(0).sku().name());
        Assertions.assertEquals(1742091153, response.value().get(0).sku().capacity());
    }
}
