// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.timeseriesinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.timeseriesinsights.models.Dimension;
import com.azure.resourcemanager.timeseriesinsights.models.MetricAvailability;
import com.azure.resourcemanager.timeseriesinsights.models.MetricSpecification;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class MetricSpecificationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MetricSpecification model = BinaryData.fromString(
            "{\"name\":\"eic\",\"displayName\":\"w\",\"displayDescription\":\"zao\",\"unit\":\"uhrhcffcyddgl\",\"dimensions\":[{\"name\":\"jqkwpyeicx\",\"displayName\":\"ciwqvhk\"}],\"aggregationType\":\"xuigdtopbobj\",\"availabilities\":[{\"timeGrain\":\"e\",\"blobDuration\":\"a\"}],\"category\":\"uhrzayvvt\",\"resourceIdDimensionNameOverride\":\"vdfgiotk\"}")
            .toObject(MetricSpecification.class);
        Assertions.assertEquals("eic", model.name());
        Assertions.assertEquals("w", model.displayName());
        Assertions.assertEquals("zao", model.displayDescription());
        Assertions.assertEquals("uhrhcffcyddgl", model.unit());
        Assertions.assertEquals("jqkwpyeicx", model.dimensions().get(0).name());
        Assertions.assertEquals("ciwqvhk", model.dimensions().get(0).displayName());
        Assertions.assertEquals("xuigdtopbobj", model.aggregationType());
        Assertions.assertEquals("e", model.availabilities().get(0).timeGrain());
        Assertions.assertEquals("a", model.availabilities().get(0).blobDuration());
        Assertions.assertEquals("uhrzayvvt", model.category());
        Assertions.assertEquals("vdfgiotk", model.resourceIdDimensionNameOverride());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MetricSpecification model = new MetricSpecification().withName("eic")
            .withDisplayName("w")
            .withDisplayDescription("zao")
            .withUnit("uhrhcffcyddgl")
            .withDimensions(Arrays.asList(new Dimension().withName("jqkwpyeicx").withDisplayName("ciwqvhk")))
            .withAggregationType("xuigdtopbobj")
            .withAvailabilities(Arrays.asList(new MetricAvailability().withTimeGrain("e").withBlobDuration("a")))
            .withCategory("uhrzayvvt")
            .withResourceIdDimensionNameOverride("vdfgiotk");
        model = BinaryData.fromObject(model).toObject(MetricSpecification.class);
        Assertions.assertEquals("eic", model.name());
        Assertions.assertEquals("w", model.displayName());
        Assertions.assertEquals("zao", model.displayDescription());
        Assertions.assertEquals("uhrhcffcyddgl", model.unit());
        Assertions.assertEquals("jqkwpyeicx", model.dimensions().get(0).name());
        Assertions.assertEquals("ciwqvhk", model.dimensions().get(0).displayName());
        Assertions.assertEquals("xuigdtopbobj", model.aggregationType());
        Assertions.assertEquals("e", model.availabilities().get(0).timeGrain());
        Assertions.assertEquals("a", model.availabilities().get(0).blobDuration());
        Assertions.assertEquals("uhrzayvvt", model.category());
        Assertions.assertEquals("vdfgiotk", model.resourceIdDimensionNameOverride());
    }
}
