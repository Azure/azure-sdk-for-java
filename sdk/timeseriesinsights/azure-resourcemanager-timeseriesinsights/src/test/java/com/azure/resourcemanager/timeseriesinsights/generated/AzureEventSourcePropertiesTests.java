// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.timeseriesinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.timeseriesinsights.models.AzureEventSourceProperties;
import com.azure.resourcemanager.timeseriesinsights.models.IngressStartAtType;
import com.azure.resourcemanager.timeseriesinsights.models.LocalTimestamp;
import com.azure.resourcemanager.timeseriesinsights.models.LocalTimestampFormat;
import com.azure.resourcemanager.timeseriesinsights.models.LocalTimestampTimeZoneOffset;
import org.junit.jupiter.api.Assertions;

public final class AzureEventSourcePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureEventSourceProperties model = BinaryData.fromString(
            "{\"eventSourceResourceId\":\"wroyqbexrmcq\",\"timestampPropertyName\":\"ycnojvknmefqsg\",\"localTimestamp\":{\"format\":\"Embedded\",\"timeZoneOffset\":{\"propertyName\":\"jyzhpvgq\"}},\"ingressStartAt\":{\"type\":\"EventSourceCreationTime\",\"time\":\"xdjzlmwlxk\"},\"provisioningState\":\"Failed\",\"creationTime\":\"2021-11-07T19:38:17Z\"}")
            .toObject(AzureEventSourceProperties.class);
        Assertions.assertEquals("ycnojvknmefqsg", model.timestampPropertyName());
        Assertions.assertEquals(LocalTimestampFormat.EMBEDDED, model.localTimestamp().format());
        Assertions.assertEquals("jyzhpvgq", model.localTimestamp().timeZoneOffset().propertyName());
        Assertions.assertEquals(IngressStartAtType.EVENT_SOURCE_CREATION_TIME, model.type());
        Assertions.assertEquals("xdjzlmwlxk", model.time());
        Assertions.assertEquals("wroyqbexrmcq", model.eventSourceResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureEventSourceProperties model = new AzureEventSourceProperties().withTimestampPropertyName("ycnojvknmefqsg")
            .withLocalTimestamp(new LocalTimestamp().withFormat(LocalTimestampFormat.EMBEDDED)
                .withTimeZoneOffset(new LocalTimestampTimeZoneOffset().withPropertyName("jyzhpvgq")))
            .withType(IngressStartAtType.EVENT_SOURCE_CREATION_TIME)
            .withTime("xdjzlmwlxk")
            .withEventSourceResourceId("wroyqbexrmcq");
        model = BinaryData.fromObject(model).toObject(AzureEventSourceProperties.class);
        Assertions.assertEquals("ycnojvknmefqsg", model.timestampPropertyName());
        Assertions.assertEquals(LocalTimestampFormat.EMBEDDED, model.localTimestamp().format());
        Assertions.assertEquals("jyzhpvgq", model.localTimestamp().timeZoneOffset().propertyName());
        Assertions.assertEquals(IngressStartAtType.EVENT_SOURCE_CREATION_TIME, model.type());
        Assertions.assertEquals("xdjzlmwlxk", model.time());
        Assertions.assertEquals("wroyqbexrmcq", model.eventSourceResourceId());
    }
}
