// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.timeseriesinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.timeseriesinsights.models.EnvironmentCreateOrUpdateParameters;
import com.azure.resourcemanager.timeseriesinsights.models.Sku;
import com.azure.resourcemanager.timeseriesinsights.models.SkuName;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class EnvironmentCreateOrUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EnvironmentCreateOrUpdateParameters model = BinaryData.fromString(
            "{\"kind\":\"EnvironmentCreateOrUpdateParameters\",\"sku\":{\"name\":\"P1\",\"capacity\":974943815},\"location\":\"ktzlcuiywg\",\"tags\":{\"gpphrcgyn\":\"gndrvynh\",\"fsxlzevgbmqjqa\":\"ocpecfvmmco\",\"pmivkwlzu\":\"c\",\"ebxetqgtzxdp\":\"ccfwnfnbacfion\"}}")
            .toObject(EnvironmentCreateOrUpdateParameters.class);
        Assertions.assertEquals("ktzlcuiywg", model.location());
        Assertions.assertEquals("gndrvynh", model.tags().get("gpphrcgyn"));
        Assertions.assertEquals(SkuName.P1, model.sku().name());
        Assertions.assertEquals(974943815, model.sku().capacity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EnvironmentCreateOrUpdateParameters model = new EnvironmentCreateOrUpdateParameters().withLocation("ktzlcuiywg")
            .withTags(mapOf("gpphrcgyn", "gndrvynh", "fsxlzevgbmqjqa", "ocpecfvmmco", "pmivkwlzu", "c", "ebxetqgtzxdp",
                "ccfwnfnbacfion"))
            .withSku(new Sku().withName(SkuName.P1).withCapacity(974943815));
        model = BinaryData.fromObject(model).toObject(EnvironmentCreateOrUpdateParameters.class);
        Assertions.assertEquals("ktzlcuiywg", model.location());
        Assertions.assertEquals("gndrvynh", model.tags().get("gpphrcgyn"));
        Assertions.assertEquals(SkuName.P1, model.sku().name());
        Assertions.assertEquals(974943815, model.sku().capacity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
