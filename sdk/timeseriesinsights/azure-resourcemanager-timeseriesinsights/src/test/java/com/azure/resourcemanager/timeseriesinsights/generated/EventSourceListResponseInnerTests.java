// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.timeseriesinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.timeseriesinsights.fluent.models.EventSourceListResponseInner;
import com.azure.resourcemanager.timeseriesinsights.fluent.models.EventSourceResourceInner;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class EventSourceListResponseInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EventSourceListResponseInner model = BinaryData.fromString(
            "{\"value\":[{\"kind\":\"EventSourceResource\",\"location\":\"mvfaxkffeiith\",\"tags\":{\"v\":\"ez\"},\"id\":\"hxmzsbbzoggig\",\"name\":\"xwburvjxxjns\",\"type\":\"ydptkoen\"},{\"kind\":\"EventSourceResource\",\"location\":\"ou\",\"tags\":{\"ngkpocipazy\":\"udwtiukbl\",\"gukgjnpiucgygevq\":\"o\",\"dpydn\":\"ntypmrbpizcdrqj\",\"sjttgzfbish\":\"yhxdeoejzicwi\"},\"id\":\"bkh\",\"name\":\"jdeyeamdpha\",\"type\":\"alpbuxwgipwhon\"},{\"kind\":\"EventSourceResource\",\"location\":\"wkgshwa\",\"tags\":{\"rywn\":\"xzbinjeputt\",\"lwh\":\"zoqftiyqzrnkcqvy\",\"ryavwhheunmmqh\":\"lsicohoqqnwv\",\"noc\":\"yxzk\"},\"id\":\"koklya\",\"name\":\"uconuqszfkbey\",\"type\":\"ewrmjmwvvjektc\"},{\"kind\":\"EventSourceResource\",\"location\":\"senhwlrs\",\"tags\":{\"qdqgbi\":\"zpwv\",\"fcivfsnkym\":\"ylihkaetckt\",\"jf\":\"ctq\",\"fuwutttxf\":\"ebrjcxe\"},\"id\":\"jrbirphxepcyv\",\"name\":\"hfnljkyq\",\"type\":\"j\"}]}")
            .toObject(EventSourceListResponseInner.class);
        Assertions.assertEquals("mvfaxkffeiith", model.value().get(0).location());
        Assertions.assertEquals("ez", model.value().get(0).tags().get("v"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EventSourceListResponseInner model = new EventSourceListResponseInner().withValue(Arrays.asList(
            new EventSourceResourceInner().withLocation("mvfaxkffeiith").withTags(mapOf("v", "ez")),
            new EventSourceResourceInner().withLocation("ou")
                .withTags(mapOf("ngkpocipazy", "udwtiukbl", "gukgjnpiucgygevq", "o", "dpydn", "ntypmrbpizcdrqj",
                    "sjttgzfbish", "yhxdeoejzicwi")),
            new EventSourceResourceInner().withLocation("wkgshwa")
                .withTags(mapOf("rywn", "xzbinjeputt", "lwh", "zoqftiyqzrnkcqvy", "ryavwhheunmmqh", "lsicohoqqnwv",
                    "noc", "yxzk")),
            new EventSourceResourceInner().withLocation("senhwlrs")
                .withTags(mapOf("qdqgbi", "zpwv", "fcivfsnkym", "ylihkaetckt", "jf", "ctq", "fuwutttxf", "ebrjcxe"))));
        model = BinaryData.fromObject(model).toObject(EventSourceListResponseInner.class);
        Assertions.assertEquals("mvfaxkffeiith", model.value().get(0).location());
        Assertions.assertEquals("ez", model.value().get(0).tags().get("v"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
