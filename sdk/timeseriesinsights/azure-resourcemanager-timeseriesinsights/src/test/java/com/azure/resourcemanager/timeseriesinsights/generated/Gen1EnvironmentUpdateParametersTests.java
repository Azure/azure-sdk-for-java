// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.timeseriesinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.timeseriesinsights.models.Gen1EnvironmentUpdateParameters;
import com.azure.resourcemanager.timeseriesinsights.models.Sku;
import com.azure.resourcemanager.timeseriesinsights.models.SkuName;
import com.azure.resourcemanager.timeseriesinsights.models.StorageLimitExceededBehavior;
import java.time.Duration;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class Gen1EnvironmentUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Gen1EnvironmentUpdateParameters model = BinaryData.fromString(
            "{\"kind\":\"Gen1\",\"sku\":{\"name\":\"L1\",\"capacity\":1949820387},\"properties\":{\"dataRetentionTime\":\"PT33H49M39S\",\"storageLimitExceededBehavior\":\"PauseIngress\"},\"tags\":{\"kfrlhrxsbky\":\"bh\",\"afkuwb\":\"pycanuzbpz\",\"ehhseyvjusrts\":\"rnwb\"}}")
            .toObject(Gen1EnvironmentUpdateParameters.class);
        Assertions.assertEquals("bh", model.tags().get("kfrlhrxsbky"));
        Assertions.assertEquals(SkuName.L1, model.sku().name());
        Assertions.assertEquals(1949820387, model.sku().capacity());
        Assertions.assertEquals(Duration.parse("PT33H49M39S"), model.dataRetentionTime());
        Assertions.assertEquals(StorageLimitExceededBehavior.PAUSE_INGRESS, model.storageLimitExceededBehavior());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Gen1EnvironmentUpdateParameters model = new Gen1EnvironmentUpdateParameters()
            .withTags(mapOf("kfrlhrxsbky", "bh", "afkuwb", "pycanuzbpz", "ehhseyvjusrts", "rnwb"))
            .withSku(new Sku().withName(SkuName.L1).withCapacity(1949820387))
            .withDataRetentionTime(Duration.parse("PT33H49M39S"))
            .withStorageLimitExceededBehavior(StorageLimitExceededBehavior.PAUSE_INGRESS);
        model = BinaryData.fromObject(model).toObject(Gen1EnvironmentUpdateParameters.class);
        Assertions.assertEquals("bh", model.tags().get("kfrlhrxsbky"));
        Assertions.assertEquals(SkuName.L1, model.sku().name());
        Assertions.assertEquals(1949820387, model.sku().capacity());
        Assertions.assertEquals(Duration.parse("PT33H49M39S"), model.dataRetentionTime());
        Assertions.assertEquals(StorageLimitExceededBehavior.PAUSE_INGRESS, model.storageLimitExceededBehavior());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
