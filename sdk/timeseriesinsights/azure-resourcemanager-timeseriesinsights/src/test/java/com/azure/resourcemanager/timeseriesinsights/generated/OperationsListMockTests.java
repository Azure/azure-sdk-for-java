// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.timeseriesinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.timeseriesinsights.TimeSeriesInsightsManager;
import com.azure.resourcemanager.timeseriesinsights.models.Operation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"rcfbunrm\",\"display\":{\"provider\":\"hhkxbp\",\"resource\":\"ymjhxxjyngudivkr\",\"operation\":\"wbxqzvszjfau\",\"description\":\"fdxxivetvtcqaqtd\"},\"origin\":\"mcbxvwvxysl\",\"properties\":{\"serviceSpecification\":{\"metricSpecifications\":[{\"name\":\"obl\",\"displayName\":\"k\",\"displayDescription\":\"mpew\",\"unit\":\"fbkrvrnsvs\",\"dimensions\":[{},{}],\"aggregationType\":\"hxcr\",\"availabilities\":[{},{}],\"category\":\"vasrruvwb\",\"resourceIdDimensionNameOverride\":\"qfsubcgjbirx\"},{\"name\":\"ybsrfbjfdtwss\",\"displayName\":\"ftpvjzbexil\",\"displayDescription\":\"nfqqnvwp\",\"unit\":\"taruoujmkcj\",\"dimensions\":[{},{},{},{}],\"aggregationType\":\"tjrybnwjewgdr\",\"availabilities\":[{},{},{}],\"category\":\"naenqpehindo\",\"resourceIdDimensionNameOverride\":\"mifthnzdnd\"},{\"name\":\"gnayqigynduh\",\"displayName\":\"hqlkthumaqo\",\"displayDescription\":\"gycdu\",\"unit\":\"r\",\"dimensions\":[{},{},{},{}],\"aggregationType\":\"y\",\"availabilities\":[{},{}],\"category\":\"l\",\"resourceIdDimensionNameOverride\":\"slqlfmmdn\"}],\"logSpecifications\":[{\"name\":\"zpswiydmc\",\"displayName\":\"hzdxssadbzm\"},{\"name\":\"dfznudaodv\",\"displayName\":\"bncblylpstdbhhx\"},{\"name\":\"zdzucerscdntnevf\",\"displayName\":\"jmygtdsslswtmwer\"}]}}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        TimeSeriesInsightsManager manager = TimeSeriesInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Operation> response = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("mcbxvwvxysl", response.iterator().next().origin());
        Assertions.assertEquals("obl",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("k",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("mpew",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayDescription());
        Assertions.assertEquals("fbkrvrnsvs",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals("hxcr",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).aggregationType());
        Assertions.assertEquals("vasrruvwb",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).category());
        Assertions.assertEquals("qfsubcgjbirx",
            response.iterator()
                .next()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .resourceIdDimensionNameOverride());
        Assertions.assertEquals("zpswiydmc",
            response.iterator().next().serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("hzdxssadbzm",
            response.iterator().next().serviceSpecification().logSpecifications().get(0).displayName());
    }
}
