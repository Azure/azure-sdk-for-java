// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.timeseriesinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Parameters supplied to the Update Environment operation.
 */
@Fluent
public class EnvironmentUpdateParameters implements JsonSerializable<EnvironmentUpdateParameters> {
    /*
     * The kind of the environment.
     */
    private EnvironmentKind kind = EnvironmentKind.fromString("EnvironmentUpdateParameters");

    /*
     * Key-value pairs of additional properties for the environment.
     */
    private Map<String, String> tags;

    /**
     * Creates an instance of EnvironmentUpdateParameters class.
     */
    public EnvironmentUpdateParameters() {
    }

    /**
     * Get the kind property: The kind of the environment.
     * 
     * @return the kind value.
     */
    public EnvironmentKind kind() {
        return this.kind;
    }

    /**
     * Get the tags property: Key-value pairs of additional properties for the environment.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Key-value pairs of additional properties for the environment.
     * 
     * @param tags the tags value to set.
     * @return the EnvironmentUpdateParameters object itself.
     */
    public EnvironmentUpdateParameters withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnvironmentUpdateParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnvironmentUpdateParameters if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EnvironmentUpdateParameters.
     */
    public static EnvironmentUpdateParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Gen1".equals(discriminatorValue)) {
                    return Gen1EnvironmentUpdateParameters.fromJson(readerToUse.reset());
                } else if ("Gen2".equals(discriminatorValue)) {
                    return Gen2EnvironmentUpdateParameters.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static EnvironmentUpdateParameters fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnvironmentUpdateParameters deserializedEnvironmentUpdateParameters = new EnvironmentUpdateParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedEnvironmentUpdateParameters.kind = EnvironmentKind.fromString(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedEnvironmentUpdateParameters.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnvironmentUpdateParameters;
        });
    }
}
