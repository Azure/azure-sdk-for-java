// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.timeseriesinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;

/**
 * The warm store configuration provides the details to create a warm store cache that will retain a copy of the
 * environment's data available for faster query.
 */
@Fluent
public final class WarmStoreConfigurationProperties implements JsonSerializable<WarmStoreConfigurationProperties> {
    /*
     * ISO8601 timespan specifying the number of days the environment's events will be available for query from the warm
     * store.
     */
    private Duration dataRetention;

    /**
     * Creates an instance of WarmStoreConfigurationProperties class.
     */
    public WarmStoreConfigurationProperties() {
    }

    /**
     * Get the dataRetention property: ISO8601 timespan specifying the number of days the environment's events will be
     * available for query from the warm store.
     * 
     * @return the dataRetention value.
     */
    public Duration dataRetention() {
        return this.dataRetention;
    }

    /**
     * Set the dataRetention property: ISO8601 timespan specifying the number of days the environment's events will be
     * available for query from the warm store.
     * 
     * @param dataRetention the dataRetention value to set.
     * @return the WarmStoreConfigurationProperties object itself.
     */
    public WarmStoreConfigurationProperties withDataRetention(Duration dataRetention) {
        this.dataRetention = dataRetention;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataRetention() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataRetention in model WarmStoreConfigurationProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WarmStoreConfigurationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataRetention", CoreUtils.durationToStringWithDays(this.dataRetention));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WarmStoreConfigurationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WarmStoreConfigurationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WarmStoreConfigurationProperties.
     */
    public static WarmStoreConfigurationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WarmStoreConfigurationProperties deserializedWarmStoreConfigurationProperties
                = new WarmStoreConfigurationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataRetention".equals(fieldName)) {
                    deserializedWarmStoreConfigurationProperties.dataRetention
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWarmStoreConfigurationProperties;
        });
    }
}
