// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.timeseriesinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An object that represents a set of mutable event source resource properties.
 */
@Fluent
public class EventSourceMutableProperties implements JsonSerializable<EventSourceMutableProperties> {
    /*
     * The event property that will be used as the event source's timestamp. If a value isn't specified for
     * timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
     */
    private String timestampPropertyName;

    /**
     * Creates an instance of EventSourceMutableProperties class.
     */
    public EventSourceMutableProperties() {
    }

    /**
     * Get the timestampPropertyName property: The event property that will be used as the event source's timestamp. If
     * a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation
     * time will be used.
     * 
     * @return the timestampPropertyName value.
     */
    public String timestampPropertyName() {
        return this.timestampPropertyName;
    }

    /**
     * Set the timestampPropertyName property: The event property that will be used as the event source's timestamp. If
     * a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation
     * time will be used.
     * 
     * @param timestampPropertyName the timestampPropertyName value to set.
     * @return the EventSourceMutableProperties object itself.
     */
    public EventSourceMutableProperties withTimestampPropertyName(String timestampPropertyName) {
        this.timestampPropertyName = timestampPropertyName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("timestampPropertyName", this.timestampPropertyName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EventSourceMutableProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EventSourceMutableProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EventSourceMutableProperties.
     */
    public static EventSourceMutableProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EventSourceMutableProperties deserializedEventSourceMutableProperties = new EventSourceMutableProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("timestampPropertyName".equals(fieldName)) {
                    deserializedEventSourceMutableProperties.timestampPropertyName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEventSourceMutableProperties;
        });
    }
}
