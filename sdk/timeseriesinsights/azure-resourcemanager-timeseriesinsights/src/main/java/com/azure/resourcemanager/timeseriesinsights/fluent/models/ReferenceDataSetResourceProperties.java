// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.timeseriesinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.timeseriesinsights.models.DataStringComparisonBehavior;
import com.azure.resourcemanager.timeseriesinsights.models.ProvisioningState;
import com.azure.resourcemanager.timeseriesinsights.models.ReferenceDataSetKeyProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Properties of the reference data set.
 */
@Fluent
public final class ReferenceDataSetResourceProperties extends ReferenceDataSetCreationProperties {
    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /*
     * The time the resource was created.
     */
    private OffsetDateTime creationTime;

    /**
     * Creates an instance of ReferenceDataSetResourceProperties class.
     */
    public ReferenceDataSetResourceProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the creationTime property: The time the resource was created.
     * 
     * @return the creationTime value.
     */
    public OffsetDateTime creationTime() {
        return this.creationTime;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ReferenceDataSetResourceProperties withKeyProperties(List<ReferenceDataSetKeyProperty> keyProperties) {
        super.withKeyProperties(keyProperties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ReferenceDataSetResourceProperties
        withDataStringComparisonBehavior(DataStringComparisonBehavior dataStringComparisonBehavior) {
        super.withDataStringComparisonBehavior(dataStringComparisonBehavior);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (keyProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property keyProperties in model ReferenceDataSetResourceProperties"));
        } else {
            keyProperties().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ReferenceDataSetResourceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("keyProperties", keyProperties(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("dataStringComparisonBehavior",
            dataStringComparisonBehavior() == null ? null : dataStringComparisonBehavior().toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReferenceDataSetResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReferenceDataSetResourceProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ReferenceDataSetResourceProperties.
     */
    public static ReferenceDataSetResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReferenceDataSetResourceProperties deserializedReferenceDataSetResourceProperties
                = new ReferenceDataSetResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyProperties".equals(fieldName)) {
                    List<ReferenceDataSetKeyProperty> keyProperties
                        = reader.readArray(reader1 -> ReferenceDataSetKeyProperty.fromJson(reader1));
                    deserializedReferenceDataSetResourceProperties.withKeyProperties(keyProperties);
                } else if ("dataStringComparisonBehavior".equals(fieldName)) {
                    deserializedReferenceDataSetResourceProperties
                        .withDataStringComparisonBehavior(DataStringComparisonBehavior.fromString(reader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedReferenceDataSetResourceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("creationTime".equals(fieldName)) {
                    deserializedReferenceDataSetResourceProperties.creationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReferenceDataSetResourceProperties;
        });
    }
}
