// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.timeseriesinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.timeseriesinsights.models.StorageLimitExceededBehavior;
import com.azure.resourcemanager.timeseriesinsights.models.TimeSeriesIdProperty;
import java.io.IOException;
import java.time.Duration;
import java.util.List;

/**
 * Properties used to create a Gen1 environment.
 */
@Fluent
public class Gen1EnvironmentCreationProperties implements JsonSerializable<Gen1EnvironmentCreationProperties> {
    /*
     * ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.
     */
    private Duration dataRetentionTime;

    /*
     * The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If
     * "PauseIngress" is specified, new events will not be read from the event source. If "PurgeOldData" is specified,
     * new events will continue to be read and old events will be deleted from the environment. The default behavior is
     * PurgeOldData.
     */
    private StorageLimitExceededBehavior storageLimitExceededBehavior;

    /*
     * The list of event properties which will be used to partition data in the environment. Currently, only a single
     * partition key property is supported.
     */
    private List<TimeSeriesIdProperty> partitionKeyProperties;

    /**
     * Creates an instance of Gen1EnvironmentCreationProperties class.
     */
    public Gen1EnvironmentCreationProperties() {
    }

    /**
     * Get the dataRetentionTime property: ISO8601 timespan specifying the minimum number of days the environment's
     * events will be available for query.
     * 
     * @return the dataRetentionTime value.
     */
    public Duration dataRetentionTime() {
        return this.dataRetentionTime;
    }

    /**
     * Set the dataRetentionTime property: ISO8601 timespan specifying the minimum number of days the environment's
     * events will be available for query.
     * 
     * @param dataRetentionTime the dataRetentionTime value to set.
     * @return the Gen1EnvironmentCreationProperties object itself.
     */
    public Gen1EnvironmentCreationProperties withDataRetentionTime(Duration dataRetentionTime) {
        this.dataRetentionTime = dataRetentionTime;
        return this;
    }

    /**
     * Get the storageLimitExceededBehavior property: The behavior the Time Series Insights service should take when the
     * environment's capacity has been exceeded. If "PauseIngress" is specified, new events will not be read from the
     * event source. If "PurgeOldData" is specified, new events will continue to be read and old events will be deleted
     * from the environment. The default behavior is PurgeOldData.
     * 
     * @return the storageLimitExceededBehavior value.
     */
    public StorageLimitExceededBehavior storageLimitExceededBehavior() {
        return this.storageLimitExceededBehavior;
    }

    /**
     * Set the storageLimitExceededBehavior property: The behavior the Time Series Insights service should take when the
     * environment's capacity has been exceeded. If "PauseIngress" is specified, new events will not be read from the
     * event source. If "PurgeOldData" is specified, new events will continue to be read and old events will be deleted
     * from the environment. The default behavior is PurgeOldData.
     * 
     * @param storageLimitExceededBehavior the storageLimitExceededBehavior value to set.
     * @return the Gen1EnvironmentCreationProperties object itself.
     */
    public Gen1EnvironmentCreationProperties
        withStorageLimitExceededBehavior(StorageLimitExceededBehavior storageLimitExceededBehavior) {
        this.storageLimitExceededBehavior = storageLimitExceededBehavior;
        return this;
    }

    /**
     * Get the partitionKeyProperties property: The list of event properties which will be used to partition data in the
     * environment. Currently, only a single partition key property is supported.
     * 
     * @return the partitionKeyProperties value.
     */
    public List<TimeSeriesIdProperty> partitionKeyProperties() {
        return this.partitionKeyProperties;
    }

    /**
     * Set the partitionKeyProperties property: The list of event properties which will be used to partition data in the
     * environment. Currently, only a single partition key property is supported.
     * 
     * @param partitionKeyProperties the partitionKeyProperties value to set.
     * @return the Gen1EnvironmentCreationProperties object itself.
     */
    public Gen1EnvironmentCreationProperties
        withPartitionKeyProperties(List<TimeSeriesIdProperty> partitionKeyProperties) {
        this.partitionKeyProperties = partitionKeyProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataRetentionTime() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataRetentionTime in model Gen1EnvironmentCreationProperties"));
        }
        if (partitionKeyProperties() != null) {
            partitionKeyProperties().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Gen1EnvironmentCreationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataRetentionTime", CoreUtils.durationToStringWithDays(this.dataRetentionTime));
        jsonWriter.writeStringField("storageLimitExceededBehavior",
            this.storageLimitExceededBehavior == null ? null : this.storageLimitExceededBehavior.toString());
        jsonWriter.writeArrayField("partitionKeyProperties", this.partitionKeyProperties,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Gen1EnvironmentCreationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Gen1EnvironmentCreationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Gen1EnvironmentCreationProperties.
     */
    public static Gen1EnvironmentCreationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Gen1EnvironmentCreationProperties deserializedGen1EnvironmentCreationProperties
                = new Gen1EnvironmentCreationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataRetentionTime".equals(fieldName)) {
                    deserializedGen1EnvironmentCreationProperties.dataRetentionTime
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("storageLimitExceededBehavior".equals(fieldName)) {
                    deserializedGen1EnvironmentCreationProperties.storageLimitExceededBehavior
                        = StorageLimitExceededBehavior.fromString(reader.getString());
                } else if ("partitionKeyProperties".equals(fieldName)) {
                    List<TimeSeriesIdProperty> partitionKeyProperties
                        = reader.readArray(reader1 -> TimeSeriesIdProperty.fromJson(reader1));
                    deserializedGen1EnvironmentCreationProperties.partitionKeyProperties = partitionKeyProperties;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGen1EnvironmentCreationProperties;
        });
    }
}
