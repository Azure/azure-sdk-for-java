// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.timeseriesinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.timeseriesinsights.models.IngressStartAtType;
import com.azure.resourcemanager.timeseriesinsights.models.IoTHubEventSourceCommonProperties;
import com.azure.resourcemanager.timeseriesinsights.models.LocalTimestamp;
import com.azure.resourcemanager.timeseriesinsights.models.ProvisioningState;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Properties of the IoTHub event source resource.
 */
@Fluent
public final class IoTHubEventSourceResourceProperties extends IoTHubEventSourceCommonProperties {
    /*
     * An object that contains the details about the starting point in time to ingest events.
     */
    private IngressStartAtProperties innerIngressStartAt;

    /*
     * The time the resource was created.
     */
    private OffsetDateTime creationTime;

    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of IoTHubEventSourceResourceProperties class.
     */
    public IoTHubEventSourceResourceProperties() {
    }

    /**
     * Get the innerIngressStartAt property: An object that contains the details about the starting point in time to
     * ingest events.
     * 
     * @return the innerIngressStartAt value.
     */
    private IngressStartAtProperties innerIngressStartAt() {
        return this.innerIngressStartAt;
    }

    /**
     * Get the creationTime property: The time the resource was created.
     * 
     * @return the creationTime value.
     */
    @Override
    public OffsetDateTime creationTime() {
        return this.creationTime;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IoTHubEventSourceResourceProperties withIotHubName(String iotHubName) {
        super.withIotHubName(iotHubName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IoTHubEventSourceResourceProperties withConsumerGroupName(String consumerGroupName) {
        super.withConsumerGroupName(consumerGroupName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IoTHubEventSourceResourceProperties withKeyName(String keyName) {
        super.withKeyName(keyName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IoTHubEventSourceResourceProperties withEventSourceResourceId(String eventSourceResourceId) {
        super.withEventSourceResourceId(eventSourceResourceId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IoTHubEventSourceResourceProperties withTimestampPropertyName(String timestampPropertyName) {
        super.withTimestampPropertyName(timestampPropertyName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IoTHubEventSourceResourceProperties withLocalTimestamp(LocalTimestamp localTimestamp) {
        super.withLocalTimestamp(localTimestamp);
        return this;
    }

    /**
     * Get the type property: The type of the ingressStartAt, It can be "EarliestAvailable", "EventSourceCreationTime",
     * "CustomEnqueuedTime".
     * 
     * @return the type value.
     */
    public IngressStartAtType type() {
        return this.innerIngressStartAt() == null ? null : this.innerIngressStartAt().type();
    }

    /**
     * Set the type property: The type of the ingressStartAt, It can be "EarliestAvailable", "EventSourceCreationTime",
     * "CustomEnqueuedTime".
     * 
     * @param type the type value to set.
     * @return the IoTHubEventSourceResourceProperties object itself.
     */
    public IoTHubEventSourceResourceProperties withType(IngressStartAtType type) {
        if (this.innerIngressStartAt() == null) {
            this.innerIngressStartAt = new IngressStartAtProperties();
        }
        this.innerIngressStartAt().withType(type);
        return this;
    }

    /**
     * Get the time property: ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the
     * date and time that will be the starting point for Events to be consumed.
     * 
     * @return the time value.
     */
    public String time() {
        return this.innerIngressStartAt() == null ? null : this.innerIngressStartAt().time();
    }

    /**
     * Set the time property: ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the
     * date and time that will be the starting point for Events to be consumed.
     * 
     * @param time the time value to set.
     * @return the IoTHubEventSourceResourceProperties object itself.
     */
    public IoTHubEventSourceResourceProperties withTime(String time) {
        if (this.innerIngressStartAt() == null) {
            this.innerIngressStartAt = new IngressStartAtProperties();
        }
        this.innerIngressStartAt().withTime(time);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (localTimestamp() != null) {
            localTimestamp().validate();
        }
        if (innerIngressStartAt() != null) {
            innerIngressStartAt().validate();
        }
        if (eventSourceResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property eventSourceResourceId in model IoTHubEventSourceResourceProperties"));
        }
        if (iotHubName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property iotHubName in model IoTHubEventSourceResourceProperties"));
        }
        if (consumerGroupName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property consumerGroupName in model IoTHubEventSourceResourceProperties"));
        }
        if (keyName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property keyName in model IoTHubEventSourceResourceProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IoTHubEventSourceResourceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("eventSourceResourceId", eventSourceResourceId());
        jsonWriter.writeStringField("iotHubName", iotHubName());
        jsonWriter.writeStringField("consumerGroupName", consumerGroupName());
        jsonWriter.writeStringField("keyName", keyName());
        jsonWriter.writeStringField("timestampPropertyName", timestampPropertyName());
        jsonWriter.writeJsonField("localTimestamp", localTimestamp());
        jsonWriter.writeJsonField("ingressStartAt", innerIngressStartAt());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IoTHubEventSourceResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IoTHubEventSourceResourceProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IoTHubEventSourceResourceProperties.
     */
    public static IoTHubEventSourceResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IoTHubEventSourceResourceProperties deserializedIoTHubEventSourceResourceProperties
                = new IoTHubEventSourceResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("eventSourceResourceId".equals(fieldName)) {
                    deserializedIoTHubEventSourceResourceProperties.withEventSourceResourceId(reader.getString());
                } else if ("iotHubName".equals(fieldName)) {
                    deserializedIoTHubEventSourceResourceProperties.withIotHubName(reader.getString());
                } else if ("consumerGroupName".equals(fieldName)) {
                    deserializedIoTHubEventSourceResourceProperties.withConsumerGroupName(reader.getString());
                } else if ("keyName".equals(fieldName)) {
                    deserializedIoTHubEventSourceResourceProperties.withKeyName(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedIoTHubEventSourceResourceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("creationTime".equals(fieldName)) {
                    deserializedIoTHubEventSourceResourceProperties.creationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("timestampPropertyName".equals(fieldName)) {
                    deserializedIoTHubEventSourceResourceProperties.withTimestampPropertyName(reader.getString());
                } else if ("localTimestamp".equals(fieldName)) {
                    deserializedIoTHubEventSourceResourceProperties.withLocalTimestamp(LocalTimestamp.fromJson(reader));
                } else if ("ingressStartAt".equals(fieldName)) {
                    deserializedIoTHubEventSourceResourceProperties.innerIngressStartAt
                        = IngressStartAtProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIoTHubEventSourceResourceProperties;
        });
    }
}
