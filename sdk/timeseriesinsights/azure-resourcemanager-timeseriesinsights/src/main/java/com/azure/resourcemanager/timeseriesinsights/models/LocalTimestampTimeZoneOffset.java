// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.timeseriesinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An object that represents the offset information for the local timestamp format specified. Should not be specified
 * for LocalTimestampFormat - Embedded.
 */
@Fluent
public final class LocalTimestampTimeZoneOffset implements JsonSerializable<LocalTimestampTimeZoneOffset> {
    /*
     * The event property that will be contain the offset information to calculate the local timestamp. When the
     * LocalTimestampFormat is Iana, the property name will contain the name of the column which contains IANA Timezone
     * Name (eg: Americas/Los Angeles). When LocalTimestampFormat is Timespan, it contains the name of property which
     * contains values representing the offset (eg: P1D or 1.00:00:00)
     */
    private String propertyName;

    /**
     * Creates an instance of LocalTimestampTimeZoneOffset class.
     */
    public LocalTimestampTimeZoneOffset() {
    }

    /**
     * Get the propertyName property: The event property that will be contain the offset information to calculate the
     * local timestamp. When the LocalTimestampFormat is Iana, the property name will contain the name of the column
     * which contains IANA Timezone Name (eg: Americas/Los Angeles). When LocalTimestampFormat is Timespan, it contains
     * the name of property which contains values representing the offset (eg: P1D or 1.00:00:00).
     * 
     * @return the propertyName value.
     */
    public String propertyName() {
        return this.propertyName;
    }

    /**
     * Set the propertyName property: The event property that will be contain the offset information to calculate the
     * local timestamp. When the LocalTimestampFormat is Iana, the property name will contain the name of the column
     * which contains IANA Timezone Name (eg: Americas/Los Angeles). When LocalTimestampFormat is Timespan, it contains
     * the name of property which contains values representing the offset (eg: P1D or 1.00:00:00).
     * 
     * @param propertyName the propertyName value to set.
     * @return the LocalTimestampTimeZoneOffset object itself.
     */
    public LocalTimestampTimeZoneOffset withPropertyName(String propertyName) {
        this.propertyName = propertyName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("propertyName", this.propertyName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LocalTimestampTimeZoneOffset from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LocalTimestampTimeZoneOffset if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LocalTimestampTimeZoneOffset.
     */
    public static LocalTimestampTimeZoneOffset fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LocalTimestampTimeZoneOffset deserializedLocalTimestampTimeZoneOffset = new LocalTimestampTimeZoneOffset();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("propertyName".equals(fieldName)) {
                    deserializedLocalTimestampTimeZoneOffset.propertyName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLocalTimestampTimeZoneOffset;
        });
    }
}
