// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.timeseriesinsights.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

/** Properties of the Gen1 environment. */
@Immutable
public final class Gen1EnvironmentResourceProperties extends Gen1EnvironmentCreationProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(Gen1EnvironmentResourceProperties.class);

    /*
     * An id used to access the environment data, e.g. to query the
     * environment's events or upload reference data for the environment.
     */
    @JsonProperty(value = "dataAccessId", access = JsonProperty.Access.WRITE_ONLY)
    private UUID dataAccessId;

    /*
     * The fully qualified domain name used to access the environment data,
     * e.g. to query the environment's events or upload reference data for the
     * environment.
     */
    @JsonProperty(value = "dataAccessFqdn", access = JsonProperty.Access.WRITE_ONLY)
    private String dataAccessFqdn;

    /*
     * An object that represents the status of the environment, and its
     * internal state in the Time Series Insights service.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private EnvironmentStatus status;

    /*
     * Provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * The time the resource was created.
     */
    @JsonProperty(value = "creationTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime creationTime;

    /**
     * Get the dataAccessId property: An id used to access the environment data, e.g. to query the environment's events
     * or upload reference data for the environment.
     *
     * @return the dataAccessId value.
     */
    public UUID dataAccessId() {
        return this.dataAccessId;
    }

    /**
     * Get the dataAccessFqdn property: The fully qualified domain name used to access the environment data, e.g. to
     * query the environment's events or upload reference data for the environment.
     *
     * @return the dataAccessFqdn value.
     */
    public String dataAccessFqdn() {
        return this.dataAccessFqdn;
    }

    /**
     * Get the status property: An object that represents the status of the environment, and its internal state in the
     * Time Series Insights service.
     *
     * @return the status value.
     */
    public EnvironmentStatus status() {
        return this.status;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the creationTime property: The time the resource was created.
     *
     * @return the creationTime value.
     */
    public OffsetDateTime creationTime() {
        return this.creationTime;
    }

    /** {@inheritDoc} */
    @Override
    public Gen1EnvironmentResourceProperties withDataRetentionTime(Duration dataRetentionTime) {
        super.withDataRetentionTime(dataRetentionTime);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public Gen1EnvironmentResourceProperties withStorageLimitExceededBehavior(
        StorageLimitExceededBehavior storageLimitExceededBehavior) {
        super.withStorageLimitExceededBehavior(storageLimitExceededBehavior);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public Gen1EnvironmentResourceProperties withPartitionKeyProperties(
        List<TimeSeriesIdProperty> partitionKeyProperties) {
        super.withPartitionKeyProperties(partitionKeyProperties);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (status() != null) {
            status().validate();
        }
    }
}
