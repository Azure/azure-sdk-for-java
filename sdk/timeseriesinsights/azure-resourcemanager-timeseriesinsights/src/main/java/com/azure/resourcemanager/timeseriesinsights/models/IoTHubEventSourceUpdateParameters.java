// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.timeseriesinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.timeseriesinsights.fluent.models.IoTHubEventSourceMutableProperties;
import java.io.IOException;
import java.util.Map;

/**
 * Parameters supplied to the Update Event Source operation to update an IoTHub event source.
 */
@Fluent
public final class IoTHubEventSourceUpdateParameters extends EventSourceUpdateParameters {
    /*
     * The kind of the event source.
     */
    private EventSourceKind kind = EventSourceKind.MICROSOFT_IO_THUB;

    /*
     * Properties of the IoTHub event source.
     */
    private IoTHubEventSourceMutableProperties innerProperties;

    /**
     * Creates an instance of IoTHubEventSourceUpdateParameters class.
     */
    public IoTHubEventSourceUpdateParameters() {
    }

    /**
     * Get the kind property: The kind of the event source.
     * 
     * @return the kind value.
     */
    @Override
    public EventSourceKind kind() {
        return this.kind;
    }

    /**
     * Get the innerProperties property: Properties of the IoTHub event source.
     * 
     * @return the innerProperties value.
     */
    private IoTHubEventSourceMutableProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IoTHubEventSourceUpdateParameters withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the sharedAccessKey property: The value of the shared access key that grants the Time Series Insights service
     * read access to the iot hub. This property is not shown in event source responses.
     * 
     * @return the sharedAccessKey value.
     */
    public String sharedAccessKey() {
        return this.innerProperties() == null ? null : this.innerProperties().sharedAccessKey();
    }

    /**
     * Set the sharedAccessKey property: The value of the shared access key that grants the Time Series Insights service
     * read access to the iot hub. This property is not shown in event source responses.
     * 
     * @param sharedAccessKey the sharedAccessKey value to set.
     * @return the IoTHubEventSourceUpdateParameters object itself.
     */
    public IoTHubEventSourceUpdateParameters withSharedAccessKey(String sharedAccessKey) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IoTHubEventSourceMutableProperties();
        }
        this.innerProperties().withSharedAccessKey(sharedAccessKey);
        return this;
    }

    /**
     * Get the timestampPropertyName property: The event property that will be used as the event source's timestamp. If
     * a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation
     * time will be used.
     * 
     * @return the timestampPropertyName value.
     */
    public String timestampPropertyName() {
        return this.innerProperties() == null ? null : this.innerProperties().timestampPropertyName();
    }

    /**
     * Set the timestampPropertyName property: The event property that will be used as the event source's timestamp. If
     * a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation
     * time will be used.
     * 
     * @param timestampPropertyName the timestampPropertyName value to set.
     * @return the IoTHubEventSourceUpdateParameters object itself.
     */
    public IoTHubEventSourceUpdateParameters withTimestampPropertyName(String timestampPropertyName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IoTHubEventSourceMutableProperties();
        }
        this.innerProperties().withTimestampPropertyName(timestampPropertyName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IoTHubEventSourceUpdateParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IoTHubEventSourceUpdateParameters if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IoTHubEventSourceUpdateParameters.
     */
    public static IoTHubEventSourceUpdateParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IoTHubEventSourceUpdateParameters deserializedIoTHubEventSourceUpdateParameters
                = new IoTHubEventSourceUpdateParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedIoTHubEventSourceUpdateParameters.withTags(tags);
                } else if ("kind".equals(fieldName)) {
                    deserializedIoTHubEventSourceUpdateParameters.kind = EventSourceKind.fromString(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    deserializedIoTHubEventSourceUpdateParameters.innerProperties
                        = IoTHubEventSourceMutableProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIoTHubEventSourceUpdateParameters;
        });
    }
}
