// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.timeseriesinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The storage configuration provides the non-secret connection details about the customer storage account that is used
 * to store the environment's data.
 */
@Fluent
public final class Gen2StorageConfigurationOutput implements JsonSerializable<Gen2StorageConfigurationOutput> {
    /*
     * The name of the storage account that will hold the environment's Gen2 data.
     */
    private String accountName;

    /**
     * Creates an instance of Gen2StorageConfigurationOutput class.
     */
    public Gen2StorageConfigurationOutput() {
    }

    /**
     * Get the accountName property: The name of the storage account that will hold the environment's Gen2 data.
     * 
     * @return the accountName value.
     */
    public String accountName() {
        return this.accountName;
    }

    /**
     * Set the accountName property: The name of the storage account that will hold the environment's Gen2 data.
     * 
     * @param accountName the accountName value to set.
     * @return the Gen2StorageConfigurationOutput object itself.
     */
    public Gen2StorageConfigurationOutput withAccountName(String accountName) {
        this.accountName = accountName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (accountName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property accountName in model Gen2StorageConfigurationOutput"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Gen2StorageConfigurationOutput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("accountName", this.accountName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Gen2StorageConfigurationOutput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Gen2StorageConfigurationOutput if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Gen2StorageConfigurationOutput.
     */
    public static Gen2StorageConfigurationOutput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Gen2StorageConfigurationOutput deserializedGen2StorageConfigurationOutput
                = new Gen2StorageConfigurationOutput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accountName".equals(fieldName)) {
                    deserializedGen2StorageConfigurationOutput.accountName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGen2StorageConfigurationOutput;
        });
    }
}
