// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.timeseriesinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.timeseriesinsights.models.WarmStoragePropertiesState;
import java.io.IOException;

/**
 * An object that contains the status of warm storage properties usage.
 */
@Fluent
public final class WarmStoragePropertiesUsage implements JsonSerializable<WarmStoragePropertiesUsage> {
    /*
     * This string represents the state of warm storage properties usage. It can be "Ok", "Error", "Unknown".
     */
    private WarmStoragePropertiesState state;

    /*
     * An object that contains the details about warm storage properties usage state.
     */
    private WarmStoragePropertiesUsageStateDetails innerStateDetails;

    /**
     * Creates an instance of WarmStoragePropertiesUsage class.
     */
    public WarmStoragePropertiesUsage() {
    }

    /**
     * Get the state property: This string represents the state of warm storage properties usage. It can be "Ok",
     * "Error", "Unknown".
     * 
     * @return the state value.
     */
    public WarmStoragePropertiesState state() {
        return this.state;
    }

    /**
     * Set the state property: This string represents the state of warm storage properties usage. It can be "Ok",
     * "Error", "Unknown".
     * 
     * @param state the state value to set.
     * @return the WarmStoragePropertiesUsage object itself.
     */
    public WarmStoragePropertiesUsage withState(WarmStoragePropertiesState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the innerStateDetails property: An object that contains the details about warm storage properties usage
     * state.
     * 
     * @return the innerStateDetails value.
     */
    private WarmStoragePropertiesUsageStateDetails innerStateDetails() {
        return this.innerStateDetails;
    }

    /**
     * Get the currentCount property: A value that represents the number of properties used by the environment for S1/S2
     * SKU and number of properties used by Warm Store for PAYG SKU.
     * 
     * @return the currentCount value.
     */
    public Integer currentCount() {
        return this.innerStateDetails() == null ? null : this.innerStateDetails().currentCount();
    }

    /**
     * Set the currentCount property: A value that represents the number of properties used by the environment for S1/S2
     * SKU and number of properties used by Warm Store for PAYG SKU.
     * 
     * @param currentCount the currentCount value to set.
     * @return the WarmStoragePropertiesUsage object itself.
     */
    public WarmStoragePropertiesUsage withCurrentCount(Integer currentCount) {
        if (this.innerStateDetails() == null) {
            this.innerStateDetails = new WarmStoragePropertiesUsageStateDetails();
        }
        this.innerStateDetails().withCurrentCount(currentCount);
        return this;
    }

    /**
     * Get the maxCount property: A value that represents the maximum number of properties used allowed by the
     * environment for S1/S2 SKU and maximum number of properties allowed by Warm Store for PAYG SKU.
     * 
     * @return the maxCount value.
     */
    public Integer maxCount() {
        return this.innerStateDetails() == null ? null : this.innerStateDetails().maxCount();
    }

    /**
     * Set the maxCount property: A value that represents the maximum number of properties used allowed by the
     * environment for S1/S2 SKU and maximum number of properties allowed by Warm Store for PAYG SKU.
     * 
     * @param maxCount the maxCount value to set.
     * @return the WarmStoragePropertiesUsage object itself.
     */
    public WarmStoragePropertiesUsage withMaxCount(Integer maxCount) {
        if (this.innerStateDetails() == null) {
            this.innerStateDetails = new WarmStoragePropertiesUsageStateDetails();
        }
        this.innerStateDetails().withMaxCount(maxCount);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerStateDetails() != null) {
            innerStateDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WarmStoragePropertiesUsage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WarmStoragePropertiesUsage if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WarmStoragePropertiesUsage.
     */
    public static WarmStoragePropertiesUsage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WarmStoragePropertiesUsage deserializedWarmStoragePropertiesUsage = new WarmStoragePropertiesUsage();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedWarmStoragePropertiesUsage.state
                        = WarmStoragePropertiesState.fromString(reader.getString());
                } else if ("stateDetails".equals(fieldName)) {
                    deserializedWarmStoragePropertiesUsage.innerStateDetails
                        = WarmStoragePropertiesUsageStateDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWarmStoragePropertiesUsage;
        });
    }
}
