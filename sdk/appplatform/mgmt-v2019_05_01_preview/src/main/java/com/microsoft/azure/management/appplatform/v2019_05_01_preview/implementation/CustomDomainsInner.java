/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appplatform.v2019_05_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.appplatform.v2019_05_01_preview.CustomDomainProperties;
import com.microsoft.azure.management.appplatform.v2019_05_01_preview.CustomDomainValidatePayload;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in CustomDomains.
 */
public class CustomDomainsInner {
    /** The Retrofit service to perform REST calls. */
    private CustomDomainsService service;
    /** The service client containing this operation class. */
    private AppPlatformManagementClientImpl client;

    /**
     * Initializes an instance of CustomDomainsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public CustomDomainsInner(Retrofit retrofit, AppPlatformManagementClientImpl client) {
        this.service = retrofit.create(CustomDomainsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for CustomDomains to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CustomDomainsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2019_05_01_preview.CustomDomains get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains/{domainName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("appName") String appName, @Path("domainName") String domainName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2019_05_01_preview.CustomDomains createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains/{domainName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("appName") String appName, @Path("domainName") String domainName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body CustomDomainResourceInner domainResource, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2019_05_01_preview.CustomDomains delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains/{domainName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("appName") String appName, @Path("domainName") String domainName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2019_05_01_preview.CustomDomains patch" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains/{domainName}")
        Observable<Response<ResponseBody>> patch(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("appName") String appName, @Path("domainName") String domainName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body CustomDomainResourceInner domainResource, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2019_05_01_preview.CustomDomains list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("appName") String appName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2019_05_01_preview.CustomDomains validate" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains/validate")
        Observable<Response<ResponseBody>> validate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("appName") String appName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body CustomDomainValidatePayload validatePayload, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2019_05_01_preview.CustomDomains listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get the custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CustomDomainResourceInner object if successful.
     */
    public CustomDomainResourceInner get(String resourceGroupName, String serviceName, String appName, String domainName) {
        return getWithServiceResponseAsync(resourceGroupName, serviceName, appName, domainName).toBlocking().single().body();
    }

    /**
     * Get the custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CustomDomainResourceInner> getAsync(String resourceGroupName, String serviceName, String appName, String domainName, final ServiceCallback<CustomDomainResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, serviceName, appName, domainName), serviceCallback);
    }

    /**
     * Get the custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomDomainResourceInner object
     */
    public Observable<CustomDomainResourceInner> getAsync(String resourceGroupName, String serviceName, String appName, String domainName) {
        return getWithServiceResponseAsync(resourceGroupName, serviceName, appName, domainName).map(new Func1<ServiceResponse<CustomDomainResourceInner>, CustomDomainResourceInner>() {
            @Override
            public CustomDomainResourceInner call(ServiceResponse<CustomDomainResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomDomainResourceInner object
     */
    public Observable<ServiceResponse<CustomDomainResourceInner>> getWithServiceResponseAsync(String resourceGroupName, String serviceName, String appName, String domainName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (appName == null) {
            throw new IllegalArgumentException("Parameter appName is required and cannot be null.");
        }
        if (domainName == null) {
            throw new IllegalArgumentException("Parameter domainName is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, serviceName, appName, domainName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CustomDomainResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<CustomDomainResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CustomDomainResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CustomDomainResourceInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CustomDomainResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CustomDomainResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or update custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CustomDomainResourceInner object if successful.
     */
    public CustomDomainResourceInner createOrUpdate(String resourceGroupName, String serviceName, String appName, String domainName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, domainName).toBlocking().single().body();
    }

    /**
     * Create or update custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CustomDomainResourceInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String appName, String domainName, final ServiceCallback<CustomDomainResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, domainName), serviceCallback);
    }

    /**
     * Create or update custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomDomainResourceInner object
     */
    public Observable<CustomDomainResourceInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String appName, String domainName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, domainName).map(new Func1<ServiceResponse<CustomDomainResourceInner>, CustomDomainResourceInner>() {
            @Override
            public CustomDomainResourceInner call(ServiceResponse<CustomDomainResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomDomainResourceInner object
     */
    public Observable<ServiceResponse<CustomDomainResourceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String appName, String domainName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (appName == null) {
            throw new IllegalArgumentException("Parameter appName is required and cannot be null.");
        }
        if (domainName == null) {
            throw new IllegalArgumentException("Parameter domainName is required and cannot be null.");
        }
        final CustomDomainProperties properties = null;
        CustomDomainResourceInner domainResource = new CustomDomainResourceInner();
        domainResource.withProperties(null);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, serviceName, appName, domainName, this.client.apiVersion(), this.client.acceptLanguage(), domainResource, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CustomDomainResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<CustomDomainResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CustomDomainResourceInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create or update custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param properties Properties of the custom domain resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CustomDomainResourceInner object if successful.
     */
    public CustomDomainResourceInner createOrUpdate(String resourceGroupName, String serviceName, String appName, String domainName, CustomDomainProperties properties) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, domainName, properties).toBlocking().single().body();
    }

    /**
     * Create or update custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param properties Properties of the custom domain resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CustomDomainResourceInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String appName, String domainName, CustomDomainProperties properties, final ServiceCallback<CustomDomainResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, domainName, properties), serviceCallback);
    }

    /**
     * Create or update custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param properties Properties of the custom domain resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomDomainResourceInner object
     */
    public Observable<CustomDomainResourceInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String appName, String domainName, CustomDomainProperties properties) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, domainName, properties).map(new Func1<ServiceResponse<CustomDomainResourceInner>, CustomDomainResourceInner>() {
            @Override
            public CustomDomainResourceInner call(ServiceResponse<CustomDomainResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param properties Properties of the custom domain resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomDomainResourceInner object
     */
    public Observable<ServiceResponse<CustomDomainResourceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String appName, String domainName, CustomDomainProperties properties) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (appName == null) {
            throw new IllegalArgumentException("Parameter appName is required and cannot be null.");
        }
        if (domainName == null) {
            throw new IllegalArgumentException("Parameter domainName is required and cannot be null.");
        }
        Validator.validate(properties);
        CustomDomainResourceInner domainResource = new CustomDomainResourceInner();
        domainResource.withProperties(properties);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, serviceName, appName, domainName, this.client.apiVersion(), this.client.acceptLanguage(), domainResource, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CustomDomainResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<CustomDomainResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CustomDomainResourceInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CustomDomainResourceInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CustomDomainResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CustomDomainResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete the custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String serviceName, String appName, String domainName) {
        deleteWithServiceResponseAsync(resourceGroupName, serviceName, appName, domainName).toBlocking().single().body();
    }

    /**
     * Delete the custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String serviceName, String appName, String domainName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, serviceName, appName, domainName), serviceCallback);
    }

    /**
     * Delete the custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String serviceName, String appName, String domainName) {
        return deleteWithServiceResponseAsync(resourceGroupName, serviceName, appName, domainName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete the custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String serviceName, String appName, String domainName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (appName == null) {
            throw new IllegalArgumentException("Parameter appName is required and cannot be null.");
        }
        if (domainName == null) {
            throw new IllegalArgumentException("Parameter domainName is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, serviceName, appName, domainName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Update custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CustomDomainResourceInner object if successful.
     */
    public CustomDomainResourceInner patch(String resourceGroupName, String serviceName, String appName, String domainName) {
        return patchWithServiceResponseAsync(resourceGroupName, serviceName, appName, domainName).toBlocking().single().body();
    }

    /**
     * Update custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CustomDomainResourceInner> patchAsync(String resourceGroupName, String serviceName, String appName, String domainName, final ServiceCallback<CustomDomainResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(patchWithServiceResponseAsync(resourceGroupName, serviceName, appName, domainName), serviceCallback);
    }

    /**
     * Update custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomDomainResourceInner object
     */
    public Observable<CustomDomainResourceInner> patchAsync(String resourceGroupName, String serviceName, String appName, String domainName) {
        return patchWithServiceResponseAsync(resourceGroupName, serviceName, appName, domainName).map(new Func1<ServiceResponse<CustomDomainResourceInner>, CustomDomainResourceInner>() {
            @Override
            public CustomDomainResourceInner call(ServiceResponse<CustomDomainResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomDomainResourceInner object
     */
    public Observable<ServiceResponse<CustomDomainResourceInner>> patchWithServiceResponseAsync(String resourceGroupName, String serviceName, String appName, String domainName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (appName == null) {
            throw new IllegalArgumentException("Parameter appName is required and cannot be null.");
        }
        if (domainName == null) {
            throw new IllegalArgumentException("Parameter domainName is required and cannot be null.");
        }
        final CustomDomainProperties properties = null;
        CustomDomainResourceInner domainResource = new CustomDomainResourceInner();
        domainResource.withProperties(null);
        return service.patch(this.client.subscriptionId(), resourceGroupName, serviceName, appName, domainName, this.client.apiVersion(), this.client.acceptLanguage(), domainResource, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CustomDomainResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<CustomDomainResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CustomDomainResourceInner> clientResponse = patchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Update custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param properties Properties of the custom domain resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CustomDomainResourceInner object if successful.
     */
    public CustomDomainResourceInner patch(String resourceGroupName, String serviceName, String appName, String domainName, CustomDomainProperties properties) {
        return patchWithServiceResponseAsync(resourceGroupName, serviceName, appName, domainName, properties).toBlocking().single().body();
    }

    /**
     * Update custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param properties Properties of the custom domain resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CustomDomainResourceInner> patchAsync(String resourceGroupName, String serviceName, String appName, String domainName, CustomDomainProperties properties, final ServiceCallback<CustomDomainResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(patchWithServiceResponseAsync(resourceGroupName, serviceName, appName, domainName, properties), serviceCallback);
    }

    /**
     * Update custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param properties Properties of the custom domain resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomDomainResourceInner object
     */
    public Observable<CustomDomainResourceInner> patchAsync(String resourceGroupName, String serviceName, String appName, String domainName, CustomDomainProperties properties) {
        return patchWithServiceResponseAsync(resourceGroupName, serviceName, appName, domainName, properties).map(new Func1<ServiceResponse<CustomDomainResourceInner>, CustomDomainResourceInner>() {
            @Override
            public CustomDomainResourceInner call(ServiceResponse<CustomDomainResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update custom domain of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param properties Properties of the custom domain resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomDomainResourceInner object
     */
    public Observable<ServiceResponse<CustomDomainResourceInner>> patchWithServiceResponseAsync(String resourceGroupName, String serviceName, String appName, String domainName, CustomDomainProperties properties) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (appName == null) {
            throw new IllegalArgumentException("Parameter appName is required and cannot be null.");
        }
        if (domainName == null) {
            throw new IllegalArgumentException("Parameter domainName is required and cannot be null.");
        }
        Validator.validate(properties);
        CustomDomainResourceInner domainResource = new CustomDomainResourceInner();
        domainResource.withProperties(properties);
        return service.patch(this.client.subscriptionId(), resourceGroupName, serviceName, appName, domainName, this.client.apiVersion(), this.client.acceptLanguage(), domainResource, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CustomDomainResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<CustomDomainResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CustomDomainResourceInner> clientResponse = patchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CustomDomainResourceInner> patchDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CustomDomainResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CustomDomainResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List the custom domains of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CustomDomainResourceInner&gt; object if successful.
     */
    public PagedList<CustomDomainResourceInner> list(final String resourceGroupName, final String serviceName, final String appName) {
        ServiceResponse<Page<CustomDomainResourceInner>> response = listSinglePageAsync(resourceGroupName, serviceName, appName).toBlocking().single();
        return new PagedList<CustomDomainResourceInner>(response.body()) {
            @Override
            public Page<CustomDomainResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List the custom domains of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CustomDomainResourceInner>> listAsync(final String resourceGroupName, final String serviceName, final String appName, final ListOperationCallback<CustomDomainResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, serviceName, appName),
            new Func1<String, Observable<ServiceResponse<Page<CustomDomainResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomDomainResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List the custom domains of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CustomDomainResourceInner&gt; object
     */
    public Observable<Page<CustomDomainResourceInner>> listAsync(final String resourceGroupName, final String serviceName, final String appName) {
        return listWithServiceResponseAsync(resourceGroupName, serviceName, appName)
            .map(new Func1<ServiceResponse<Page<CustomDomainResourceInner>>, Page<CustomDomainResourceInner>>() {
                @Override
                public Page<CustomDomainResourceInner> call(ServiceResponse<Page<CustomDomainResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List the custom domains of one lifecycle application.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CustomDomainResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<CustomDomainResourceInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String appName) {
        return listSinglePageAsync(resourceGroupName, serviceName, appName)
            .concatMap(new Func1<ServiceResponse<Page<CustomDomainResourceInner>>, Observable<ServiceResponse<Page<CustomDomainResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomDomainResourceInner>>> call(ServiceResponse<Page<CustomDomainResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List the custom domains of one lifecycle application.
     *
    ServiceResponse<PageImpl<CustomDomainResourceInner>> * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
    ServiceResponse<PageImpl<CustomDomainResourceInner>> * @param serviceName The name of the Service resource.
    ServiceResponse<PageImpl<CustomDomainResourceInner>> * @param appName The name of the App resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CustomDomainResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CustomDomainResourceInner>>> listSinglePageAsync(final String resourceGroupName, final String serviceName, final String appName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (appName == null) {
            throw new IllegalArgumentException("Parameter appName is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroupName, serviceName, appName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CustomDomainResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomDomainResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CustomDomainResourceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CustomDomainResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CustomDomainResourceInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<CustomDomainResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<CustomDomainResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Check the resource name is valid as well as not in use.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param name Name to be validated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CustomDomainValidateResultInner object if successful.
     */
    public CustomDomainValidateResultInner validate(String resourceGroupName, String serviceName, String appName, String name) {
        return validateWithServiceResponseAsync(resourceGroupName, serviceName, appName, name).toBlocking().single().body();
    }

    /**
     * Check the resource name is valid as well as not in use.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param name Name to be validated
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CustomDomainValidateResultInner> validateAsync(String resourceGroupName, String serviceName, String appName, String name, final ServiceCallback<CustomDomainValidateResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(validateWithServiceResponseAsync(resourceGroupName, serviceName, appName, name), serviceCallback);
    }

    /**
     * Check the resource name is valid as well as not in use.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param name Name to be validated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomDomainValidateResultInner object
     */
    public Observable<CustomDomainValidateResultInner> validateAsync(String resourceGroupName, String serviceName, String appName, String name) {
        return validateWithServiceResponseAsync(resourceGroupName, serviceName, appName, name).map(new Func1<ServiceResponse<CustomDomainValidateResultInner>, CustomDomainValidateResultInner>() {
            @Override
            public CustomDomainValidateResultInner call(ServiceResponse<CustomDomainValidateResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Check the resource name is valid as well as not in use.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param name Name to be validated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomDomainValidateResultInner object
     */
    public Observable<ServiceResponse<CustomDomainValidateResultInner>> validateWithServiceResponseAsync(String resourceGroupName, String serviceName, String appName, String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (appName == null) {
            throw new IllegalArgumentException("Parameter appName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        CustomDomainValidatePayload validatePayload = new CustomDomainValidatePayload();
        validatePayload.withName(name);
        return service.validate(this.client.subscriptionId(), resourceGroupName, serviceName, appName, this.client.apiVersion(), this.client.acceptLanguage(), validatePayload, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CustomDomainValidateResultInner>>>() {
                @Override
                public Observable<ServiceResponse<CustomDomainValidateResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CustomDomainValidateResultInner> clientResponse = validateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CustomDomainValidateResultInner> validateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CustomDomainValidateResultInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CustomDomainValidateResultInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List the custom domains of one lifecycle application.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CustomDomainResourceInner&gt; object if successful.
     */
    public PagedList<CustomDomainResourceInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<CustomDomainResourceInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<CustomDomainResourceInner>(response.body()) {
            @Override
            public Page<CustomDomainResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List the custom domains of one lifecycle application.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CustomDomainResourceInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<CustomDomainResourceInner>> serviceFuture, final ListOperationCallback<CustomDomainResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<CustomDomainResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomDomainResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List the custom domains of one lifecycle application.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CustomDomainResourceInner&gt; object
     */
    public Observable<Page<CustomDomainResourceInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<CustomDomainResourceInner>>, Page<CustomDomainResourceInner>>() {
                @Override
                public Page<CustomDomainResourceInner> call(ServiceResponse<Page<CustomDomainResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List the custom domains of one lifecycle application.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CustomDomainResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<CustomDomainResourceInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<CustomDomainResourceInner>>, Observable<ServiceResponse<Page<CustomDomainResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomDomainResourceInner>>> call(ServiceResponse<Page<CustomDomainResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List the custom domains of one lifecycle application.
     *
    ServiceResponse<PageImpl<CustomDomainResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CustomDomainResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CustomDomainResourceInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CustomDomainResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomDomainResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CustomDomainResourceInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CustomDomainResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CustomDomainResourceInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<CustomDomainResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<CustomDomainResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
