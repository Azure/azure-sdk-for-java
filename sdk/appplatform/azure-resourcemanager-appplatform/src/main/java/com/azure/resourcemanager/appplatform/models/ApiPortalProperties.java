// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * API portal properties payload.
 */
@Fluent
public final class ApiPortalProperties implements JsonSerializable<ApiPortalProperties> {
    /*
     * State of the API portal.
     */
    private ApiPortalProvisioningState provisioningState;

    /*
     * Indicates whether the API portal exposes endpoint.
     */
    private Boolean publicProperty;

    /*
     * URL of the API portal, exposed when 'public' is true.
     */
    private String url;

    /*
     * Indicate if only https is allowed.
     */
    private Boolean httpsOnly;

    /*
     * The array of resource Ids of gateway to integrate with API portal.
     */
    private List<String> gatewayIds;

    /*
     * Collection of OpenAPI source URL locations.
     */
    private List<String> sourceUrls;

    /*
     * Single sign-on related configuration
     */
    private SsoProperties ssoProperties;

    /*
     * The requested resource quantity for required CPU and Memory.
     */
    private ApiPortalResourceRequests resourceRequests;

    /*
     * Collection of instances belong to API portal.
     */
    private List<ApiPortalInstance> instances;

    /*
     * Indicates whether the API try-out feature is enabled or disabled. When enabled, users can try out the API by
     * sending requests and viewing responses in API portal. When disabled, users cannot try out the API.
     */
    private ApiPortalApiTryOutEnabledState apiTryOutEnabledState;

    /**
     * Creates an instance of ApiPortalProperties class.
     */
    public ApiPortalProperties() {
    }

    /**
     * Get the provisioningState property: State of the API portal.
     * 
     * @return the provisioningState value.
     */
    public ApiPortalProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the publicProperty property: Indicates whether the API portal exposes endpoint.
     * 
     * @return the publicProperty value.
     */
    public Boolean publicProperty() {
        return this.publicProperty;
    }

    /**
     * Set the publicProperty property: Indicates whether the API portal exposes endpoint.
     * 
     * @param publicProperty the publicProperty value to set.
     * @return the ApiPortalProperties object itself.
     */
    public ApiPortalProperties withPublicProperty(Boolean publicProperty) {
        this.publicProperty = publicProperty;
        return this;
    }

    /**
     * Get the url property: URL of the API portal, exposed when 'public' is true.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Get the httpsOnly property: Indicate if only https is allowed.
     * 
     * @return the httpsOnly value.
     */
    public Boolean httpsOnly() {
        return this.httpsOnly;
    }

    /**
     * Set the httpsOnly property: Indicate if only https is allowed.
     * 
     * @param httpsOnly the httpsOnly value to set.
     * @return the ApiPortalProperties object itself.
     */
    public ApiPortalProperties withHttpsOnly(Boolean httpsOnly) {
        this.httpsOnly = httpsOnly;
        return this;
    }

    /**
     * Get the gatewayIds property: The array of resource Ids of gateway to integrate with API portal.
     * 
     * @return the gatewayIds value.
     */
    public List<String> gatewayIds() {
        return this.gatewayIds;
    }

    /**
     * Set the gatewayIds property: The array of resource Ids of gateway to integrate with API portal.
     * 
     * @param gatewayIds the gatewayIds value to set.
     * @return the ApiPortalProperties object itself.
     */
    public ApiPortalProperties withGatewayIds(List<String> gatewayIds) {
        this.gatewayIds = gatewayIds;
        return this;
    }

    /**
     * Get the sourceUrls property: Collection of OpenAPI source URL locations.
     * 
     * @return the sourceUrls value.
     */
    public List<String> sourceUrls() {
        return this.sourceUrls;
    }

    /**
     * Set the sourceUrls property: Collection of OpenAPI source URL locations.
     * 
     * @param sourceUrls the sourceUrls value to set.
     * @return the ApiPortalProperties object itself.
     */
    public ApiPortalProperties withSourceUrls(List<String> sourceUrls) {
        this.sourceUrls = sourceUrls;
        return this;
    }

    /**
     * Get the ssoProperties property: Single sign-on related configuration.
     * 
     * @return the ssoProperties value.
     */
    public SsoProperties ssoProperties() {
        return this.ssoProperties;
    }

    /**
     * Set the ssoProperties property: Single sign-on related configuration.
     * 
     * @param ssoProperties the ssoProperties value to set.
     * @return the ApiPortalProperties object itself.
     */
    public ApiPortalProperties withSsoProperties(SsoProperties ssoProperties) {
        this.ssoProperties = ssoProperties;
        return this;
    }

    /**
     * Get the resourceRequests property: The requested resource quantity for required CPU and Memory.
     * 
     * @return the resourceRequests value.
     */
    public ApiPortalResourceRequests resourceRequests() {
        return this.resourceRequests;
    }

    /**
     * Get the instances property: Collection of instances belong to API portal.
     * 
     * @return the instances value.
     */
    public List<ApiPortalInstance> instances() {
        return this.instances;
    }

    /**
     * Get the apiTryOutEnabledState property: Indicates whether the API try-out feature is enabled or disabled. When
     * enabled, users can try out the API by sending requests and viewing responses in API portal. When disabled, users
     * cannot try out the API.
     * 
     * @return the apiTryOutEnabledState value.
     */
    public ApiPortalApiTryOutEnabledState apiTryOutEnabledState() {
        return this.apiTryOutEnabledState;
    }

    /**
     * Set the apiTryOutEnabledState property: Indicates whether the API try-out feature is enabled or disabled. When
     * enabled, users can try out the API by sending requests and viewing responses in API portal. When disabled, users
     * cannot try out the API.
     * 
     * @param apiTryOutEnabledState the apiTryOutEnabledState value to set.
     * @return the ApiPortalProperties object itself.
     */
    public ApiPortalProperties withApiTryOutEnabledState(ApiPortalApiTryOutEnabledState apiTryOutEnabledState) {
        this.apiTryOutEnabledState = apiTryOutEnabledState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ssoProperties() != null) {
            ssoProperties().validate();
        }
        if (resourceRequests() != null) {
            resourceRequests().validate();
        }
        if (instances() != null) {
            instances().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("public", this.publicProperty);
        jsonWriter.writeBooleanField("httpsOnly", this.httpsOnly);
        jsonWriter.writeArrayField("gatewayIds", this.gatewayIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("sourceUrls", this.sourceUrls, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("ssoProperties", this.ssoProperties);
        jsonWriter.writeStringField("apiTryOutEnabledState",
            this.apiTryOutEnabledState == null ? null : this.apiTryOutEnabledState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApiPortalProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApiPortalProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApiPortalProperties.
     */
    public static ApiPortalProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApiPortalProperties deserializedApiPortalProperties = new ApiPortalProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedApiPortalProperties.provisioningState
                        = ApiPortalProvisioningState.fromString(reader.getString());
                } else if ("public".equals(fieldName)) {
                    deserializedApiPortalProperties.publicProperty = reader.getNullable(JsonReader::getBoolean);
                } else if ("url".equals(fieldName)) {
                    deserializedApiPortalProperties.url = reader.getString();
                } else if ("httpsOnly".equals(fieldName)) {
                    deserializedApiPortalProperties.httpsOnly = reader.getNullable(JsonReader::getBoolean);
                } else if ("gatewayIds".equals(fieldName)) {
                    List<String> gatewayIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedApiPortalProperties.gatewayIds = gatewayIds;
                } else if ("sourceUrls".equals(fieldName)) {
                    List<String> sourceUrls = reader.readArray(reader1 -> reader1.getString());
                    deserializedApiPortalProperties.sourceUrls = sourceUrls;
                } else if ("ssoProperties".equals(fieldName)) {
                    deserializedApiPortalProperties.ssoProperties = SsoProperties.fromJson(reader);
                } else if ("resourceRequests".equals(fieldName)) {
                    deserializedApiPortalProperties.resourceRequests = ApiPortalResourceRequests.fromJson(reader);
                } else if ("instances".equals(fieldName)) {
                    List<ApiPortalInstance> instances
                        = reader.readArray(reader1 -> ApiPortalInstance.fromJson(reader1));
                    deserializedApiPortalProperties.instances = instances;
                } else if ("apiTryOutEnabledState".equals(fieldName)) {
                    deserializedApiPortalProperties.apiTryOutEnabledState
                        = ApiPortalApiTryOutEnabledState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApiPortalProperties;
        });
    }
}
