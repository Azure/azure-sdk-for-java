// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.fluent.BuildServiceBuildersClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.BuilderResourceInner;
import com.azure.resourcemanager.appplatform.generated.models.BuildServiceBuilders;
import com.azure.resourcemanager.appplatform.generated.models.BuilderResource;

public final class BuildServiceBuildersImpl implements BuildServiceBuilders {
    private static final ClientLogger LOGGER = new ClientLogger(BuildServiceBuildersImpl.class);

    private final BuildServiceBuildersClient innerClient;

    private final com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager;

    public BuildServiceBuildersImpl(
        BuildServiceBuildersClient innerClient,
        com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public BuilderResource get(
        String resourceGroupName, String serviceName, String buildServiceName, String builderName) {
        BuilderResourceInner inner =
            this.serviceClient().get(resourceGroupName, serviceName, buildServiceName, builderName);
        if (inner != null) {
            return new BuilderResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BuilderResource> getWithResponse(
        String resourceGroupName, String serviceName, String buildServiceName, String builderName, Context context) {
        Response<BuilderResourceInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, serviceName, buildServiceName, builderName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BuilderResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String serviceName, String buildServiceName, String builderName) {
        this.serviceClient().delete(resourceGroupName, serviceName, buildServiceName, builderName);
    }

    public void delete(
        String resourceGroupName, String serviceName, String buildServiceName, String builderName, Context context) {
        this.serviceClient().delete(resourceGroupName, serviceName, buildServiceName, builderName, context);
    }

    public PagedIterable<BuilderResource> list(String resourceGroupName, String serviceName, String buildServiceName) {
        PagedIterable<BuilderResourceInner> inner =
            this.serviceClient().list(resourceGroupName, serviceName, buildServiceName);
        return Utils.mapPage(inner, inner1 -> new BuilderResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<BuilderResource> list(
        String resourceGroupName, String serviceName, String buildServiceName, Context context) {
        PagedIterable<BuilderResourceInner> inner =
            this.serviceClient().list(resourceGroupName, serviceName, buildServiceName, context);
        return Utils.mapPage(inner, inner1 -> new BuilderResourceImpl(inner1, this.manager()));
    }

    public BuilderResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String buildServiceName = Utils.getValueFromIdByName(id, "buildServices");
        if (buildServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'buildServices'.", id)));
        }
        String builderName = Utils.getValueFromIdByName(id, "builders");
        if (builderName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'builders'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, serviceName, buildServiceName, builderName, Context.NONE)
            .getValue();
    }

    public Response<BuilderResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String buildServiceName = Utils.getValueFromIdByName(id, "buildServices");
        if (buildServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'buildServices'.", id)));
        }
        String builderName = Utils.getValueFromIdByName(id, "builders");
        if (builderName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'builders'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, buildServiceName, builderName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String buildServiceName = Utils.getValueFromIdByName(id, "buildServices");
        if (buildServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'buildServices'.", id)));
        }
        String builderName = Utils.getValueFromIdByName(id, "builders");
        if (builderName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'builders'.", id)));
        }
        this.delete(resourceGroupName, serviceName, buildServiceName, builderName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String buildServiceName = Utils.getValueFromIdByName(id, "buildServices");
        if (buildServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'buildServices'.", id)));
        }
        String builderName = Utils.getValueFromIdByName(id, "builders");
        if (builderName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'builders'.", id)));
        }
        this.delete(resourceGroupName, serviceName, buildServiceName, builderName, context);
    }

    private BuildServiceBuildersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appplatform.generated.AppPlatformManager manager() {
        return this.serviceManager;
    }

    public BuilderResourceImpl define(String name) {
        return new BuilderResourceImpl(name, this.manager());
    }
}
