// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.AppPlatformManager;
import com.azure.resourcemanager.appplatform.generated.fluent.RuntimeVersionsClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.AvailableRuntimeVersionsInner;
import com.azure.resourcemanager.appplatform.generated.models.AvailableRuntimeVersions;
import com.azure.resourcemanager.appplatform.generated.models.RuntimeVersions;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class RuntimeVersionsImpl implements RuntimeVersions {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RuntimeVersionsImpl.class);

    private final RuntimeVersionsClient innerClient;

    private final AppPlatformManager serviceManager;

    public RuntimeVersionsImpl(RuntimeVersionsClient innerClient, AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public AvailableRuntimeVersions listRuntimeVersions() {
        AvailableRuntimeVersionsInner inner = this.serviceClient().listRuntimeVersions();
        if (inner != null) {
            return new AvailableRuntimeVersionsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AvailableRuntimeVersions> listRuntimeVersionsWithResponse(Context context) {
        Response<AvailableRuntimeVersionsInner> inner = this.serviceClient().listRuntimeVersionsWithResponse(context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AvailableRuntimeVersionsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private RuntimeVersionsClient serviceClient() {
        return this.innerClient;
    }

    private AppPlatformManager manager() {
        return this.serviceManager;
    }
}
