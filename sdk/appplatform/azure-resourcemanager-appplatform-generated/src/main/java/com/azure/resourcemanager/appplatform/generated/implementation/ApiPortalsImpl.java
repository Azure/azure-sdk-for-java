// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.fluent.ApiPortalsClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.ApiPortalResourceInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.CustomDomainValidateResultInner;
import com.azure.resourcemanager.appplatform.generated.models.ApiPortalResource;
import com.azure.resourcemanager.appplatform.generated.models.ApiPortals;
import com.azure.resourcemanager.appplatform.generated.models.CustomDomainValidatePayload;
import com.azure.resourcemanager.appplatform.generated.models.CustomDomainValidateResult;

public final class ApiPortalsImpl implements ApiPortals {
    private static final ClientLogger LOGGER = new ClientLogger(ApiPortalsImpl.class);

    private final ApiPortalsClient innerClient;

    private final com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager;

    public ApiPortalsImpl(
        ApiPortalsClient innerClient,
        com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ApiPortalResource get(String resourceGroupName, String serviceName, String apiPortalName) {
        ApiPortalResourceInner inner = this.serviceClient().get(resourceGroupName, serviceName, apiPortalName);
        if (inner != null) {
            return new ApiPortalResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ApiPortalResource> getWithResponse(
        String resourceGroupName, String serviceName, String apiPortalName, Context context) {
        Response<ApiPortalResourceInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serviceName, apiPortalName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ApiPortalResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String serviceName, String apiPortalName) {
        this.serviceClient().delete(resourceGroupName, serviceName, apiPortalName);
    }

    public void delete(String resourceGroupName, String serviceName, String apiPortalName, Context context) {
        this.serviceClient().delete(resourceGroupName, serviceName, apiPortalName, context);
    }

    public PagedIterable<ApiPortalResource> list(String resourceGroupName, String serviceName) {
        PagedIterable<ApiPortalResourceInner> inner = this.serviceClient().list(resourceGroupName, serviceName);
        return Utils.mapPage(inner, inner1 -> new ApiPortalResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ApiPortalResource> list(String resourceGroupName, String serviceName, Context context) {
        PagedIterable<ApiPortalResourceInner> inner =
            this.serviceClient().list(resourceGroupName, serviceName, context);
        return Utils.mapPage(inner, inner1 -> new ApiPortalResourceImpl(inner1, this.manager()));
    }

    public CustomDomainValidateResult validateDomain(
        String resourceGroupName,
        String serviceName,
        String apiPortalName,
        CustomDomainValidatePayload validatePayload) {
        CustomDomainValidateResultInner inner =
            this.serviceClient().validateDomain(resourceGroupName, serviceName, apiPortalName, validatePayload);
        if (inner != null) {
            return new CustomDomainValidateResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CustomDomainValidateResult> validateDomainWithResponse(
        String resourceGroupName,
        String serviceName,
        String apiPortalName,
        CustomDomainValidatePayload validatePayload,
        Context context) {
        Response<CustomDomainValidateResultInner> inner =
            this
                .serviceClient()
                .validateDomainWithResponse(resourceGroupName, serviceName, apiPortalName, validatePayload, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CustomDomainValidateResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ApiPortalResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String apiPortalName = Utils.getValueFromIdByName(id, "apiPortals");
        if (apiPortalName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'apiPortals'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, apiPortalName, Context.NONE).getValue();
    }

    public Response<ApiPortalResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String apiPortalName = Utils.getValueFromIdByName(id, "apiPortals");
        if (apiPortalName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'apiPortals'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, apiPortalName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String apiPortalName = Utils.getValueFromIdByName(id, "apiPortals");
        if (apiPortalName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'apiPortals'.", id)));
        }
        this.delete(resourceGroupName, serviceName, apiPortalName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String apiPortalName = Utils.getValueFromIdByName(id, "apiPortals");
        if (apiPortalName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'apiPortals'.", id)));
        }
        this.delete(resourceGroupName, serviceName, apiPortalName, context);
    }

    private ApiPortalsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appplatform.generated.AppPlatformManager manager() {
        return this.serviceManager;
    }

    public ApiPortalResourceImpl define(String name) {
        return new ApiPortalResourceImpl(name, this.manager());
    }
}
