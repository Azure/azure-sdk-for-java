// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.AppPlatformManager;
import com.azure.resourcemanager.appplatform.generated.fluent.MonitoringSettingsClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.MonitoringSettingResourceInner;
import com.azure.resourcemanager.appplatform.generated.models.MonitoringSettingResource;
import com.azure.resourcemanager.appplatform.generated.models.MonitoringSettings;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class MonitoringSettingsImpl implements MonitoringSettings {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MonitoringSettingsImpl.class);

    private final MonitoringSettingsClient innerClient;

    private final AppPlatformManager serviceManager;

    public MonitoringSettingsImpl(MonitoringSettingsClient innerClient, AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public MonitoringSettingResource get(String resourceGroupName, String serviceName) {
        MonitoringSettingResourceInner inner = this.serviceClient().get(resourceGroupName, serviceName);
        if (inner != null) {
            return new MonitoringSettingResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<MonitoringSettingResource> getWithResponse(
        String resourceGroupName, String serviceName, Context context) {
        Response<MonitoringSettingResourceInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serviceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MonitoringSettingResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MonitoringSettingResource updatePut(
        String resourceGroupName, String serviceName, MonitoringSettingResourceInner monitoringSettingResource) {
        MonitoringSettingResourceInner inner =
            this.serviceClient().updatePut(resourceGroupName, serviceName, monitoringSettingResource);
        if (inner != null) {
            return new MonitoringSettingResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MonitoringSettingResource updatePut(
        String resourceGroupName,
        String serviceName,
        MonitoringSettingResourceInner monitoringSettingResource,
        Context context) {
        MonitoringSettingResourceInner inner =
            this.serviceClient().updatePut(resourceGroupName, serviceName, monitoringSettingResource, context);
        if (inner != null) {
            return new MonitoringSettingResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MonitoringSettingResource updatePatch(
        String resourceGroupName, String serviceName, MonitoringSettingResourceInner monitoringSettingResource) {
        MonitoringSettingResourceInner inner =
            this.serviceClient().updatePatch(resourceGroupName, serviceName, monitoringSettingResource);
        if (inner != null) {
            return new MonitoringSettingResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MonitoringSettingResource updatePatch(
        String resourceGroupName,
        String serviceName,
        MonitoringSettingResourceInner monitoringSettingResource,
        Context context) {
        MonitoringSettingResourceInner inner =
            this.serviceClient().updatePatch(resourceGroupName, serviceName, monitoringSettingResource, context);
        if (inner != null) {
            return new MonitoringSettingResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private MonitoringSettingsClient serviceClient() {
        return this.innerClient;
    }

    private AppPlatformManager manager() {
        return this.serviceManager;
    }
}
