// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.AppPlatformManager;
import com.azure.resourcemanager.appplatform.generated.fluent.DeploymentsClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.DeploymentResourceInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.LogFileUrlResponseInner;
import com.azure.resourcemanager.appplatform.generated.models.DeploymentResource;
import com.azure.resourcemanager.appplatform.generated.models.Deployments;
import com.azure.resourcemanager.appplatform.generated.models.LogFileUrlResponse;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.util.List;

public final class DeploymentsImpl implements Deployments {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DeploymentsImpl.class);

    private final DeploymentsClient innerClient;

    private final AppPlatformManager serviceManager;

    public DeploymentsImpl(DeploymentsClient innerClient, AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public DeploymentResource get(String resourceGroupName, String serviceName, String appName, String deploymentName) {
        DeploymentResourceInner inner =
            this.serviceClient().get(resourceGroupName, serviceName, appName, deploymentName);
        if (inner != null) {
            return new DeploymentResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DeploymentResource> getWithResponse(
        String resourceGroupName, String serviceName, String appName, String deploymentName, Context context) {
        Response<DeploymentResourceInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serviceName, appName, deploymentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeploymentResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String serviceName, String appName, String deploymentName) {
        this.serviceClient().delete(resourceGroupName, serviceName, appName, deploymentName);
    }

    public void delete(
        String resourceGroupName, String serviceName, String appName, String deploymentName, Context context) {
        this.serviceClient().delete(resourceGroupName, serviceName, appName, deploymentName, context);
    }

    public PagedIterable<DeploymentResource> list(String resourceGroupName, String serviceName, String appName) {
        PagedIterable<DeploymentResourceInner> inner =
            this.serviceClient().list(resourceGroupName, serviceName, appName);
        return inner.mapPage(inner1 -> new DeploymentResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<DeploymentResource> list(
        String resourceGroupName, String serviceName, String appName, List<String> version, Context context) {
        PagedIterable<DeploymentResourceInner> inner =
            this.serviceClient().list(resourceGroupName, serviceName, appName, version, context);
        return inner.mapPage(inner1 -> new DeploymentResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<DeploymentResource> listForCluster(String resourceGroupName, String serviceName) {
        PagedIterable<DeploymentResourceInner> inner =
            this.serviceClient().listForCluster(resourceGroupName, serviceName);
        return inner.mapPage(inner1 -> new DeploymentResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<DeploymentResource> listForCluster(
        String resourceGroupName, String serviceName, List<String> version, Context context) {
        PagedIterable<DeploymentResourceInner> inner =
            this.serviceClient().listForCluster(resourceGroupName, serviceName, version, context);
        return inner.mapPage(inner1 -> new DeploymentResourceImpl(inner1, this.manager()));
    }

    public void start(String resourceGroupName, String serviceName, String appName, String deploymentName) {
        this.serviceClient().start(resourceGroupName, serviceName, appName, deploymentName);
    }

    public void start(
        String resourceGroupName, String serviceName, String appName, String deploymentName, Context context) {
        this.serviceClient().start(resourceGroupName, serviceName, appName, deploymentName, context);
    }

    public void stop(String resourceGroupName, String serviceName, String appName, String deploymentName) {
        this.serviceClient().stop(resourceGroupName, serviceName, appName, deploymentName);
    }

    public void stop(
        String resourceGroupName, String serviceName, String appName, String deploymentName, Context context) {
        this.serviceClient().stop(resourceGroupName, serviceName, appName, deploymentName, context);
    }

    public void restart(String resourceGroupName, String serviceName, String appName, String deploymentName) {
        this.serviceClient().restart(resourceGroupName, serviceName, appName, deploymentName);
    }

    public void restart(
        String resourceGroupName, String serviceName, String appName, String deploymentName, Context context) {
        this.serviceClient().restart(resourceGroupName, serviceName, appName, deploymentName, context);
    }

    public LogFileUrlResponse getLogFileUrl(
        String resourceGroupName, String serviceName, String appName, String deploymentName) {
        LogFileUrlResponseInner inner =
            this.serviceClient().getLogFileUrl(resourceGroupName, serviceName, appName, deploymentName);
        if (inner != null) {
            return new LogFileUrlResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<LogFileUrlResponse> getLogFileUrlWithResponse(
        String resourceGroupName, String serviceName, String appName, String deploymentName, Context context) {
        Response<LogFileUrlResponseInner> inner =
            this
                .serviceClient()
                .getLogFileUrlWithResponse(resourceGroupName, serviceName, appName, deploymentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new LogFileUrlResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DeploymentResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String appName = Utils.getValueFromIdByName(id, "apps");
        if (appName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'apps'.", id)));
        }
        String deploymentName = Utils.getValueFromIdByName(id, "deployments");
        if (deploymentName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'deployments'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, appName, deploymentName, Context.NONE).getValue();
    }

    public Response<DeploymentResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String appName = Utils.getValueFromIdByName(id, "apps");
        if (appName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'apps'.", id)));
        }
        String deploymentName = Utils.getValueFromIdByName(id, "deployments");
        if (deploymentName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'deployments'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, appName, deploymentName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String appName = Utils.getValueFromIdByName(id, "apps");
        if (appName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'apps'.", id)));
        }
        String deploymentName = Utils.getValueFromIdByName(id, "deployments");
        if (deploymentName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'deployments'.", id)));
        }
        this.delete(resourceGroupName, serviceName, appName, deploymentName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String appName = Utils.getValueFromIdByName(id, "apps");
        if (appName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'apps'.", id)));
        }
        String deploymentName = Utils.getValueFromIdByName(id, "deployments");
        if (deploymentName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'deployments'.", id)));
        }
        this.delete(resourceGroupName, serviceName, appName, deploymentName, context);
    }

    private DeploymentsClient serviceClient() {
        return this.innerClient;
    }

    private AppPlatformManager manager() {
        return this.serviceManager;
    }

    public DeploymentResourceImpl define(String name) {
        return new DeploymentResourceImpl(name, this.manager());
    }
}
