// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.fluent.AppsClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.AppResourceInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.CustomDomainValidateResultInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.ResourceUploadDefinitionInner;
import com.azure.resourcemanager.appplatform.generated.models.AppResource;
import com.azure.resourcemanager.appplatform.generated.models.Apps;
import com.azure.resourcemanager.appplatform.generated.models.CustomDomainValidatePayload;
import com.azure.resourcemanager.appplatform.generated.models.CustomDomainValidateResult;
import com.azure.resourcemanager.appplatform.generated.models.ResourceUploadDefinition;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class AppsImpl implements Apps {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AppsImpl.class);

    private final AppsClient innerClient;

    private final com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager;

    public AppsImpl(
        AppsClient innerClient, com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public AppResource get(String resourceGroupName, String serviceName, String appName) {
        AppResourceInner inner = this.serviceClient().get(resourceGroupName, serviceName, appName);
        if (inner != null) {
            return new AppResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AppResource> getWithResponse(
        String resourceGroupName, String serviceName, String appName, String syncStatus, Context context) {
        Response<AppResourceInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serviceName, appName, syncStatus, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AppResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String serviceName, String appName) {
        this.serviceClient().delete(resourceGroupName, serviceName, appName);
    }

    public void delete(String resourceGroupName, String serviceName, String appName, Context context) {
        this.serviceClient().delete(resourceGroupName, serviceName, appName, context);
    }

    public PagedIterable<AppResource> list(String resourceGroupName, String serviceName) {
        PagedIterable<AppResourceInner> inner = this.serviceClient().list(resourceGroupName, serviceName);
        return Utils.mapPage(inner, inner1 -> new AppResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<AppResource> list(String resourceGroupName, String serviceName, Context context) {
        PagedIterable<AppResourceInner> inner = this.serviceClient().list(resourceGroupName, serviceName, context);
        return Utils.mapPage(inner, inner1 -> new AppResourceImpl(inner1, this.manager()));
    }

    public ResourceUploadDefinition getResourceUploadUrl(String resourceGroupName, String serviceName, String appName) {
        ResourceUploadDefinitionInner inner =
            this.serviceClient().getResourceUploadUrl(resourceGroupName, serviceName, appName);
        if (inner != null) {
            return new ResourceUploadDefinitionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ResourceUploadDefinition> getResourceUploadUrlWithResponse(
        String resourceGroupName, String serviceName, String appName, Context context) {
        Response<ResourceUploadDefinitionInner> inner =
            this.serviceClient().getResourceUploadUrlWithResponse(resourceGroupName, serviceName, appName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ResourceUploadDefinitionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CustomDomainValidateResult validateDomain(
        String resourceGroupName, String serviceName, String appName, CustomDomainValidatePayload validatePayload) {
        CustomDomainValidateResultInner inner =
            this.serviceClient().validateDomain(resourceGroupName, serviceName, appName, validatePayload);
        if (inner != null) {
            return new CustomDomainValidateResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CustomDomainValidateResult> validateDomainWithResponse(
        String resourceGroupName,
        String serviceName,
        String appName,
        CustomDomainValidatePayload validatePayload,
        Context context) {
        Response<CustomDomainValidateResultInner> inner =
            this
                .serviceClient()
                .validateDomainWithResponse(resourceGroupName, serviceName, appName, validatePayload, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CustomDomainValidateResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AppResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String appName = Utils.getValueFromIdByName(id, "apps");
        if (appName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'apps'.", id)));
        }
        String localSyncStatus = null;
        return this.getWithResponse(resourceGroupName, serviceName, appName, localSyncStatus, Context.NONE).getValue();
    }

    public Response<AppResource> getByIdWithResponse(String id, String syncStatus, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String appName = Utils.getValueFromIdByName(id, "apps");
        if (appName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'apps'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, appName, syncStatus, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String appName = Utils.getValueFromIdByName(id, "apps");
        if (appName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'apps'.", id)));
        }
        this.delete(resourceGroupName, serviceName, appName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String appName = Utils.getValueFromIdByName(id, "apps");
        if (appName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'apps'.", id)));
        }
        this.delete(resourceGroupName, serviceName, appName, context);
    }

    private AppsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appplatform.generated.AppPlatformManager manager() {
        return this.serviceManager;
    }

    public AppResourceImpl define(String name) {
        return new AppResourceImpl(name, this.manager());
    }
}
