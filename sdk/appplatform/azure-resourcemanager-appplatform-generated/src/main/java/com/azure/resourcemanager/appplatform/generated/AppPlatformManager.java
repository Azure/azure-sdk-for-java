// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.fluent.AppPlatformManagementClient;
import com.azure.resourcemanager.appplatform.generated.implementation.ApiPortalCustomDomainsImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.ApiPortalsImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.AppPlatformManagementClientBuilder;
import com.azure.resourcemanager.appplatform.generated.implementation.AppsImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.BindingsImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.BuildServiceAgentPoolsImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.BuildServiceBuildersImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.BuildServicesImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.BuildpackBindingsImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.CertificatesImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.ConfigServersImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.ConfigurationServicesImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.CustomDomainsImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.DeploymentsImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.GatewayCustomDomainsImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.GatewayRouteConfigsImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.GatewaysImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.MonitoringSettingsImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.OperationsImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.RuntimeVersionsImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.ServiceRegistriesImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.ServicesImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.SkusImpl;
import com.azure.resourcemanager.appplatform.generated.implementation.StoragesImpl;
import com.azure.resourcemanager.appplatform.generated.models.ApiPortalCustomDomains;
import com.azure.resourcemanager.appplatform.generated.models.ApiPortals;
import com.azure.resourcemanager.appplatform.generated.models.Apps;
import com.azure.resourcemanager.appplatform.generated.models.Bindings;
import com.azure.resourcemanager.appplatform.generated.models.BuildServiceAgentPools;
import com.azure.resourcemanager.appplatform.generated.models.BuildServiceBuilders;
import com.azure.resourcemanager.appplatform.generated.models.BuildServices;
import com.azure.resourcemanager.appplatform.generated.models.BuildpackBindings;
import com.azure.resourcemanager.appplatform.generated.models.Certificates;
import com.azure.resourcemanager.appplatform.generated.models.ConfigServers;
import com.azure.resourcemanager.appplatform.generated.models.ConfigurationServices;
import com.azure.resourcemanager.appplatform.generated.models.CustomDomains;
import com.azure.resourcemanager.appplatform.generated.models.Deployments;
import com.azure.resourcemanager.appplatform.generated.models.GatewayCustomDomains;
import com.azure.resourcemanager.appplatform.generated.models.GatewayRouteConfigs;
import com.azure.resourcemanager.appplatform.generated.models.Gateways;
import com.azure.resourcemanager.appplatform.generated.models.MonitoringSettings;
import com.azure.resourcemanager.appplatform.generated.models.Operations;
import com.azure.resourcemanager.appplatform.generated.models.RuntimeVersions;
import com.azure.resourcemanager.appplatform.generated.models.ServiceRegistries;
import com.azure.resourcemanager.appplatform.generated.models.Services;
import com.azure.resourcemanager.appplatform.generated.models.Skus;
import com.azure.resourcemanager.appplatform.generated.models.Storages;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/** Entry point to AppPlatformManager. REST API for Azure Spring Apps. */
public final class AppPlatformManager {
    private Services services;

    private ConfigServers configServers;

    private ConfigurationServices configurationServices;

    private ServiceRegistries serviceRegistries;

    private BuildServices buildServices;

    private BuildpackBindings buildpackBindings;

    private BuildServiceBuilders buildServiceBuilders;

    private BuildServiceAgentPools buildServiceAgentPools;

    private MonitoringSettings monitoringSettings;

    private Apps apps;

    private Bindings bindings;

    private Storages storages;

    private Certificates certificates;

    private CustomDomains customDomains;

    private Deployments deployments;

    private Operations operations;

    private RuntimeVersions runtimeVersions;

    private Skus skus;

    private Gateways gateways;

    private GatewayRouteConfigs gatewayRouteConfigs;

    private GatewayCustomDomains gatewayCustomDomains;

    private ApiPortals apiPortals;

    private ApiPortalCustomDomains apiPortalCustomDomains;

    private final AppPlatformManagementClient clientObject;

    private AppPlatformManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject =
            new AppPlatformManagementClientBuilder()
                .pipeline(httpPipeline)
                .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
                .subscriptionId(profile.getSubscriptionId())
                .defaultPollInterval(defaultPollInterval)
                .buildClient();
    }

    /**
     * Creates an instance of AppPlatform service API entry point.
     *
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the AppPlatform service API instance.
     */
    public static AppPlatformManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of AppPlatform service API entry point.
     *
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the AppPlatform service API instance.
     */
    public static AppPlatformManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new AppPlatformManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create AppPlatformManager with optional configuration.
     *
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new AppPlatformManager.Configurable();
    }

    /** The Configurable allowing configurations to be set. */
    public static final class Configurable {
        private static final ClientLogger LOGGER = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private RetryOptions retryOptions;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the retry options for the HTTP pipeline retry policy.
         *
         * <p>This setting has no effect, if retry policy is set via {@link #withRetryPolicy(RetryPolicy)}.
         *
         * @param retryOptions the retry options for the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryOptions(RetryOptions retryOptions) {
            this.retryOptions = Objects.requireNonNull(retryOptions, "'retryOptions' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval =
                Objects.requireNonNull(defaultPollInterval, "'defaultPollInterval' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw LOGGER
                    .logExceptionAsError(new IllegalArgumentException("'defaultPollInterval' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of AppPlatform service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the AppPlatform service API instance.
         */
        public AppPlatformManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder
                .append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.appplatform.generated")
                .append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder
                    .append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                if (retryOptions != null) {
                    retryPolicy = new RetryPolicy(retryOptions);
                } else {
                    retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
                }
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new AddHeadersFromContextPolicy());
            policies.add(new RequestIdPolicy());
            policies
                .addAll(
                    this
                        .policies
                        .stream()
                        .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
                        .collect(Collectors.toList()));
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new ArmChallengeAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies
                .addAll(
                    this
                        .policies
                        .stream()
                        .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                        .collect(Collectors.toList()));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                    .httpClient(httpClient)
                    .policies(policies.toArray(new HttpPipelinePolicy[0]))
                    .build();
            return new AppPlatformManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /**
     * Gets the resource collection API of Services. It manages ServiceResource.
     *
     * @return Resource collection API of Services.
     */
    public Services services() {
        if (this.services == null) {
            this.services = new ServicesImpl(clientObject.getServices(), this);
        }
        return services;
    }

    /**
     * Gets the resource collection API of ConfigServers.
     *
     * @return Resource collection API of ConfigServers.
     */
    public ConfigServers configServers() {
        if (this.configServers == null) {
            this.configServers = new ConfigServersImpl(clientObject.getConfigServers(), this);
        }
        return configServers;
    }

    /**
     * Gets the resource collection API of ConfigurationServices. It manages ConfigurationServiceResource.
     *
     * @return Resource collection API of ConfigurationServices.
     */
    public ConfigurationServices configurationServices() {
        if (this.configurationServices == null) {
            this.configurationServices = new ConfigurationServicesImpl(clientObject.getConfigurationServices(), this);
        }
        return configurationServices;
    }

    /**
     * Gets the resource collection API of ServiceRegistries.
     *
     * @return Resource collection API of ServiceRegistries.
     */
    public ServiceRegistries serviceRegistries() {
        if (this.serviceRegistries == null) {
            this.serviceRegistries = new ServiceRegistriesImpl(clientObject.getServiceRegistries(), this);
        }
        return serviceRegistries;
    }

    /**
     * Gets the resource collection API of BuildServices. It manages Build.
     *
     * @return Resource collection API of BuildServices.
     */
    public BuildServices buildServices() {
        if (this.buildServices == null) {
            this.buildServices = new BuildServicesImpl(clientObject.getBuildServices(), this);
        }
        return buildServices;
    }

    /**
     * Gets the resource collection API of BuildpackBindings. It manages BuildpackBindingResource.
     *
     * @return Resource collection API of BuildpackBindings.
     */
    public BuildpackBindings buildpackBindings() {
        if (this.buildpackBindings == null) {
            this.buildpackBindings = new BuildpackBindingsImpl(clientObject.getBuildpackBindings(), this);
        }
        return buildpackBindings;
    }

    /**
     * Gets the resource collection API of BuildServiceBuilders. It manages BuilderResource.
     *
     * @return Resource collection API of BuildServiceBuilders.
     */
    public BuildServiceBuilders buildServiceBuilders() {
        if (this.buildServiceBuilders == null) {
            this.buildServiceBuilders = new BuildServiceBuildersImpl(clientObject.getBuildServiceBuilders(), this);
        }
        return buildServiceBuilders;
    }

    /**
     * Gets the resource collection API of BuildServiceAgentPools.
     *
     * @return Resource collection API of BuildServiceAgentPools.
     */
    public BuildServiceAgentPools buildServiceAgentPools() {
        if (this.buildServiceAgentPools == null) {
            this.buildServiceAgentPools =
                new BuildServiceAgentPoolsImpl(clientObject.getBuildServiceAgentPools(), this);
        }
        return buildServiceAgentPools;
    }

    /**
     * Gets the resource collection API of MonitoringSettings.
     *
     * @return Resource collection API of MonitoringSettings.
     */
    public MonitoringSettings monitoringSettings() {
        if (this.monitoringSettings == null) {
            this.monitoringSettings = new MonitoringSettingsImpl(clientObject.getMonitoringSettings(), this);
        }
        return monitoringSettings;
    }

    /**
     * Gets the resource collection API of Apps. It manages AppResource.
     *
     * @return Resource collection API of Apps.
     */
    public Apps apps() {
        if (this.apps == null) {
            this.apps = new AppsImpl(clientObject.getApps(), this);
        }
        return apps;
    }

    /**
     * Gets the resource collection API of Bindings. It manages BindingResource.
     *
     * @return Resource collection API of Bindings.
     */
    public Bindings bindings() {
        if (this.bindings == null) {
            this.bindings = new BindingsImpl(clientObject.getBindings(), this);
        }
        return bindings;
    }

    /**
     * Gets the resource collection API of Storages. It manages StorageResource.
     *
     * @return Resource collection API of Storages.
     */
    public Storages storages() {
        if (this.storages == null) {
            this.storages = new StoragesImpl(clientObject.getStorages(), this);
        }
        return storages;
    }

    /**
     * Gets the resource collection API of Certificates. It manages CertificateResource.
     *
     * @return Resource collection API of Certificates.
     */
    public Certificates certificates() {
        if (this.certificates == null) {
            this.certificates = new CertificatesImpl(clientObject.getCertificates(), this);
        }
        return certificates;
    }

    /**
     * Gets the resource collection API of CustomDomains. It manages CustomDomainResource.
     *
     * @return Resource collection API of CustomDomains.
     */
    public CustomDomains customDomains() {
        if (this.customDomains == null) {
            this.customDomains = new CustomDomainsImpl(clientObject.getCustomDomains(), this);
        }
        return customDomains;
    }

    /**
     * Gets the resource collection API of Deployments. It manages DeploymentResource.
     *
     * @return Resource collection API of Deployments.
     */
    public Deployments deployments() {
        if (this.deployments == null) {
            this.deployments = new DeploymentsImpl(clientObject.getDeployments(), this);
        }
        return deployments;
    }

    /**
     * Gets the resource collection API of Operations.
     *
     * @return Resource collection API of Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /**
     * Gets the resource collection API of RuntimeVersions.
     *
     * @return Resource collection API of RuntimeVersions.
     */
    public RuntimeVersions runtimeVersions() {
        if (this.runtimeVersions == null) {
            this.runtimeVersions = new RuntimeVersionsImpl(clientObject.getRuntimeVersions(), this);
        }
        return runtimeVersions;
    }

    /**
     * Gets the resource collection API of Skus.
     *
     * @return Resource collection API of Skus.
     */
    public Skus skus() {
        if (this.skus == null) {
            this.skus = new SkusImpl(clientObject.getSkus(), this);
        }
        return skus;
    }

    /**
     * Gets the resource collection API of Gateways. It manages GatewayResource.
     *
     * @return Resource collection API of Gateways.
     */
    public Gateways gateways() {
        if (this.gateways == null) {
            this.gateways = new GatewaysImpl(clientObject.getGateways(), this);
        }
        return gateways;
    }

    /**
     * Gets the resource collection API of GatewayRouteConfigs. It manages GatewayRouteConfigResource.
     *
     * @return Resource collection API of GatewayRouteConfigs.
     */
    public GatewayRouteConfigs gatewayRouteConfigs() {
        if (this.gatewayRouteConfigs == null) {
            this.gatewayRouteConfigs = new GatewayRouteConfigsImpl(clientObject.getGatewayRouteConfigs(), this);
        }
        return gatewayRouteConfigs;
    }

    /**
     * Gets the resource collection API of GatewayCustomDomains. It manages GatewayCustomDomainResource.
     *
     * @return Resource collection API of GatewayCustomDomains.
     */
    public GatewayCustomDomains gatewayCustomDomains() {
        if (this.gatewayCustomDomains == null) {
            this.gatewayCustomDomains = new GatewayCustomDomainsImpl(clientObject.getGatewayCustomDomains(), this);
        }
        return gatewayCustomDomains;
    }

    /**
     * Gets the resource collection API of ApiPortals. It manages ApiPortalResource.
     *
     * @return Resource collection API of ApiPortals.
     */
    public ApiPortals apiPortals() {
        if (this.apiPortals == null) {
            this.apiPortals = new ApiPortalsImpl(clientObject.getApiPortals(), this);
        }
        return apiPortals;
    }

    /**
     * Gets the resource collection API of ApiPortalCustomDomains. It manages ApiPortalCustomDomainResource.
     *
     * @return Resource collection API of ApiPortalCustomDomains.
     */
    public ApiPortalCustomDomains apiPortalCustomDomains() {
        if (this.apiPortalCustomDomains == null) {
            this.apiPortalCustomDomains =
                new ApiPortalCustomDomainsImpl(clientObject.getApiPortalCustomDomains(), this);
        }
        return apiPortalCustomDomains;
    }

    /**
     * @return Wrapped service client AppPlatformManagementClient providing direct access to the underlying
     *     auto-generated API implementation, based on Azure REST API.
     */
    public AppPlatformManagementClient serviceClient() {
        return this.clientObject;
    }
}
