// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.fluent.BuildpackBindingsClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.BuildpackBindingResourceInner;
import com.azure.resourcemanager.appplatform.generated.models.BuildpackBindingResource;
import com.azure.resourcemanager.appplatform.generated.models.BuildpackBindings;

public final class BuildpackBindingsImpl implements BuildpackBindings {
    private static final ClientLogger LOGGER = new ClientLogger(BuildpackBindingsImpl.class);

    private final BuildpackBindingsClient innerClient;

    private final com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager;

    public BuildpackBindingsImpl(
        BuildpackBindingsClient innerClient,
        com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public BuildpackBindingResource get(
        String resourceGroupName,
        String serviceName,
        String buildServiceName,
        String builderName,
        String buildpackBindingName) {
        BuildpackBindingResourceInner inner =
            this
                .serviceClient()
                .get(resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName);
        if (inner != null) {
            return new BuildpackBindingResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BuildpackBindingResource> getWithResponse(
        String resourceGroupName,
        String serviceName,
        String buildServiceName,
        String builderName,
        String buildpackBindingName,
        Context context) {
        Response<BuildpackBindingResourceInner> inner =
            this
                .serviceClient()
                .getWithResponse(
                    resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BuildpackBindingResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(
        String resourceGroupName,
        String serviceName,
        String buildServiceName,
        String builderName,
        String buildpackBindingName) {
        this
            .serviceClient()
            .delete(resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName);
    }

    public void delete(
        String resourceGroupName,
        String serviceName,
        String buildServiceName,
        String builderName,
        String buildpackBindingName,
        Context context) {
        this
            .serviceClient()
            .delete(resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName, context);
    }

    public PagedIterable<BuildpackBindingResource> list(
        String resourceGroupName, String serviceName, String buildServiceName, String builderName) {
        PagedIterable<BuildpackBindingResourceInner> inner =
            this.serviceClient().list(resourceGroupName, serviceName, buildServiceName, builderName);
        return Utils.mapPage(inner, inner1 -> new BuildpackBindingResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<BuildpackBindingResource> list(
        String resourceGroupName, String serviceName, String buildServiceName, String builderName, Context context) {
        PagedIterable<BuildpackBindingResourceInner> inner =
            this.serviceClient().list(resourceGroupName, serviceName, buildServiceName, builderName, context);
        return Utils.mapPage(inner, inner1 -> new BuildpackBindingResourceImpl(inner1, this.manager()));
    }

    public BuildpackBindingResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String buildServiceName = Utils.getValueFromIdByName(id, "buildServices");
        if (buildServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'buildServices'.", id)));
        }
        String builderName = Utils.getValueFromIdByName(id, "builders");
        if (builderName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'builders'.", id)));
        }
        String buildpackBindingName = Utils.getValueFromIdByName(id, "buildpackBindings");
        if (buildpackBindingName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'buildpackBindings'.", id)));
        }
        return this
            .getWithResponse(
                resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName, Context.NONE)
            .getValue();
    }

    public Response<BuildpackBindingResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String buildServiceName = Utils.getValueFromIdByName(id, "buildServices");
        if (buildServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'buildServices'.", id)));
        }
        String builderName = Utils.getValueFromIdByName(id, "builders");
        if (builderName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'builders'.", id)));
        }
        String buildpackBindingName = Utils.getValueFromIdByName(id, "buildpackBindings");
        if (buildpackBindingName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'buildpackBindings'.", id)));
        }
        return this
            .getWithResponse(
                resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String buildServiceName = Utils.getValueFromIdByName(id, "buildServices");
        if (buildServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'buildServices'.", id)));
        }
        String builderName = Utils.getValueFromIdByName(id, "builders");
        if (builderName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'builders'.", id)));
        }
        String buildpackBindingName = Utils.getValueFromIdByName(id, "buildpackBindings");
        if (buildpackBindingName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'buildpackBindings'.", id)));
        }
        this.delete(resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String buildServiceName = Utils.getValueFromIdByName(id, "buildServices");
        if (buildServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'buildServices'.", id)));
        }
        String builderName = Utils.getValueFromIdByName(id, "builders");
        if (builderName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'builders'.", id)));
        }
        String buildpackBindingName = Utils.getValueFromIdByName(id, "buildpackBindings");
        if (buildpackBindingName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'buildpackBindings'.", id)));
        }
        this.delete(resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName, context);
    }

    private BuildpackBindingsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appplatform.generated.AppPlatformManager manager() {
        return this.serviceManager;
    }

    public BuildpackBindingResourceImpl define(String name) {
        return new BuildpackBindingResourceImpl(name, this.manager());
    }
}
