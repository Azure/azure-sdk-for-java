// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.AppPlatformManager;
import com.azure.resourcemanager.appplatform.generated.fluent.ConfigServersClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.ConfigServerResourceInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.ConfigServerSettingsValidateResultInner;
import com.azure.resourcemanager.appplatform.generated.models.ConfigServerResource;
import com.azure.resourcemanager.appplatform.generated.models.ConfigServerSettings;
import com.azure.resourcemanager.appplatform.generated.models.ConfigServerSettingsValidateResult;
import com.azure.resourcemanager.appplatform.generated.models.ConfigServers;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ConfigServersImpl implements ConfigServers {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ConfigServersImpl.class);

    private final ConfigServersClient innerClient;

    private final AppPlatformManager serviceManager;

    public ConfigServersImpl(ConfigServersClient innerClient, AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ConfigServerResource get(String resourceGroupName, String serviceName) {
        ConfigServerResourceInner inner = this.serviceClient().get(resourceGroupName, serviceName);
        if (inner != null) {
            return new ConfigServerResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConfigServerResource> getWithResponse(
        String resourceGroupName, String serviceName, Context context) {
        Response<ConfigServerResourceInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serviceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConfigServerResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConfigServerResource updatePut(
        String resourceGroupName, String serviceName, ConfigServerResourceInner configServerResource) {
        ConfigServerResourceInner inner =
            this.serviceClient().updatePut(resourceGroupName, serviceName, configServerResource);
        if (inner != null) {
            return new ConfigServerResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ConfigServerResource updatePut(
        String resourceGroupName, String serviceName, ConfigServerResourceInner configServerResource, Context context) {
        ConfigServerResourceInner inner =
            this.serviceClient().updatePut(resourceGroupName, serviceName, configServerResource, context);
        if (inner != null) {
            return new ConfigServerResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ConfigServerResource updatePatch(
        String resourceGroupName, String serviceName, ConfigServerResourceInner configServerResource) {
        ConfigServerResourceInner inner =
            this.serviceClient().updatePatch(resourceGroupName, serviceName, configServerResource);
        if (inner != null) {
            return new ConfigServerResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ConfigServerResource updatePatch(
        String resourceGroupName, String serviceName, ConfigServerResourceInner configServerResource, Context context) {
        ConfigServerResourceInner inner =
            this.serviceClient().updatePatch(resourceGroupName, serviceName, configServerResource, context);
        if (inner != null) {
            return new ConfigServerResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ConfigServerSettingsValidateResult validate(
        String resourceGroupName, String serviceName, ConfigServerSettings configServerSettings) {
        ConfigServerSettingsValidateResultInner inner =
            this.serviceClient().validate(resourceGroupName, serviceName, configServerSettings);
        if (inner != null) {
            return new ConfigServerSettingsValidateResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ConfigServerSettingsValidateResult validate(
        String resourceGroupName, String serviceName, ConfigServerSettings configServerSettings, Context context) {
        ConfigServerSettingsValidateResultInner inner =
            this.serviceClient().validate(resourceGroupName, serviceName, configServerSettings, context);
        if (inner != null) {
            return new ConfigServerSettingsValidateResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private ConfigServersClient serviceClient() {
        return this.innerClient;
    }

    private AppPlatformManager manager() {
        return this.serviceManager;
    }
}
