// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.fluent.ConfigurationServicesClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.ConfigurationServiceResourceInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.ConfigurationServiceSettingsValidateResultInner;
import com.azure.resourcemanager.appplatform.generated.models.ConfigurationServiceResource;
import com.azure.resourcemanager.appplatform.generated.models.ConfigurationServiceSettings;
import com.azure.resourcemanager.appplatform.generated.models.ConfigurationServiceSettingsValidateResult;
import com.azure.resourcemanager.appplatform.generated.models.ConfigurationServices;

public final class ConfigurationServicesImpl implements ConfigurationServices {
    private static final ClientLogger LOGGER = new ClientLogger(ConfigurationServicesImpl.class);

    private final ConfigurationServicesClient innerClient;

    private final com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager;

    public ConfigurationServicesImpl(
        ConfigurationServicesClient innerClient,
        com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ConfigurationServiceResource get(
        String resourceGroupName, String serviceName, String configurationServiceName) {
        ConfigurationServiceResourceInner inner =
            this.serviceClient().get(resourceGroupName, serviceName, configurationServiceName);
        if (inner != null) {
            return new ConfigurationServiceResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConfigurationServiceResource> getWithResponse(
        String resourceGroupName, String serviceName, String configurationServiceName, Context context) {
        Response<ConfigurationServiceResourceInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serviceName, configurationServiceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConfigurationServiceResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String serviceName, String configurationServiceName) {
        this.serviceClient().delete(resourceGroupName, serviceName, configurationServiceName);
    }

    public void delete(String resourceGroupName, String serviceName, String configurationServiceName, Context context) {
        this.serviceClient().delete(resourceGroupName, serviceName, configurationServiceName, context);
    }

    public PagedIterable<ConfigurationServiceResource> list(String resourceGroupName, String serviceName) {
        PagedIterable<ConfigurationServiceResourceInner> inner =
            this.serviceClient().list(resourceGroupName, serviceName);
        return Utils.mapPage(inner, inner1 -> new ConfigurationServiceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ConfigurationServiceResource> list(
        String resourceGroupName, String serviceName, Context context) {
        PagedIterable<ConfigurationServiceResourceInner> inner =
            this.serviceClient().list(resourceGroupName, serviceName, context);
        return Utils.mapPage(inner, inner1 -> new ConfigurationServiceResourceImpl(inner1, this.manager()));
    }

    public ConfigurationServiceSettingsValidateResult validate(
        String resourceGroupName,
        String serviceName,
        String configurationServiceName,
        ConfigurationServiceSettings settings) {
        ConfigurationServiceSettingsValidateResultInner inner =
            this.serviceClient().validate(resourceGroupName, serviceName, configurationServiceName, settings);
        if (inner != null) {
            return new ConfigurationServiceSettingsValidateResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ConfigurationServiceSettingsValidateResult validate(
        String resourceGroupName,
        String serviceName,
        String configurationServiceName,
        ConfigurationServiceSettings settings,
        Context context) {
        ConfigurationServiceSettingsValidateResultInner inner =
            this.serviceClient().validate(resourceGroupName, serviceName, configurationServiceName, settings, context);
        if (inner != null) {
            return new ConfigurationServiceSettingsValidateResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ConfigurationServiceResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String configurationServiceName = Utils.getValueFromIdByName(id, "configurationServices");
        if (configurationServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'configurationServices'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, configurationServiceName, Context.NONE).getValue();
    }

    public Response<ConfigurationServiceResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String configurationServiceName = Utils.getValueFromIdByName(id, "configurationServices");
        if (configurationServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'configurationServices'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, configurationServiceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String configurationServiceName = Utils.getValueFromIdByName(id, "configurationServices");
        if (configurationServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'configurationServices'.",
                                id)));
        }
        this.delete(resourceGroupName, serviceName, configurationServiceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String configurationServiceName = Utils.getValueFromIdByName(id, "configurationServices");
        if (configurationServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'configurationServices'.",
                                id)));
        }
        this.delete(resourceGroupName, serviceName, configurationServiceName, context);
    }

    private ConfigurationServicesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appplatform.generated.AppPlatformManager manager() {
        return this.serviceManager;
    }

    public ConfigurationServiceResourceImpl define(String name) {
        return new ConfigurationServiceResourceImpl(name, this.manager());
    }
}
