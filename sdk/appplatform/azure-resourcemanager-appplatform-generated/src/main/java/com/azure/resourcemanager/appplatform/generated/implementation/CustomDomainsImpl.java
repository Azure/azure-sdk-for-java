// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.AppPlatformManager;
import com.azure.resourcemanager.appplatform.generated.fluent.CustomDomainsClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.CustomDomainResourceInner;
import com.azure.resourcemanager.appplatform.generated.models.CustomDomainResource;
import com.azure.resourcemanager.appplatform.generated.models.CustomDomains;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class CustomDomainsImpl implements CustomDomains {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CustomDomainsImpl.class);

    private final CustomDomainsClient innerClient;

    private final AppPlatformManager serviceManager;

    public CustomDomainsImpl(CustomDomainsClient innerClient, AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public CustomDomainResource get(String resourceGroupName, String serviceName, String appName, String domainName) {
        CustomDomainResourceInner inner = this.serviceClient().get(resourceGroupName, serviceName, appName, domainName);
        if (inner != null) {
            return new CustomDomainResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CustomDomainResource> getWithResponse(
        String resourceGroupName, String serviceName, String appName, String domainName, Context context) {
        Response<CustomDomainResourceInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serviceName, appName, domainName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CustomDomainResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String serviceName, String appName, String domainName) {
        this.serviceClient().delete(resourceGroupName, serviceName, appName, domainName);
    }

    public void delete(
        String resourceGroupName, String serviceName, String appName, String domainName, Context context) {
        this.serviceClient().delete(resourceGroupName, serviceName, appName, domainName, context);
    }

    public PagedIterable<CustomDomainResource> list(String resourceGroupName, String serviceName, String appName) {
        PagedIterable<CustomDomainResourceInner> inner =
            this.serviceClient().list(resourceGroupName, serviceName, appName);
        return inner.mapPage(inner1 -> new CustomDomainResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<CustomDomainResource> list(
        String resourceGroupName, String serviceName, String appName, Context context) {
        PagedIterable<CustomDomainResourceInner> inner =
            this.serviceClient().list(resourceGroupName, serviceName, appName, context);
        return inner.mapPage(inner1 -> new CustomDomainResourceImpl(inner1, this.manager()));
    }

    public CustomDomainResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String appName = Utils.getValueFromIdByName(id, "apps");
        if (appName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'apps'.", id)));
        }
        String domainName = Utils.getValueFromIdByName(id, "domains");
        if (domainName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'domains'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, appName, domainName, Context.NONE).getValue();
    }

    public Response<CustomDomainResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String appName = Utils.getValueFromIdByName(id, "apps");
        if (appName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'apps'.", id)));
        }
        String domainName = Utils.getValueFromIdByName(id, "domains");
        if (domainName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'domains'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, appName, domainName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String appName = Utils.getValueFromIdByName(id, "apps");
        if (appName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'apps'.", id)));
        }
        String domainName = Utils.getValueFromIdByName(id, "domains");
        if (domainName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'domains'.", id)));
        }
        this.delete(resourceGroupName, serviceName, appName, domainName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String appName = Utils.getValueFromIdByName(id, "apps");
        if (appName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'apps'.", id)));
        }
        String domainName = Utils.getValueFromIdByName(id, "domains");
        if (domainName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'domains'.", id)));
        }
        this.delete(resourceGroupName, serviceName, appName, domainName, context);
    }

    private CustomDomainsClient serviceClient() {
        return this.innerClient;
    }

    private AppPlatformManager manager() {
        return this.serviceManager;
    }

    public CustomDomainResourceImpl define(String name) {
        return new CustomDomainResourceImpl(name, this.manager());
    }
}
