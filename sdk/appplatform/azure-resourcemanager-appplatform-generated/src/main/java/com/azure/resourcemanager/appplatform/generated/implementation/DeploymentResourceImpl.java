// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appplatform.generated.fluent.models.DeploymentResourceInner;
import com.azure.resourcemanager.appplatform.generated.models.DeploymentResource;
import com.azure.resourcemanager.appplatform.generated.models.DeploymentResourceProperties;
import com.azure.resourcemanager.appplatform.generated.models.LogFileUrlResponse;
import com.azure.resourcemanager.appplatform.generated.models.Sku;

public final class DeploymentResourceImpl
    implements DeploymentResource, DeploymentResource.Definition, DeploymentResource.Update {
    private DeploymentResourceInner innerObject;

    private final com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public DeploymentResourceProperties properties() {
        return this.innerModel().properties();
    }

    public Sku sku() {
        return this.innerModel().sku();
    }

    public DeploymentResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.appplatform.generated.AppPlatformManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String serviceName;

    private String appName;

    private String deploymentName;

    public DeploymentResourceImpl withExistingApp(String resourceGroupName, String serviceName, String appName) {
        this.resourceGroupName = resourceGroupName;
        this.serviceName = serviceName;
        this.appName = appName;
        return this;
    }

    public DeploymentResource create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDeployments()
                .createOrUpdate(
                    resourceGroupName, serviceName, appName, deploymentName, this.innerModel(), Context.NONE);
        return this;
    }

    public DeploymentResource create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDeployments()
                .createOrUpdate(resourceGroupName, serviceName, appName, deploymentName, this.innerModel(), context);
        return this;
    }

    DeploymentResourceImpl(
        String name, com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerObject = new DeploymentResourceInner();
        this.serviceManager = serviceManager;
        this.deploymentName = name;
    }

    public DeploymentResourceImpl update() {
        return this;
    }

    public DeploymentResource apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDeployments()
                .update(resourceGroupName, serviceName, appName, deploymentName, this.innerModel(), Context.NONE);
        return this;
    }

    public DeploymentResource apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDeployments()
                .update(resourceGroupName, serviceName, appName, deploymentName, this.innerModel(), context);
        return this;
    }

    DeploymentResourceImpl(
        DeploymentResourceInner innerObject,
        com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.serviceName = Utils.getValueFromIdByName(innerObject.id(), "Spring");
        this.appName = Utils.getValueFromIdByName(innerObject.id(), "apps");
        this.deploymentName = Utils.getValueFromIdByName(innerObject.id(), "deployments");
    }

    public DeploymentResource refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDeployments()
                .getWithResponse(resourceGroupName, serviceName, appName, deploymentName, Context.NONE)
                .getValue();
        return this;
    }

    public DeploymentResource refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDeployments()
                .getWithResponse(resourceGroupName, serviceName, appName, deploymentName, context)
                .getValue();
        return this;
    }

    public void start() {
        serviceManager.deployments().start(resourceGroupName, serviceName, appName, deploymentName);
    }

    public void start(Context context) {
        serviceManager.deployments().start(resourceGroupName, serviceName, appName, deploymentName, context);
    }

    public void stop() {
        serviceManager.deployments().stop(resourceGroupName, serviceName, appName, deploymentName);
    }

    public void stop(Context context) {
        serviceManager.deployments().stop(resourceGroupName, serviceName, appName, deploymentName, context);
    }

    public void restart() {
        serviceManager.deployments().restart(resourceGroupName, serviceName, appName, deploymentName);
    }

    public void restart(Context context) {
        serviceManager.deployments().restart(resourceGroupName, serviceName, appName, deploymentName, context);
    }

    public LogFileUrlResponse getLogFileUrl() {
        return serviceManager.deployments().getLogFileUrl(resourceGroupName, serviceName, appName, deploymentName);
    }

    public Response<LogFileUrlResponse> getLogFileUrlWithResponse(Context context) {
        return serviceManager
            .deployments()
            .getLogFileUrlWithResponse(resourceGroupName, serviceName, appName, deploymentName, context);
    }

    public DeploymentResourceImpl withProperties(DeploymentResourceProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public DeploymentResourceImpl withSku(Sku sku) {
        this.innerModel().withSku(sku);
        return this;
    }
}
