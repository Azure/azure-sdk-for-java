// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.fluent.GatewaysClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.CustomDomainValidateResultInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.GatewayResourceInner;
import com.azure.resourcemanager.appplatform.generated.models.CustomDomainValidatePayload;
import com.azure.resourcemanager.appplatform.generated.models.CustomDomainValidateResult;
import com.azure.resourcemanager.appplatform.generated.models.GatewayResource;
import com.azure.resourcemanager.appplatform.generated.models.Gateways;

public final class GatewaysImpl implements Gateways {
    private static final ClientLogger LOGGER = new ClientLogger(GatewaysImpl.class);

    private final GatewaysClient innerClient;

    private final com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager;

    public GatewaysImpl(
        GatewaysClient innerClient, com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public GatewayResource get(String resourceGroupName, String serviceName, String gatewayName) {
        GatewayResourceInner inner = this.serviceClient().get(resourceGroupName, serviceName, gatewayName);
        if (inner != null) {
            return new GatewayResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GatewayResource> getWithResponse(
        String resourceGroupName, String serviceName, String gatewayName, Context context) {
        Response<GatewayResourceInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serviceName, gatewayName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new GatewayResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String serviceName, String gatewayName) {
        this.serviceClient().delete(resourceGroupName, serviceName, gatewayName);
    }

    public void delete(String resourceGroupName, String serviceName, String gatewayName, Context context) {
        this.serviceClient().delete(resourceGroupName, serviceName, gatewayName, context);
    }

    public PagedIterable<GatewayResource> list(String resourceGroupName, String serviceName) {
        PagedIterable<GatewayResourceInner> inner = this.serviceClient().list(resourceGroupName, serviceName);
        return Utils.mapPage(inner, inner1 -> new GatewayResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<GatewayResource> list(String resourceGroupName, String serviceName, Context context) {
        PagedIterable<GatewayResourceInner> inner = this.serviceClient().list(resourceGroupName, serviceName, context);
        return Utils.mapPage(inner, inner1 -> new GatewayResourceImpl(inner1, this.manager()));
    }

    public CustomDomainValidateResult validateDomain(
        String resourceGroupName, String serviceName, String gatewayName, CustomDomainValidatePayload validatePayload) {
        CustomDomainValidateResultInner inner =
            this.serviceClient().validateDomain(resourceGroupName, serviceName, gatewayName, validatePayload);
        if (inner != null) {
            return new CustomDomainValidateResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CustomDomainValidateResult> validateDomainWithResponse(
        String resourceGroupName,
        String serviceName,
        String gatewayName,
        CustomDomainValidatePayload validatePayload,
        Context context) {
        Response<CustomDomainValidateResultInner> inner =
            this
                .serviceClient()
                .validateDomainWithResponse(resourceGroupName, serviceName, gatewayName, validatePayload, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CustomDomainValidateResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GatewayResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String gatewayName = Utils.getValueFromIdByName(id, "gateways");
        if (gatewayName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'gateways'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, gatewayName, Context.NONE).getValue();
    }

    public Response<GatewayResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String gatewayName = Utils.getValueFromIdByName(id, "gateways");
        if (gatewayName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'gateways'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serviceName, gatewayName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String gatewayName = Utils.getValueFromIdByName(id, "gateways");
        if (gatewayName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'gateways'.", id)));
        }
        this.delete(resourceGroupName, serviceName, gatewayName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String gatewayName = Utils.getValueFromIdByName(id, "gateways");
        if (gatewayName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'gateways'.", id)));
        }
        this.delete(resourceGroupName, serviceName, gatewayName, context);
    }

    private GatewaysClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appplatform.generated.AppPlatformManager manager() {
        return this.serviceManager;
    }

    public GatewayResourceImpl define(String name) {
        return new GatewayResourceImpl(name, this.manager());
    }
}
