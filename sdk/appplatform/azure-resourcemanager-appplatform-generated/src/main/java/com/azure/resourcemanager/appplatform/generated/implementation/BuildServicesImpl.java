// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appplatform.generated.fluent.BuildServicesClient;
import com.azure.resourcemanager.appplatform.generated.fluent.models.BuildInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.BuildResultInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.BuildResultLogInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.BuildServiceInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.ResourceUploadDefinitionInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.SupportedBuildpackResourceInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.SupportedBuildpacksCollectionInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.SupportedStackResourceInner;
import com.azure.resourcemanager.appplatform.generated.fluent.models.SupportedStacksCollectionInner;
import com.azure.resourcemanager.appplatform.generated.models.Build;
import com.azure.resourcemanager.appplatform.generated.models.BuildResult;
import com.azure.resourcemanager.appplatform.generated.models.BuildResultLog;
import com.azure.resourcemanager.appplatform.generated.models.BuildService;
import com.azure.resourcemanager.appplatform.generated.models.BuildServices;
import com.azure.resourcemanager.appplatform.generated.models.ResourceUploadDefinition;
import com.azure.resourcemanager.appplatform.generated.models.SupportedBuildpackResource;
import com.azure.resourcemanager.appplatform.generated.models.SupportedBuildpacksCollection;
import com.azure.resourcemanager.appplatform.generated.models.SupportedStackResource;
import com.azure.resourcemanager.appplatform.generated.models.SupportedStacksCollection;

public final class BuildServicesImpl implements BuildServices {
    private static final ClientLogger LOGGER = new ClientLogger(BuildServicesImpl.class);

    private final BuildServicesClient innerClient;

    private final com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager;

    public BuildServicesImpl(
        BuildServicesClient innerClient,
        com.azure.resourcemanager.appplatform.generated.AppPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<BuildService> listBuildServices(String resourceGroupName, String serviceName) {
        PagedIterable<BuildServiceInner> inner = this.serviceClient().listBuildServices(resourceGroupName, serviceName);
        return Utils.mapPage(inner, inner1 -> new BuildServiceImpl(inner1, this.manager()));
    }

    public PagedIterable<BuildService> listBuildServices(
        String resourceGroupName, String serviceName, Context context) {
        PagedIterable<BuildServiceInner> inner =
            this.serviceClient().listBuildServices(resourceGroupName, serviceName, context);
        return Utils.mapPage(inner, inner1 -> new BuildServiceImpl(inner1, this.manager()));
    }

    public BuildService getBuildService(String resourceGroupName, String serviceName, String buildServiceName) {
        BuildServiceInner inner =
            this.serviceClient().getBuildService(resourceGroupName, serviceName, buildServiceName);
        if (inner != null) {
            return new BuildServiceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BuildService> getBuildServiceWithResponse(
        String resourceGroupName, String serviceName, String buildServiceName, Context context) {
        Response<BuildServiceInner> inner =
            this.serviceClient().getBuildServiceWithResponse(resourceGroupName, serviceName, buildServiceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BuildServiceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<Build> listBuilds(String resourceGroupName, String serviceName, String buildServiceName) {
        PagedIterable<BuildInner> inner =
            this.serviceClient().listBuilds(resourceGroupName, serviceName, buildServiceName);
        return Utils.mapPage(inner, inner1 -> new BuildImpl(inner1, this.manager()));
    }

    public PagedIterable<Build> listBuilds(
        String resourceGroupName, String serviceName, String buildServiceName, Context context) {
        PagedIterable<BuildInner> inner =
            this.serviceClient().listBuilds(resourceGroupName, serviceName, buildServiceName, context);
        return Utils.mapPage(inner, inner1 -> new BuildImpl(inner1, this.manager()));
    }

    public Build getBuild(String resourceGroupName, String serviceName, String buildServiceName, String buildName) {
        BuildInner inner = this.serviceClient().getBuild(resourceGroupName, serviceName, buildServiceName, buildName);
        if (inner != null) {
            return new BuildImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Build> getBuildWithResponse(
        String resourceGroupName, String serviceName, String buildServiceName, String buildName, Context context) {
        Response<BuildInner> inner =
            this
                .serviceClient()
                .getBuildWithResponse(resourceGroupName, serviceName, buildServiceName, buildName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BuildImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<BuildResult> listBuildResults(
        String resourceGroupName, String serviceName, String buildServiceName, String buildName) {
        PagedIterable<BuildResultInner> inner =
            this.serviceClient().listBuildResults(resourceGroupName, serviceName, buildServiceName, buildName);
        return Utils.mapPage(inner, inner1 -> new BuildResultImpl(inner1, this.manager()));
    }

    public PagedIterable<BuildResult> listBuildResults(
        String resourceGroupName, String serviceName, String buildServiceName, String buildName, Context context) {
        PagedIterable<BuildResultInner> inner =
            this.serviceClient().listBuildResults(resourceGroupName, serviceName, buildServiceName, buildName, context);
        return Utils.mapPage(inner, inner1 -> new BuildResultImpl(inner1, this.manager()));
    }

    public BuildResult getBuildResult(
        String resourceGroupName,
        String serviceName,
        String buildServiceName,
        String buildName,
        String buildResultName) {
        BuildResultInner inner =
            this
                .serviceClient()
                .getBuildResult(resourceGroupName, serviceName, buildServiceName, buildName, buildResultName);
        if (inner != null) {
            return new BuildResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BuildResult> getBuildResultWithResponse(
        String resourceGroupName,
        String serviceName,
        String buildServiceName,
        String buildName,
        String buildResultName,
        Context context) {
        Response<BuildResultInner> inner =
            this
                .serviceClient()
                .getBuildResultWithResponse(
                    resourceGroupName, serviceName, buildServiceName, buildName, buildResultName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BuildResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BuildResultLog getBuildResultLog(
        String resourceGroupName,
        String serviceName,
        String buildServiceName,
        String buildName,
        String buildResultName) {
        BuildResultLogInner inner =
            this
                .serviceClient()
                .getBuildResultLog(resourceGroupName, serviceName, buildServiceName, buildName, buildResultName);
        if (inner != null) {
            return new BuildResultLogImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BuildResultLog> getBuildResultLogWithResponse(
        String resourceGroupName,
        String serviceName,
        String buildServiceName,
        String buildName,
        String buildResultName,
        Context context) {
        Response<BuildResultLogInner> inner =
            this
                .serviceClient()
                .getBuildResultLogWithResponse(
                    resourceGroupName, serviceName, buildServiceName, buildName, buildResultName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BuildResultLogImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ResourceUploadDefinition getResourceUploadUrl(
        String resourceGroupName, String serviceName, String buildServiceName) {
        ResourceUploadDefinitionInner inner =
            this.serviceClient().getResourceUploadUrl(resourceGroupName, serviceName, buildServiceName);
        if (inner != null) {
            return new ResourceUploadDefinitionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ResourceUploadDefinition> getResourceUploadUrlWithResponse(
        String resourceGroupName, String serviceName, String buildServiceName, Context context) {
        Response<ResourceUploadDefinitionInner> inner =
            this
                .serviceClient()
                .getResourceUploadUrlWithResponse(resourceGroupName, serviceName, buildServiceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ResourceUploadDefinitionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SupportedBuildpacksCollection listSupportedBuildpacks(
        String resourceGroupName, String serviceName, String buildServiceName) {
        SupportedBuildpacksCollectionInner inner =
            this.serviceClient().listSupportedBuildpacks(resourceGroupName, serviceName, buildServiceName);
        if (inner != null) {
            return new SupportedBuildpacksCollectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SupportedBuildpacksCollection> listSupportedBuildpacksWithResponse(
        String resourceGroupName, String serviceName, String buildServiceName, Context context) {
        Response<SupportedBuildpacksCollectionInner> inner =
            this
                .serviceClient()
                .listSupportedBuildpacksWithResponse(resourceGroupName, serviceName, buildServiceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SupportedBuildpacksCollectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SupportedBuildpackResource getSupportedBuildpack(
        String resourceGroupName, String serviceName, String buildServiceName, String buildpackName) {
        SupportedBuildpackResourceInner inner =
            this.serviceClient().getSupportedBuildpack(resourceGroupName, serviceName, buildServiceName, buildpackName);
        if (inner != null) {
            return new SupportedBuildpackResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SupportedBuildpackResource> getSupportedBuildpackWithResponse(
        String resourceGroupName, String serviceName, String buildServiceName, String buildpackName, Context context) {
        Response<SupportedBuildpackResourceInner> inner =
            this
                .serviceClient()
                .getSupportedBuildpackWithResponse(
                    resourceGroupName, serviceName, buildServiceName, buildpackName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SupportedBuildpackResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SupportedStacksCollection listSupportedStacks(
        String resourceGroupName, String serviceName, String buildServiceName) {
        SupportedStacksCollectionInner inner =
            this.serviceClient().listSupportedStacks(resourceGroupName, serviceName, buildServiceName);
        if (inner != null) {
            return new SupportedStacksCollectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SupportedStacksCollection> listSupportedStacksWithResponse(
        String resourceGroupName, String serviceName, String buildServiceName, Context context) {
        Response<SupportedStacksCollectionInner> inner =
            this
                .serviceClient()
                .listSupportedStacksWithResponse(resourceGroupName, serviceName, buildServiceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SupportedStacksCollectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SupportedStackResource getSupportedStack(
        String resourceGroupName, String serviceName, String buildServiceName, String stackName) {
        SupportedStackResourceInner inner =
            this.serviceClient().getSupportedStack(resourceGroupName, serviceName, buildServiceName, stackName);
        if (inner != null) {
            return new SupportedStackResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SupportedStackResource> getSupportedStackWithResponse(
        String resourceGroupName, String serviceName, String buildServiceName, String stackName, Context context) {
        Response<SupportedStackResourceInner> inner =
            this
                .serviceClient()
                .getSupportedStackWithResponse(resourceGroupName, serviceName, buildServiceName, stackName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SupportedStackResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Build getBuildById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String buildServiceName = Utils.getValueFromIdByName(id, "buildServices");
        if (buildServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'buildServices'.", id)));
        }
        String buildName = Utils.getValueFromIdByName(id, "builds");
        if (buildName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'builds'.", id)));
        }
        return this
            .getBuildWithResponse(resourceGroupName, serviceName, buildServiceName, buildName, Context.NONE)
            .getValue();
    }

    public Response<Build> getBuildByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceName = Utils.getValueFromIdByName(id, "Spring");
        if (serviceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'Spring'.", id)));
        }
        String buildServiceName = Utils.getValueFromIdByName(id, "buildServices");
        if (buildServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'buildServices'.", id)));
        }
        String buildName = Utils.getValueFromIdByName(id, "builds");
        if (buildName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'builds'.", id)));
        }
        return this.getBuildWithResponse(resourceGroupName, serviceName, buildServiceName, buildName, context);
    }

    private BuildServicesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appplatform.generated.AppPlatformManager manager() {
        return this.serviceManager;
    }

    public BuildImpl define(String name) {
        return new BuildImpl(name, this.manager());
    }
}
