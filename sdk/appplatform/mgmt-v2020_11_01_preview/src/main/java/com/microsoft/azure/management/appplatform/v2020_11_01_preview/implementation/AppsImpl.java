/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.appplatform.v2020_11_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.appplatform.v2020_11_01_preview.Apps;
import rx.Completable;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.appplatform.v2020_11_01_preview.AppResource;
import com.microsoft.azure.management.appplatform.v2020_11_01_preview.ResourceUploadDefinition;
import com.microsoft.azure.management.appplatform.v2020_11_01_preview.CustomDomainValidateResult;

class AppsImpl extends WrapperImpl<AppsInner> implements Apps {
    private final AppPlatformManager manager;

    AppsImpl(AppPlatformManager manager) {
        super(manager.inner().apps());
        this.manager = manager;
    }

    public AppPlatformManager manager() {
        return this.manager;
    }

    @Override
    public AppResourceImpl define(String name) {
        return wrapModel(name);
    }

    private AppResourceImpl wrapModel(AppResourceInner inner) {
        return  new AppResourceImpl(inner, manager());
    }

    private AppResourceImpl wrapModel(String name) {
        return new AppResourceImpl(name, this.manager());
    }

    @Override
    public Observable<AppResource> getAsync(String resourceGroupName, String serviceName, String appName) {
        AppsInner client = this.inner();
        return client.getAsync(resourceGroupName, serviceName, appName)
        .map(new Func1<AppResourceInner, AppResource>() {
            @Override
            public AppResource call(AppResourceInner inner) {
                return new AppResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String serviceName, String appName) {
        AppsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, serviceName, appName).toCompletable();
    }

    @Override
    public Observable<AppResource> listAsync(final String resourceGroupName, final String serviceName) {
        AppsInner client = this.inner();
        return client.listAsync(resourceGroupName, serviceName)
        .flatMapIterable(new Func1<Page<AppResourceInner>, Iterable<AppResourceInner>>() {
            @Override
            public Iterable<AppResourceInner> call(Page<AppResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<AppResourceInner, AppResource>() {
            @Override
            public AppResource call(AppResourceInner inner) {
                return new AppResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ResourceUploadDefinition> getResourceUploadUrlAsync(String resourceGroupName, String serviceName, String appName) {
        AppsInner client = this.inner();
        return client.getResourceUploadUrlAsync(resourceGroupName, serviceName, appName)
        .map(new Func1<ResourceUploadDefinitionInner, ResourceUploadDefinition>() {
            @Override
            public ResourceUploadDefinition call(ResourceUploadDefinitionInner inner) {
                return new ResourceUploadDefinitionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<CustomDomainValidateResult> validateDomainAsync(String resourceGroupName, String serviceName, String appName, String name) {
        AppsInner client = this.inner();
        return client.validateDomainAsync(resourceGroupName, serviceName, appName, name)
        .map(new Func1<CustomDomainValidateResultInner, CustomDomainValidateResult>() {
            @Override
            public CustomDomainValidateResult call(CustomDomainValidateResultInner inner) {
                return new CustomDomainValidateResultImpl(inner, manager());
            }
        });
    }

}
