/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appplatform.v2020_11_01_preview;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Source information for a deployment.
 */
public class UserSourceInfo {
    /**
     * Type of the source uploaded. Possible values include: 'Jar',
     * 'NetCoreZip', 'Source'.
     */
    @JsonProperty(value = "type")
    private UserSourceType type;

    /**
     * Relative path of the storage which stores the source.
     */
    @JsonProperty(value = "relativePath")
    private String relativePath;

    /**
     * Version of the source.
     */
    @JsonProperty(value = "version")
    private String version;

    /**
     * Selector for the artifact to be used for the deployment for multi-module
     * projects. This should be
     * the relative path to the target module/project.
     */
    @JsonProperty(value = "artifactSelector")
    private String artifactSelector;

    /**
     * Get type of the source uploaded. Possible values include: 'Jar', 'NetCoreZip', 'Source'.
     *
     * @return the type value
     */
    public UserSourceType type() {
        return this.type;
    }

    /**
     * Set type of the source uploaded. Possible values include: 'Jar', 'NetCoreZip', 'Source'.
     *
     * @param type the type value to set
     * @return the UserSourceInfo object itself.
     */
    public UserSourceInfo withType(UserSourceType type) {
        this.type = type;
        return this;
    }

    /**
     * Get relative path of the storage which stores the source.
     *
     * @return the relativePath value
     */
    public String relativePath() {
        return this.relativePath;
    }

    /**
     * Set relative path of the storage which stores the source.
     *
     * @param relativePath the relativePath value to set
     * @return the UserSourceInfo object itself.
     */
    public UserSourceInfo withRelativePath(String relativePath) {
        this.relativePath = relativePath;
        return this;
    }

    /**
     * Get version of the source.
     *
     * @return the version value
     */
    public String version() {
        return this.version;
    }

    /**
     * Set version of the source.
     *
     * @param version the version value to set
     * @return the UserSourceInfo object itself.
     */
    public UserSourceInfo withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get selector for the artifact to be used for the deployment for multi-module projects. This should be
     the relative path to the target module/project.
     *
     * @return the artifactSelector value
     */
    public String artifactSelector() {
        return this.artifactSelector;
    }

    /**
     * Set selector for the artifact to be used for the deployment for multi-module projects. This should be
     the relative path to the target module/project.
     *
     * @param artifactSelector the artifactSelector value to set
     * @return the UserSourceInfo object itself.
     */
    public UserSourceInfo withArtifactSelector(String artifactSelector) {
        this.artifactSelector = artifactSelector;
        return this;
    }

}
