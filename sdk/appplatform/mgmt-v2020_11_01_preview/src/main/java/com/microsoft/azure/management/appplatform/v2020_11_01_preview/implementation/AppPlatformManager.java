/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appplatform.v2020_11_01_preview.implementation;

import com.microsoft.azure.AzureEnvironment;
import com.microsoft.azure.AzureResponseBuilder;
import com.microsoft.azure.credentials.AzureTokenCredentials;
import com.microsoft.azure.management.apigeneration.Beta;
import com.microsoft.azure.management.apigeneration.Beta.SinceVersion;
import com.microsoft.azure.arm.resources.AzureConfigurable;
import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.RestClient;
import com.microsoft.azure.management.appplatform.v2020_11_01_preview.Services;
import com.microsoft.azure.management.appplatform.v2020_11_01_preview.ConfigServers;
import com.microsoft.azure.management.appplatform.v2020_11_01_preview.MonitoringSettings;
import com.microsoft.azure.management.appplatform.v2020_11_01_preview.Apps;
import com.microsoft.azure.management.appplatform.v2020_11_01_preview.Bindings;
import com.microsoft.azure.management.appplatform.v2020_11_01_preview.Certificates;
import com.microsoft.azure.management.appplatform.v2020_11_01_preview.CustomDomains;
import com.microsoft.azure.management.appplatform.v2020_11_01_preview.Deployments;
import com.microsoft.azure.management.appplatform.v2020_11_01_preview.Operations;
import com.microsoft.azure.management.appplatform.v2020_11_01_preview.RuntimeVersions;
import com.microsoft.azure.management.appplatform.v2020_11_01_preview.Skus;
import com.microsoft.azure.arm.resources.implementation.AzureConfigurableCoreImpl;
import com.microsoft.azure.arm.resources.implementation.ManagerCore;

/**
 * Entry point to Azure AppPlatform resource management.
 */
public final class AppPlatformManager extends ManagerCore<AppPlatformManager, AppPlatformManagementClientImpl> {
    private Services services;
    private ConfigServers configServers;
    private MonitoringSettings monitoringSettings;
    private Apps apps;
    private Bindings bindings;
    private Certificates certificates;
    private CustomDomains customDomains;
    private Deployments deployments;
    private Operations operations;
    private RuntimeVersions runtimeVersions;
    private Skus skus;
    /**
    * Get a Configurable instance that can be used to create AppPlatformManager with optional configuration.
    *
    * @return the instance allowing configurations
    */
    public static Configurable configure() {
        return new AppPlatformManager.ConfigurableImpl();
    }
    /**
    * Creates an instance of AppPlatformManager that exposes AppPlatform resource management API entry points.
    *
    * @param credentials the credentials to use
    * @param subscriptionId the subscription UUID
    * @return the AppPlatformManager
    */
    public static AppPlatformManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
        return new AppPlatformManager(new RestClient.Builder()
            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)
            .withCredentials(credentials)
            .withSerializerAdapter(new AzureJacksonAdapter())
            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())
            .build(), subscriptionId);
    }
    /**
    * Creates an instance of AppPlatformManager that exposes AppPlatform resource management API entry points.
    *
    * @param restClient the RestClient to be used for API calls.
    * @param subscriptionId the subscription UUID
    * @return the AppPlatformManager
    */
    public static AppPlatformManager authenticate(RestClient restClient, String subscriptionId) {
        return new AppPlatformManager(restClient, subscriptionId);
    }
    /**
    * The interface allowing configurations to be set.
    */
    public interface Configurable extends AzureConfigurable<Configurable> {
        /**
        * Creates an instance of AppPlatformManager that exposes AppPlatform management API entry points.
        *
        * @param credentials the credentials to use
        * @param subscriptionId the subscription UUID
        * @return the interface exposing AppPlatform management API entry points that work across subscriptions
        */
        AppPlatformManager authenticate(AzureTokenCredentials credentials, String subscriptionId);
    }

    /**
     * @return Entry point to manage Services.
     */
    public Services services() {
        if (this.services == null) {
            this.services = new ServicesImpl(this);
        }
        return this.services;
    }

    /**
     * @return Entry point to manage ConfigServers.
     */
    public ConfigServers configServers() {
        if (this.configServers == null) {
            this.configServers = new ConfigServersImpl(this);
        }
        return this.configServers;
    }

    /**
     * @return Entry point to manage MonitoringSettings.
     */
    public MonitoringSettings monitoringSettings() {
        if (this.monitoringSettings == null) {
            this.monitoringSettings = new MonitoringSettingsImpl(this);
        }
        return this.monitoringSettings;
    }

    /**
     * @return Entry point to manage Apps.
     */
    public Apps apps() {
        if (this.apps == null) {
            this.apps = new AppsImpl(this);
        }
        return this.apps;
    }

    /**
     * @return Entry point to manage Bindings.
     */
    public Bindings bindings() {
        if (this.bindings == null) {
            this.bindings = new BindingsImpl(this);
        }
        return this.bindings;
    }

    /**
     * @return Entry point to manage Certificates.
     */
    public Certificates certificates() {
        if (this.certificates == null) {
            this.certificates = new CertificatesImpl(this);
        }
        return this.certificates;
    }

    /**
     * @return Entry point to manage CustomDomains.
     */
    public CustomDomains customDomains() {
        if (this.customDomains == null) {
            this.customDomains = new CustomDomainsImpl(this);
        }
        return this.customDomains;
    }

    /**
     * @return Entry point to manage Deployments.
     */
    public Deployments deployments() {
        if (this.deployments == null) {
            this.deployments = new DeploymentsImpl(this);
        }
        return this.deployments;
    }

    /**
     * @return Entry point to manage Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(this);
        }
        return this.operations;
    }

    /**
     * @return Entry point to manage RuntimeVersions.
     */
    public RuntimeVersions runtimeVersions() {
        if (this.runtimeVersions == null) {
            this.runtimeVersions = new RuntimeVersionsImpl(this);
        }
        return this.runtimeVersions;
    }

    /**
     * @return Entry point to manage Skus.
     */
    public Skus skus() {
        if (this.skus == null) {
            this.skus = new SkusImpl(this);
        }
        return this.skus;
    }

    /**
    * The implementation for Configurable interface.
    */
    private static final class ConfigurableImpl extends AzureConfigurableCoreImpl<Configurable> implements Configurable {
        public AppPlatformManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
           return AppPlatformManager.authenticate(buildRestClient(credentials), subscriptionId);
        }
     }
    private AppPlatformManager(RestClient restClient, String subscriptionId) {
        super(
            restClient,
            subscriptionId,
            new AppPlatformManagementClientImpl(restClient).withSubscriptionId(subscriptionId));
    }
}
