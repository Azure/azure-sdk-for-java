/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.appplatform.v2020_11_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.appplatform.v2020_11_01_preview.CustomDomains;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.appplatform.v2020_11_01_preview.CustomDomainResource;

class CustomDomainsImpl extends WrapperImpl<CustomDomainsInner> implements CustomDomains {
    private final AppPlatformManager manager;

    CustomDomainsImpl(AppPlatformManager manager) {
        super(manager.inner().customDomains());
        this.manager = manager;
    }

    public AppPlatformManager manager() {
        return this.manager;
    }

    @Override
    public CustomDomainResourceImpl define(String name) {
        return wrapModel(name);
    }

    private CustomDomainResourceImpl wrapModel(CustomDomainResourceInner inner) {
        return  new CustomDomainResourceImpl(inner, manager());
    }

    private CustomDomainResourceImpl wrapModel(String name) {
        return new CustomDomainResourceImpl(name, this.manager());
    }

    @Override
    public Observable<CustomDomainResource> listAsync(final String resourceGroupName, final String serviceName, final String appName) {
        CustomDomainsInner client = this.inner();
        return client.listAsync(resourceGroupName, serviceName, appName)
        .flatMapIterable(new Func1<Page<CustomDomainResourceInner>, Iterable<CustomDomainResourceInner>>() {
            @Override
            public Iterable<CustomDomainResourceInner> call(Page<CustomDomainResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<CustomDomainResourceInner, CustomDomainResource>() {
            @Override
            public CustomDomainResource call(CustomDomainResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<CustomDomainResource> getAsync(String resourceGroupName, String serviceName, String appName, String domainName) {
        CustomDomainsInner client = this.inner();
        return client.getAsync(resourceGroupName, serviceName, appName, domainName)
        .flatMap(new Func1<CustomDomainResourceInner, Observable<CustomDomainResource>>() {
            @Override
            public Observable<CustomDomainResource> call(CustomDomainResourceInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((CustomDomainResource)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String serviceName, String appName, String domainName) {
        CustomDomainsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, serviceName, appName, domainName).toCompletable();
    }

}
