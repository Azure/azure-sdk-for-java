/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appplatform.v2020_11_01_preview.implementation;

import com.microsoft.azure.management.appplatform.v2020_11_01_preview.BindingResource;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.appplatform.v2020_11_01_preview.BindingResourceProperties;
import java.util.Map;
import rx.functions.Func1;

class BindingResourceImpl extends CreatableUpdatableImpl<BindingResource, BindingResourceInner, BindingResourceImpl> implements BindingResource, BindingResource.Definition, BindingResource.Update {
    private final AppPlatformManager manager;
    private String resourceGroupName;
    private String serviceName;
    private String appName;
    private String bindingName;
    private BindingResourceProperties cproperties;
    private BindingResourceProperties uproperties;

    BindingResourceImpl(String name, AppPlatformManager manager) {
        super(name, new BindingResourceInner());
        this.manager = manager;
        // Set resource name
        this.bindingName = name;
        //
        this.cproperties = new BindingResourceProperties();
        this.uproperties = new BindingResourceProperties();
    }

    BindingResourceImpl(BindingResourceInner inner, AppPlatformManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.bindingName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serviceName = IdParsingUtils.getValueFromIdByName(inner.id(), "Spring");
        this.appName = IdParsingUtils.getValueFromIdByName(inner.id(), "apps");
        this.bindingName = IdParsingUtils.getValueFromIdByName(inner.id(), "bindings");
        //
        this.cproperties = new BindingResourceProperties();
        this.uproperties = new BindingResourceProperties();
    }

    @Override
    public AppPlatformManager manager() {
        return this.manager;
    }

    @Override
    public Observable<BindingResource> createResourceAsync() {
        BindingsInner client = this.manager().inner().bindings();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serviceName, this.appName, this.bindingName, this.cproperties)
            .map(new Func1<BindingResourceInner, BindingResourceInner>() {
               @Override
               public BindingResourceInner call(BindingResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<BindingResource> updateResourceAsync() {
        BindingsInner client = this.manager().inner().bindings();
        return client.updateAsync(this.resourceGroupName, this.serviceName, this.appName, this.bindingName, this.uproperties)
            .map(new Func1<BindingResourceInner, BindingResourceInner>() {
               @Override
               public BindingResourceInner call(BindingResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<BindingResourceInner> getInnerAsync() {
        BindingsInner client = this.manager().inner().bindings();
        return client.getAsync(this.resourceGroupName, this.serviceName, this.appName, this.bindingName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.cproperties = new BindingResourceProperties();
        this.uproperties = new BindingResourceProperties();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public BindingResourceProperties properties() {
        return this.inner().properties();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public BindingResourceImpl withExistingApp(String resourceGroupName, String serviceName, String appName) {
        this.resourceGroupName = resourceGroupName;
        this.serviceName = serviceName;
        this.appName = appName;
        return this;
    }

    @Override
    public BindingResourceImpl withProperties(BindingResourceProperties properties) {
        if (isInCreateMode()) {
            this.cproperties = properties;
        } else {
            this.uproperties = properties;
        }
        return this;
    }

}
