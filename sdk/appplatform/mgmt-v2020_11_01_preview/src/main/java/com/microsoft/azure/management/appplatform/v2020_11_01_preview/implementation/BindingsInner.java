/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appplatform.v2020_11_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.appplatform.v2020_11_01_preview.BindingResourceProperties;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Bindings.
 */
public class BindingsInner {
    /** The Retrofit service to perform REST calls. */
    private BindingsService service;
    /** The service client containing this operation class. */
    private AppPlatformManagementClientImpl client;

    /**
     * Initializes an instance of BindingsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public BindingsInner(Retrofit retrofit, AppPlatformManagementClientImpl client) {
        this.service = retrofit.create(BindingsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Bindings to be
     * used by Retrofit to perform actually REST calls.
     */
    interface BindingsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2020_11_01_preview.Bindings get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("appName") String appName, @Path("bindingName") String bindingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2020_11_01_preview.Bindings createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("appName") String appName, @Path("bindingName") String bindingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body BindingResourceInner bindingResource, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2020_11_01_preview.Bindings beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("appName") String appName, @Path("bindingName") String bindingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body BindingResourceInner bindingResource, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2020_11_01_preview.Bindings delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("appName") String appName, @Path("bindingName") String bindingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2020_11_01_preview.Bindings beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("appName") String appName, @Path("bindingName") String bindingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2020_11_01_preview.Bindings update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("appName") String appName, @Path("bindingName") String bindingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body BindingResourceInner bindingResource, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2020_11_01_preview.Bindings beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("appName") String appName, @Path("bindingName") String bindingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body BindingResourceInner bindingResource, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2020_11_01_preview.Bindings list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("appName") String appName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2020_11_01_preview.Bindings listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get a Binding and its properties.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BindingResourceInner object if successful.
     */
    public BindingResourceInner get(String resourceGroupName, String serviceName, String appName, String bindingName) {
        return getWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName).toBlocking().single().body();
    }

    /**
     * Get a Binding and its properties.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BindingResourceInner> getAsync(String resourceGroupName, String serviceName, String appName, String bindingName, final ServiceCallback<BindingResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName), serviceCallback);
    }

    /**
     * Get a Binding and its properties.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BindingResourceInner object
     */
    public Observable<BindingResourceInner> getAsync(String resourceGroupName, String serviceName, String appName, String bindingName) {
        return getWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName).map(new Func1<ServiceResponse<BindingResourceInner>, BindingResourceInner>() {
            @Override
            public BindingResourceInner call(ServiceResponse<BindingResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a Binding and its properties.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BindingResourceInner object
     */
    public Observable<ServiceResponse<BindingResourceInner>> getWithServiceResponseAsync(String resourceGroupName, String serviceName, String appName, String bindingName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (appName == null) {
            throw new IllegalArgumentException("Parameter appName is required and cannot be null.");
        }
        if (bindingName == null) {
            throw new IllegalArgumentException("Parameter bindingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, serviceName, appName, bindingName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BindingResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<BindingResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BindingResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BindingResourceInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BindingResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BindingResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create a new Binding or update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BindingResourceInner object if successful.
     */
    public BindingResourceInner createOrUpdate(String resourceGroupName, String serviceName, String appName, String bindingName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName).toBlocking().last().body();
    }

    /**
     * Create a new Binding or update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BindingResourceInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String appName, String bindingName, final ServiceCallback<BindingResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName), serviceCallback);
    }

    /**
     * Create a new Binding or update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<BindingResourceInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String appName, String bindingName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName).map(new Func1<ServiceResponse<BindingResourceInner>, BindingResourceInner>() {
            @Override
            public BindingResourceInner call(ServiceResponse<BindingResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a new Binding or update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<BindingResourceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String appName, String bindingName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (appName == null) {
            throw new IllegalArgumentException("Parameter appName is required and cannot be null.");
        }
        if (bindingName == null) {
            throw new IllegalArgumentException("Parameter bindingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final BindingResourceProperties properties = null;
        BindingResourceInner bindingResource = new BindingResourceInner();
        bindingResource.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, serviceName, appName, bindingName, this.client.apiVersion(), this.client.acceptLanguage(), bindingResource, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<BindingResourceInner>() { }.getType());
    }
    /**
     * Create a new Binding or update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param properties Properties of the Binding resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BindingResourceInner object if successful.
     */
    public BindingResourceInner createOrUpdate(String resourceGroupName, String serviceName, String appName, String bindingName, BindingResourceProperties properties) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName, properties).toBlocking().last().body();
    }

    /**
     * Create a new Binding or update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param properties Properties of the Binding resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BindingResourceInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String appName, String bindingName, BindingResourceProperties properties, final ServiceCallback<BindingResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName, properties), serviceCallback);
    }

    /**
     * Create a new Binding or update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param properties Properties of the Binding resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<BindingResourceInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String appName, String bindingName, BindingResourceProperties properties) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName, properties).map(new Func1<ServiceResponse<BindingResourceInner>, BindingResourceInner>() {
            @Override
            public BindingResourceInner call(ServiceResponse<BindingResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a new Binding or update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param properties Properties of the Binding resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<BindingResourceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String appName, String bindingName, BindingResourceProperties properties) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (appName == null) {
            throw new IllegalArgumentException("Parameter appName is required and cannot be null.");
        }
        if (bindingName == null) {
            throw new IllegalArgumentException("Parameter bindingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        BindingResourceInner bindingResource = new BindingResourceInner();
        bindingResource.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, serviceName, appName, bindingName, this.client.apiVersion(), this.client.acceptLanguage(), bindingResource, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<BindingResourceInner>() { }.getType());
    }

    /**
     * Create a new Binding or update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BindingResourceInner object if successful.
     */
    public BindingResourceInner beginCreateOrUpdate(String resourceGroupName, String serviceName, String appName, String bindingName) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName).toBlocking().single().body();
    }

    /**
     * Create a new Binding or update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BindingResourceInner> beginCreateOrUpdateAsync(String resourceGroupName, String serviceName, String appName, String bindingName, final ServiceCallback<BindingResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName), serviceCallback);
    }

    /**
     * Create a new Binding or update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BindingResourceInner object
     */
    public Observable<BindingResourceInner> beginCreateOrUpdateAsync(String resourceGroupName, String serviceName, String appName, String bindingName) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName).map(new Func1<ServiceResponse<BindingResourceInner>, BindingResourceInner>() {
            @Override
            public BindingResourceInner call(ServiceResponse<BindingResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a new Binding or update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BindingResourceInner object
     */
    public Observable<ServiceResponse<BindingResourceInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String appName, String bindingName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (appName == null) {
            throw new IllegalArgumentException("Parameter appName is required and cannot be null.");
        }
        if (bindingName == null) {
            throw new IllegalArgumentException("Parameter bindingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final BindingResourceProperties properties = null;
        BindingResourceInner bindingResource = new BindingResourceInner();
        bindingResource.withProperties(null);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, serviceName, appName, bindingName, this.client.apiVersion(), this.client.acceptLanguage(), bindingResource, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BindingResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<BindingResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BindingResourceInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create a new Binding or update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param properties Properties of the Binding resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BindingResourceInner object if successful.
     */
    public BindingResourceInner beginCreateOrUpdate(String resourceGroupName, String serviceName, String appName, String bindingName, BindingResourceProperties properties) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName, properties).toBlocking().single().body();
    }

    /**
     * Create a new Binding or update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param properties Properties of the Binding resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BindingResourceInner> beginCreateOrUpdateAsync(String resourceGroupName, String serviceName, String appName, String bindingName, BindingResourceProperties properties, final ServiceCallback<BindingResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName, properties), serviceCallback);
    }

    /**
     * Create a new Binding or update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param properties Properties of the Binding resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BindingResourceInner object
     */
    public Observable<BindingResourceInner> beginCreateOrUpdateAsync(String resourceGroupName, String serviceName, String appName, String bindingName, BindingResourceProperties properties) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName, properties).map(new Func1<ServiceResponse<BindingResourceInner>, BindingResourceInner>() {
            @Override
            public BindingResourceInner call(ServiceResponse<BindingResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a new Binding or update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param properties Properties of the Binding resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BindingResourceInner object
     */
    public Observable<ServiceResponse<BindingResourceInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String appName, String bindingName, BindingResourceProperties properties) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (appName == null) {
            throw new IllegalArgumentException("Parameter appName is required and cannot be null.");
        }
        if (bindingName == null) {
            throw new IllegalArgumentException("Parameter bindingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        BindingResourceInner bindingResource = new BindingResourceInner();
        bindingResource.withProperties(properties);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, serviceName, appName, bindingName, this.client.apiVersion(), this.client.acceptLanguage(), bindingResource, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BindingResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<BindingResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BindingResourceInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BindingResourceInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BindingResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BindingResourceInner>() { }.getType())
                .register(201, new TypeToken<BindingResourceInner>() { }.getType())
                .register(202, new TypeToken<BindingResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Operation to delete a Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String serviceName, String appName, String bindingName) {
        deleteWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName).toBlocking().last().body();
    }

    /**
     * Operation to delete a Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String serviceName, String appName, String bindingName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName), serviceCallback);
    }

    /**
     * Operation to delete a Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String serviceName, String appName, String bindingName) {
        return deleteWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Operation to delete a Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String serviceName, String appName, String bindingName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (appName == null) {
            throw new IllegalArgumentException("Parameter appName is required and cannot be null.");
        }
        if (bindingName == null) {
            throw new IllegalArgumentException("Parameter bindingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, serviceName, appName, bindingName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Operation to delete a Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String serviceName, String appName, String bindingName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName).toBlocking().single().body();
    }

    /**
     * Operation to delete a Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String serviceName, String appName, String bindingName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName), serviceCallback);
    }

    /**
     * Operation to delete a Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String serviceName, String appName, String bindingName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Operation to delete a Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String serviceName, String appName, String bindingName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (appName == null) {
            throw new IllegalArgumentException("Parameter appName is required and cannot be null.");
        }
        if (bindingName == null) {
            throw new IllegalArgumentException("Parameter bindingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, serviceName, appName, bindingName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Operation to update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BindingResourceInner object if successful.
     */
    public BindingResourceInner update(String resourceGroupName, String serviceName, String appName, String bindingName) {
        return updateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName).toBlocking().last().body();
    }

    /**
     * Operation to update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BindingResourceInner> updateAsync(String resourceGroupName, String serviceName, String appName, String bindingName, final ServiceCallback<BindingResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName), serviceCallback);
    }

    /**
     * Operation to update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<BindingResourceInner> updateAsync(String resourceGroupName, String serviceName, String appName, String bindingName) {
        return updateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName).map(new Func1<ServiceResponse<BindingResourceInner>, BindingResourceInner>() {
            @Override
            public BindingResourceInner call(ServiceResponse<BindingResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Operation to update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<BindingResourceInner>> updateWithServiceResponseAsync(String resourceGroupName, String serviceName, String appName, String bindingName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (appName == null) {
            throw new IllegalArgumentException("Parameter appName is required and cannot be null.");
        }
        if (bindingName == null) {
            throw new IllegalArgumentException("Parameter bindingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final BindingResourceProperties properties = null;
        BindingResourceInner bindingResource = new BindingResourceInner();
        bindingResource.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, serviceName, appName, bindingName, this.client.apiVersion(), this.client.acceptLanguage(), bindingResource, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<BindingResourceInner>() { }.getType());
    }
    /**
     * Operation to update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param properties Properties of the Binding resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BindingResourceInner object if successful.
     */
    public BindingResourceInner update(String resourceGroupName, String serviceName, String appName, String bindingName, BindingResourceProperties properties) {
        return updateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName, properties).toBlocking().last().body();
    }

    /**
     * Operation to update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param properties Properties of the Binding resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BindingResourceInner> updateAsync(String resourceGroupName, String serviceName, String appName, String bindingName, BindingResourceProperties properties, final ServiceCallback<BindingResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName, properties), serviceCallback);
    }

    /**
     * Operation to update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param properties Properties of the Binding resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<BindingResourceInner> updateAsync(String resourceGroupName, String serviceName, String appName, String bindingName, BindingResourceProperties properties) {
        return updateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName, properties).map(new Func1<ServiceResponse<BindingResourceInner>, BindingResourceInner>() {
            @Override
            public BindingResourceInner call(ServiceResponse<BindingResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Operation to update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param properties Properties of the Binding resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<BindingResourceInner>> updateWithServiceResponseAsync(String resourceGroupName, String serviceName, String appName, String bindingName, BindingResourceProperties properties) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (appName == null) {
            throw new IllegalArgumentException("Parameter appName is required and cannot be null.");
        }
        if (bindingName == null) {
            throw new IllegalArgumentException("Parameter bindingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        BindingResourceInner bindingResource = new BindingResourceInner();
        bindingResource.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, serviceName, appName, bindingName, this.client.apiVersion(), this.client.acceptLanguage(), bindingResource, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<BindingResourceInner>() { }.getType());
    }

    /**
     * Operation to update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BindingResourceInner object if successful.
     */
    public BindingResourceInner beginUpdate(String resourceGroupName, String serviceName, String appName, String bindingName) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName).toBlocking().single().body();
    }

    /**
     * Operation to update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BindingResourceInner> beginUpdateAsync(String resourceGroupName, String serviceName, String appName, String bindingName, final ServiceCallback<BindingResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName), serviceCallback);
    }

    /**
     * Operation to update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BindingResourceInner object
     */
    public Observable<BindingResourceInner> beginUpdateAsync(String resourceGroupName, String serviceName, String appName, String bindingName) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName).map(new Func1<ServiceResponse<BindingResourceInner>, BindingResourceInner>() {
            @Override
            public BindingResourceInner call(ServiceResponse<BindingResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Operation to update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BindingResourceInner object
     */
    public Observable<ServiceResponse<BindingResourceInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String appName, String bindingName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (appName == null) {
            throw new IllegalArgumentException("Parameter appName is required and cannot be null.");
        }
        if (bindingName == null) {
            throw new IllegalArgumentException("Parameter bindingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final BindingResourceProperties properties = null;
        BindingResourceInner bindingResource = new BindingResourceInner();
        bindingResource.withProperties(null);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, serviceName, appName, bindingName, this.client.apiVersion(), this.client.acceptLanguage(), bindingResource, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BindingResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<BindingResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BindingResourceInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Operation to update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param properties Properties of the Binding resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BindingResourceInner object if successful.
     */
    public BindingResourceInner beginUpdate(String resourceGroupName, String serviceName, String appName, String bindingName, BindingResourceProperties properties) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName, properties).toBlocking().single().body();
    }

    /**
     * Operation to update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param properties Properties of the Binding resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BindingResourceInner> beginUpdateAsync(String resourceGroupName, String serviceName, String appName, String bindingName, BindingResourceProperties properties, final ServiceCallback<BindingResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName, properties), serviceCallback);
    }

    /**
     * Operation to update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param properties Properties of the Binding resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BindingResourceInner object
     */
    public Observable<BindingResourceInner> beginUpdateAsync(String resourceGroupName, String serviceName, String appName, String bindingName, BindingResourceProperties properties) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, serviceName, appName, bindingName, properties).map(new Func1<ServiceResponse<BindingResourceInner>, BindingResourceInner>() {
            @Override
            public BindingResourceInner call(ServiceResponse<BindingResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Operation to update an exiting Binding.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param properties Properties of the Binding resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BindingResourceInner object
     */
    public Observable<ServiceResponse<BindingResourceInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String appName, String bindingName, BindingResourceProperties properties) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (appName == null) {
            throw new IllegalArgumentException("Parameter appName is required and cannot be null.");
        }
        if (bindingName == null) {
            throw new IllegalArgumentException("Parameter bindingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        BindingResourceInner bindingResource = new BindingResourceInner();
        bindingResource.withProperties(properties);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, serviceName, appName, bindingName, this.client.apiVersion(), this.client.acceptLanguage(), bindingResource, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BindingResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<BindingResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BindingResourceInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BindingResourceInner> beginUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BindingResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BindingResourceInner>() { }.getType())
                .register(202, new TypeToken<BindingResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Handles requests to list all resources in an App.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BindingResourceInner&gt; object if successful.
     */
    public PagedList<BindingResourceInner> list(final String resourceGroupName, final String serviceName, final String appName) {
        ServiceResponse<Page<BindingResourceInner>> response = listSinglePageAsync(resourceGroupName, serviceName, appName).toBlocking().single();
        return new PagedList<BindingResourceInner>(response.body()) {
            @Override
            public Page<BindingResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Handles requests to list all resources in an App.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BindingResourceInner>> listAsync(final String resourceGroupName, final String serviceName, final String appName, final ListOperationCallback<BindingResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, serviceName, appName),
            new Func1<String, Observable<ServiceResponse<Page<BindingResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BindingResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Handles requests to list all resources in an App.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BindingResourceInner&gt; object
     */
    public Observable<Page<BindingResourceInner>> listAsync(final String resourceGroupName, final String serviceName, final String appName) {
        return listWithServiceResponseAsync(resourceGroupName, serviceName, appName)
            .map(new Func1<ServiceResponse<Page<BindingResourceInner>>, Page<BindingResourceInner>>() {
                @Override
                public Page<BindingResourceInner> call(ServiceResponse<Page<BindingResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Handles requests to list all resources in an App.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BindingResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<BindingResourceInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String appName) {
        return listSinglePageAsync(resourceGroupName, serviceName, appName)
            .concatMap(new Func1<ServiceResponse<Page<BindingResourceInner>>, Observable<ServiceResponse<Page<BindingResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BindingResourceInner>>> call(ServiceResponse<Page<BindingResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Handles requests to list all resources in an App.
     *
    ServiceResponse<PageImpl<BindingResourceInner>> * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
    ServiceResponse<PageImpl<BindingResourceInner>> * @param serviceName The name of the Service resource.
    ServiceResponse<PageImpl<BindingResourceInner>> * @param appName The name of the App resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BindingResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BindingResourceInner>>> listSinglePageAsync(final String resourceGroupName, final String serviceName, final String appName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (appName == null) {
            throw new IllegalArgumentException("Parameter appName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroupName, serviceName, appName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BindingResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BindingResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BindingResourceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BindingResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BindingResourceInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BindingResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BindingResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Handles requests to list all resources in an App.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BindingResourceInner&gt; object if successful.
     */
    public PagedList<BindingResourceInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<BindingResourceInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<BindingResourceInner>(response.body()) {
            @Override
            public Page<BindingResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Handles requests to list all resources in an App.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BindingResourceInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<BindingResourceInner>> serviceFuture, final ListOperationCallback<BindingResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<BindingResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BindingResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Handles requests to list all resources in an App.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BindingResourceInner&gt; object
     */
    public Observable<Page<BindingResourceInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<BindingResourceInner>>, Page<BindingResourceInner>>() {
                @Override
                public Page<BindingResourceInner> call(ServiceResponse<Page<BindingResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Handles requests to list all resources in an App.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BindingResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<BindingResourceInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<BindingResourceInner>>, Observable<ServiceResponse<Page<BindingResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BindingResourceInner>>> call(ServiceResponse<Page<BindingResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Handles requests to list all resources in an App.
     *
    ServiceResponse<PageImpl<BindingResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BindingResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BindingResourceInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BindingResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BindingResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BindingResourceInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BindingResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BindingResourceInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BindingResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BindingResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
