/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.appplatform.v2020_11_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.appplatform.v2020_11_01_preview.MonitoringSettings;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.management.appplatform.v2020_11_01_preview.MonitoringSettingResource;

class MonitoringSettingsImpl extends WrapperImpl<MonitoringSettingsInner> implements MonitoringSettings {
    private final AppPlatformManager manager;

    MonitoringSettingsImpl(AppPlatformManager manager) {
        super(manager.inner().monitoringSettings());
        this.manager = manager;
    }

    public AppPlatformManager manager() {
        return this.manager;
    }

    @Override
    public Observable<MonitoringSettingResource> getAsync(String resourceGroupName, String serviceName) {
        MonitoringSettingsInner client = this.inner();
        return client.getAsync(resourceGroupName, serviceName)
        .map(new Func1<MonitoringSettingResourceInner, MonitoringSettingResource>() {
            @Override
            public MonitoringSettingResource call(MonitoringSettingResourceInner inner) {
                return new MonitoringSettingResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MonitoringSettingResource> updatePutAsync(String resourceGroupName, String serviceName) {
        MonitoringSettingsInner client = this.inner();
        return client.updatePutAsync(resourceGroupName, serviceName)
        .map(new Func1<MonitoringSettingResourceInner, MonitoringSettingResource>() {
            @Override
            public MonitoringSettingResource call(MonitoringSettingResourceInner inner) {
                return new MonitoringSettingResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MonitoringSettingResource> updatePatchAsync(String resourceGroupName, String serviceName) {
        MonitoringSettingsInner client = this.inner();
        return client.updatePatchAsync(resourceGroupName, serviceName)
        .map(new Func1<MonitoringSettingResourceInner, MonitoringSettingResource>() {
            @Override
            public MonitoringSettingResource call(MonitoringSettingResourceInner inner) {
                return new MonitoringSettingResourceImpl(inner, manager());
            }
        });
    }

}
