/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appplatform.v2020_07_01;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Property of git.
 */
public class ConfigServerGitProperty {
    /**
     * Repositories of git.
     */
    @JsonProperty(value = "repositories")
    private List<GitPatternRepository> repositories;

    /**
     * URI of the repository.
     */
    @JsonProperty(value = "uri", required = true)
    private String uri;

    /**
     * Label of the repository.
     */
    @JsonProperty(value = "label")
    private String label;

    /**
     * Searching path of the repository.
     */
    @JsonProperty(value = "searchPaths")
    private List<String> searchPaths;

    /**
     * Username of git repository basic auth.
     */
    @JsonProperty(value = "username")
    private String username;

    /**
     * Password of git repository basic auth.
     */
    @JsonProperty(value = "password")
    private String password;

    /**
     * Public sshKey of git repository.
     */
    @JsonProperty(value = "hostKey")
    private String hostKey;

    /**
     * SshKey algorithm of git repository.
     */
    @JsonProperty(value = "hostKeyAlgorithm")
    private String hostKeyAlgorithm;

    /**
     * Private sshKey algorithm of git repository.
     */
    @JsonProperty(value = "privateKey")
    private String privateKey;

    /**
     * Strict host key checking or not.
     */
    @JsonProperty(value = "strictHostKeyChecking")
    private Boolean strictHostKeyChecking;

    /**
     * Get repositories of git.
     *
     * @return the repositories value
     */
    public List<GitPatternRepository> repositories() {
        return this.repositories;
    }

    /**
     * Set repositories of git.
     *
     * @param repositories the repositories value to set
     * @return the ConfigServerGitProperty object itself.
     */
    public ConfigServerGitProperty withRepositories(List<GitPatternRepository> repositories) {
        this.repositories = repositories;
        return this;
    }

    /**
     * Get uRI of the repository.
     *
     * @return the uri value
     */
    public String uri() {
        return this.uri;
    }

    /**
     * Set uRI of the repository.
     *
     * @param uri the uri value to set
     * @return the ConfigServerGitProperty object itself.
     */
    public ConfigServerGitProperty withUri(String uri) {
        this.uri = uri;
        return this;
    }

    /**
     * Get label of the repository.
     *
     * @return the label value
     */
    public String label() {
        return this.label;
    }

    /**
     * Set label of the repository.
     *
     * @param label the label value to set
     * @return the ConfigServerGitProperty object itself.
     */
    public ConfigServerGitProperty withLabel(String label) {
        this.label = label;
        return this;
    }

    /**
     * Get searching path of the repository.
     *
     * @return the searchPaths value
     */
    public List<String> searchPaths() {
        return this.searchPaths;
    }

    /**
     * Set searching path of the repository.
     *
     * @param searchPaths the searchPaths value to set
     * @return the ConfigServerGitProperty object itself.
     */
    public ConfigServerGitProperty withSearchPaths(List<String> searchPaths) {
        this.searchPaths = searchPaths;
        return this;
    }

    /**
     * Get username of git repository basic auth.
     *
     * @return the username value
     */
    public String username() {
        return this.username;
    }

    /**
     * Set username of git repository basic auth.
     *
     * @param username the username value to set
     * @return the ConfigServerGitProperty object itself.
     */
    public ConfigServerGitProperty withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get password of git repository basic auth.
     *
     * @return the password value
     */
    public String password() {
        return this.password;
    }

    /**
     * Set password of git repository basic auth.
     *
     * @param password the password value to set
     * @return the ConfigServerGitProperty object itself.
     */
    public ConfigServerGitProperty withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Get public sshKey of git repository.
     *
     * @return the hostKey value
     */
    public String hostKey() {
        return this.hostKey;
    }

    /**
     * Set public sshKey of git repository.
     *
     * @param hostKey the hostKey value to set
     * @return the ConfigServerGitProperty object itself.
     */
    public ConfigServerGitProperty withHostKey(String hostKey) {
        this.hostKey = hostKey;
        return this;
    }

    /**
     * Get sshKey algorithm of git repository.
     *
     * @return the hostKeyAlgorithm value
     */
    public String hostKeyAlgorithm() {
        return this.hostKeyAlgorithm;
    }

    /**
     * Set sshKey algorithm of git repository.
     *
     * @param hostKeyAlgorithm the hostKeyAlgorithm value to set
     * @return the ConfigServerGitProperty object itself.
     */
    public ConfigServerGitProperty withHostKeyAlgorithm(String hostKeyAlgorithm) {
        this.hostKeyAlgorithm = hostKeyAlgorithm;
        return this;
    }

    /**
     * Get private sshKey algorithm of git repository.
     *
     * @return the privateKey value
     */
    public String privateKey() {
        return this.privateKey;
    }

    /**
     * Set private sshKey algorithm of git repository.
     *
     * @param privateKey the privateKey value to set
     * @return the ConfigServerGitProperty object itself.
     */
    public ConfigServerGitProperty withPrivateKey(String privateKey) {
        this.privateKey = privateKey;
        return this;
    }

    /**
     * Get strict host key checking or not.
     *
     * @return the strictHostKeyChecking value
     */
    public Boolean strictHostKeyChecking() {
        return this.strictHostKeyChecking;
    }

    /**
     * Set strict host key checking or not.
     *
     * @param strictHostKeyChecking the strictHostKeyChecking value to set
     * @return the ConfigServerGitProperty object itself.
     */
    public ConfigServerGitProperty withStrictHostKeyChecking(Boolean strictHostKeyChecking) {
        this.strictHostKeyChecking = strictHostKeyChecking;
        return this;
    }

}
