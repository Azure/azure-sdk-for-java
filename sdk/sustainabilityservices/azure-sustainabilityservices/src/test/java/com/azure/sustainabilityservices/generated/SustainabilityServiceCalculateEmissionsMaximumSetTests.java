// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.sustainabilityservices.generated;

import com.azure.sustainabilityservices.models.ActivityEmissionOutput;
import com.azure.sustainabilityservices.models.ArVersions;
import com.azure.sustainabilityservices.models.CalculationErrorDetails;
import com.azure.sustainabilityservices.models.CalculationStatusEnum;
import com.azure.sustainabilityservices.models.CalculationSummary;
import com.azure.sustainabilityservices.models.EmissionActivity;
import com.azure.sustainabilityservices.models.EmissionCalculationResult;
import com.azure.sustainabilityservices.models.GhgEmissions;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class SustainabilityServiceCalculateEmissionsMaximumSetTests extends SustainabilityServiceClientTestBase {
    @Test
    @Disabled
    public void testSustainabilityServiceCalculateEmissionsMaximumSetTests() {
        // method invocation
        EmissionCalculationResult response = sustainabilityServiceClient.calculate(
            "b7baa418-08be-430b-ae46-769cfdf91949", Arrays.asList(new EmissionActivity(mapOf())),
            OffsetDateTime.parse("2025-03-05T07:25:40.609Z"), ArVersions.CUSTOM);

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "summary"
        CalculationSummary responseSummary = response.getSummary();
        Assertions.assertNotNull(responseSummary);
        Assertions.assertEquals(CalculationStatusEnum.SUCCEEDED, responseSummary.getStatus());
        Assertions.assertEquals(6L, responseSummary.getSuccessfulActivities());
        Assertions.assertEquals(12L, responseSummary.getFailedActivities());
        Assertions.assertEquals(1L, responseSummary.getExcludedActivities());
        Assertions.assertEquals(9L, responseSummary.getProcessedActivities());
        // verify property "errorDetails"
        List<CalculationErrorDetails> responseErrorDetails = response.getErrorDetails();
        CalculationErrorDetails responseErrorDetailsFirstItem = responseErrorDetails.iterator().next();
        Assertions.assertNotNull(responseErrorDetailsFirstItem);
        Assertions.assertEquals("b7baa418-08be-430b-ae46-769cfdf91949", responseErrorDetailsFirstItem.getActivityId());
        Assertions.assertEquals("agxovdvljfxgsxvtyf", responseErrorDetailsFirstItem.getActivityName());
        Assertions.assertEquals("wgyz", responseErrorDetailsFirstItem.getMessage());
        Assertions.assertEquals("liryrrxbbgxkavfmjfcwjtrjluqg", responseErrorDetailsFirstItem.getCode());
        // verify property "activityEmissionOutput"
        List<ActivityEmissionOutput> responseActivityEmissionOutput = response.getActivityEmissionOutput();
        ActivityEmissionOutput responseActivityEmissionOutputFirstItem
            = responseActivityEmissionOutput.iterator().next();
        Assertions.assertNotNull(responseActivityEmissionOutputFirstItem);
        Assertions.assertEquals("b7baa418-08be-430b-ae46-769cfdf91949",
            responseActivityEmissionOutputFirstItem.getId());
        List<GhgEmissions> responseActivityEmissionOutputFirstItemEmissions
            = responseActivityEmissionOutputFirstItem.getEmissions();
        GhgEmissions responseActivityEmissionOutputFirstItemEmissionsFirstItem
            = responseActivityEmissionOutputFirstItemEmissions.iterator().next();
        Assertions.assertNotNull(responseActivityEmissionOutputFirstItemEmissionsFirstItem);
        Assertions.assertEquals(9.0D, responseActivityEmissionOutputFirstItemEmissionsFirstItem.getCh4());
        Assertions.assertEquals("tbdfmm", responseActivityEmissionOutputFirstItemEmissionsFirstItem.getCh4Unit());
        Assertions.assertEquals(17.0D, responseActivityEmissionOutputFirstItemEmissionsFirstItem.getCo2());
        Assertions.assertEquals("gnxxtgszgon", responseActivityEmissionOutputFirstItemEmissionsFirstItem.getCo2Unit());
        Assertions.assertEquals(5.0D, responseActivityEmissionOutputFirstItemEmissionsFirstItem.getCo2e());
        Assertions.assertEquals("owepcjpaoxlmkpstpofkcjwg",
            responseActivityEmissionOutputFirstItemEmissionsFirstItem.getCo2eUnit());
        Assertions.assertEquals(27.0D, responseActivityEmissionOutputFirstItemEmissionsFirstItem.getCo2emt());
        Assertions.assertEquals(17.0D, responseActivityEmissionOutputFirstItemEmissionsFirstItem.getHfcs());
        Assertions.assertEquals("lrnesztablxhxymmusywxswgpxpx",
            responseActivityEmissionOutputFirstItemEmissionsFirstItem.getHfcsUnit());
        Assertions.assertEquals(11.0D, responseActivityEmissionOutputFirstItemEmissionsFirstItem.getN2o());
        Assertions.assertEquals("fczxflvwikmymdfttjfwhvenwz",
            responseActivityEmissionOutputFirstItemEmissionsFirstItem.getN2oUnit());
        Assertions.assertEquals(1.0D, responseActivityEmissionOutputFirstItemEmissionsFirstItem.getNf3());
        Assertions.assertEquals("xctbgnnxeqiijmjmsocfvqxds",
            responseActivityEmissionOutputFirstItemEmissionsFirstItem.getNf3Unit());
        Assertions.assertEquals(5.0D, responseActivityEmissionOutputFirstItemEmissionsFirstItem.getPfcs());
        Assertions.assertEquals("vbdvqpbxrxovj",
            responseActivityEmissionOutputFirstItemEmissionsFirstItem.getPfcsUnit());
        Assertions.assertEquals(1.0D, responseActivityEmissionOutputFirstItemEmissionsFirstItem.getOtherGhgs());
        Assertions.assertEquals("nnghkaxryvazxcnkfgqikrggwfzb",
            responseActivityEmissionOutputFirstItemEmissionsFirstItem.getOtherGhgsUnit());
        Assertions.assertEquals(11.0D, responseActivityEmissionOutputFirstItemEmissionsFirstItem.getSf6());
        Assertions.assertEquals("djgebfbyzjgfxslhhmvipd",
            responseActivityEmissionOutputFirstItemEmissionsFirstItem.getSf6Unit());
        Assertions.assertEquals(true, responseActivityEmissionOutputFirstItemEmissionsFirstItem.isMarketBased());
        Assertions.assertEquals(true, responseActivityEmissionOutputFirstItemEmissionsFirstItem.isBiogenic());
        Assertions.assertEquals("rf",
            responseActivityEmissionOutputFirstItemEmissionsFirstItem.getEmissionCalculationModel());
        Assertions.assertEquals("xcoypozdrjrgqyyrfotonpkobua",
            responseActivityEmissionOutputFirstItemEmissionsFirstItem.getCalculationLibrary());
        Assertions.assertEquals("shfuzrdkggeabfwxpj",
            responseActivityEmissionOutputFirstItemEmissionsFirstItem.getEmissionFactor());
        Assertions.assertEquals("nmeqfk",
            responseActivityEmissionOutputFirstItemEmissionsFirstItem.getAdjustedActualQuantity());
        Assertions.assertEquals("wpcobpvcffibmmmvrqwolvdpgoijl",
            responseActivityEmissionOutputFirstItemEmissionsFirstItem.getAdjustedActualQuantityUnit());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
