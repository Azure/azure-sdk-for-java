// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.sustainabilityservices.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Reference data.
 */
@Immutable
public final class ReferenceDataEntities implements JsonSerializable<ReferenceDataEntities> {
    /*
     * Logical name of the entity. Example: fueltype.
     */
    @Generated
    private String entityName;

    /*
     * Display name of the entity. Example: Fuel Type.
     */
    @Generated
    private final String displayName;

    /*
     * Schema name of the entity.
     */
    @Generated
    private final String schemaName;

    /**
     * Creates an instance of ReferenceDataEntities class.
     * 
     * @param displayName the displayName value to set.
     * @param schemaName the schemaName value to set.
     */
    @Generated
    private ReferenceDataEntities(String displayName, String schemaName) {
        this.displayName = displayName;
        this.schemaName = schemaName;
    }

    /**
     * Get the entityName property: Logical name of the entity. Example: fueltype.
     * 
     * @return the entityName value.
     */
    @Generated
    public String getEntityName() {
        return this.entityName;
    }

    /**
     * Get the displayName property: Display name of the entity. Example: Fuel Type.
     * 
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Get the schemaName property: Schema name of the entity.
     * 
     * @return the schemaName value.
     */
    @Generated
    public String getSchemaName() {
        return this.schemaName;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("schemaName", this.schemaName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReferenceDataEntities from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReferenceDataEntities if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ReferenceDataEntities.
     */
    @Generated
    public static ReferenceDataEntities fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String entityName = null;
            String displayName = null;
            String schemaName = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("entityName".equals(fieldName)) {
                    entityName = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    displayName = reader.getString();
                } else if ("schemaName".equals(fieldName)) {
                    schemaName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ReferenceDataEntities deserializedReferenceDataEntities
                = new ReferenceDataEntities(displayName, schemaName);
            deserializedReferenceDataEntities.entityName = entityName;

            return deserializedReferenceDataEntities;
        });
    }
}
