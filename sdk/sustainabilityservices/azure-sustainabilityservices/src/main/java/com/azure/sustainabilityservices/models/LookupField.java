// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.sustainabilityservices.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Lookup details.
 */
@Immutable
public final class LookupField implements JsonSerializable<LookupField> {
    /*
     * Unique ID of the referenced field value.
     */
    @Generated
    private final String id;

    /*
     * Schema name of the referenced table.
     */
    @Generated
    private final String logicalName;

    /*
     * Display name of the referenced field value.
     */
    @Generated
    private final String name;

    /*
     * Key attributes of the referenced field.
     */
    @Generated
    private final Map<String, BinaryData> keyAttributes;

    /*
     * Row version.
     */
    @Generated
    private final String rowVersion;

    /**
     * Creates an instance of LookupField class.
     * 
     * @param id the id value to set.
     * @param logicalName the logicalName value to set.
     * @param name the name value to set.
     * @param keyAttributes the keyAttributes value to set.
     * @param rowVersion the rowVersion value to set.
     */
    @Generated
    private LookupField(String id, String logicalName, String name, Map<String, BinaryData> keyAttributes,
        String rowVersion) {
        this.id = id;
        this.logicalName = logicalName;
        this.name = name;
        this.keyAttributes = keyAttributes;
        this.rowVersion = rowVersion;
    }

    /**
     * Get the id property: Unique ID of the referenced field value.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the logicalName property: Schema name of the referenced table.
     * 
     * @return the logicalName value.
     */
    @Generated
    public String getLogicalName() {
        return this.logicalName;
    }

    /**
     * Get the name property: Display name of the referenced field value.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the keyAttributes property: Key attributes of the referenced field.
     * 
     * @return the keyAttributes value.
     */
    @Generated
    public Map<String, BinaryData> getKeyAttributes() {
        return this.keyAttributes;
    }

    /**
     * Get the rowVersion property: Row version.
     * 
     * @return the rowVersion value.
     */
    @Generated
    public String getRowVersion() {
        return this.rowVersion;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("logicalName", this.logicalName);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeMapField("keyAttributes", this.keyAttributes,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeStringField("rowVersion", this.rowVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LookupField from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LookupField if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LookupField.
     */
    @Generated
    public static LookupField fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String logicalName = null;
            String name = null;
            Map<String, BinaryData> keyAttributes = null;
            String rowVersion = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("logicalName".equals(fieldName)) {
                    logicalName = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("keyAttributes".equals(fieldName)) {
                    keyAttributes = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("rowVersion".equals(fieldName)) {
                    rowVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new LookupField(id, logicalName, name, keyAttributes, rowVersion);
        });
    }
}
