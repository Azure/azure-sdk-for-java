// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.sustainabilityservices.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Entity record.
 */
@Immutable
public final class EntityRecord implements JsonSerializable<EntityRecord> {
    /*
     * Record ID.
     */
    @Generated
    private String id;

    /*
     * Entity data.
     */
    @Generated
    private final Map<String, BinaryData> data;

    /**
     * Creates an instance of EntityRecord class.
     * 
     * @param data the data value to set.
     */
    @Generated
    private EntityRecord(Map<String, BinaryData> data) {
        this.data = data;
    }

    /**
     * Get the id property: Record ID.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the data property: Entity data.
     * 
     * @return the data value.
     */
    @Generated
    public Map<String, BinaryData> getData() {
        return this.data;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("data", this.data,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EntityRecord from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EntityRecord if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EntityRecord.
     */
    @Generated
    public static EntityRecord fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            Map<String, BinaryData> data = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("data".equals(fieldName)) {
                    data = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else {
                    reader.skipChildren();
                }
            }
            EntityRecord deserializedEntityRecord = new EntityRecord(data);
            deserializedEntityRecord.id = id;

            return deserializedEntityRecord;
        });
    }
}
