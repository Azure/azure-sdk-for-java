// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.sustainabilityservices.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The output of a calculation.
 */
@Immutable
public final class EmissionCalculationResult implements JsonSerializable<EmissionCalculationResult> {
    /*
     * Calculation summary.
     */
    @Generated
    private final CalculationSummary summary;

    /*
     * Calculation error details.
     */
    @Generated
    private final List<CalculationErrorDetails> errorDetails;

    /*
     * Calculated emissions from the activities.
     */
    @Generated
    private final List<ActivityEmissionOutput> activityEmissionOutput;

    /**
     * Creates an instance of EmissionCalculationResult class.
     * 
     * @param summary the summary value to set.
     * @param errorDetails the errorDetails value to set.
     * @param activityEmissionOutput the activityEmissionOutput value to set.
     */
    @Generated
    private EmissionCalculationResult(CalculationSummary summary, List<CalculationErrorDetails> errorDetails,
        List<ActivityEmissionOutput> activityEmissionOutput) {
        this.summary = summary;
        this.errorDetails = errorDetails;
        this.activityEmissionOutput = activityEmissionOutput;
    }

    /**
     * Get the summary property: Calculation summary.
     * 
     * @return the summary value.
     */
    @Generated
    public CalculationSummary getSummary() {
        return this.summary;
    }

    /**
     * Get the errorDetails property: Calculation error details.
     * 
     * @return the errorDetails value.
     */
    @Generated
    public List<CalculationErrorDetails> getErrorDetails() {
        return this.errorDetails;
    }

    /**
     * Get the activityEmissionOutput property: Calculated emissions from the activities.
     * 
     * @return the activityEmissionOutput value.
     */
    @Generated
    public List<ActivityEmissionOutput> getActivityEmissionOutput() {
        return this.activityEmissionOutput;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("summary", this.summary);
        jsonWriter.writeArrayField("errorDetails", this.errorDetails, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("activityEmissionOutput", this.activityEmissionOutput,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EmissionCalculationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EmissionCalculationResult if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EmissionCalculationResult.
     */
    @Generated
    public static EmissionCalculationResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CalculationSummary summary = null;
            List<CalculationErrorDetails> errorDetails = null;
            List<ActivityEmissionOutput> activityEmissionOutput = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("summary".equals(fieldName)) {
                    summary = CalculationSummary.fromJson(reader);
                } else if ("errorDetails".equals(fieldName)) {
                    errorDetails = reader.readArray(reader1 -> CalculationErrorDetails.fromJson(reader1));
                } else if ("activityEmissionOutput".equals(fieldName)) {
                    activityEmissionOutput = reader.readArray(reader1 -> ActivityEmissionOutput.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new EmissionCalculationResult(summary, errorDetails, activityEmissionOutput);
        });
    }
}
