// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.sustainabilityservices.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.UrlBuilder;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.sustainabilityservices.SustainabilityServicesServiceVersion;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the SustainabilityServiceClient type.
 */
public final class SustainabilityServiceClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SustainabilityServiceClientService service;

    /**
     */
    private final String endpoint;

    /**
     * Gets.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final SustainabilityServicesServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public SustainabilityServicesServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of SustainabilityServiceClient client.
     * 
     * @param endpoint
     * @param serviceVersion Service version.
     */
    public SustainabilityServiceClientImpl(String endpoint, SustainabilityServicesServiceVersion serviceVersion) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of SustainabilityServiceClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint
     * @param serviceVersion Service version.
     */
    public SustainabilityServiceClientImpl(HttpPipeline httpPipeline, String endpoint,
        SustainabilityServicesServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of SustainabilityServiceClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint
     * @param serviceVersion Service version.
     */
    public SustainabilityServiceClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter,
        String endpoint, SustainabilityServicesServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(SustainabilityServiceClientService.class, this.httpPipeline,
            this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for SustainabilityServiceClient to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "SustainabilityServic")
    public interface SustainabilityServiceClientService {
        @Get("/factor-libraries")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listFactorLibraries(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/factor-libraries")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listFactorLibrariesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/factor-libraries/{factorLibraryId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getFactorLibrary(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("factorLibraryId") String factorLibraryId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/factor-libraries/{factorLibraryId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getFactorLibrarySync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("factorLibraryId") String factorLibraryId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/factor-libraries/{factorLibraryId}/estimation-factors")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listEstimationFactorsByFactorLibrary(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("factorLibraryId") String factorLibraryId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/factor-libraries/{factorLibraryId}/estimation-factors")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listEstimationFactorsByFactorLibrarySync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("factorLibraryId") String factorLibraryId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/factor-libraries/{factorLibraryId}/estimation-factors/{estimationFactorId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getEstimationFactor(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("factorLibraryId") String factorLibraryId,
            @PathParam("estimationFactorId") String estimationFactorId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/factor-libraries/{factorLibraryId}/estimation-factors/{estimationFactorId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getEstimationFactorSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("factorLibraryId") String factorLibraryId,
            @PathParam("estimationFactorId") String estimationFactorId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/factor-libraries/{factorLibraryId}/emission-factors")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listEmissionFactorsByFactorLibrary(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("factorLibraryId") String factorLibraryId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/factor-libraries/{factorLibraryId}/emission-factors")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listEmissionFactorsByFactorLibrarySync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("factorLibraryId") String factorLibraryId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/factor-libraries/{factorLibraryId}/emission-factors/{emissionFactorId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getEmissionFactor(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("factorLibraryId") String factorLibraryId,
            @PathParam("emissionFactorId") String emissionFactorId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/factor-libraries/{factorLibraryId}/emission-factors/{emissionFactorId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getEmissionFactorSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("factorLibraryId") String factorLibraryId,
            @PathParam("emissionFactorId") String emissionFactorId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/factor-libraries/{factorLibraryId}/factor-mappings")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listFactorMappings(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("factorLibraryId") String factorLibraryId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/factor-libraries/{factorLibraryId}/factor-mappings")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listFactorMappingsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("factorLibraryId") String factorLibraryId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/factor-libraries/{factorLibraryId}/factor-mappings/{factorMappingId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getFactorMapping(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("factorLibraryId") String factorLibraryId,
            @PathParam("factorMappingId") String factorMappingId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/factor-libraries/{factorLibraryId}/factor-mappings/{factorMappingId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getFactorMappingSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("factorLibraryId") String factorLibraryId,
            @PathParam("factorMappingId") String factorMappingId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/calculation-models")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listCalculationModels(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/calculation-models")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listCalculationModelsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/calculation-models/{calculationModelId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getCalculationModel(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("calculationModelId") String calculationModelId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/calculation-models/{calculationModelId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getCalculationModelSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("calculationModelId") String calculationModelId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/reference-data")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listReferenceEntities(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/reference-data")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listReferenceEntitiesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/reference-data/{entityName}/entity-records")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listReferenceEntityRecords(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("entityName") String entityName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/reference-data/{entityName}/entity-records")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listReferenceEntityRecordsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("entityName") String entityName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/reference-data/{entityName}/entity-records/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getReferenceEntityRecords(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("entityName") String entityName,
            @PathParam("id") String id, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/reference-data/{entityName}/entity-records/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getReferenceEntityRecordsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("entityName") String entityName,
            @PathParam("id") String id, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Post("/activities:calculate")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> calculate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData calculateRequest,
            RequestOptions requestOptions, Context context);

        @Post("/activities:calculate")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> calculateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData calculateRequest,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listFactorLibrariesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listFactorLibrariesNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listEstimationFactorsByFactorLibraryNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listEstimationFactorsByFactorLibraryNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listEmissionFactorsByFactorLibraryNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listEmissionFactorsByFactorLibraryNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listFactorMappingsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listFactorMappingsNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listCalculationModelsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listCalculationModelsNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listReferenceEntitiesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listReferenceEntitiesNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listReferenceEntityRecordsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listReferenceEntityRecordsNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Lists factor libraries.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     factorLibraryId: String (Required)
     *     name: String (Required)
     *     libraryType: String (Required)
     *     attribution: String (Optional)
     *     version: String (Optional)
     *     description: String (Optional)
     *     datePublished: String (Optional)
     *     documentationReference: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of FactorLibrary items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listFactorLibrariesSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listFactorLibraries(this.getEndpoint(),
                this.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Lists factor libraries.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     factorLibraryId: String (Required)
     *     name: String (Required)
     *     libraryType: String (Required)
     *     attribution: String (Optional)
     *     version: String (Optional)
     *     description: String (Optional)
     *     datePublished: String (Optional)
     *     documentationReference: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of FactorLibrary items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listFactorLibrariesAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listFactorLibrariesSinglePageAsync(requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listFactorLibrariesNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Lists factor libraries.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     factorLibraryId: String (Required)
     *     name: String (Required)
     *     libraryType: String (Required)
     *     attribution: String (Optional)
     *     version: String (Optional)
     *     description: String (Optional)
     *     datePublished: String (Optional)
     *     documentationReference: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of FactorLibrary items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listFactorLibrariesSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listFactorLibrariesSync(this.getEndpoint(),
            this.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Lists factor libraries.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     factorLibraryId: String (Required)
     *     name: String (Required)
     *     libraryType: String (Required)
     *     attribution: String (Optional)
     *     version: String (Optional)
     *     description: String (Optional)
     *     datePublished: String (Optional)
     *     documentationReference: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of FactorLibrary items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listFactorLibraries(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listFactorLibrariesSinglePage(requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listFactorLibrariesNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Gets factor library by id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     factorLibraryId: String (Required)
     *     name: String (Required)
     *     libraryType: String (Required)
     *     attribution: String (Optional)
     *     version: String (Optional)
     *     description: String (Optional)
     *     datePublished: String (Optional)
     *     documentationReference: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param factorLibraryId Factor library id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return factor library by id along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getFactorLibraryWithResponseAsync(String factorLibraryId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getFactorLibrary(this.getEndpoint(),
            this.getServiceVersion().getVersion(), factorLibraryId, accept, requestOptions, context));
    }

    /**
     * Gets factor library by id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     factorLibraryId: String (Required)
     *     name: String (Required)
     *     libraryType: String (Required)
     *     attribution: String (Optional)
     *     version: String (Optional)
     *     description: String (Optional)
     *     datePublished: String (Optional)
     *     documentationReference: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param factorLibraryId Factor library id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return factor library by id along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getFactorLibraryWithResponse(String factorLibraryId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getFactorLibrarySync(this.getEndpoint(), this.getServiceVersion().getVersion(), factorLibraryId,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Lists estimation factors within the given factor library id.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     id: String (Required)
     *     documentationReference: String (Optional)
     *     estimationFactorId: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     factorValue: double (Required)
     *     factorValueUnit (Required): (recursive schema, see factorValueUnit above)
     *     name: String (Required)
     *     subtype: String (Optional)
     *     type: String (Optional)
     *     unit (Required): (recursive schema, see unit above)
     * }
     * }
     * </pre>
     * 
     * @param factorLibraryId Factor library id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EstimationFactor items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listEstimationFactorsByFactorLibrarySinglePageAsync(String factorLibraryId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listEstimationFactorsByFactorLibrary(this.getEndpoint(),
                this.getServiceVersion().getVersion(), factorLibraryId, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Lists estimation factors within the given factor library id.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     id: String (Required)
     *     documentationReference: String (Optional)
     *     estimationFactorId: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     factorValue: double (Required)
     *     factorValueUnit (Required): (recursive schema, see factorValueUnit above)
     *     name: String (Required)
     *     subtype: String (Optional)
     *     type: String (Optional)
     *     unit (Required): (recursive schema, see unit above)
     * }
     * }
     * </pre>
     * 
     * @param factorLibraryId Factor library id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EstimationFactor items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listEstimationFactorsByFactorLibraryAsync(String factorLibraryId,
        RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listEstimationFactorsByFactorLibrarySinglePageAsync(factorLibraryId, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listEstimationFactorsByFactorLibraryNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Lists estimation factors within the given factor library id.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     id: String (Required)
     *     documentationReference: String (Optional)
     *     estimationFactorId: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     factorValue: double (Required)
     *     factorValueUnit (Required): (recursive schema, see factorValueUnit above)
     *     name: String (Required)
     *     subtype: String (Optional)
     *     type: String (Optional)
     *     unit (Required): (recursive schema, see unit above)
     * }
     * }
     * </pre>
     * 
     * @param factorLibraryId Factor library id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EstimationFactor items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listEstimationFactorsByFactorLibrarySinglePage(String factorLibraryId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listEstimationFactorsByFactorLibrarySync(this.getEndpoint(),
            this.getServiceVersion().getVersion(), factorLibraryId, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Lists estimation factors within the given factor library id.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     id: String (Required)
     *     documentationReference: String (Optional)
     *     estimationFactorId: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     factorValue: double (Required)
     *     factorValueUnit (Required): (recursive schema, see factorValueUnit above)
     *     name: String (Required)
     *     subtype: String (Optional)
     *     type: String (Optional)
     *     unit (Required): (recursive schema, see unit above)
     * }
     * }
     * </pre>
     * 
     * @param factorLibraryId Factor library id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EstimationFactor items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listEstimationFactorsByFactorLibrary(String factorLibraryId,
        RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listEstimationFactorsByFactorLibrarySinglePage(factorLibraryId, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listEstimationFactorsByFactorLibraryNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Gets estimation factor by id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     id: String (Required)
     *     documentationReference: String (Optional)
     *     estimationFactorId: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     factorValue: double (Required)
     *     factorValueUnit (Required): (recursive schema, see factorValueUnit above)
     *     name: String (Required)
     *     subtype: String (Optional)
     *     type: String (Optional)
     *     unit (Required): (recursive schema, see unit above)
     * }
     * }
     * </pre>
     * 
     * @param factorLibraryId Factor library id.
     * @param estimationFactorId Estimation factor ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return estimation factor by id along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getEstimationFactorWithResponseAsync(String factorLibraryId,
        String estimationFactorId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.getEstimationFactor(this.getEndpoint(), this.getServiceVersion().getVersion(),
                factorLibraryId, estimationFactorId, accept, requestOptions, context));
    }

    /**
     * Gets estimation factor by id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     id: String (Required)
     *     documentationReference: String (Optional)
     *     estimationFactorId: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     factorValue: double (Required)
     *     factorValueUnit (Required): (recursive schema, see factorValueUnit above)
     *     name: String (Required)
     *     subtype: String (Optional)
     *     type: String (Optional)
     *     unit (Required): (recursive schema, see unit above)
     * }
     * }
     * </pre>
     * 
     * @param factorLibraryId Factor library id.
     * @param estimationFactorId Estimation factor ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return estimation factor by id along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getEstimationFactorWithResponse(String factorLibraryId, String estimationFactorId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getEstimationFactorSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            factorLibraryId, estimationFactorId, accept, requestOptions, Context.NONE);
    }

    /**
     * Lists emission factors within the given factor library id.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     ch4: Double (Optional)
     *     ch4Unit (Optional): (recursive schema, see ch4Unit above)
     *     co2: Double (Optional)
     *     co2Unit (Optional): (recursive schema, see co2Unit above)
     *     co2e: Double (Optional)
     *     co2eUnit (Optional): (recursive schema, see co2eUnit above)
     *     documentationReference: String (Optional)
     *     emissionFactorId: String (Required)
     *     id: String (Required)
     *     hfcs: Double (Optional)
     *     hfcsUnit (Optional): (recursive schema, see hfcsUnit above)
     *     isBiofuel: Boolean (Optional)
     *     name: String (Required)
     *     nf3: Double (Optional)
     *     nf3Unit (Optional): (recursive schema, see nf3Unit above)
     *     n2o: Double (Optional)
     *     n2oUnit (Optional): (recursive schema, see n2oUnit above)
     *     otherGhgs: Double (Optional)
     *     otherGhgsUnit (Optional): (recursive schema, see otherGhgsUnit above)
     *     pfcs: Double (Optional)
     *     pfcsUnit (Optional): (recursive schema, see pfcsUnit above)
     *     sf6: Double (Optional)
     *     sf6Unit (Optional): (recursive schema, see sf6Unit above)
     *     subtype: String (Optional)
     *     type: String (Optional)
     *     unit (Optional): (recursive schema, see unit above)
     * }
     * }
     * </pre>
     * 
     * @param factorLibraryId Factor library id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EmissionFactor items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listEmissionFactorsByFactorLibrarySinglePageAsync(String factorLibraryId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listEmissionFactorsByFactorLibrary(this.getEndpoint(),
                this.getServiceVersion().getVersion(), factorLibraryId, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Lists emission factors within the given factor library id.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     ch4: Double (Optional)
     *     ch4Unit (Optional): (recursive schema, see ch4Unit above)
     *     co2: Double (Optional)
     *     co2Unit (Optional): (recursive schema, see co2Unit above)
     *     co2e: Double (Optional)
     *     co2eUnit (Optional): (recursive schema, see co2eUnit above)
     *     documentationReference: String (Optional)
     *     emissionFactorId: String (Required)
     *     id: String (Required)
     *     hfcs: Double (Optional)
     *     hfcsUnit (Optional): (recursive schema, see hfcsUnit above)
     *     isBiofuel: Boolean (Optional)
     *     name: String (Required)
     *     nf3: Double (Optional)
     *     nf3Unit (Optional): (recursive schema, see nf3Unit above)
     *     n2o: Double (Optional)
     *     n2oUnit (Optional): (recursive schema, see n2oUnit above)
     *     otherGhgs: Double (Optional)
     *     otherGhgsUnit (Optional): (recursive schema, see otherGhgsUnit above)
     *     pfcs: Double (Optional)
     *     pfcsUnit (Optional): (recursive schema, see pfcsUnit above)
     *     sf6: Double (Optional)
     *     sf6Unit (Optional): (recursive schema, see sf6Unit above)
     *     subtype: String (Optional)
     *     type: String (Optional)
     *     unit (Optional): (recursive schema, see unit above)
     * }
     * }
     * </pre>
     * 
     * @param factorLibraryId Factor library id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EmissionFactor items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listEmissionFactorsByFactorLibraryAsync(String factorLibraryId,
        RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listEmissionFactorsByFactorLibrarySinglePageAsync(factorLibraryId, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listEmissionFactorsByFactorLibraryNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Lists emission factors within the given factor library id.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     ch4: Double (Optional)
     *     ch4Unit (Optional): (recursive schema, see ch4Unit above)
     *     co2: Double (Optional)
     *     co2Unit (Optional): (recursive schema, see co2Unit above)
     *     co2e: Double (Optional)
     *     co2eUnit (Optional): (recursive schema, see co2eUnit above)
     *     documentationReference: String (Optional)
     *     emissionFactorId: String (Required)
     *     id: String (Required)
     *     hfcs: Double (Optional)
     *     hfcsUnit (Optional): (recursive schema, see hfcsUnit above)
     *     isBiofuel: Boolean (Optional)
     *     name: String (Required)
     *     nf3: Double (Optional)
     *     nf3Unit (Optional): (recursive schema, see nf3Unit above)
     *     n2o: Double (Optional)
     *     n2oUnit (Optional): (recursive schema, see n2oUnit above)
     *     otherGhgs: Double (Optional)
     *     otherGhgsUnit (Optional): (recursive schema, see otherGhgsUnit above)
     *     pfcs: Double (Optional)
     *     pfcsUnit (Optional): (recursive schema, see pfcsUnit above)
     *     sf6: Double (Optional)
     *     sf6Unit (Optional): (recursive schema, see sf6Unit above)
     *     subtype: String (Optional)
     *     type: String (Optional)
     *     unit (Optional): (recursive schema, see unit above)
     * }
     * }
     * </pre>
     * 
     * @param factorLibraryId Factor library id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EmissionFactor items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listEmissionFactorsByFactorLibrarySinglePage(String factorLibraryId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listEmissionFactorsByFactorLibrarySync(this.getEndpoint(),
            this.getServiceVersion().getVersion(), factorLibraryId, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Lists emission factors within the given factor library id.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     ch4: Double (Optional)
     *     ch4Unit (Optional): (recursive schema, see ch4Unit above)
     *     co2: Double (Optional)
     *     co2Unit (Optional): (recursive schema, see co2Unit above)
     *     co2e: Double (Optional)
     *     co2eUnit (Optional): (recursive schema, see co2eUnit above)
     *     documentationReference: String (Optional)
     *     emissionFactorId: String (Required)
     *     id: String (Required)
     *     hfcs: Double (Optional)
     *     hfcsUnit (Optional): (recursive schema, see hfcsUnit above)
     *     isBiofuel: Boolean (Optional)
     *     name: String (Required)
     *     nf3: Double (Optional)
     *     nf3Unit (Optional): (recursive schema, see nf3Unit above)
     *     n2o: Double (Optional)
     *     n2oUnit (Optional): (recursive schema, see n2oUnit above)
     *     otherGhgs: Double (Optional)
     *     otherGhgsUnit (Optional): (recursive schema, see otherGhgsUnit above)
     *     pfcs: Double (Optional)
     *     pfcsUnit (Optional): (recursive schema, see pfcsUnit above)
     *     sf6: Double (Optional)
     *     sf6Unit (Optional): (recursive schema, see sf6Unit above)
     *     subtype: String (Optional)
     *     type: String (Optional)
     *     unit (Optional): (recursive schema, see unit above)
     * }
     * }
     * </pre>
     * 
     * @param factorLibraryId Factor library id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EmissionFactor items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listEmissionFactorsByFactorLibrary(String factorLibraryId,
        RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listEmissionFactorsByFactorLibrarySinglePage(factorLibraryId, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listEmissionFactorsByFactorLibraryNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Gets emission factor by id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     ch4: Double (Optional)
     *     ch4Unit (Optional): (recursive schema, see ch4Unit above)
     *     co2: Double (Optional)
     *     co2Unit (Optional): (recursive schema, see co2Unit above)
     *     co2e: Double (Optional)
     *     co2eUnit (Optional): (recursive schema, see co2eUnit above)
     *     documentationReference: String (Optional)
     *     emissionFactorId: String (Required)
     *     id: String (Required)
     *     hfcs: Double (Optional)
     *     hfcsUnit (Optional): (recursive schema, see hfcsUnit above)
     *     isBiofuel: Boolean (Optional)
     *     name: String (Required)
     *     nf3: Double (Optional)
     *     nf3Unit (Optional): (recursive schema, see nf3Unit above)
     *     n2o: Double (Optional)
     *     n2oUnit (Optional): (recursive schema, see n2oUnit above)
     *     otherGhgs: Double (Optional)
     *     otherGhgsUnit (Optional): (recursive schema, see otherGhgsUnit above)
     *     pfcs: Double (Optional)
     *     pfcsUnit (Optional): (recursive schema, see pfcsUnit above)
     *     sf6: Double (Optional)
     *     sf6Unit (Optional): (recursive schema, see sf6Unit above)
     *     subtype: String (Optional)
     *     type: String (Optional)
     *     unit (Optional): (recursive schema, see unit above)
     * }
     * }
     * </pre>
     * 
     * @param factorLibraryId Factor library id.
     * @param emissionFactorId Emission factor ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return emission factor by id along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getEmissionFactorWithResponseAsync(String factorLibraryId,
        String emissionFactorId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getEmissionFactor(this.getEndpoint(),
            this.getServiceVersion().getVersion(), factorLibraryId, emissionFactorId, accept, requestOptions, context));
    }

    /**
     * Gets emission factor by id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     ch4: Double (Optional)
     *     ch4Unit (Optional): (recursive schema, see ch4Unit above)
     *     co2: Double (Optional)
     *     co2Unit (Optional): (recursive schema, see co2Unit above)
     *     co2e: Double (Optional)
     *     co2eUnit (Optional): (recursive schema, see co2eUnit above)
     *     documentationReference: String (Optional)
     *     emissionFactorId: String (Required)
     *     id: String (Required)
     *     hfcs: Double (Optional)
     *     hfcsUnit (Optional): (recursive schema, see hfcsUnit above)
     *     isBiofuel: Boolean (Optional)
     *     name: String (Required)
     *     nf3: Double (Optional)
     *     nf3Unit (Optional): (recursive schema, see nf3Unit above)
     *     n2o: Double (Optional)
     *     n2oUnit (Optional): (recursive schema, see n2oUnit above)
     *     otherGhgs: Double (Optional)
     *     otherGhgsUnit (Optional): (recursive schema, see otherGhgsUnit above)
     *     pfcs: Double (Optional)
     *     pfcsUnit (Optional): (recursive schema, see pfcsUnit above)
     *     sf6: Double (Optional)
     *     sf6Unit (Optional): (recursive schema, see sf6Unit above)
     *     subtype: String (Optional)
     *     type: String (Optional)
     *     unit (Optional): (recursive schema, see unit above)
     * }
     * }
     * </pre>
     * 
     * @param factorLibraryId Factor library id.
     * @param emissionFactorId Emission factor ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return emission factor by id along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getEmissionFactorWithResponse(String factorLibraryId, String emissionFactorId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getEmissionFactorSync(this.getEndpoint(), this.getServiceVersion().getVersion(), factorLibraryId,
            emissionFactorId, accept, requestOptions, Context.NONE);
    }

    /**
     * Lists factor mappings belonging to the factor library.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     factorMappingId: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     name: String (Required)
     *     factor (Required): (recursive schema, see factor above)
     *     referenceData1 (Required): (recursive schema, see referenceData1 above)
     *     referenceData2 (Optional): (recursive schema, see referenceData2 above)
     *     referenceData3 (Optional): (recursive schema, see referenceData3 above)
     *     referenceData4 (Optional): (recursive schema, see referenceData4 above)
     * }
     * }
     * </pre>
     * 
     * @param factorLibraryId Factor library id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of FactorMapping items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listFactorMappingsSinglePageAsync(String factorLibraryId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listFactorMappings(this.getEndpoint(),
                this.getServiceVersion().getVersion(), factorLibraryId, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Lists factor mappings belonging to the factor library.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     factorMappingId: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     name: String (Required)
     *     factor (Required): (recursive schema, see factor above)
     *     referenceData1 (Required): (recursive schema, see referenceData1 above)
     *     referenceData2 (Optional): (recursive schema, see referenceData2 above)
     *     referenceData3 (Optional): (recursive schema, see referenceData3 above)
     *     referenceData4 (Optional): (recursive schema, see referenceData4 above)
     * }
     * }
     * </pre>
     * 
     * @param factorLibraryId Factor library id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of FactorMapping items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listFactorMappingsAsync(String factorLibraryId, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listFactorMappingsSinglePageAsync(factorLibraryId, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listFactorMappingsNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Lists factor mappings belonging to the factor library.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     factorMappingId: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     name: String (Required)
     *     factor (Required): (recursive schema, see factor above)
     *     referenceData1 (Required): (recursive schema, see referenceData1 above)
     *     referenceData2 (Optional): (recursive schema, see referenceData2 above)
     *     referenceData3 (Optional): (recursive schema, see referenceData3 above)
     *     referenceData4 (Optional): (recursive schema, see referenceData4 above)
     * }
     * }
     * </pre>
     * 
     * @param factorLibraryId Factor library id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of FactorMapping items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listFactorMappingsSinglePage(String factorLibraryId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listFactorMappingsSync(this.getEndpoint(),
            this.getServiceVersion().getVersion(), factorLibraryId, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Lists factor mappings belonging to the factor library.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     factorMappingId: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     name: String (Required)
     *     factor (Required): (recursive schema, see factor above)
     *     referenceData1 (Required): (recursive schema, see referenceData1 above)
     *     referenceData2 (Optional): (recursive schema, see referenceData2 above)
     *     referenceData3 (Optional): (recursive schema, see referenceData3 above)
     *     referenceData4 (Optional): (recursive schema, see referenceData4 above)
     * }
     * }
     * </pre>
     * 
     * @param factorLibraryId Factor library id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of FactorMapping items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listFactorMappings(String factorLibraryId, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listFactorMappingsSinglePage(factorLibraryId, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listFactorMappingsNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Gets factor mapping by id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     factorMappingId: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     name: String (Required)
     *     factor (Required): (recursive schema, see factor above)
     *     referenceData1 (Required): (recursive schema, see referenceData1 above)
     *     referenceData2 (Optional): (recursive schema, see referenceData2 above)
     *     referenceData3 (Optional): (recursive schema, see referenceData3 above)
     *     referenceData4 (Optional): (recursive schema, see referenceData4 above)
     * }
     * }
     * </pre>
     * 
     * @param factorLibraryId Factor library id.
     * @param factorMappingId Factor mapping id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return factor mapping by id along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getFactorMappingWithResponseAsync(String factorLibraryId, String factorMappingId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getFactorMapping(this.getEndpoint(),
            this.getServiceVersion().getVersion(), factorLibraryId, factorMappingId, accept, requestOptions, context));
    }

    /**
     * Gets factor mapping by id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     factorMappingId: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     name: String (Required)
     *     factor (Required): (recursive schema, see factor above)
     *     referenceData1 (Required): (recursive schema, see referenceData1 above)
     *     referenceData2 (Optional): (recursive schema, see referenceData2 above)
     *     referenceData3 (Optional): (recursive schema, see referenceData3 above)
     *     referenceData4 (Optional): (recursive schema, see referenceData4 above)
     * }
     * }
     * </pre>
     * 
     * @param factorLibraryId Factor library id.
     * @param factorMappingId Factor mapping id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return factor mapping by id along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getFactorMappingWithResponse(String factorLibraryId, String factorMappingId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getFactorMappingSync(this.getEndpoint(), this.getServiceVersion().getVersion(), factorLibraryId,
            factorMappingId, accept, requestOptions, Context.NONE);
    }

    /**
     * Lists calculation models for the given activity source.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     calculationModelId: String (Required)
     *     calculationFlowJson: String (Optional)
     *     calculationMethod: String (Optional)
     *     dataDefinitionId (Optional): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     documentationReference: String (Optional)
     *     emissionCalculationId: String (Required)
     *     emissionSource (Required): (recursive schema, see emissionSource above)
     *     modelJsonVersion: String (Optional)
     *     name: String (Required)
     *     sustainabilitymodule (Optional): (recursive schema, see sustainabilitymodule above)
     *     type: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of CalculationModel items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listCalculationModelsSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listCalculationModels(this.getEndpoint(),
                this.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Lists calculation models for the given activity source.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     calculationModelId: String (Required)
     *     calculationFlowJson: String (Optional)
     *     calculationMethod: String (Optional)
     *     dataDefinitionId (Optional): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     documentationReference: String (Optional)
     *     emissionCalculationId: String (Required)
     *     emissionSource (Required): (recursive schema, see emissionSource above)
     *     modelJsonVersion: String (Optional)
     *     name: String (Required)
     *     sustainabilitymodule (Optional): (recursive schema, see sustainabilitymodule above)
     *     type: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of CalculationModel items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listCalculationModelsAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listCalculationModelsSinglePageAsync(requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listCalculationModelsNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Lists calculation models for the given activity source.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     calculationModelId: String (Required)
     *     calculationFlowJson: String (Optional)
     *     calculationMethod: String (Optional)
     *     dataDefinitionId (Optional): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     documentationReference: String (Optional)
     *     emissionCalculationId: String (Required)
     *     emissionSource (Required): (recursive schema, see emissionSource above)
     *     modelJsonVersion: String (Optional)
     *     name: String (Required)
     *     sustainabilitymodule (Optional): (recursive schema, see sustainabilitymodule above)
     *     type: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of CalculationModel items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listCalculationModelsSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listCalculationModelsSync(this.getEndpoint(),
            this.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Lists calculation models for the given activity source.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     calculationModelId: String (Required)
     *     calculationFlowJson: String (Optional)
     *     calculationMethod: String (Optional)
     *     dataDefinitionId (Optional): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     documentationReference: String (Optional)
     *     emissionCalculationId: String (Required)
     *     emissionSource (Required): (recursive schema, see emissionSource above)
     *     modelJsonVersion: String (Optional)
     *     name: String (Required)
     *     sustainabilitymodule (Optional): (recursive schema, see sustainabilitymodule above)
     *     type: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of CalculationModel items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listCalculationModels(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listCalculationModelsSinglePage(requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listCalculationModelsNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Gets calculation model by id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     calculationModelId: String (Required)
     *     calculationFlowJson: String (Optional)
     *     calculationMethod: String (Optional)
     *     dataDefinitionId (Optional): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     documentationReference: String (Optional)
     *     emissionCalculationId: String (Required)
     *     emissionSource (Required): (recursive schema, see emissionSource above)
     *     modelJsonVersion: String (Optional)
     *     name: String (Required)
     *     sustainabilitymodule (Optional): (recursive schema, see sustainabilitymodule above)
     *     type: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param calculationModelId Calculation model ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return calculation model by id along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCalculationModelWithResponseAsync(String calculationModelId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getCalculationModel(this.getEndpoint(),
            this.getServiceVersion().getVersion(), calculationModelId, accept, requestOptions, context));
    }

    /**
     * Gets calculation model by id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     calculationModelId: String (Required)
     *     calculationFlowJson: String (Optional)
     *     calculationMethod: String (Optional)
     *     dataDefinitionId (Optional): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     documentationReference: String (Optional)
     *     emissionCalculationId: String (Required)
     *     emissionSource (Required): (recursive schema, see emissionSource above)
     *     modelJsonVersion: String (Optional)
     *     name: String (Required)
     *     sustainabilitymodule (Optional): (recursive schema, see sustainabilitymodule above)
     *     type: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param calculationModelId Calculation model ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return calculation model by id along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCalculationModelWithResponse(String calculationModelId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getCalculationModelSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            calculationModelId, accept, requestOptions, Context.NONE);
    }

    /**
     * Lists reference data entities.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     displayName: String (Required)
     *     schemaName: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ReferenceDataEntities items along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listReferenceEntitiesSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listReferenceEntities(this.getEndpoint(),
                this.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Lists reference data entities.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     displayName: String (Required)
     *     schemaName: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ReferenceDataEntities items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listReferenceEntitiesAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listReferenceEntitiesSinglePageAsync(requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listReferenceEntitiesNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Lists reference data entities.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     displayName: String (Required)
     *     schemaName: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ReferenceDataEntities items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listReferenceEntitiesSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listReferenceEntitiesSync(this.getEndpoint(),
            this.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Lists reference data entities.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     displayName: String (Required)
     *     schemaName: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ReferenceDataEntities items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listReferenceEntities(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listReferenceEntitiesSinglePage(requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listReferenceEntitiesNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Fetch records of the given reference data entity.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param entityName Logical name of the entity. Example: fueltype.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EntityRecord items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listReferenceEntityRecordsSinglePageAsync(String entityName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listReferenceEntityRecords(this.getEndpoint(),
                this.getServiceVersion().getVersion(), entityName, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Fetch records of the given reference data entity.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param entityName Logical name of the entity. Example: fueltype.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EntityRecord items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listReferenceEntityRecordsAsync(String entityName, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listReferenceEntityRecordsSinglePageAsync(entityName, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listReferenceEntityRecordsNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Fetch records of the given reference data entity.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param entityName Logical name of the entity. Example: fueltype.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EntityRecord items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listReferenceEntityRecordsSinglePage(String entityName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listReferenceEntityRecordsSync(this.getEndpoint(),
            this.getServiceVersion().getVersion(), entityName, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Fetch records of the given reference data entity.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param entityName Logical name of the entity. Example: fueltype.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EntityRecord items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listReferenceEntityRecords(String entityName, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listReferenceEntityRecordsSinglePage(entityName, requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listReferenceEntityRecordsNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Gets reference data entity record by id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param entityName Logical name of the entity. Example: fueltype.
     * @param id Record ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return reference data entity record by id along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getReferenceEntityRecordsWithResponseAsync(String entityName, String id,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getReferenceEntityRecords(this.getEndpoint(),
            this.getServiceVersion().getVersion(), entityName, id, accept, requestOptions, context));
    }

    /**
     * Gets reference data entity record by id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param entityName Logical name of the entity. Example: fueltype.
     * @param id Record ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return reference data entity record by id along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getReferenceEntityRecordsWithResponse(String entityName, String id,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getReferenceEntityRecordsSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            entityName, id, accept, requestOptions, Context.NONE);
    }

    /**
     * Calculate emissions.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     timeStamp: OffsetDateTime (Optional)
     *     calculationModelId: String (Required)
     *     arVersion: String(Custom/AR4/AR5/AR6) (Optional)
     *     activities (Required): [
     *          (Required){
     *             id: String (Required)
     *             activityData (Required): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     summary (Required): {
     *         status: String(Succeeded/Failed/CompletedWithErrors) (Required)
     *         successfulActivities: long (Required)
     *         failedActivities: long (Required)
     *         excludedActivities: long (Required)
     *         processedActivities: long (Required)
     *     }
     *     errorDetails (Required): [
     *          (Required){
     *             activityId: String (Required)
     *             activityName: String (Required)
     *             message: String (Required)
     *             code: String (Required)
     *         }
     *     ]
     *     activityEmissionOutput (Required): [
     *          (Required){
     *             id: String (Required)
     *             emissions (Required): [
     *                  (Required){
     *                     ch4: Double (Optional)
     *                     ch4Unit: String (Optional)
     *                     co2: Double (Optional)
     *                     co2Unit: String (Optional)
     *                     co2e: Double (Optional)
     *                     co2eUnit: String (Optional)
     *                     co2emt: Double (Optional)
     *                     hfcs: Double (Optional)
     *                     hfcsUnit: String (Optional)
     *                     n2o: Double (Optional)
     *                     n2oUnit: String (Optional)
     *                     nf3: Double (Optional)
     *                     nf3Unit: String (Optional)
     *                     pfcs: Double (Optional)
     *                     pfcsUnit: String (Optional)
     *                     otherGhgs: Double (Optional)
     *                     otherGhgsUnit: String (Optional)
     *                     sf6: Double (Optional)
     *                     sf6Unit: String (Optional)
     *                     isMarketBased: Boolean (Optional)
     *                     isBiogenic: Boolean (Optional)
     *                     emissionCalculationModel: String (Optional)
     *                     calculationLibrary: String (Optional)
     *                     emissionFactor: String (Optional)
     *                     adjustedActualQuantity: String (Optional)
     *                     adjustedActualQuantityUnit: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param calculateRequest The calculateRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the output of a calculation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> calculateWithResponseAsync(BinaryData calculateRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.calculate(this.getEndpoint(),
            this.getServiceVersion().getVersion(), contentType, accept, calculateRequest, requestOptions, context));
    }

    /**
     * Calculate emissions.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     timeStamp: OffsetDateTime (Optional)
     *     calculationModelId: String (Required)
     *     arVersion: String(Custom/AR4/AR5/AR6) (Optional)
     *     activities (Required): [
     *          (Required){
     *             id: String (Required)
     *             activityData (Required): {
     *                 String: BinaryData (Required)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     summary (Required): {
     *         status: String(Succeeded/Failed/CompletedWithErrors) (Required)
     *         successfulActivities: long (Required)
     *         failedActivities: long (Required)
     *         excludedActivities: long (Required)
     *         processedActivities: long (Required)
     *     }
     *     errorDetails (Required): [
     *          (Required){
     *             activityId: String (Required)
     *             activityName: String (Required)
     *             message: String (Required)
     *             code: String (Required)
     *         }
     *     ]
     *     activityEmissionOutput (Required): [
     *          (Required){
     *             id: String (Required)
     *             emissions (Required): [
     *                  (Required){
     *                     ch4: Double (Optional)
     *                     ch4Unit: String (Optional)
     *                     co2: Double (Optional)
     *                     co2Unit: String (Optional)
     *                     co2e: Double (Optional)
     *                     co2eUnit: String (Optional)
     *                     co2emt: Double (Optional)
     *                     hfcs: Double (Optional)
     *                     hfcsUnit: String (Optional)
     *                     n2o: Double (Optional)
     *                     n2oUnit: String (Optional)
     *                     nf3: Double (Optional)
     *                     nf3Unit: String (Optional)
     *                     pfcs: Double (Optional)
     *                     pfcsUnit: String (Optional)
     *                     otherGhgs: Double (Optional)
     *                     otherGhgsUnit: String (Optional)
     *                     sf6: Double (Optional)
     *                     sf6Unit: String (Optional)
     *                     isMarketBased: Boolean (Optional)
     *                     isBiogenic: Boolean (Optional)
     *                     emissionCalculationModel: String (Optional)
     *                     calculationLibrary: String (Optional)
     *                     emissionFactor: String (Optional)
     *                     adjustedActualQuantity: String (Optional)
     *                     adjustedActualQuantityUnit: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param calculateRequest The calculateRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the output of a calculation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> calculateWithResponse(BinaryData calculateRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.calculateSync(this.getEndpoint(), this.getServiceVersion().getVersion(), contentType, accept,
            calculateRequest, requestOptions, Context.NONE);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     factorLibraryId: String (Required)
     *     name: String (Required)
     *     libraryType: String (Required)
     *     attribution: String (Optional)
     *     version: String (Optional)
     *     description: String (Optional)
     *     datePublished: String (Optional)
     *     documentationReference: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of FactorLibrary items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listFactorLibrariesNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.listFactorLibrariesNext(nextLink, this.getEndpoint(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     factorLibraryId: String (Required)
     *     name: String (Required)
     *     libraryType: String (Required)
     *     attribution: String (Optional)
     *     version: String (Optional)
     *     description: String (Optional)
     *     datePublished: String (Optional)
     *     documentationReference: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of FactorLibrary items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listFactorLibrariesNextSinglePage(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.listFactorLibrariesNextSync(nextLink, this.getEndpoint(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     id: String (Required)
     *     documentationReference: String (Optional)
     *     estimationFactorId: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     factorValue: double (Required)
     *     factorValueUnit (Required): (recursive schema, see factorValueUnit above)
     *     name: String (Required)
     *     subtype: String (Optional)
     *     type: String (Optional)
     *     unit (Required): (recursive schema, see unit above)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EstimationFactor items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listEstimationFactorsByFactorLibraryNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listEstimationFactorsByFactorLibraryNext(nextLink, this.getEndpoint(),
                accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     id: String (Required)
     *     documentationReference: String (Optional)
     *     estimationFactorId: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     factorValue: double (Required)
     *     factorValueUnit (Required): (recursive schema, see factorValueUnit above)
     *     name: String (Required)
     *     subtype: String (Optional)
     *     type: String (Optional)
     *     unit (Required): (recursive schema, see unit above)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EstimationFactor items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listEstimationFactorsByFactorLibraryNextSinglePage(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listEstimationFactorsByFactorLibraryNextSync(nextLink, this.getEndpoint(),
            accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     ch4: Double (Optional)
     *     ch4Unit (Optional): (recursive schema, see ch4Unit above)
     *     co2: Double (Optional)
     *     co2Unit (Optional): (recursive schema, see co2Unit above)
     *     co2e: Double (Optional)
     *     co2eUnit (Optional): (recursive schema, see co2eUnit above)
     *     documentationReference: String (Optional)
     *     emissionFactorId: String (Required)
     *     id: String (Required)
     *     hfcs: Double (Optional)
     *     hfcsUnit (Optional): (recursive schema, see hfcsUnit above)
     *     isBiofuel: Boolean (Optional)
     *     name: String (Required)
     *     nf3: Double (Optional)
     *     nf3Unit (Optional): (recursive schema, see nf3Unit above)
     *     n2o: Double (Optional)
     *     n2oUnit (Optional): (recursive schema, see n2oUnit above)
     *     otherGhgs: Double (Optional)
     *     otherGhgsUnit (Optional): (recursive schema, see otherGhgsUnit above)
     *     pfcs: Double (Optional)
     *     pfcsUnit (Optional): (recursive schema, see pfcsUnit above)
     *     sf6: Double (Optional)
     *     sf6Unit (Optional): (recursive schema, see sf6Unit above)
     *     subtype: String (Optional)
     *     type: String (Optional)
     *     unit (Optional): (recursive schema, see unit above)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EmissionFactor items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listEmissionFactorsByFactorLibraryNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listEmissionFactorsByFactorLibraryNext(nextLink, this.getEndpoint(), accept,
                requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     ch4: Double (Optional)
     *     ch4Unit (Optional): (recursive schema, see ch4Unit above)
     *     co2: Double (Optional)
     *     co2Unit (Optional): (recursive schema, see co2Unit above)
     *     co2e: Double (Optional)
     *     co2eUnit (Optional): (recursive schema, see co2eUnit above)
     *     documentationReference: String (Optional)
     *     emissionFactorId: String (Required)
     *     id: String (Required)
     *     hfcs: Double (Optional)
     *     hfcsUnit (Optional): (recursive schema, see hfcsUnit above)
     *     isBiofuel: Boolean (Optional)
     *     name: String (Required)
     *     nf3: Double (Optional)
     *     nf3Unit (Optional): (recursive schema, see nf3Unit above)
     *     n2o: Double (Optional)
     *     n2oUnit (Optional): (recursive schema, see n2oUnit above)
     *     otherGhgs: Double (Optional)
     *     otherGhgsUnit (Optional): (recursive schema, see otherGhgsUnit above)
     *     pfcs: Double (Optional)
     *     pfcsUnit (Optional): (recursive schema, see pfcsUnit above)
     *     sf6: Double (Optional)
     *     sf6Unit (Optional): (recursive schema, see sf6Unit above)
     *     subtype: String (Optional)
     *     type: String (Optional)
     *     unit (Optional): (recursive schema, see unit above)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EmissionFactor items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listEmissionFactorsByFactorLibraryNextSinglePage(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listEmissionFactorsByFactorLibraryNextSync(nextLink, this.getEndpoint(),
            accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     factorMappingId: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     name: String (Required)
     *     factor (Required): (recursive schema, see factor above)
     *     referenceData1 (Required): (recursive schema, see referenceData1 above)
     *     referenceData2 (Optional): (recursive schema, see referenceData2 above)
     *     referenceData3 (Optional): (recursive schema, see referenceData3 above)
     *     referenceData4 (Optional): (recursive schema, see referenceData4 above)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of FactorMapping items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listFactorMappingsNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.listFactorMappingsNext(nextLink, this.getEndpoint(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     factorMappingId: String (Required)
     *     factorLibrary (Required): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     name: String (Required)
     *     factor (Required): (recursive schema, see factor above)
     *     referenceData1 (Required): (recursive schema, see referenceData1 above)
     *     referenceData2 (Optional): (recursive schema, see referenceData2 above)
     *     referenceData3 (Optional): (recursive schema, see referenceData3 above)
     *     referenceData4 (Optional): (recursive schema, see referenceData4 above)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of FactorMapping items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listFactorMappingsNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.listFactorMappingsNextSync(nextLink, this.getEndpoint(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     calculationModelId: String (Required)
     *     calculationFlowJson: String (Optional)
     *     calculationMethod: String (Optional)
     *     dataDefinitionId (Optional): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     documentationReference: String (Optional)
     *     emissionCalculationId: String (Required)
     *     emissionSource (Required): (recursive schema, see emissionSource above)
     *     modelJsonVersion: String (Optional)
     *     name: String (Required)
     *     sustainabilitymodule (Optional): (recursive schema, see sustainabilitymodule above)
     *     type: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of CalculationModel items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listCalculationModelsNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.listCalculationModelsNext(nextLink, this.getEndpoint(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     calculationModelId: String (Required)
     *     calculationFlowJson: String (Optional)
     *     calculationMethod: String (Optional)
     *     dataDefinitionId (Optional): {
     *         id: String (Required)
     *         logicalName: String (Required)
     *         name: String (Required)
     *         keyAttributes (Required): {
     *             String: BinaryData (Required)
     *         }
     *         rowVersion: String (Required)
     *     }
     *     documentationReference: String (Optional)
     *     emissionCalculationId: String (Required)
     *     emissionSource (Required): (recursive schema, see emissionSource above)
     *     modelJsonVersion: String (Optional)
     *     name: String (Required)
     *     sustainabilitymodule (Optional): (recursive schema, see sustainabilitymodule above)
     *     type: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of CalculationModel items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listCalculationModelsNextSinglePage(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.listCalculationModelsNextSync(nextLink, this.getEndpoint(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     displayName: String (Required)
     *     schemaName: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ReferenceDataEntities items along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listReferenceEntitiesNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.listReferenceEntitiesNext(nextLink, this.getEndpoint(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     entityName: String (Required)
     *     displayName: String (Required)
     *     schemaName: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ReferenceDataEntities items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listReferenceEntitiesNextSinglePage(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.listReferenceEntitiesNextSync(nextLink, this.getEndpoint(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EntityRecord items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listReferenceEntityRecordsNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listReferenceEntityRecordsNext(nextLink, this.getEndpoint(), accept,
                requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     data (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of EntityRecord items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listReferenceEntityRecordsNextSinglePage(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listReferenceEntityRecordsNextSync(nextLink, this.getEndpoint(), accept,
            requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
