// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.sustainabilityservices.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Logical representation of the emission calculation that runs the calculation methodology bringing activity data and
 * emission factors together.
 */
@Immutable
public final class CalculationModel implements JsonSerializable<CalculationModel> {
    /*
     * Entity name.
     */
    @Generated
    private final String entityName;

    /*
     * Calculation model ID.
     */
    @Generated
    private String calculationModelId;

    /*
     * Calculation flow json.
     */
    @Generated
    private String calculationFlowJson;

    /*
     * Calculation method or model used to calculate emissions, as recommended by protocol.
     */
    @Generated
    private String calculationMethod;

    /*
     * Data definition of source.
     */
    @Generated
    private LookupField dataDefinitionId;

    /*
     * Document reference.
     */
    @Generated
    private String documentationReference;

    /*
     * Emission calculation ID.
     */
    @Generated
    private final String emissionCalculationId;

    /*
     * Emission source.
     */
    @Generated
    private final LookupField emissionSource;

    /*
     * Model JSON version.
     */
    @Generated
    private String modelJsonVersion;

    /*
     * Calculation model name.
     */
    @Generated
    private final String name;

    /*
     * Sustainability module.
     */
    @Generated
    private LookupField sustainabilitymodule;

    /*
     * Model type.
     */
    @Generated
    private final String type;

    /**
     * Creates an instance of CalculationModel class.
     * 
     * @param entityName the entityName value to set.
     * @param emissionCalculationId the emissionCalculationId value to set.
     * @param emissionSource the emissionSource value to set.
     * @param name the name value to set.
     * @param type the type value to set.
     */
    @Generated
    private CalculationModel(String entityName, String emissionCalculationId, LookupField emissionSource, String name,
        String type) {
        this.entityName = entityName;
        this.emissionCalculationId = emissionCalculationId;
        this.emissionSource = emissionSource;
        this.name = name;
        this.type = type;
    }

    /**
     * Get the entityName property: Entity name.
     * 
     * @return the entityName value.
     */
    @Generated
    public String getEntityName() {
        return this.entityName;
    }

    /**
     * Get the calculationModelId property: Calculation model ID.
     * 
     * @return the calculationModelId value.
     */
    @Generated
    public String getCalculationModelId() {
        return this.calculationModelId;
    }

    /**
     * Get the calculationFlowJson property: Calculation flow json.
     * 
     * @return the calculationFlowJson value.
     */
    @Generated
    public String getCalculationFlowJson() {
        return this.calculationFlowJson;
    }

    /**
     * Get the calculationMethod property: Calculation method or model used to calculate emissions, as recommended by
     * protocol.
     * 
     * @return the calculationMethod value.
     */
    @Generated
    public String getCalculationMethod() {
        return this.calculationMethod;
    }

    /**
     * Get the dataDefinitionId property: Data definition of source.
     * 
     * @return the dataDefinitionId value.
     */
    @Generated
    public LookupField getDataDefinitionId() {
        return this.dataDefinitionId;
    }

    /**
     * Get the documentationReference property: Document reference.
     * 
     * @return the documentationReference value.
     */
    @Generated
    public String getDocumentationReference() {
        return this.documentationReference;
    }

    /**
     * Get the emissionCalculationId property: Emission calculation ID.
     * 
     * @return the emissionCalculationId value.
     */
    @Generated
    public String getEmissionCalculationId() {
        return this.emissionCalculationId;
    }

    /**
     * Get the emissionSource property: Emission source.
     * 
     * @return the emissionSource value.
     */
    @Generated
    public LookupField getEmissionSource() {
        return this.emissionSource;
    }

    /**
     * Get the modelJsonVersion property: Model JSON version.
     * 
     * @return the modelJsonVersion value.
     */
    @Generated
    public String getModelJsonVersion() {
        return this.modelJsonVersion;
    }

    /**
     * Get the name property: Calculation model name.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the sustainabilitymodule property: Sustainability module.
     * 
     * @return the sustainabilitymodule value.
     */
    @Generated
    public LookupField getSustainabilitymodule() {
        return this.sustainabilitymodule;
    }

    /**
     * Get the type property: Model type.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("entityName", this.entityName);
        jsonWriter.writeStringField("emissionCalculationId", this.emissionCalculationId);
        jsonWriter.writeJsonField("emissionSource", this.emissionSource);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("calculationFlowJson", this.calculationFlowJson);
        jsonWriter.writeStringField("calculationMethod", this.calculationMethod);
        jsonWriter.writeJsonField("dataDefinitionId", this.dataDefinitionId);
        jsonWriter.writeStringField("documentationReference", this.documentationReference);
        jsonWriter.writeStringField("modelJsonVersion", this.modelJsonVersion);
        jsonWriter.writeJsonField("sustainabilitymodule", this.sustainabilitymodule);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CalculationModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CalculationModel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CalculationModel.
     */
    @Generated
    public static CalculationModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String entityName = null;
            String calculationModelId = null;
            String emissionCalculationId = null;
            LookupField emissionSource = null;
            String name = null;
            String type = null;
            String calculationFlowJson = null;
            String calculationMethod = null;
            LookupField dataDefinitionId = null;
            String documentationReference = null;
            String modelJsonVersion = null;
            LookupField sustainabilitymodule = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("entityName".equals(fieldName)) {
                    entityName = reader.getString();
                } else if ("calculationModelId".equals(fieldName)) {
                    calculationModelId = reader.getString();
                } else if ("emissionCalculationId".equals(fieldName)) {
                    emissionCalculationId = reader.getString();
                } else if ("emissionSource".equals(fieldName)) {
                    emissionSource = LookupField.fromJson(reader);
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("calculationFlowJson".equals(fieldName)) {
                    calculationFlowJson = reader.getString();
                } else if ("calculationMethod".equals(fieldName)) {
                    calculationMethod = reader.getString();
                } else if ("dataDefinitionId".equals(fieldName)) {
                    dataDefinitionId = LookupField.fromJson(reader);
                } else if ("documentationReference".equals(fieldName)) {
                    documentationReference = reader.getString();
                } else if ("modelJsonVersion".equals(fieldName)) {
                    modelJsonVersion = reader.getString();
                } else if ("sustainabilitymodule".equals(fieldName)) {
                    sustainabilitymodule = LookupField.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            CalculationModel deserializedCalculationModel
                = new CalculationModel(entityName, emissionCalculationId, emissionSource, name, type);
            deserializedCalculationModel.calculationModelId = calculationModelId;
            deserializedCalculationModel.calculationFlowJson = calculationFlowJson;
            deserializedCalculationModel.calculationMethod = calculationMethod;
            deserializedCalculationModel.dataDefinitionId = dataDefinitionId;
            deserializedCalculationModel.documentationReference = documentationReference;
            deserializedCalculationModel.modelJsonVersion = modelJsonVersion;
            deserializedCalculationModel.sustainabilitymodule = sustainabilitymodule;

            return deserializedCalculationModel;
        });
    }
}
