// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.sustainabilityservices.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Conversion factor to convert quantities in activity data into greenhouse gas emissions.
 */
@Immutable
public final class EmissionFactor implements JsonSerializable<EmissionFactor> {
    /*
     * Entity name.
     */
    @Generated
    private final String entityName;

    /*
     * Factor library to which the emission factor belongs to.
     */
    @Generated
    private final LookupField factorLibrary;

    /*
     * CH4 factor value.
     */
    @Generated
    private Double ch4;

    /*
     * Unit for CH4 factor value.
     */
    @Generated
    private LookupField ch4Unit;

    /*
     * CO2 factor value.
     */
    @Generated
    private Double co2;

    /*
     * Unit for CO2 factor value.
     */
    @Generated
    private LookupField co2Unit;

    /*
     * CO2e factor value.
     */
    @Generated
    private Double co2e;

    /*
     * Unit for CO2e factor value.
     */
    @Generated
    private LookupField co2eUnit;

    /*
     * Documentation reference.
     */
    @Generated
    private String documentationReference;

    /*
     * Emission factor ID.
     */
    @Generated
    private String emissionFactorId;

    /*
     * ID.
     */
    @Generated
    private final String id;

    /*
     * HFCs factor value.
     */
    @Generated
    private Double hfcs;

    /*
     * Unit for HFCs factor value.
     */
    @Generated
    private LookupField hfcsUnit;

    /*
     * Is biofuel.
     */
    @Generated
    private Boolean isBiofuel;

    /*
     * Emission factor name.
     */
    @Generated
    private final String name;

    /*
     * NF3 factor value.
     */
    @Generated
    private Double nf3;

    /*
     * Unit for NF3 factor value.
     */
    @Generated
    private LookupField nf3Unit;

    /*
     * NO2 factor value.
     */
    @Generated
    private Double n2o;

    /*
     * Unit for N2O factor value.
     */
    @Generated
    private LookupField n2oUnit;

    /*
     * Other GHG factor value.
     */
    @Generated
    private Double otherGhgs;

    /*
     * Unit for other GHGs factor value.
     */
    @Generated
    private LookupField otherGhgsUnit;

    /*
     * PFCs factor value.
     */
    @Generated
    private Double pfcs;

    /*
     * Unit for PFCs factor value.
     */
    @Generated
    private LookupField pfcsUnit;

    /*
     * SF6 factor value.
     */
    @Generated
    private Double sf6;

    /*
     * Unit for SF6 factor value.
     */
    @Generated
    private LookupField sf6Unit;

    /*
     * Subtype.
     */
    @Generated
    private String subtype;

    /*
     * Type.
     */
    @Generated
    private String type;

    /*
     * Unit.
     */
    @Generated
    private LookupField unit;

    /**
     * Creates an instance of EmissionFactor class.
     * 
     * @param entityName the entityName value to set.
     * @param factorLibrary the factorLibrary value to set.
     * @param id the id value to set.
     * @param name the name value to set.
     */
    @Generated
    private EmissionFactor(String entityName, LookupField factorLibrary, String id, String name) {
        this.entityName = entityName;
        this.factorLibrary = factorLibrary;
        this.id = id;
        this.name = name;
    }

    /**
     * Get the entityName property: Entity name.
     * 
     * @return the entityName value.
     */
    @Generated
    public String getEntityName() {
        return this.entityName;
    }

    /**
     * Get the factorLibrary property: Factor library to which the emission factor belongs to.
     * 
     * @return the factorLibrary value.
     */
    @Generated
    public LookupField getFactorLibrary() {
        return this.factorLibrary;
    }

    /**
     * Get the ch4 property: CH4 factor value.
     * 
     * @return the ch4 value.
     */
    @Generated
    public Double getCh4() {
        return this.ch4;
    }

    /**
     * Get the ch4Unit property: Unit for CH4 factor value.
     * 
     * @return the ch4Unit value.
     */
    @Generated
    public LookupField getCh4Unit() {
        return this.ch4Unit;
    }

    /**
     * Get the co2 property: CO2 factor value.
     * 
     * @return the co2 value.
     */
    @Generated
    public Double getCo2() {
        return this.co2;
    }

    /**
     * Get the co2Unit property: Unit for CO2 factor value.
     * 
     * @return the co2Unit value.
     */
    @Generated
    public LookupField getCo2Unit() {
        return this.co2Unit;
    }

    /**
     * Get the co2e property: CO2e factor value.
     * 
     * @return the co2e value.
     */
    @Generated
    public Double getCo2e() {
        return this.co2e;
    }

    /**
     * Get the co2eUnit property: Unit for CO2e factor value.
     * 
     * @return the co2eUnit value.
     */
    @Generated
    public LookupField getCo2eUnit() {
        return this.co2eUnit;
    }

    /**
     * Get the documentationReference property: Documentation reference.
     * 
     * @return the documentationReference value.
     */
    @Generated
    public String getDocumentationReference() {
        return this.documentationReference;
    }

    /**
     * Get the emissionFactorId property: Emission factor ID.
     * 
     * @return the emissionFactorId value.
     */
    @Generated
    public String getEmissionFactorId() {
        return this.emissionFactorId;
    }

    /**
     * Get the id property: ID.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the hfcs property: HFCs factor value.
     * 
     * @return the hfcs value.
     */
    @Generated
    public Double getHfcs() {
        return this.hfcs;
    }

    /**
     * Get the hfcsUnit property: Unit for HFCs factor value.
     * 
     * @return the hfcsUnit value.
     */
    @Generated
    public LookupField getHfcsUnit() {
        return this.hfcsUnit;
    }

    /**
     * Get the isBiofuel property: Is biofuel.
     * 
     * @return the isBiofuel value.
     */
    @Generated
    public Boolean isBiofuel() {
        return this.isBiofuel;
    }

    /**
     * Get the name property: Emission factor name.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the nf3 property: NF3 factor value.
     * 
     * @return the nf3 value.
     */
    @Generated
    public Double getNf3() {
        return this.nf3;
    }

    /**
     * Get the nf3Unit property: Unit for NF3 factor value.
     * 
     * @return the nf3Unit value.
     */
    @Generated
    public LookupField getNf3Unit() {
        return this.nf3Unit;
    }

    /**
     * Get the n2o property: NO2 factor value.
     * 
     * @return the n2o value.
     */
    @Generated
    public Double getN2o() {
        return this.n2o;
    }

    /**
     * Get the n2oUnit property: Unit for N2O factor value.
     * 
     * @return the n2oUnit value.
     */
    @Generated
    public LookupField getN2oUnit() {
        return this.n2oUnit;
    }

    /**
     * Get the otherGhgs property: Other GHG factor value.
     * 
     * @return the otherGhgs value.
     */
    @Generated
    public Double getOtherGhgs() {
        return this.otherGhgs;
    }

    /**
     * Get the otherGhgsUnit property: Unit for other GHGs factor value.
     * 
     * @return the otherGhgsUnit value.
     */
    @Generated
    public LookupField getOtherGhgsUnit() {
        return this.otherGhgsUnit;
    }

    /**
     * Get the pfcs property: PFCs factor value.
     * 
     * @return the pfcs value.
     */
    @Generated
    public Double getPfcs() {
        return this.pfcs;
    }

    /**
     * Get the pfcsUnit property: Unit for PFCs factor value.
     * 
     * @return the pfcsUnit value.
     */
    @Generated
    public LookupField getPfcsUnit() {
        return this.pfcsUnit;
    }

    /**
     * Get the sf6 property: SF6 factor value.
     * 
     * @return the sf6 value.
     */
    @Generated
    public Double getSf6() {
        return this.sf6;
    }

    /**
     * Get the sf6Unit property: Unit for SF6 factor value.
     * 
     * @return the sf6Unit value.
     */
    @Generated
    public LookupField getSf6Unit() {
        return this.sf6Unit;
    }

    /**
     * Get the subtype property: Subtype.
     * 
     * @return the subtype value.
     */
    @Generated
    public String getSubtype() {
        return this.subtype;
    }

    /**
     * Get the type property: Type.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the unit property: Unit.
     * 
     * @return the unit value.
     */
    @Generated
    public LookupField getUnit() {
        return this.unit;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("entityName", this.entityName);
        jsonWriter.writeJsonField("factorLibrary", this.factorLibrary);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeNumberField("ch4", this.ch4);
        jsonWriter.writeJsonField("ch4Unit", this.ch4Unit);
        jsonWriter.writeNumberField("co2", this.co2);
        jsonWriter.writeJsonField("co2Unit", this.co2Unit);
        jsonWriter.writeNumberField("co2e", this.co2e);
        jsonWriter.writeJsonField("co2eUnit", this.co2eUnit);
        jsonWriter.writeStringField("documentationReference", this.documentationReference);
        jsonWriter.writeNumberField("hfcs", this.hfcs);
        jsonWriter.writeJsonField("hfcsUnit", this.hfcsUnit);
        jsonWriter.writeBooleanField("isBiofuel", this.isBiofuel);
        jsonWriter.writeNumberField("nf3", this.nf3);
        jsonWriter.writeJsonField("nf3Unit", this.nf3Unit);
        jsonWriter.writeNumberField("n2o", this.n2o);
        jsonWriter.writeJsonField("n2oUnit", this.n2oUnit);
        jsonWriter.writeNumberField("otherGhgs", this.otherGhgs);
        jsonWriter.writeJsonField("otherGhgsUnit", this.otherGhgsUnit);
        jsonWriter.writeNumberField("pfcs", this.pfcs);
        jsonWriter.writeJsonField("pfcsUnit", this.pfcsUnit);
        jsonWriter.writeNumberField("sf6", this.sf6);
        jsonWriter.writeJsonField("sf6Unit", this.sf6Unit);
        jsonWriter.writeStringField("subtype", this.subtype);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("unit", this.unit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EmissionFactor from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EmissionFactor if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EmissionFactor.
     */
    @Generated
    public static EmissionFactor fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String entityName = null;
            LookupField factorLibrary = null;
            String emissionFactorId = null;
            String id = null;
            String name = null;
            Double ch4 = null;
            LookupField ch4Unit = null;
            Double co2 = null;
            LookupField co2Unit = null;
            Double co2e = null;
            LookupField co2eUnit = null;
            String documentationReference = null;
            Double hfcs = null;
            LookupField hfcsUnit = null;
            Boolean isBiofuel = null;
            Double nf3 = null;
            LookupField nf3Unit = null;
            Double n2o = null;
            LookupField n2oUnit = null;
            Double otherGhgs = null;
            LookupField otherGhgsUnit = null;
            Double pfcs = null;
            LookupField pfcsUnit = null;
            Double sf6 = null;
            LookupField sf6Unit = null;
            String subtype = null;
            String type = null;
            LookupField unit = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("entityName".equals(fieldName)) {
                    entityName = reader.getString();
                } else if ("factorLibrary".equals(fieldName)) {
                    factorLibrary = LookupField.fromJson(reader);
                } else if ("emissionFactorId".equals(fieldName)) {
                    emissionFactorId = reader.getString();
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("ch4".equals(fieldName)) {
                    ch4 = reader.getNullable(JsonReader::getDouble);
                } else if ("ch4Unit".equals(fieldName)) {
                    ch4Unit = LookupField.fromJson(reader);
                } else if ("co2".equals(fieldName)) {
                    co2 = reader.getNullable(JsonReader::getDouble);
                } else if ("co2Unit".equals(fieldName)) {
                    co2Unit = LookupField.fromJson(reader);
                } else if ("co2e".equals(fieldName)) {
                    co2e = reader.getNullable(JsonReader::getDouble);
                } else if ("co2eUnit".equals(fieldName)) {
                    co2eUnit = LookupField.fromJson(reader);
                } else if ("documentationReference".equals(fieldName)) {
                    documentationReference = reader.getString();
                } else if ("hfcs".equals(fieldName)) {
                    hfcs = reader.getNullable(JsonReader::getDouble);
                } else if ("hfcsUnit".equals(fieldName)) {
                    hfcsUnit = LookupField.fromJson(reader);
                } else if ("isBiofuel".equals(fieldName)) {
                    isBiofuel = reader.getNullable(JsonReader::getBoolean);
                } else if ("nf3".equals(fieldName)) {
                    nf3 = reader.getNullable(JsonReader::getDouble);
                } else if ("nf3Unit".equals(fieldName)) {
                    nf3Unit = LookupField.fromJson(reader);
                } else if ("n2o".equals(fieldName)) {
                    n2o = reader.getNullable(JsonReader::getDouble);
                } else if ("n2oUnit".equals(fieldName)) {
                    n2oUnit = LookupField.fromJson(reader);
                } else if ("otherGhgs".equals(fieldName)) {
                    otherGhgs = reader.getNullable(JsonReader::getDouble);
                } else if ("otherGhgsUnit".equals(fieldName)) {
                    otherGhgsUnit = LookupField.fromJson(reader);
                } else if ("pfcs".equals(fieldName)) {
                    pfcs = reader.getNullable(JsonReader::getDouble);
                } else if ("pfcsUnit".equals(fieldName)) {
                    pfcsUnit = LookupField.fromJson(reader);
                } else if ("sf6".equals(fieldName)) {
                    sf6 = reader.getNullable(JsonReader::getDouble);
                } else if ("sf6Unit".equals(fieldName)) {
                    sf6Unit = LookupField.fromJson(reader);
                } else if ("subtype".equals(fieldName)) {
                    subtype = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("unit".equals(fieldName)) {
                    unit = LookupField.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            EmissionFactor deserializedEmissionFactor = new EmissionFactor(entityName, factorLibrary, id, name);
            deserializedEmissionFactor.emissionFactorId = emissionFactorId;
            deserializedEmissionFactor.ch4 = ch4;
            deserializedEmissionFactor.ch4Unit = ch4Unit;
            deserializedEmissionFactor.co2 = co2;
            deserializedEmissionFactor.co2Unit = co2Unit;
            deserializedEmissionFactor.co2e = co2e;
            deserializedEmissionFactor.co2eUnit = co2eUnit;
            deserializedEmissionFactor.documentationReference = documentationReference;
            deserializedEmissionFactor.hfcs = hfcs;
            deserializedEmissionFactor.hfcsUnit = hfcsUnit;
            deserializedEmissionFactor.isBiofuel = isBiofuel;
            deserializedEmissionFactor.nf3 = nf3;
            deserializedEmissionFactor.nf3Unit = nf3Unit;
            deserializedEmissionFactor.n2o = n2o;
            deserializedEmissionFactor.n2oUnit = n2oUnit;
            deserializedEmissionFactor.otherGhgs = otherGhgs;
            deserializedEmissionFactor.otherGhgsUnit = otherGhgsUnit;
            deserializedEmissionFactor.pfcs = pfcs;
            deserializedEmissionFactor.pfcsUnit = pfcsUnit;
            deserializedEmissionFactor.sf6 = sf6;
            deserializedEmissionFactor.sf6Unit = sf6Unit;
            deserializedEmissionFactor.subtype = subtype;
            deserializedEmissionFactor.type = type;
            deserializedEmissionFactor.unit = unit;

            return deserializedEmissionFactor;
        });
    }
}
