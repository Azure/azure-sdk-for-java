// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.sustainabilityservices.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents collection of emission and estimation factors.
 */
@Immutable
public final class FactorLibrary implements JsonSerializable<FactorLibrary> {
    /*
     * Factor library id.
     */
    @Generated
    private String factorLibraryId;

    /*
     * Factor library name.
     */
    @Generated
    private final String name;

    /*
     * Type of factor library: estimation or emission.
     */
    @Generated
    private final String libraryType;

    /*
     * Appropriate acknowledgment to the original content creator when utilizing or distributing their work within the
     * application.
     */
    @Generated
    private String attribution;

    /*
     * Factor library version.
     */
    @Generated
    private String version;

    /*
     * Description of the library.
     */
    @Generated
    private String description;

    /*
     * Date published.
     */
    @Generated
    private String datePublished;

    /*
     * Documentation reference.
     */
    @Generated
    private String documentationReference;

    /**
     * Creates an instance of FactorLibrary class.
     * 
     * @param name the name value to set.
     * @param libraryType the libraryType value to set.
     */
    @Generated
    private FactorLibrary(String name, String libraryType) {
        this.name = name;
        this.libraryType = libraryType;
    }

    /**
     * Get the factorLibraryId property: Factor library id.
     * 
     * @return the factorLibraryId value.
     */
    @Generated
    public String getFactorLibraryId() {
        return this.factorLibraryId;
    }

    /**
     * Get the name property: Factor library name.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the libraryType property: Type of factor library: estimation or emission.
     * 
     * @return the libraryType value.
     */
    @Generated
    public String getLibraryType() {
        return this.libraryType;
    }

    /**
     * Get the attribution property: Appropriate acknowledgment to the original content creator when utilizing or
     * distributing their work within the application.
     * 
     * @return the attribution value.
     */
    @Generated
    public String getAttribution() {
        return this.attribution;
    }

    /**
     * Get the version property: Factor library version.
     * 
     * @return the version value.
     */
    @Generated
    public String getVersion() {
        return this.version;
    }

    /**
     * Get the description property: Description of the library.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the datePublished property: Date published.
     * 
     * @return the datePublished value.
     */
    @Generated
    public String getDatePublished() {
        return this.datePublished;
    }

    /**
     * Get the documentationReference property: Documentation reference.
     * 
     * @return the documentationReference value.
     */
    @Generated
    public String getDocumentationReference() {
        return this.documentationReference;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("libraryType", this.libraryType);
        jsonWriter.writeStringField("attribution", this.attribution);
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("datePublished", this.datePublished);
        jsonWriter.writeStringField("documentationReference", this.documentationReference);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FactorLibrary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FactorLibrary if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FactorLibrary.
     */
    @Generated
    public static FactorLibrary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String factorLibraryId = null;
            String name = null;
            String libraryType = null;
            String attribution = null;
            String version = null;
            String description = null;
            String datePublished = null;
            String documentationReference = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("factorLibraryId".equals(fieldName)) {
                    factorLibraryId = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("libraryType".equals(fieldName)) {
                    libraryType = reader.getString();
                } else if ("attribution".equals(fieldName)) {
                    attribution = reader.getString();
                } else if ("version".equals(fieldName)) {
                    version = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("datePublished".equals(fieldName)) {
                    datePublished = reader.getString();
                } else if ("documentationReference".equals(fieldName)) {
                    documentationReference = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            FactorLibrary deserializedFactorLibrary = new FactorLibrary(name, libraryType);
            deserializedFactorLibrary.factorLibraryId = factorLibraryId;
            deserializedFactorLibrary.attribution = attribution;
            deserializedFactorLibrary.version = version;
            deserializedFactorLibrary.description = description;
            deserializedFactorLibrary.datePublished = datePublished;
            deserializedFactorLibrary.documentationReference = documentationReference;

            return deserializedFactorLibrary;
        });
    }
}
