// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.sustainabilityservices.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Factor mapping.
 */
@Immutable
public final class FactorMapping implements JsonSerializable<FactorMapping> {
    /*
     * Factor mapping id.
     */
    @Generated
    private String factorMappingId;

    /*
     * Factor library which this mapping belongs to.
     */
    @Generated
    private final LookupField factorLibrary;

    /*
     * Name.
     */
    @Generated
    private final String name;

    /*
     * Factor associated with the factor mapping.
     */
    @Generated
    private final LookupField factor;

    /*
     * Reference data 1
     */
    @Generated
    private final LookupField referenceData1;

    /*
     * Reference data 2
     */
    @Generated
    private LookupField referenceData2;

    /*
     * Reference data 3
     */
    @Generated
    private LookupField referenceData3;

    /*
     * Reference data 4
     */
    @Generated
    private LookupField referenceData4;

    /**
     * Creates an instance of FactorMapping class.
     * 
     * @param factorLibrary the factorLibrary value to set.
     * @param name the name value to set.
     * @param factor the factor value to set.
     * @param referenceData1 the referenceData1 value to set.
     */
    @Generated
    private FactorMapping(LookupField factorLibrary, String name, LookupField factor, LookupField referenceData1) {
        this.factorLibrary = factorLibrary;
        this.name = name;
        this.factor = factor;
        this.referenceData1 = referenceData1;
    }

    /**
     * Get the factorMappingId property: Factor mapping id.
     * 
     * @return the factorMappingId value.
     */
    @Generated
    public String getFactorMappingId() {
        return this.factorMappingId;
    }

    /**
     * Get the factorLibrary property: Factor library which this mapping belongs to.
     * 
     * @return the factorLibrary value.
     */
    @Generated
    public LookupField getFactorLibrary() {
        return this.factorLibrary;
    }

    /**
     * Get the name property: Name.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the factor property: Factor associated with the factor mapping.
     * 
     * @return the factor value.
     */
    @Generated
    public LookupField getFactor() {
        return this.factor;
    }

    /**
     * Get the referenceData1 property: Reference data 1.
     * 
     * @return the referenceData1 value.
     */
    @Generated
    public LookupField getReferenceData1() {
        return this.referenceData1;
    }

    /**
     * Get the referenceData2 property: Reference data 2.
     * 
     * @return the referenceData2 value.
     */
    @Generated
    public LookupField getReferenceData2() {
        return this.referenceData2;
    }

    /**
     * Get the referenceData3 property: Reference data 3.
     * 
     * @return the referenceData3 value.
     */
    @Generated
    public LookupField getReferenceData3() {
        return this.referenceData3;
    }

    /**
     * Get the referenceData4 property: Reference data 4.
     * 
     * @return the referenceData4 value.
     */
    @Generated
    public LookupField getReferenceData4() {
        return this.referenceData4;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("factorLibrary", this.factorLibrary);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("factor", this.factor);
        jsonWriter.writeJsonField("referenceData1", this.referenceData1);
        jsonWriter.writeJsonField("referenceData2", this.referenceData2);
        jsonWriter.writeJsonField("referenceData3", this.referenceData3);
        jsonWriter.writeJsonField("referenceData4", this.referenceData4);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FactorMapping from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FactorMapping if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FactorMapping.
     */
    @Generated
    public static FactorMapping fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String factorMappingId = null;
            LookupField factorLibrary = null;
            String name = null;
            LookupField factor = null;
            LookupField referenceData1 = null;
            LookupField referenceData2 = null;
            LookupField referenceData3 = null;
            LookupField referenceData4 = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("factorMappingId".equals(fieldName)) {
                    factorMappingId = reader.getString();
                } else if ("factorLibrary".equals(fieldName)) {
                    factorLibrary = LookupField.fromJson(reader);
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("factor".equals(fieldName)) {
                    factor = LookupField.fromJson(reader);
                } else if ("referenceData1".equals(fieldName)) {
                    referenceData1 = LookupField.fromJson(reader);
                } else if ("referenceData2".equals(fieldName)) {
                    referenceData2 = LookupField.fromJson(reader);
                } else if ("referenceData3".equals(fieldName)) {
                    referenceData3 = LookupField.fromJson(reader);
                } else if ("referenceData4".equals(fieldName)) {
                    referenceData4 = LookupField.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            FactorMapping deserializedFactorMapping = new FactorMapping(factorLibrary, name, factor, referenceData1);
            deserializedFactorMapping.factorMappingId = factorMappingId;
            deserializedFactorMapping.referenceData2 = referenceData2;
            deserializedFactorMapping.referenceData3 = referenceData3;
            deserializedFactorMapping.referenceData4 = referenceData4;

            return deserializedFactorMapping;
        });
    }
}
