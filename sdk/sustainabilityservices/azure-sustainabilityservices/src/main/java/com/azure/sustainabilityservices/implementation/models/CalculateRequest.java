// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.sustainabilityservices.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.sustainabilityservices.models.ArVersions;
import com.azure.sustainabilityservices.models.EmissionActivity;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The CalculateRequest model.
 */
@Fluent
public final class CalculateRequest implements JsonSerializable<CalculateRequest> {
    /*
     * Time stamp.
     */
    @Generated
    private OffsetDateTime timeStamp;

    /*
     * Calculation model id to be used. Use listCalculationModels API to get the list of all calculation models and
     * choose the appropriate model based on the usecase.
     */
    @Generated
    private final String calculationModelId;

    /*
     * Assessment report version to be used in the calculation. If no arVersion is specified in the payload, AR4 version
     * is the default version
     */
    @Generated
    private ArVersions arVersion;

    /*
     * List of activities on which the calculation is to be performed.
     */
    @Generated
    private final List<EmissionActivity> activities;

    /**
     * Creates an instance of CalculateRequest class.
     * 
     * @param calculationModelId the calculationModelId value to set.
     * @param activities the activities value to set.
     */
    @Generated
    public CalculateRequest(String calculationModelId, List<EmissionActivity> activities) {
        this.calculationModelId = calculationModelId;
        this.activities = activities;
    }

    /**
     * Get the timeStamp property: Time stamp.
     * 
     * @return the timeStamp value.
     */
    @Generated
    public OffsetDateTime getTimeStamp() {
        return this.timeStamp;
    }

    /**
     * Set the timeStamp property: Time stamp.
     * 
     * @param timeStamp the timeStamp value to set.
     * @return the CalculateRequest object itself.
     */
    @Generated
    public CalculateRequest setTimeStamp(OffsetDateTime timeStamp) {
        this.timeStamp = timeStamp;
        return this;
    }

    /**
     * Get the calculationModelId property: Calculation model id to be used. Use listCalculationModels API to get the
     * list of all calculation models and choose the appropriate model based on the usecase.
     * 
     * @return the calculationModelId value.
     */
    @Generated
    public String getCalculationModelId() {
        return this.calculationModelId;
    }

    /**
     * Get the arVersion property: Assessment report version to be used in the calculation. If no arVersion is specified
     * in the payload, AR4 version is the default version.
     * 
     * @return the arVersion value.
     */
    @Generated
    public ArVersions getArVersion() {
        return this.arVersion;
    }

    /**
     * Set the arVersion property: Assessment report version to be used in the calculation. If no arVersion is specified
     * in the payload, AR4 version is the default version.
     * 
     * @param arVersion the arVersion value to set.
     * @return the CalculateRequest object itself.
     */
    @Generated
    public CalculateRequest setArVersion(ArVersions arVersion) {
        this.arVersion = arVersion;
        return this;
    }

    /**
     * Get the activities property: List of activities on which the calculation is to be performed.
     * 
     * @return the activities value.
     */
    @Generated
    public List<EmissionActivity> getActivities() {
        return this.activities;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("calculationModelId", this.calculationModelId);
        jsonWriter.writeArrayField("activities", this.activities, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("timeStamp",
            this.timeStamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timeStamp));
        jsonWriter.writeStringField("arVersion", this.arVersion == null ? null : this.arVersion.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CalculateRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CalculateRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CalculateRequest.
     */
    @Generated
    public static CalculateRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String calculationModelId = null;
            List<EmissionActivity> activities = null;
            OffsetDateTime timeStamp = null;
            ArVersions arVersion = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("calculationModelId".equals(fieldName)) {
                    calculationModelId = reader.getString();
                } else if ("activities".equals(fieldName)) {
                    activities = reader.readArray(reader1 -> EmissionActivity.fromJson(reader1));
                } else if ("timeStamp".equals(fieldName)) {
                    timeStamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("arVersion".equals(fieldName)) {
                    arVersion = ArVersions.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            CalculateRequest deserializedCalculateRequest = new CalculateRequest(calculationModelId, activities);
            deserializedCalculateRequest.timeStamp = timeStamp;
            deserializedCalculateRequest.arVersion = arVersion;

            return deserializedCalculateRequest;
        });
    }
}
