// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.sustainabilityservices.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Emissions for the activity.
 */
@Immutable
public final class GhgEmissions implements JsonSerializable<GhgEmissions> {
    /*
     * CH4 emission.
     */
    @Generated
    private Double ch4;

    /*
     * CH4 emissions unit.
     */
    @Generated
    private String ch4Unit;

    /*
     * CO2 emissions.
     */
    @Generated
    private Double co2;

    /*
     * CO2 emissions unit.
     */
    @Generated
    private String co2Unit;

    /*
     * CO2e emissions.
     */
    @Generated
    private Double co2e;

    /*
     * CO2e emissions unit.
     */
    @Generated
    private String co2eUnit;

    /*
     * CO2emt emissions.
     */
    @Generated
    private Double co2emt;

    /*
     * HFCs emissions.
     */
    @Generated
    private Double hfcs;

    /*
     * HFCs emissions unit.
     */
    @Generated
    private String hfcsUnit;

    /*
     * N2O emissions.
     */
    @Generated
    private Double n2o;

    /*
     * N2O emissions unit.
     */
    @Generated
    private String n2oUnit;

    /*
     * NF3 emissions.
     */
    @Generated
    private Double nf3;

    /*
     * NF3 emissions unit.
     */
    @Generated
    private String nf3Unit;

    /*
     * PFCs emissions.
     */
    @Generated
    private Double pfcs;

    /*
     * PFCs emissions unit.
     */
    @Generated
    private String pfcsUnit;

    /*
     * Other GHG emissions.
     */
    @Generated
    private Double otherGhgs;

    /*
     * Other GHG emissions unit.
     */
    @Generated
    private String otherGhgsUnit;

    /*
     * SF6 emissions.
     */
    @Generated
    private Double sf6;

    /*
     * SF6 emissions unit.
     */
    @Generated
    private String sf6Unit;

    /*
     * Is market based.
     */
    @Generated
    private Boolean isMarketBased;

    /*
     * Is biogenic.
     */
    @Generated
    private Boolean isBiogenic;

    /*
     * Emission calculation model used for the calculation.
     */
    @Generated
    private String emissionCalculationModel;

    /*
     * Factor library used for the calculation.
     */
    @Generated
    private String calculationLibrary;

    /*
     * Emission factor used for the calculation.
     */
    @Generated
    private String emissionFactor;

    /*
     * Actual quantity of the activity responsible for the emission. For example, the actual quantity for a business
     * trip involving a hotel stay might be the number of nights stayed multiplied by the estimation factor.
     */
    @Generated
    private String adjustedActualQuantity;

    /*
     * Actual quantity unit.
     */
    @Generated
    private String adjustedActualQuantityUnit;

    /**
     * Creates an instance of GhgEmissions class.
     */
    @Generated
    private GhgEmissions() {
    }

    /**
     * Get the ch4 property: CH4 emission.
     * 
     * @return the ch4 value.
     */
    @Generated
    public Double getCh4() {
        return this.ch4;
    }

    /**
     * Get the ch4Unit property: CH4 emissions unit.
     * 
     * @return the ch4Unit value.
     */
    @Generated
    public String getCh4Unit() {
        return this.ch4Unit;
    }

    /**
     * Get the co2 property: CO2 emissions.
     * 
     * @return the co2 value.
     */
    @Generated
    public Double getCo2() {
        return this.co2;
    }

    /**
     * Get the co2Unit property: CO2 emissions unit.
     * 
     * @return the co2Unit value.
     */
    @Generated
    public String getCo2Unit() {
        return this.co2Unit;
    }

    /**
     * Get the co2e property: CO2e emissions.
     * 
     * @return the co2e value.
     */
    @Generated
    public Double getCo2e() {
        return this.co2e;
    }

    /**
     * Get the co2eUnit property: CO2e emissions unit.
     * 
     * @return the co2eUnit value.
     */
    @Generated
    public String getCo2eUnit() {
        return this.co2eUnit;
    }

    /**
     * Get the co2emt property: CO2emt emissions.
     * 
     * @return the co2emt value.
     */
    @Generated
    public Double getCo2emt() {
        return this.co2emt;
    }

    /**
     * Get the hfcs property: HFCs emissions.
     * 
     * @return the hfcs value.
     */
    @Generated
    public Double getHfcs() {
        return this.hfcs;
    }

    /**
     * Get the hfcsUnit property: HFCs emissions unit.
     * 
     * @return the hfcsUnit value.
     */
    @Generated
    public String getHfcsUnit() {
        return this.hfcsUnit;
    }

    /**
     * Get the n2o property: N2O emissions.
     * 
     * @return the n2o value.
     */
    @Generated
    public Double getN2o() {
        return this.n2o;
    }

    /**
     * Get the n2oUnit property: N2O emissions unit.
     * 
     * @return the n2oUnit value.
     */
    @Generated
    public String getN2oUnit() {
        return this.n2oUnit;
    }

    /**
     * Get the nf3 property: NF3 emissions.
     * 
     * @return the nf3 value.
     */
    @Generated
    public Double getNf3() {
        return this.nf3;
    }

    /**
     * Get the nf3Unit property: NF3 emissions unit.
     * 
     * @return the nf3Unit value.
     */
    @Generated
    public String getNf3Unit() {
        return this.nf3Unit;
    }

    /**
     * Get the pfcs property: PFCs emissions.
     * 
     * @return the pfcs value.
     */
    @Generated
    public Double getPfcs() {
        return this.pfcs;
    }

    /**
     * Get the pfcsUnit property: PFCs emissions unit.
     * 
     * @return the pfcsUnit value.
     */
    @Generated
    public String getPfcsUnit() {
        return this.pfcsUnit;
    }

    /**
     * Get the otherGhgs property: Other GHG emissions.
     * 
     * @return the otherGhgs value.
     */
    @Generated
    public Double getOtherGhgs() {
        return this.otherGhgs;
    }

    /**
     * Get the otherGhgsUnit property: Other GHG emissions unit.
     * 
     * @return the otherGhgsUnit value.
     */
    @Generated
    public String getOtherGhgsUnit() {
        return this.otherGhgsUnit;
    }

    /**
     * Get the sf6 property: SF6 emissions.
     * 
     * @return the sf6 value.
     */
    @Generated
    public Double getSf6() {
        return this.sf6;
    }

    /**
     * Get the sf6Unit property: SF6 emissions unit.
     * 
     * @return the sf6Unit value.
     */
    @Generated
    public String getSf6Unit() {
        return this.sf6Unit;
    }

    /**
     * Get the isMarketBased property: Is market based.
     * 
     * @return the isMarketBased value.
     */
    @Generated
    public Boolean isMarketBased() {
        return this.isMarketBased;
    }

    /**
     * Get the isBiogenic property: Is biogenic.
     * 
     * @return the isBiogenic value.
     */
    @Generated
    public Boolean isBiogenic() {
        return this.isBiogenic;
    }

    /**
     * Get the emissionCalculationModel property: Emission calculation model used for the calculation.
     * 
     * @return the emissionCalculationModel value.
     */
    @Generated
    public String getEmissionCalculationModel() {
        return this.emissionCalculationModel;
    }

    /**
     * Get the calculationLibrary property: Factor library used for the calculation.
     * 
     * @return the calculationLibrary value.
     */
    @Generated
    public String getCalculationLibrary() {
        return this.calculationLibrary;
    }

    /**
     * Get the emissionFactor property: Emission factor used for the calculation.
     * 
     * @return the emissionFactor value.
     */
    @Generated
    public String getEmissionFactor() {
        return this.emissionFactor;
    }

    /**
     * Get the adjustedActualQuantity property: Actual quantity of the activity responsible for the emission. For
     * example, the actual quantity for a business trip involving a hotel stay might be the number of nights stayed
     * multiplied by the estimation factor.
     * 
     * @return the adjustedActualQuantity value.
     */
    @Generated
    public String getAdjustedActualQuantity() {
        return this.adjustedActualQuantity;
    }

    /**
     * Get the adjustedActualQuantityUnit property: Actual quantity unit.
     * 
     * @return the adjustedActualQuantityUnit value.
     */
    @Generated
    public String getAdjustedActualQuantityUnit() {
        return this.adjustedActualQuantityUnit;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("ch4", this.ch4);
        jsonWriter.writeStringField("ch4Unit", this.ch4Unit);
        jsonWriter.writeNumberField("co2", this.co2);
        jsonWriter.writeStringField("co2Unit", this.co2Unit);
        jsonWriter.writeNumberField("co2e", this.co2e);
        jsonWriter.writeStringField("co2eUnit", this.co2eUnit);
        jsonWriter.writeNumberField("co2emt", this.co2emt);
        jsonWriter.writeNumberField("hfcs", this.hfcs);
        jsonWriter.writeStringField("hfcsUnit", this.hfcsUnit);
        jsonWriter.writeNumberField("n2o", this.n2o);
        jsonWriter.writeStringField("n2oUnit", this.n2oUnit);
        jsonWriter.writeNumberField("nf3", this.nf3);
        jsonWriter.writeStringField("nf3Unit", this.nf3Unit);
        jsonWriter.writeNumberField("pfcs", this.pfcs);
        jsonWriter.writeStringField("pfcsUnit", this.pfcsUnit);
        jsonWriter.writeNumberField("otherGhgs", this.otherGhgs);
        jsonWriter.writeStringField("otherGhgsUnit", this.otherGhgsUnit);
        jsonWriter.writeNumberField("sf6", this.sf6);
        jsonWriter.writeStringField("sf6Unit", this.sf6Unit);
        jsonWriter.writeBooleanField("isMarketBased", this.isMarketBased);
        jsonWriter.writeBooleanField("isBiogenic", this.isBiogenic);
        jsonWriter.writeStringField("emissionCalculationModel", this.emissionCalculationModel);
        jsonWriter.writeStringField("calculationLibrary", this.calculationLibrary);
        jsonWriter.writeStringField("emissionFactor", this.emissionFactor);
        jsonWriter.writeStringField("adjustedActualQuantity", this.adjustedActualQuantity);
        jsonWriter.writeStringField("adjustedActualQuantityUnit", this.adjustedActualQuantityUnit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GhgEmissions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GhgEmissions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the GhgEmissions.
     */
    @Generated
    public static GhgEmissions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GhgEmissions deserializedGhgEmissions = new GhgEmissions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ch4".equals(fieldName)) {
                    deserializedGhgEmissions.ch4 = reader.getNullable(JsonReader::getDouble);
                } else if ("ch4Unit".equals(fieldName)) {
                    deserializedGhgEmissions.ch4Unit = reader.getString();
                } else if ("co2".equals(fieldName)) {
                    deserializedGhgEmissions.co2 = reader.getNullable(JsonReader::getDouble);
                } else if ("co2Unit".equals(fieldName)) {
                    deserializedGhgEmissions.co2Unit = reader.getString();
                } else if ("co2e".equals(fieldName)) {
                    deserializedGhgEmissions.co2e = reader.getNullable(JsonReader::getDouble);
                } else if ("co2eUnit".equals(fieldName)) {
                    deserializedGhgEmissions.co2eUnit = reader.getString();
                } else if ("co2emt".equals(fieldName)) {
                    deserializedGhgEmissions.co2emt = reader.getNullable(JsonReader::getDouble);
                } else if ("hfcs".equals(fieldName)) {
                    deserializedGhgEmissions.hfcs = reader.getNullable(JsonReader::getDouble);
                } else if ("hfcsUnit".equals(fieldName)) {
                    deserializedGhgEmissions.hfcsUnit = reader.getString();
                } else if ("n2o".equals(fieldName)) {
                    deserializedGhgEmissions.n2o = reader.getNullable(JsonReader::getDouble);
                } else if ("n2oUnit".equals(fieldName)) {
                    deserializedGhgEmissions.n2oUnit = reader.getString();
                } else if ("nf3".equals(fieldName)) {
                    deserializedGhgEmissions.nf3 = reader.getNullable(JsonReader::getDouble);
                } else if ("nf3Unit".equals(fieldName)) {
                    deserializedGhgEmissions.nf3Unit = reader.getString();
                } else if ("pfcs".equals(fieldName)) {
                    deserializedGhgEmissions.pfcs = reader.getNullable(JsonReader::getDouble);
                } else if ("pfcsUnit".equals(fieldName)) {
                    deserializedGhgEmissions.pfcsUnit = reader.getString();
                } else if ("otherGhgs".equals(fieldName)) {
                    deserializedGhgEmissions.otherGhgs = reader.getNullable(JsonReader::getDouble);
                } else if ("otherGhgsUnit".equals(fieldName)) {
                    deserializedGhgEmissions.otherGhgsUnit = reader.getString();
                } else if ("sf6".equals(fieldName)) {
                    deserializedGhgEmissions.sf6 = reader.getNullable(JsonReader::getDouble);
                } else if ("sf6Unit".equals(fieldName)) {
                    deserializedGhgEmissions.sf6Unit = reader.getString();
                } else if ("isMarketBased".equals(fieldName)) {
                    deserializedGhgEmissions.isMarketBased = reader.getNullable(JsonReader::getBoolean);
                } else if ("isBiogenic".equals(fieldName)) {
                    deserializedGhgEmissions.isBiogenic = reader.getNullable(JsonReader::getBoolean);
                } else if ("emissionCalculationModel".equals(fieldName)) {
                    deserializedGhgEmissions.emissionCalculationModel = reader.getString();
                } else if ("calculationLibrary".equals(fieldName)) {
                    deserializedGhgEmissions.calculationLibrary = reader.getString();
                } else if ("emissionFactor".equals(fieldName)) {
                    deserializedGhgEmissions.emissionFactor = reader.getString();
                } else if ("adjustedActualQuantity".equals(fieldName)) {
                    deserializedGhgEmissions.adjustedActualQuantity = reader.getString();
                } else if ("adjustedActualQuantityUnit".equals(fieldName)) {
                    deserializedGhgEmissions.adjustedActualQuantityUnit = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGhgEmissions;
        });
    }
}
