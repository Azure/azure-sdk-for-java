// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.sustainabilityservices.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes the summary of the calculation.
 */
@Immutable
public final class CalculationSummary implements JsonSerializable<CalculationSummary> {
    /*
     * Calculation status.
     */
    @Generated
    private final CalculationStatusEnum status;

    /*
     * Total number of successful activities.
     */
    @Generated
    private final long successfulActivities;

    /*
     * Total number of failed activities.
     */
    @Generated
    private final long failedActivities;

    /*
     * Total number of excluded activities.
     */
    @Generated
    private final long excludedActivities;

    /*
     * Total number of processed activities.
     */
    @Generated
    private final long processedActivities;

    /**
     * Creates an instance of CalculationSummary class.
     * 
     * @param status the status value to set.
     * @param successfulActivities the successfulActivities value to set.
     * @param failedActivities the failedActivities value to set.
     * @param excludedActivities the excludedActivities value to set.
     * @param processedActivities the processedActivities value to set.
     */
    @Generated
    private CalculationSummary(CalculationStatusEnum status, long successfulActivities, long failedActivities,
        long excludedActivities, long processedActivities) {
        this.status = status;
        this.successfulActivities = successfulActivities;
        this.failedActivities = failedActivities;
        this.excludedActivities = excludedActivities;
        this.processedActivities = processedActivities;
    }

    /**
     * Get the status property: Calculation status.
     * 
     * @return the status value.
     */
    @Generated
    public CalculationStatusEnum getStatus() {
        return this.status;
    }

    /**
     * Get the successfulActivities property: Total number of successful activities.
     * 
     * @return the successfulActivities value.
     */
    @Generated
    public long getSuccessfulActivities() {
        return this.successfulActivities;
    }

    /**
     * Get the failedActivities property: Total number of failed activities.
     * 
     * @return the failedActivities value.
     */
    @Generated
    public long getFailedActivities() {
        return this.failedActivities;
    }

    /**
     * Get the excludedActivities property: Total number of excluded activities.
     * 
     * @return the excludedActivities value.
     */
    @Generated
    public long getExcludedActivities() {
        return this.excludedActivities;
    }

    /**
     * Get the processedActivities property: Total number of processed activities.
     * 
     * @return the processedActivities value.
     */
    @Generated
    public long getProcessedActivities() {
        return this.processedActivities;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeLongField("successfulActivities", this.successfulActivities);
        jsonWriter.writeLongField("failedActivities", this.failedActivities);
        jsonWriter.writeLongField("excludedActivities", this.excludedActivities);
        jsonWriter.writeLongField("processedActivities", this.processedActivities);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CalculationSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CalculationSummary if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CalculationSummary.
     */
    @Generated
    public static CalculationSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CalculationStatusEnum status = null;
            long successfulActivities = 0L;
            long failedActivities = 0L;
            long excludedActivities = 0L;
            long processedActivities = 0L;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    status = CalculationStatusEnum.fromString(reader.getString());
                } else if ("successfulActivities".equals(fieldName)) {
                    successfulActivities = reader.getLong();
                } else if ("failedActivities".equals(fieldName)) {
                    failedActivities = reader.getLong();
                } else if ("excludedActivities".equals(fieldName)) {
                    excludedActivities = reader.getLong();
                } else if ("processedActivities".equals(fieldName)) {
                    processedActivities = reader.getLong();
                } else {
                    reader.skipChildren();
                }
            }
            return new CalculationSummary(status, successfulActivities, failedActivities, excludedActivities,
                processedActivities);
        });
    }
}
