// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.sustainabilityservices.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Estimation factors are used to convert proxy data into activity data that can be used with an emission factor.
 * Typical examples are square footage of real estate to convert to energy or refrigerants, and the number of nights of
 * a hotel stay.
 */
@Immutable
public final class EstimationFactor implements JsonSerializable<EstimationFactor> {
    /*
     * Entity name.
     */
    @Generated
    private final String entityName;

    /*
     * ID.
     */
    @Generated
    private final String id;

    /*
     * Document reference.
     */
    @Generated
    private String documentationReference;

    /*
     * Estimation factor ID.
     */
    @Generated
    private String estimationFactorId;

    /*
     * Factor library which the estimation factor belongs to.
     */
    @Generated
    private final LookupField factorLibrary;

    /*
     * Estimation factor value.
     */
    @Generated
    private final double factorValue;

    /*
     * Unit for factor value.
     */
    @Generated
    private final LookupField factorValueUnit;

    /*
     * Estimation factor name.
     */
    @Generated
    private final String name;

    /*
     * Subtype.
     */
    @Generated
    private String subtype;

    /*
     * Type.
     */
    @Generated
    private String type;

    /*
     * Unit.
     */
    @Generated
    private final LookupField unit;

    /**
     * Creates an instance of EstimationFactor class.
     * 
     * @param entityName the entityName value to set.
     * @param id the id value to set.
     * @param factorLibrary the factorLibrary value to set.
     * @param factorValue the factorValue value to set.
     * @param factorValueUnit the factorValueUnit value to set.
     * @param name the name value to set.
     * @param unit the unit value to set.
     */
    @Generated
    private EstimationFactor(String entityName, String id, LookupField factorLibrary, double factorValue,
        LookupField factorValueUnit, String name, LookupField unit) {
        this.entityName = entityName;
        this.id = id;
        this.factorLibrary = factorLibrary;
        this.factorValue = factorValue;
        this.factorValueUnit = factorValueUnit;
        this.name = name;
        this.unit = unit;
    }

    /**
     * Get the entityName property: Entity name.
     * 
     * @return the entityName value.
     */
    @Generated
    public String getEntityName() {
        return this.entityName;
    }

    /**
     * Get the id property: ID.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the documentationReference property: Document reference.
     * 
     * @return the documentationReference value.
     */
    @Generated
    public String getDocumentationReference() {
        return this.documentationReference;
    }

    /**
     * Get the estimationFactorId property: Estimation factor ID.
     * 
     * @return the estimationFactorId value.
     */
    @Generated
    public String getEstimationFactorId() {
        return this.estimationFactorId;
    }

    /**
     * Get the factorLibrary property: Factor library which the estimation factor belongs to.
     * 
     * @return the factorLibrary value.
     */
    @Generated
    public LookupField getFactorLibrary() {
        return this.factorLibrary;
    }

    /**
     * Get the factorValue property: Estimation factor value.
     * 
     * @return the factorValue value.
     */
    @Generated
    public double getFactorValue() {
        return this.factorValue;
    }

    /**
     * Get the factorValueUnit property: Unit for factor value.
     * 
     * @return the factorValueUnit value.
     */
    @Generated
    public LookupField getFactorValueUnit() {
        return this.factorValueUnit;
    }

    /**
     * Get the name property: Estimation factor name.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the subtype property: Subtype.
     * 
     * @return the subtype value.
     */
    @Generated
    public String getSubtype() {
        return this.subtype;
    }

    /**
     * Get the type property: Type.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the unit property: Unit.
     * 
     * @return the unit value.
     */
    @Generated
    public LookupField getUnit() {
        return this.unit;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("entityName", this.entityName);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeJsonField("factorLibrary", this.factorLibrary);
        jsonWriter.writeDoubleField("factorValue", this.factorValue);
        jsonWriter.writeJsonField("factorValueUnit", this.factorValueUnit);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("unit", this.unit);
        jsonWriter.writeStringField("documentationReference", this.documentationReference);
        jsonWriter.writeStringField("subtype", this.subtype);
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EstimationFactor from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EstimationFactor if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EstimationFactor.
     */
    @Generated
    public static EstimationFactor fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String entityName = null;
            String id = null;
            String estimationFactorId = null;
            LookupField factorLibrary = null;
            double factorValue = 0.0;
            LookupField factorValueUnit = null;
            String name = null;
            LookupField unit = null;
            String documentationReference = null;
            String subtype = null;
            String type = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("entityName".equals(fieldName)) {
                    entityName = reader.getString();
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("estimationFactorId".equals(fieldName)) {
                    estimationFactorId = reader.getString();
                } else if ("factorLibrary".equals(fieldName)) {
                    factorLibrary = LookupField.fromJson(reader);
                } else if ("factorValue".equals(fieldName)) {
                    factorValue = reader.getDouble();
                } else if ("factorValueUnit".equals(fieldName)) {
                    factorValueUnit = LookupField.fromJson(reader);
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("unit".equals(fieldName)) {
                    unit = LookupField.fromJson(reader);
                } else if ("documentationReference".equals(fieldName)) {
                    documentationReference = reader.getString();
                } else if ("subtype".equals(fieldName)) {
                    subtype = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            EstimationFactor deserializedEstimationFactor
                = new EstimationFactor(entityName, id, factorLibrary, factorValue, factorValueUnit, name, unit);
            deserializedEstimationFactor.estimationFactorId = estimationFactorId;
            deserializedEstimationFactor.documentationReference = documentationReference;
            deserializedEstimationFactor.subtype = subtype;
            deserializedEstimationFactor.type = type;

            return deserializedEstimationFactor;
        });
    }
}
