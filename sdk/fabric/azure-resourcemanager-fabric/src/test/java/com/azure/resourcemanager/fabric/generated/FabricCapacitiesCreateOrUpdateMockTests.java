// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.fabric.FabricManager;
import com.azure.resourcemanager.fabric.models.CapacityAdministration;
import com.azure.resourcemanager.fabric.models.FabricCapacity;
import com.azure.resourcemanager.fabric.models.RpSku;
import com.azure.resourcemanager.fabric.models.RpSkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FabricCapacitiesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"state\":\"Updating\",\"administration\":{\"members\":[\"mpmngnzscxaqwoo\",\"hcbonqvpkvlr\"]}},\"sku\":{\"name\":\"njeaseipheofloke\",\"tier\":\"Fabric\"},\"location\":\"enjbdlwtgrhp\",\"tags\":{\"zj\":\"jumasx\"},\"id\":\"qyeg\",\"name\":\"alhbx\",\"type\":\"hejjz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        FabricManager manager = FabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        FabricCapacity response = manager.fabricCapacities()
            .define("ln")
            .withRegion("hjybigehoqfbo")
            .withExistingResourceGroup("gvdfgiotkftutq")
            .withSku(new RpSku().withName("tthzrvqd").withTier(RpSkuTier.FABRIC))
            .withAdministration(new CapacityAdministration().withMembers(Arrays.asList("ugnxkrxdqmi")))
            .withTags(mapOf("ywgndrv", "anyktzlcuiywg", "ocpecfvmmco", "nhzgpphrcgyn", "c", "fsxlzevgbmqjqa",
                "ccfwnfnbacfion", "pmivkwlzu"))
            .create();

        Assertions.assertEquals("enjbdlwtgrhp", response.location());
        Assertions.assertEquals("jumasx", response.tags().get("zj"));
        Assertions.assertEquals("njeaseipheofloke", response.sku().name());
        Assertions.assertEquals(RpSkuTier.FABRIC, response.sku().tier());
        Assertions.assertEquals("mpmngnzscxaqwoo", response.administration().members().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
