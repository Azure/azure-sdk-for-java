// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.fabric.models.CapacityAdministration;
import com.azure.resourcemanager.fabric.models.FabricCapacityUpdate;
import com.azure.resourcemanager.fabric.models.FabricCapacityUpdateProperties;
import com.azure.resourcemanager.fabric.models.RpSku;
import com.azure.resourcemanager.fabric.models.RpSkuTier;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FabricCapacityUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FabricCapacityUpdate model = BinaryData.fromString(
            "{\"sku\":{\"name\":\"to\",\"tier\":\"Fabric\"},\"tags\":{\"kfo\":\"ouajpsqucmpoyf\"},\"properties\":{\"administration\":{\"members\":[\"gjofjd\",\"eqsrdeupewnwreit\"]}}}")
            .toObject(FabricCapacityUpdate.class);
        Assertions.assertEquals("to", model.sku().name());
        Assertions.assertEquals(RpSkuTier.FABRIC, model.sku().tier());
        Assertions.assertEquals("ouajpsqucmpoyf", model.tags().get("kfo"));
        Assertions.assertEquals("gjofjd", model.properties().administration().members().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FabricCapacityUpdate model
            = new FabricCapacityUpdate().withSku(new RpSku().withName("to").withTier(RpSkuTier.FABRIC))
                .withTags(mapOf("kfo", "ouajpsqucmpoyf"))
                .withProperties(new FabricCapacityUpdateProperties().withAdministration(
                    new CapacityAdministration().withMembers(Arrays.asList("gjofjd", "eqsrdeupewnwreit"))));
        model = BinaryData.fromObject(model).toObject(FabricCapacityUpdate.class);
        Assertions.assertEquals("to", model.sku().name());
        Assertions.assertEquals(RpSkuTier.FABRIC, model.sku().tier());
        Assertions.assertEquals("ouajpsqucmpoyf", model.tags().get("kfo"));
        Assertions.assertEquals("gjofjd", model.properties().administration().members().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
