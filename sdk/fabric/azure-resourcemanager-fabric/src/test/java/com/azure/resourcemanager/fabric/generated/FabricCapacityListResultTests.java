// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.fabric.fluent.models.FabricCapacityInner;
import com.azure.resourcemanager.fabric.models.CapacityAdministration;
import com.azure.resourcemanager.fabric.models.FabricCapacityListResult;
import com.azure.resourcemanager.fabric.models.RpSku;
import com.azure.resourcemanager.fabric.models.RpSkuTier;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FabricCapacityListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FabricCapacityListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"state\":\"Paused\",\"administration\":{\"members\":[\"xqhabi\"]}},\"sku\":{\"name\":\"pikxwczbyscnpqxu\",\"tier\":\"Fabric\"},\"location\":\"y\",\"tags\":{\"rkxvdum\":\"wby\",\"xgaudccs\":\"grtfwvu\",\"jcny\":\"h\",\"kryhtnapczwlokj\":\"j\"},\"id\":\"emkkvnipjox\",\"name\":\"jnchgej\",\"type\":\"podmailzydehojwy\"}],\"nextLink\":\"uxinpmqnjaq\"}")
            .toObject(FabricCapacityListResult.class);
        Assertions.assertEquals("y", model.value().get(0).location());
        Assertions.assertEquals("wby", model.value().get(0).tags().get("rkxvdum"));
        Assertions.assertEquals("pikxwczbyscnpqxu", model.value().get(0).sku().name());
        Assertions.assertEquals(RpSkuTier.FABRIC, model.value().get(0).sku().tier());
        Assertions.assertEquals("xqhabi", model.value().get(0).administration().members().get(0));
        Assertions.assertEquals("uxinpmqnjaq", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FabricCapacityListResult model = new FabricCapacityListResult()
            .withValue(Arrays.asList(new FabricCapacityInner().withLocation("y")
                .withTags(mapOf("rkxvdum", "wby", "xgaudccs", "grtfwvu", "jcny", "h", "kryhtnapczwlokj", "j"))
                .withSku(new RpSku().withName("pikxwczbyscnpqxu").withTier(RpSkuTier.FABRIC))
                .withAdministration(new CapacityAdministration().withMembers(Arrays.asList("xqhabi")))))
            .withNextLink("uxinpmqnjaq");
        model = BinaryData.fromObject(model).toObject(FabricCapacityListResult.class);
        Assertions.assertEquals("y", model.value().get(0).location());
        Assertions.assertEquals("wby", model.value().get(0).tags().get("rkxvdum"));
        Assertions.assertEquals("pikxwczbyscnpqxu", model.value().get(0).sku().name());
        Assertions.assertEquals(RpSkuTier.FABRIC, model.value().get(0).sku().tier());
        Assertions.assertEquals("xqhabi", model.value().get(0).administration().members().get(0));
        Assertions.assertEquals("uxinpmqnjaq", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
