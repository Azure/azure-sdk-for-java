// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.fabric.FabricManager;
import com.azure.resourcemanager.fabric.models.CheckNameAvailabilityReason;
import com.azure.resourcemanager.fabric.models.CheckNameAvailabilityRequest;
import com.azure.resourcemanager.fabric.models.CheckNameAvailabilityResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FabricCapacitiesCheckNameAvailabilityWithResponseMockTests {
    @Test
    public void testCheckNameAvailabilityWithResponse() throws Exception {
        String responseStr = "{\"nameAvailable\":false,\"reason\":\"Invalid\",\"message\":\"uhrzayvvt\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        FabricManager manager = FabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CheckNameAvailabilityResponse response = manager.fabricCapacities()
            .checkNameAvailabilityWithResponse("wpyeicxmqciwqvh",
                new CheckNameAvailabilityRequest().withName("ixuigdtopbobj").withType("hm"),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(false, response.nameAvailable());
        Assertions.assertEquals(CheckNameAvailabilityReason.INVALID, response.reason());
        Assertions.assertEquals("uhrzayvvt", response.message());
    }
}
