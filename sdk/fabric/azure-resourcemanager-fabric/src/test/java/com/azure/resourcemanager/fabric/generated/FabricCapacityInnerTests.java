// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.fabric.fluent.models.FabricCapacityInner;
import com.azure.resourcemanager.fabric.models.CapacityAdministration;
import com.azure.resourcemanager.fabric.models.RpSku;
import com.azure.resourcemanager.fabric.models.RpSkuTier;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FabricCapacityInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FabricCapacityInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"state\":\"Provisioning\",\"administration\":{\"members\":[\"r\",\"zvcputegjvwmfda\",\"scmdvpjhulsuu\",\"mkjozkrwf\"]}},\"sku\":{\"name\":\"dio\",\"tier\":\"Fabric\"},\"location\":\"slwejdpvw\",\"tags\":{\"j\":\"qpsoacctazak\",\"yffdfdos\":\"ahbc\"},\"id\":\"gexpaojakhmsbz\",\"name\":\"hcrzevd\",\"type\":\"hlxaolthqtr\"}")
            .toObject(FabricCapacityInner.class);
        Assertions.assertEquals("slwejdpvw", model.location());
        Assertions.assertEquals("qpsoacctazak", model.tags().get("j"));
        Assertions.assertEquals("dio", model.sku().name());
        Assertions.assertEquals(RpSkuTier.FABRIC, model.sku().tier());
        Assertions.assertEquals("r", model.administration().members().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FabricCapacityInner model = new FabricCapacityInner().withLocation("slwejdpvw")
            .withTags(mapOf("j", "qpsoacctazak", "yffdfdos", "ahbc"))
            .withSku(new RpSku().withName("dio").withTier(RpSkuTier.FABRIC))
            .withAdministration(new CapacityAdministration()
                .withMembers(Arrays.asList("r", "zvcputegjvwmfda", "scmdvpjhulsuu", "mkjozkrwf")));
        model = BinaryData.fromObject(model).toObject(FabricCapacityInner.class);
        Assertions.assertEquals("slwejdpvw", model.location());
        Assertions.assertEquals("qpsoacctazak", model.tags().get("j"));
        Assertions.assertEquals("dio", model.sku().name());
        Assertions.assertEquals(RpSkuTier.FABRIC, model.sku().tier());
        Assertions.assertEquals("r", model.administration().members().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
