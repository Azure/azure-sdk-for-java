// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fabric.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The SKU details.
 */
@Immutable
public final class RpSkuDetailsForNewResourceInner implements JsonSerializable<RpSkuDetailsForNewResourceInner> {
    /*
     * The resource type
     */
    private String resourceType;

    /*
     * The SKU's name
     */
    private String name;

    /*
     * The list of available locations for the SKU
     */
    private List<String> locations;

    /**
     * Creates an instance of RpSkuDetailsForNewResourceInner class.
     */
    private RpSkuDetailsForNewResourceInner() {
    }

    /**
     * Get the resourceType property: The resource type.
     * 
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Get the name property: The SKU's name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the locations property: The list of available locations for the SKU.
     * 
     * @return the locations value.
     */
    public List<String> locations() {
        return this.locations;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceType in model RpSkuDetailsForNewResourceInner"));
        }
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property name in model RpSkuDetailsForNewResourceInner"));
        }
        if (locations() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property locations in model RpSkuDetailsForNewResourceInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RpSkuDetailsForNewResourceInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceType", this.resourceType);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("locations", this.locations, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RpSkuDetailsForNewResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RpSkuDetailsForNewResourceInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RpSkuDetailsForNewResourceInner.
     */
    public static RpSkuDetailsForNewResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RpSkuDetailsForNewResourceInner deserializedRpSkuDetailsForNewResourceInner
                = new RpSkuDetailsForNewResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceType".equals(fieldName)) {
                    deserializedRpSkuDetailsForNewResourceInner.resourceType = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedRpSkuDetailsForNewResourceInner.name = reader.getString();
                } else if ("locations".equals(fieldName)) {
                    List<String> locations = reader.readArray(reader1 -> reader1.getString());
                    deserializedRpSkuDetailsForNewResourceInner.locations = locations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRpSkuDetailsForNewResourceInner;
        });
    }
}
