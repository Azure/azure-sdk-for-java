// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Microsoft Fabric capacity properties.
 */
@Fluent
public final class FabricCapacityProperties implements JsonSerializable<FabricCapacityProperties> {
    /*
     * The current deployment state of Microsoft Fabric resource. The provisioningState is to indicate states for
     * resource provisioning.
     */
    private ProvisioningState provisioningState;

    /*
     * The current state of Microsoft Fabric resource. The state is to indicate more states outside of resource
     * provisioning.
     */
    private ResourceState state;

    /*
     * The capacity administration
     */
    private CapacityAdministration administration;

    /**
     * Creates an instance of FabricCapacityProperties class.
     */
    public FabricCapacityProperties() {
    }

    /**
     * Get the provisioningState property: The current deployment state of Microsoft Fabric resource. The
     * provisioningState is to indicate states for resource provisioning.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the state property: The current state of Microsoft Fabric resource. The state is to indicate more states
     * outside of resource provisioning.
     * 
     * @return the state value.
     */
    public ResourceState state() {
        return this.state;
    }

    /**
     * Get the administration property: The capacity administration.
     * 
     * @return the administration value.
     */
    public CapacityAdministration administration() {
        return this.administration;
    }

    /**
     * Set the administration property: The capacity administration.
     * 
     * @param administration the administration value to set.
     * @return the FabricCapacityProperties object itself.
     */
    public FabricCapacityProperties withAdministration(CapacityAdministration administration) {
        this.administration = administration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (administration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property administration in model FabricCapacityProperties"));
        } else {
            administration().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FabricCapacityProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("administration", this.administration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FabricCapacityProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FabricCapacityProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FabricCapacityProperties.
     */
    public static FabricCapacityProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FabricCapacityProperties deserializedFabricCapacityProperties = new FabricCapacityProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("administration".equals(fieldName)) {
                    deserializedFabricCapacityProperties.administration = CapacityAdministration.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedFabricCapacityProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("state".equals(fieldName)) {
                    deserializedFabricCapacityProperties.state = ResourceState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFabricCapacityProperties;
        });
    }
}
