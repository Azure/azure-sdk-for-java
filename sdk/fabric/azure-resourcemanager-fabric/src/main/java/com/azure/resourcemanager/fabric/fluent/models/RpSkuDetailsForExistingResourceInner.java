// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fabric.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.fabric.models.RpSku;
import java.io.IOException;

/**
 * An object that represents SKU details for existing resources.
 */
@Immutable
public final class RpSkuDetailsForExistingResourceInner
    implements JsonSerializable<RpSkuDetailsForExistingResourceInner> {
    /*
     * The resource type
     */
    private String resourceType;

    /*
     * The SKU details
     */
    private RpSku sku;

    /**
     * Creates an instance of RpSkuDetailsForExistingResourceInner class.
     */
    private RpSkuDetailsForExistingResourceInner() {
    }

    /**
     * Get the resourceType property: The resource type.
     * 
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Get the sku property: The SKU details.
     * 
     * @return the sku value.
     */
    public RpSku sku() {
        return this.sku;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceType in model RpSkuDetailsForExistingResourceInner"));
        }
        if (sku() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sku in model RpSkuDetailsForExistingResourceInner"));
        } else {
            sku().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RpSkuDetailsForExistingResourceInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceType", this.resourceType);
        jsonWriter.writeJsonField("sku", this.sku);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RpSkuDetailsForExistingResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RpSkuDetailsForExistingResourceInner if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RpSkuDetailsForExistingResourceInner.
     */
    public static RpSkuDetailsForExistingResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RpSkuDetailsForExistingResourceInner deserializedRpSkuDetailsForExistingResourceInner
                = new RpSkuDetailsForExistingResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceType".equals(fieldName)) {
                    deserializedRpSkuDetailsForExistingResourceInner.resourceType = reader.getString();
                } else if ("sku".equals(fieldName)) {
                    deserializedRpSkuDetailsForExistingResourceInner.sku = RpSku.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRpSkuDetailsForExistingResourceInner;
        });
    }
}
