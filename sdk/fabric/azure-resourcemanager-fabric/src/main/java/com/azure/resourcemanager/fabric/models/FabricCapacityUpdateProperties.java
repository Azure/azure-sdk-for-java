// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The updatable properties of the FabricCapacity.
 */
@Fluent
public final class FabricCapacityUpdateProperties implements JsonSerializable<FabricCapacityUpdateProperties> {
    /*
     * The capacity administration
     */
    private CapacityAdministration administration;

    /**
     * Creates an instance of FabricCapacityUpdateProperties class.
     */
    public FabricCapacityUpdateProperties() {
    }

    /**
     * Get the administration property: The capacity administration.
     * 
     * @return the administration value.
     */
    public CapacityAdministration administration() {
        return this.administration;
    }

    /**
     * Set the administration property: The capacity administration.
     * 
     * @param administration the administration value to set.
     * @return the FabricCapacityUpdateProperties object itself.
     */
    public FabricCapacityUpdateProperties withAdministration(CapacityAdministration administration) {
        this.administration = administration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (administration() != null) {
            administration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("administration", this.administration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FabricCapacityUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FabricCapacityUpdateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FabricCapacityUpdateProperties.
     */
    public static FabricCapacityUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FabricCapacityUpdateProperties deserializedFabricCapacityUpdateProperties
                = new FabricCapacityUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("administration".equals(fieldName)) {
                    deserializedFabricCapacityUpdateProperties.administration = CapacityAdministration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFabricCapacityUpdateProperties;
        });
    }
}
