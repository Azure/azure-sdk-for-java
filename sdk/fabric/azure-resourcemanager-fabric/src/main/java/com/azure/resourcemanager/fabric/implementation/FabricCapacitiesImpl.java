// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.fabric.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.fabric.fluent.FabricCapacitiesClient;
import com.azure.resourcemanager.fabric.fluent.models.CheckNameAvailabilityResponseInner;
import com.azure.resourcemanager.fabric.fluent.models.FabricCapacityInner;
import com.azure.resourcemanager.fabric.fluent.models.RpSkuDetailsForExistingResourceInner;
import com.azure.resourcemanager.fabric.fluent.models.RpSkuDetailsForNewResourceInner;
import com.azure.resourcemanager.fabric.models.CheckNameAvailabilityRequest;
import com.azure.resourcemanager.fabric.models.CheckNameAvailabilityResponse;
import com.azure.resourcemanager.fabric.models.FabricCapacities;
import com.azure.resourcemanager.fabric.models.FabricCapacity;
import com.azure.resourcemanager.fabric.models.RpSkuDetailsForExistingResource;
import com.azure.resourcemanager.fabric.models.RpSkuDetailsForNewResource;

public final class FabricCapacitiesImpl implements FabricCapacities {
    private static final ClientLogger LOGGER = new ClientLogger(FabricCapacitiesImpl.class);

    private final FabricCapacitiesClient innerClient;

    private final com.azure.resourcemanager.fabric.FabricManager serviceManager;

    public FabricCapacitiesImpl(FabricCapacitiesClient innerClient,
        com.azure.resourcemanager.fabric.FabricManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<FabricCapacity> getByResourceGroupWithResponse(String resourceGroupName, String capacityName,
        Context context) {
        Response<FabricCapacityInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, capacityName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new FabricCapacityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public FabricCapacity getByResourceGroup(String resourceGroupName, String capacityName) {
        FabricCapacityInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, capacityName);
        if (inner != null) {
            return new FabricCapacityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String capacityName) {
        this.serviceClient().delete(resourceGroupName, capacityName);
    }

    public void delete(String resourceGroupName, String capacityName, Context context) {
        this.serviceClient().delete(resourceGroupName, capacityName, context);
    }

    public PagedIterable<FabricCapacity> listByResourceGroup(String resourceGroupName) {
        PagedIterable<FabricCapacityInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FabricCapacityImpl(inner1, this.manager()));
    }

    public PagedIterable<FabricCapacity> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<FabricCapacityInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FabricCapacityImpl(inner1, this.manager()));
    }

    public PagedIterable<FabricCapacity> list() {
        PagedIterable<FabricCapacityInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FabricCapacityImpl(inner1, this.manager()));
    }

    public PagedIterable<FabricCapacity> list(Context context) {
        PagedIterable<FabricCapacityInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FabricCapacityImpl(inner1, this.manager()));
    }

    public void resume(String resourceGroupName, String capacityName) {
        this.serviceClient().resume(resourceGroupName, capacityName);
    }

    public void resume(String resourceGroupName, String capacityName, Context context) {
        this.serviceClient().resume(resourceGroupName, capacityName, context);
    }

    public void suspend(String resourceGroupName, String capacityName) {
        this.serviceClient().suspend(resourceGroupName, capacityName);
    }

    public void suspend(String resourceGroupName, String capacityName, Context context) {
        this.serviceClient().suspend(resourceGroupName, capacityName, context);
    }

    public Response<CheckNameAvailabilityResponse> checkNameAvailabilityWithResponse(String location,
        CheckNameAvailabilityRequest body, Context context) {
        Response<CheckNameAvailabilityResponseInner> inner
            = this.serviceClient().checkNameAvailabilityWithResponse(location, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CheckNameAvailabilityResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CheckNameAvailabilityResponse checkNameAvailability(String location, CheckNameAvailabilityRequest body) {
        CheckNameAvailabilityResponseInner inner = this.serviceClient().checkNameAvailability(location, body);
        if (inner != null) {
            return new CheckNameAvailabilityResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<RpSkuDetailsForExistingResource> listSkusForCapacity(String resourceGroupName,
        String capacityName) {
        PagedIterable<RpSkuDetailsForExistingResourceInner> inner
            = this.serviceClient().listSkusForCapacity(resourceGroupName, capacityName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new RpSkuDetailsForExistingResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<RpSkuDetailsForExistingResource> listSkusForCapacity(String resourceGroupName,
        String capacityName, Context context) {
        PagedIterable<RpSkuDetailsForExistingResourceInner> inner
            = this.serviceClient().listSkusForCapacity(resourceGroupName, capacityName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new RpSkuDetailsForExistingResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<RpSkuDetailsForNewResource> listSkus() {
        PagedIterable<RpSkuDetailsForNewResourceInner> inner = this.serviceClient().listSkus();
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new RpSkuDetailsForNewResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<RpSkuDetailsForNewResource> listSkus(Context context) {
        PagedIterable<RpSkuDetailsForNewResourceInner> inner = this.serviceClient().listSkus(context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new RpSkuDetailsForNewResourceImpl(inner1, this.manager()));
    }

    public FabricCapacity getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String capacityName = ResourceManagerUtils.getValueFromIdByName(id, "capacities");
        if (capacityName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'capacities'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, capacityName, Context.NONE).getValue();
    }

    public Response<FabricCapacity> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String capacityName = ResourceManagerUtils.getValueFromIdByName(id, "capacities");
        if (capacityName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'capacities'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, capacityName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String capacityName = ResourceManagerUtils.getValueFromIdByName(id, "capacities");
        if (capacityName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'capacities'.", id)));
        }
        this.delete(resourceGroupName, capacityName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String capacityName = ResourceManagerUtils.getValueFromIdByName(id, "capacities");
        if (capacityName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'capacities'.", id)));
        }
        this.delete(resourceGroupName, capacityName, context);
    }

    private FabricCapacitiesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.fabric.FabricManager manager() {
        return this.serviceManager;
    }

    public FabricCapacityImpl define(String name) {
        return new FabricCapacityImpl(name, this.manager());
    }
}
