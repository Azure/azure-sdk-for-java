// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recommendationsservice.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Account resource properties. */
@Fluent
public final class AccountResourceProperties {
    /*
     * Account configuration. This can only be set at RecommendationsService Account creation.
     */
    @JsonProperty(value = "configuration")
    private AccountConfiguration configuration;

    /*
     * The list of service endpoints authentication details.
     */
    @JsonProperty(value = "endpointAuthentications")
    private List<EndpointAuthentication> endpointAuthentications;

    /*
     * The list of CORS details.
     */
    @JsonProperty(value = "cors")
    private List<CorsRule> cors;

    /*
     * Connection string to write Accounts reports to.
     */
    @JsonProperty(value = "reportsConnectionString")
    private String reportsConnectionString;

    /*
     * The resource provisioning state.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /**
     * Get the configuration property: Account configuration. This can only be set at RecommendationsService Account
     * creation.
     *
     * @return the configuration value.
     */
    public AccountConfiguration configuration() {
        return this.configuration;
    }

    /**
     * Set the configuration property: Account configuration. This can only be set at RecommendationsService Account
     * creation.
     *
     * @param configuration the configuration value to set.
     * @return the AccountResourceProperties object itself.
     */
    public AccountResourceProperties withConfiguration(AccountConfiguration configuration) {
        this.configuration = configuration;
        return this;
    }

    /**
     * Get the endpointAuthentications property: The list of service endpoints authentication details.
     *
     * @return the endpointAuthentications value.
     */
    public List<EndpointAuthentication> endpointAuthentications() {
        return this.endpointAuthentications;
    }

    /**
     * Set the endpointAuthentications property: The list of service endpoints authentication details.
     *
     * @param endpointAuthentications the endpointAuthentications value to set.
     * @return the AccountResourceProperties object itself.
     */
    public AccountResourceProperties withEndpointAuthentications(List<EndpointAuthentication> endpointAuthentications) {
        this.endpointAuthentications = endpointAuthentications;
        return this;
    }

    /**
     * Get the cors property: The list of CORS details.
     *
     * @return the cors value.
     */
    public List<CorsRule> cors() {
        return this.cors;
    }

    /**
     * Set the cors property: The list of CORS details.
     *
     * @param cors the cors value to set.
     * @return the AccountResourceProperties object itself.
     */
    public AccountResourceProperties withCors(List<CorsRule> cors) {
        this.cors = cors;
        return this;
    }

    /**
     * Get the reportsConnectionString property: Connection string to write Accounts reports to.
     *
     * @return the reportsConnectionString value.
     */
    public String reportsConnectionString() {
        return this.reportsConnectionString;
    }

    /**
     * Set the reportsConnectionString property: Connection string to write Accounts reports to.
     *
     * @param reportsConnectionString the reportsConnectionString value to set.
     * @return the AccountResourceProperties object itself.
     */
    public AccountResourceProperties withReportsConnectionString(String reportsConnectionString) {
        this.reportsConnectionString = reportsConnectionString;
        return this;
    }

    /**
     * Get the provisioningState property: The resource provisioning state.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (endpointAuthentications() != null) {
            endpointAuthentications().forEach(e -> e.validate());
        }
        if (cors() != null) {
            cors().forEach(e -> e.validate());
        }
    }
}
