// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recommendationsservice.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Modeling resource properties. */
@Fluent
public final class ModelingResourceProperties {
    /*
     * Modeling features controls the set of supported scenarios\models being
     * computed. This can only be set at Modeling creation.
     */
    @JsonProperty(value = "features")
    private ModelingFeatures features;

    /*
     * Modeling frequency controls the modeling compute frequency.
     */
    @JsonProperty(value = "frequency")
    private ModelingFrequency frequency;

    /*
     * Modeling size controls the maximum supported input data size.
     */
    @JsonProperty(value = "size")
    private ModelingSize size;

    /*
     * The configuration to raw CDM data to be used as Modeling resource input.
     */
    @JsonProperty(value = "inputData")
    private ModelingInputData inputData;

    /*
     * The resource provisioning state.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /**
     * Get the features property: Modeling features controls the set of supported scenarios\models being computed. This
     * can only be set at Modeling creation.
     *
     * @return the features value.
     */
    public ModelingFeatures features() {
        return this.features;
    }

    /**
     * Set the features property: Modeling features controls the set of supported scenarios\models being computed. This
     * can only be set at Modeling creation.
     *
     * @param features the features value to set.
     * @return the ModelingResourceProperties object itself.
     */
    public ModelingResourceProperties withFeatures(ModelingFeatures features) {
        this.features = features;
        return this;
    }

    /**
     * Get the frequency property: Modeling frequency controls the modeling compute frequency.
     *
     * @return the frequency value.
     */
    public ModelingFrequency frequency() {
        return this.frequency;
    }

    /**
     * Set the frequency property: Modeling frequency controls the modeling compute frequency.
     *
     * @param frequency the frequency value to set.
     * @return the ModelingResourceProperties object itself.
     */
    public ModelingResourceProperties withFrequency(ModelingFrequency frequency) {
        this.frequency = frequency;
        return this;
    }

    /**
     * Get the size property: Modeling size controls the maximum supported input data size.
     *
     * @return the size value.
     */
    public ModelingSize size() {
        return this.size;
    }

    /**
     * Set the size property: Modeling size controls the maximum supported input data size.
     *
     * @param size the size value to set.
     * @return the ModelingResourceProperties object itself.
     */
    public ModelingResourceProperties withSize(ModelingSize size) {
        this.size = size;
        return this;
    }

    /**
     * Get the inputData property: The configuration to raw CDM data to be used as Modeling resource input.
     *
     * @return the inputData value.
     */
    public ModelingInputData inputData() {
        return this.inputData;
    }

    /**
     * Set the inputData property: The configuration to raw CDM data to be used as Modeling resource input.
     *
     * @param inputData the inputData value to set.
     * @return the ModelingResourceProperties object itself.
     */
    public ModelingResourceProperties withInputData(ModelingInputData inputData) {
        this.inputData = inputData;
        return this;
    }

    /**
     * Get the provisioningState property: The resource provisioning state.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (inputData() != null) {
            inputData().validate();
        }
    }
}
