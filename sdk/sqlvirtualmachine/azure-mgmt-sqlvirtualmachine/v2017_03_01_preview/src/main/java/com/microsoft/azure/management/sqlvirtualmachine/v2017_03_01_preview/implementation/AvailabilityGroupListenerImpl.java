/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.implementation;

import com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.AvailabilityGroupListener;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.LoadBalancerConfiguration;

class AvailabilityGroupListenerImpl extends CreatableUpdatableImpl<AvailabilityGroupListener, AvailabilityGroupListenerInner, AvailabilityGroupListenerImpl> implements AvailabilityGroupListener, AvailabilityGroupListener.Definition, AvailabilityGroupListener.Update {
    private final SqlVirtualMachineManager manager;
    private String resourceGroupName;
    private String sqlVirtualMachineGroupName;
    private String availabilityGroupListenerName;

    AvailabilityGroupListenerImpl(String name, SqlVirtualMachineManager manager) {
        super(name, new AvailabilityGroupListenerInner());
        this.manager = manager;
        // Set resource name
        this.availabilityGroupListenerName = name;
        //
    }

    AvailabilityGroupListenerImpl(AvailabilityGroupListenerInner inner, SqlVirtualMachineManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.availabilityGroupListenerName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.sqlVirtualMachineGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "sqlVirtualMachineGroups");
        this.availabilityGroupListenerName = IdParsingUtils.getValueFromIdByName(inner.id(), "availabilityGroupListeners");
        //
    }

    @Override
    public SqlVirtualMachineManager manager() {
        return this.manager;
    }

    @Override
    public Observable<AvailabilityGroupListener> createResourceAsync() {
        AvailabilityGroupListenersInner client = this.manager().inner().availabilityGroupListeners();
        return client.createOrUpdateAsync(this.resourceGroupName, this.sqlVirtualMachineGroupName, this.availabilityGroupListenerName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<AvailabilityGroupListener> updateResourceAsync() {
        AvailabilityGroupListenersInner client = this.manager().inner().availabilityGroupListeners();
        return client.createOrUpdateAsync(this.resourceGroupName, this.sqlVirtualMachineGroupName, this.availabilityGroupListenerName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<AvailabilityGroupListenerInner> getInnerAsync() {
        AvailabilityGroupListenersInner client = this.manager().inner().availabilityGroupListeners();
        return client.getAsync(this.resourceGroupName, this.sqlVirtualMachineGroupName, this.availabilityGroupListenerName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String availabilityGroupName() {
        return this.inner().availabilityGroupName();
    }

    @Override
    public Boolean createDefaultAvailabilityGroupIfNotExist() {
        return this.inner().createDefaultAvailabilityGroupIfNotExist();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public List<LoadBalancerConfiguration> loadBalancerConfigurations() {
        return this.inner().loadBalancerConfigurations();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Integer port() {
        return this.inner().port();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public AvailabilityGroupListenerImpl withExistingSqlVirtualMachineGroup(String resourceGroupName, String sqlVirtualMachineGroupName) {
        this.resourceGroupName = resourceGroupName;
        this.sqlVirtualMachineGroupName = sqlVirtualMachineGroupName;
        return this;
    }

    @Override
    public AvailabilityGroupListenerImpl withAvailabilityGroupName(String availabilityGroupName) {
        this.inner().withAvailabilityGroupName(availabilityGroupName);
        return this;
    }

    @Override
    public AvailabilityGroupListenerImpl withCreateDefaultAvailabilityGroupIfNotExist(Boolean createDefaultAvailabilityGroupIfNotExist) {
        this.inner().withCreateDefaultAvailabilityGroupIfNotExist(createDefaultAvailabilityGroupIfNotExist);
        return this;
    }

    @Override
    public AvailabilityGroupListenerImpl withLoadBalancerConfigurations(List<LoadBalancerConfiguration> loadBalancerConfigurations) {
        this.inner().withLoadBalancerConfigurations(loadBalancerConfigurations);
        return this;
    }

    @Override
    public AvailabilityGroupListenerImpl withPort(Integer port) {
        this.inner().withPort(port);
        return this;
    }

}
