/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.SqlVirtualMachineUpdate;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in SqlVirtualMachines.
 */
public class SqlVirtualMachinesInner implements InnerSupportsGet<SqlVirtualMachineInner>, InnerSupportsDelete<Void>, InnerSupportsListing<SqlVirtualMachineInner> {
    /** The Retrofit service to perform REST calls. */
    private SqlVirtualMachinesService service;
    /** The service client containing this operation class. */
    private SqlVirtualMachineManagementClientImpl client;

    /**
     * Initializes an instance of SqlVirtualMachinesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public SqlVirtualMachinesInner(Retrofit retrofit, SqlVirtualMachineManagementClientImpl client) {
        this.service = retrofit.create(SqlVirtualMachinesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for SqlVirtualMachines to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SqlVirtualMachinesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.SqlVirtualMachines listBySqlVmGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/sqlVirtualMachines")
        Observable<Response<ResponseBody>> listBySqlVmGroup(@Path("resourceGroupName") String resourceGroupName, @Path("sqlVirtualMachineGroupName") String sqlVirtualMachineGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.SqlVirtualMachines list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.SqlVirtualMachines getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("sqlVirtualMachineName") String sqlVirtualMachineName, @Path("subscriptionId") String subscriptionId, @Query("$expand") String expand, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.SqlVirtualMachines createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("sqlVirtualMachineName") String sqlVirtualMachineName, @Path("subscriptionId") String subscriptionId, @Body SqlVirtualMachineInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.SqlVirtualMachines beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("sqlVirtualMachineName") String sqlVirtualMachineName, @Path("subscriptionId") String subscriptionId, @Body SqlVirtualMachineInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.SqlVirtualMachines delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("sqlVirtualMachineName") String sqlVirtualMachineName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.SqlVirtualMachines beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("resourceGroupName") String resourceGroupName, @Path("sqlVirtualMachineName") String sqlVirtualMachineName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.SqlVirtualMachines update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}")
        Observable<Response<ResponseBody>> update(@Path("resourceGroupName") String resourceGroupName, @Path("sqlVirtualMachineName") String sqlVirtualMachineName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body SqlVirtualMachineUpdate parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.SqlVirtualMachines beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("sqlVirtualMachineName") String sqlVirtualMachineName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body SqlVirtualMachineUpdate parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.SqlVirtualMachines listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.SqlVirtualMachines listBySqlVmGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listBySqlVmGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.SqlVirtualMachines listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.sqlvirtualmachine.v2017_03_01_preview.SqlVirtualMachines listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the list of sql virtual machines in a SQL virtual machine group.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SqlVirtualMachineInner&gt; object if successful.
     */
    public PagedList<SqlVirtualMachineInner> listBySqlVmGroup(final String resourceGroupName, final String sqlVirtualMachineGroupName) {
        ServiceResponse<Page<SqlVirtualMachineInner>> response = listBySqlVmGroupSinglePageAsync(resourceGroupName, sqlVirtualMachineGroupName).toBlocking().single();
        return new PagedList<SqlVirtualMachineInner>(response.body()) {
            @Override
            public Page<SqlVirtualMachineInner> nextPage(String nextPageLink) {
                return listBySqlVmGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of sql virtual machines in a SQL virtual machine group.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SqlVirtualMachineInner>> listBySqlVmGroupAsync(final String resourceGroupName, final String sqlVirtualMachineGroupName, final ListOperationCallback<SqlVirtualMachineInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listBySqlVmGroupSinglePageAsync(resourceGroupName, sqlVirtualMachineGroupName),
            new Func1<String, Observable<ServiceResponse<Page<SqlVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> call(String nextPageLink) {
                    return listBySqlVmGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of sql virtual machines in a SQL virtual machine group.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SqlVirtualMachineInner&gt; object
     */
    public Observable<Page<SqlVirtualMachineInner>> listBySqlVmGroupAsync(final String resourceGroupName, final String sqlVirtualMachineGroupName) {
        return listBySqlVmGroupWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineGroupName)
            .map(new Func1<ServiceResponse<Page<SqlVirtualMachineInner>>, Page<SqlVirtualMachineInner>>() {
                @Override
                public Page<SqlVirtualMachineInner> call(ServiceResponse<Page<SqlVirtualMachineInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of sql virtual machines in a SQL virtual machine group.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SqlVirtualMachineInner&gt; object
     */
    public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> listBySqlVmGroupWithServiceResponseAsync(final String resourceGroupName, final String sqlVirtualMachineGroupName) {
        return listBySqlVmGroupSinglePageAsync(resourceGroupName, sqlVirtualMachineGroupName)
            .concatMap(new Func1<ServiceResponse<Page<SqlVirtualMachineInner>>, Observable<ServiceResponse<Page<SqlVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> call(ServiceResponse<Page<SqlVirtualMachineInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listBySqlVmGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of sql virtual machines in a SQL virtual machine group.
     *
    ServiceResponse<PageImpl<SqlVirtualMachineInner>> * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
    ServiceResponse<PageImpl<SqlVirtualMachineInner>> * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SqlVirtualMachineInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> listBySqlVmGroupSinglePageAsync(final String resourceGroupName, final String sqlVirtualMachineGroupName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (sqlVirtualMachineGroupName == null) {
            throw new IllegalArgumentException("Parameter sqlVirtualMachineGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listBySqlVmGroup(resourceGroupName, sqlVirtualMachineGroupName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<SqlVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SqlVirtualMachineInner>> result = listBySqlVmGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<SqlVirtualMachineInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SqlVirtualMachineInner>> listBySqlVmGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SqlVirtualMachineInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SqlVirtualMachineInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all SQL virtual machines in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SqlVirtualMachineInner&gt; object if successful.
     */
    public PagedList<SqlVirtualMachineInner> list() {
        ServiceResponse<Page<SqlVirtualMachineInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<SqlVirtualMachineInner>(response.body()) {
            @Override
            public Page<SqlVirtualMachineInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all SQL virtual machines in a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SqlVirtualMachineInner>> listAsync(final ListOperationCallback<SqlVirtualMachineInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<SqlVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all SQL virtual machines in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SqlVirtualMachineInner&gt; object
     */
    public Observable<Page<SqlVirtualMachineInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<SqlVirtualMachineInner>>, Page<SqlVirtualMachineInner>>() {
                @Override
                public Page<SqlVirtualMachineInner> call(ServiceResponse<Page<SqlVirtualMachineInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all SQL virtual machines in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SqlVirtualMachineInner&gt; object
     */
    public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<SqlVirtualMachineInner>>, Observable<ServiceResponse<Page<SqlVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> call(ServiceResponse<Page<SqlVirtualMachineInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all SQL virtual machines in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SqlVirtualMachineInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<SqlVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SqlVirtualMachineInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<SqlVirtualMachineInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SqlVirtualMachineInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SqlVirtualMachineInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SqlVirtualMachineInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SqlVirtualMachineInner object if successful.
     */
    public SqlVirtualMachineInner getByResourceGroup(String resourceGroupName, String sqlVirtualMachineName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName).toBlocking().single().body();
    }

    /**
     * Gets a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SqlVirtualMachineInner> getByResourceGroupAsync(String resourceGroupName, String sqlVirtualMachineName, final ServiceCallback<SqlVirtualMachineInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName), serviceCallback);
    }

    /**
     * Gets a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SqlVirtualMachineInner object
     */
    public Observable<SqlVirtualMachineInner> getByResourceGroupAsync(String resourceGroupName, String sqlVirtualMachineName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName).map(new Func1<ServiceResponse<SqlVirtualMachineInner>, SqlVirtualMachineInner>() {
            @Override
            public SqlVirtualMachineInner call(ServiceResponse<SqlVirtualMachineInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SqlVirtualMachineInner object
     */
    public Observable<ServiceResponse<SqlVirtualMachineInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String sqlVirtualMachineName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (sqlVirtualMachineName == null) {
            throw new IllegalArgumentException("Parameter sqlVirtualMachineName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        return service.getByResourceGroup(resourceGroupName, sqlVirtualMachineName, this.client.subscriptionId(), expand, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SqlVirtualMachineInner>>>() {
                @Override
                public Observable<ServiceResponse<SqlVirtualMachineInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SqlVirtualMachineInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param expand The child resources to include in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SqlVirtualMachineInner object if successful.
     */
    public SqlVirtualMachineInner getByResourceGroup(String resourceGroupName, String sqlVirtualMachineName, String expand) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName, expand).toBlocking().single().body();
    }

    /**
     * Gets a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param expand The child resources to include in the response.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SqlVirtualMachineInner> getByResourceGroupAsync(String resourceGroupName, String sqlVirtualMachineName, String expand, final ServiceCallback<SqlVirtualMachineInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName, expand), serviceCallback);
    }

    /**
     * Gets a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param expand The child resources to include in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SqlVirtualMachineInner object
     */
    public Observable<SqlVirtualMachineInner> getByResourceGroupAsync(String resourceGroupName, String sqlVirtualMachineName, String expand) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName, expand).map(new Func1<ServiceResponse<SqlVirtualMachineInner>, SqlVirtualMachineInner>() {
            @Override
            public SqlVirtualMachineInner call(ServiceResponse<SqlVirtualMachineInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param expand The child resources to include in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SqlVirtualMachineInner object
     */
    public Observable<ServiceResponse<SqlVirtualMachineInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String sqlVirtualMachineName, String expand) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (sqlVirtualMachineName == null) {
            throw new IllegalArgumentException("Parameter sqlVirtualMachineName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(resourceGroupName, sqlVirtualMachineName, this.client.subscriptionId(), expand, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SqlVirtualMachineInner>>>() {
                @Override
                public Observable<ServiceResponse<SqlVirtualMachineInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SqlVirtualMachineInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SqlVirtualMachineInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SqlVirtualMachineInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SqlVirtualMachineInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param parameters The SQL virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SqlVirtualMachineInner object if successful.
     */
    public SqlVirtualMachineInner createOrUpdate(String resourceGroupName, String sqlVirtualMachineName, SqlVirtualMachineInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName, parameters).toBlocking().last().body();
    }

    /**
     * Creates or updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param parameters The SQL virtual machine.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SqlVirtualMachineInner> createOrUpdateAsync(String resourceGroupName, String sqlVirtualMachineName, SqlVirtualMachineInner parameters, final ServiceCallback<SqlVirtualMachineInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param parameters The SQL virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<SqlVirtualMachineInner> createOrUpdateAsync(String resourceGroupName, String sqlVirtualMachineName, SqlVirtualMachineInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName, parameters).map(new Func1<ServiceResponse<SqlVirtualMachineInner>, SqlVirtualMachineInner>() {
            @Override
            public SqlVirtualMachineInner call(ServiceResponse<SqlVirtualMachineInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param parameters The SQL virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<SqlVirtualMachineInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String sqlVirtualMachineName, SqlVirtualMachineInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (sqlVirtualMachineName == null) {
            throw new IllegalArgumentException("Parameter sqlVirtualMachineName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(resourceGroupName, sqlVirtualMachineName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<SqlVirtualMachineInner>() { }.getType());
    }

    /**
     * Creates or updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param parameters The SQL virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SqlVirtualMachineInner object if successful.
     */
    public SqlVirtualMachineInner beginCreateOrUpdate(String resourceGroupName, String sqlVirtualMachineName, SqlVirtualMachineInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param parameters The SQL virtual machine.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SqlVirtualMachineInner> beginCreateOrUpdateAsync(String resourceGroupName, String sqlVirtualMachineName, SqlVirtualMachineInner parameters, final ServiceCallback<SqlVirtualMachineInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param parameters The SQL virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SqlVirtualMachineInner object
     */
    public Observable<SqlVirtualMachineInner> beginCreateOrUpdateAsync(String resourceGroupName, String sqlVirtualMachineName, SqlVirtualMachineInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName, parameters).map(new Func1<ServiceResponse<SqlVirtualMachineInner>, SqlVirtualMachineInner>() {
            @Override
            public SqlVirtualMachineInner call(ServiceResponse<SqlVirtualMachineInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param parameters The SQL virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SqlVirtualMachineInner object
     */
    public Observable<ServiceResponse<SqlVirtualMachineInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String sqlVirtualMachineName, SqlVirtualMachineInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (sqlVirtualMachineName == null) {
            throw new IllegalArgumentException("Parameter sqlVirtualMachineName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginCreateOrUpdate(resourceGroupName, sqlVirtualMachineName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SqlVirtualMachineInner>>>() {
                @Override
                public Observable<ServiceResponse<SqlVirtualMachineInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SqlVirtualMachineInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SqlVirtualMachineInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SqlVirtualMachineInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SqlVirtualMachineInner>() { }.getType())
                .register(201, new TypeToken<SqlVirtualMachineInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String sqlVirtualMachineName) {
        deleteWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName).toBlocking().last().body();
    }

    /**
     * Deletes a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String sqlVirtualMachineName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName), serviceCallback);
    }

    /**
     * Deletes a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String sqlVirtualMachineName) {
        return deleteWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String sqlVirtualMachineName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (sqlVirtualMachineName == null) {
            throw new IllegalArgumentException("Parameter sqlVirtualMachineName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(resourceGroupName, sqlVirtualMachineName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String sqlVirtualMachineName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName).toBlocking().single().body();
    }

    /**
     * Deletes a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String sqlVirtualMachineName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName), serviceCallback);
    }

    /**
     * Deletes a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String sqlVirtualMachineName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String sqlVirtualMachineName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (sqlVirtualMachineName == null) {
            throw new IllegalArgumentException("Parameter sqlVirtualMachineName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(resourceGroupName, sqlVirtualMachineName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SqlVirtualMachineInner object if successful.
     */
    public SqlVirtualMachineInner update(String resourceGroupName, String sqlVirtualMachineName) {
        return updateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName).toBlocking().last().body();
    }

    /**
     * Updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SqlVirtualMachineInner> updateAsync(String resourceGroupName, String sqlVirtualMachineName, final ServiceCallback<SqlVirtualMachineInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName), serviceCallback);
    }

    /**
     * Updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<SqlVirtualMachineInner> updateAsync(String resourceGroupName, String sqlVirtualMachineName) {
        return updateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName).map(new Func1<ServiceResponse<SqlVirtualMachineInner>, SqlVirtualMachineInner>() {
            @Override
            public SqlVirtualMachineInner call(ServiceResponse<SqlVirtualMachineInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<SqlVirtualMachineInner>> updateWithServiceResponseAsync(String resourceGroupName, String sqlVirtualMachineName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (sqlVirtualMachineName == null) {
            throw new IllegalArgumentException("Parameter sqlVirtualMachineName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        SqlVirtualMachineUpdate parameters = new SqlVirtualMachineUpdate();
        parameters.withTags(null);
        Observable<Response<ResponseBody>> observable = service.update(resourceGroupName, sqlVirtualMachineName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<SqlVirtualMachineInner>() { }.getType());
    }
    /**
     * Updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param tags Resource tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SqlVirtualMachineInner object if successful.
     */
    public SqlVirtualMachineInner update(String resourceGroupName, String sqlVirtualMachineName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName, tags).toBlocking().last().body();
    }

    /**
     * Updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param tags Resource tags.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SqlVirtualMachineInner> updateAsync(String resourceGroupName, String sqlVirtualMachineName, Map<String, String> tags, final ServiceCallback<SqlVirtualMachineInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName, tags), serviceCallback);
    }

    /**
     * Updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param tags Resource tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<SqlVirtualMachineInner> updateAsync(String resourceGroupName, String sqlVirtualMachineName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName, tags).map(new Func1<ServiceResponse<SqlVirtualMachineInner>, SqlVirtualMachineInner>() {
            @Override
            public SqlVirtualMachineInner call(ServiceResponse<SqlVirtualMachineInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param tags Resource tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<SqlVirtualMachineInner>> updateWithServiceResponseAsync(String resourceGroupName, String sqlVirtualMachineName, Map<String, String> tags) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (sqlVirtualMachineName == null) {
            throw new IllegalArgumentException("Parameter sqlVirtualMachineName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        SqlVirtualMachineUpdate parameters = new SqlVirtualMachineUpdate();
        parameters.withTags(tags);
        Observable<Response<ResponseBody>> observable = service.update(resourceGroupName, sqlVirtualMachineName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<SqlVirtualMachineInner>() { }.getType());
    }

    /**
     * Updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SqlVirtualMachineInner object if successful.
     */
    public SqlVirtualMachineInner beginUpdate(String resourceGroupName, String sqlVirtualMachineName) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName).toBlocking().single().body();
    }

    /**
     * Updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SqlVirtualMachineInner> beginUpdateAsync(String resourceGroupName, String sqlVirtualMachineName, final ServiceCallback<SqlVirtualMachineInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName), serviceCallback);
    }

    /**
     * Updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SqlVirtualMachineInner object
     */
    public Observable<SqlVirtualMachineInner> beginUpdateAsync(String resourceGroupName, String sqlVirtualMachineName) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName).map(new Func1<ServiceResponse<SqlVirtualMachineInner>, SqlVirtualMachineInner>() {
            @Override
            public SqlVirtualMachineInner call(ServiceResponse<SqlVirtualMachineInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SqlVirtualMachineInner object
     */
    public Observable<ServiceResponse<SqlVirtualMachineInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String sqlVirtualMachineName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (sqlVirtualMachineName == null) {
            throw new IllegalArgumentException("Parameter sqlVirtualMachineName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        SqlVirtualMachineUpdate parameters = new SqlVirtualMachineUpdate();
        parameters.withTags(null);
        return service.beginUpdate(resourceGroupName, sqlVirtualMachineName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SqlVirtualMachineInner>>>() {
                @Override
                public Observable<ServiceResponse<SqlVirtualMachineInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SqlVirtualMachineInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param tags Resource tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SqlVirtualMachineInner object if successful.
     */
    public SqlVirtualMachineInner beginUpdate(String resourceGroupName, String sqlVirtualMachineName, Map<String, String> tags) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName, tags).toBlocking().single().body();
    }

    /**
     * Updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param tags Resource tags.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SqlVirtualMachineInner> beginUpdateAsync(String resourceGroupName, String sqlVirtualMachineName, Map<String, String> tags, final ServiceCallback<SqlVirtualMachineInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName, tags), serviceCallback);
    }

    /**
     * Updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param tags Resource tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SqlVirtualMachineInner object
     */
    public Observable<SqlVirtualMachineInner> beginUpdateAsync(String resourceGroupName, String sqlVirtualMachineName, Map<String, String> tags) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, sqlVirtualMachineName, tags).map(new Func1<ServiceResponse<SqlVirtualMachineInner>, SqlVirtualMachineInner>() {
            @Override
            public SqlVirtualMachineInner call(ServiceResponse<SqlVirtualMachineInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a SQL virtual machine.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param tags Resource tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SqlVirtualMachineInner object
     */
    public Observable<ServiceResponse<SqlVirtualMachineInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String sqlVirtualMachineName, Map<String, String> tags) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (sqlVirtualMachineName == null) {
            throw new IllegalArgumentException("Parameter sqlVirtualMachineName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        SqlVirtualMachineUpdate parameters = new SqlVirtualMachineUpdate();
        parameters.withTags(tags);
        return service.beginUpdate(resourceGroupName, sqlVirtualMachineName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SqlVirtualMachineInner>>>() {
                @Override
                public Observable<ServiceResponse<SqlVirtualMachineInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SqlVirtualMachineInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SqlVirtualMachineInner> beginUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SqlVirtualMachineInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SqlVirtualMachineInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all SQL virtual machines in a resource group.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SqlVirtualMachineInner&gt; object if successful.
     */
    public PagedList<SqlVirtualMachineInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<SqlVirtualMachineInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<SqlVirtualMachineInner>(response.body()) {
            @Override
            public Page<SqlVirtualMachineInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all SQL virtual machines in a resource group.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SqlVirtualMachineInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<SqlVirtualMachineInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<SqlVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all SQL virtual machines in a resource group.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SqlVirtualMachineInner&gt; object
     */
    public Observable<Page<SqlVirtualMachineInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<SqlVirtualMachineInner>>, Page<SqlVirtualMachineInner>>() {
                @Override
                public Page<SqlVirtualMachineInner> call(ServiceResponse<Page<SqlVirtualMachineInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all SQL virtual machines in a resource group.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SqlVirtualMachineInner&gt; object
     */
    public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<SqlVirtualMachineInner>>, Observable<ServiceResponse<Page<SqlVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> call(ServiceResponse<Page<SqlVirtualMachineInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all SQL virtual machines in a resource group.
     *
    ServiceResponse<PageImpl<SqlVirtualMachineInner>> * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SqlVirtualMachineInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(resourceGroupName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<SqlVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SqlVirtualMachineInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<SqlVirtualMachineInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SqlVirtualMachineInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SqlVirtualMachineInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SqlVirtualMachineInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of sql virtual machines in a SQL virtual machine group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SqlVirtualMachineInner&gt; object if successful.
     */
    public PagedList<SqlVirtualMachineInner> listBySqlVmGroupNext(final String nextPageLink) {
        ServiceResponse<Page<SqlVirtualMachineInner>> response = listBySqlVmGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<SqlVirtualMachineInner>(response.body()) {
            @Override
            public Page<SqlVirtualMachineInner> nextPage(String nextPageLink) {
                return listBySqlVmGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of sql virtual machines in a SQL virtual machine group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SqlVirtualMachineInner>> listBySqlVmGroupNextAsync(final String nextPageLink, final ServiceFuture<List<SqlVirtualMachineInner>> serviceFuture, final ListOperationCallback<SqlVirtualMachineInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listBySqlVmGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<SqlVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> call(String nextPageLink) {
                    return listBySqlVmGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of sql virtual machines in a SQL virtual machine group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SqlVirtualMachineInner&gt; object
     */
    public Observable<Page<SqlVirtualMachineInner>> listBySqlVmGroupNextAsync(final String nextPageLink) {
        return listBySqlVmGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<SqlVirtualMachineInner>>, Page<SqlVirtualMachineInner>>() {
                @Override
                public Page<SqlVirtualMachineInner> call(ServiceResponse<Page<SqlVirtualMachineInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of sql virtual machines in a SQL virtual machine group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SqlVirtualMachineInner&gt; object
     */
    public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> listBySqlVmGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listBySqlVmGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<SqlVirtualMachineInner>>, Observable<ServiceResponse<Page<SqlVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> call(ServiceResponse<Page<SqlVirtualMachineInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listBySqlVmGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of sql virtual machines in a SQL virtual machine group.
     *
    ServiceResponse<PageImpl<SqlVirtualMachineInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SqlVirtualMachineInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> listBySqlVmGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listBySqlVmGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<SqlVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SqlVirtualMachineInner>> result = listBySqlVmGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<SqlVirtualMachineInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SqlVirtualMachineInner>> listBySqlVmGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SqlVirtualMachineInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SqlVirtualMachineInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all SQL virtual machines in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SqlVirtualMachineInner&gt; object if successful.
     */
    public PagedList<SqlVirtualMachineInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<SqlVirtualMachineInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<SqlVirtualMachineInner>(response.body()) {
            @Override
            public Page<SqlVirtualMachineInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all SQL virtual machines in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SqlVirtualMachineInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<SqlVirtualMachineInner>> serviceFuture, final ListOperationCallback<SqlVirtualMachineInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<SqlVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all SQL virtual machines in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SqlVirtualMachineInner&gt; object
     */
    public Observable<Page<SqlVirtualMachineInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<SqlVirtualMachineInner>>, Page<SqlVirtualMachineInner>>() {
                @Override
                public Page<SqlVirtualMachineInner> call(ServiceResponse<Page<SqlVirtualMachineInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all SQL virtual machines in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SqlVirtualMachineInner&gt; object
     */
    public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<SqlVirtualMachineInner>>, Observable<ServiceResponse<Page<SqlVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> call(ServiceResponse<Page<SqlVirtualMachineInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all SQL virtual machines in a subscription.
     *
    ServiceResponse<PageImpl<SqlVirtualMachineInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SqlVirtualMachineInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<SqlVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SqlVirtualMachineInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<SqlVirtualMachineInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SqlVirtualMachineInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SqlVirtualMachineInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SqlVirtualMachineInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all SQL virtual machines in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SqlVirtualMachineInner&gt; object if successful.
     */
    public PagedList<SqlVirtualMachineInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<SqlVirtualMachineInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<SqlVirtualMachineInner>(response.body()) {
            @Override
            public Page<SqlVirtualMachineInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all SQL virtual machines in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SqlVirtualMachineInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<SqlVirtualMachineInner>> serviceFuture, final ListOperationCallback<SqlVirtualMachineInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<SqlVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all SQL virtual machines in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SqlVirtualMachineInner&gt; object
     */
    public Observable<Page<SqlVirtualMachineInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<SqlVirtualMachineInner>>, Page<SqlVirtualMachineInner>>() {
                @Override
                public Page<SqlVirtualMachineInner> call(ServiceResponse<Page<SqlVirtualMachineInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all SQL virtual machines in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SqlVirtualMachineInner&gt; object
     */
    public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<SqlVirtualMachineInner>>, Observable<ServiceResponse<Page<SqlVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> call(ServiceResponse<Page<SqlVirtualMachineInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all SQL virtual machines in a resource group.
     *
    ServiceResponse<PageImpl<SqlVirtualMachineInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SqlVirtualMachineInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<SqlVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SqlVirtualMachineInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SqlVirtualMachineInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<SqlVirtualMachineInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SqlVirtualMachineInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SqlVirtualMachineInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SqlVirtualMachineInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
