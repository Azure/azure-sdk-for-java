// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Set assessment schedule for SQL Server.
 */
@Fluent
public final class Schedule implements JsonSerializable<Schedule> {
    /*
     * Enable or disable assessment schedule on SQL virtual machine.
     */
    private Boolean enable;

    /*
     * Number of weeks to schedule between 2 assessment runs. Takes value from 1-6
     */
    private Integer weeklyInterval;

    /*
     * Occurrence of the DayOfWeek day within a month to schedule assessment. Takes values: 1,2,3,4 and -1. Use -1 for
     * last DayOfWeek day of the month
     */
    private Integer monthlyOccurrence;

    /*
     * Day of the week to run assessment.
     */
    private AssessmentDayOfWeek dayOfWeek;

    /*
     * Time of the day in HH:mm format. Eg. 17:30
     */
    private String startTime;

    /**
     * Creates an instance of Schedule class.
     */
    public Schedule() {
    }

    /**
     * Get the enable property: Enable or disable assessment schedule on SQL virtual machine.
     * 
     * @return the enable value.
     */
    public Boolean enable() {
        return this.enable;
    }

    /**
     * Set the enable property: Enable or disable assessment schedule on SQL virtual machine.
     * 
     * @param enable the enable value to set.
     * @return the Schedule object itself.
     */
    public Schedule withEnable(Boolean enable) {
        this.enable = enable;
        return this;
    }

    /**
     * Get the weeklyInterval property: Number of weeks to schedule between 2 assessment runs. Takes value from 1-6.
     * 
     * @return the weeklyInterval value.
     */
    public Integer weeklyInterval() {
        return this.weeklyInterval;
    }

    /**
     * Set the weeklyInterval property: Number of weeks to schedule between 2 assessment runs. Takes value from 1-6.
     * 
     * @param weeklyInterval the weeklyInterval value to set.
     * @return the Schedule object itself.
     */
    public Schedule withWeeklyInterval(Integer weeklyInterval) {
        this.weeklyInterval = weeklyInterval;
        return this;
    }

    /**
     * Get the monthlyOccurrence property: Occurrence of the DayOfWeek day within a month to schedule assessment. Takes
     * values: 1,2,3,4 and -1. Use -1 for last DayOfWeek day of the month.
     * 
     * @return the monthlyOccurrence value.
     */
    public Integer monthlyOccurrence() {
        return this.monthlyOccurrence;
    }

    /**
     * Set the monthlyOccurrence property: Occurrence of the DayOfWeek day within a month to schedule assessment. Takes
     * values: 1,2,3,4 and -1. Use -1 for last DayOfWeek day of the month.
     * 
     * @param monthlyOccurrence the monthlyOccurrence value to set.
     * @return the Schedule object itself.
     */
    public Schedule withMonthlyOccurrence(Integer monthlyOccurrence) {
        this.monthlyOccurrence = monthlyOccurrence;
        return this;
    }

    /**
     * Get the dayOfWeek property: Day of the week to run assessment.
     * 
     * @return the dayOfWeek value.
     */
    public AssessmentDayOfWeek dayOfWeek() {
        return this.dayOfWeek;
    }

    /**
     * Set the dayOfWeek property: Day of the week to run assessment.
     * 
     * @param dayOfWeek the dayOfWeek value to set.
     * @return the Schedule object itself.
     */
    public Schedule withDayOfWeek(AssessmentDayOfWeek dayOfWeek) {
        this.dayOfWeek = dayOfWeek;
        return this;
    }

    /**
     * Get the startTime property: Time of the day in HH:mm format. Eg. 17:30.
     * 
     * @return the startTime value.
     */
    public String startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: Time of the day in HH:mm format. Eg. 17:30.
     * 
     * @param startTime the startTime value to set.
     * @return the Schedule object itself.
     */
    public Schedule withStartTime(String startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enable", this.enable);
        jsonWriter.writeNumberField("weeklyInterval", this.weeklyInterval);
        jsonWriter.writeNumberField("monthlyOccurrence", this.monthlyOccurrence);
        jsonWriter.writeStringField("dayOfWeek", this.dayOfWeek == null ? null : this.dayOfWeek.toString());
        jsonWriter.writeStringField("startTime", this.startTime);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Schedule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Schedule if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Schedule.
     */
    public static Schedule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Schedule deserializedSchedule = new Schedule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enable".equals(fieldName)) {
                    deserializedSchedule.enable = reader.getNullable(JsonReader::getBoolean);
                } else if ("weeklyInterval".equals(fieldName)) {
                    deserializedSchedule.weeklyInterval = reader.getNullable(JsonReader::getInt);
                } else if ("monthlyOccurrence".equals(fieldName)) {
                    deserializedSchedule.monthlyOccurrence = reader.getNullable(JsonReader::getInt);
                } else if ("dayOfWeek".equals(fieldName)) {
                    deserializedSchedule.dayOfWeek = AssessmentDayOfWeek.fromString(reader.getString());
                } else if ("startTime".equals(fieldName)) {
                    deserializedSchedule.startTime = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSchedule;
        });
    }
}
