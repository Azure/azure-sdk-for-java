// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Set a patching window during which Windows and SQL patches will be applied.
 */
@Fluent
public final class AutoPatchingSettings implements JsonSerializable<AutoPatchingSettings> {
    /*
     * Enable or disable autopatching on SQL virtual machine.
     */
    private Boolean enable;

    /*
     * Day of week to apply the patch on.
     */
    private DayOfWeek dayOfWeek;

    /*
     * Hour of the day when patching is initiated. Local VM time.
     */
    private Integer maintenanceWindowStartingHour;

    /*
     * Duration of patching.
     */
    private Integer maintenanceWindowDuration;

    /**
     * Creates an instance of AutoPatchingSettings class.
     */
    public AutoPatchingSettings() {
    }

    /**
     * Get the enable property: Enable or disable autopatching on SQL virtual machine.
     * 
     * @return the enable value.
     */
    public Boolean enable() {
        return this.enable;
    }

    /**
     * Set the enable property: Enable or disable autopatching on SQL virtual machine.
     * 
     * @param enable the enable value to set.
     * @return the AutoPatchingSettings object itself.
     */
    public AutoPatchingSettings withEnable(Boolean enable) {
        this.enable = enable;
        return this;
    }

    /**
     * Get the dayOfWeek property: Day of week to apply the patch on.
     * 
     * @return the dayOfWeek value.
     */
    public DayOfWeek dayOfWeek() {
        return this.dayOfWeek;
    }

    /**
     * Set the dayOfWeek property: Day of week to apply the patch on.
     * 
     * @param dayOfWeek the dayOfWeek value to set.
     * @return the AutoPatchingSettings object itself.
     */
    public AutoPatchingSettings withDayOfWeek(DayOfWeek dayOfWeek) {
        this.dayOfWeek = dayOfWeek;
        return this;
    }

    /**
     * Get the maintenanceWindowStartingHour property: Hour of the day when patching is initiated. Local VM time.
     * 
     * @return the maintenanceWindowStartingHour value.
     */
    public Integer maintenanceWindowStartingHour() {
        return this.maintenanceWindowStartingHour;
    }

    /**
     * Set the maintenanceWindowStartingHour property: Hour of the day when patching is initiated. Local VM time.
     * 
     * @param maintenanceWindowStartingHour the maintenanceWindowStartingHour value to set.
     * @return the AutoPatchingSettings object itself.
     */
    public AutoPatchingSettings withMaintenanceWindowStartingHour(Integer maintenanceWindowStartingHour) {
        this.maintenanceWindowStartingHour = maintenanceWindowStartingHour;
        return this;
    }

    /**
     * Get the maintenanceWindowDuration property: Duration of patching.
     * 
     * @return the maintenanceWindowDuration value.
     */
    public Integer maintenanceWindowDuration() {
        return this.maintenanceWindowDuration;
    }

    /**
     * Set the maintenanceWindowDuration property: Duration of patching.
     * 
     * @param maintenanceWindowDuration the maintenanceWindowDuration value to set.
     * @return the AutoPatchingSettings object itself.
     */
    public AutoPatchingSettings withMaintenanceWindowDuration(Integer maintenanceWindowDuration) {
        this.maintenanceWindowDuration = maintenanceWindowDuration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enable", this.enable);
        jsonWriter.writeStringField("dayOfWeek", this.dayOfWeek == null ? null : this.dayOfWeek.toString());
        jsonWriter.writeNumberField("maintenanceWindowStartingHour", this.maintenanceWindowStartingHour);
        jsonWriter.writeNumberField("maintenanceWindowDuration", this.maintenanceWindowDuration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutoPatchingSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutoPatchingSettings if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AutoPatchingSettings.
     */
    public static AutoPatchingSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutoPatchingSettings deserializedAutoPatchingSettings = new AutoPatchingSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enable".equals(fieldName)) {
                    deserializedAutoPatchingSettings.enable = reader.getNullable(JsonReader::getBoolean);
                } else if ("dayOfWeek".equals(fieldName)) {
                    deserializedAutoPatchingSettings.dayOfWeek = DayOfWeek.fromString(reader.getString());
                } else if ("maintenanceWindowStartingHour".equals(fieldName)) {
                    deserializedAutoPatchingSettings.maintenanceWindowStartingHour
                        = reader.getNullable(JsonReader::getInt);
                } else if ("maintenanceWindowDuration".equals(fieldName)) {
                    deserializedAutoPatchingSettings.maintenanceWindowDuration = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutoPatchingSettings;
        });
    }
}
