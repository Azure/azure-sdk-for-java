// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * SQL VM Troubleshooting additional properties.
 */
@Fluent
public final class TroubleshootingAdditionalProperties
    implements JsonSerializable<TroubleshootingAdditionalProperties> {
    /*
     * The unhealthy replica information
     */
    private UnhealthyReplicaInfo unhealthyReplicaInfo;

    /**
     * Creates an instance of TroubleshootingAdditionalProperties class.
     */
    public TroubleshootingAdditionalProperties() {
    }

    /**
     * Get the unhealthyReplicaInfo property: The unhealthy replica information.
     * 
     * @return the unhealthyReplicaInfo value.
     */
    public UnhealthyReplicaInfo unhealthyReplicaInfo() {
        return this.unhealthyReplicaInfo;
    }

    /**
     * Set the unhealthyReplicaInfo property: The unhealthy replica information.
     * 
     * @param unhealthyReplicaInfo the unhealthyReplicaInfo value to set.
     * @return the TroubleshootingAdditionalProperties object itself.
     */
    public TroubleshootingAdditionalProperties withUnhealthyReplicaInfo(UnhealthyReplicaInfo unhealthyReplicaInfo) {
        this.unhealthyReplicaInfo = unhealthyReplicaInfo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (unhealthyReplicaInfo() != null) {
            unhealthyReplicaInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("unhealthyReplicaInfo", this.unhealthyReplicaInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TroubleshootingAdditionalProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TroubleshootingAdditionalProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TroubleshootingAdditionalProperties.
     */
    public static TroubleshootingAdditionalProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TroubleshootingAdditionalProperties deserializedTroubleshootingAdditionalProperties
                = new TroubleshootingAdditionalProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("unhealthyReplicaInfo".equals(fieldName)) {
                    deserializedTroubleshootingAdditionalProperties.unhealthyReplicaInfo
                        = UnhealthyReplicaInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTroubleshootingAdditionalProperties;
        });
    }
}
