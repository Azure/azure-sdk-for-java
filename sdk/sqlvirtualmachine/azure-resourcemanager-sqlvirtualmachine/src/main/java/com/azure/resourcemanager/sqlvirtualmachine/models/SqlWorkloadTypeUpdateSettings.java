// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Set workload type to optimize storage for SQL Server.
 */
@Fluent
public final class SqlWorkloadTypeUpdateSettings implements JsonSerializable<SqlWorkloadTypeUpdateSettings> {
    /*
     * SQL Server workload type.
     */
    private SqlWorkloadType sqlWorkloadType;

    /**
     * Creates an instance of SqlWorkloadTypeUpdateSettings class.
     */
    public SqlWorkloadTypeUpdateSettings() {
    }

    /**
     * Get the sqlWorkloadType property: SQL Server workload type.
     * 
     * @return the sqlWorkloadType value.
     */
    public SqlWorkloadType sqlWorkloadType() {
        return this.sqlWorkloadType;
    }

    /**
     * Set the sqlWorkloadType property: SQL Server workload type.
     * 
     * @param sqlWorkloadType the sqlWorkloadType value to set.
     * @return the SqlWorkloadTypeUpdateSettings object itself.
     */
    public SqlWorkloadTypeUpdateSettings withSqlWorkloadType(SqlWorkloadType sqlWorkloadType) {
        this.sqlWorkloadType = sqlWorkloadType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sqlWorkloadType",
            this.sqlWorkloadType == null ? null : this.sqlWorkloadType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlWorkloadTypeUpdateSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlWorkloadTypeUpdateSettings if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlWorkloadTypeUpdateSettings.
     */
    public static SqlWorkloadTypeUpdateSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlWorkloadTypeUpdateSettings deserializedSqlWorkloadTypeUpdateSettings
                = new SqlWorkloadTypeUpdateSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sqlWorkloadType".equals(fieldName)) {
                    deserializedSqlWorkloadTypeUpdateSettings.sqlWorkloadType
                        = SqlWorkloadType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlWorkloadTypeUpdateSettings;
        });
    }
}
