// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Multi subnet ip configuration for an availability group listener.
 */
@Fluent
public final class MultiSubnetIpConfiguration implements JsonSerializable<MultiSubnetIpConfiguration> {
    /*
     * Private IP address.
     */
    private PrivateIpAddress privateIpAddress;

    /*
     * SQL virtual machine instance resource id that are enrolled into the availability group listener.
     */
    private String sqlVirtualMachineInstance;

    /**
     * Creates an instance of MultiSubnetIpConfiguration class.
     */
    public MultiSubnetIpConfiguration() {
    }

    /**
     * Get the privateIpAddress property: Private IP address.
     * 
     * @return the privateIpAddress value.
     */
    public PrivateIpAddress privateIpAddress() {
        return this.privateIpAddress;
    }

    /**
     * Set the privateIpAddress property: Private IP address.
     * 
     * @param privateIpAddress the privateIpAddress value to set.
     * @return the MultiSubnetIpConfiguration object itself.
     */
    public MultiSubnetIpConfiguration withPrivateIpAddress(PrivateIpAddress privateIpAddress) {
        this.privateIpAddress = privateIpAddress;
        return this;
    }

    /**
     * Get the sqlVirtualMachineInstance property: SQL virtual machine instance resource id that are enrolled into the
     * availability group listener.
     * 
     * @return the sqlVirtualMachineInstance value.
     */
    public String sqlVirtualMachineInstance() {
        return this.sqlVirtualMachineInstance;
    }

    /**
     * Set the sqlVirtualMachineInstance property: SQL virtual machine instance resource id that are enrolled into the
     * availability group listener.
     * 
     * @param sqlVirtualMachineInstance the sqlVirtualMachineInstance value to set.
     * @return the MultiSubnetIpConfiguration object itself.
     */
    public MultiSubnetIpConfiguration withSqlVirtualMachineInstance(String sqlVirtualMachineInstance) {
        this.sqlVirtualMachineInstance = sqlVirtualMachineInstance;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (privateIpAddress() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property privateIpAddress in model MultiSubnetIpConfiguration"));
        } else {
            privateIpAddress().validate();
        }
        if (sqlVirtualMachineInstance() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sqlVirtualMachineInstance in model MultiSubnetIpConfiguration"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MultiSubnetIpConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("privateIpAddress", this.privateIpAddress);
        jsonWriter.writeStringField("sqlVirtualMachineInstance", this.sqlVirtualMachineInstance);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MultiSubnetIpConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MultiSubnetIpConfiguration if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MultiSubnetIpConfiguration.
     */
    public static MultiSubnetIpConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MultiSubnetIpConfiguration deserializedMultiSubnetIpConfiguration = new MultiSubnetIpConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("privateIpAddress".equals(fieldName)) {
                    deserializedMultiSubnetIpConfiguration.privateIpAddress = PrivateIpAddress.fromJson(reader);
                } else if ("sqlVirtualMachineInstance".equals(fieldName)) {
                    deserializedMultiSubnetIpConfiguration.sqlVirtualMachineInstance = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMultiSubnetIpConfiguration;
        });
    }
}
