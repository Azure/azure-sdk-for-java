// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Set the connectivity, storage and workload settings.
 */
@Fluent
public final class ServerConfigurationsManagementSettings
    implements JsonSerializable<ServerConfigurationsManagementSettings> {
    /*
     * SQL connectivity type settings.
     */
    private SqlConnectivityUpdateSettings sqlConnectivityUpdateSettings;

    /*
     * SQL workload type settings.
     */
    private SqlWorkloadTypeUpdateSettings sqlWorkloadTypeUpdateSettings;

    /*
     * SQL storage update settings.
     */
    private SqlStorageUpdateSettings sqlStorageUpdateSettings;

    /*
     * Additional SQL feature settings.
     */
    private AdditionalFeaturesServerConfigurations additionalFeaturesServerConfigurations;

    /*
     * SQL Instance settings.
     */
    private SqlInstanceSettings sqlInstanceSettings;

    /*
     * Azure AD authentication Settings.
     */
    private AadAuthenticationSettings azureAdAuthenticationSettings;

    /**
     * Creates an instance of ServerConfigurationsManagementSettings class.
     */
    public ServerConfigurationsManagementSettings() {
    }

    /**
     * Get the sqlConnectivityUpdateSettings property: SQL connectivity type settings.
     * 
     * @return the sqlConnectivityUpdateSettings value.
     */
    public SqlConnectivityUpdateSettings sqlConnectivityUpdateSettings() {
        return this.sqlConnectivityUpdateSettings;
    }

    /**
     * Set the sqlConnectivityUpdateSettings property: SQL connectivity type settings.
     * 
     * @param sqlConnectivityUpdateSettings the sqlConnectivityUpdateSettings value to set.
     * @return the ServerConfigurationsManagementSettings object itself.
     */
    public ServerConfigurationsManagementSettings
        withSqlConnectivityUpdateSettings(SqlConnectivityUpdateSettings sqlConnectivityUpdateSettings) {
        this.sqlConnectivityUpdateSettings = sqlConnectivityUpdateSettings;
        return this;
    }

    /**
     * Get the sqlWorkloadTypeUpdateSettings property: SQL workload type settings.
     * 
     * @return the sqlWorkloadTypeUpdateSettings value.
     */
    public SqlWorkloadTypeUpdateSettings sqlWorkloadTypeUpdateSettings() {
        return this.sqlWorkloadTypeUpdateSettings;
    }

    /**
     * Set the sqlWorkloadTypeUpdateSettings property: SQL workload type settings.
     * 
     * @param sqlWorkloadTypeUpdateSettings the sqlWorkloadTypeUpdateSettings value to set.
     * @return the ServerConfigurationsManagementSettings object itself.
     */
    public ServerConfigurationsManagementSettings
        withSqlWorkloadTypeUpdateSettings(SqlWorkloadTypeUpdateSettings sqlWorkloadTypeUpdateSettings) {
        this.sqlWorkloadTypeUpdateSettings = sqlWorkloadTypeUpdateSettings;
        return this;
    }

    /**
     * Get the sqlStorageUpdateSettings property: SQL storage update settings.
     * 
     * @return the sqlStorageUpdateSettings value.
     */
    public SqlStorageUpdateSettings sqlStorageUpdateSettings() {
        return this.sqlStorageUpdateSettings;
    }

    /**
     * Set the sqlStorageUpdateSettings property: SQL storage update settings.
     * 
     * @param sqlStorageUpdateSettings the sqlStorageUpdateSettings value to set.
     * @return the ServerConfigurationsManagementSettings object itself.
     */
    public ServerConfigurationsManagementSettings
        withSqlStorageUpdateSettings(SqlStorageUpdateSettings sqlStorageUpdateSettings) {
        this.sqlStorageUpdateSettings = sqlStorageUpdateSettings;
        return this;
    }

    /**
     * Get the additionalFeaturesServerConfigurations property: Additional SQL feature settings.
     * 
     * @return the additionalFeaturesServerConfigurations value.
     */
    public AdditionalFeaturesServerConfigurations additionalFeaturesServerConfigurations() {
        return this.additionalFeaturesServerConfigurations;
    }

    /**
     * Set the additionalFeaturesServerConfigurations property: Additional SQL feature settings.
     * 
     * @param additionalFeaturesServerConfigurations the additionalFeaturesServerConfigurations value to set.
     * @return the ServerConfigurationsManagementSettings object itself.
     */
    public ServerConfigurationsManagementSettings withAdditionalFeaturesServerConfigurations(
        AdditionalFeaturesServerConfigurations additionalFeaturesServerConfigurations) {
        this.additionalFeaturesServerConfigurations = additionalFeaturesServerConfigurations;
        return this;
    }

    /**
     * Get the sqlInstanceSettings property: SQL Instance settings.
     * 
     * @return the sqlInstanceSettings value.
     */
    public SqlInstanceSettings sqlInstanceSettings() {
        return this.sqlInstanceSettings;
    }

    /**
     * Set the sqlInstanceSettings property: SQL Instance settings.
     * 
     * @param sqlInstanceSettings the sqlInstanceSettings value to set.
     * @return the ServerConfigurationsManagementSettings object itself.
     */
    public ServerConfigurationsManagementSettings withSqlInstanceSettings(SqlInstanceSettings sqlInstanceSettings) {
        this.sqlInstanceSettings = sqlInstanceSettings;
        return this;
    }

    /**
     * Get the azureAdAuthenticationSettings property: Azure AD authentication Settings.
     * 
     * @return the azureAdAuthenticationSettings value.
     */
    public AadAuthenticationSettings azureAdAuthenticationSettings() {
        return this.azureAdAuthenticationSettings;
    }

    /**
     * Set the azureAdAuthenticationSettings property: Azure AD authentication Settings.
     * 
     * @param azureAdAuthenticationSettings the azureAdAuthenticationSettings value to set.
     * @return the ServerConfigurationsManagementSettings object itself.
     */
    public ServerConfigurationsManagementSettings
        withAzureAdAuthenticationSettings(AadAuthenticationSettings azureAdAuthenticationSettings) {
        this.azureAdAuthenticationSettings = azureAdAuthenticationSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sqlConnectivityUpdateSettings() != null) {
            sqlConnectivityUpdateSettings().validate();
        }
        if (sqlWorkloadTypeUpdateSettings() != null) {
            sqlWorkloadTypeUpdateSettings().validate();
        }
        if (sqlStorageUpdateSettings() != null) {
            sqlStorageUpdateSettings().validate();
        }
        if (additionalFeaturesServerConfigurations() != null) {
            additionalFeaturesServerConfigurations().validate();
        }
        if (sqlInstanceSettings() != null) {
            sqlInstanceSettings().validate();
        }
        if (azureAdAuthenticationSettings() != null) {
            azureAdAuthenticationSettings().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("sqlConnectivityUpdateSettings", this.sqlConnectivityUpdateSettings);
        jsonWriter.writeJsonField("sqlWorkloadTypeUpdateSettings", this.sqlWorkloadTypeUpdateSettings);
        jsonWriter.writeJsonField("sqlStorageUpdateSettings", this.sqlStorageUpdateSettings);
        jsonWriter.writeJsonField("additionalFeaturesServerConfigurations",
            this.additionalFeaturesServerConfigurations);
        jsonWriter.writeJsonField("sqlInstanceSettings", this.sqlInstanceSettings);
        jsonWriter.writeJsonField("azureAdAuthenticationSettings", this.azureAdAuthenticationSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerConfigurationsManagementSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerConfigurationsManagementSettings if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerConfigurationsManagementSettings.
     */
    public static ServerConfigurationsManagementSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerConfigurationsManagementSettings deserializedServerConfigurationsManagementSettings
                = new ServerConfigurationsManagementSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sqlConnectivityUpdateSettings".equals(fieldName)) {
                    deserializedServerConfigurationsManagementSettings.sqlConnectivityUpdateSettings
                        = SqlConnectivityUpdateSettings.fromJson(reader);
                } else if ("sqlWorkloadTypeUpdateSettings".equals(fieldName)) {
                    deserializedServerConfigurationsManagementSettings.sqlWorkloadTypeUpdateSettings
                        = SqlWorkloadTypeUpdateSettings.fromJson(reader);
                } else if ("sqlStorageUpdateSettings".equals(fieldName)) {
                    deserializedServerConfigurationsManagementSettings.sqlStorageUpdateSettings
                        = SqlStorageUpdateSettings.fromJson(reader);
                } else if ("additionalFeaturesServerConfigurations".equals(fieldName)) {
                    deserializedServerConfigurationsManagementSettings.additionalFeaturesServerConfigurations
                        = AdditionalFeaturesServerConfigurations.fromJson(reader);
                } else if ("sqlInstanceSettings".equals(fieldName)) {
                    deserializedServerConfigurationsManagementSettings.sqlInstanceSettings
                        = SqlInstanceSettings.fromJson(reader);
                } else if ("azureAdAuthenticationSettings".equals(fieldName)) {
                    deserializedServerConfigurationsManagementSettings.azureAdAuthenticationSettings
                        = AadAuthenticationSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerConfigurationsManagementSettings;
        });
    }
}
