// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Additional SQL Server feature settings.
 */
@Fluent
public final class AdditionalFeaturesServerConfigurations
    implements JsonSerializable<AdditionalFeaturesServerConfigurations> {
    /*
     * Enable or disable R services (SQL 2016 onwards).
     */
    private Boolean isRServicesEnabled;

    /**
     * Creates an instance of AdditionalFeaturesServerConfigurations class.
     */
    public AdditionalFeaturesServerConfigurations() {
    }

    /**
     * Get the isRServicesEnabled property: Enable or disable R services (SQL 2016 onwards).
     * 
     * @return the isRServicesEnabled value.
     */
    public Boolean isRServicesEnabled() {
        return this.isRServicesEnabled;
    }

    /**
     * Set the isRServicesEnabled property: Enable or disable R services (SQL 2016 onwards).
     * 
     * @param isRServicesEnabled the isRServicesEnabled value to set.
     * @return the AdditionalFeaturesServerConfigurations object itself.
     */
    public AdditionalFeaturesServerConfigurations withIsRServicesEnabled(Boolean isRServicesEnabled) {
        this.isRServicesEnabled = isRServicesEnabled;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("isRServicesEnabled", this.isRServicesEnabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdditionalFeaturesServerConfigurations from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdditionalFeaturesServerConfigurations if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AdditionalFeaturesServerConfigurations.
     */
    public static AdditionalFeaturesServerConfigurations fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AdditionalFeaturesServerConfigurations deserializedAdditionalFeaturesServerConfigurations
                = new AdditionalFeaturesServerConfigurations();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("isRServicesEnabled".equals(fieldName)) {
                    deserializedAdditionalFeaturesServerConfigurations.isRServicesEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAdditionalFeaturesServerConfigurations;
        });
    }
}
