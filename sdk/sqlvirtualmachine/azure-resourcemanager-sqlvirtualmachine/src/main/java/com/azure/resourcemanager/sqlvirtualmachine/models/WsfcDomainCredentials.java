// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.
 */
@Fluent
public final class WsfcDomainCredentials implements JsonSerializable<WsfcDomainCredentials> {
    /*
     * Cluster bootstrap account password.
     */
    private String clusterBootstrapAccountPassword;

    /*
     * Cluster operator account password.
     */
    private String clusterOperatorAccountPassword;

    /*
     * SQL service account password.
     */
    private String sqlServiceAccountPassword;

    /**
     * Creates an instance of WsfcDomainCredentials class.
     */
    public WsfcDomainCredentials() {
    }

    /**
     * Get the clusterBootstrapAccountPassword property: Cluster bootstrap account password.
     * 
     * @return the clusterBootstrapAccountPassword value.
     */
    public String clusterBootstrapAccountPassword() {
        return this.clusterBootstrapAccountPassword;
    }

    /**
     * Set the clusterBootstrapAccountPassword property: Cluster bootstrap account password.
     * 
     * @param clusterBootstrapAccountPassword the clusterBootstrapAccountPassword value to set.
     * @return the WsfcDomainCredentials object itself.
     */
    public WsfcDomainCredentials withClusterBootstrapAccountPassword(String clusterBootstrapAccountPassword) {
        this.clusterBootstrapAccountPassword = clusterBootstrapAccountPassword;
        return this;
    }

    /**
     * Get the clusterOperatorAccountPassword property: Cluster operator account password.
     * 
     * @return the clusterOperatorAccountPassword value.
     */
    public String clusterOperatorAccountPassword() {
        return this.clusterOperatorAccountPassword;
    }

    /**
     * Set the clusterOperatorAccountPassword property: Cluster operator account password.
     * 
     * @param clusterOperatorAccountPassword the clusterOperatorAccountPassword value to set.
     * @return the WsfcDomainCredentials object itself.
     */
    public WsfcDomainCredentials withClusterOperatorAccountPassword(String clusterOperatorAccountPassword) {
        this.clusterOperatorAccountPassword = clusterOperatorAccountPassword;
        return this;
    }

    /**
     * Get the sqlServiceAccountPassword property: SQL service account password.
     * 
     * @return the sqlServiceAccountPassword value.
     */
    public String sqlServiceAccountPassword() {
        return this.sqlServiceAccountPassword;
    }

    /**
     * Set the sqlServiceAccountPassword property: SQL service account password.
     * 
     * @param sqlServiceAccountPassword the sqlServiceAccountPassword value to set.
     * @return the WsfcDomainCredentials object itself.
     */
    public WsfcDomainCredentials withSqlServiceAccountPassword(String sqlServiceAccountPassword) {
        this.sqlServiceAccountPassword = sqlServiceAccountPassword;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clusterBootstrapAccountPassword", this.clusterBootstrapAccountPassword);
        jsonWriter.writeStringField("clusterOperatorAccountPassword", this.clusterOperatorAccountPassword);
        jsonWriter.writeStringField("sqlServiceAccountPassword", this.sqlServiceAccountPassword);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WsfcDomainCredentials from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WsfcDomainCredentials if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WsfcDomainCredentials.
     */
    public static WsfcDomainCredentials fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WsfcDomainCredentials deserializedWsfcDomainCredentials = new WsfcDomainCredentials();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clusterBootstrapAccountPassword".equals(fieldName)) {
                    deserializedWsfcDomainCredentials.clusterBootstrapAccountPassword = reader.getString();
                } else if ("clusterOperatorAccountPassword".equals(fieldName)) {
                    deserializedWsfcDomainCredentials.clusterOperatorAccountPassword = reader.getString();
                } else if ("sqlServiceAccountPassword".equals(fieldName)) {
                    deserializedWsfcDomainCredentials.sqlServiceAccountPassword = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWsfcDomainCredentials;
        });
    }
}
