// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.sqlvirtualmachine.models.TroubleshootingAdditionalProperties;
import com.azure.resourcemanager.sqlvirtualmachine.models.TroubleshootingScenario;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Details required for SQL VM troubleshooting.
 */
@Fluent
public final class SqlVmTroubleshootingInner implements JsonSerializable<SqlVmTroubleshootingInner> {
    /*
     * Start time in UTC timezone.
     */
    private OffsetDateTime startTimeUtc;

    /*
     * End time in UTC timezone.
     */
    private OffsetDateTime endTimeUtc;

    /*
     * SQL VM troubleshooting scenario.
     */
    private TroubleshootingScenario troubleshootingScenario;

    /*
     * Troubleshooting properties
     */
    private TroubleshootingAdditionalProperties properties;

    /*
     * Virtual machine resource id for response.
     */
    private String virtualMachineResourceId;

    /**
     * Creates an instance of SqlVmTroubleshootingInner class.
     */
    public SqlVmTroubleshootingInner() {
    }

    /**
     * Get the startTimeUtc property: Start time in UTC timezone.
     * 
     * @return the startTimeUtc value.
     */
    public OffsetDateTime startTimeUtc() {
        return this.startTimeUtc;
    }

    /**
     * Set the startTimeUtc property: Start time in UTC timezone.
     * 
     * @param startTimeUtc the startTimeUtc value to set.
     * @return the SqlVmTroubleshootingInner object itself.
     */
    public SqlVmTroubleshootingInner withStartTimeUtc(OffsetDateTime startTimeUtc) {
        this.startTimeUtc = startTimeUtc;
        return this;
    }

    /**
     * Get the endTimeUtc property: End time in UTC timezone.
     * 
     * @return the endTimeUtc value.
     */
    public OffsetDateTime endTimeUtc() {
        return this.endTimeUtc;
    }

    /**
     * Set the endTimeUtc property: End time in UTC timezone.
     * 
     * @param endTimeUtc the endTimeUtc value to set.
     * @return the SqlVmTroubleshootingInner object itself.
     */
    public SqlVmTroubleshootingInner withEndTimeUtc(OffsetDateTime endTimeUtc) {
        this.endTimeUtc = endTimeUtc;
        return this;
    }

    /**
     * Get the troubleshootingScenario property: SQL VM troubleshooting scenario.
     * 
     * @return the troubleshootingScenario value.
     */
    public TroubleshootingScenario troubleshootingScenario() {
        return this.troubleshootingScenario;
    }

    /**
     * Set the troubleshootingScenario property: SQL VM troubleshooting scenario.
     * 
     * @param troubleshootingScenario the troubleshootingScenario value to set.
     * @return the SqlVmTroubleshootingInner object itself.
     */
    public SqlVmTroubleshootingInner withTroubleshootingScenario(TroubleshootingScenario troubleshootingScenario) {
        this.troubleshootingScenario = troubleshootingScenario;
        return this;
    }

    /**
     * Get the properties property: Troubleshooting properties.
     * 
     * @return the properties value.
     */
    public TroubleshootingAdditionalProperties properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Troubleshooting properties.
     * 
     * @param properties the properties value to set.
     * @return the SqlVmTroubleshootingInner object itself.
     */
    public SqlVmTroubleshootingInner withProperties(TroubleshootingAdditionalProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the virtualMachineResourceId property: Virtual machine resource id for response.
     * 
     * @return the virtualMachineResourceId value.
     */
    public String virtualMachineResourceId() {
        return this.virtualMachineResourceId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (properties() != null) {
            properties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startTimeUtc",
            this.startTimeUtc == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTimeUtc));
        jsonWriter.writeStringField("endTimeUtc",
            this.endTimeUtc == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTimeUtc));
        jsonWriter.writeStringField("troubleshootingScenario",
            this.troubleshootingScenario == null ? null : this.troubleshootingScenario.toString());
        jsonWriter.writeJsonField("properties", this.properties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlVmTroubleshootingInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlVmTroubleshootingInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlVmTroubleshootingInner.
     */
    public static SqlVmTroubleshootingInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlVmTroubleshootingInner deserializedSqlVmTroubleshootingInner = new SqlVmTroubleshootingInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startTimeUtc".equals(fieldName)) {
                    deserializedSqlVmTroubleshootingInner.startTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTimeUtc".equals(fieldName)) {
                    deserializedSqlVmTroubleshootingInner.endTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("troubleshootingScenario".equals(fieldName)) {
                    deserializedSqlVmTroubleshootingInner.troubleshootingScenario
                        = TroubleshootingScenario.fromString(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    deserializedSqlVmTroubleshootingInner.properties
                        = TroubleshootingAdditionalProperties.fromJson(reader);
                } else if ("virtualMachineResourceId".equals(fieldName)) {
                    deserializedSqlVmTroubleshootingInner.virtualMachineResourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlVmTroubleshootingInner;
        });
    }
}
