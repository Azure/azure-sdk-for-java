// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Status of last troubleshooting operation on this SQL VM.
 */
@Immutable
public final class TroubleshootingStatus implements JsonSerializable<TroubleshootingStatus> {
    /*
     * Root cause of the issue
     */
    private String rootCause;

    /*
     * Last troubleshooting trigger time in UTC timezone
     */
    private OffsetDateTime lastTriggerTimeUtc;

    /*
     * Start time in UTC timezone.
     */
    private OffsetDateTime startTimeUtc;

    /*
     * End time in UTC timezone.
     */
    private OffsetDateTime endTimeUtc;

    /*
     * SQL VM troubleshooting scenario.
     */
    private TroubleshootingScenario troubleshootingScenario;

    /*
     * Troubleshooting properties
     */
    private TroubleshootingAdditionalProperties properties;

    /**
     * Creates an instance of TroubleshootingStatus class.
     */
    public TroubleshootingStatus() {
    }

    /**
     * Get the rootCause property: Root cause of the issue.
     * 
     * @return the rootCause value.
     */
    public String rootCause() {
        return this.rootCause;
    }

    /**
     * Get the lastTriggerTimeUtc property: Last troubleshooting trigger time in UTC timezone.
     * 
     * @return the lastTriggerTimeUtc value.
     */
    public OffsetDateTime lastTriggerTimeUtc() {
        return this.lastTriggerTimeUtc;
    }

    /**
     * Get the startTimeUtc property: Start time in UTC timezone.
     * 
     * @return the startTimeUtc value.
     */
    public OffsetDateTime startTimeUtc() {
        return this.startTimeUtc;
    }

    /**
     * Get the endTimeUtc property: End time in UTC timezone.
     * 
     * @return the endTimeUtc value.
     */
    public OffsetDateTime endTimeUtc() {
        return this.endTimeUtc;
    }

    /**
     * Get the troubleshootingScenario property: SQL VM troubleshooting scenario.
     * 
     * @return the troubleshootingScenario value.
     */
    public TroubleshootingScenario troubleshootingScenario() {
        return this.troubleshootingScenario;
    }

    /**
     * Get the properties property: Troubleshooting properties.
     * 
     * @return the properties value.
     */
    public TroubleshootingAdditionalProperties properties() {
        return this.properties;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (properties() != null) {
            properties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TroubleshootingStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TroubleshootingStatus if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TroubleshootingStatus.
     */
    public static TroubleshootingStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TroubleshootingStatus deserializedTroubleshootingStatus = new TroubleshootingStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("rootCause".equals(fieldName)) {
                    deserializedTroubleshootingStatus.rootCause = reader.getString();
                } else if ("lastTriggerTimeUtc".equals(fieldName)) {
                    deserializedTroubleshootingStatus.lastTriggerTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("startTimeUtc".equals(fieldName)) {
                    deserializedTroubleshootingStatus.startTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTimeUtc".equals(fieldName)) {
                    deserializedTroubleshootingStatus.endTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("troubleshootingScenario".equals(fieldName)) {
                    deserializedTroubleshootingStatus.troubleshootingScenario
                        = TroubleshootingScenario.fromString(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    deserializedTroubleshootingStatus.properties = TroubleshootingAdditionalProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTroubleshootingStatus;
        });
    }
}
