// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.sqlvirtualmachine.SqlVirtualMachineManager;
import com.azure.resourcemanager.sqlvirtualmachine.models.ClusterSubnetType;
import com.azure.resourcemanager.sqlvirtualmachine.models.SqlVirtualMachineGroup;
import com.azure.resourcemanager.sqlvirtualmachine.models.SqlVmGroupImageSku;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SqlVirtualMachineGroupsListTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"provisioningState\":\"uahaquhcdhmd\",\"sqlImageOffer\":\"laexqp\",\"sqlImageSku\":\"Developer\",\"scaleType\":\"HA\",\"clusterManagerType\":\"WSFC\",\"clusterConfiguration\":\"Domainful\",\"wsfcDomainProfile\":{\"domainFqdn\":\"vxpvgomz\",\"ouPath\":\"misgwbnb\",\"clusterBootstrapAccount\":\"ldawkzbaliourqha\",\"clusterOperatorAccount\":\"uhashsfwx\",\"sqlServiceAccount\":\"owzxcu\",\"fileShareWitnessPath\":\"cjooxdjebwpucwwf\",\"storageAccountUrl\":\"vbvmeu\",\"storageAccountPrimaryKey\":\"ivyhzceuojgjrwju\",\"clusterSubnetType\":\"SingleSubnet\"}},\"location\":\"wmcdytdxwi\",\"tags\":{\"qwgxhniskx\":\"rjaw\",\"klwndnhjdauwhv\":\"bkpyc\",\"zbtd\":\"l\"},\"id\":\"xujznbmpowu\",\"name\":\"przqlveu\",\"type\":\"lupj\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SqlVirtualMachineManager manager =
            SqlVirtualMachineManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SqlVirtualMachineGroup> response = manager.sqlVirtualMachineGroups().list(Context.NONE);

        Assertions.assertEquals("wmcdytdxwi", response.iterator().next().location());
        Assertions.assertEquals("rjaw", response.iterator().next().tags().get("qwgxhniskx"));
        Assertions.assertEquals("laexqp", response.iterator().next().sqlImageOffer());
        Assertions.assertEquals(SqlVmGroupImageSku.DEVELOPER, response.iterator().next().sqlImageSku());
        Assertions.assertEquals("vxpvgomz", response.iterator().next().wsfcDomainProfile().domainFqdn());
        Assertions.assertEquals("misgwbnb", response.iterator().next().wsfcDomainProfile().ouPath());
        Assertions
            .assertEquals("ldawkzbaliourqha", response.iterator().next().wsfcDomainProfile().clusterBootstrapAccount());
        Assertions.assertEquals("uhashsfwx", response.iterator().next().wsfcDomainProfile().clusterOperatorAccount());
        Assertions.assertEquals("owzxcu", response.iterator().next().wsfcDomainProfile().sqlServiceAccount());
        Assertions
            .assertEquals("cjooxdjebwpucwwf", response.iterator().next().wsfcDomainProfile().fileShareWitnessPath());
        Assertions.assertEquals("vbvmeu", response.iterator().next().wsfcDomainProfile().storageAccountUrl());
        Assertions
            .assertEquals(
                "ivyhzceuojgjrwju", response.iterator().next().wsfcDomainProfile().storageAccountPrimaryKey());
        Assertions
            .assertEquals(
                ClusterSubnetType.SINGLE_SUBNET, response.iterator().next().wsfcDomainProfile().clusterSubnetType());
    }
}
