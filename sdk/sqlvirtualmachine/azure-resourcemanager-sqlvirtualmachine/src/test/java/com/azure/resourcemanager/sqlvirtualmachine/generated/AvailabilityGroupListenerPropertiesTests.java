// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.sqlvirtualmachine.fluent.models.AvailabilityGroupListenerProperties;
import com.azure.resourcemanager.sqlvirtualmachine.models.AgConfiguration;
import com.azure.resourcemanager.sqlvirtualmachine.models.AgReplica;
import com.azure.resourcemanager.sqlvirtualmachine.models.Commit;
import com.azure.resourcemanager.sqlvirtualmachine.models.Failover;
import com.azure.resourcemanager.sqlvirtualmachine.models.LoadBalancerConfiguration;
import com.azure.resourcemanager.sqlvirtualmachine.models.MultiSubnetIpConfiguration;
import com.azure.resourcemanager.sqlvirtualmachine.models.PrivateIpAddress;
import com.azure.resourcemanager.sqlvirtualmachine.models.ReadableSecondary;
import com.azure.resourcemanager.sqlvirtualmachine.models.Role;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AvailabilityGroupListenerPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AvailabilityGroupListenerProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"zdxtayrlhmwhf\",\"availabilityGroupName\":\"rqobmtuk\",\"loadBalancerConfigurations\":[{\"privateIpAddress\":{\"ipAddress\":\"tihfx\",\"subnetResourceId\":\"jbpzvgnwzsymg\"},\"publicIpAddressResourceId\":\"uf\",\"loadBalancerResourceId\":\"zk\",\"probePort\":1162765594,\"sqlVirtualMachineInstances\":[\"hanufhfcbjysagi\",\"hxqh\"]},{\"privateIpAddress\":{\"ipAddress\":\"fpikxwczb\",\"subnetResourceId\":\"cnpqxuhivyqniwby\"},\"publicIpAddressResourceId\":\"k\",\"loadBalancerResourceId\":\"dumjgrtfwvuk\",\"probePort\":224471404,\"sqlVirtualMachineInstances\":[\"ccsnhsjc\"]},{\"privateIpAddress\":{\"ipAddress\":\"j\",\"subnetResourceId\":\"ryhtnapczwlokjy\"},\"publicIpAddressResourceId\":\"kkvnipjox\",\"loadBalancerResourceId\":\"nchgej\",\"probePort\":178199431,\"sqlVirtualMachineInstances\":[\"ailzydehojwyahu\",\"inpm\",\"njaqwixjspro\"]},{\"privateIpAddress\":{\"ipAddress\":\"putegjvwmfd\",\"subnetResourceId\":\"scmdvpjhulsuu\"},\"publicIpAddressResourceId\":\"kjozkrwfnd\",\"loadBalancerResourceId\":\"djpslw\",\"probePort\":1912467695,\"sqlVirtualMachineInstances\":[\"wryoqpsoacc\",\"azakl\",\"lahbcryff\"]}],\"multiSubnetIpConfigurations\":[{\"privateIpAddress\":{\"ipAddress\":\"sy\",\"subnetResourceId\":\"xpaojakhmsbz\"},\"sqlVirtualMachineInstance\":\"hcrzevd\"},{\"privateIpAddress\":{\"ipAddress\":\"lxaolthqtrgqjbp\",\"subnetResourceId\":\"fsinzgvfcjrwzoxx\"},\"sqlVirtualMachineInstance\":\"tfell\"}],\"createDefaultAvailabilityGroupIfNotExist\":false,\"port\":348508366,\"availabilityGroupConfiguration\":{\"replicas\":[{\"sqlVirtualMachineInstanceId\":\"eqfpj\",\"role\":\"SECONDARY\",\"commit\":\"SYNCHRONOUS_COMMIT\",\"failover\":\"MANUAL\",\"readableSecondary\":\"NO\"}]}}")
            .toObject(AvailabilityGroupListenerProperties.class);
        Assertions.assertEquals("rqobmtuk", model.availabilityGroupName());
        Assertions.assertEquals("tihfx", model.loadBalancerConfigurations().get(0).privateIpAddress().ipAddress());
        Assertions.assertEquals("jbpzvgnwzsymg",
            model.loadBalancerConfigurations().get(0).privateIpAddress().subnetResourceId());
        Assertions.assertEquals("uf", model.loadBalancerConfigurations().get(0).publicIpAddressResourceId());
        Assertions.assertEquals("zk", model.loadBalancerConfigurations().get(0).loadBalancerResourceId());
        Assertions.assertEquals(1162765594, model.loadBalancerConfigurations().get(0).probePort());
        Assertions.assertEquals("hanufhfcbjysagi",
            model.loadBalancerConfigurations().get(0).sqlVirtualMachineInstances().get(0));
        Assertions.assertEquals("sy", model.multiSubnetIpConfigurations().get(0).privateIpAddress().ipAddress());
        Assertions.assertEquals("xpaojakhmsbz",
            model.multiSubnetIpConfigurations().get(0).privateIpAddress().subnetResourceId());
        Assertions.assertEquals("hcrzevd", model.multiSubnetIpConfigurations().get(0).sqlVirtualMachineInstance());
        Assertions.assertEquals(false, model.createDefaultAvailabilityGroupIfNotExist());
        Assertions.assertEquals(348508366, model.port());
        Assertions.assertEquals("eqfpj",
            model.availabilityGroupConfiguration().replicas().get(0).sqlVirtualMachineInstanceId());
        Assertions.assertEquals(Role.SECONDARY, model.availabilityGroupConfiguration().replicas().get(0).role());
        Assertions.assertEquals(Commit.SYNCHRONOUS_COMMIT,
            model.availabilityGroupConfiguration().replicas().get(0).commit());
        Assertions.assertEquals(Failover.MANUAL, model.availabilityGroupConfiguration().replicas().get(0).failover());
        Assertions.assertEquals(ReadableSecondary.NO,
            model.availabilityGroupConfiguration().replicas().get(0).readableSecondary());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AvailabilityGroupListenerProperties model = new AvailabilityGroupListenerProperties()
            .withAvailabilityGroupName("rqobmtuk")
            .withLoadBalancerConfigurations(Arrays.asList(
                new LoadBalancerConfiguration()
                    .withPrivateIpAddress(
                        new PrivateIpAddress().withIpAddress("tihfx").withSubnetResourceId("jbpzvgnwzsymg"))
                    .withPublicIpAddressResourceId("uf")
                    .withLoadBalancerResourceId("zk")
                    .withProbePort(1162765594)
                    .withSqlVirtualMachineInstances(Arrays.asList("hanufhfcbjysagi", "hxqh")),
                new LoadBalancerConfiguration()
                    .withPrivateIpAddress(
                        new PrivateIpAddress().withIpAddress("fpikxwczb").withSubnetResourceId("cnpqxuhivyqniwby"))
                    .withPublicIpAddressResourceId("k")
                    .withLoadBalancerResourceId("dumjgrtfwvuk")
                    .withProbePort(224471404)
                    .withSqlVirtualMachineInstances(Arrays.asList("ccsnhsjc")),
                new LoadBalancerConfiguration()
                    .withPrivateIpAddress(
                        new PrivateIpAddress().withIpAddress("j").withSubnetResourceId("ryhtnapczwlokjy"))
                    .withPublicIpAddressResourceId("kkvnipjox")
                    .withLoadBalancerResourceId("nchgej")
                    .withProbePort(178199431)
                    .withSqlVirtualMachineInstances(Arrays.asList("ailzydehojwyahu", "inpm", "njaqwixjspro")),
                new LoadBalancerConfiguration()
                    .withPrivateIpAddress(
                        new PrivateIpAddress().withIpAddress("putegjvwmfd").withSubnetResourceId("scmdvpjhulsuu"))
                    .withPublicIpAddressResourceId("kjozkrwfnd")
                    .withLoadBalancerResourceId("djpslw")
                    .withProbePort(1912467695)
                    .withSqlVirtualMachineInstances(Arrays.asList("wryoqpsoacc", "azakl", "lahbcryff"))))
            .withMultiSubnetIpConfigurations(Arrays.asList(
                new MultiSubnetIpConfiguration()
                    .withPrivateIpAddress(
                        new PrivateIpAddress().withIpAddress("sy").withSubnetResourceId("xpaojakhmsbz"))
                    .withSqlVirtualMachineInstance("hcrzevd"),
                new MultiSubnetIpConfiguration()
                    .withPrivateIpAddress(new PrivateIpAddress().withIpAddress("lxaolthqtrgqjbp")
                        .withSubnetResourceId("fsinzgvfcjrwzoxx"))
                    .withSqlVirtualMachineInstance("tfell")))
            .withCreateDefaultAvailabilityGroupIfNotExist(false)
            .withPort(348508366)
            .withAvailabilityGroupConfiguration(new AgConfiguration()
                .withReplicas(Arrays.asList(new AgReplica().withSqlVirtualMachineInstanceId("eqfpj")
                    .withRole(Role.SECONDARY)
                    .withCommit(Commit.SYNCHRONOUS_COMMIT)
                    .withFailover(Failover.MANUAL)
                    .withReadableSecondary(ReadableSecondary.NO))));
        model = BinaryData.fromObject(model).toObject(AvailabilityGroupListenerProperties.class);
        Assertions.assertEquals("rqobmtuk", model.availabilityGroupName());
        Assertions.assertEquals("tihfx", model.loadBalancerConfigurations().get(0).privateIpAddress().ipAddress());
        Assertions.assertEquals("jbpzvgnwzsymg",
            model.loadBalancerConfigurations().get(0).privateIpAddress().subnetResourceId());
        Assertions.assertEquals("uf", model.loadBalancerConfigurations().get(0).publicIpAddressResourceId());
        Assertions.assertEquals("zk", model.loadBalancerConfigurations().get(0).loadBalancerResourceId());
        Assertions.assertEquals(1162765594, model.loadBalancerConfigurations().get(0).probePort());
        Assertions.assertEquals("hanufhfcbjysagi",
            model.loadBalancerConfigurations().get(0).sqlVirtualMachineInstances().get(0));
        Assertions.assertEquals("sy", model.multiSubnetIpConfigurations().get(0).privateIpAddress().ipAddress());
        Assertions.assertEquals("xpaojakhmsbz",
            model.multiSubnetIpConfigurations().get(0).privateIpAddress().subnetResourceId());
        Assertions.assertEquals("hcrzevd", model.multiSubnetIpConfigurations().get(0).sqlVirtualMachineInstance());
        Assertions.assertEquals(false, model.createDefaultAvailabilityGroupIfNotExist());
        Assertions.assertEquals(348508366, model.port());
        Assertions.assertEquals("eqfpj",
            model.availabilityGroupConfiguration().replicas().get(0).sqlVirtualMachineInstanceId());
        Assertions.assertEquals(Role.SECONDARY, model.availabilityGroupConfiguration().replicas().get(0).role());
        Assertions.assertEquals(Commit.SYNCHRONOUS_COMMIT,
            model.availabilityGroupConfiguration().replicas().get(0).commit());
        Assertions.assertEquals(Failover.MANUAL, model.availabilityGroupConfiguration().replicas().get(0).failover());
        Assertions.assertEquals(ReadableSecondary.NO,
            model.availabilityGroupConfiguration().replicas().get(0).readableSecondary());
    }
}
