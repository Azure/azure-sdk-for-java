// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.sqlvirtualmachine.SqlVirtualMachineManager;
import com.azure.resourcemanager.sqlvirtualmachine.models.AvailabilityGroupListener;
import com.azure.resourcemanager.sqlvirtualmachine.models.Commit;
import com.azure.resourcemanager.sqlvirtualmachine.models.Failover;
import com.azure.resourcemanager.sqlvirtualmachine.models.ReadableSecondary;
import com.azure.resourcemanager.sqlvirtualmachine.models.Role;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AvailabilityGroupListenersListByGroupMockTests {
    @Test
    public void testListByGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"ahmgkbrp\",\"availabilityGroupName\":\"dhibnuq\",\"loadBalancerConfigurations\":[{\"privateIpAddress\":{\"ipAddress\":\"a\",\"subnetResourceId\":\"gvtqagnbuynh\"},\"publicIpAddressResourceId\":\"gg\",\"loadBalancerResourceId\":\"bfs\",\"probePort\":600405260,\"sqlVirtualMachineInstances\":[\"trcvpnazzmh\"]},{\"privateIpAddress\":{\"ipAddress\":\"nmpxttdb\",\"subnetResourceId\":\"bnlankxmyskpb\"},\"publicIpAddressResourceId\":\"nbtkcxywnytnr\",\"loadBalancerResourceId\":\"nlqidybyxczf\",\"probePort\":751467546,\"sqlVirtualMachineInstances\":[\"xdbabphlwr\",\"lfktsths\"]}],\"multiSubnetIpConfigurations\":[{\"privateIpAddress\":{\"ipAddress\":\"mnyyazt\",\"subnetResourceId\":\"twwrqp\"},\"sqlVirtualMachineInstance\":\"edckzywbiexzfey\"},{\"privateIpAddress\":{\"ipAddress\":\"axibxujw\",\"subnetResourceId\":\"qwalmuzyoxaepd\"},\"sqlVirtualMachineInstance\":\"zjancuxr\"},{\"privateIpAddress\":{\"ipAddress\":\"wbavxbniwdj\",\"subnetResourceId\":\"zt\"},\"sqlVirtualMachineInstance\":\"dbpgnxytxhp\"},{\"privateIpAddress\":{\"ipAddress\":\"bzpfzab\",\"subnetResourceId\":\"cuh\"},\"sqlVirtualMachineInstance\":\"wtctyqi\"}],\"createDefaultAvailabilityGroupIfNotExist\":true,\"port\":1229662931,\"availabilityGroupConfiguration\":{\"replicas\":[{\"sqlVirtualMachineInstanceId\":\"zbhvgyuguosv\",\"role\":\"SECONDARY\",\"commit\":\"SYNCHRONOUS_COMMIT\",\"failover\":\"AUTOMATIC\",\"readableSecondary\":\"READ_ONLY\"},{\"sqlVirtualMachineInstanceId\":\"fpl\",\"role\":\"SECONDARY\",\"commit\":\"ASYNCHRONOUS_COMMIT\",\"failover\":\"AUTOMATIC\",\"readableSecondary\":\"READ_ONLY\"},{\"sqlVirtualMachineInstanceId\":\"deslp\",\"role\":\"PRIMARY\",\"commit\":\"ASYNCHRONOUS_COMMIT\",\"failover\":\"AUTOMATIC\",\"readableSecondary\":\"ALL\"}]}},\"id\":\"xpkd\",\"name\":\"zb\",\"type\":\"iuebbaumny\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SqlVirtualMachineManager manager = SqlVirtualMachineManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AvailabilityGroupListener> response
            = manager.availabilityGroupListeners().listByGroup("flz", "fbxzpuzycisp", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("dhibnuq", response.iterator().next().availabilityGroupName());
        Assertions.assertEquals("a",
            response.iterator().next().loadBalancerConfigurations().get(0).privateIpAddress().ipAddress());
        Assertions.assertEquals("gvtqagnbuynh",
            response.iterator().next().loadBalancerConfigurations().get(0).privateIpAddress().subnetResourceId());
        Assertions.assertEquals("gg",
            response.iterator().next().loadBalancerConfigurations().get(0).publicIpAddressResourceId());
        Assertions.assertEquals("bfs",
            response.iterator().next().loadBalancerConfigurations().get(0).loadBalancerResourceId());
        Assertions.assertEquals(600405260, response.iterator().next().loadBalancerConfigurations().get(0).probePort());
        Assertions.assertEquals("trcvpnazzmh",
            response.iterator().next().loadBalancerConfigurations().get(0).sqlVirtualMachineInstances().get(0));
        Assertions.assertEquals("mnyyazt",
            response.iterator().next().multiSubnetIpConfigurations().get(0).privateIpAddress().ipAddress());
        Assertions.assertEquals("twwrqp",
            response.iterator().next().multiSubnetIpConfigurations().get(0).privateIpAddress().subnetResourceId());
        Assertions.assertEquals("edckzywbiexzfey",
            response.iterator().next().multiSubnetIpConfigurations().get(0).sqlVirtualMachineInstance());
        Assertions.assertEquals(true, response.iterator().next().createDefaultAvailabilityGroupIfNotExist());
        Assertions.assertEquals(1229662931, response.iterator().next().port());
        Assertions.assertEquals("zbhvgyuguosv",
            response.iterator()
                .next()
                .availabilityGroupConfiguration()
                .replicas()
                .get(0)
                .sqlVirtualMachineInstanceId());
        Assertions.assertEquals(Role.SECONDARY,
            response.iterator().next().availabilityGroupConfiguration().replicas().get(0).role());
        Assertions.assertEquals(Commit.SYNCHRONOUS_COMMIT,
            response.iterator().next().availabilityGroupConfiguration().replicas().get(0).commit());
        Assertions.assertEquals(Failover.AUTOMATIC,
            response.iterator().next().availabilityGroupConfiguration().replicas().get(0).failover());
        Assertions.assertEquals(ReadableSecondary.READ_ONLY,
            response.iterator().next().availabilityGroupConfiguration().replicas().get(0).readableSecondary());
    }
}
