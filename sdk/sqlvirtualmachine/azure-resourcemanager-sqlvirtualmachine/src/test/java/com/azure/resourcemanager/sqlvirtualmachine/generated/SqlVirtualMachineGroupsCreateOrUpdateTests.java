// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.sqlvirtualmachine.SqlVirtualMachineManager;
import com.azure.resourcemanager.sqlvirtualmachine.models.ClusterSubnetType;
import com.azure.resourcemanager.sqlvirtualmachine.models.SqlVirtualMachineGroup;
import com.azure.resourcemanager.sqlvirtualmachine.models.SqlVmGroupImageSku;
import com.azure.resourcemanager.sqlvirtualmachine.models.WsfcDomainProfile;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SqlVirtualMachineGroupsCreateOrUpdateTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"sqlImageOffer\":\"aboekqv\",\"sqlImageSku\":\"Developer\",\"scaleType\":\"HA\",\"clusterManagerType\":\"WSFC\",\"clusterConfiguration\":\"Domainful\",\"wsfcDomainProfile\":{\"domainFqdn\":\"jsflhhcaalnjix\",\"ouPath\":\"xyawj\",\"clusterBootstrapAccount\":\"aq\",\"clusterOperatorAccount\":\"lyjpk\",\"sqlServiceAccount\":\"dzyexznelixh\",\"fileShareWitnessPath\":\"ztfolhbnxk\",\"storageAccountUrl\":\"laulppg\",\"storageAccountPrimaryKey\":\"tpnapnyiropuhpig\",\"clusterSubnetType\":\"MultiSubnet\"}},\"location\":\"lgqg\",\"tags\":{\"zhxgktrmgucn\":\"medjvcslynqwwncw\",\"llwptfdy\":\"pkteo\",\"rhhuaopppcqeqx\":\"pfqbuaceopzf\"},\"id\":\"lzdahzxctobgbkdm\",\"name\":\"izpost\",\"type\":\"grcfb\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SqlVirtualMachineManager manager =
            SqlVirtualMachineManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SqlVirtualMachineGroup response =
            manager
                .sqlVirtualMachineGroups()
                .define("riplrbpbewtg")
                .withRegion("mefqsgzvahapjyzh")
                .withExistingResourceGroup("khfxobbcswsrt")
                .withTags(mapOf("lmwlxkvugfhzo", "qzcjrvxdj", "nxipeil", "awjvzunluthnnp"))
                .withSqlImageOffer("zvlvqhjkbegib")
                .withSqlImageSku(SqlVmGroupImageSku.DEVELOPER)
                .withWsfcDomainProfile(
                    new WsfcDomainProfile()
                        .withDomainFqdn("oayqc")
                        .withOuPath("rtzju")
                        .withClusterBootstrapAccount("wyzmhtxon")
                        .withClusterOperatorAccount("ts")
                        .withSqlServiceAccount("jcbpwxqpsrknft")
                        .withFileShareWitnessPath("vriuhprwmdyvx")
                        .withStorageAccountUrl("ayriwwroyqbexrm")
                        .withStorageAccountPrimaryKey("ibycno")
                        .withClusterSubnetType(ClusterSubnetType.SINGLE_SUBNET))
                .create();

        Assertions.assertEquals("lgqg", response.location());
        Assertions.assertEquals("medjvcslynqwwncw", response.tags().get("zhxgktrmgucn"));
        Assertions.assertEquals("aboekqv", response.sqlImageOffer());
        Assertions.assertEquals(SqlVmGroupImageSku.DEVELOPER, response.sqlImageSku());
        Assertions.assertEquals("jsflhhcaalnjix", response.wsfcDomainProfile().domainFqdn());
        Assertions.assertEquals("xyawj", response.wsfcDomainProfile().ouPath());
        Assertions.assertEquals("aq", response.wsfcDomainProfile().clusterBootstrapAccount());
        Assertions.assertEquals("lyjpk", response.wsfcDomainProfile().clusterOperatorAccount());
        Assertions.assertEquals("dzyexznelixh", response.wsfcDomainProfile().sqlServiceAccount());
        Assertions.assertEquals("ztfolhbnxk", response.wsfcDomainProfile().fileShareWitnessPath());
        Assertions.assertEquals("laulppg", response.wsfcDomainProfile().storageAccountUrl());
        Assertions.assertEquals("tpnapnyiropuhpig", response.wsfcDomainProfile().storageAccountPrimaryKey());
        Assertions.assertEquals(ClusterSubnetType.MULTI_SUBNET, response.wsfcDomainProfile().clusterSubnetType());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
