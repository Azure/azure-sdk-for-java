// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.sqlvirtualmachine.models.AdditionalFeaturesServerConfigurations;
import com.azure.resourcemanager.sqlvirtualmachine.models.ConnectivityType;
import com.azure.resourcemanager.sqlvirtualmachine.models.DiskConfigurationType;
import com.azure.resourcemanager.sqlvirtualmachine.models.ServerConfigurationsManagementSettings;
import com.azure.resourcemanager.sqlvirtualmachine.models.SqlConnectivityUpdateSettings;
import com.azure.resourcemanager.sqlvirtualmachine.models.SqlInstanceSettings;
import com.azure.resourcemanager.sqlvirtualmachine.models.SqlStorageUpdateSettings;
import com.azure.resourcemanager.sqlvirtualmachine.models.SqlWorkloadType;
import com.azure.resourcemanager.sqlvirtualmachine.models.SqlWorkloadTypeUpdateSettings;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ServerConfigurationsManagementSettingsTests {
    @Test
    public void testDeserialize() {
        ServerConfigurationsManagementSettings model =
            BinaryData
                .fromString(
                    "{\"sqlConnectivityUpdateSettings\":{\"connectivityType\":\"PRIVATE\",\"port\":731084227,\"sqlAuthUpdateUserName\":\"pewr\",\"sqlAuthUpdatePassword\":\"mwvvjektcxsenhw\"},\"sqlWorkloadTypeUpdateSettings\":{\"sqlWorkloadType\":\"DW\"},\"sqlStorageUpdateSettings\":{\"diskCount\":842863771,\"startingDeviceId\":2007426179,\"diskConfigurationType\":\"ADD\"},\"additionalFeaturesServerConfigurations\":{\"isRServicesEnabled\":false},\"sqlInstanceSettings\":{\"collation\":\"iqylihkaetck\",\"maxDop\":385263599,\"isOptimizeForAdHocWorkloadsEnabled\":false,\"minServerMemoryMB\":533172139,\"maxServerMemoryMB\":1960016252,\"isLpimEnabled\":true,\"isIfiEnabled\":true}}")
                .toObject(ServerConfigurationsManagementSettings.class);
        Assertions.assertEquals(ConnectivityType.PRIVATE, model.sqlConnectivityUpdateSettings().connectivityType());
        Assertions.assertEquals(731084227, model.sqlConnectivityUpdateSettings().port());
        Assertions.assertEquals("pewr", model.sqlConnectivityUpdateSettings().sqlAuthUpdateUsername());
        Assertions.assertEquals("mwvvjektcxsenhw", model.sqlConnectivityUpdateSettings().sqlAuthUpdatePassword());
        Assertions.assertEquals(SqlWorkloadType.DW, model.sqlWorkloadTypeUpdateSettings().sqlWorkloadType());
        Assertions.assertEquals(842863771, model.sqlStorageUpdateSettings().diskCount());
        Assertions.assertEquals(2007426179, model.sqlStorageUpdateSettings().startingDeviceId());
        Assertions.assertEquals(DiskConfigurationType.ADD, model.sqlStorageUpdateSettings().diskConfigurationType());
        Assertions.assertEquals(false, model.additionalFeaturesServerConfigurations().isRServicesEnabled());
        Assertions.assertEquals("iqylihkaetck", model.sqlInstanceSettings().collation());
        Assertions.assertEquals(385263599, model.sqlInstanceSettings().maxDop());
        Assertions.assertEquals(false, model.sqlInstanceSettings().isOptimizeForAdHocWorkloadsEnabled());
        Assertions.assertEquals(533172139, model.sqlInstanceSettings().minServerMemoryMB());
        Assertions.assertEquals(1960016252, model.sqlInstanceSettings().maxServerMemoryMB());
        Assertions.assertEquals(true, model.sqlInstanceSettings().isLpimEnabled());
        Assertions.assertEquals(true, model.sqlInstanceSettings().isIfiEnabled());
    }

    @Test
    public void testSerialize() {
        ServerConfigurationsManagementSettings model =
            new ServerConfigurationsManagementSettings()
                .withSqlConnectivityUpdateSettings(
                    new SqlConnectivityUpdateSettings()
                        .withConnectivityType(ConnectivityType.PRIVATE)
                        .withPort(731084227)
                        .withSqlAuthUpdateUsername("pewr")
                        .withSqlAuthUpdatePassword("mwvvjektcxsenhw"))
                .withSqlWorkloadTypeUpdateSettings(
                    new SqlWorkloadTypeUpdateSettings().withSqlWorkloadType(SqlWorkloadType.DW))
                .withSqlStorageUpdateSettings(
                    new SqlStorageUpdateSettings()
                        .withDiskCount(842863771)
                        .withStartingDeviceId(2007426179)
                        .withDiskConfigurationType(DiskConfigurationType.ADD))
                .withAdditionalFeaturesServerConfigurations(
                    new AdditionalFeaturesServerConfigurations().withIsRServicesEnabled(false))
                .withSqlInstanceSettings(
                    new SqlInstanceSettings()
                        .withCollation("iqylihkaetck")
                        .withMaxDop(385263599)
                        .withIsOptimizeForAdHocWorkloadsEnabled(false)
                        .withMinServerMemoryMB(533172139)
                        .withMaxServerMemoryMB(1960016252)
                        .withIsLpimEnabled(true)
                        .withIsIfiEnabled(true));
        model = BinaryData.fromObject(model).toObject(ServerConfigurationsManagementSettings.class);
        Assertions.assertEquals(ConnectivityType.PRIVATE, model.sqlConnectivityUpdateSettings().connectivityType());
        Assertions.assertEquals(731084227, model.sqlConnectivityUpdateSettings().port());
        Assertions.assertEquals("pewr", model.sqlConnectivityUpdateSettings().sqlAuthUpdateUsername());
        Assertions.assertEquals("mwvvjektcxsenhw", model.sqlConnectivityUpdateSettings().sqlAuthUpdatePassword());
        Assertions.assertEquals(SqlWorkloadType.DW, model.sqlWorkloadTypeUpdateSettings().sqlWorkloadType());
        Assertions.assertEquals(842863771, model.sqlStorageUpdateSettings().diskCount());
        Assertions.assertEquals(2007426179, model.sqlStorageUpdateSettings().startingDeviceId());
        Assertions.assertEquals(DiskConfigurationType.ADD, model.sqlStorageUpdateSettings().diskConfigurationType());
        Assertions.assertEquals(false, model.additionalFeaturesServerConfigurations().isRServicesEnabled());
        Assertions.assertEquals("iqylihkaetck", model.sqlInstanceSettings().collation());
        Assertions.assertEquals(385263599, model.sqlInstanceSettings().maxDop());
        Assertions.assertEquals(false, model.sqlInstanceSettings().isOptimizeForAdHocWorkloadsEnabled());
        Assertions.assertEquals(533172139, model.sqlInstanceSettings().minServerMemoryMB());
        Assertions.assertEquals(1960016252, model.sqlInstanceSettings().maxServerMemoryMB());
        Assertions.assertEquals(true, model.sqlInstanceSettings().isLpimEnabled());
        Assertions.assertEquals(true, model.sqlInstanceSettings().isIfiEnabled());
    }
}
