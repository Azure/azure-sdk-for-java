// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.sqlvirtualmachine.models.DiskConfigurationType;
import com.azure.resourcemanager.sqlvirtualmachine.models.SqlStorageSettings;
import com.azure.resourcemanager.sqlvirtualmachine.models.SqlTempDbSettings;
import com.azure.resourcemanager.sqlvirtualmachine.models.StorageConfigurationSettings;
import com.azure.resourcemanager.sqlvirtualmachine.models.StorageWorkloadType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class StorageConfigurationSettingsTests {
    @Test
    public void testDeserialize() {
        StorageConfigurationSettings model =
            BinaryData
                .fromString(
                    "{\"sqlDataSettings\":{\"luns\":[10143119,1108075171,1769769453],\"defaultFilePath\":\"gvcl\"},\"sqlLogSettings\":{\"luns\":[1745548413,142984166,750018132],\"defaultFilePath\":\"kjeszz\"},\"sqlTempDbSettings\":{\"dataFileSize\":1755265349,\"dataGrowth\":1508297714,\"logFileSize\":836032675,\"logGrowth\":502156658,\"dataFileCount\":667929438,\"persistFolder\":false,\"persistFolderPath\":\"xnehmpvec\",\"luns\":[1976417253,68854326,1592452117,1209438571],\"defaultFilePath\":\"kk\"},\"sqlSystemDbOnDataDisk\":false,\"diskConfigurationType\":\"NEW\",\"storageWorkloadType\":\"DW\"}")
                .toObject(StorageConfigurationSettings.class);
        Assertions.assertEquals(10143119, model.sqlDataSettings().luns().get(0));
        Assertions.assertEquals("gvcl", model.sqlDataSettings().defaultFilePath());
        Assertions.assertEquals(1745548413, model.sqlLogSettings().luns().get(0));
        Assertions.assertEquals("kjeszz", model.sqlLogSettings().defaultFilePath());
        Assertions.assertEquals(1755265349, model.sqlTempDbSettings().dataFileSize());
        Assertions.assertEquals(1508297714, model.sqlTempDbSettings().dataGrowth());
        Assertions.assertEquals(836032675, model.sqlTempDbSettings().logFileSize());
        Assertions.assertEquals(502156658, model.sqlTempDbSettings().logGrowth());
        Assertions.assertEquals(667929438, model.sqlTempDbSettings().dataFileCount());
        Assertions.assertEquals(false, model.sqlTempDbSettings().persistFolder());
        Assertions.assertEquals("xnehmpvec", model.sqlTempDbSettings().persistFolderPath());
        Assertions.assertEquals(1976417253, model.sqlTempDbSettings().luns().get(0));
        Assertions.assertEquals("kk", model.sqlTempDbSettings().defaultFilePath());
        Assertions.assertEquals(false, model.sqlSystemDbOnDataDisk());
        Assertions.assertEquals(DiskConfigurationType.NEW, model.diskConfigurationType());
        Assertions.assertEquals(StorageWorkloadType.DW, model.storageWorkloadType());
    }

    @Test
    public void testSerialize() {
        StorageConfigurationSettings model =
            new StorageConfigurationSettings()
                .withSqlDataSettings(
                    new SqlStorageSettings()
                        .withLuns(Arrays.asList(10143119, 1108075171, 1769769453))
                        .withDefaultFilePath("gvcl"))
                .withSqlLogSettings(
                    new SqlStorageSettings()
                        .withLuns(Arrays.asList(1745548413, 142984166, 750018132))
                        .withDefaultFilePath("kjeszz"))
                .withSqlTempDbSettings(
                    new SqlTempDbSettings()
                        .withDataFileSize(1755265349)
                        .withDataGrowth(1508297714)
                        .withLogFileSize(836032675)
                        .withLogGrowth(502156658)
                        .withDataFileCount(667929438)
                        .withPersistFolder(false)
                        .withPersistFolderPath("xnehmpvec")
                        .withLuns(Arrays.asList(1976417253, 68854326, 1592452117, 1209438571))
                        .withDefaultFilePath("kk"))
                .withSqlSystemDbOnDataDisk(false)
                .withDiskConfigurationType(DiskConfigurationType.NEW)
                .withStorageWorkloadType(StorageWorkloadType.DW);
        model = BinaryData.fromObject(model).toObject(StorageConfigurationSettings.class);
        Assertions.assertEquals(10143119, model.sqlDataSettings().luns().get(0));
        Assertions.assertEquals("gvcl", model.sqlDataSettings().defaultFilePath());
        Assertions.assertEquals(1745548413, model.sqlLogSettings().luns().get(0));
        Assertions.assertEquals("kjeszz", model.sqlLogSettings().defaultFilePath());
        Assertions.assertEquals(1755265349, model.sqlTempDbSettings().dataFileSize());
        Assertions.assertEquals(1508297714, model.sqlTempDbSettings().dataGrowth());
        Assertions.assertEquals(836032675, model.sqlTempDbSettings().logFileSize());
        Assertions.assertEquals(502156658, model.sqlTempDbSettings().logGrowth());
        Assertions.assertEquals(667929438, model.sqlTempDbSettings().dataFileCount());
        Assertions.assertEquals(false, model.sqlTempDbSettings().persistFolder());
        Assertions.assertEquals("xnehmpvec", model.sqlTempDbSettings().persistFolderPath());
        Assertions.assertEquals(1976417253, model.sqlTempDbSettings().luns().get(0));
        Assertions.assertEquals("kk", model.sqlTempDbSettings().defaultFilePath());
        Assertions.assertEquals(false, model.sqlSystemDbOnDataDisk());
        Assertions.assertEquals(DiskConfigurationType.NEW, model.diskConfigurationType());
        Assertions.assertEquals(StorageWorkloadType.DW, model.storageWorkloadType());
    }
}
