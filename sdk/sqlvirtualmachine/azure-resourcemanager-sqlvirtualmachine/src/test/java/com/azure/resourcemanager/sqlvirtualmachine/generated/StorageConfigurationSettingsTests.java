// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.sqlvirtualmachine.models.DiskConfigurationType;
import com.azure.resourcemanager.sqlvirtualmachine.models.SqlStorageSettings;
import com.azure.resourcemanager.sqlvirtualmachine.models.SqlTempDbSettings;
import com.azure.resourcemanager.sqlvirtualmachine.models.StorageConfigurationSettings;
import com.azure.resourcemanager.sqlvirtualmachine.models.StorageWorkloadType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class StorageConfigurationSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageConfigurationSettings model = BinaryData.fromString(
            "{\"sqlDataSettings\":{\"luns\":[1709538743],\"defaultFilePath\":\"eupfhyhltrpm\"},\"sqlLogSettings\":{\"luns\":[584946048,1490971149,684041749,557848148],\"defaultFilePath\":\"okth\"},\"sqlTempDbSettings\":{\"dataFileSize\":102463289,\"dataGrowth\":1958511129,\"logFileSize\":1411125802,\"logGrowth\":2105680522,\"dataFileCount\":1099680690,\"persistFolder\":true,\"persistFolderPath\":\"dpuozmyz\",\"luns\":[402102325,1466756629,1091725271],\"defaultFilePath\":\"xbezyiuokktwh\"},\"sqlSystemDbOnDataDisk\":false,\"diskConfigurationType\":\"EXTEND\",\"storageWorkloadType\":\"OLTP\"}")
            .toObject(StorageConfigurationSettings.class);
        Assertions.assertEquals(1709538743, model.sqlDataSettings().luns().get(0));
        Assertions.assertEquals("eupfhyhltrpm", model.sqlDataSettings().defaultFilePath());
        Assertions.assertEquals(584946048, model.sqlLogSettings().luns().get(0));
        Assertions.assertEquals("okth", model.sqlLogSettings().defaultFilePath());
        Assertions.assertEquals(102463289, model.sqlTempDbSettings().dataFileSize());
        Assertions.assertEquals(1958511129, model.sqlTempDbSettings().dataGrowth());
        Assertions.assertEquals(1411125802, model.sqlTempDbSettings().logFileSize());
        Assertions.assertEquals(2105680522, model.sqlTempDbSettings().logGrowth());
        Assertions.assertEquals(1099680690, model.sqlTempDbSettings().dataFileCount());
        Assertions.assertEquals(true, model.sqlTempDbSettings().persistFolder());
        Assertions.assertEquals("dpuozmyz", model.sqlTempDbSettings().persistFolderPath());
        Assertions.assertEquals(402102325, model.sqlTempDbSettings().luns().get(0));
        Assertions.assertEquals("xbezyiuokktwh", model.sqlTempDbSettings().defaultFilePath());
        Assertions.assertEquals(false, model.sqlSystemDbOnDataDisk());
        Assertions.assertEquals(DiskConfigurationType.EXTEND, model.diskConfigurationType());
        Assertions.assertEquals(StorageWorkloadType.OLTP, model.storageWorkloadType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageConfigurationSettings model = new StorageConfigurationSettings()
            .withSqlDataSettings(
                new SqlStorageSettings().withLuns(Arrays.asList(1709538743)).withDefaultFilePath("eupfhyhltrpm"))
            .withSqlLogSettings(
                new SqlStorageSettings().withLuns(Arrays.asList(584946048, 1490971149, 684041749, 557848148))
                    .withDefaultFilePath("okth"))
            .withSqlTempDbSettings(new SqlTempDbSettings().withDataFileSize(102463289)
                .withDataGrowth(1958511129)
                .withLogFileSize(1411125802)
                .withLogGrowth(2105680522)
                .withDataFileCount(1099680690)
                .withPersistFolder(true)
                .withPersistFolderPath("dpuozmyz")
                .withLuns(Arrays.asList(402102325, 1466756629, 1091725271))
                .withDefaultFilePath("xbezyiuokktwh"))
            .withSqlSystemDbOnDataDisk(false)
            .withDiskConfigurationType(DiskConfigurationType.EXTEND)
            .withStorageWorkloadType(StorageWorkloadType.OLTP);
        model = BinaryData.fromObject(model).toObject(StorageConfigurationSettings.class);
        Assertions.assertEquals(1709538743, model.sqlDataSettings().luns().get(0));
        Assertions.assertEquals("eupfhyhltrpm", model.sqlDataSettings().defaultFilePath());
        Assertions.assertEquals(584946048, model.sqlLogSettings().luns().get(0));
        Assertions.assertEquals("okth", model.sqlLogSettings().defaultFilePath());
        Assertions.assertEquals(102463289, model.sqlTempDbSettings().dataFileSize());
        Assertions.assertEquals(1958511129, model.sqlTempDbSettings().dataGrowth());
        Assertions.assertEquals(1411125802, model.sqlTempDbSettings().logFileSize());
        Assertions.assertEquals(2105680522, model.sqlTempDbSettings().logGrowth());
        Assertions.assertEquals(1099680690, model.sqlTempDbSettings().dataFileCount());
        Assertions.assertEquals(true, model.sqlTempDbSettings().persistFolder());
        Assertions.assertEquals("dpuozmyz", model.sqlTempDbSettings().persistFolderPath());
        Assertions.assertEquals(402102325, model.sqlTempDbSettings().luns().get(0));
        Assertions.assertEquals("xbezyiuokktwh", model.sqlTempDbSettings().defaultFilePath());
        Assertions.assertEquals(false, model.sqlSystemDbOnDataDisk());
        Assertions.assertEquals(DiskConfigurationType.EXTEND, model.diskConfigurationType());
        Assertions.assertEquals(StorageWorkloadType.OLTP, model.storageWorkloadType());
    }
}
