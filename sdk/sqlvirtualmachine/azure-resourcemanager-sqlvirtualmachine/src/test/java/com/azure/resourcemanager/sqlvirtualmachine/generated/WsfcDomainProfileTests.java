// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.sqlvirtualmachine.models.ClusterSubnetType;
import com.azure.resourcemanager.sqlvirtualmachine.models.WsfcDomainProfile;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class WsfcDomainProfileTests {
    @Test
    public void testDeserialize() {
        WsfcDomainProfile model =
            BinaryData
                .fromString(
                    "{\"domainFqdn\":\"z\",\"ouPath\":\"iachbo\",\"clusterBootstrapAccount\":\"fakeClusterBootstrapAccountPlaceholder\",\"clusterOperatorAccount\":\"pyqr\",\"sqlServiceAccount\":\"z\",\"fileShareWitnessPath\":\"pvswjdkirso\",\"storageAccountUrl\":\"qxhcrmn\",\"storageAccountPrimaryKey\":\"fakeStorageAccountPrimaryKeyPlaceholder\",\"clusterSubnetType\":\"SingleSubnet\"}")
                .toObject(WsfcDomainProfile.class);
        Assertions.assertEquals("z", model.domainFqdn());
        Assertions.assertEquals("iachbo", model.ouPath());
        Assertions.assertEquals("fakeClusterBootstrapAccountPlaceholder", model.clusterBootstrapAccount());
        Assertions.assertEquals("pyqr", model.clusterOperatorAccount());
        Assertions.assertEquals("z", model.sqlServiceAccount());
        Assertions.assertEquals("pvswjdkirso", model.fileShareWitnessPath());
        Assertions.assertEquals("qxhcrmn", model.storageAccountUrl());
        Assertions.assertEquals("fakeStorageAccountPrimaryKeyPlaceholder", model.storageAccountPrimaryKey());
        Assertions.assertEquals(ClusterSubnetType.SINGLE_SUBNET, model.clusterSubnetType());
    }

    @Test
    public void testSerialize() {
        WsfcDomainProfile model =
            new WsfcDomainProfile()
                .withDomainFqdn("z")
                .withOuPath("iachbo")
                .withClusterBootstrapAccount("fakeClusterBootstrapAccountPlaceholder")
                .withClusterOperatorAccount("pyqr")
                .withSqlServiceAccount("z")
                .withFileShareWitnessPath("pvswjdkirso")
                .withStorageAccountUrl("qxhcrmn")
                .withStorageAccountPrimaryKey("fakeStorageAccountPrimaryKeyPlaceholder")
                .withClusterSubnetType(ClusterSubnetType.SINGLE_SUBNET);
        model = BinaryData.fromObject(model).toObject(WsfcDomainProfile.class);
        Assertions.assertEquals("z", model.domainFqdn());
        Assertions.assertEquals("iachbo", model.ouPath());
        Assertions.assertEquals("fakeClusterBootstrapAccountPlaceholder", model.clusterBootstrapAccount());
        Assertions.assertEquals("pyqr", model.clusterOperatorAccount());
        Assertions.assertEquals("z", model.sqlServiceAccount());
        Assertions.assertEquals("pvswjdkirso", model.fileShareWitnessPath());
        Assertions.assertEquals("qxhcrmn", model.storageAccountUrl());
        Assertions.assertEquals("fakeStorageAccountPrimaryKeyPlaceholder", model.storageAccountPrimaryKey());
        Assertions.assertEquals(ClusterSubnetType.SINGLE_SUBNET, model.clusterSubnetType());
    }
}
