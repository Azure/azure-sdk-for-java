// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.sqlvirtualmachine.models.AssessmentDayOfWeek;
import com.azure.resourcemanager.sqlvirtualmachine.models.AssessmentSettings;
import com.azure.resourcemanager.sqlvirtualmachine.models.Schedule;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AssessmentSettingsTests {
    @Test
    public void testDeserialize() {
        AssessmentSettings model =
            BinaryData
                .fromString(
                    "{\"enable\":false,\"runImmediately\":true,\"schedule\":{\"enable\":true,\"weeklyInterval\":850338934,\"monthlyOccurrence\":508085674,\"dayOfWeek\":\"Wednesday\",\"startTime\":\"bfs\"}}")
                .toObject(AssessmentSettings.class);
        Assertions.assertEquals(false, model.enable());
        Assertions.assertEquals(true, model.runImmediately());
        Assertions.assertEquals(true, model.schedule().enable());
        Assertions.assertEquals(850338934, model.schedule().weeklyInterval());
        Assertions.assertEquals(508085674, model.schedule().monthlyOccurrence());
        Assertions.assertEquals(AssessmentDayOfWeek.WEDNESDAY, model.schedule().dayOfWeek());
        Assertions.assertEquals("bfs", model.schedule().startTime());
    }

    @Test
    public void testSerialize() {
        AssessmentSettings model =
            new AssessmentSettings()
                .withEnable(false)
                .withRunImmediately(true)
                .withSchedule(
                    new Schedule()
                        .withEnable(true)
                        .withWeeklyInterval(850338934)
                        .withMonthlyOccurrence(508085674)
                        .withDayOfWeek(AssessmentDayOfWeek.WEDNESDAY)
                        .withStartTime("bfs"));
        model = BinaryData.fromObject(model).toObject(AssessmentSettings.class);
        Assertions.assertEquals(false, model.enable());
        Assertions.assertEquals(true, model.runImmediately());
        Assertions.assertEquals(true, model.schedule().enable());
        Assertions.assertEquals(850338934, model.schedule().weeklyInterval());
        Assertions.assertEquals(508085674, model.schedule().monthlyOccurrence());
        Assertions.assertEquals(AssessmentDayOfWeek.WEDNESDAY, model.schedule().dayOfWeek());
        Assertions.assertEquals("bfs", model.schedule().startTime());
    }
}
