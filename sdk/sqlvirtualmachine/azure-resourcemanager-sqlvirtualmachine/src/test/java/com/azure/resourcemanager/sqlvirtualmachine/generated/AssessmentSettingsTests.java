// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.sqlvirtualmachine.models.AssessmentDayOfWeek;
import com.azure.resourcemanager.sqlvirtualmachine.models.AssessmentSettings;
import com.azure.resourcemanager.sqlvirtualmachine.models.Schedule;
import org.junit.jupiter.api.Assertions;

public final class AssessmentSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AssessmentSettings model = BinaryData.fromString(
            "{\"enable\":false,\"runImmediately\":true,\"schedule\":{\"enable\":false,\"weeklyInterval\":825397815,\"monthlyOccurrence\":2143826704,\"dayOfWeek\":\"Monday\",\"startTime\":\"uwiqzb\"}}")
            .toObject(AssessmentSettings.class);
        Assertions.assertEquals(false, model.enable());
        Assertions.assertEquals(true, model.runImmediately());
        Assertions.assertEquals(false, model.schedule().enable());
        Assertions.assertEquals(825397815, model.schedule().weeklyInterval());
        Assertions.assertEquals(2143826704, model.schedule().monthlyOccurrence());
        Assertions.assertEquals(AssessmentDayOfWeek.MONDAY, model.schedule().dayOfWeek());
        Assertions.assertEquals("uwiqzb", model.schedule().startTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AssessmentSettings model = new AssessmentSettings().withEnable(false)
            .withRunImmediately(true)
            .withSchedule(new Schedule().withEnable(false)
                .withWeeklyInterval(825397815)
                .withMonthlyOccurrence(2143826704)
                .withDayOfWeek(AssessmentDayOfWeek.MONDAY)
                .withStartTime("uwiqzb"));
        model = BinaryData.fromObject(model).toObject(AssessmentSettings.class);
        Assertions.assertEquals(false, model.enable());
        Assertions.assertEquals(true, model.runImmediately());
        Assertions.assertEquals(false, model.schedule().enable());
        Assertions.assertEquals(825397815, model.schedule().weeklyInterval());
        Assertions.assertEquals(2143826704, model.schedule().monthlyOccurrence());
        Assertions.assertEquals(AssessmentDayOfWeek.MONDAY, model.schedule().dayOfWeek());
        Assertions.assertEquals("uwiqzb", model.schedule().startTime());
    }
}
