// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.sqlvirtualmachine.fluent.models.SqlVirtualMachineGroupInner;
import com.azure.resourcemanager.sqlvirtualmachine.models.ClusterSubnetType;
import com.azure.resourcemanager.sqlvirtualmachine.models.SqlVmGroupImageSku;
import com.azure.resourcemanager.sqlvirtualmachine.models.WsfcDomainProfile;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class SqlVirtualMachineGroupInnerTests {
    @Test
    public void testDeserialize() {
        SqlVirtualMachineGroupInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"e\",\"sqlImageOffer\":\"ytb\",\"sqlImageSku\":\"Developer\",\"scaleType\":\"HA\",\"clusterManagerType\":\"WSFC\",\"clusterConfiguration\":\"Domainful\",\"wsfcDomainProfile\":{\"domainFqdn\":\"kzsmodm\",\"ouPath\":\"ougpbkwt\",\"clusterBootstrapAccount\":\"tduqktapspwgcuer\",\"clusterOperatorAccount\":\"mkdo\",\"sqlServiceAccount\":\"qw\",\"fileShareWitnessPath\":\"mdgbbjfdd\",\"storageAccountUrl\":\"bmbexppbhtqqro\",\"storageAccountPrimaryKey\":\"p\",\"clusterSubnetType\":\"SingleSubnet\"}},\"location\":\"lgbquxig\",\"tags\":{\"kujysvlejuvfq\":\"gzjaoyfhrtxilne\",\"wbxgjvt\":\"wrlyxwjkcprb\",\"zdn\":\"vpys\"},\"id\":\"uj\",\"name\":\"guhmuouqfpr\",\"type\":\"zw\"}")
                .toObject(SqlVirtualMachineGroupInner.class);
        Assertions.assertEquals("lgbquxig", model.location());
        Assertions.assertEquals("gzjaoyfhrtxilne", model.tags().get("kujysvlejuvfq"));
        Assertions.assertEquals("ytb", model.sqlImageOffer());
        Assertions.assertEquals(SqlVmGroupImageSku.DEVELOPER, model.sqlImageSku());
        Assertions.assertEquals("kzsmodm", model.wsfcDomainProfile().domainFqdn());
        Assertions.assertEquals("ougpbkwt", model.wsfcDomainProfile().ouPath());
        Assertions.assertEquals("tduqktapspwgcuer", model.wsfcDomainProfile().clusterBootstrapAccount());
        Assertions.assertEquals("mkdo", model.wsfcDomainProfile().clusterOperatorAccount());
        Assertions.assertEquals("qw", model.wsfcDomainProfile().sqlServiceAccount());
        Assertions.assertEquals("mdgbbjfdd", model.wsfcDomainProfile().fileShareWitnessPath());
        Assertions.assertEquals("bmbexppbhtqqro", model.wsfcDomainProfile().storageAccountUrl());
        Assertions.assertEquals("p", model.wsfcDomainProfile().storageAccountPrimaryKey());
        Assertions.assertEquals(ClusterSubnetType.SINGLE_SUBNET, model.wsfcDomainProfile().clusterSubnetType());
    }

    @Test
    public void testSerialize() {
        SqlVirtualMachineGroupInner model =
            new SqlVirtualMachineGroupInner()
                .withLocation("lgbquxig")
                .withTags(mapOf("kujysvlejuvfq", "gzjaoyfhrtxilne", "wbxgjvt", "wrlyxwjkcprb", "zdn", "vpys"))
                .withSqlImageOffer("ytb")
                .withSqlImageSku(SqlVmGroupImageSku.DEVELOPER)
                .withWsfcDomainProfile(
                    new WsfcDomainProfile()
                        .withDomainFqdn("kzsmodm")
                        .withOuPath("ougpbkwt")
                        .withClusterBootstrapAccount("tduqktapspwgcuer")
                        .withClusterOperatorAccount("mkdo")
                        .withSqlServiceAccount("qw")
                        .withFileShareWitnessPath("mdgbbjfdd")
                        .withStorageAccountUrl("bmbexppbhtqqro")
                        .withStorageAccountPrimaryKey("p")
                        .withClusterSubnetType(ClusterSubnetType.SINGLE_SUBNET));
        model = BinaryData.fromObject(model).toObject(SqlVirtualMachineGroupInner.class);
        Assertions.assertEquals("lgbquxig", model.location());
        Assertions.assertEquals("gzjaoyfhrtxilne", model.tags().get("kujysvlejuvfq"));
        Assertions.assertEquals("ytb", model.sqlImageOffer());
        Assertions.assertEquals(SqlVmGroupImageSku.DEVELOPER, model.sqlImageSku());
        Assertions.assertEquals("kzsmodm", model.wsfcDomainProfile().domainFqdn());
        Assertions.assertEquals("ougpbkwt", model.wsfcDomainProfile().ouPath());
        Assertions.assertEquals("tduqktapspwgcuer", model.wsfcDomainProfile().clusterBootstrapAccount());
        Assertions.assertEquals("mkdo", model.wsfcDomainProfile().clusterOperatorAccount());
        Assertions.assertEquals("qw", model.wsfcDomainProfile().sqlServiceAccount());
        Assertions.assertEquals("mdgbbjfdd", model.wsfcDomainProfile().fileShareWitnessPath());
        Assertions.assertEquals("bmbexppbhtqqro", model.wsfcDomainProfile().storageAccountUrl());
        Assertions.assertEquals("p", model.wsfcDomainProfile().storageAccountPrimaryKey());
        Assertions.assertEquals(ClusterSubnetType.SINGLE_SUBNET, model.wsfcDomainProfile().clusterSubnetType());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
