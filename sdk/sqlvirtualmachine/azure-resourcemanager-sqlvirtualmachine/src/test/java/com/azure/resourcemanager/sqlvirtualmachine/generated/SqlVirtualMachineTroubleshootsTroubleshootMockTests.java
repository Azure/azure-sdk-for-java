// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.sqlvirtualmachine.SqlVirtualMachineManager;
import com.azure.resourcemanager.sqlvirtualmachine.fluent.models.SqlVmTroubleshootingInner;
import com.azure.resourcemanager.sqlvirtualmachine.models.SqlVmTroubleshooting;
import com.azure.resourcemanager.sqlvirtualmachine.models.TroubleshootingAdditionalProperties;
import com.azure.resourcemanager.sqlvirtualmachine.models.TroubleshootingScenario;
import com.azure.resourcemanager.sqlvirtualmachine.models.UnhealthyReplicaInfo;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SqlVirtualMachineTroubleshootsTroubleshootMockTests {
    @Test
    public void testTroubleshoot() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"startTimeUtc\":\"2021-04-06T16:15:02Z\",\"endTimeUtc\":\"2021-05-15T05:32:47Z\",\"troubleshootingScenario\":\"UnhealthyReplica\",\"properties\":{\"unhealthyReplicaInfo\":{\"availabilityGroupName\":\"mwlxk\"}},\"virtualMachineResourceId\":\"gfhzovawjvzunlut\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SqlVirtualMachineManager manager =
            SqlVirtualMachineManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SqlVmTroubleshooting response =
            manager
                .sqlVirtualMachineTroubleshoots()
                .troubleshoot(
                    "iwwroyqbexrmc",
                    "ibycno",
                    new SqlVmTroubleshootingInner()
                        .withStartTimeUtc(OffsetDateTime.parse("2021-01-15T20:00:37Z"))
                        .withEndTimeUtc(OffsetDateTime.parse("2021-02-06T03:19:14Z"))
                        .withTroubleshootingScenario(TroubleshootingScenario.UNHEALTHY_REPLICA)
                        .withProperties(
                            new TroubleshootingAdditionalProperties()
                                .withUnhealthyReplicaInfo(new UnhealthyReplicaInfo().withAvailabilityGroupName("vah"))),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals(OffsetDateTime.parse("2021-04-06T16:15:02Z"), response.startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-15T05:32:47Z"), response.endTimeUtc());
        Assertions.assertEquals(TroubleshootingScenario.UNHEALTHY_REPLICA, response.troubleshootingScenario());
        Assertions.assertEquals("mwlxk", response.properties().unhealthyReplicaInfo().availabilityGroupName());
    }
}
