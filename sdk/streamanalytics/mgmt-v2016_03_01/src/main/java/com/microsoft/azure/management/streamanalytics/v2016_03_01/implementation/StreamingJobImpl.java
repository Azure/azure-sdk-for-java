/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.streamanalytics.v2016_03_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.streamanalytics.v2016_03_01.StreamingJob;
import rx.Observable;
import com.microsoft.azure.management.streamanalytics.v2016_03_01.Sku;
import com.microsoft.azure.management.streamanalytics.v2016_03_01.OutputStartMode;
import org.joda.time.DateTime;
import com.microsoft.azure.management.streamanalytics.v2016_03_01.EventsOutOfOrderPolicy;
import com.microsoft.azure.management.streamanalytics.v2016_03_01.OutputErrorPolicy;
import com.microsoft.azure.management.streamanalytics.v2016_03_01.CompatibilityLevel;
import java.util.List;
import java.util.ArrayList;
import com.microsoft.azure.management.streamanalytics.v2016_03_01.Function;
import com.microsoft.azure.management.streamanalytics.v2016_03_01.Input;
import com.microsoft.azure.management.streamanalytics.v2016_03_01.Output;
import com.microsoft.azure.management.streamanalytics.v2016_03_01.Transformation;

class StreamingJobImpl extends GroupableResourceCoreImpl<StreamingJob, StreamingJobInner, StreamingJobImpl, StreamAnalyticsManager> implements StreamingJob, StreamingJob.Definition, StreamingJob.Update {
    StreamingJobImpl(String name, StreamingJobInner inner, StreamAnalyticsManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<StreamingJob> createResourceAsync() {
        StreamingJobsInner client = this.manager().inner().streamingJobs();
        return client.createOrReplaceAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<StreamingJob> updateResourceAsync() {
        StreamingJobsInner client = this.manager().inner().streamingJobs();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<StreamingJobInner> getInnerAsync() {
        StreamingJobsInner client = this.manager().inner().streamingJobs();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public CompatibilityLevel compatibilityLevel() {
        return this.inner().compatibilityLevel();
    }

    @Override
    public DateTime createdDate() {
        return this.inner().createdDate();
    }

    @Override
    public String dataLocale() {
        return this.inner().dataLocale();
    }

    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public Integer eventsLateArrivalMaxDelayInSeconds() {
        return this.inner().eventsLateArrivalMaxDelayInSeconds();
    }

    @Override
    public Integer eventsOutOfOrderMaxDelayInSeconds() {
        return this.inner().eventsOutOfOrderMaxDelayInSeconds();
    }

    @Override
    public EventsOutOfOrderPolicy eventsOutOfOrderPolicy() {
        return this.inner().eventsOutOfOrderPolicy();
    }

    @Override
    public List<Function> functions() {
        List<Function> lst = new ArrayList<Function>();
        if (this.inner().functions() != null) {
            for (FunctionInner inner : this.inner().functions()) {
                lst.add( new FunctionImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public List<Input> inputs() {
        List<Input> lst = new ArrayList<Input>();
        if (this.inner().inputs() != null) {
            for (InputInner inner : this.inner().inputs()) {
                lst.add( new InputImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public String jobId() {
        return this.inner().jobId();
    }

    @Override
    public String jobState() {
        return this.inner().jobState();
    }

    @Override
    public DateTime lastOutputEventTime() {
        return this.inner().lastOutputEventTime();
    }

    @Override
    public OutputErrorPolicy outputErrorPolicy() {
        return this.inner().outputErrorPolicy();
    }

    @Override
    public List<Output> outputs() {
        List<Output> lst = new ArrayList<Output>();
        if (this.inner().outputs() != null) {
            for (OutputInner inner : this.inner().outputs()) {
                lst.add( new OutputImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public OutputStartMode outputStartMode() {
        return this.inner().outputStartMode();
    }

    @Override
    public DateTime outputStartTime() {
        return this.inner().outputStartTime();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public Sku sku() {
        return this.inner().sku();
    }

    @Override
    public Transformation transformation() {
        TransformationInner inner = this.inner().transformation();
        if (inner != null) {
            return  new TransformationImpl(inner, manager());
        } else {
            return null;
        }
    }

    @Override
    public StreamingJobImpl withCompatibilityLevel(CompatibilityLevel compatibilityLevel) {
        this.inner().withCompatibilityLevel(compatibilityLevel);
        return this;
    }

    @Override
    public StreamingJobImpl withDataLocale(String dataLocale) {
        this.inner().withDataLocale(dataLocale);
        return this;
    }

    @Override
    public StreamingJobImpl withEventsLateArrivalMaxDelayInSeconds(Integer eventsLateArrivalMaxDelayInSeconds) {
        this.inner().withEventsLateArrivalMaxDelayInSeconds(eventsLateArrivalMaxDelayInSeconds);
        return this;
    }

    @Override
    public StreamingJobImpl withEventsOutOfOrderMaxDelayInSeconds(Integer eventsOutOfOrderMaxDelayInSeconds) {
        this.inner().withEventsOutOfOrderMaxDelayInSeconds(eventsOutOfOrderMaxDelayInSeconds);
        return this;
    }

    @Override
    public StreamingJobImpl withEventsOutOfOrderPolicy(EventsOutOfOrderPolicy eventsOutOfOrderPolicy) {
        this.inner().withEventsOutOfOrderPolicy(eventsOutOfOrderPolicy);
        return this;
    }

    @Override
    public StreamingJobImpl withFunctions(List<FunctionInner> functions) {
        this.inner().withFunctions(functions);
        return this;
    }

    @Override
    public StreamingJobImpl withInputs(List<InputInner> inputs) {
        this.inner().withInputs(inputs);
        return this;
    }

    @Override
    public StreamingJobImpl withOutputErrorPolicy(OutputErrorPolicy outputErrorPolicy) {
        this.inner().withOutputErrorPolicy(outputErrorPolicy);
        return this;
    }

    @Override
    public StreamingJobImpl withOutputs(List<OutputInner> outputs) {
        this.inner().withOutputs(outputs);
        return this;
    }

    @Override
    public StreamingJobImpl withOutputStartMode(OutputStartMode outputStartMode) {
        this.inner().withOutputStartMode(outputStartMode);
        return this;
    }

    @Override
    public StreamingJobImpl withOutputStartTime(DateTime outputStartTime) {
        this.inner().withOutputStartTime(outputStartTime);
        return this;
    }

    @Override
    public StreamingJobImpl withSku(Sku sku) {
        this.inner().withSku(sku);
        return this;
    }

    @Override
    public StreamingJobImpl withTransformation(TransformationInner transformation) {
        this.inner().withTransformation(transformation);
        return this;
    }

}
