/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.streamanalytics.v2016_03_01.implementation;

import com.microsoft.azure.management.streamanalytics.v2016_03_01.Output;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.streamanalytics.v2016_03_01.OutputDataSource;
import com.microsoft.azure.management.streamanalytics.v2016_03_01.Serialization;
import com.microsoft.azure.management.streamanalytics.v2016_03_01.Diagnostics;

class OutputImpl extends CreatableUpdatableImpl<Output, OutputInner, OutputImpl> implements Output, Output.Definition, Output.Update {
    private final StreamAnalyticsManager manager;
    private String resourceGroupName;
    private String jobName;
    private String outputName;

    OutputImpl(String name, StreamAnalyticsManager manager) {
        super(name, new OutputInner());
        this.manager = manager;
        // Set resource name
        this.outputName = name;
        //
    }

    OutputImpl(OutputInner inner, StreamAnalyticsManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.outputName = inner.name();
        // resource ancestor names
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourcegroups");
        this.jobName = IdParsingUtils.getValueFromIdByName(inner.id(), "streamingjobs");
        this.outputName = IdParsingUtils.getValueFromIdByName(inner.id(), "outputs");
        //
    }

    @Override
    public StreamAnalyticsManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Output> createResourceAsync() {
        OutputsInner client = this.manager().inner().outputs();
        return client.createOrReplaceAsync(this.resourceGroupName, this.jobName, this.outputName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Output> updateResourceAsync() {
        OutputsInner client = this.manager().inner().outputs();
        return client.updateAsync(this.resourceGroupName, this.jobName, this.outputName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<OutputInner> getInnerAsync() {
        OutputsInner client = this.manager().inner().outputs();
        return client.getAsync(this.resourceGroupName, this.jobName, this.outputName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public OutputDataSource datasource() {
        return this.inner().datasource();
    }

    @Override
    public Diagnostics diagnostics() {
        return this.inner().diagnostics();
    }

    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Serialization serialization() {
        return this.inner().serialization();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public OutputImpl withExistingStreamingjob(String resourceGroupName, String jobName) {
        this.resourceGroupName = resourceGroupName;
        this.jobName = jobName;
        return this;
    }

    @Override
    public OutputImpl withDatasource(OutputDataSource datasource) {
        this.inner().withDatasource(datasource);
        return this;
    }

    @Override
    public OutputImpl withName(String name) {
        this.inner().withName(name);
        return this;
    }

    @Override
    public OutputImpl withSerialization(Serialization serialization) {
        this.inner().withSerialization(serialization);
        return this;
    }

}
