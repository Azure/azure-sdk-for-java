// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The properties that are associated with a blob input containing stream data. */
@Fluent
public final class BlobStreamInputDataSourceProperties extends BlobDataSourceProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(BlobStreamInputDataSourceProperties.class);

    /*
     * The partition count of the blob input data source. Range 1 - 256.
     */
    @JsonProperty(value = "sourcePartitionCount")
    private Integer sourcePartitionCount;

    /**
     * Get the sourcePartitionCount property: The partition count of the blob input data source. Range 1 - 256.
     *
     * @return the sourcePartitionCount value.
     */
    public Integer sourcePartitionCount() {
        return this.sourcePartitionCount;
    }

    /**
     * Set the sourcePartitionCount property: The partition count of the blob input data source. Range 1 - 256.
     *
     * @param sourcePartitionCount the sourcePartitionCount value to set.
     * @return the BlobStreamInputDataSourceProperties object itself.
     */
    public BlobStreamInputDataSourceProperties withSourcePartitionCount(Integer sourcePartitionCount) {
        this.sourcePartitionCount = sourcePartitionCount;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public BlobStreamInputDataSourceProperties withStorageAccounts(List<StorageAccount> storageAccounts) {
        super.withStorageAccounts(storageAccounts);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public BlobStreamInputDataSourceProperties withContainer(String container) {
        super.withContainer(container);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public BlobStreamInputDataSourceProperties withPathPattern(String pathPattern) {
        super.withPathPattern(pathPattern);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public BlobStreamInputDataSourceProperties withDateFormat(String dateFormat) {
        super.withDateFormat(dateFormat);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public BlobStreamInputDataSourceProperties withTimeFormat(String timeFormat) {
        super.withTimeFormat(timeFormat);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
