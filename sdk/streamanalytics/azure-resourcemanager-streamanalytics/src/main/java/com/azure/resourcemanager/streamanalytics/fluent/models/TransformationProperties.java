// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties that are associated with a transformation.
 */
@Fluent
public final class TransformationProperties implements JsonSerializable<TransformationProperties> {
    /*
     * Specifies the number of streaming units that the streaming job uses.
     */
    private Integer streamingUnits;

    /*
     * Specifies the valid streaming units a streaming job can scale to.
     */
    private List<Integer> validStreamingUnits;

    /*
     * Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query
     * Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace)
     * requests.
     */
    private String query;

    /*
     * The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the
     * resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write
     * operations for optimistic concurrency.
     */
    private String etag;

    /**
     * Creates an instance of TransformationProperties class.
     */
    public TransformationProperties() {
    }

    /**
     * Get the streamingUnits property: Specifies the number of streaming units that the streaming job uses.
     * 
     * @return the streamingUnits value.
     */
    public Integer streamingUnits() {
        return this.streamingUnits;
    }

    /**
     * Set the streamingUnits property: Specifies the number of streaming units that the streaming job uses.
     * 
     * @param streamingUnits the streamingUnits value to set.
     * @return the TransformationProperties object itself.
     */
    public TransformationProperties withStreamingUnits(Integer streamingUnits) {
        this.streamingUnits = streamingUnits;
        return this;
    }

    /**
     * Get the validStreamingUnits property: Specifies the valid streaming units a streaming job can scale to.
     * 
     * @return the validStreamingUnits value.
     */
    public List<Integer> validStreamingUnits() {
        return this.validStreamingUnits;
    }

    /**
     * Set the validStreamingUnits property: Specifies the valid streaming units a streaming job can scale to.
     * 
     * @param validStreamingUnits the validStreamingUnits value to set.
     * @return the TransformationProperties object itself.
     */
    public TransformationProperties withValidStreamingUnits(List<Integer> validStreamingUnits) {
        this.validStreamingUnits = validStreamingUnits;
        return this;
    }

    /**
     * Get the query property: Specifies the query that will be run in the streaming job. You can learn more about the
     * Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @return the query value.
     */
    public String query() {
        return this.query;
    }

    /**
     * Set the query property: Specifies the query that will be run in the streaming job. You can learn more about the
     * Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @param query the query value to set.
     * @return the TransformationProperties object itself.
     */
    public TransformationProperties withQuery(String query) {
        this.query = query;
        return this;
    }

    /**
     * Get the etag property: The current entity tag for the transformation. This is an opaque string. You can use it to
     * detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match
     * headers for write operations for optimistic concurrency.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("streamingUnits", this.streamingUnits);
        jsonWriter.writeArrayField("validStreamingUnits", this.validStreamingUnits,
            (writer, element) -> writer.writeInt(element));
        jsonWriter.writeStringField("query", this.query);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TransformationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TransformationProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TransformationProperties.
     */
    public static TransformationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TransformationProperties deserializedTransformationProperties = new TransformationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("streamingUnits".equals(fieldName)) {
                    deserializedTransformationProperties.streamingUnits = reader.getNullable(JsonReader::getInt);
                } else if ("validStreamingUnits".equals(fieldName)) {
                    List<Integer> validStreamingUnits = reader.readArray(reader1 -> reader1.getInt());
                    deserializedTransformationProperties.validStreamingUnits = validStreamingUnits;
                } else if ("query".equals(fieldName)) {
                    deserializedTransformationProperties.query = reader.getString();
                } else if ("etag".equals(fieldName)) {
                    deserializedTransformationProperties.etag = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTransformationProperties;
        });
    }
}
