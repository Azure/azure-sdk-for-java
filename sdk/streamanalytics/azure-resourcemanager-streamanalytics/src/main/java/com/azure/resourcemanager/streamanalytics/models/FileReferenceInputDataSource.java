// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.fluent.models.FileReferenceInputDataSourceProperties;
import java.io.IOException;

/**
 * Describes a file input data source that contains reference data.
 */
@Fluent
public final class FileReferenceInputDataSource extends ReferenceInputDataSource {
    /*
     * Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
     */
    private String type = "File";

    /*
     * The properties that are associated with a file input containing reference data. Required on PUT (CreateOrReplace)
     * requests.
     */
    private FileReferenceInputDataSourceProperties innerProperties;

    /**
     * Creates an instance of FileReferenceInputDataSource class.
     */
    public FileReferenceInputDataSource() {
    }

    /**
     * Get the type property: Indicates the type of input data source containing reference data. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the innerProperties property: The properties that are associated with a file input containing reference data.
     * Required on PUT (CreateOrReplace) requests.
     * 
     * @return the innerProperties value.
     */
    private FileReferenceInputDataSourceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the path property: The path of the file.
     * 
     * @return the path value.
     */
    public String path() {
        return this.innerProperties() == null ? null : this.innerProperties().path();
    }

    /**
     * Set the path property: The path of the file.
     * 
     * @param path the path value to set.
     * @return the FileReferenceInputDataSource object itself.
     */
    public FileReferenceInputDataSource withPath(String path) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FileReferenceInputDataSourceProperties();
        }
        this.innerProperties().withPath(path);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FileReferenceInputDataSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FileReferenceInputDataSource if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FileReferenceInputDataSource.
     */
    public static FileReferenceInputDataSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FileReferenceInputDataSource deserializedFileReferenceInputDataSource = new FileReferenceInputDataSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedFileReferenceInputDataSource.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedFileReferenceInputDataSource.innerProperties
                        = FileReferenceInputDataSourceProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFileReferenceInputDataSource;
        });
    }
}
