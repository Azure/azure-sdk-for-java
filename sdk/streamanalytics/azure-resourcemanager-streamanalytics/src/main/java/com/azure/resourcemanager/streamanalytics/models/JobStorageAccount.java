// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties that are associated with an Azure Storage account with MSI.
 */
@Fluent
public final class JobStorageAccount extends StorageAccount {
    /**
     * Creates an instance of JobStorageAccount class.
     */
    public JobStorageAccount() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JobStorageAccount withAccountName(String accountName) {
        super.withAccountName(accountName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JobStorageAccount withAccountKey(String accountKey) {
        super.withAccountKey(accountKey);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JobStorageAccount withAuthenticationMode(AuthenticationMode authenticationMode) {
        super.withAuthenticationMode(authenticationMode);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("accountName", accountName());
        jsonWriter.writeStringField("accountKey", accountKey());
        jsonWriter.writeStringField("authenticationMode",
            authenticationMode() == null ? null : authenticationMode().toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobStorageAccount from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobStorageAccount if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the JobStorageAccount.
     */
    public static JobStorageAccount fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobStorageAccount deserializedJobStorageAccount = new JobStorageAccount();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accountName".equals(fieldName)) {
                    deserializedJobStorageAccount.withAccountName(reader.getString());
                } else if ("accountKey".equals(fieldName)) {
                    deserializedJobStorageAccount.withAccountKey(reader.getString());
                } else if ("authenticationMode".equals(fieldName)) {
                    deserializedJobStorageAccount
                        .withAuthenticationMode(AuthenticationMode.fromString(reader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobStorageAccount;
        });
    }
}
