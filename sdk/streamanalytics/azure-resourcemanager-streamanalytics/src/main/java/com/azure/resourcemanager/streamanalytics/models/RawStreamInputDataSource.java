// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.fluent.models.RawInputDatasourceProperties;
import java.io.IOException;

/**
 * Describes a raw input data source that contains stream data. This data source type is only applicable/usable when
 * using the query testing API. You cannot create a job with this data source type or add an input of this data source
 * type to an existing job.
 */
@Fluent
public final class RawStreamInputDataSource extends StreamInputDataSource {
    /*
     * Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
     */
    private String type = "Raw";

    /*
     * The properties that are associated with a raw input. Required on PUT (CreateOrReplace) requests.
     */
    private RawInputDatasourceProperties innerProperties;

    /**
     * Creates an instance of RawStreamInputDataSource class.
     */
    public RawStreamInputDataSource() {
    }

    /**
     * Get the type property: Indicates the type of input data source containing stream data. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the innerProperties property: The properties that are associated with a raw input. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @return the innerProperties value.
     */
    private RawInputDatasourceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the payload property: The JSON serialized content of the input data. Either payload or payloadUri must be
     * set, but not both.
     * 
     * @return the payload value.
     */
    public String payload() {
        return this.innerProperties() == null ? null : this.innerProperties().payload();
    }

    /**
     * Set the payload property: The JSON serialized content of the input data. Either payload or payloadUri must be
     * set, but not both.
     * 
     * @param payload the payload value to set.
     * @return the RawStreamInputDataSource object itself.
     */
    public RawStreamInputDataSource withPayload(String payload) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RawInputDatasourceProperties();
        }
        this.innerProperties().withPayload(payload);
        return this;
    }

    /**
     * Get the payloadUri property: The SAS URL to a blob containing the JSON serialized content of the input data.
     * Either payload or payloadUri must be set, but not both.
     * 
     * @return the payloadUri value.
     */
    public String payloadUri() {
        return this.innerProperties() == null ? null : this.innerProperties().payloadUri();
    }

    /**
     * Set the payloadUri property: The SAS URL to a blob containing the JSON serialized content of the input data.
     * Either payload or payloadUri must be set, but not both.
     * 
     * @param payloadUri the payloadUri value to set.
     * @return the RawStreamInputDataSource object itself.
     */
    public RawStreamInputDataSource withPayloadUri(String payloadUri) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RawInputDatasourceProperties();
        }
        this.innerProperties().withPayloadUri(payloadUri);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RawStreamInputDataSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RawStreamInputDataSource if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RawStreamInputDataSource.
     */
    public static RawStreamInputDataSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RawStreamInputDataSource deserializedRawStreamInputDataSource = new RawStreamInputDataSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedRawStreamInputDataSource.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedRawStreamInputDataSource.innerProperties
                        = RawInputDatasourceProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRawStreamInputDataSource;
        });
    }
}
