// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.fluent.models.RawOutputDatasourceProperties;
import java.io.IOException;

/**
 * Describes a raw output data source. This data source type is only applicable/usable when using the query testing API.
 * You cannot create a job with this data source type or add an output of this data source type to an existing job.
 */
@Fluent
public final class RawOutputDatasource extends OutputDataSource {
    /*
     * Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
     */
    private String type = "Raw";

    /*
     * The properties that are associated with a raw output. Required on PUT (CreateOrReplace) requests.
     */
    private RawOutputDatasourceProperties innerProperties;

    /**
     * Creates an instance of RawOutputDatasource class.
     */
    public RawOutputDatasource() {
    }

    /**
     * Get the type property: Indicates the type of data source output will be written to. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the innerProperties property: The properties that are associated with a raw output. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @return the innerProperties value.
     */
    private RawOutputDatasourceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the payloadUri property: The SAS URL to a blob where the output should be written. If this property is not
     * set, output data will be written into a temporary storage, and a SAS URL to that temporary storage will be
     * included in the result.
     * 
     * @return the payloadUri value.
     */
    public String payloadUri() {
        return this.innerProperties() == null ? null : this.innerProperties().payloadUri();
    }

    /**
     * Set the payloadUri property: The SAS URL to a blob where the output should be written. If this property is not
     * set, output data will be written into a temporary storage, and a SAS URL to that temporary storage will be
     * included in the result.
     * 
     * @param payloadUri the payloadUri value to set.
     * @return the RawOutputDatasource object itself.
     */
    public RawOutputDatasource withPayloadUri(String payloadUri) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RawOutputDatasourceProperties();
        }
        this.innerProperties().withPayloadUri(payloadUri);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RawOutputDatasource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RawOutputDatasource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RawOutputDatasource.
     */
    public static RawOutputDatasource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RawOutputDatasource deserializedRawOutputDatasource = new RawOutputDatasource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedRawOutputDatasource.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedRawOutputDatasource.innerProperties = RawOutputDatasourceProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRawOutputDatasource;
        });
    }
}
