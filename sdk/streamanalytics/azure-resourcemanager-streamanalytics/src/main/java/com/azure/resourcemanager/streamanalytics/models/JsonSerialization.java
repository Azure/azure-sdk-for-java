// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.fluent.models.JsonSerializationProperties;
import java.io.IOException;

/**
 * Describes how data from an input is serialized or how data is serialized when written to an output in JSON format.
 */
@Fluent
public final class JsonSerialization extends Serialization {
    /*
     * Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
     */
    private EventSerializationType type = EventSerializationType.JSON;

    /*
     * The properties that are associated with the JSON serialization type. Required on PUT (CreateOrReplace) requests.
     */
    private JsonSerializationProperties innerProperties;

    /**
     * Creates an instance of JsonSerialization class.
     */
    public JsonSerialization() {
    }

    /**
     * Get the type property: Indicates the type of serialization that the input or output uses. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @return the type value.
     */
    @Override
    public EventSerializationType type() {
        return this.type;
    }

    /**
     * Get the innerProperties property: The properties that are associated with the JSON serialization type. Required
     * on PUT (CreateOrReplace) requests.
     * 
     * @return the innerProperties value.
     */
    private JsonSerializationProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the encoding property: Specifies the encoding of the incoming data in the case of input and the encoding of
     * outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
     * 
     * @return the encoding value.
     */
    public Encoding encoding() {
        return this.innerProperties() == null ? null : this.innerProperties().encoding();
    }

    /**
     * Set the encoding property: Specifies the encoding of the incoming data in the case of input and the encoding of
     * outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
     * 
     * @param encoding the encoding value to set.
     * @return the JsonSerialization object itself.
     */
    public JsonSerialization withEncoding(Encoding encoding) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JsonSerializationProperties();
        }
        this.innerProperties().withEncoding(encoding);
        return this;
    }

    /**
     * Get the format property: This property only applies to JSON serialization of outputs only. It is not applicable
     * to inputs. This property specifies the format of the JSON the output will be written in. The currently supported
     * values are 'lineSeparated' indicating the output will be formatted by having each JSON object separated by a new
     * line and 'array' indicating the output will be formatted as an array of JSON objects. Default value is
     * 'lineSeparated' if left null.
     * 
     * @return the format value.
     */
    public JsonOutputSerializationFormat format() {
        return this.innerProperties() == null ? null : this.innerProperties().format();
    }

    /**
     * Set the format property: This property only applies to JSON serialization of outputs only. It is not applicable
     * to inputs. This property specifies the format of the JSON the output will be written in. The currently supported
     * values are 'lineSeparated' indicating the output will be formatted by having each JSON object separated by a new
     * line and 'array' indicating the output will be formatted as an array of JSON objects. Default value is
     * 'lineSeparated' if left null.
     * 
     * @param format the format value to set.
     * @return the JsonSerialization object itself.
     */
    public JsonSerialization withFormat(JsonOutputSerializationFormat format) {
        if (this.innerProperties() == null) {
            this.innerProperties = new JsonSerializationProperties();
        }
        this.innerProperties().withFormat(format);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JsonSerialization from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JsonSerialization if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the JsonSerialization.
     */
    public static JsonSerialization fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JsonSerialization deserializedJsonSerialization = new JsonSerialization();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedJsonSerialization.type = EventSerializationType.fromString(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    deserializedJsonSerialization.innerProperties = JsonSerializationProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJsonSerialization;
        });
    }
}
