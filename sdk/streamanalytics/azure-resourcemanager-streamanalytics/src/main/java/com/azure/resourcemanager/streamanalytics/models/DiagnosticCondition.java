// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Condition applicable to the resource, or to the job overall, that warrant customer attention.
 */
@Immutable
public final class DiagnosticCondition implements JsonSerializable<DiagnosticCondition> {
    /*
     * The UTC timestamp of when the condition started. Customers should be able to find a corresponding event in the
     * ops log around this time.
     */
    private String since;

    /*
     * The opaque diagnostic code.
     */
    private String code;

    /*
     * The human-readable message describing the condition in detail. Localized in the Accept-Language of the client
     * request.
     */
    private String message;

    /**
     * Creates an instance of DiagnosticCondition class.
     */
    public DiagnosticCondition() {
    }

    /**
     * Get the since property: The UTC timestamp of when the condition started. Customers should be able to find a
     * corresponding event in the ops log around this time.
     * 
     * @return the since value.
     */
    public String since() {
        return this.since;
    }

    /**
     * Get the code property: The opaque diagnostic code.
     * 
     * @return the code value.
     */
    public String code() {
        return this.code;
    }

    /**
     * Get the message property: The human-readable message describing the condition in detail. Localized in the
     * Accept-Language of the client request.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiagnosticCondition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiagnosticCondition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiagnosticCondition.
     */
    public static DiagnosticCondition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiagnosticCondition deserializedDiagnosticCondition = new DiagnosticCondition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("since".equals(fieldName)) {
                    deserializedDiagnosticCondition.since = reader.getString();
                } else if ("code".equals(fieldName)) {
                    deserializedDiagnosticCondition.code = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedDiagnosticCondition.message = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiagnosticCondition;
        });
    }
}
