// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.fluent.models.AzureSynapseOutputDataSourceProperties;
import java.io.IOException;

/**
 * Describes an Azure Synapse output data source.
 */
@Fluent
public final class AzureSynapseOutputDataSource extends OutputDataSource {
    /*
     * Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
     */
    private String type = "Microsoft.Sql/Server/DataWarehouse";

    /*
     * The properties that are associated with an Azure Synapse output. Required on PUT (CreateOrReplace) requests.
     */
    private AzureSynapseOutputDataSourceProperties innerProperties;

    /**
     * Creates an instance of AzureSynapseOutputDataSource class.
     */
    public AzureSynapseOutputDataSource() {
    }

    /**
     * Get the type property: Indicates the type of data source output will be written to. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the innerProperties property: The properties that are associated with an Azure Synapse output. Required on
     * PUT (CreateOrReplace) requests.
     * 
     * @return the innerProperties value.
     */
    private AzureSynapseOutputDataSourceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the server property: The name of the SQL server containing the Azure SQL database. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @return the server value.
     */
    public String server() {
        return this.innerProperties() == null ? null : this.innerProperties().server();
    }

    /**
     * Set the server property: The name of the SQL server containing the Azure SQL database. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @param server the server value to set.
     * @return the AzureSynapseOutputDataSource object itself.
     */
    public AzureSynapseOutputDataSource withServer(String server) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AzureSynapseOutputDataSourceProperties();
        }
        this.innerProperties().withServer(server);
        return this;
    }

    /**
     * Get the database property: The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
     * 
     * @return the database value.
     */
    public String database() {
        return this.innerProperties() == null ? null : this.innerProperties().database();
    }

    /**
     * Set the database property: The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
     * 
     * @param database the database value to set.
     * @return the AzureSynapseOutputDataSource object itself.
     */
    public AzureSynapseOutputDataSource withDatabase(String database) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AzureSynapseOutputDataSourceProperties();
        }
        this.innerProperties().withDatabase(database);
        return this;
    }

    /**
     * Get the table property: The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace)
     * requests.
     * 
     * @return the table value.
     */
    public String table() {
        return this.innerProperties() == null ? null : this.innerProperties().table();
    }

    /**
     * Set the table property: The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace)
     * requests.
     * 
     * @param table the table value to set.
     * @return the AzureSynapseOutputDataSource object itself.
     */
    public AzureSynapseOutputDataSource withTable(String table) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AzureSynapseOutputDataSourceProperties();
        }
        this.innerProperties().withTable(table);
        return this;
    }

    /**
     * Get the user property: The user name that will be used to connect to the Azure SQL database. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @return the user value.
     */
    public String user() {
        return this.innerProperties() == null ? null : this.innerProperties().user();
    }

    /**
     * Set the user property: The user name that will be used to connect to the Azure SQL database. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @param user the user value to set.
     * @return the AzureSynapseOutputDataSource object itself.
     */
    public AzureSynapseOutputDataSource withUser(String user) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AzureSynapseOutputDataSourceProperties();
        }
        this.innerProperties().withUser(user);
        return this;
    }

    /**
     * Get the password property: The password that will be used to connect to the Azure SQL database. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @return the password value.
     */
    public String password() {
        return this.innerProperties() == null ? null : this.innerProperties().password();
    }

    /**
     * Set the password property: The password that will be used to connect to the Azure SQL database. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @param password the password value to set.
     * @return the AzureSynapseOutputDataSource object itself.
     */
    public AzureSynapseOutputDataSource withPassword(String password) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AzureSynapseOutputDataSourceProperties();
        }
        this.innerProperties().withPassword(password);
        return this;
    }

    /**
     * Get the authenticationMode property: Authentication Mode.
     * 
     * @return the authenticationMode value.
     */
    public AuthenticationMode authenticationMode() {
        return this.innerProperties() == null ? null : this.innerProperties().authenticationMode();
    }

    /**
     * Set the authenticationMode property: Authentication Mode.
     * 
     * @param authenticationMode the authenticationMode value to set.
     * @return the AzureSynapseOutputDataSource object itself.
     */
    public AzureSynapseOutputDataSource withAuthenticationMode(AuthenticationMode authenticationMode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AzureSynapseOutputDataSourceProperties();
        }
        this.innerProperties().withAuthenticationMode(authenticationMode);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureSynapseOutputDataSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureSynapseOutputDataSource if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureSynapseOutputDataSource.
     */
    public static AzureSynapseOutputDataSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureSynapseOutputDataSource deserializedAzureSynapseOutputDataSource = new AzureSynapseOutputDataSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedAzureSynapseOutputDataSource.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedAzureSynapseOutputDataSource.innerProperties
                        = AzureSynapseOutputDataSourceProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureSynapseOutputDataSource;
        });
    }
}
