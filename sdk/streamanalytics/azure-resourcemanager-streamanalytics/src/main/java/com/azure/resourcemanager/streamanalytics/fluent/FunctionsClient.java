// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.streamanalytics.fluent.models.FunctionInner;
import com.azure.resourcemanager.streamanalytics.fluent.models.ResourceTestStatusInner;
import com.azure.resourcemanager.streamanalytics.models.FunctionRetrieveDefaultDefinitionParameters;
import com.azure.resourcemanager.streamanalytics.models.FunctionsCreateOrReplaceResponse;
import com.azure.resourcemanager.streamanalytics.models.FunctionsGetResponse;
import com.azure.resourcemanager.streamanalytics.models.FunctionsUpdateResponse;

/** An instance of this class provides access to all the operations defined in FunctionsClient. */
public interface FunctionsClient {
    /**
     * Creates a function or replaces an already existing function under an existing streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param functionName The name of the function.
     * @param function The definition of the function that will be used to create a new function or replace the existing
     *     one under the streaming job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a function object, containing all information associated with the named function.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FunctionInner createOrReplace(
        String resourceGroupName, String jobName, String functionName, FunctionInner function);

    /**
     * Creates a function or replaces an already existing function under an existing streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param functionName The name of the function.
     * @param function The definition of the function that will be used to create a new function or replace the existing
     *     one under the streaming job.
     * @param ifMatch The ETag of the function. Omit this value to always overwrite the current function. Specify the
     *     last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new function to be created, but to prevent updating an existing
     *     function. Other values will result in a 412 Pre-condition Failed response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a function object, containing all information associated with the named function.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FunctionsCreateOrReplaceResponse createOrReplaceWithResponse(
        String resourceGroupName,
        String jobName,
        String functionName,
        FunctionInner function,
        String ifMatch,
        String ifNoneMatch,
        Context context);

    /**
     * Updates an existing function under an existing streaming job. This can be used to partially update (ie. update
     * one or two properties) a function without affecting the rest the job or function definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param functionName The name of the function.
     * @param function A function object. The properties specified here will overwrite the corresponding properties in
     *     the existing function (ie. Those properties will be updated). Any properties that are set to null here will
     *     mean that the corresponding property in the existing function will remain the same and not change as a result
     *     of this PATCH operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a function object, containing all information associated with the named function.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FunctionInner update(String resourceGroupName, String jobName, String functionName, FunctionInner function);

    /**
     * Updates an existing function under an existing streaming job. This can be used to partially update (ie. update
     * one or two properties) a function without affecting the rest the job or function definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param functionName The name of the function.
     * @param function A function object. The properties specified here will overwrite the corresponding properties in
     *     the existing function (ie. Those properties will be updated). Any properties that are set to null here will
     *     mean that the corresponding property in the existing function will remain the same and not change as a result
     *     of this PATCH operation.
     * @param ifMatch The ETag of the function. Omit this value to always overwrite the current function. Specify the
     *     last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a function object, containing all information associated with the named function.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FunctionsUpdateResponse updateWithResponse(
        String resourceGroupName,
        String jobName,
        String functionName,
        FunctionInner function,
        String ifMatch,
        Context context);

    /**
     * Deletes a function from the streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param functionName The name of the function.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String jobName, String functionName);

    /**
     * Deletes a function from the streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param functionName The name of the function.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceGroupName, String jobName, String functionName, Context context);

    /**
     * Gets details about the specified function.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param functionName The name of the function.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about the specified function.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FunctionInner get(String resourceGroupName, String jobName, String functionName);

    /**
     * Gets details about the specified function.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param functionName The name of the function.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about the specified function.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FunctionsGetResponse getWithResponse(
        String resourceGroupName, String jobName, String functionName, Context context);

    /**
     * Lists all of the functions under the specified streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object containing a list of functions under a streaming job.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FunctionInner> listByStreamingJob(String resourceGroupName, String jobName);

    /**
     * Lists all of the functions under the specified streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param select The $select OData query parameter. This is a comma-separated list of structural properties to
     *     include in the response, or "*" to include all properties. By default, all properties are returned except
     *     diagnostics. Currently only accepts '*' as a valid value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object containing a list of functions under a streaming job.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FunctionInner> listByStreamingJob(
        String resourceGroupName, String jobName, String select, Context context);

    /**
     * Tests if the information provided for a function is valid. This can range from testing the connection to the
     * underlying web service behind the function or making sure the function code provided is syntactically correct.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param functionName The name of the function.
     * @param function If the function specified does not already exist, this parameter must contain the full function
     *     definition intended to be tested. If the function specified already exists, this parameter can be left null
     *     to test the existing function as is or if specified, the properties specified will overwrite the
     *     corresponding properties in the existing function (exactly like a PATCH operation) and the resulting function
     *     will be tested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the status of the test operation along with error information, if applicable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<ResourceTestStatusInner>, ResourceTestStatusInner> beginTest(
        String resourceGroupName, String jobName, String functionName, FunctionInner function);

    /**
     * Tests if the information provided for a function is valid. This can range from testing the connection to the
     * underlying web service behind the function or making sure the function code provided is syntactically correct.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param functionName The name of the function.
     * @param function If the function specified does not already exist, this parameter must contain the full function
     *     definition intended to be tested. If the function specified already exists, this parameter can be left null
     *     to test the existing function as is or if specified, the properties specified will overwrite the
     *     corresponding properties in the existing function (exactly like a PATCH operation) and the resulting function
     *     will be tested.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the status of the test operation along with error information, if applicable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<ResourceTestStatusInner>, ResourceTestStatusInner> beginTest(
        String resourceGroupName, String jobName, String functionName, FunctionInner function, Context context);

    /**
     * Tests if the information provided for a function is valid. This can range from testing the connection to the
     * underlying web service behind the function or making sure the function code provided is syntactically correct.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param functionName The name of the function.
     * @param function If the function specified does not already exist, this parameter must contain the full function
     *     definition intended to be tested. If the function specified already exists, this parameter can be left null
     *     to test the existing function as is or if specified, the properties specified will overwrite the
     *     corresponding properties in the existing function (exactly like a PATCH operation) and the resulting function
     *     will be tested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the status of the test operation along with error information, if applicable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ResourceTestStatusInner test(String resourceGroupName, String jobName, String functionName, FunctionInner function);

    /**
     * Tests if the information provided for a function is valid. This can range from testing the connection to the
     * underlying web service behind the function or making sure the function code provided is syntactically correct.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param functionName The name of the function.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the status of the test operation along with error information, if applicable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ResourceTestStatusInner test(String resourceGroupName, String jobName, String functionName);

    /**
     * Tests if the information provided for a function is valid. This can range from testing the connection to the
     * underlying web service behind the function or making sure the function code provided is syntactically correct.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param functionName The name of the function.
     * @param function If the function specified does not already exist, this parameter must contain the full function
     *     definition intended to be tested. If the function specified already exists, this parameter can be left null
     *     to test the existing function as is or if specified, the properties specified will overwrite the
     *     corresponding properties in the existing function (exactly like a PATCH operation) and the resulting function
     *     will be tested.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the status of the test operation along with error information, if applicable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ResourceTestStatusInner test(
        String resourceGroupName, String jobName, String functionName, FunctionInner function, Context context);

    /**
     * Retrieves the default definition of a function based on the parameters specified.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param functionName The name of the function.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a function object, containing all information associated with the named function.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FunctionInner retrieveDefaultDefinition(String resourceGroupName, String jobName, String functionName);

    /**
     * Retrieves the default definition of a function based on the parameters specified.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param functionName The name of the function.
     * @param functionRetrieveDefaultDefinitionParameters Parameters used to specify the type of function to retrieve
     *     the default definition for.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a function object, containing all information associated with the named function.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<FunctionInner> retrieveDefaultDefinitionWithResponse(
        String resourceGroupName,
        String jobName,
        String functionName,
        FunctionRetrieveDefaultDefinitionParameters functionRetrieveDefaultDefinitionParameters,
        Context context);
}
