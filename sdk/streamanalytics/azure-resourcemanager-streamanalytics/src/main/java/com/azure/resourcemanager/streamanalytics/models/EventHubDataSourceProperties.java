// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The common properties that are associated with Event Hub data sources.
 */
@Fluent
public class EventHubDataSourceProperties extends ServiceBusDataSourceProperties {
    /*
     * The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
     */
    private String eventHubName;

    /**
     * Creates an instance of EventHubDataSourceProperties class.
     */
    public EventHubDataSourceProperties() {
    }

    /**
     * Get the eventHubName property: The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
     * 
     * @return the eventHubName value.
     */
    public String eventHubName() {
        return this.eventHubName;
    }

    /**
     * Set the eventHubName property: The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
     * 
     * @param eventHubName the eventHubName value to set.
     * @return the EventHubDataSourceProperties object itself.
     */
    public EventHubDataSourceProperties withEventHubName(String eventHubName) {
        this.eventHubName = eventHubName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventHubDataSourceProperties withServiceBusNamespace(String serviceBusNamespace) {
        super.withServiceBusNamespace(serviceBusNamespace);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventHubDataSourceProperties withSharedAccessPolicyName(String sharedAccessPolicyName) {
        super.withSharedAccessPolicyName(sharedAccessPolicyName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventHubDataSourceProperties withSharedAccessPolicyKey(String sharedAccessPolicyKey) {
        super.withSharedAccessPolicyKey(sharedAccessPolicyKey);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventHubDataSourceProperties withAuthenticationMode(AuthenticationMode authenticationMode) {
        super.withAuthenticationMode(authenticationMode);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serviceBusNamespace", serviceBusNamespace());
        jsonWriter.writeStringField("sharedAccessPolicyName", sharedAccessPolicyName());
        jsonWriter.writeStringField("sharedAccessPolicyKey", sharedAccessPolicyKey());
        jsonWriter.writeStringField("authenticationMode",
            authenticationMode() == null ? null : authenticationMode().toString());
        jsonWriter.writeStringField("eventHubName", this.eventHubName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EventHubDataSourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EventHubDataSourceProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EventHubDataSourceProperties.
     */
    public static EventHubDataSourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EventHubDataSourceProperties deserializedEventHubDataSourceProperties = new EventHubDataSourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceBusNamespace".equals(fieldName)) {
                    deserializedEventHubDataSourceProperties.withServiceBusNamespace(reader.getString());
                } else if ("sharedAccessPolicyName".equals(fieldName)) {
                    deserializedEventHubDataSourceProperties.withSharedAccessPolicyName(reader.getString());
                } else if ("sharedAccessPolicyKey".equals(fieldName)) {
                    deserializedEventHubDataSourceProperties.withSharedAccessPolicyKey(reader.getString());
                } else if ("authenticationMode".equals(fieldName)) {
                    deserializedEventHubDataSourceProperties
                        .withAuthenticationMode(AuthenticationMode.fromString(reader.getString()));
                } else if ("eventHubName".equals(fieldName)) {
                    deserializedEventHubDataSourceProperties.eventHubName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEventHubDataSourceProperties;
        });
    }
}
