// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/** The binding to an Azure Machine Learning Studio. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("Microsoft.MachineLearning/WebService")
@JsonFlatten
@Fluent
public class AzureMachineLearningStudioFunctionBinding extends FunctionBinding {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AzureMachineLearningStudioFunctionBinding.class);

    /*
     * The Request-Response execute endpoint of the Azure Machine Learning
     * Studio. Find out more here:
     * https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-consume-web-services#request-response-service-rrs
     */
    @JsonProperty(value = "properties.endpoint")
    private String endpoint;

    /*
     * The API key used to authenticate with Request-Response endpoint.
     */
    @JsonProperty(value = "properties.apiKey")
    private String apiKey;

    /*
     * The inputs for the Azure Machine Learning Studio endpoint.
     */
    @JsonProperty(value = "properties.inputs")
    private AzureMachineLearningStudioInputs inputs;

    /*
     * A list of outputs from the Azure Machine Learning Studio endpoint
     * execution.
     */
    @JsonProperty(value = "properties.outputs")
    private List<AzureMachineLearningStudioOutputColumn> outputs;

    /*
     * Number between 1 and 10000 describing maximum number of rows for every
     * Azure ML RRS execute request. Default is 1000.
     */
    @JsonProperty(value = "properties.batchSize")
    private Integer batchSize;

    /**
     * Get the endpoint property: The Request-Response execute endpoint of the Azure Machine Learning Studio. Find out
     * more here:
     * https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-consume-web-services#request-response-service-rrs.
     *
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Set the endpoint property: The Request-Response execute endpoint of the Azure Machine Learning Studio. Find out
     * more here:
     * https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-consume-web-services#request-response-service-rrs.
     *
     * @param endpoint the endpoint value to set.
     * @return the AzureMachineLearningStudioFunctionBinding object itself.
     */
    public AzureMachineLearningStudioFunctionBinding withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Get the apiKey property: The API key used to authenticate with Request-Response endpoint.
     *
     * @return the apiKey value.
     */
    public String apiKey() {
        return this.apiKey;
    }

    /**
     * Set the apiKey property: The API key used to authenticate with Request-Response endpoint.
     *
     * @param apiKey the apiKey value to set.
     * @return the AzureMachineLearningStudioFunctionBinding object itself.
     */
    public AzureMachineLearningStudioFunctionBinding withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Get the inputs property: The inputs for the Azure Machine Learning Studio endpoint.
     *
     * @return the inputs value.
     */
    public AzureMachineLearningStudioInputs inputs() {
        return this.inputs;
    }

    /**
     * Set the inputs property: The inputs for the Azure Machine Learning Studio endpoint.
     *
     * @param inputs the inputs value to set.
     * @return the AzureMachineLearningStudioFunctionBinding object itself.
     */
    public AzureMachineLearningStudioFunctionBinding withInputs(AzureMachineLearningStudioInputs inputs) {
        this.inputs = inputs;
        return this;
    }

    /**
     * Get the outputs property: A list of outputs from the Azure Machine Learning Studio endpoint execution.
     *
     * @return the outputs value.
     */
    public List<AzureMachineLearningStudioOutputColumn> outputs() {
        return this.outputs;
    }

    /**
     * Set the outputs property: A list of outputs from the Azure Machine Learning Studio endpoint execution.
     *
     * @param outputs the outputs value to set.
     * @return the AzureMachineLearningStudioFunctionBinding object itself.
     */
    public AzureMachineLearningStudioFunctionBinding withOutputs(List<AzureMachineLearningStudioOutputColumn> outputs) {
        this.outputs = outputs;
        return this;
    }

    /**
     * Get the batchSize property: Number between 1 and 10000 describing maximum number of rows for every Azure ML RRS
     * execute request. Default is 1000.
     *
     * @return the batchSize value.
     */
    public Integer batchSize() {
        return this.batchSize;
    }

    /**
     * Set the batchSize property: Number between 1 and 10000 describing maximum number of rows for every Azure ML RRS
     * execute request. Default is 1000.
     *
     * @param batchSize the batchSize value to set.
     * @return the AzureMachineLearningStudioFunctionBinding object itself.
     */
    public AzureMachineLearningStudioFunctionBinding withBatchSize(Integer batchSize) {
        this.batchSize = batchSize;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (inputs() != null) {
            inputs().validate();
        }
        if (outputs() != null) {
            outputs().forEach(e -> e.validate());
        }
    }
}
