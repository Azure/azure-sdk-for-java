// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.models.UpdateMode;
import java.io.IOException;

/**
 * The binding properties associated with a CSharp function.
 */
@Fluent
public final class CSharpFunctionBindingProperties implements JsonSerializable<CSharpFunctionBindingProperties> {
    /*
     * The Csharp code containing a single function definition.
     */
    private String dllPath;

    /*
     * The Csharp code containing a single function definition.
     */
    private String classProperty;

    /*
     * The Csharp code containing a single function definition.
     */
    private String method;

    /*
     * Refresh modes for Stream Analytics functions.
     */
    private UpdateMode updateMode;

    /**
     * Creates an instance of CSharpFunctionBindingProperties class.
     */
    public CSharpFunctionBindingProperties() {
    }

    /**
     * Get the dllPath property: The Csharp code containing a single function definition.
     * 
     * @return the dllPath value.
     */
    public String dllPath() {
        return this.dllPath;
    }

    /**
     * Set the dllPath property: The Csharp code containing a single function definition.
     * 
     * @param dllPath the dllPath value to set.
     * @return the CSharpFunctionBindingProperties object itself.
     */
    public CSharpFunctionBindingProperties withDllPath(String dllPath) {
        this.dllPath = dllPath;
        return this;
    }

    /**
     * Get the classProperty property: The Csharp code containing a single function definition.
     * 
     * @return the classProperty value.
     */
    public String classProperty() {
        return this.classProperty;
    }

    /**
     * Set the classProperty property: The Csharp code containing a single function definition.
     * 
     * @param classProperty the classProperty value to set.
     * @return the CSharpFunctionBindingProperties object itself.
     */
    public CSharpFunctionBindingProperties withClassProperty(String classProperty) {
        this.classProperty = classProperty;
        return this;
    }

    /**
     * Get the method property: The Csharp code containing a single function definition.
     * 
     * @return the method value.
     */
    public String method() {
        return this.method;
    }

    /**
     * Set the method property: The Csharp code containing a single function definition.
     * 
     * @param method the method value to set.
     * @return the CSharpFunctionBindingProperties object itself.
     */
    public CSharpFunctionBindingProperties withMethod(String method) {
        this.method = method;
        return this;
    }

    /**
     * Get the updateMode property: Refresh modes for Stream Analytics functions.
     * 
     * @return the updateMode value.
     */
    public UpdateMode updateMode() {
        return this.updateMode;
    }

    /**
     * Set the updateMode property: Refresh modes for Stream Analytics functions.
     * 
     * @param updateMode the updateMode value to set.
     * @return the CSharpFunctionBindingProperties object itself.
     */
    public CSharpFunctionBindingProperties withUpdateMode(UpdateMode updateMode) {
        this.updateMode = updateMode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dllPath", this.dllPath);
        jsonWriter.writeStringField("class", this.classProperty);
        jsonWriter.writeStringField("method", this.method);
        jsonWriter.writeStringField("updateMode", this.updateMode == null ? null : this.updateMode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CSharpFunctionBindingProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CSharpFunctionBindingProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CSharpFunctionBindingProperties.
     */
    public static CSharpFunctionBindingProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CSharpFunctionBindingProperties deserializedCSharpFunctionBindingProperties
                = new CSharpFunctionBindingProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dllPath".equals(fieldName)) {
                    deserializedCSharpFunctionBindingProperties.dllPath = reader.getString();
                } else if ("class".equals(fieldName)) {
                    deserializedCSharpFunctionBindingProperties.classProperty = reader.getString();
                } else if ("method".equals(fieldName)) {
                    deserializedCSharpFunctionBindingProperties.method = reader.getString();
                } else if ("updateMode".equals(fieldName)) {
                    deserializedCSharpFunctionBindingProperties.updateMode = UpdateMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCSharpFunctionBindingProperties;
        });
    }
}
