// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.models.GatewayMessageBusSourceProperties;
import java.io.IOException;

/**
 * The properties that are associated with a gateway message bus input containing stream data.
 */
@Fluent
public final class GatewayMessageBusStreamInputDataSourceProperties extends GatewayMessageBusSourceProperties {
    /**
     * Creates an instance of GatewayMessageBusStreamInputDataSourceProperties class.
     */
    public GatewayMessageBusStreamInputDataSourceProperties() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GatewayMessageBusStreamInputDataSourceProperties withTopic(String topic) {
        super.withTopic(topic);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("topic", topic());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GatewayMessageBusStreamInputDataSourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GatewayMessageBusStreamInputDataSourceProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GatewayMessageBusStreamInputDataSourceProperties.
     */
    public static GatewayMessageBusStreamInputDataSourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GatewayMessageBusStreamInputDataSourceProperties deserializedGatewayMessageBusStreamInputDataSourceProperties
                = new GatewayMessageBusStreamInputDataSourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("topic".equals(fieldName)) {
                    deserializedGatewayMessageBusStreamInputDataSourceProperties.withTopic(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGatewayMessageBusStreamInputDataSourceProperties;
        });
    }
}
