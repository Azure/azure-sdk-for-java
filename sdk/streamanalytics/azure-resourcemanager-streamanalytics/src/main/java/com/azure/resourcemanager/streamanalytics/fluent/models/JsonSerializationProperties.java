// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.models.Encoding;
import com.azure.resourcemanager.streamanalytics.models.JsonOutputSerializationFormat;
import java.io.IOException;

/**
 * The properties that are associated with the JSON serialization type.
 */
@Fluent
public final class JsonSerializationProperties implements JsonSerializable<JsonSerializationProperties> {
    /*
     * Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of
     * output. Required on PUT (CreateOrReplace) requests.
     */
    private Encoding encoding;

    /*
     * This property only applies to JSON serialization of outputs only. It is not applicable to inputs. This property
     * specifies the format of the JSON the output will be written in. The currently supported values are
     * 'lineSeparated' indicating the output will be formatted by having each JSON object separated by a new line and
     * 'array' indicating the output will be formatted as an array of JSON objects. Default value is 'lineSeparated' if
     * left null.
     */
    private JsonOutputSerializationFormat format;

    /**
     * Creates an instance of JsonSerializationProperties class.
     */
    public JsonSerializationProperties() {
    }

    /**
     * Get the encoding property: Specifies the encoding of the incoming data in the case of input and the encoding of
     * outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
     * 
     * @return the encoding value.
     */
    public Encoding encoding() {
        return this.encoding;
    }

    /**
     * Set the encoding property: Specifies the encoding of the incoming data in the case of input and the encoding of
     * outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
     * 
     * @param encoding the encoding value to set.
     * @return the JsonSerializationProperties object itself.
     */
    public JsonSerializationProperties withEncoding(Encoding encoding) {
        this.encoding = encoding;
        return this;
    }

    /**
     * Get the format property: This property only applies to JSON serialization of outputs only. It is not applicable
     * to inputs. This property specifies the format of the JSON the output will be written in. The currently supported
     * values are 'lineSeparated' indicating the output will be formatted by having each JSON object separated by a new
     * line and 'array' indicating the output will be formatted as an array of JSON objects. Default value is
     * 'lineSeparated' if left null.
     * 
     * @return the format value.
     */
    public JsonOutputSerializationFormat format() {
        return this.format;
    }

    /**
     * Set the format property: This property only applies to JSON serialization of outputs only. It is not applicable
     * to inputs. This property specifies the format of the JSON the output will be written in. The currently supported
     * values are 'lineSeparated' indicating the output will be formatted by having each JSON object separated by a new
     * line and 'array' indicating the output will be formatted as an array of JSON objects. Default value is
     * 'lineSeparated' if left null.
     * 
     * @param format the format value to set.
     * @return the JsonSerializationProperties object itself.
     */
    public JsonSerializationProperties withFormat(JsonOutputSerializationFormat format) {
        this.format = format;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("encoding", this.encoding == null ? null : this.encoding.toString());
        jsonWriter.writeStringField("format", this.format == null ? null : this.format.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JsonSerializationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JsonSerializationProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the JsonSerializationProperties.
     */
    public static JsonSerializationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JsonSerializationProperties deserializedJsonSerializationProperties = new JsonSerializationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("encoding".equals(fieldName)) {
                    deserializedJsonSerializationProperties.encoding = Encoding.fromString(reader.getString());
                } else if ("format".equals(fieldName)) {
                    deserializedJsonSerializationProperties.format
                        = JsonOutputSerializationFormat.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJsonSerializationProperties;
        });
    }
}
