// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.models.AuthenticationMode;
import com.azure.resourcemanager.streamanalytics.models.ServiceBusDataSourceProperties;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The properties that are associated with a Service Bus Topic output.
 */
@Fluent
public final class ServiceBusTopicOutputDataSourceProperties extends ServiceBusDataSourceProperties {
    /*
     * The name of the Service Bus Topic. Required on PUT (CreateOrReplace) requests.
     */
    private String topicName;

    /*
     * A string array of the names of output columns to be attached to Service Bus messages as custom properties.
     */
    private List<String> propertyColumns;

    /*
     * The system properties associated with the Service Bus Topic Output. The following system properties are
     * supported: ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive, PartitionKey, SessionId,
     * ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc.
     */
    private Map<String, String> systemPropertyColumns;

    /**
     * Creates an instance of ServiceBusTopicOutputDataSourceProperties class.
     */
    public ServiceBusTopicOutputDataSourceProperties() {
    }

    /**
     * Get the topicName property: The name of the Service Bus Topic. Required on PUT (CreateOrReplace) requests.
     * 
     * @return the topicName value.
     */
    public String topicName() {
        return this.topicName;
    }

    /**
     * Set the topicName property: The name of the Service Bus Topic. Required on PUT (CreateOrReplace) requests.
     * 
     * @param topicName the topicName value to set.
     * @return the ServiceBusTopicOutputDataSourceProperties object itself.
     */
    public ServiceBusTopicOutputDataSourceProperties withTopicName(String topicName) {
        this.topicName = topicName;
        return this;
    }

    /**
     * Get the propertyColumns property: A string array of the names of output columns to be attached to Service Bus
     * messages as custom properties.
     * 
     * @return the propertyColumns value.
     */
    public List<String> propertyColumns() {
        return this.propertyColumns;
    }

    /**
     * Set the propertyColumns property: A string array of the names of output columns to be attached to Service Bus
     * messages as custom properties.
     * 
     * @param propertyColumns the propertyColumns value to set.
     * @return the ServiceBusTopicOutputDataSourceProperties object itself.
     */
    public ServiceBusTopicOutputDataSourceProperties withPropertyColumns(List<String> propertyColumns) {
        this.propertyColumns = propertyColumns;
        return this;
    }

    /**
     * Get the systemPropertyColumns property: The system properties associated with the Service Bus Topic Output. The
     * following system properties are supported: ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive,
     * PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc.
     * 
     * @return the systemPropertyColumns value.
     */
    public Map<String, String> systemPropertyColumns() {
        return this.systemPropertyColumns;
    }

    /**
     * Set the systemPropertyColumns property: The system properties associated with the Service Bus Topic Output. The
     * following system properties are supported: ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive,
     * PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc.
     * 
     * @param systemPropertyColumns the systemPropertyColumns value to set.
     * @return the ServiceBusTopicOutputDataSourceProperties object itself.
     */
    public ServiceBusTopicOutputDataSourceProperties
        withSystemPropertyColumns(Map<String, String> systemPropertyColumns) {
        this.systemPropertyColumns = systemPropertyColumns;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceBusTopicOutputDataSourceProperties withServiceBusNamespace(String serviceBusNamespace) {
        super.withServiceBusNamespace(serviceBusNamespace);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceBusTopicOutputDataSourceProperties withSharedAccessPolicyName(String sharedAccessPolicyName) {
        super.withSharedAccessPolicyName(sharedAccessPolicyName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceBusTopicOutputDataSourceProperties withSharedAccessPolicyKey(String sharedAccessPolicyKey) {
        super.withSharedAccessPolicyKey(sharedAccessPolicyKey);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceBusTopicOutputDataSourceProperties withAuthenticationMode(AuthenticationMode authenticationMode) {
        super.withAuthenticationMode(authenticationMode);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serviceBusNamespace", serviceBusNamespace());
        jsonWriter.writeStringField("sharedAccessPolicyName", sharedAccessPolicyName());
        jsonWriter.writeStringField("sharedAccessPolicyKey", sharedAccessPolicyKey());
        jsonWriter.writeStringField("authenticationMode",
            authenticationMode() == null ? null : authenticationMode().toString());
        jsonWriter.writeStringField("topicName", this.topicName);
        jsonWriter.writeArrayField("propertyColumns", this.propertyColumns,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("systemPropertyColumns", this.systemPropertyColumns,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceBusTopicOutputDataSourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceBusTopicOutputDataSourceProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceBusTopicOutputDataSourceProperties.
     */
    public static ServiceBusTopicOutputDataSourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceBusTopicOutputDataSourceProperties deserializedServiceBusTopicOutputDataSourceProperties
                = new ServiceBusTopicOutputDataSourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceBusNamespace".equals(fieldName)) {
                    deserializedServiceBusTopicOutputDataSourceProperties.withServiceBusNamespace(reader.getString());
                } else if ("sharedAccessPolicyName".equals(fieldName)) {
                    deserializedServiceBusTopicOutputDataSourceProperties
                        .withSharedAccessPolicyName(reader.getString());
                } else if ("sharedAccessPolicyKey".equals(fieldName)) {
                    deserializedServiceBusTopicOutputDataSourceProperties.withSharedAccessPolicyKey(reader.getString());
                } else if ("authenticationMode".equals(fieldName)) {
                    deserializedServiceBusTopicOutputDataSourceProperties
                        .withAuthenticationMode(AuthenticationMode.fromString(reader.getString()));
                } else if ("topicName".equals(fieldName)) {
                    deserializedServiceBusTopicOutputDataSourceProperties.topicName = reader.getString();
                } else if ("propertyColumns".equals(fieldName)) {
                    List<String> propertyColumns = reader.readArray(reader1 -> reader1.getString());
                    deserializedServiceBusTopicOutputDataSourceProperties.propertyColumns = propertyColumns;
                } else if ("systemPropertyColumns".equals(fieldName)) {
                    Map<String, String> systemPropertyColumns = reader.readMap(reader1 -> reader1.getString());
                    deserializedServiceBusTopicOutputDataSourceProperties.systemPropertyColumns = systemPropertyColumns;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceBusTopicOutputDataSourceProperties;
        });
    }
}
