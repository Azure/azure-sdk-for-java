// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.fluent.models.DeltaSerializationProperties;
import java.io.IOException;
import java.util.List;

/**
 * Describes how data from an input is serialized or how data is serialized when written to an output in Delta Lake
 * format.
 */
@Fluent
public final class DeltaSerialization extends Serialization {
    /*
     * Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
     */
    private EventSerializationType type = EventSerializationType.DELTA;

    /*
     * The properties that are associated with the Delta Lake serialization type. Required on PUT (CreateOrReplace)
     * requests.
     */
    private DeltaSerializationProperties innerProperties;

    /**
     * Creates an instance of DeltaSerialization class.
     */
    public DeltaSerialization() {
    }

    /**
     * Get the type property: Indicates the type of serialization that the input or output uses. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @return the type value.
     */
    @Override
    public EventSerializationType type() {
        return this.type;
    }

    /**
     * Get the innerProperties property: The properties that are associated with the Delta Lake serialization type.
     * Required on PUT (CreateOrReplace) requests.
     * 
     * @return the innerProperties value.
     */
    private DeltaSerializationProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the deltaTablePath property: Specifies the path of the Delta Lake table that the output will be written to.
     * 
     * @return the deltaTablePath value.
     */
    public String deltaTablePath() {
        return this.innerProperties() == null ? null : this.innerProperties().deltaTablePath();
    }

    /**
     * Set the deltaTablePath property: Specifies the path of the Delta Lake table that the output will be written to.
     * 
     * @param deltaTablePath the deltaTablePath value to set.
     * @return the DeltaSerialization object itself.
     */
    public DeltaSerialization withDeltaTablePath(String deltaTablePath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DeltaSerializationProperties();
        }
        this.innerProperties().withDeltaTablePath(deltaTablePath);
        return this;
    }

    /**
     * Get the partitionColumns property: Specifies the names of the columns for which the Delta Lake table will be
     * partitioned. We are only supporting 1 partition column, but keeping it as an array for extensibility.
     * 
     * @return the partitionColumns value.
     */
    public List<String> partitionColumns() {
        return this.innerProperties() == null ? null : this.innerProperties().partitionColumns();
    }

    /**
     * Set the partitionColumns property: Specifies the names of the columns for which the Delta Lake table will be
     * partitioned. We are only supporting 1 partition column, but keeping it as an array for extensibility.
     * 
     * @param partitionColumns the partitionColumns value to set.
     * @return the DeltaSerialization object itself.
     */
    public DeltaSerialization withPartitionColumns(List<String> partitionColumns) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DeltaSerializationProperties();
        }
        this.innerProperties().withPartitionColumns(partitionColumns);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeltaSerialization from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeltaSerialization if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeltaSerialization.
     */
    public static DeltaSerialization fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeltaSerialization deserializedDeltaSerialization = new DeltaSerialization();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedDeltaSerialization.type = EventSerializationType.fromString(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    deserializedDeltaSerialization.innerProperties = DeltaSerializationProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeltaSerialization;
        });
    }
}
