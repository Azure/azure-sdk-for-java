// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The refresh parameters for any/all updatable user defined functions present in the job config.
 */
@Fluent
public final class RefreshConfiguration implements JsonSerializable<RefreshConfiguration> {
    /*
     * The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched
     * to determine whether or not they should be included as input or output to the job. See
     * https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
     * https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation
     * and example.
     */
    private String pathPattern;

    /*
     * The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format
     * instead.
     */
    private String dateFormat;

    /*
     * The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format
     * instead.
     */
    private String timeFormat;

    /*
     * The refresh interval.
     */
    private String refreshInterval;

    /*
     * This property indicates which data refresh option to use, Blocking or Nonblocking.
     */
    private UpdatableUdfRefreshType refreshType;

    /**
     * Creates an instance of RefreshConfiguration class.
     */
    public RefreshConfiguration() {
    }

    /**
     * Get the pathPattern property: The blob path pattern. Not a regular expression. It represents a pattern against
     * which blob names will be matched to determine whether or not they should be included as input or output to the
     * job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
     * https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation
     * and example.
     * 
     * @return the pathPattern value.
     */
    public String pathPattern() {
        return this.pathPattern;
    }

    /**
     * Set the pathPattern property: The blob path pattern. Not a regular expression. It represents a pattern against
     * which blob names will be matched to determine whether or not they should be included as input or output to the
     * job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
     * https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation
     * and example.
     * 
     * @param pathPattern the pathPattern value to set.
     * @return the RefreshConfiguration object itself.
     */
    public RefreshConfiguration withPathPattern(String pathPattern) {
        this.pathPattern = pathPattern;
        return this;
    }

    /**
     * Get the dateFormat property: The date format. Wherever {date} appears in pathPattern, the value of this property
     * is used as the date format instead.
     * 
     * @return the dateFormat value.
     */
    public String dateFormat() {
        return this.dateFormat;
    }

    /**
     * Set the dateFormat property: The date format. Wherever {date} appears in pathPattern, the value of this property
     * is used as the date format instead.
     * 
     * @param dateFormat the dateFormat value to set.
     * @return the RefreshConfiguration object itself.
     */
    public RefreshConfiguration withDateFormat(String dateFormat) {
        this.dateFormat = dateFormat;
        return this;
    }

    /**
     * Get the timeFormat property: The time format. Wherever {time} appears in pathPattern, the value of this property
     * is used as the time format instead.
     * 
     * @return the timeFormat value.
     */
    public String timeFormat() {
        return this.timeFormat;
    }

    /**
     * Set the timeFormat property: The time format. Wherever {time} appears in pathPattern, the value of this property
     * is used as the time format instead.
     * 
     * @param timeFormat the timeFormat value to set.
     * @return the RefreshConfiguration object itself.
     */
    public RefreshConfiguration withTimeFormat(String timeFormat) {
        this.timeFormat = timeFormat;
        return this;
    }

    /**
     * Get the refreshInterval property: The refresh interval.
     * 
     * @return the refreshInterval value.
     */
    public String refreshInterval() {
        return this.refreshInterval;
    }

    /**
     * Set the refreshInterval property: The refresh interval.
     * 
     * @param refreshInterval the refreshInterval value to set.
     * @return the RefreshConfiguration object itself.
     */
    public RefreshConfiguration withRefreshInterval(String refreshInterval) {
        this.refreshInterval = refreshInterval;
        return this;
    }

    /**
     * Get the refreshType property: This property indicates which data refresh option to use, Blocking or Nonblocking.
     * 
     * @return the refreshType value.
     */
    public UpdatableUdfRefreshType refreshType() {
        return this.refreshType;
    }

    /**
     * Set the refreshType property: This property indicates which data refresh option to use, Blocking or Nonblocking.
     * 
     * @param refreshType the refreshType value to set.
     * @return the RefreshConfiguration object itself.
     */
    public RefreshConfiguration withRefreshType(UpdatableUdfRefreshType refreshType) {
        this.refreshType = refreshType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("pathPattern", this.pathPattern);
        jsonWriter.writeStringField("dateFormat", this.dateFormat);
        jsonWriter.writeStringField("timeFormat", this.timeFormat);
        jsonWriter.writeStringField("refreshInterval", this.refreshInterval);
        jsonWriter.writeStringField("refreshType", this.refreshType == null ? null : this.refreshType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RefreshConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RefreshConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RefreshConfiguration.
     */
    public static RefreshConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RefreshConfiguration deserializedRefreshConfiguration = new RefreshConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("pathPattern".equals(fieldName)) {
                    deserializedRefreshConfiguration.pathPattern = reader.getString();
                } else if ("dateFormat".equals(fieldName)) {
                    deserializedRefreshConfiguration.dateFormat = reader.getString();
                } else if ("timeFormat".equals(fieldName)) {
                    deserializedRefreshConfiguration.timeFormat = reader.getString();
                } else if ("refreshInterval".equals(fieldName)) {
                    deserializedRefreshConfiguration.refreshInterval = reader.getString();
                } else if ("refreshType".equals(fieldName)) {
                    deserializedRefreshConfiguration.refreshType
                        = UpdatableUdfRefreshType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRefreshConfiguration;
        });
    }
}
