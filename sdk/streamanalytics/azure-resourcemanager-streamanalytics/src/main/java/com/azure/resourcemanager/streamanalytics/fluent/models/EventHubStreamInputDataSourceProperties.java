// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.models.AuthenticationMode;
import com.azure.resourcemanager.streamanalytics.models.EventHubDataSourceProperties;
import java.io.IOException;

/**
 * The properties that are associated with a Event Hub input containing stream data.
 */
@Fluent
public final class EventHubStreamInputDataSourceProperties extends EventHubDataSourceProperties {
    /*
     * The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying
     * distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the
     * Event Hub. If not specified, the input uses the Event Hub’s default consumer group.
     */
    private String consumerGroupName;

    /**
     * Creates an instance of EventHubStreamInputDataSourceProperties class.
     */
    public EventHubStreamInputDataSourceProperties() {
    }

    /**
     * Get the consumerGroupName property: The name of an Event Hub Consumer Group that should be used to read events
     * from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to
     * receive the same events from the Event Hub. If not specified, the input uses the Event Hub’s default consumer
     * group.
     * 
     * @return the consumerGroupName value.
     */
    public String consumerGroupName() {
        return this.consumerGroupName;
    }

    /**
     * Set the consumerGroupName property: The name of an Event Hub Consumer Group that should be used to read events
     * from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to
     * receive the same events from the Event Hub. If not specified, the input uses the Event Hub’s default consumer
     * group.
     * 
     * @param consumerGroupName the consumerGroupName value to set.
     * @return the EventHubStreamInputDataSourceProperties object itself.
     */
    public EventHubStreamInputDataSourceProperties withConsumerGroupName(String consumerGroupName) {
        this.consumerGroupName = consumerGroupName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventHubStreamInputDataSourceProperties withEventHubName(String eventHubName) {
        super.withEventHubName(eventHubName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventHubStreamInputDataSourceProperties withServiceBusNamespace(String serviceBusNamespace) {
        super.withServiceBusNamespace(serviceBusNamespace);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventHubStreamInputDataSourceProperties withSharedAccessPolicyName(String sharedAccessPolicyName) {
        super.withSharedAccessPolicyName(sharedAccessPolicyName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventHubStreamInputDataSourceProperties withSharedAccessPolicyKey(String sharedAccessPolicyKey) {
        super.withSharedAccessPolicyKey(sharedAccessPolicyKey);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventHubStreamInputDataSourceProperties withAuthenticationMode(AuthenticationMode authenticationMode) {
        super.withAuthenticationMode(authenticationMode);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serviceBusNamespace", serviceBusNamespace());
        jsonWriter.writeStringField("sharedAccessPolicyName", sharedAccessPolicyName());
        jsonWriter.writeStringField("sharedAccessPolicyKey", sharedAccessPolicyKey());
        jsonWriter.writeStringField("authenticationMode",
            authenticationMode() == null ? null : authenticationMode().toString());
        jsonWriter.writeStringField("eventHubName", eventHubName());
        jsonWriter.writeStringField("consumerGroupName", this.consumerGroupName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EventHubStreamInputDataSourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EventHubStreamInputDataSourceProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EventHubStreamInputDataSourceProperties.
     */
    public static EventHubStreamInputDataSourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EventHubStreamInputDataSourceProperties deserializedEventHubStreamInputDataSourceProperties
                = new EventHubStreamInputDataSourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceBusNamespace".equals(fieldName)) {
                    deserializedEventHubStreamInputDataSourceProperties.withServiceBusNamespace(reader.getString());
                } else if ("sharedAccessPolicyName".equals(fieldName)) {
                    deserializedEventHubStreamInputDataSourceProperties.withSharedAccessPolicyName(reader.getString());
                } else if ("sharedAccessPolicyKey".equals(fieldName)) {
                    deserializedEventHubStreamInputDataSourceProperties.withSharedAccessPolicyKey(reader.getString());
                } else if ("authenticationMode".equals(fieldName)) {
                    deserializedEventHubStreamInputDataSourceProperties
                        .withAuthenticationMode(AuthenticationMode.fromString(reader.getString()));
                } else if ("eventHubName".equals(fieldName)) {
                    deserializedEventHubStreamInputDataSourceProperties.withEventHubName(reader.getString());
                } else if ("consumerGroupName".equals(fieldName)) {
                    deserializedEventHubStreamInputDataSourceProperties.consumerGroupName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEventHubStreamInputDataSourceProperties;
        });
    }
}
