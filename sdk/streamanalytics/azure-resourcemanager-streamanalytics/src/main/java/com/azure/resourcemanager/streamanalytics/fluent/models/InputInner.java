// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SubResource;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.models.InputProperties;
import java.io.IOException;

/**
 * An input object, containing all information associated with the named input. All inputs are contained under a
 * streaming job.
 */
@Fluent
public final class InputInner extends SubResource {
    /*
     * The properties that are associated with an input. Required on PUT (CreateOrReplace) requests.
     */
    private InputProperties properties;

    /*
     * Resource name
     */
    private String name;

    /*
     * Resource type
     */
    private String type;

    /**
     * Creates an instance of InputInner class.
     */
    public InputInner() {
    }

    /**
     * Get the properties property: The properties that are associated with an input. Required on PUT (CreateOrReplace)
     * requests.
     * 
     * @return the properties value.
     */
    public InputProperties properties() {
        return this.properties;
    }

    /**
     * Set the properties property: The properties that are associated with an input. Required on PUT (CreateOrReplace)
     * requests.
     * 
     * @param properties the properties value to set.
     * @return the InputInner object itself.
     */
    public InputInner withProperties(InputProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the name property: Resource name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Resource name.
     * 
     * @param name the name value to set.
     * @return the InputInner object itself.
     */
    public InputInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: Resource type.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InputInner withId(String id) {
        super.withId(id);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (properties() != null) {
            properties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", id());
        jsonWriter.writeJsonField("properties", this.properties);
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InputInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InputInner if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the InputInner.
     */
    public static InputInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InputInner deserializedInputInner = new InputInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedInputInner.withId(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    deserializedInputInner.properties = InputProperties.fromJson(reader);
                } else if ("name".equals(fieldName)) {
                    deserializedInputInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedInputInner.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInputInner;
        });
    }
}
