// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.fluent.models.CSharpFunctionBindingProperties;
import java.io.IOException;

/**
 * The binding to a CSharp function.
 */
@Fluent
public final class CSharpFunctionBinding extends FunctionBinding {
    /*
     * Indicates the function binding type.
     */
    private String type = "Microsoft.StreamAnalytics/CLRUdf";

    /*
     * The binding properties associated with a CSharp function.
     */
    private CSharpFunctionBindingProperties innerProperties;

    /**
     * Creates an instance of CSharpFunctionBinding class.
     */
    public CSharpFunctionBinding() {
    }

    /**
     * Get the type property: Indicates the function binding type.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the innerProperties property: The binding properties associated with a CSharp function.
     * 
     * @return the innerProperties value.
     */
    private CSharpFunctionBindingProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the dllPath property: The Csharp code containing a single function definition.
     * 
     * @return the dllPath value.
     */
    public String dllPath() {
        return this.innerProperties() == null ? null : this.innerProperties().dllPath();
    }

    /**
     * Set the dllPath property: The Csharp code containing a single function definition.
     * 
     * @param dllPath the dllPath value to set.
     * @return the CSharpFunctionBinding object itself.
     */
    public CSharpFunctionBinding withDllPath(String dllPath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CSharpFunctionBindingProperties();
        }
        this.innerProperties().withDllPath(dllPath);
        return this;
    }

    /**
     * Get the classProperty property: The Csharp code containing a single function definition.
     * 
     * @return the classProperty value.
     */
    public String classProperty() {
        return this.innerProperties() == null ? null : this.innerProperties().classProperty();
    }

    /**
     * Set the classProperty property: The Csharp code containing a single function definition.
     * 
     * @param classProperty the classProperty value to set.
     * @return the CSharpFunctionBinding object itself.
     */
    public CSharpFunctionBinding withClassProperty(String classProperty) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CSharpFunctionBindingProperties();
        }
        this.innerProperties().withClassProperty(classProperty);
        return this;
    }

    /**
     * Get the method property: The Csharp code containing a single function definition.
     * 
     * @return the method value.
     */
    public String method() {
        return this.innerProperties() == null ? null : this.innerProperties().method();
    }

    /**
     * Set the method property: The Csharp code containing a single function definition.
     * 
     * @param method the method value to set.
     * @return the CSharpFunctionBinding object itself.
     */
    public CSharpFunctionBinding withMethod(String method) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CSharpFunctionBindingProperties();
        }
        this.innerProperties().withMethod(method);
        return this;
    }

    /**
     * Get the updateMode property: Refresh modes for Stream Analytics functions.
     * 
     * @return the updateMode value.
     */
    public UpdateMode updateMode() {
        return this.innerProperties() == null ? null : this.innerProperties().updateMode();
    }

    /**
     * Set the updateMode property: Refresh modes for Stream Analytics functions.
     * 
     * @param updateMode the updateMode value to set.
     * @return the CSharpFunctionBinding object itself.
     */
    public CSharpFunctionBinding withUpdateMode(UpdateMode updateMode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CSharpFunctionBindingProperties();
        }
        this.innerProperties().withUpdateMode(updateMode);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CSharpFunctionBinding from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CSharpFunctionBinding if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CSharpFunctionBinding.
     */
    public static CSharpFunctionBinding fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CSharpFunctionBinding deserializedCSharpFunctionBinding = new CSharpFunctionBinding();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedCSharpFunctionBinding.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedCSharpFunctionBinding.innerProperties
                        = CSharpFunctionBindingProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCSharpFunctionBinding;
        });
    }
}
