// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.fluent.models.EventGridStreamInputDataSourceProperties;
import java.io.IOException;
import java.util.List;

/**
 * Describes an event grid input data source that contains stream data.
 */
@Fluent
public final class EventGridStreamInputDataSource extends StreamInputDataSource {
    /*
     * Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
     */
    private String type = "Microsoft.EventGrid/EventSubscriptions";

    /*
     * The properties that are associated with an event grid input containing stream data.
     */
    private EventGridStreamInputDataSourceProperties innerProperties;

    /**
     * Creates an instance of EventGridStreamInputDataSource class.
     */
    public EventGridStreamInputDataSource() {
    }

    /**
     * Get the type property: Indicates the type of input data source containing stream data. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the innerProperties property: The properties that are associated with an event grid input containing stream
     * data.
     * 
     * @return the innerProperties value.
     */
    private EventGridStreamInputDataSourceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the subscriber property: Subscribers for the Event Grid. Currently only EventHub Subscriber is supported.
     * 
     * @return the subscriber value.
     */
    public EventHubV2StreamInputDataSource subscriber() {
        return this.innerProperties() == null ? null : this.innerProperties().subscriber();
    }

    /**
     * Set the subscriber property: Subscribers for the Event Grid. Currently only EventHub Subscriber is supported.
     * 
     * @param subscriber the subscriber value to set.
     * @return the EventGridStreamInputDataSource object itself.
     */
    public EventGridStreamInputDataSource withSubscriber(EventHubV2StreamInputDataSource subscriber) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EventGridStreamInputDataSourceProperties();
        }
        this.innerProperties().withSubscriber(subscriber);
        return this;
    }

    /**
     * Get the schema property: Indicates the Event Grid schema type.
     * 
     * @return the schema value.
     */
    public EventGridEventSchemaType schema() {
        return this.innerProperties() == null ? null : this.innerProperties().schema();
    }

    /**
     * Set the schema property: Indicates the Event Grid schema type.
     * 
     * @param schema the schema value to set.
     * @return the EventGridStreamInputDataSource object itself.
     */
    public EventGridStreamInputDataSource withSchema(EventGridEventSchemaType schema) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EventGridStreamInputDataSourceProperties();
        }
        this.innerProperties().withSchema(schema);
        return this;
    }

    /**
     * Get the storageAccounts property: A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace)
     * requests.
     * 
     * @return the storageAccounts value.
     */
    public List<StorageAccount> storageAccounts() {
        return this.innerProperties() == null ? null : this.innerProperties().storageAccounts();
    }

    /**
     * Set the storageAccounts property: A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace)
     * requests.
     * 
     * @param storageAccounts the storageAccounts value to set.
     * @return the EventGridStreamInputDataSource object itself.
     */
    public EventGridStreamInputDataSource withStorageAccounts(List<StorageAccount> storageAccounts) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EventGridStreamInputDataSourceProperties();
        }
        this.innerProperties().withStorageAccounts(storageAccounts);
        return this;
    }

    /**
     * Get the eventTypes property: List of Event Types that are supported by the Event Grid adapter.
     * 
     * @return the eventTypes value.
     */
    public List<String> eventTypes() {
        return this.innerProperties() == null ? null : this.innerProperties().eventTypes();
    }

    /**
     * Set the eventTypes property: List of Event Types that are supported by the Event Grid adapter.
     * 
     * @param eventTypes the eventTypes value to set.
     * @return the EventGridStreamInputDataSource object itself.
     */
    public EventGridStreamInputDataSource withEventTypes(List<String> eventTypes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EventGridStreamInputDataSourceProperties();
        }
        this.innerProperties().withEventTypes(eventTypes);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EventGridStreamInputDataSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EventGridStreamInputDataSource if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EventGridStreamInputDataSource.
     */
    public static EventGridStreamInputDataSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EventGridStreamInputDataSource deserializedEventGridStreamInputDataSource
                = new EventGridStreamInputDataSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedEventGridStreamInputDataSource.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedEventGridStreamInputDataSource.innerProperties
                        = EventGridStreamInputDataSourceProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEventGridStreamInputDataSource;
        });
    }
}
