// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.streamanalytics.fluent.models.EventGridStreamInputDataSourceProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/**
 * Describes an event grid input data source that contains stream data.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("Microsoft.EventGrid/EventSubscriptions")
@Fluent
public final class EventGridStreamInputDataSource extends StreamInputDataSource {
    /*
     * The properties that are associated with an event grid input containing stream data.
     */
    @JsonProperty(value = "properties")
    private EventGridStreamInputDataSourceProperties innerProperties;

    /**
     * Creates an instance of EventGridStreamInputDataSource class.
     */
    public EventGridStreamInputDataSource() {
    }

    /**
     * Get the innerProperties property: The properties that are associated with an event grid input containing stream
     * data.
     * 
     * @return the innerProperties value.
     */
    private EventGridStreamInputDataSourceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the subscriber property: Subscribers for the Event Grid. Currently only EventHub Subscriber is supported.
     * 
     * @return the subscriber value.
     */
    public EventHubV2StreamInputDataSource subscriber() {
        return this.innerProperties() == null ? null : this.innerProperties().subscriber();
    }

    /**
     * Set the subscriber property: Subscribers for the Event Grid. Currently only EventHub Subscriber is supported.
     * 
     * @param subscriber the subscriber value to set.
     * @return the EventGridStreamInputDataSource object itself.
     */
    public EventGridStreamInputDataSource withSubscriber(EventHubV2StreamInputDataSource subscriber) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EventGridStreamInputDataSourceProperties();
        }
        this.innerProperties().withSubscriber(subscriber);
        return this;
    }

    /**
     * Get the schema property: Indicates the Event Grid schema type.
     * 
     * @return the schema value.
     */
    public EventGridEventSchemaType schema() {
        return this.innerProperties() == null ? null : this.innerProperties().schema();
    }

    /**
     * Set the schema property: Indicates the Event Grid schema type.
     * 
     * @param schema the schema value to set.
     * @return the EventGridStreamInputDataSource object itself.
     */
    public EventGridStreamInputDataSource withSchema(EventGridEventSchemaType schema) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EventGridStreamInputDataSourceProperties();
        }
        this.innerProperties().withSchema(schema);
        return this;
    }

    /**
     * Get the storageAccounts property: A list of one or more Azure Storage accounts. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @return the storageAccounts value.
     */
    public List<StorageAccount> storageAccounts() {
        return this.innerProperties() == null ? null : this.innerProperties().storageAccounts();
    }

    /**
     * Set the storageAccounts property: A list of one or more Azure Storage accounts. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @param storageAccounts the storageAccounts value to set.
     * @return the EventGridStreamInputDataSource object itself.
     */
    public EventGridStreamInputDataSource withStorageAccounts(List<StorageAccount> storageAccounts) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EventGridStreamInputDataSourceProperties();
        }
        this.innerProperties().withStorageAccounts(storageAccounts);
        return this;
    }

    /**
     * Get the eventTypes property: List of Event Types that are supported by the Event Grid adapter.
     * 
     * @return the eventTypes value.
     */
    public List<String> eventTypes() {
        return this.innerProperties() == null ? null : this.innerProperties().eventTypes();
    }

    /**
     * Set the eventTypes property: List of Event Types that are supported by the Event Grid adapter.
     * 
     * @param eventTypes the eventTypes value to set.
     * @return the EventGridStreamInputDataSource object itself.
     */
    public EventGridStreamInputDataSource withEventTypes(List<String> eventTypes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EventGridStreamInputDataSourceProperties();
        }
        this.innerProperties().withEventTypes(eventTypes);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
