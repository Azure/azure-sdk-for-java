// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties associated with a private endpoint.
 */
@Fluent
public final class PrivateEndpointProperties implements JsonSerializable<PrivateEndpointProperties> {
    /*
     * The date when this private endpoint was created.
     */
    private String createdDate;

    /*
     * A list of connections to the remote resource. Immutable after it is set.
     */
    private List<PrivateLinkServiceConnection> manualPrivateLinkServiceConnections;

    /**
     * Creates an instance of PrivateEndpointProperties class.
     */
    public PrivateEndpointProperties() {
    }

    /**
     * Get the createdDate property: The date when this private endpoint was created.
     * 
     * @return the createdDate value.
     */
    public String createdDate() {
        return this.createdDate;
    }

    /**
     * Get the manualPrivateLinkServiceConnections property: A list of connections to the remote resource. Immutable
     * after it is set.
     * 
     * @return the manualPrivateLinkServiceConnections value.
     */
    public List<PrivateLinkServiceConnection> manualPrivateLinkServiceConnections() {
        return this.manualPrivateLinkServiceConnections;
    }

    /**
     * Set the manualPrivateLinkServiceConnections property: A list of connections to the remote resource. Immutable
     * after it is set.
     * 
     * @param manualPrivateLinkServiceConnections the manualPrivateLinkServiceConnections value to set.
     * @return the PrivateEndpointProperties object itself.
     */
    public PrivateEndpointProperties withManualPrivateLinkServiceConnections(
        List<PrivateLinkServiceConnection> manualPrivateLinkServiceConnections) {
        this.manualPrivateLinkServiceConnections = manualPrivateLinkServiceConnections;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (manualPrivateLinkServiceConnections() != null) {
            manualPrivateLinkServiceConnections().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("manualPrivateLinkServiceConnections", this.manualPrivateLinkServiceConnections,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PrivateEndpointProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PrivateEndpointProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PrivateEndpointProperties.
     */
    public static PrivateEndpointProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PrivateEndpointProperties deserializedPrivateEndpointProperties = new PrivateEndpointProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("createdDate".equals(fieldName)) {
                    deserializedPrivateEndpointProperties.createdDate = reader.getString();
                } else if ("manualPrivateLinkServiceConnections".equals(fieldName)) {
                    List<PrivateLinkServiceConnection> manualPrivateLinkServiceConnections
                        = reader.readArray(reader1 -> PrivateLinkServiceConnection.fromJson(reader1));
                    deserializedPrivateEndpointProperties.manualPrivateLinkServiceConnections
                        = manualPrivateLinkServiceConnections;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPrivateEndpointProperties;
        });
    }
}
