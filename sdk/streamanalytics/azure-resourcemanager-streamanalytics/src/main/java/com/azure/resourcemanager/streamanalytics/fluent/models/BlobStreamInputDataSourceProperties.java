// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.streamanalytics.models.AuthenticationMode;
import com.azure.resourcemanager.streamanalytics.models.BlobDataSourceProperties;
import com.azure.resourcemanager.streamanalytics.models.StorageAccount;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The properties that are associated with a blob input containing stream data.
 */
@Fluent
public final class BlobStreamInputDataSourceProperties extends BlobDataSourceProperties {
    /*
     * The partition count of the blob input data source. Range 1 - 1024.
     */
    @JsonProperty(value = "sourcePartitionCount")
    private Integer sourcePartitionCount;

    /**
     * Creates an instance of BlobStreamInputDataSourceProperties class.
     */
    public BlobStreamInputDataSourceProperties() {
    }

    /**
     * Get the sourcePartitionCount property: The partition count of the blob input data source. Range 1 - 1024.
     * 
     * @return the sourcePartitionCount value.
     */
    public Integer sourcePartitionCount() {
        return this.sourcePartitionCount;
    }

    /**
     * Set the sourcePartitionCount property: The partition count of the blob input data source. Range 1 - 1024.
     * 
     * @param sourcePartitionCount the sourcePartitionCount value to set.
     * @return the BlobStreamInputDataSourceProperties object itself.
     */
    public BlobStreamInputDataSourceProperties withSourcePartitionCount(Integer sourcePartitionCount) {
        this.sourcePartitionCount = sourcePartitionCount;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BlobStreamInputDataSourceProperties withStorageAccounts(List<StorageAccount> storageAccounts) {
        super.withStorageAccounts(storageAccounts);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BlobStreamInputDataSourceProperties withContainer(String container) {
        super.withContainer(container);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BlobStreamInputDataSourceProperties withPathPattern(String pathPattern) {
        super.withPathPattern(pathPattern);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BlobStreamInputDataSourceProperties withDateFormat(String dateFormat) {
        super.withDateFormat(dateFormat);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BlobStreamInputDataSourceProperties withTimeFormat(String timeFormat) {
        super.withTimeFormat(timeFormat);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BlobStreamInputDataSourceProperties withAuthenticationMode(AuthenticationMode authenticationMode) {
        super.withAuthenticationMode(authenticationMode);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
