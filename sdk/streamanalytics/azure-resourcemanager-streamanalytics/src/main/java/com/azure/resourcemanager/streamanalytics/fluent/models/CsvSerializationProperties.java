// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.models.Encoding;
import java.io.IOException;

/**
 * The properties that are associated with the CSV serialization type.
 */
@Fluent
public final class CsvSerializationProperties implements JsonSerializable<CsvSerializationProperties> {
    /*
     * Specifies the delimiter that will be used to separate comma-separated value (CSV) records. See
     * https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
     * https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a list of supported values.
     * Required on PUT (CreateOrReplace) requests.
     */
    private String fieldDelimiter;

    /*
     * Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of
     * output. Required on PUT (CreateOrReplace) requests.
     */
    private Encoding encoding;

    /**
     * Creates an instance of CsvSerializationProperties class.
     */
    public CsvSerializationProperties() {
    }

    /**
     * Get the fieldDelimiter property: Specifies the delimiter that will be used to separate comma-separated value
     * (CSV) records. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
     * https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a list of supported values.
     * Required on PUT (CreateOrReplace) requests.
     * 
     * @return the fieldDelimiter value.
     */
    public String fieldDelimiter() {
        return this.fieldDelimiter;
    }

    /**
     * Set the fieldDelimiter property: Specifies the delimiter that will be used to separate comma-separated value
     * (CSV) records. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
     * https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a list of supported values.
     * Required on PUT (CreateOrReplace) requests.
     * 
     * @param fieldDelimiter the fieldDelimiter value to set.
     * @return the CsvSerializationProperties object itself.
     */
    public CsvSerializationProperties withFieldDelimiter(String fieldDelimiter) {
        this.fieldDelimiter = fieldDelimiter;
        return this;
    }

    /**
     * Get the encoding property: Specifies the encoding of the incoming data in the case of input and the encoding of
     * outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
     * 
     * @return the encoding value.
     */
    public Encoding encoding() {
        return this.encoding;
    }

    /**
     * Set the encoding property: Specifies the encoding of the incoming data in the case of input and the encoding of
     * outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
     * 
     * @param encoding the encoding value to set.
     * @return the CsvSerializationProperties object itself.
     */
    public CsvSerializationProperties withEncoding(Encoding encoding) {
        this.encoding = encoding;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("fieldDelimiter", this.fieldDelimiter);
        jsonWriter.writeStringField("encoding", this.encoding == null ? null : this.encoding.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CsvSerializationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CsvSerializationProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CsvSerializationProperties.
     */
    public static CsvSerializationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CsvSerializationProperties deserializedCsvSerializationProperties = new CsvSerializationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fieldDelimiter".equals(fieldName)) {
                    deserializedCsvSerializationProperties.fieldDelimiter = reader.getString();
                } else if ("encoding".equals(fieldName)) {
                    deserializedCsvSerializationProperties.encoding = Encoding.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCsvSerializationProperties;
        });
    }
}
