// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Settings which determine whether to send watermarks to downstream.
 */
@Fluent
public final class OutputWatermarkProperties implements JsonSerializable<OutputWatermarkProperties> {
    /*
     * The output watermark mode.
     */
    private OutputWatermarkMode watermarkMode;

    /*
     * Describes the maximal delta between the fastest and slowest partitions, so the out of order window that catches
     * all necessary events in downstream jobs is well defined.
     */
    private String maxWatermarkDifferenceAcrossPartitions;

    /**
     * Creates an instance of OutputWatermarkProperties class.
     */
    public OutputWatermarkProperties() {
    }

    /**
     * Get the watermarkMode property: The output watermark mode.
     * 
     * @return the watermarkMode value.
     */
    public OutputWatermarkMode watermarkMode() {
        return this.watermarkMode;
    }

    /**
     * Set the watermarkMode property: The output watermark mode.
     * 
     * @param watermarkMode the watermarkMode value to set.
     * @return the OutputWatermarkProperties object itself.
     */
    public OutputWatermarkProperties withWatermarkMode(OutputWatermarkMode watermarkMode) {
        this.watermarkMode = watermarkMode;
        return this;
    }

    /**
     * Get the maxWatermarkDifferenceAcrossPartitions property: Describes the maximal delta between the fastest and
     * slowest partitions, so the out of order window that catches all necessary events in downstream jobs is well
     * defined.
     * 
     * @return the maxWatermarkDifferenceAcrossPartitions value.
     */
    public String maxWatermarkDifferenceAcrossPartitions() {
        return this.maxWatermarkDifferenceAcrossPartitions;
    }

    /**
     * Set the maxWatermarkDifferenceAcrossPartitions property: Describes the maximal delta between the fastest and
     * slowest partitions, so the out of order window that catches all necessary events in downstream jobs is well
     * defined.
     * 
     * @param maxWatermarkDifferenceAcrossPartitions the maxWatermarkDifferenceAcrossPartitions value to set.
     * @return the OutputWatermarkProperties object itself.
     */
    public OutputWatermarkProperties
        withMaxWatermarkDifferenceAcrossPartitions(String maxWatermarkDifferenceAcrossPartitions) {
        this.maxWatermarkDifferenceAcrossPartitions = maxWatermarkDifferenceAcrossPartitions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("watermarkMode", this.watermarkMode == null ? null : this.watermarkMode.toString());
        jsonWriter.writeStringField("maxWatermarkDifferenceAcrossPartitions",
            this.maxWatermarkDifferenceAcrossPartitions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OutputWatermarkProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OutputWatermarkProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OutputWatermarkProperties.
     */
    public static OutputWatermarkProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OutputWatermarkProperties deserializedOutputWatermarkProperties = new OutputWatermarkProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("watermarkMode".equals(fieldName)) {
                    deserializedOutputWatermarkProperties.watermarkMode
                        = OutputWatermarkMode.fromString(reader.getString());
                } else if ("maxWatermarkDifferenceAcrossPartitions".equals(fieldName)) {
                    deserializedOutputWatermarkProperties.maxWatermarkDifferenceAcrossPartitions = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOutputWatermarkProperties;
        });
    }
}
