// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Settings which determine whether to send watermarks to downstream.
 */
@Fluent
public final class OutputWatermarkProperties {
    /*
     * The output watermark mode.
     */
    @JsonProperty(value = "watermarkMode")
    private OutputWatermarkMode watermarkMode;

    /*
     * Describes the maximal delta between the fastest and slowest partitions, so the out of order window that catches
     * all necessary events in downstream jobs is well defined.
     */
    @JsonProperty(value = "maxWatermarkDifferenceAcrossPartitions")
    private String maxWatermarkDifferenceAcrossPartitions;

    /**
     * Creates an instance of OutputWatermarkProperties class.
     */
    public OutputWatermarkProperties() {
    }

    /**
     * Get the watermarkMode property: The output watermark mode.
     * 
     * @return the watermarkMode value.
     */
    public OutputWatermarkMode watermarkMode() {
        return this.watermarkMode;
    }

    /**
     * Set the watermarkMode property: The output watermark mode.
     * 
     * @param watermarkMode the watermarkMode value to set.
     * @return the OutputWatermarkProperties object itself.
     */
    public OutputWatermarkProperties withWatermarkMode(OutputWatermarkMode watermarkMode) {
        this.watermarkMode = watermarkMode;
        return this;
    }

    /**
     * Get the maxWatermarkDifferenceAcrossPartitions property: Describes the maximal delta between the fastest and
     * slowest partitions, so the out of order window that catches all necessary events in downstream jobs is well
     * defined.
     * 
     * @return the maxWatermarkDifferenceAcrossPartitions value.
     */
    public String maxWatermarkDifferenceAcrossPartitions() {
        return this.maxWatermarkDifferenceAcrossPartitions;
    }

    /**
     * Set the maxWatermarkDifferenceAcrossPartitions property: Describes the maximal delta between the fastest and
     * slowest partitions, so the out of order window that catches all necessary events in downstream jobs is well
     * defined.
     * 
     * @param maxWatermarkDifferenceAcrossPartitions the maxWatermarkDifferenceAcrossPartitions value to set.
     * @return the OutputWatermarkProperties object itself.
     */
    public OutputWatermarkProperties
        withMaxWatermarkDifferenceAcrossPartitions(String maxWatermarkDifferenceAcrossPartitions) {
        this.maxWatermarkDifferenceAcrossPartitions = maxWatermarkDifferenceAcrossPartitions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
