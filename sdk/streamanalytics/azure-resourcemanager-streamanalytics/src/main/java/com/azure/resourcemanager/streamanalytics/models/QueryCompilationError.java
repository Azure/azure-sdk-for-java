// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An error produced by the compiler.
 */
@Immutable
public final class QueryCompilationError implements JsonSerializable<QueryCompilationError> {
    /*
     * The content of the error message.
     */
    private String message;

    /*
     * Describes the error location in the original query. Not set if isGlobal is true.
     */
    private Integer startLine;

    /*
     * Describes the error location in the original query. Not set if isGlobal is true.
     */
    private Integer startColumn;

    /*
     * Describes the error location in the original query. Not set if isGlobal is true.
     */
    private Integer endLine;

    /*
     * Describes the error location in the original query. Not set if isGlobal is true.
     */
    private Integer endColumn;

    /*
     * Whether the error is not for a specific part but for the entire query.
     */
    private Boolean isGlobal;

    /**
     * Creates an instance of QueryCompilationError class.
     */
    public QueryCompilationError() {
    }

    /**
     * Get the message property: The content of the error message.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Get the startLine property: Describes the error location in the original query. Not set if isGlobal is true.
     * 
     * @return the startLine value.
     */
    public Integer startLine() {
        return this.startLine;
    }

    /**
     * Get the startColumn property: Describes the error location in the original query. Not set if isGlobal is true.
     * 
     * @return the startColumn value.
     */
    public Integer startColumn() {
        return this.startColumn;
    }

    /**
     * Get the endLine property: Describes the error location in the original query. Not set if isGlobal is true.
     * 
     * @return the endLine value.
     */
    public Integer endLine() {
        return this.endLine;
    }

    /**
     * Get the endColumn property: Describes the error location in the original query. Not set if isGlobal is true.
     * 
     * @return the endColumn value.
     */
    public Integer endColumn() {
        return this.endColumn;
    }

    /**
     * Get the isGlobal property: Whether the error is not for a specific part but for the entire query.
     * 
     * @return the isGlobal value.
     */
    public Boolean isGlobal() {
        return this.isGlobal;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueryCompilationError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueryCompilationError if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the QueryCompilationError.
     */
    public static QueryCompilationError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueryCompilationError deserializedQueryCompilationError = new QueryCompilationError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("message".equals(fieldName)) {
                    deserializedQueryCompilationError.message = reader.getString();
                } else if ("startLine".equals(fieldName)) {
                    deserializedQueryCompilationError.startLine = reader.getNullable(JsonReader::getInt);
                } else if ("startColumn".equals(fieldName)) {
                    deserializedQueryCompilationError.startColumn = reader.getNullable(JsonReader::getInt);
                } else if ("endLine".equals(fieldName)) {
                    deserializedQueryCompilationError.endLine = reader.getNullable(JsonReader::getInt);
                } else if ("endColumn".equals(fieldName)) {
                    deserializedQueryCompilationError.endColumn = reader.getNullable(JsonReader::getInt);
                } else if ("isGlobal".equals(fieldName)) {
                    deserializedQueryCompilationError.isGlobal = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQueryCompilationError;
        });
    }
}
