// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.fluent.models.FunctionConfiguration;
import java.io.IOException;
import java.util.List;

/**
 * The properties that are associated with a function.
 */
@Fluent
public class FunctionProperties implements JsonSerializable<FunctionProperties> {
    /*
     * Indicates the type of function.
     */
    private String type = "FunctionProperties";

    /*
     * The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource
     * has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations
     * for optimistic concurrency.
     */
    private String etag;

    /*
     * The properties property.
     */
    private FunctionConfiguration innerProperties;

    /**
     * Creates an instance of FunctionProperties class.
     */
    public FunctionProperties() {
    }

    /**
     * Get the type property: Indicates the type of function.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the etag property: The current entity tag for the function. This is an opaque string. You can use it to
     * detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match
     * headers for write operations for optimistic concurrency.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Set the etag property: The current entity tag for the function. This is an opaque string. You can use it to
     * detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match
     * headers for write operations for optimistic concurrency.
     * 
     * @param etag the etag value to set.
     * @return the FunctionProperties object itself.
     */
    FunctionProperties withEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Get the innerProperties property: The properties property.
     * 
     * @return the innerProperties value.
     */
    private FunctionConfiguration innerProperties() {
        return this.innerProperties;
    }

    /**
     * Set the innerProperties property: The properties property.
     * 
     * @param innerProperties the innerProperties value to set.
     * @return the FunctionProperties object itself.
     */
    FunctionProperties withInnerProperties(FunctionConfiguration innerProperties) {
        this.innerProperties = innerProperties;
        return this;
    }

    /**
     * Get the inputs property: The inputs property.
     * 
     * @return the inputs value.
     */
    public List<FunctionInput> inputs() {
        return this.innerProperties() == null ? null : this.innerProperties().inputs();
    }

    /**
     * Set the inputs property: The inputs property.
     * 
     * @param inputs the inputs value to set.
     * @return the FunctionProperties object itself.
     */
    public FunctionProperties withInputs(List<FunctionInput> inputs) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FunctionConfiguration();
        }
        this.innerProperties().withInputs(inputs);
        return this;
    }

    /**
     * Get the output property: Describes the output of a function.
     * 
     * @return the output value.
     */
    public FunctionOutput output() {
        return this.innerProperties() == null ? null : this.innerProperties().output();
    }

    /**
     * Set the output property: Describes the output of a function.
     * 
     * @param output the output value to set.
     * @return the FunctionProperties object itself.
     */
    public FunctionProperties withOutput(FunctionOutput output) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FunctionConfiguration();
        }
        this.innerProperties().withOutput(output);
        return this;
    }

    /**
     * Get the binding property: The physical binding of the function. For example, in the Azure Machine Learning web
     * service’s case, this describes the endpoint.
     * 
     * @return the binding value.
     */
    public FunctionBinding binding() {
        return this.innerProperties() == null ? null : this.innerProperties().binding();
    }

    /**
     * Set the binding property: The physical binding of the function. For example, in the Azure Machine Learning web
     * service’s case, this describes the endpoint.
     * 
     * @param binding the binding value to set.
     * @return the FunctionProperties object itself.
     */
    public FunctionProperties withBinding(FunctionBinding binding) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FunctionConfiguration();
        }
        this.innerProperties().withBinding(binding);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FunctionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FunctionProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FunctionProperties.
     */
    public static FunctionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Scalar".equals(discriminatorValue)) {
                    return ScalarFunctionProperties.fromJson(readerToUse.reset());
                } else if ("Aggregate".equals(discriminatorValue)) {
                    return AggregateFunctionProperties.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static FunctionProperties fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FunctionProperties deserializedFunctionProperties = new FunctionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedFunctionProperties.type = reader.getString();
                } else if ("etag".equals(fieldName)) {
                    deserializedFunctionProperties.etag = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedFunctionProperties.innerProperties = FunctionConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFunctionProperties;
        });
    }
}
