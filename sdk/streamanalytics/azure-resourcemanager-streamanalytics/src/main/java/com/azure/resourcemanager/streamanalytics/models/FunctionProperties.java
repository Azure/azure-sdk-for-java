// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/** The properties that are associated with a function. */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "type",
    defaultImpl = FunctionProperties.class)
@JsonTypeName("FunctionProperties")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "Scalar", value = ScalarFunctionProperties.class),
    @JsonSubTypes.Type(name = "Aggregate", value = AggregateFunctionProperties.class)
})
@JsonFlatten
@Fluent
public class FunctionProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(FunctionProperties.class);

    /*
     * The current entity tag for the function. This is an opaque string. You
     * can use it to detect whether the resource has changed between requests.
     * You can also use it in the If-Match or If-None-Match headers for write
     * operations for optimistic concurrency.
     */
    @JsonProperty(value = "etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /*
     * The inputs property.
     */
    @JsonProperty(value = "properties.inputs")
    private List<FunctionInput> inputs;

    /*
     * Describes the output of a function.
     */
    @JsonProperty(value = "properties.output")
    private FunctionOutput output;

    /*
     * The physical binding of the function. For example, in the Azure Machine
     * Learning web service’s case, this describes the endpoint.
     */
    @JsonProperty(value = "properties.binding")
    private FunctionBinding binding;

    /**
     * Get the etag property: The current entity tag for the function. This is an opaque string. You can use it to
     * detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match
     * headers for write operations for optimistic concurrency.
     *
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get the inputs property: The inputs property.
     *
     * @return the inputs value.
     */
    public List<FunctionInput> inputs() {
        return this.inputs;
    }

    /**
     * Set the inputs property: The inputs property.
     *
     * @param inputs the inputs value to set.
     * @return the FunctionProperties object itself.
     */
    public FunctionProperties withInputs(List<FunctionInput> inputs) {
        this.inputs = inputs;
        return this;
    }

    /**
     * Get the output property: Describes the output of a function.
     *
     * @return the output value.
     */
    public FunctionOutput output() {
        return this.output;
    }

    /**
     * Set the output property: Describes the output of a function.
     *
     * @param output the output value to set.
     * @return the FunctionProperties object itself.
     */
    public FunctionProperties withOutput(FunctionOutput output) {
        this.output = output;
        return this;
    }

    /**
     * Get the binding property: The physical binding of the function. For example, in the Azure Machine Learning web
     * service’s case, this describes the endpoint.
     *
     * @return the binding value.
     */
    public FunctionBinding binding() {
        return this.binding;
    }

    /**
     * Set the binding property: The physical binding of the function. For example, in the Azure Machine Learning web
     * service’s case, this describes the endpoint.
     *
     * @param binding the binding value to set.
     * @return the FunctionProperties object itself.
     */
    public FunctionProperties withBinding(FunctionBinding binding) {
        this.binding = binding;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (inputs() != null) {
            inputs().forEach(e -> e.validate());
        }
        if (output() != null) {
            output().validate();
        }
        if (binding() != null) {
            binding().validate();
        }
    }
}
