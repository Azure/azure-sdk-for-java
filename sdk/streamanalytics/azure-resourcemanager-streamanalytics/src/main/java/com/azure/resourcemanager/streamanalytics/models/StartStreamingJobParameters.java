// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Parameters supplied to the Start Streaming Job operation.
 */
@Fluent
public final class StartStreamingJobParameters implements JsonSerializable<StartStreamingJobParameters> {
    /*
     * Value may be JobStartTime, CustomTime, or LastOutputEventTime to indicate whether the starting point of the
     * output event stream should start whenever the job is started, start at a custom user time stamp specified via the
     * outputStartTime property, or start from the last event output time.
     */
    private OutputStartMode outputStartMode;

    /*
     * Value is either an ISO-8601 formatted time stamp that indicates the starting point of the output event stream, or
     * null to indicate that the output event stream will start whenever the streaming job is started. This property
     * must have a value if outputStartMode is set to CustomTime.
     */
    private OffsetDateTime outputStartTime;

    /**
     * Creates an instance of StartStreamingJobParameters class.
     */
    public StartStreamingJobParameters() {
    }

    /**
     * Get the outputStartMode property: Value may be JobStartTime, CustomTime, or LastOutputEventTime to indicate
     * whether the starting point of the output event stream should start whenever the job is started, start at a custom
     * user time stamp specified via the outputStartTime property, or start from the last event output time.
     * 
     * @return the outputStartMode value.
     */
    public OutputStartMode outputStartMode() {
        return this.outputStartMode;
    }

    /**
     * Set the outputStartMode property: Value may be JobStartTime, CustomTime, or LastOutputEventTime to indicate
     * whether the starting point of the output event stream should start whenever the job is started, start at a custom
     * user time stamp specified via the outputStartTime property, or start from the last event output time.
     * 
     * @param outputStartMode the outputStartMode value to set.
     * @return the StartStreamingJobParameters object itself.
     */
    public StartStreamingJobParameters withOutputStartMode(OutputStartMode outputStartMode) {
        this.outputStartMode = outputStartMode;
        return this;
    }

    /**
     * Get the outputStartTime property: Value is either an ISO-8601 formatted time stamp that indicates the starting
     * point of the output event stream, or null to indicate that the output event stream will start whenever the
     * streaming job is started. This property must have a value if outputStartMode is set to CustomTime.
     * 
     * @return the outputStartTime value.
     */
    public OffsetDateTime outputStartTime() {
        return this.outputStartTime;
    }

    /**
     * Set the outputStartTime property: Value is either an ISO-8601 formatted time stamp that indicates the starting
     * point of the output event stream, or null to indicate that the output event stream will start whenever the
     * streaming job is started. This property must have a value if outputStartMode is set to CustomTime.
     * 
     * @param outputStartTime the outputStartTime value to set.
     * @return the StartStreamingJobParameters object itself.
     */
    public StartStreamingJobParameters withOutputStartTime(OffsetDateTime outputStartTime) {
        this.outputStartTime = outputStartTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("outputStartMode",
            this.outputStartMode == null ? null : this.outputStartMode.toString());
        jsonWriter.writeStringField("outputStartTime",
            this.outputStartTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.outputStartTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StartStreamingJobParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StartStreamingJobParameters if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StartStreamingJobParameters.
     */
    public static StartStreamingJobParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StartStreamingJobParameters deserializedStartStreamingJobParameters = new StartStreamingJobParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("outputStartMode".equals(fieldName)) {
                    deserializedStartStreamingJobParameters.outputStartMode
                        = OutputStartMode.fromString(reader.getString());
                } else if ("outputStartTime".equals(fieldName)) {
                    deserializedStartStreamingJobParameters.outputStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStartStreamingJobParameters;
        });
    }
}
