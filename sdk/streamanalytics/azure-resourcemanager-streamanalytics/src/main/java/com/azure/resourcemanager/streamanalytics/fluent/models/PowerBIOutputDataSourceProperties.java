// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.models.AuthenticationMode;
import com.azure.resourcemanager.streamanalytics.models.OAuthBasedDataSourceProperties;
import java.io.IOException;

/**
 * The properties that are associated with a Power BI output.
 */
@Fluent
public final class PowerBIOutputDataSourceProperties extends OAuthBasedDataSourceProperties {
    /*
     * The name of the Power BI dataset. Required on PUT (CreateOrReplace) requests.
     */
    private String dataset;

    /*
     * The name of the Power BI table under the specified dataset. Required on PUT (CreateOrReplace) requests.
     */
    private String table;

    /*
     * The ID of the Power BI group.
     */
    private String groupId;

    /*
     * The name of the Power BI group. Use this property to help remember which specific Power BI group id was used.
     */
    private String groupName;

    /*
     * Authentication Mode.
     */
    private AuthenticationMode authenticationMode;

    /**
     * Creates an instance of PowerBIOutputDataSourceProperties class.
     */
    public PowerBIOutputDataSourceProperties() {
    }

    /**
     * Get the dataset property: The name of the Power BI dataset. Required on PUT (CreateOrReplace) requests.
     * 
     * @return the dataset value.
     */
    public String dataset() {
        return this.dataset;
    }

    /**
     * Set the dataset property: The name of the Power BI dataset. Required on PUT (CreateOrReplace) requests.
     * 
     * @param dataset the dataset value to set.
     * @return the PowerBIOutputDataSourceProperties object itself.
     */
    public PowerBIOutputDataSourceProperties withDataset(String dataset) {
        this.dataset = dataset;
        return this;
    }

    /**
     * Get the table property: The name of the Power BI table under the specified dataset. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @return the table value.
     */
    public String table() {
        return this.table;
    }

    /**
     * Set the table property: The name of the Power BI table under the specified dataset. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @param table the table value to set.
     * @return the PowerBIOutputDataSourceProperties object itself.
     */
    public PowerBIOutputDataSourceProperties withTable(String table) {
        this.table = table;
        return this;
    }

    /**
     * Get the groupId property: The ID of the Power BI group.
     * 
     * @return the groupId value.
     */
    public String groupId() {
        return this.groupId;
    }

    /**
     * Set the groupId property: The ID of the Power BI group.
     * 
     * @param groupId the groupId value to set.
     * @return the PowerBIOutputDataSourceProperties object itself.
     */
    public PowerBIOutputDataSourceProperties withGroupId(String groupId) {
        this.groupId = groupId;
        return this;
    }

    /**
     * Get the groupName property: The name of the Power BI group. Use this property to help remember which specific
     * Power BI group id was used.
     * 
     * @return the groupName value.
     */
    public String groupName() {
        return this.groupName;
    }

    /**
     * Set the groupName property: The name of the Power BI group. Use this property to help remember which specific
     * Power BI group id was used.
     * 
     * @param groupName the groupName value to set.
     * @return the PowerBIOutputDataSourceProperties object itself.
     */
    public PowerBIOutputDataSourceProperties withGroupName(String groupName) {
        this.groupName = groupName;
        return this;
    }

    /**
     * Get the authenticationMode property: Authentication Mode.
     * 
     * @return the authenticationMode value.
     */
    public AuthenticationMode authenticationMode() {
        return this.authenticationMode;
    }

    /**
     * Set the authenticationMode property: Authentication Mode.
     * 
     * @param authenticationMode the authenticationMode value to set.
     * @return the PowerBIOutputDataSourceProperties object itself.
     */
    public PowerBIOutputDataSourceProperties withAuthenticationMode(AuthenticationMode authenticationMode) {
        this.authenticationMode = authenticationMode;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PowerBIOutputDataSourceProperties withRefreshToken(String refreshToken) {
        super.withRefreshToken(refreshToken);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PowerBIOutputDataSourceProperties withTokenUserPrincipalName(String tokenUserPrincipalName) {
        super.withTokenUserPrincipalName(tokenUserPrincipalName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PowerBIOutputDataSourceProperties withTokenUserDisplayName(String tokenUserDisplayName) {
        super.withTokenUserDisplayName(tokenUserDisplayName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("refreshToken", refreshToken());
        jsonWriter.writeStringField("tokenUserPrincipalName", tokenUserPrincipalName());
        jsonWriter.writeStringField("tokenUserDisplayName", tokenUserDisplayName());
        jsonWriter.writeStringField("dataset", this.dataset);
        jsonWriter.writeStringField("table", this.table);
        jsonWriter.writeStringField("groupId", this.groupId);
        jsonWriter.writeStringField("groupName", this.groupName);
        jsonWriter.writeStringField("authenticationMode",
            this.authenticationMode == null ? null : this.authenticationMode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PowerBIOutputDataSourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PowerBIOutputDataSourceProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PowerBIOutputDataSourceProperties.
     */
    public static PowerBIOutputDataSourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PowerBIOutputDataSourceProperties deserializedPowerBIOutputDataSourceProperties
                = new PowerBIOutputDataSourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("refreshToken".equals(fieldName)) {
                    deserializedPowerBIOutputDataSourceProperties.withRefreshToken(reader.getString());
                } else if ("tokenUserPrincipalName".equals(fieldName)) {
                    deserializedPowerBIOutputDataSourceProperties.withTokenUserPrincipalName(reader.getString());
                } else if ("tokenUserDisplayName".equals(fieldName)) {
                    deserializedPowerBIOutputDataSourceProperties.withTokenUserDisplayName(reader.getString());
                } else if ("dataset".equals(fieldName)) {
                    deserializedPowerBIOutputDataSourceProperties.dataset = reader.getString();
                } else if ("table".equals(fieldName)) {
                    deserializedPowerBIOutputDataSourceProperties.table = reader.getString();
                } else if ("groupId".equals(fieldName)) {
                    deserializedPowerBIOutputDataSourceProperties.groupId = reader.getString();
                } else if ("groupName".equals(fieldName)) {
                    deserializedPowerBIOutputDataSourceProperties.groupName = reader.getString();
                } else if ("authenticationMode".equals(fieldName)) {
                    deserializedPowerBIOutputDataSourceProperties.authenticationMode
                        = AuthenticationMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPowerBIOutputDataSourceProperties;
        });
    }
}
