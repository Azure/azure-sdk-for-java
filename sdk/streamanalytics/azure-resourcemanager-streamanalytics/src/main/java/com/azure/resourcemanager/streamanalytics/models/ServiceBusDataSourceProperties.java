// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The common properties that are associated with Service Bus data sources (Queues, Topics, Event Hubs, etc.).
 */
@Fluent
public class ServiceBusDataSourceProperties implements JsonSerializable<ServiceBusDataSourceProperties> {
    /*
     * The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required
     * on PUT (CreateOrReplace) requests.
     */
    private String serviceBusNamespace;

    /*
     * The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT
     * (CreateOrReplace) requests.
     */
    private String sharedAccessPolicyName;

    /*
     * The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
     */
    private String sharedAccessPolicyKey;

    /*
     * Authentication Mode.
     */
    private AuthenticationMode authenticationMode;

    /**
     * Creates an instance of ServiceBusDataSourceProperties class.
     */
    public ServiceBusDataSourceProperties() {
    }

    /**
     * Get the serviceBusNamespace property: The namespace that is associated with the desired Event Hub, Service Bus
     * Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
     * 
     * @return the serviceBusNamespace value.
     */
    public String serviceBusNamespace() {
        return this.serviceBusNamespace;
    }

    /**
     * Set the serviceBusNamespace property: The namespace that is associated with the desired Event Hub, Service Bus
     * Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
     * 
     * @param serviceBusNamespace the serviceBusNamespace value to set.
     * @return the ServiceBusDataSourceProperties object itself.
     */
    public ServiceBusDataSourceProperties withServiceBusNamespace(String serviceBusNamespace) {
        this.serviceBusNamespace = serviceBusNamespace;
        return this;
    }

    /**
     * Get the sharedAccessPolicyName property: The shared access policy name for the Event Hub, Service Bus Queue,
     * Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
     * 
     * @return the sharedAccessPolicyName value.
     */
    public String sharedAccessPolicyName() {
        return this.sharedAccessPolicyName;
    }

    /**
     * Set the sharedAccessPolicyName property: The shared access policy name for the Event Hub, Service Bus Queue,
     * Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
     * 
     * @param sharedAccessPolicyName the sharedAccessPolicyName value to set.
     * @return the ServiceBusDataSourceProperties object itself.
     */
    public ServiceBusDataSourceProperties withSharedAccessPolicyName(String sharedAccessPolicyName) {
        this.sharedAccessPolicyName = sharedAccessPolicyName;
        return this;
    }

    /**
     * Get the sharedAccessPolicyKey property: The shared access policy key for the specified shared access policy.
     * Required on PUT (CreateOrReplace) requests.
     * 
     * @return the sharedAccessPolicyKey value.
     */
    public String sharedAccessPolicyKey() {
        return this.sharedAccessPolicyKey;
    }

    /**
     * Set the sharedAccessPolicyKey property: The shared access policy key for the specified shared access policy.
     * Required on PUT (CreateOrReplace) requests.
     * 
     * @param sharedAccessPolicyKey the sharedAccessPolicyKey value to set.
     * @return the ServiceBusDataSourceProperties object itself.
     */
    public ServiceBusDataSourceProperties withSharedAccessPolicyKey(String sharedAccessPolicyKey) {
        this.sharedAccessPolicyKey = sharedAccessPolicyKey;
        return this;
    }

    /**
     * Get the authenticationMode property: Authentication Mode.
     * 
     * @return the authenticationMode value.
     */
    public AuthenticationMode authenticationMode() {
        return this.authenticationMode;
    }

    /**
     * Set the authenticationMode property: Authentication Mode.
     * 
     * @param authenticationMode the authenticationMode value to set.
     * @return the ServiceBusDataSourceProperties object itself.
     */
    public ServiceBusDataSourceProperties withAuthenticationMode(AuthenticationMode authenticationMode) {
        this.authenticationMode = authenticationMode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serviceBusNamespace", this.serviceBusNamespace);
        jsonWriter.writeStringField("sharedAccessPolicyName", this.sharedAccessPolicyName);
        jsonWriter.writeStringField("sharedAccessPolicyKey", this.sharedAccessPolicyKey);
        jsonWriter.writeStringField("authenticationMode",
            this.authenticationMode == null ? null : this.authenticationMode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceBusDataSourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceBusDataSourceProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceBusDataSourceProperties.
     */
    public static ServiceBusDataSourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceBusDataSourceProperties deserializedServiceBusDataSourceProperties
                = new ServiceBusDataSourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceBusNamespace".equals(fieldName)) {
                    deserializedServiceBusDataSourceProperties.serviceBusNamespace = reader.getString();
                } else if ("sharedAccessPolicyName".equals(fieldName)) {
                    deserializedServiceBusDataSourceProperties.sharedAccessPolicyName = reader.getString();
                } else if ("sharedAccessPolicyKey".equals(fieldName)) {
                    deserializedServiceBusDataSourceProperties.sharedAccessPolicyKey = reader.getString();
                } else if ("authenticationMode".equals(fieldName)) {
                    deserializedServiceBusDataSourceProperties.authenticationMode
                        = AuthenticationMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceBusDataSourceProperties;
        });
    }
}
