// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties that are associated with a blob data source.
 */
@Fluent
public class BlobDataSourceProperties implements JsonSerializable<BlobDataSourceProperties> {
    /*
     * A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
     */
    private List<StorageAccount> storageAccounts;

    /*
     * The name of a container within the associated Storage account. This container contains either the blob(s) to be
     * read from or written to. Required on PUT (CreateOrReplace) requests.
     */
    private String container;

    /*
     * The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched
     * to determine whether or not they should be included as input or output to the job. See
     * https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
     * https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation
     * and example.
     */
    private String pathPattern;

    /*
     * The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format
     * instead.
     */
    private String dateFormat;

    /*
     * The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format
     * instead.
     */
    private String timeFormat;

    /*
     * Authentication Mode.
     */
    private AuthenticationMode authenticationMode;

    /**
     * Creates an instance of BlobDataSourceProperties class.
     */
    public BlobDataSourceProperties() {
    }

    /**
     * Get the storageAccounts property: A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace)
     * requests.
     * 
     * @return the storageAccounts value.
     */
    public List<StorageAccount> storageAccounts() {
        return this.storageAccounts;
    }

    /**
     * Set the storageAccounts property: A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace)
     * requests.
     * 
     * @param storageAccounts the storageAccounts value to set.
     * @return the BlobDataSourceProperties object itself.
     */
    public BlobDataSourceProperties withStorageAccounts(List<StorageAccount> storageAccounts) {
        this.storageAccounts = storageAccounts;
        return this;
    }

    /**
     * Get the container property: The name of a container within the associated Storage account. This container
     * contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
     * 
     * @return the container value.
     */
    public String container() {
        return this.container;
    }

    /**
     * Set the container property: The name of a container within the associated Storage account. This container
     * contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
     * 
     * @param container the container value to set.
     * @return the BlobDataSourceProperties object itself.
     */
    public BlobDataSourceProperties withContainer(String container) {
        this.container = container;
        return this;
    }

    /**
     * Get the pathPattern property: The blob path pattern. Not a regular expression. It represents a pattern against
     * which blob names will be matched to determine whether or not they should be included as input or output to the
     * job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
     * https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation
     * and example.
     * 
     * @return the pathPattern value.
     */
    public String pathPattern() {
        return this.pathPattern;
    }

    /**
     * Set the pathPattern property: The blob path pattern. Not a regular expression. It represents a pattern against
     * which blob names will be matched to determine whether or not they should be included as input or output to the
     * job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
     * https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation
     * and example.
     * 
     * @param pathPattern the pathPattern value to set.
     * @return the BlobDataSourceProperties object itself.
     */
    public BlobDataSourceProperties withPathPattern(String pathPattern) {
        this.pathPattern = pathPattern;
        return this;
    }

    /**
     * Get the dateFormat property: The date format. Wherever {date} appears in pathPattern, the value of this property
     * is used as the date format instead.
     * 
     * @return the dateFormat value.
     */
    public String dateFormat() {
        return this.dateFormat;
    }

    /**
     * Set the dateFormat property: The date format. Wherever {date} appears in pathPattern, the value of this property
     * is used as the date format instead.
     * 
     * @param dateFormat the dateFormat value to set.
     * @return the BlobDataSourceProperties object itself.
     */
    public BlobDataSourceProperties withDateFormat(String dateFormat) {
        this.dateFormat = dateFormat;
        return this;
    }

    /**
     * Get the timeFormat property: The time format. Wherever {time} appears in pathPattern, the value of this property
     * is used as the time format instead.
     * 
     * @return the timeFormat value.
     */
    public String timeFormat() {
        return this.timeFormat;
    }

    /**
     * Set the timeFormat property: The time format. Wherever {time} appears in pathPattern, the value of this property
     * is used as the time format instead.
     * 
     * @param timeFormat the timeFormat value to set.
     * @return the BlobDataSourceProperties object itself.
     */
    public BlobDataSourceProperties withTimeFormat(String timeFormat) {
        this.timeFormat = timeFormat;
        return this;
    }

    /**
     * Get the authenticationMode property: Authentication Mode.
     * 
     * @return the authenticationMode value.
     */
    public AuthenticationMode authenticationMode() {
        return this.authenticationMode;
    }

    /**
     * Set the authenticationMode property: Authentication Mode.
     * 
     * @param authenticationMode the authenticationMode value to set.
     * @return the BlobDataSourceProperties object itself.
     */
    public BlobDataSourceProperties withAuthenticationMode(AuthenticationMode authenticationMode) {
        this.authenticationMode = authenticationMode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (storageAccounts() != null) {
            storageAccounts().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("storageAccounts", this.storageAccounts,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("container", this.container);
        jsonWriter.writeStringField("pathPattern", this.pathPattern);
        jsonWriter.writeStringField("dateFormat", this.dateFormat);
        jsonWriter.writeStringField("timeFormat", this.timeFormat);
        jsonWriter.writeStringField("authenticationMode",
            this.authenticationMode == null ? null : this.authenticationMode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BlobDataSourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BlobDataSourceProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BlobDataSourceProperties.
     */
    public static BlobDataSourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BlobDataSourceProperties deserializedBlobDataSourceProperties = new BlobDataSourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageAccounts".equals(fieldName)) {
                    List<StorageAccount> storageAccounts
                        = reader.readArray(reader1 -> StorageAccount.fromJson(reader1));
                    deserializedBlobDataSourceProperties.storageAccounts = storageAccounts;
                } else if ("container".equals(fieldName)) {
                    deserializedBlobDataSourceProperties.container = reader.getString();
                } else if ("pathPattern".equals(fieldName)) {
                    deserializedBlobDataSourceProperties.pathPattern = reader.getString();
                } else if ("dateFormat".equals(fieldName)) {
                    deserializedBlobDataSourceProperties.dateFormat = reader.getString();
                } else if ("timeFormat".equals(fieldName)) {
                    deserializedBlobDataSourceProperties.timeFormat = reader.getString();
                } else if ("authenticationMode".equals(fieldName)) {
                    deserializedBlobDataSourceProperties.authenticationMode
                        = AuthenticationMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBlobDataSourceProperties;
        });
    }
}
