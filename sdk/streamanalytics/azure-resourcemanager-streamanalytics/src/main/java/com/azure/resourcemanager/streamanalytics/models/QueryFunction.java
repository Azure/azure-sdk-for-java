// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A function for the query compilation.
 */
@Fluent
public final class QueryFunction implements JsonSerializable<QueryFunction> {
    /*
     * The name of the function.
     */
    private String name;

    /*
     * The type of the function.
     */
    private String type;

    /*
     * The type of the function binding.
     */
    private String bindingType;

    /*
     * The inputs for the function.
     */
    private List<FunctionInput> inputs;

    /*
     * An output for the function.
     */
    private FunctionOutput output;

    /**
     * Creates an instance of QueryFunction class.
     */
    public QueryFunction() {
    }

    /**
     * Get the name property: The name of the function.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the function.
     * 
     * @param name the name value to set.
     * @return the QueryFunction object itself.
     */
    public QueryFunction withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: The type of the function.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: The type of the function.
     * 
     * @param type the type value to set.
     * @return the QueryFunction object itself.
     */
    public QueryFunction withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the bindingType property: The type of the function binding.
     * 
     * @return the bindingType value.
     */
    public String bindingType() {
        return this.bindingType;
    }

    /**
     * Set the bindingType property: The type of the function binding.
     * 
     * @param bindingType the bindingType value to set.
     * @return the QueryFunction object itself.
     */
    public QueryFunction withBindingType(String bindingType) {
        this.bindingType = bindingType;
        return this;
    }

    /**
     * Get the inputs property: The inputs for the function.
     * 
     * @return the inputs value.
     */
    public List<FunctionInput> inputs() {
        return this.inputs;
    }

    /**
     * Set the inputs property: The inputs for the function.
     * 
     * @param inputs the inputs value to set.
     * @return the QueryFunction object itself.
     */
    public QueryFunction withInputs(List<FunctionInput> inputs) {
        this.inputs = inputs;
        return this;
    }

    /**
     * Get the output property: An output for the function.
     * 
     * @return the output value.
     */
    public FunctionOutput output() {
        return this.output;
    }

    /**
     * Set the output property: An output for the function.
     * 
     * @param output the output value to set.
     * @return the QueryFunction object itself.
     */
    public QueryFunction withOutput(FunctionOutput output) {
        this.output = output;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model QueryFunction"));
        }
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model QueryFunction"));
        }
        if (bindingType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property bindingType in model QueryFunction"));
        }
        if (inputs() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property inputs in model QueryFunction"));
        } else {
            inputs().forEach(e -> e.validate());
        }
        if (output() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property output in model QueryFunction"));
        } else {
            output().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(QueryFunction.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("bindingType", this.bindingType);
        jsonWriter.writeArrayField("inputs", this.inputs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("output", this.output);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueryFunction from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueryFunction if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the QueryFunction.
     */
    public static QueryFunction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueryFunction deserializedQueryFunction = new QueryFunction();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedQueryFunction.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedQueryFunction.type = reader.getString();
                } else if ("bindingType".equals(fieldName)) {
                    deserializedQueryFunction.bindingType = reader.getString();
                } else if ("inputs".equals(fieldName)) {
                    List<FunctionInput> inputs = reader.readArray(reader1 -> FunctionInput.fromJson(reader1));
                    deserializedQueryFunction.inputs = inputs;
                } else if ("output".equals(fieldName)) {
                    deserializedQueryFunction.output = FunctionOutput.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQueryFunction;
        });
    }
}
