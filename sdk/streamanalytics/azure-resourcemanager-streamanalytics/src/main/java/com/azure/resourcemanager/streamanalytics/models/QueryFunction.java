// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * A function for the query compilation.
 */
@Fluent
public final class QueryFunction {
    /*
     * The name of the function.
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /*
     * The type of the function.
     */
    @JsonProperty(value = "type", required = true)
    private String type;

    /*
     * The type of the function binding.
     */
    @JsonProperty(value = "bindingType", required = true)
    private String bindingType;

    /*
     * The inputs for the function.
     */
    @JsonProperty(value = "inputs", required = true)
    private List<FunctionInput> inputs;

    /*
     * An output for the function.
     */
    @JsonProperty(value = "output", required = true)
    private FunctionOutput output;

    /**
     * Creates an instance of QueryFunction class.
     */
    public QueryFunction() {
    }

    /**
     * Get the name property: The name of the function.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the function.
     * 
     * @param name the name value to set.
     * @return the QueryFunction object itself.
     */
    public QueryFunction withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: The type of the function.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: The type of the function.
     * 
     * @param type the type value to set.
     * @return the QueryFunction object itself.
     */
    public QueryFunction withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the bindingType property: The type of the function binding.
     * 
     * @return the bindingType value.
     */
    public String bindingType() {
        return this.bindingType;
    }

    /**
     * Set the bindingType property: The type of the function binding.
     * 
     * @param bindingType the bindingType value to set.
     * @return the QueryFunction object itself.
     */
    public QueryFunction withBindingType(String bindingType) {
        this.bindingType = bindingType;
        return this;
    }

    /**
     * Get the inputs property: The inputs for the function.
     * 
     * @return the inputs value.
     */
    public List<FunctionInput> inputs() {
        return this.inputs;
    }

    /**
     * Set the inputs property: The inputs for the function.
     * 
     * @param inputs the inputs value to set.
     * @return the QueryFunction object itself.
     */
    public QueryFunction withInputs(List<FunctionInput> inputs) {
        this.inputs = inputs;
        return this;
    }

    /**
     * Get the output property: An output for the function.
     * 
     * @return the output value.
     */
    public FunctionOutput output() {
        return this.output;
    }

    /**
     * Set the output property: An output for the function.
     * 
     * @param output the output value to set.
     * @return the QueryFunction object itself.
     */
    public QueryFunction withOutput(FunctionOutput output) {
        this.output = output;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property name in model QueryFunction"));
        }
        if (type() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property type in model QueryFunction"));
        }
        if (bindingType() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property bindingType in model QueryFunction"));
        }
        if (inputs() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property inputs in model QueryFunction"));
        } else {
            inputs().forEach(e -> e.validate());
        }
        if (output() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property output in model QueryFunction"));
        } else {
            output().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(QueryFunction.class);
}
