// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties that are associated with a raw output.
 */
@Fluent
public final class RawOutputDatasourceProperties implements JsonSerializable<RawOutputDatasourceProperties> {
    /*
     * The SAS URL to a blob where the output should be written. If this property is not set, output data will be
     * written into a temporary storage, and a SAS URL to that temporary storage will be included in the result.
     */
    private String payloadUri;

    /**
     * Creates an instance of RawOutputDatasourceProperties class.
     */
    public RawOutputDatasourceProperties() {
    }

    /**
     * Get the payloadUri property: The SAS URL to a blob where the output should be written. If this property is not
     * set, output data will be written into a temporary storage, and a SAS URL to that temporary storage will be
     * included in the result.
     * 
     * @return the payloadUri value.
     */
    public String payloadUri() {
        return this.payloadUri;
    }

    /**
     * Set the payloadUri property: The SAS URL to a blob where the output should be written. If this property is not
     * set, output data will be written into a temporary storage, and a SAS URL to that temporary storage will be
     * included in the result.
     * 
     * @param payloadUri the payloadUri value to set.
     * @return the RawOutputDatasourceProperties object itself.
     */
    public RawOutputDatasourceProperties withPayloadUri(String payloadUri) {
        this.payloadUri = payloadUri;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("payloadUri", this.payloadUri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RawOutputDatasourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RawOutputDatasourceProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RawOutputDatasourceProperties.
     */
    public static RawOutputDatasourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RawOutputDatasourceProperties deserializedRawOutputDatasourceProperties
                = new RawOutputDatasourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("payloadUri".equals(fieldName)) {
                    deserializedRawOutputDatasourceProperties.payloadUri = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRawOutputDatasourceProperties;
        });
    }
}
