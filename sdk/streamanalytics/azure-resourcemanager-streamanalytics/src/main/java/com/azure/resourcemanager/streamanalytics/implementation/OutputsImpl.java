// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.streamanalytics.fluent.OutputsClient;
import com.azure.resourcemanager.streamanalytics.fluent.models.OutputInner;
import com.azure.resourcemanager.streamanalytics.fluent.models.ResourceTestStatusInner;
import com.azure.resourcemanager.streamanalytics.models.Output;
import com.azure.resourcemanager.streamanalytics.models.Outputs;
import com.azure.resourcemanager.streamanalytics.models.OutputsGetResponse;
import com.azure.resourcemanager.streamanalytics.models.ResourceTestStatus;

public final class OutputsImpl implements Outputs {
    private static final ClientLogger LOGGER = new ClientLogger(OutputsImpl.class);

    private final OutputsClient innerClient;

    private final com.azure.resourcemanager.streamanalytics.StreamAnalyticsManager serviceManager;

    public OutputsImpl(OutputsClient innerClient,
        com.azure.resourcemanager.streamanalytics.StreamAnalyticsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String jobName, String outputName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, jobName, outputName, context);
    }

    public void delete(String resourceGroupName, String jobName, String outputName) {
        this.serviceClient().delete(resourceGroupName, jobName, outputName);
    }

    public Response<Output> getWithResponse(String resourceGroupName, String jobName, String outputName,
        Context context) {
        OutputsGetResponse inner
            = this.serviceClient().getWithResponse(resourceGroupName, jobName, outputName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new OutputImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Output get(String resourceGroupName, String jobName, String outputName) {
        OutputInner inner = this.serviceClient().get(resourceGroupName, jobName, outputName);
        if (inner != null) {
            return new OutputImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<Output> listByStreamingJob(String resourceGroupName, String jobName) {
        PagedIterable<OutputInner> inner = this.serviceClient().listByStreamingJob(resourceGroupName, jobName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new OutputImpl(inner1, this.manager()));
    }

    public PagedIterable<Output> listByStreamingJob(String resourceGroupName, String jobName, String select,
        Context context) {
        PagedIterable<OutputInner> inner
            = this.serviceClient().listByStreamingJob(resourceGroupName, jobName, select, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new OutputImpl(inner1, this.manager()));
    }

    public ResourceTestStatus test(String resourceGroupName, String jobName, String outputName) {
        ResourceTestStatusInner inner = this.serviceClient().test(resourceGroupName, jobName, outputName);
        if (inner != null) {
            return new ResourceTestStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ResourceTestStatus test(String resourceGroupName, String jobName, String outputName, OutputInner output,
        Context context) {
        ResourceTestStatusInner inner
            = this.serviceClient().test(resourceGroupName, jobName, outputName, output, context);
        if (inner != null) {
            return new ResourceTestStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Output getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String jobName = ResourceManagerUtils.getValueFromIdByName(id, "streamingjobs");
        if (jobName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'streamingjobs'.", id)));
        }
        String outputName = ResourceManagerUtils.getValueFromIdByName(id, "outputs");
        if (outputName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'outputs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, jobName, outputName, Context.NONE).getValue();
    }

    public Response<Output> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String jobName = ResourceManagerUtils.getValueFromIdByName(id, "streamingjobs");
        if (jobName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'streamingjobs'.", id)));
        }
        String outputName = ResourceManagerUtils.getValueFromIdByName(id, "outputs");
        if (outputName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'outputs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, jobName, outputName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String jobName = ResourceManagerUtils.getValueFromIdByName(id, "streamingjobs");
        if (jobName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'streamingjobs'.", id)));
        }
        String outputName = ResourceManagerUtils.getValueFromIdByName(id, "outputs");
        if (outputName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'outputs'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, jobName, outputName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String jobName = ResourceManagerUtils.getValueFromIdByName(id, "streamingjobs");
        if (jobName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'streamingjobs'.", id)));
        }
        String outputName = ResourceManagerUtils.getValueFromIdByName(id, "outputs");
        if (outputName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'outputs'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, jobName, outputName, context);
    }

    private OutputsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.streamanalytics.StreamAnalyticsManager manager() {
        return this.serviceManager;
    }

    public OutputImpl define(String name) {
        return new OutputImpl(name, this.manager());
    }
}
