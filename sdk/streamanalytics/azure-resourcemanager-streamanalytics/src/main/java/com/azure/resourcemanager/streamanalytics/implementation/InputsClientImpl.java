// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.streamanalytics.fluent.InputsClient;
import com.azure.resourcemanager.streamanalytics.fluent.models.InputInner;
import com.azure.resourcemanager.streamanalytics.fluent.models.ResourceTestStatusInner;
import com.azure.resourcemanager.streamanalytics.models.InputListResult;
import com.azure.resourcemanager.streamanalytics.models.InputsCreateOrReplaceResponse;
import com.azure.resourcemanager.streamanalytics.models.InputsGetResponse;
import com.azure.resourcemanager.streamanalytics.models.InputsUpdateResponse;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in InputsClient. */
public final class InputsClientImpl implements InputsClient {
    private final ClientLogger logger = new ClientLogger(InputsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final InputsService service;

    /** The service client containing this operation class. */
    private final StreamAnalyticsManagementClientImpl client;

    /**
     * Initializes an instance of InputsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    InputsClientImpl(StreamAnalyticsManagementClientImpl client) {
        this.service = RestProxy.create(InputsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for StreamAnalyticsManagementClientInputs to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "StreamAnalyticsManag")
    private interface InputsService {
        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics"
                + "/streamingjobs/{jobName}/inputs/{inputName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<InputsCreateOrReplaceResponse> createOrReplace(
            @HostParam("$host") String endpoint,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("jobName") String jobName,
            @PathParam("inputName") String inputName,
            @BodyParam("application/json") InputInner input,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics"
                + "/streamingjobs/{jobName}/inputs/{inputName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<InputsUpdateResponse> update(
            @HostParam("$host") String endpoint,
            @HeaderParam("If-Match") String ifMatch,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("jobName") String jobName,
            @PathParam("inputName") String inputName,
            @BodyParam("application/json") InputInner input,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Accept: application/json;q=0.9", "Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics"
                + "/streamingjobs/{jobName}/inputs/{inputName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("jobName") String jobName,
            @PathParam("inputName") String inputName,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics"
                + "/streamingjobs/{jobName}/inputs/{inputName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<InputsGetResponse> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("jobName") String jobName,
            @PathParam("inputName") String inputName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics"
                + "/streamingjobs/{jobName}/inputs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InputListResult>> listByStreamingJob(
            @HostParam("$host") String endpoint,
            @QueryParam("$select") String select,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("jobName") String jobName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics"
                + "/streamingjobs/{jobName}/inputs/{inputName}/test")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> test(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("jobName") String jobName,
            @PathParam("inputName") String inputName,
            @BodyParam("application/json") InputInner input,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InputListResult>> listByStreamingJobNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Creates an input or replaces an already existing input under an existing streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input The definition of the input that will be used to create a new input or replace the existing one
     *     under the streaming job.
     * @param ifMatch The ETag of the input. Omit this value to always overwrite the current input. Specify the
     *     last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new input to be created, but to prevent updating an existing input.
     *     Other values will result in a 412 Pre-condition Failed response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an input object, containing all information associated with the named input.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InputsCreateOrReplaceResponse> createOrReplaceWithResponseAsync(
        String resourceGroupName,
        String jobName,
        String inputName,
        InputInner input,
        String ifMatch,
        String ifNoneMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (inputName == null) {
            return Mono.error(new IllegalArgumentException("Parameter inputName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String apiVersion = "2017-04-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrReplace(
                            this.client.getEndpoint(),
                            ifMatch,
                            ifNoneMatch,
                            apiVersion,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            jobName,
                            inputName,
                            input,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates an input or replaces an already existing input under an existing streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input The definition of the input that will be used to create a new input or replace the existing one
     *     under the streaming job.
     * @param ifMatch The ETag of the input. Omit this value to always overwrite the current input. Specify the
     *     last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new input to be created, but to prevent updating an existing input.
     *     Other values will result in a 412 Pre-condition Failed response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an input object, containing all information associated with the named input.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InputsCreateOrReplaceResponse> createOrReplaceWithResponseAsync(
        String resourceGroupName,
        String jobName,
        String inputName,
        InputInner input,
        String ifMatch,
        String ifNoneMatch,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (inputName == null) {
            return Mono.error(new IllegalArgumentException("Parameter inputName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String apiVersion = "2017-04-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrReplace(
                this.client.getEndpoint(),
                ifMatch,
                ifNoneMatch,
                apiVersion,
                this.client.getSubscriptionId(),
                resourceGroupName,
                jobName,
                inputName,
                input,
                accept,
                context);
    }

    /**
     * Creates an input or replaces an already existing input under an existing streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input The definition of the input that will be used to create a new input or replace the existing one
     *     under the streaming job.
     * @param ifMatch The ETag of the input. Omit this value to always overwrite the current input. Specify the
     *     last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new input to be created, but to prevent updating an existing input.
     *     Other values will result in a 412 Pre-condition Failed response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an input object, containing all information associated with the named input.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InputInner> createOrReplaceAsync(
        String resourceGroupName,
        String jobName,
        String inputName,
        InputInner input,
        String ifMatch,
        String ifNoneMatch) {
        return createOrReplaceWithResponseAsync(resourceGroupName, jobName, inputName, input, ifMatch, ifNoneMatch)
            .flatMap(
                (InputsCreateOrReplaceResponse res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Creates an input or replaces an already existing input under an existing streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input The definition of the input that will be used to create a new input or replace the existing one
     *     under the streaming job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an input object, containing all information associated with the named input.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InputInner> createOrReplaceAsync(
        String resourceGroupName, String jobName, String inputName, InputInner input) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return createOrReplaceWithResponseAsync(resourceGroupName, jobName, inputName, input, ifMatch, ifNoneMatch)
            .flatMap(
                (InputsCreateOrReplaceResponse res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Creates an input or replaces an already existing input under an existing streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input The definition of the input that will be used to create a new input or replace the existing one
     *     under the streaming job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an input object, containing all information associated with the named input.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputInner createOrReplace(String resourceGroupName, String jobName, String inputName, InputInner input) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return createOrReplaceAsync(resourceGroupName, jobName, inputName, input, ifMatch, ifNoneMatch).block();
    }

    /**
     * Creates an input or replaces an already existing input under an existing streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input The definition of the input that will be used to create a new input or replace the existing one
     *     under the streaming job.
     * @param ifMatch The ETag of the input. Omit this value to always overwrite the current input. Specify the
     *     last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new input to be created, but to prevent updating an existing input.
     *     Other values will result in a 412 Pre-condition Failed response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an input object, containing all information associated with the named input.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputsCreateOrReplaceResponse createOrReplaceWithResponse(
        String resourceGroupName,
        String jobName,
        String inputName,
        InputInner input,
        String ifMatch,
        String ifNoneMatch,
        Context context) {
        return createOrReplaceWithResponseAsync(
                resourceGroupName, jobName, inputName, input, ifMatch, ifNoneMatch, context)
            .block();
    }

    /**
     * Updates an existing input under an existing streaming job. This can be used to partially update (ie. update one
     * or two properties) an input without affecting the rest the job or input definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input An Input object. The properties specified here will overwrite the corresponding properties in the
     *     existing input (ie. Those properties will be updated). Any properties that are set to null here will mean
     *     that the corresponding property in the existing input will remain the same and not change as a result of this
     *     PATCH operation.
     * @param ifMatch The ETag of the input. Omit this value to always overwrite the current input. Specify the
     *     last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an input object, containing all information associated with the named input.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InputsUpdateResponse> updateWithResponseAsync(
        String resourceGroupName, String jobName, String inputName, InputInner input, String ifMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (inputName == null) {
            return Mono.error(new IllegalArgumentException("Parameter inputName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String apiVersion = "2017-04-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            ifMatch,
                            apiVersion,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            jobName,
                            inputName,
                            input,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates an existing input under an existing streaming job. This can be used to partially update (ie. update one
     * or two properties) an input without affecting the rest the job or input definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input An Input object. The properties specified here will overwrite the corresponding properties in the
     *     existing input (ie. Those properties will be updated). Any properties that are set to null here will mean
     *     that the corresponding property in the existing input will remain the same and not change as a result of this
     *     PATCH operation.
     * @param ifMatch The ETag of the input. Omit this value to always overwrite the current input. Specify the
     *     last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an input object, containing all information associated with the named input.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InputsUpdateResponse> updateWithResponseAsync(
        String resourceGroupName, String jobName, String inputName, InputInner input, String ifMatch, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (inputName == null) {
            return Mono.error(new IllegalArgumentException("Parameter inputName is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        } else {
            input.validate();
        }
        final String apiVersion = "2017-04-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                ifMatch,
                apiVersion,
                this.client.getSubscriptionId(),
                resourceGroupName,
                jobName,
                inputName,
                input,
                accept,
                context);
    }

    /**
     * Updates an existing input under an existing streaming job. This can be used to partially update (ie. update one
     * or two properties) an input without affecting the rest the job or input definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input An Input object. The properties specified here will overwrite the corresponding properties in the
     *     existing input (ie. Those properties will be updated). Any properties that are set to null here will mean
     *     that the corresponding property in the existing input will remain the same and not change as a result of this
     *     PATCH operation.
     * @param ifMatch The ETag of the input. Omit this value to always overwrite the current input. Specify the
     *     last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an input object, containing all information associated with the named input.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InputInner> updateAsync(
        String resourceGroupName, String jobName, String inputName, InputInner input, String ifMatch) {
        return updateWithResponseAsync(resourceGroupName, jobName, inputName, input, ifMatch)
            .flatMap(
                (InputsUpdateResponse res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates an existing input under an existing streaming job. This can be used to partially update (ie. update one
     * or two properties) an input without affecting the rest the job or input definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input An Input object. The properties specified here will overwrite the corresponding properties in the
     *     existing input (ie. Those properties will be updated). Any properties that are set to null here will mean
     *     that the corresponding property in the existing input will remain the same and not change as a result of this
     *     PATCH operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an input object, containing all information associated with the named input.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InputInner> updateAsync(String resourceGroupName, String jobName, String inputName, InputInner input) {
        final String ifMatch = null;
        return updateWithResponseAsync(resourceGroupName, jobName, inputName, input, ifMatch)
            .flatMap(
                (InputsUpdateResponse res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates an existing input under an existing streaming job. This can be used to partially update (ie. update one
     * or two properties) an input without affecting the rest the job or input definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input An Input object. The properties specified here will overwrite the corresponding properties in the
     *     existing input (ie. Those properties will be updated). Any properties that are set to null here will mean
     *     that the corresponding property in the existing input will remain the same and not change as a result of this
     *     PATCH operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an input object, containing all information associated with the named input.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputInner update(String resourceGroupName, String jobName, String inputName, InputInner input) {
        final String ifMatch = null;
        return updateAsync(resourceGroupName, jobName, inputName, input, ifMatch).block();
    }

    /**
     * Updates an existing input under an existing streaming job. This can be used to partially update (ie. update one
     * or two properties) an input without affecting the rest the job or input definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input An Input object. The properties specified here will overwrite the corresponding properties in the
     *     existing input (ie. Those properties will be updated). Any properties that are set to null here will mean
     *     that the corresponding property in the existing input will remain the same and not change as a result of this
     *     PATCH operation.
     * @param ifMatch The ETag of the input. Omit this value to always overwrite the current input. Specify the
     *     last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an input object, containing all information associated with the named input.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputsUpdateResponse updateWithResponse(
        String resourceGroupName, String jobName, String inputName, InputInner input, String ifMatch, Context context) {
        return updateWithResponseAsync(resourceGroupName, jobName, inputName, input, ifMatch, context).block();
    }

    /**
     * Deletes an input from the streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String jobName, String inputName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (inputName == null) {
            return Mono.error(new IllegalArgumentException("Parameter inputName is required and cannot be null."));
        }
        final String apiVersion = "2017-04-01-preview";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            apiVersion,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            jobName,
                            inputName,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes an input from the streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String jobName, String inputName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (inputName == null) {
            return Mono.error(new IllegalArgumentException("Parameter inputName is required and cannot be null."));
        }
        final String apiVersion = "2017-04-01-preview";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                apiVersion,
                this.client.getSubscriptionId(),
                resourceGroupName,
                jobName,
                inputName,
                context);
    }

    /**
     * Deletes an input from the streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String jobName, String inputName) {
        return deleteWithResponseAsync(resourceGroupName, jobName, inputName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes an input from the streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String jobName, String inputName) {
        deleteAsync(resourceGroupName, jobName, inputName).block();
    }

    /**
     * Deletes an input from the streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
        String resourceGroupName, String jobName, String inputName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, jobName, inputName, context).block();
    }

    /**
     * Gets details about the specified input.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about the specified input.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InputsGetResponse> getWithResponseAsync(String resourceGroupName, String jobName, String inputName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (inputName == null) {
            return Mono.error(new IllegalArgumentException("Parameter inputName is required and cannot be null."));
        }
        final String apiVersion = "2017-04-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            apiVersion,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            jobName,
                            inputName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets details about the specified input.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about the specified input.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InputsGetResponse> getWithResponseAsync(
        String resourceGroupName, String jobName, String inputName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (inputName == null) {
            return Mono.error(new IllegalArgumentException("Parameter inputName is required and cannot be null."));
        }
        final String apiVersion = "2017-04-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                apiVersion,
                this.client.getSubscriptionId(),
                resourceGroupName,
                jobName,
                inputName,
                accept,
                context);
    }

    /**
     * Gets details about the specified input.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about the specified input.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InputInner> getAsync(String resourceGroupName, String jobName, String inputName) {
        return getWithResponseAsync(resourceGroupName, jobName, inputName)
            .flatMap(
                (InputsGetResponse res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets details about the specified input.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about the specified input.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputInner get(String resourceGroupName, String jobName, String inputName) {
        return getAsync(resourceGroupName, jobName, inputName).block();
    }

    /**
     * Gets details about the specified input.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about the specified input.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputsGetResponse getWithResponse(
        String resourceGroupName, String jobName, String inputName, Context context) {
        return getWithResponseAsync(resourceGroupName, jobName, inputName, context).block();
    }

    /**
     * Lists all of the inputs under the specified streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param select The $select OData query parameter. This is a comma-separated list of structural properties to
     *     include in the response, or "*" to include all properties. By default, all properties are returned except
     *     diagnostics. Currently only accepts '*' as a valid value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object containing a list of inputs under a streaming job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InputInner>> listByStreamingJobSinglePageAsync(
        String resourceGroupName, String jobName, String select) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        final String apiVersion = "2017-04-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByStreamingJob(
                            this.client.getEndpoint(),
                            select,
                            apiVersion,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            jobName,
                            accept,
                            context))
            .<PagedResponse<InputInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists all of the inputs under the specified streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param select The $select OData query parameter. This is a comma-separated list of structural properties to
     *     include in the response, or "*" to include all properties. By default, all properties are returned except
     *     diagnostics. Currently only accepts '*' as a valid value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object containing a list of inputs under a streaming job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InputInner>> listByStreamingJobSinglePageAsync(
        String resourceGroupName, String jobName, String select, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        final String apiVersion = "2017-04-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByStreamingJob(
                this.client.getEndpoint(),
                select,
                apiVersion,
                this.client.getSubscriptionId(),
                resourceGroupName,
                jobName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists all of the inputs under the specified streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param select The $select OData query parameter. This is a comma-separated list of structural properties to
     *     include in the response, or "*" to include all properties. By default, all properties are returned except
     *     diagnostics. Currently only accepts '*' as a valid value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object containing a list of inputs under a streaming job.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<InputInner> listByStreamingJobAsync(String resourceGroupName, String jobName, String select) {
        return new PagedFlux<>(
            () -> listByStreamingJobSinglePageAsync(resourceGroupName, jobName, select),
            nextLink -> listByStreamingJobNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all of the inputs under the specified streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object containing a list of inputs under a streaming job.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<InputInner> listByStreamingJobAsync(String resourceGroupName, String jobName) {
        final String select = null;
        return new PagedFlux<>(
            () -> listByStreamingJobSinglePageAsync(resourceGroupName, jobName, select),
            nextLink -> listByStreamingJobNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all of the inputs under the specified streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param select The $select OData query parameter. This is a comma-separated list of structural properties to
     *     include in the response, or "*" to include all properties. By default, all properties are returned except
     *     diagnostics. Currently only accepts '*' as a valid value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object containing a list of inputs under a streaming job.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<InputInner> listByStreamingJobAsync(
        String resourceGroupName, String jobName, String select, Context context) {
        return new PagedFlux<>(
            () -> listByStreamingJobSinglePageAsync(resourceGroupName, jobName, select, context),
            nextLink -> listByStreamingJobNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all of the inputs under the specified streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object containing a list of inputs under a streaming job.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<InputInner> listByStreamingJob(String resourceGroupName, String jobName) {
        final String select = null;
        return new PagedIterable<>(listByStreamingJobAsync(resourceGroupName, jobName, select));
    }

    /**
     * Lists all of the inputs under the specified streaming job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param select The $select OData query parameter. This is a comma-separated list of structural properties to
     *     include in the response, or "*" to include all properties. By default, all properties are returned except
     *     diagnostics. Currently only accepts '*' as a valid value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object containing a list of inputs under a streaming job.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<InputInner> listByStreamingJob(
        String resourceGroupName, String jobName, String select, Context context) {
        return new PagedIterable<>(listByStreamingJobAsync(resourceGroupName, jobName, select, context));
    }

    /**
     * Tests whether an input’s datasource is reachable and usable by the Azure Stream Analytics service.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input If the input specified does not already exist, this parameter must contain the full input definition
     *     intended to be tested. If the input specified already exists, this parameter can be left null to test the
     *     existing input as is or if specified, the properties specified will overwrite the corresponding properties in
     *     the existing input (exactly like a PATCH operation) and the resulting input will be tested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the status of the test operation along with error information, if applicable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> testWithResponseAsync(
        String resourceGroupName, String jobName, String inputName, InputInner input) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (inputName == null) {
            return Mono.error(new IllegalArgumentException("Parameter inputName is required and cannot be null."));
        }
        if (input != null) {
            input.validate();
        }
        final String apiVersion = "2017-04-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .test(
                            this.client.getEndpoint(),
                            apiVersion,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            jobName,
                            inputName,
                            input,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Tests whether an input’s datasource is reachable and usable by the Azure Stream Analytics service.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input If the input specified does not already exist, this parameter must contain the full input definition
     *     intended to be tested. If the input specified already exists, this parameter can be left null to test the
     *     existing input as is or if specified, the properties specified will overwrite the corresponding properties in
     *     the existing input (exactly like a PATCH operation) and the resulting input will be tested.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the status of the test operation along with error information, if applicable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> testWithResponseAsync(
        String resourceGroupName, String jobName, String inputName, InputInner input, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (inputName == null) {
            return Mono.error(new IllegalArgumentException("Parameter inputName is required and cannot be null."));
        }
        if (input != null) {
            input.validate();
        }
        final String apiVersion = "2017-04-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .test(
                this.client.getEndpoint(),
                apiVersion,
                this.client.getSubscriptionId(),
                resourceGroupName,
                jobName,
                inputName,
                input,
                accept,
                context);
    }

    /**
     * Tests whether an input’s datasource is reachable and usable by the Azure Stream Analytics service.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input If the input specified does not already exist, this parameter must contain the full input definition
     *     intended to be tested. If the input specified already exists, this parameter can be left null to test the
     *     existing input as is or if specified, the properties specified will overwrite the corresponding properties in
     *     the existing input (exactly like a PATCH operation) and the resulting input will be tested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the status of the test operation along with error information, if applicable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<ResourceTestStatusInner>, ResourceTestStatusInner> beginTestAsync(
        String resourceGroupName, String jobName, String inputName, InputInner input) {
        Mono<Response<Flux<ByteBuffer>>> mono = testWithResponseAsync(resourceGroupName, jobName, inputName, input);
        return this
            .client
            .<ResourceTestStatusInner, ResourceTestStatusInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                ResourceTestStatusInner.class,
                ResourceTestStatusInner.class,
                Context.NONE);
    }

    /**
     * Tests whether an input’s datasource is reachable and usable by the Azure Stream Analytics service.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input If the input specified does not already exist, this parameter must contain the full input definition
     *     intended to be tested. If the input specified already exists, this parameter can be left null to test the
     *     existing input as is or if specified, the properties specified will overwrite the corresponding properties in
     *     the existing input (exactly like a PATCH operation) and the resulting input will be tested.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the status of the test operation along with error information, if applicable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<ResourceTestStatusInner>, ResourceTestStatusInner> beginTestAsync(
        String resourceGroupName, String jobName, String inputName, InputInner input, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            testWithResponseAsync(resourceGroupName, jobName, inputName, input, context);
        return this
            .client
            .<ResourceTestStatusInner, ResourceTestStatusInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                ResourceTestStatusInner.class,
                ResourceTestStatusInner.class,
                context);
    }

    /**
     * Tests whether an input’s datasource is reachable and usable by the Azure Stream Analytics service.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input If the input specified does not already exist, this parameter must contain the full input definition
     *     intended to be tested. If the input specified already exists, this parameter can be left null to test the
     *     existing input as is or if specified, the properties specified will overwrite the corresponding properties in
     *     the existing input (exactly like a PATCH operation) and the resulting input will be tested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the status of the test operation along with error information, if applicable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<ResourceTestStatusInner>, ResourceTestStatusInner> beginTest(
        String resourceGroupName, String jobName, String inputName, InputInner input) {
        return beginTestAsync(resourceGroupName, jobName, inputName, input).getSyncPoller();
    }

    /**
     * Tests whether an input’s datasource is reachable and usable by the Azure Stream Analytics service.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input If the input specified does not already exist, this parameter must contain the full input definition
     *     intended to be tested. If the input specified already exists, this parameter can be left null to test the
     *     existing input as is or if specified, the properties specified will overwrite the corresponding properties in
     *     the existing input (exactly like a PATCH operation) and the resulting input will be tested.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the status of the test operation along with error information, if applicable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<ResourceTestStatusInner>, ResourceTestStatusInner> beginTest(
        String resourceGroupName, String jobName, String inputName, InputInner input, Context context) {
        return beginTestAsync(resourceGroupName, jobName, inputName, input, context).getSyncPoller();
    }

    /**
     * Tests whether an input’s datasource is reachable and usable by the Azure Stream Analytics service.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input If the input specified does not already exist, this parameter must contain the full input definition
     *     intended to be tested. If the input specified already exists, this parameter can be left null to test the
     *     existing input as is or if specified, the properties specified will overwrite the corresponding properties in
     *     the existing input (exactly like a PATCH operation) and the resulting input will be tested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the status of the test operation along with error information, if applicable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ResourceTestStatusInner> testAsync(
        String resourceGroupName, String jobName, String inputName, InputInner input) {
        return beginTestAsync(resourceGroupName, jobName, inputName, input)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Tests whether an input’s datasource is reachable and usable by the Azure Stream Analytics service.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the status of the test operation along with error information, if applicable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ResourceTestStatusInner> testAsync(String resourceGroupName, String jobName, String inputName) {
        final InputInner input = null;
        return beginTestAsync(resourceGroupName, jobName, inputName, input)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Tests whether an input’s datasource is reachable and usable by the Azure Stream Analytics service.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input If the input specified does not already exist, this parameter must contain the full input definition
     *     intended to be tested. If the input specified already exists, this parameter can be left null to test the
     *     existing input as is or if specified, the properties specified will overwrite the corresponding properties in
     *     the existing input (exactly like a PATCH operation) and the resulting input will be tested.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the status of the test operation along with error information, if applicable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ResourceTestStatusInner> testAsync(
        String resourceGroupName, String jobName, String inputName, InputInner input, Context context) {
        return beginTestAsync(resourceGroupName, jobName, inputName, input, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Tests whether an input’s datasource is reachable and usable by the Azure Stream Analytics service.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input If the input specified does not already exist, this parameter must contain the full input definition
     *     intended to be tested. If the input specified already exists, this parameter can be left null to test the
     *     existing input as is or if specified, the properties specified will overwrite the corresponding properties in
     *     the existing input (exactly like a PATCH operation) and the resulting input will be tested.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the status of the test operation along with error information, if applicable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResourceTestStatusInner test(String resourceGroupName, String jobName, String inputName, InputInner input) {
        return testAsync(resourceGroupName, jobName, inputName, input).block();
    }

    /**
     * Tests whether an input’s datasource is reachable and usable by the Azure Stream Analytics service.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the status of the test operation along with error information, if applicable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResourceTestStatusInner test(String resourceGroupName, String jobName, String inputName) {
        final InputInner input = null;
        return testAsync(resourceGroupName, jobName, inputName, input).block();
    }

    /**
     * Tests whether an input’s datasource is reachable and usable by the Azure Stream Analytics service.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName The name of the streaming job.
     * @param inputName The name of the input.
     * @param input If the input specified does not already exist, this parameter must contain the full input definition
     *     intended to be tested. If the input specified already exists, this parameter can be left null to test the
     *     existing input as is or if specified, the properties specified will overwrite the corresponding properties in
     *     the existing input (exactly like a PATCH operation) and the resulting input will be tested.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the status of the test operation along with error information, if applicable.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResourceTestStatusInner test(
        String resourceGroupName, String jobName, String inputName, InputInner input, Context context) {
        return testAsync(resourceGroupName, jobName, inputName, input, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object containing a list of inputs under a streaming job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InputInner>> listByStreamingJobNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByStreamingJobNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<InputInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object containing a list of inputs under a streaming job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InputInner>> listByStreamingJobNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByStreamingJobNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
