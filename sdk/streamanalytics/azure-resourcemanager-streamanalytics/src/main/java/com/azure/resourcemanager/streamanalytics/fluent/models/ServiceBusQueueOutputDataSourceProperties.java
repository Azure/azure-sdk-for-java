// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.models.AuthenticationMode;
import com.azure.resourcemanager.streamanalytics.models.ServiceBusDataSourceProperties;
import java.io.IOException;
import java.util.List;

/**
 * The properties that are associated with a Service Bus Queue output.
 */
@Fluent
public final class ServiceBusQueueOutputDataSourceProperties extends ServiceBusDataSourceProperties {
    /*
     * The name of the Service Bus Queue. Required on PUT (CreateOrReplace) requests.
     */
    private String queueName;

    /*
     * A string array of the names of output columns to be attached to Service Bus messages as custom properties.
     */
    private List<String> propertyColumns;

    /*
     * The system properties associated with the Service Bus Queue. The following system properties are supported:
     * ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive, PartitionKey, SessionId,
     * ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc.
     */
    private Object systemPropertyColumns;

    /**
     * Creates an instance of ServiceBusQueueOutputDataSourceProperties class.
     */
    public ServiceBusQueueOutputDataSourceProperties() {
    }

    /**
     * Get the queueName property: The name of the Service Bus Queue. Required on PUT (CreateOrReplace) requests.
     * 
     * @return the queueName value.
     */
    public String queueName() {
        return this.queueName;
    }

    /**
     * Set the queueName property: The name of the Service Bus Queue. Required on PUT (CreateOrReplace) requests.
     * 
     * @param queueName the queueName value to set.
     * @return the ServiceBusQueueOutputDataSourceProperties object itself.
     */
    public ServiceBusQueueOutputDataSourceProperties withQueueName(String queueName) {
        this.queueName = queueName;
        return this;
    }

    /**
     * Get the propertyColumns property: A string array of the names of output columns to be attached to Service Bus
     * messages as custom properties.
     * 
     * @return the propertyColumns value.
     */
    public List<String> propertyColumns() {
        return this.propertyColumns;
    }

    /**
     * Set the propertyColumns property: A string array of the names of output columns to be attached to Service Bus
     * messages as custom properties.
     * 
     * @param propertyColumns the propertyColumns value to set.
     * @return the ServiceBusQueueOutputDataSourceProperties object itself.
     */
    public ServiceBusQueueOutputDataSourceProperties withPropertyColumns(List<String> propertyColumns) {
        this.propertyColumns = propertyColumns;
        return this;
    }

    /**
     * Get the systemPropertyColumns property: The system properties associated with the Service Bus Queue. The
     * following system properties are supported: ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive,
     * PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc.
     * 
     * @return the systemPropertyColumns value.
     */
    public Object systemPropertyColumns() {
        return this.systemPropertyColumns;
    }

    /**
     * Set the systemPropertyColumns property: The system properties associated with the Service Bus Queue. The
     * following system properties are supported: ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive,
     * PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc.
     * 
     * @param systemPropertyColumns the systemPropertyColumns value to set.
     * @return the ServiceBusQueueOutputDataSourceProperties object itself.
     */
    public ServiceBusQueueOutputDataSourceProperties withSystemPropertyColumns(Object systemPropertyColumns) {
        this.systemPropertyColumns = systemPropertyColumns;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceBusQueueOutputDataSourceProperties withServiceBusNamespace(String serviceBusNamespace) {
        super.withServiceBusNamespace(serviceBusNamespace);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceBusQueueOutputDataSourceProperties withSharedAccessPolicyName(String sharedAccessPolicyName) {
        super.withSharedAccessPolicyName(sharedAccessPolicyName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceBusQueueOutputDataSourceProperties withSharedAccessPolicyKey(String sharedAccessPolicyKey) {
        super.withSharedAccessPolicyKey(sharedAccessPolicyKey);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceBusQueueOutputDataSourceProperties withAuthenticationMode(AuthenticationMode authenticationMode) {
        super.withAuthenticationMode(authenticationMode);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serviceBusNamespace", serviceBusNamespace());
        jsonWriter.writeStringField("sharedAccessPolicyName", sharedAccessPolicyName());
        jsonWriter.writeStringField("sharedAccessPolicyKey", sharedAccessPolicyKey());
        jsonWriter.writeStringField("authenticationMode",
            authenticationMode() == null ? null : authenticationMode().toString());
        jsonWriter.writeStringField("queueName", this.queueName);
        jsonWriter.writeArrayField("propertyColumns", this.propertyColumns,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeUntypedField("systemPropertyColumns", this.systemPropertyColumns);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceBusQueueOutputDataSourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceBusQueueOutputDataSourceProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceBusQueueOutputDataSourceProperties.
     */
    public static ServiceBusQueueOutputDataSourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceBusQueueOutputDataSourceProperties deserializedServiceBusQueueOutputDataSourceProperties
                = new ServiceBusQueueOutputDataSourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceBusNamespace".equals(fieldName)) {
                    deserializedServiceBusQueueOutputDataSourceProperties.withServiceBusNamespace(reader.getString());
                } else if ("sharedAccessPolicyName".equals(fieldName)) {
                    deserializedServiceBusQueueOutputDataSourceProperties
                        .withSharedAccessPolicyName(reader.getString());
                } else if ("sharedAccessPolicyKey".equals(fieldName)) {
                    deserializedServiceBusQueueOutputDataSourceProperties.withSharedAccessPolicyKey(reader.getString());
                } else if ("authenticationMode".equals(fieldName)) {
                    deserializedServiceBusQueueOutputDataSourceProperties
                        .withAuthenticationMode(AuthenticationMode.fromString(reader.getString()));
                } else if ("queueName".equals(fieldName)) {
                    deserializedServiceBusQueueOutputDataSourceProperties.queueName = reader.getString();
                } else if ("propertyColumns".equals(fieldName)) {
                    List<String> propertyColumns = reader.readArray(reader1 -> reader1.getString());
                    deserializedServiceBusQueueOutputDataSourceProperties.propertyColumns = propertyColumns;
                } else if ("systemPropertyColumns".equals(fieldName)) {
                    deserializedServiceBusQueueOutputDataSourceProperties.systemPropertyColumns = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceBusQueueOutputDataSourceProperties;
        });
    }
}
