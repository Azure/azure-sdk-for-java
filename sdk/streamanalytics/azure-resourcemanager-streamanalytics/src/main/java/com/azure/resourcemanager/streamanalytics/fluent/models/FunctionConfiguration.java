// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.models.FunctionBinding;
import com.azure.resourcemanager.streamanalytics.models.FunctionInput;
import com.azure.resourcemanager.streamanalytics.models.FunctionOutput;
import java.io.IOException;
import java.util.List;

/**
 * The FunctionConfiguration model.
 */
@Fluent
public final class FunctionConfiguration implements JsonSerializable<FunctionConfiguration> {
    /*
     * The inputs property.
     */
    private List<FunctionInput> inputs;

    /*
     * Describes the output of a function.
     */
    private FunctionOutput output;

    /*
     * The physical binding of the function. For example, in the Azure Machine Learning web service’s case, this
     * describes the endpoint.
     */
    private FunctionBinding binding;

    /**
     * Creates an instance of FunctionConfiguration class.
     */
    public FunctionConfiguration() {
    }

    /**
     * Get the inputs property: The inputs property.
     * 
     * @return the inputs value.
     */
    public List<FunctionInput> inputs() {
        return this.inputs;
    }

    /**
     * Set the inputs property: The inputs property.
     * 
     * @param inputs the inputs value to set.
     * @return the FunctionConfiguration object itself.
     */
    public FunctionConfiguration withInputs(List<FunctionInput> inputs) {
        this.inputs = inputs;
        return this;
    }

    /**
     * Get the output property: Describes the output of a function.
     * 
     * @return the output value.
     */
    public FunctionOutput output() {
        return this.output;
    }

    /**
     * Set the output property: Describes the output of a function.
     * 
     * @param output the output value to set.
     * @return the FunctionConfiguration object itself.
     */
    public FunctionConfiguration withOutput(FunctionOutput output) {
        this.output = output;
        return this;
    }

    /**
     * Get the binding property: The physical binding of the function. For example, in the Azure Machine Learning web
     * service’s case, this describes the endpoint.
     * 
     * @return the binding value.
     */
    public FunctionBinding binding() {
        return this.binding;
    }

    /**
     * Set the binding property: The physical binding of the function. For example, in the Azure Machine Learning web
     * service’s case, this describes the endpoint.
     * 
     * @param binding the binding value to set.
     * @return the FunctionConfiguration object itself.
     */
    public FunctionConfiguration withBinding(FunctionBinding binding) {
        this.binding = binding;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (inputs() != null) {
            inputs().forEach(e -> e.validate());
        }
        if (output() != null) {
            output().validate();
        }
        if (binding() != null) {
            binding().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("inputs", this.inputs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("output", this.output);
        jsonWriter.writeJsonField("binding", this.binding);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FunctionConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FunctionConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FunctionConfiguration.
     */
    public static FunctionConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FunctionConfiguration deserializedFunctionConfiguration = new FunctionConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("inputs".equals(fieldName)) {
                    List<FunctionInput> inputs = reader.readArray(reader1 -> FunctionInput.fromJson(reader1));
                    deserializedFunctionConfiguration.inputs = inputs;
                } else if ("output".equals(fieldName)) {
                    deserializedFunctionConfiguration.output = FunctionOutput.fromJson(reader);
                } else if ("binding".equals(fieldName)) {
                    deserializedFunctionConfiguration.binding = FunctionBinding.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFunctionConfiguration;
        });
    }
}
