// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.models.ClusterProvisioningState;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The properties associated with a Stream Analytics cluster.
 */
@Immutable
public final class ClusterProperties implements JsonSerializable<ClusterProperties> {
    /*
     * The date this cluster was created.
     */
    private OffsetDateTime createdDate;

    /*
     * Unique identifier for the cluster.
     */
    private String clusterId;

    /*
     * The status of the cluster provisioning. The three terminal states are: Succeeded, Failed and Canceled
     */
    private ClusterProvisioningState provisioningState;

    /*
     * Represents the number of streaming units currently being used on the cluster.
     */
    private Integer capacityAllocated;

    /*
     * Represents the sum of the SUs of all streaming jobs associated with the cluster. If all of the jobs were running,
     * this would be the capacity allocated.
     */
    private Integer capacityAssigned;

    /**
     * Creates an instance of ClusterProperties class.
     */
    public ClusterProperties() {
    }

    /**
     * Get the createdDate property: The date this cluster was created.
     * 
     * @return the createdDate value.
     */
    public OffsetDateTime createdDate() {
        return this.createdDate;
    }

    /**
     * Get the clusterId property: Unique identifier for the cluster.
     * 
     * @return the clusterId value.
     */
    public String clusterId() {
        return this.clusterId;
    }

    /**
     * Get the provisioningState property: The status of the cluster provisioning. The three terminal states are:
     * Succeeded, Failed and Canceled.
     * 
     * @return the provisioningState value.
     */
    public ClusterProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the capacityAllocated property: Represents the number of streaming units currently being used on the cluster.
     * 
     * @return the capacityAllocated value.
     */
    public Integer capacityAllocated() {
        return this.capacityAllocated;
    }

    /**
     * Get the capacityAssigned property: Represents the sum of the SUs of all streaming jobs associated with the
     * cluster. If all of the jobs were running, this would be the capacity allocated.
     * 
     * @return the capacityAssigned value.
     */
    public Integer capacityAssigned() {
        return this.capacityAssigned;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterProperties.
     */
    public static ClusterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterProperties deserializedClusterProperties = new ClusterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("createdDate".equals(fieldName)) {
                    deserializedClusterProperties.createdDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("clusterId".equals(fieldName)) {
                    deserializedClusterProperties.clusterId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedClusterProperties.provisioningState
                        = ClusterProvisioningState.fromString(reader.getString());
                } else if ("capacityAllocated".equals(fieldName)) {
                    deserializedClusterProperties.capacityAllocated = reader.getNullable(JsonReader::getInt);
                } else if ("capacityAssigned".equals(fieldName)) {
                    deserializedClusterProperties.capacityAssigned = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterProperties;
        });
    }
}
