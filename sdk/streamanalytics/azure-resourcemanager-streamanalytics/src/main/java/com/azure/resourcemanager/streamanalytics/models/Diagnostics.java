// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
 */
@Immutable
public final class Diagnostics implements JsonSerializable<Diagnostics> {
    /*
     * A collection of zero or more conditions applicable to the resource, or to the job overall, that warrant customer
     * attention.
     */
    private List<DiagnosticCondition> conditions;

    /**
     * Creates an instance of Diagnostics class.
     */
    public Diagnostics() {
    }

    /**
     * Get the conditions property: A collection of zero or more conditions applicable to the resource, or to the job
     * overall, that warrant customer attention.
     * 
     * @return the conditions value.
     */
    public List<DiagnosticCondition> conditions() {
        return this.conditions;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (conditions() != null) {
            conditions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Diagnostics from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Diagnostics if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the Diagnostics.
     */
    public static Diagnostics fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Diagnostics deserializedDiagnostics = new Diagnostics();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("conditions".equals(fieldName)) {
                    List<DiagnosticCondition> conditions
                        = reader.readArray(reader1 -> DiagnosticCondition.fromJson(reader1));
                    deserializedDiagnostics.conditions = conditions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiagnostics;
        });
    }
}
