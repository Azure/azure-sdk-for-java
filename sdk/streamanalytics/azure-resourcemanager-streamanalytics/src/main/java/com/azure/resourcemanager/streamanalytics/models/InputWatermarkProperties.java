// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Settings which determine whether to read watermark events.
 */
@Fluent
public final class InputWatermarkProperties implements JsonSerializable<InputWatermarkProperties> {
    /*
     * The input watermark mode.
     */
    private InputWatermarkMode watermarkMode;

    /**
     * Creates an instance of InputWatermarkProperties class.
     */
    public InputWatermarkProperties() {
    }

    /**
     * Get the watermarkMode property: The input watermark mode.
     * 
     * @return the watermarkMode value.
     */
    public InputWatermarkMode watermarkMode() {
        return this.watermarkMode;
    }

    /**
     * Set the watermarkMode property: The input watermark mode.
     * 
     * @param watermarkMode the watermarkMode value to set.
     * @return the InputWatermarkProperties object itself.
     */
    public InputWatermarkProperties withWatermarkMode(InputWatermarkMode watermarkMode) {
        this.watermarkMode = watermarkMode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("watermarkMode", this.watermarkMode == null ? null : this.watermarkMode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InputWatermarkProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InputWatermarkProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InputWatermarkProperties.
     */
    public static InputWatermarkProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InputWatermarkProperties deserializedInputWatermarkProperties = new InputWatermarkProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("watermarkMode".equals(fieldName)) {
                    deserializedInputWatermarkProperties.watermarkMode
                        = InputWatermarkMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInputWatermarkProperties;
        });
    }
}
