// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.fluent.models.GatewayMessageBusStreamInputDataSourceProperties;
import java.io.IOException;

/**
 * Describes a blob input data source that contains stream data.
 */
@Fluent
public final class GatewayMessageBusStreamInputDataSource extends StreamInputDataSource {
    /*
     * Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
     */
    private String type = "GatewayMessageBus";

    /*
     * The properties that are associated with a gateway message bus input containing stream data.
     */
    private GatewayMessageBusStreamInputDataSourceProperties innerProperties;

    /**
     * Creates an instance of GatewayMessageBusStreamInputDataSource class.
     */
    public GatewayMessageBusStreamInputDataSource() {
    }

    /**
     * Get the type property: Indicates the type of input data source containing stream data. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the innerProperties property: The properties that are associated with a gateway message bus input containing
     * stream data.
     * 
     * @return the innerProperties value.
     */
    private GatewayMessageBusStreamInputDataSourceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the topic property: The name of the Service Bus topic.
     * 
     * @return the topic value.
     */
    public String topic() {
        return this.innerProperties() == null ? null : this.innerProperties().topic();
    }

    /**
     * Set the topic property: The name of the Service Bus topic.
     * 
     * @param topic the topic value to set.
     * @return the GatewayMessageBusStreamInputDataSource object itself.
     */
    public GatewayMessageBusStreamInputDataSource withTopic(String topic) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GatewayMessageBusStreamInputDataSourceProperties();
        }
        this.innerProperties().withTopic(topic);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GatewayMessageBusStreamInputDataSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GatewayMessageBusStreamInputDataSource if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GatewayMessageBusStreamInputDataSource.
     */
    public static GatewayMessageBusStreamInputDataSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GatewayMessageBusStreamInputDataSource deserializedGatewayMessageBusStreamInputDataSource
                = new GatewayMessageBusStreamInputDataSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedGatewayMessageBusStreamInputDataSource.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedGatewayMessageBusStreamInputDataSource.innerProperties
                        = GatewayMessageBusStreamInputDataSourceProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGatewayMessageBusStreamInputDataSource;
        });
    }
}
