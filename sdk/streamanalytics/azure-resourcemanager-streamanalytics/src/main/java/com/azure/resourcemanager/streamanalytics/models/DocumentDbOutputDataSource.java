// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.fluent.models.DocumentDbOutputDataSourceProperties;
import java.io.IOException;

/**
 * Describes a DocumentDB output data source.
 */
@Fluent
public final class DocumentDbOutputDataSource extends OutputDataSource {
    /*
     * Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
     */
    private String type = "Microsoft.Storage/DocumentDB";

    /*
     * The properties that are associated with a DocumentDB output. Required on PUT (CreateOrReplace) requests.
     */
    private DocumentDbOutputDataSourceProperties innerProperties;

    /**
     * Creates an instance of DocumentDbOutputDataSource class.
     */
    public DocumentDbOutputDataSource() {
    }

    /**
     * Get the type property: Indicates the type of data source output will be written to. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the innerProperties property: The properties that are associated with a DocumentDB output. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @return the innerProperties value.
     */
    DocumentDbOutputDataSourceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the accountId property: The DocumentDB account name or ID. Required on PUT (CreateOrReplace) requests.
     * 
     * @return the accountId value.
     */
    public String accountId() {
        return this.innerProperties() == null ? null : this.innerProperties().accountId();
    }

    /**
     * Set the accountId property: The DocumentDB account name or ID. Required on PUT (CreateOrReplace) requests.
     * 
     * @param accountId the accountId value to set.
     * @return the DocumentDbOutputDataSource object itself.
     */
    public DocumentDbOutputDataSource withAccountId(String accountId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DocumentDbOutputDataSourceProperties();
        }
        this.innerProperties().withAccountId(accountId);
        return this;
    }

    /**
     * Get the accountKey property: The account key for the DocumentDB account. Required on PUT (CreateOrReplace)
     * requests.
     * 
     * @return the accountKey value.
     */
    public String accountKey() {
        return this.innerProperties() == null ? null : this.innerProperties().accountKey();
    }

    /**
     * Set the accountKey property: The account key for the DocumentDB account. Required on PUT (CreateOrReplace)
     * requests.
     * 
     * @param accountKey the accountKey value to set.
     * @return the DocumentDbOutputDataSource object itself.
     */
    public DocumentDbOutputDataSource withAccountKey(String accountKey) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DocumentDbOutputDataSourceProperties();
        }
        this.innerProperties().withAccountKey(accountKey);
        return this;
    }

    /**
     * Get the database property: The name of the DocumentDB database. Required on PUT (CreateOrReplace) requests.
     * 
     * @return the database value.
     */
    public String database() {
        return this.innerProperties() == null ? null : this.innerProperties().database();
    }

    /**
     * Set the database property: The name of the DocumentDB database. Required on PUT (CreateOrReplace) requests.
     * 
     * @param database the database value to set.
     * @return the DocumentDbOutputDataSource object itself.
     */
    public DocumentDbOutputDataSource withDatabase(String database) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DocumentDbOutputDataSourceProperties();
        }
        this.innerProperties().withDatabase(database);
        return this;
    }

    /**
     * Get the collectionNamePattern property: The collection name pattern for the collections to be used. The
     * collection name format can be constructed using the optional {partition} token, where partitions start from 0.
     * See the DocumentDB section of https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output
     * for more information. Required on PUT (CreateOrReplace) requests.
     * 
     * @return the collectionNamePattern value.
     */
    public String collectionNamePattern() {
        return this.innerProperties() == null ? null : this.innerProperties().collectionNamePattern();
    }

    /**
     * Set the collectionNamePattern property: The collection name pattern for the collections to be used. The
     * collection name format can be constructed using the optional {partition} token, where partitions start from 0.
     * See the DocumentDB section of https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output
     * for more information. Required on PUT (CreateOrReplace) requests.
     * 
     * @param collectionNamePattern the collectionNamePattern value to set.
     * @return the DocumentDbOutputDataSource object itself.
     */
    public DocumentDbOutputDataSource withCollectionNamePattern(String collectionNamePattern) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DocumentDbOutputDataSourceProperties();
        }
        this.innerProperties().withCollectionNamePattern(collectionNamePattern);
        return this;
    }

    /**
     * Get the partitionKey property: The name of the field in output events used to specify the key for partitioning
     * output across collections. If 'collectionNamePattern' contains the {partition} token, this property is required
     * to be specified.
     * 
     * @return the partitionKey value.
     */
    public String partitionKey() {
        return this.innerProperties() == null ? null : this.innerProperties().partitionKey();
    }

    /**
     * Set the partitionKey property: The name of the field in output events used to specify the key for partitioning
     * output across collections. If 'collectionNamePattern' contains the {partition} token, this property is required
     * to be specified.
     * 
     * @param partitionKey the partitionKey value to set.
     * @return the DocumentDbOutputDataSource object itself.
     */
    public DocumentDbOutputDataSource withPartitionKey(String partitionKey) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DocumentDbOutputDataSourceProperties();
        }
        this.innerProperties().withPartitionKey(partitionKey);
        return this;
    }

    /**
     * Get the documentId property: The name of the field in output events used to specify the primary key which insert
     * or update operations are based on.
     * 
     * @return the documentId value.
     */
    public String documentId() {
        return this.innerProperties() == null ? null : this.innerProperties().documentId();
    }

    /**
     * Set the documentId property: The name of the field in output events used to specify the primary key which insert
     * or update operations are based on.
     * 
     * @param documentId the documentId value to set.
     * @return the DocumentDbOutputDataSource object itself.
     */
    public DocumentDbOutputDataSource withDocumentId(String documentId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DocumentDbOutputDataSourceProperties();
        }
        this.innerProperties().withDocumentId(documentId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DocumentDbOutputDataSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DocumentDbOutputDataSource if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DocumentDbOutputDataSource.
     */
    public static DocumentDbOutputDataSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DocumentDbOutputDataSource deserializedDocumentDbOutputDataSource = new DocumentDbOutputDataSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedDocumentDbOutputDataSource.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedDocumentDbOutputDataSource.innerProperties
                        = DocumentDbOutputDataSourceProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDocumentDbOutputDataSource;
        });
    }
}
