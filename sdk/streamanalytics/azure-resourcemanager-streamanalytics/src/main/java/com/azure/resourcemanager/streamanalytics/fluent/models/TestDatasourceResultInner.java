// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.models.TestDatasourceResultStatus;
import java.io.IOException;

/**
 * The result of the test input or output request.
 */
@Fluent
public final class TestDatasourceResultInner implements JsonSerializable<TestDatasourceResultInner> {
    /*
     * The status of the sample output request.
     */
    private TestDatasourceResultStatus status;

    /*
     * Error definition properties.
     */
    private ManagementError error;

    /**
     * Creates an instance of TestDatasourceResultInner class.
     */
    public TestDatasourceResultInner() {
    }

    /**
     * Get the status property: The status of the sample output request.
     * 
     * @return the status value.
     */
    public TestDatasourceResultStatus status() {
        return this.status;
    }

    /**
     * Get the error property: Error definition properties.
     * 
     * @return the error value.
     */
    public ManagementError error() {
        return this.error;
    }

    /**
     * Set the error property: Error definition properties.
     * 
     * @param error the error value to set.
     * @return the TestDatasourceResultInner object itself.
     */
    public TestDatasourceResultInner withError(ManagementError error) {
        this.error = error;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestDatasourceResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestDatasourceResultInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TestDatasourceResultInner.
     */
    public static TestDatasourceResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TestDatasourceResultInner deserializedTestDatasourceResultInner = new TestDatasourceResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedTestDatasourceResultInner.status
                        = TestDatasourceResultStatus.fromString(reader.getString());
                } else if ("error".equals(fieldName)) {
                    deserializedTestDatasourceResultInner.error = ManagementError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTestDatasourceResultInner;
        });
    }
}
