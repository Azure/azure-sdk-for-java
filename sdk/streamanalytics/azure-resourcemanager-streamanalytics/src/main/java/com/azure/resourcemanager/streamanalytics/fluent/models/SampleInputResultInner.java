// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.models.SampleInputResultStatus;
import java.io.IOException;
import java.util.List;

/**
 * The result of the sample input request.
 */
@Fluent
public final class SampleInputResultInner implements JsonSerializable<SampleInputResultInner> {
    /*
     * The status of the sample input request.
     */
    private SampleInputResultStatus status;

    /*
     * Diagnostics messages. E.g. message indicating some partitions from the input have no data.
     */
    private List<String> diagnostics;

    /*
     * A SAS URL to download the sampled input data.
     */
    private String eventsDownloadUrl;

    /*
     * The timestamp for the last event in the data. It is in DateTime format.
     */
    private String lastArrivalTime;

    /*
     * Error definition properties.
     */
    private ManagementError error;

    /**
     * Creates an instance of SampleInputResultInner class.
     */
    public SampleInputResultInner() {
    }

    /**
     * Get the status property: The status of the sample input request.
     * 
     * @return the status value.
     */
    public SampleInputResultStatus status() {
        return this.status;
    }

    /**
     * Get the diagnostics property: Diagnostics messages. E.g. message indicating some partitions from the input have
     * no data.
     * 
     * @return the diagnostics value.
     */
    public List<String> diagnostics() {
        return this.diagnostics;
    }

    /**
     * Get the eventsDownloadUrl property: A SAS URL to download the sampled input data.
     * 
     * @return the eventsDownloadUrl value.
     */
    public String eventsDownloadUrl() {
        return this.eventsDownloadUrl;
    }

    /**
     * Get the lastArrivalTime property: The timestamp for the last event in the data. It is in DateTime format.
     * 
     * @return the lastArrivalTime value.
     */
    public String lastArrivalTime() {
        return this.lastArrivalTime;
    }

    /**
     * Get the error property: Error definition properties.
     * 
     * @return the error value.
     */
    public ManagementError error() {
        return this.error;
    }

    /**
     * Set the error property: Error definition properties.
     * 
     * @param error the error value to set.
     * @return the SampleInputResultInner object itself.
     */
    public SampleInputResultInner withError(ManagementError error) {
        this.error = error;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SampleInputResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SampleInputResultInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SampleInputResultInner.
     */
    public static SampleInputResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SampleInputResultInner deserializedSampleInputResultInner = new SampleInputResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedSampleInputResultInner.status = SampleInputResultStatus.fromString(reader.getString());
                } else if ("diagnostics".equals(fieldName)) {
                    List<String> diagnostics = reader.readArray(reader1 -> reader1.getString());
                    deserializedSampleInputResultInner.diagnostics = diagnostics;
                } else if ("eventsDownloadUrl".equals(fieldName)) {
                    deserializedSampleInputResultInner.eventsDownloadUrl = reader.getString();
                } else if ("lastArrivalTime".equals(fieldName)) {
                    deserializedSampleInputResultInner.lastArrivalTime = reader.getString();
                } else if ("error".equals(fieldName)) {
                    deserializedSampleInputResultInner.error = ManagementError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSampleInputResultInner;
        });
    }
}
