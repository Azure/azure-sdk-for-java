// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.models.QueryTestingResultStatus;
import java.io.IOException;

/**
 * The result of the query testing request.
 */
@Fluent
public final class QueryTestingResultInner implements JsonSerializable<QueryTestingResultInner> {
    /*
     * The status of the query testing request.
     */
    private QueryTestingResultStatus status;

    /*
     * The SAS URL to the outputs payload.
     */
    private String outputUri;

    /*
     * Error definition properties.
     */
    private ManagementError error;

    /**
     * Creates an instance of QueryTestingResultInner class.
     */
    public QueryTestingResultInner() {
    }

    /**
     * Get the status property: The status of the query testing request.
     * 
     * @return the status value.
     */
    public QueryTestingResultStatus status() {
        return this.status;
    }

    /**
     * Get the outputUri property: The SAS URL to the outputs payload.
     * 
     * @return the outputUri value.
     */
    public String outputUri() {
        return this.outputUri;
    }

    /**
     * Get the error property: Error definition properties.
     * 
     * @return the error value.
     */
    public ManagementError error() {
        return this.error;
    }

    /**
     * Set the error property: Error definition properties.
     * 
     * @param error the error value to set.
     * @return the QueryTestingResultInner object itself.
     */
    public QueryTestingResultInner withError(ManagementError error) {
        this.error = error;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueryTestingResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueryTestingResultInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the QueryTestingResultInner.
     */
    public static QueryTestingResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueryTestingResultInner deserializedQueryTestingResultInner = new QueryTestingResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedQueryTestingResultInner.status
                        = QueryTestingResultStatus.fromString(reader.getString());
                } else if ("outputUri".equals(fieldName)) {
                    deserializedQueryTestingResultInner.outputUri = reader.getString();
                } else if ("error".equals(fieldName)) {
                    deserializedQueryTestingResultInner.error = ManagementError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQueryTestingResultInner;
        });
    }
}
