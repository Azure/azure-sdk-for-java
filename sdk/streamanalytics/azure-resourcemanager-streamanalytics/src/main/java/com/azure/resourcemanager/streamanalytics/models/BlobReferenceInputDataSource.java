// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.streamanalytics.fluent.models.BlobReferenceInputDataSourceProperties;
import java.io.IOException;
import java.util.List;

/**
 * Describes a blob input data source that contains reference data.
 */
@Fluent
public final class BlobReferenceInputDataSource extends ReferenceInputDataSource {
    /*
     * Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
     */
    private String type = "Microsoft.Storage/Blob";

    /*
     * The properties that are associated with a blob input containing reference data. Required on PUT (CreateOrReplace)
     * requests.
     */
    private BlobReferenceInputDataSourceProperties innerProperties;

    /**
     * Creates an instance of BlobReferenceInputDataSource class.
     */
    public BlobReferenceInputDataSource() {
    }

    /**
     * Get the type property: Indicates the type of input data source containing reference data. Required on PUT
     * (CreateOrReplace) requests.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the innerProperties property: The properties that are associated with a blob input containing reference data.
     * Required on PUT (CreateOrReplace) requests.
     * 
     * @return the innerProperties value.
     */
    BlobReferenceInputDataSourceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the storageAccounts property: A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace)
     * requests.
     * 
     * @return the storageAccounts value.
     */
    public List<StorageAccount> storageAccounts() {
        return this.innerProperties() == null ? null : this.innerProperties().storageAccounts();
    }

    /**
     * Set the storageAccounts property: A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace)
     * requests.
     * 
     * @param storageAccounts the storageAccounts value to set.
     * @return the BlobReferenceInputDataSource object itself.
     */
    public BlobReferenceInputDataSource withStorageAccounts(List<StorageAccount> storageAccounts) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BlobReferenceInputDataSourceProperties();
        }
        this.innerProperties().withStorageAccounts(storageAccounts);
        return this;
    }

    /**
     * Get the container property: The name of a container within the associated Storage account. This container
     * contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
     * 
     * @return the container value.
     */
    public String container() {
        return this.innerProperties() == null ? null : this.innerProperties().container();
    }

    /**
     * Set the container property: The name of a container within the associated Storage account. This container
     * contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
     * 
     * @param container the container value to set.
     * @return the BlobReferenceInputDataSource object itself.
     */
    public BlobReferenceInputDataSource withContainer(String container) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BlobReferenceInputDataSourceProperties();
        }
        this.innerProperties().withContainer(container);
        return this;
    }

    /**
     * Get the pathPattern property: The blob path pattern. Not a regular expression. It represents a pattern against
     * which blob names will be matched to determine whether or not they should be included as input or output to the
     * job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
     * https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation
     * and example.
     * 
     * @return the pathPattern value.
     */
    public String pathPattern() {
        return this.innerProperties() == null ? null : this.innerProperties().pathPattern();
    }

    /**
     * Set the pathPattern property: The blob path pattern. Not a regular expression. It represents a pattern against
     * which blob names will be matched to determine whether or not they should be included as input or output to the
     * job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
     * https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation
     * and example.
     * 
     * @param pathPattern the pathPattern value to set.
     * @return the BlobReferenceInputDataSource object itself.
     */
    public BlobReferenceInputDataSource withPathPattern(String pathPattern) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BlobReferenceInputDataSourceProperties();
        }
        this.innerProperties().withPathPattern(pathPattern);
        return this;
    }

    /**
     * Get the dateFormat property: The date format. Wherever {date} appears in pathPattern, the value of this property
     * is used as the date format instead.
     * 
     * @return the dateFormat value.
     */
    public String dateFormat() {
        return this.innerProperties() == null ? null : this.innerProperties().dateFormat();
    }

    /**
     * Set the dateFormat property: The date format. Wherever {date} appears in pathPattern, the value of this property
     * is used as the date format instead.
     * 
     * @param dateFormat the dateFormat value to set.
     * @return the BlobReferenceInputDataSource object itself.
     */
    public BlobReferenceInputDataSource withDateFormat(String dateFormat) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BlobReferenceInputDataSourceProperties();
        }
        this.innerProperties().withDateFormat(dateFormat);
        return this;
    }

    /**
     * Get the timeFormat property: The time format. Wherever {time} appears in pathPattern, the value of this property
     * is used as the time format instead.
     * 
     * @return the timeFormat value.
     */
    public String timeFormat() {
        return this.innerProperties() == null ? null : this.innerProperties().timeFormat();
    }

    /**
     * Set the timeFormat property: The time format. Wherever {time} appears in pathPattern, the value of this property
     * is used as the time format instead.
     * 
     * @param timeFormat the timeFormat value to set.
     * @return the BlobReferenceInputDataSource object itself.
     */
    public BlobReferenceInputDataSource withTimeFormat(String timeFormat) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BlobReferenceInputDataSourceProperties();
        }
        this.innerProperties().withTimeFormat(timeFormat);
        return this;
    }

    /**
     * Get the authenticationMode property: Authentication Mode.
     * 
     * @return the authenticationMode value.
     */
    public AuthenticationMode authenticationMode() {
        return this.innerProperties() == null ? null : this.innerProperties().authenticationMode();
    }

    /**
     * Set the authenticationMode property: Authentication Mode.
     * 
     * @param authenticationMode the authenticationMode value to set.
     * @return the BlobReferenceInputDataSource object itself.
     */
    public BlobReferenceInputDataSource withAuthenticationMode(AuthenticationMode authenticationMode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BlobReferenceInputDataSourceProperties();
        }
        this.innerProperties().withAuthenticationMode(authenticationMode);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BlobReferenceInputDataSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BlobReferenceInputDataSource if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BlobReferenceInputDataSource.
     */
    public static BlobReferenceInputDataSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BlobReferenceInputDataSource deserializedBlobReferenceInputDataSource = new BlobReferenceInputDataSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedBlobReferenceInputDataSource.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedBlobReferenceInputDataSource.innerProperties
                        = BlobReferenceInputDataSourceProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBlobReferenceInputDataSource;
        });
    }
}
