// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The query compilation object which defines the input, output, and transformation for the query compilation.
 */
@Fluent
public final class CompileQuery implements JsonSerializable<CompileQuery> {
    /*
     * The query to compile.
     */
    private String query;

    /*
     * The inputs for the query compilation.
     */
    private List<QueryInput> inputs;

    /*
     * The functions for the query compilation.
     */
    private List<QueryFunction> functions;

    /*
     * Describes the type of the job. Valid values are `Cloud` and 'Edge'.
     */
    private JobType jobType;

    /*
     * The query to compile.
     */
    private CompatibilityLevel compatibilityLevel;

    /**
     * Creates an instance of CompileQuery class.
     */
    public CompileQuery() {
    }

    /**
     * Get the query property: The query to compile.
     * 
     * @return the query value.
     */
    public String query() {
        return this.query;
    }

    /**
     * Set the query property: The query to compile.
     * 
     * @param query the query value to set.
     * @return the CompileQuery object itself.
     */
    public CompileQuery withQuery(String query) {
        this.query = query;
        return this;
    }

    /**
     * Get the inputs property: The inputs for the query compilation.
     * 
     * @return the inputs value.
     */
    public List<QueryInput> inputs() {
        return this.inputs;
    }

    /**
     * Set the inputs property: The inputs for the query compilation.
     * 
     * @param inputs the inputs value to set.
     * @return the CompileQuery object itself.
     */
    public CompileQuery withInputs(List<QueryInput> inputs) {
        this.inputs = inputs;
        return this;
    }

    /**
     * Get the functions property: The functions for the query compilation.
     * 
     * @return the functions value.
     */
    public List<QueryFunction> functions() {
        return this.functions;
    }

    /**
     * Set the functions property: The functions for the query compilation.
     * 
     * @param functions the functions value to set.
     * @return the CompileQuery object itself.
     */
    public CompileQuery withFunctions(List<QueryFunction> functions) {
        this.functions = functions;
        return this;
    }

    /**
     * Get the jobType property: Describes the type of the job. Valid values are `Cloud` and 'Edge'.
     * 
     * @return the jobType value.
     */
    public JobType jobType() {
        return this.jobType;
    }

    /**
     * Set the jobType property: Describes the type of the job. Valid values are `Cloud` and 'Edge'.
     * 
     * @param jobType the jobType value to set.
     * @return the CompileQuery object itself.
     */
    public CompileQuery withJobType(JobType jobType) {
        this.jobType = jobType;
        return this;
    }

    /**
     * Get the compatibilityLevel property: The query to compile.
     * 
     * @return the compatibilityLevel value.
     */
    public CompatibilityLevel compatibilityLevel() {
        return this.compatibilityLevel;
    }

    /**
     * Set the compatibilityLevel property: The query to compile.
     * 
     * @param compatibilityLevel the compatibilityLevel value to set.
     * @return the CompileQuery object itself.
     */
    public CompileQuery withCompatibilityLevel(CompatibilityLevel compatibilityLevel) {
        this.compatibilityLevel = compatibilityLevel;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (query() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property query in model CompileQuery"));
        }
        if (inputs() != null) {
            inputs().forEach(e -> e.validate());
        }
        if (functions() != null) {
            functions().forEach(e -> e.validate());
        }
        if (jobType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property jobType in model CompileQuery"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CompileQuery.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("query", this.query);
        jsonWriter.writeStringField("jobType", this.jobType == null ? null : this.jobType.toString());
        jsonWriter.writeArrayField("inputs", this.inputs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("functions", this.functions, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("compatibilityLevel",
            this.compatibilityLevel == null ? null : this.compatibilityLevel.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CompileQuery from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CompileQuery if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CompileQuery.
     */
    public static CompileQuery fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CompileQuery deserializedCompileQuery = new CompileQuery();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("query".equals(fieldName)) {
                    deserializedCompileQuery.query = reader.getString();
                } else if ("jobType".equals(fieldName)) {
                    deserializedCompileQuery.jobType = JobType.fromString(reader.getString());
                } else if ("inputs".equals(fieldName)) {
                    List<QueryInput> inputs = reader.readArray(reader1 -> QueryInput.fromJson(reader1));
                    deserializedCompileQuery.inputs = inputs;
                } else if ("functions".equals(fieldName)) {
                    List<QueryFunction> functions = reader.readArray(reader1 -> QueryFunction.fromJson(reader1));
                    deserializedCompileQuery.functions = functions;
                } else if ("compatibilityLevel".equals(fieldName)) {
                    deserializedCompileQuery.compatibilityLevel = CompatibilityLevel.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCompileQuery;
        });
    }
}
