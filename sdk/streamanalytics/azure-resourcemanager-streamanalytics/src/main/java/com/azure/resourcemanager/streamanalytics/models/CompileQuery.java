// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The query compilation object which defines the input, output, and transformation for the query compilation.
 */
@Fluent
public final class CompileQuery {
    /*
     * The query to compile.
     */
    @JsonProperty(value = "query", required = true)
    private String query;

    /*
     * The inputs for the query compilation.
     */
    @JsonProperty(value = "inputs")
    private List<QueryInput> inputs;

    /*
     * The functions for the query compilation.
     */
    @JsonProperty(value = "functions")
    private List<QueryFunction> functions;

    /*
     * Describes the type of the job. Valid values are `Cloud` and 'Edge'.
     */
    @JsonProperty(value = "jobType", required = true)
    private JobType jobType;

    /*
     * The query to compile.
     */
    @JsonProperty(value = "compatibilityLevel")
    private CompatibilityLevel compatibilityLevel;

    /**
     * Creates an instance of CompileQuery class.
     */
    public CompileQuery() {
    }

    /**
     * Get the query property: The query to compile.
     * 
     * @return the query value.
     */
    public String query() {
        return this.query;
    }

    /**
     * Set the query property: The query to compile.
     * 
     * @param query the query value to set.
     * @return the CompileQuery object itself.
     */
    public CompileQuery withQuery(String query) {
        this.query = query;
        return this;
    }

    /**
     * Get the inputs property: The inputs for the query compilation.
     * 
     * @return the inputs value.
     */
    public List<QueryInput> inputs() {
        return this.inputs;
    }

    /**
     * Set the inputs property: The inputs for the query compilation.
     * 
     * @param inputs the inputs value to set.
     * @return the CompileQuery object itself.
     */
    public CompileQuery withInputs(List<QueryInput> inputs) {
        this.inputs = inputs;
        return this;
    }

    /**
     * Get the functions property: The functions for the query compilation.
     * 
     * @return the functions value.
     */
    public List<QueryFunction> functions() {
        return this.functions;
    }

    /**
     * Set the functions property: The functions for the query compilation.
     * 
     * @param functions the functions value to set.
     * @return the CompileQuery object itself.
     */
    public CompileQuery withFunctions(List<QueryFunction> functions) {
        this.functions = functions;
        return this;
    }

    /**
     * Get the jobType property: Describes the type of the job. Valid values are `Cloud` and 'Edge'.
     * 
     * @return the jobType value.
     */
    public JobType jobType() {
        return this.jobType;
    }

    /**
     * Set the jobType property: Describes the type of the job. Valid values are `Cloud` and 'Edge'.
     * 
     * @param jobType the jobType value to set.
     * @return the CompileQuery object itself.
     */
    public CompileQuery withJobType(JobType jobType) {
        this.jobType = jobType;
        return this;
    }

    /**
     * Get the compatibilityLevel property: The query to compile.
     * 
     * @return the compatibilityLevel value.
     */
    public CompatibilityLevel compatibilityLevel() {
        return this.compatibilityLevel;
    }

    /**
     * Set the compatibilityLevel property: The query to compile.
     * 
     * @param compatibilityLevel the compatibilityLevel value to set.
     * @return the CompileQuery object itself.
     */
    public CompileQuery withCompatibilityLevel(CompatibilityLevel compatibilityLevel) {
        this.compatibilityLevel = compatibilityLevel;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (query() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property query in model CompileQuery"));
        }
        if (inputs() != null) {
            inputs().forEach(e -> e.validate());
        }
        if (functions() != null) {
            functions().forEach(e -> e.validate());
        }
        if (jobType() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property jobType in model CompileQuery"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CompileQuery.class);
}
