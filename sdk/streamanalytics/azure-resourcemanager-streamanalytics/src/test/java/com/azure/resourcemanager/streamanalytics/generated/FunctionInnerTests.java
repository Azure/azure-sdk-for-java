// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.streamanalytics.fluent.models.FunctionInner;
import com.azure.resourcemanager.streamanalytics.models.FunctionBinding;
import com.azure.resourcemanager.streamanalytics.models.FunctionInput;
import com.azure.resourcemanager.streamanalytics.models.FunctionOutput;
import com.azure.resourcemanager.streamanalytics.models.FunctionProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class FunctionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FunctionInner model = BinaryData.fromString(
            "{\"properties\":{\"type\":\"FunctionProperties\",\"etag\":\"ulngsntn\",\"properties\":{\"inputs\":[{\"dataType\":\"gc\",\"isConfigurationParameter\":false},{\"dataType\":\"lxxwrljdouskc\",\"isConfigurationParameter\":true},{\"dataType\":\"cr\",\"isConfigurationParameter\":false}],\"output\":{\"dataType\":\"tnhxbn\"},\"binding\":{\"type\":\"FunctionBinding\"}}},\"name\":\"ksqrglssai\",\"type\":\"p\",\"id\":\"nzl\"}")
            .toObject(FunctionInner.class);
        Assertions.assertEquals("nzl", model.id());
        Assertions.assertEquals("gc", model.properties().inputs().get(0).dataType());
        Assertions.assertEquals(false, model.properties().inputs().get(0).isConfigurationParameter());
        Assertions.assertEquals("tnhxbn", model.properties().output().dataType());
        Assertions.assertEquals("ksqrglssai", model.name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FunctionInner model = new FunctionInner().withId("nzl")
            .withProperties(new FunctionProperties()
                .withInputs(Arrays.asList(new FunctionInput().withDataType("gc").withIsConfigurationParameter(false),
                    new FunctionInput().withDataType("lxxwrljdouskc").withIsConfigurationParameter(true),
                    new FunctionInput().withDataType("cr").withIsConfigurationParameter(false)))
                .withOutput(new FunctionOutput().withDataType("tnhxbn"))
                .withBinding(new FunctionBinding()))
            .withName("ksqrglssai");
        model = BinaryData.fromObject(model).toObject(FunctionInner.class);
        Assertions.assertEquals("nzl", model.id());
        Assertions.assertEquals("gc", model.properties().inputs().get(0).dataType());
        Assertions.assertEquals(false, model.properties().inputs().get(0).isConfigurationParameter());
        Assertions.assertEquals("tnhxbn", model.properties().output().dataType());
        Assertions.assertEquals("ksqrglssai", model.name());
    }
}
