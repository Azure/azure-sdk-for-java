// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.streamanalytics.StreamAnalyticsManager;
import com.azure.resourcemanager.streamanalytics.models.Function;
import com.azure.resourcemanager.streamanalytics.models.FunctionBinding;
import com.azure.resourcemanager.streamanalytics.models.FunctionInput;
import com.azure.resourcemanager.streamanalytics.models.FunctionOutput;
import com.azure.resourcemanager.streamanalytics.models.FunctionProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FunctionsCreateOrReplaceWithResponseMockTests {
    @Test
    public void testCreateOrReplaceWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"type\":\"FunctionProperties\",\"etag\":\"uzlm\",\"properties\":{\"inputs\":[{\"dataType\":\"ktgplcr\",\"isConfigurationParameter\":true},{\"dataType\":\"eznoig\",\"isConfigurationParameter\":true},{\"dataType\":\"w\",\"isConfigurationParameter\":false},{\"dataType\":\"nbsazejjoqkag\",\"isConfigurationParameter\":false}],\"output\":{\"dataType\":\"taugzxnfaa\"},\"binding\":{\"type\":\"FunctionBinding\"}}},\"name\":\"dtnkdmkq\",\"type\":\"lwuenvrkp\",\"id\":\"uaibrebqaaysj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        StreamAnalyticsManager manager = StreamAnalyticsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Function response = manager.functions()
            .define("hbpnaixexccbd")
            .withExistingStreamingjob("tvgbmhrixkwmy", "jejveg")
            .withProperties(new FunctionProperties()
                .withInputs(Arrays.asList(new FunctionInput().withDataType("wijnh").withIsConfigurationParameter(true),
                    new FunctionInput().withDataType("f").withIsConfigurationParameter(false)))
                .withOutput(new FunctionOutput().withDataType("fvoow"))
                .withBinding(new FunctionBinding()))
            .withName("mtg")
            .withIfMatch("afxtsgum")
            .withIfNoneMatch("jglikkxwslolb")
            .create();

        Assertions.assertEquals("uaibrebqaaysj", response.id());
        Assertions.assertEquals("ktgplcr", response.properties().inputs().get(0).dataType());
        Assertions.assertEquals(true, response.properties().inputs().get(0).isConfigurationParameter());
        Assertions.assertEquals("taugzxnfaa", response.properties().output().dataType());
        Assertions.assertEquals("dtnkdmkq", response.name());
    }
}
