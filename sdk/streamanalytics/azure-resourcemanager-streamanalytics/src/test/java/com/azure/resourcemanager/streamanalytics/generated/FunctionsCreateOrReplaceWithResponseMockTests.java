// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.streamanalytics.StreamAnalyticsManager;
import com.azure.resourcemanager.streamanalytics.models.Function;
import com.azure.resourcemanager.streamanalytics.models.FunctionBinding;
import com.azure.resourcemanager.streamanalytics.models.FunctionInput;
import com.azure.resourcemanager.streamanalytics.models.FunctionOutput;
import com.azure.resourcemanager.streamanalytics.models.FunctionProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FunctionsCreateOrReplaceWithResponseMockTests {
    @Test
    public void testCreateOrReplaceWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"type\":\"FunctionProperties\",\"etag\":\"exccbdreaxhcexd\",\"properties\":{\"inputs\":[{\"dataType\":\"hqk\",\"isConfigurationParameter\":false},{\"dataType\":\"wijnh\",\"isConfigurationParameter\":true},{\"dataType\":\"f\",\"isConfigurationParameter\":false},{\"dataType\":\"bfvoowvrv\",\"isConfigurationParameter\":false}],\"output\":{\"dataType\":\"ppyostronzmyhgf\"},\"binding\":{\"type\":\"FunctionBinding\"}}},\"name\":\"sxkm\",\"type\":\"a\",\"id\":\"rrjreafxtsgu\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        StreamAnalyticsManager manager = StreamAnalyticsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Function response = manager.functions()
            .define("ywkbirryuzhlhkjo")
            .withExistingStreamingjob("wfqatmtd", "tmdvypgikdgs")
            .withProperties(new FunctionProperties()
                .withInputs(
                    Arrays.asList(new FunctionInput().withDataType("bfggjioolvr").withIsConfigurationParameter(false),
                        new FunctionInput().withDataType("tkkgllqwjy").withIsConfigurationParameter(true)))
                .withOutput(new FunctionOutput().withDataType("vblm"))
                .withBinding(new FunctionBinding()))
            .withName("zuhbxvvyhgsopb")
            .withIfMatch("bmhrixkwmyijejv")
            .withIfNoneMatch("grhbpn")
            .create();

        Assertions.assertEquals("rrjreafxtsgu", response.id());
        Assertions.assertEquals("hqk", response.properties().inputs().get(0).dataType());
        Assertions.assertEquals(false, response.properties().inputs().get(0).isConfigurationParameter());
        Assertions.assertEquals("ppyostronzmyhgf", response.properties().output().dataType());
        Assertions.assertEquals("sxkm", response.name());
    }
}
