// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.streamanalytics.fluent.models.FunctionConfiguration;
import com.azure.resourcemanager.streamanalytics.models.FunctionBinding;
import com.azure.resourcemanager.streamanalytics.models.FunctionInput;
import com.azure.resourcemanager.streamanalytics.models.FunctionOutput;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class FunctionConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FunctionConfiguration model = BinaryData.fromString(
            "{\"inputs\":[{\"dataType\":\"appd\",\"isConfigurationParameter\":true},{\"dataType\":\"vwrwj\",\"isConfigurationParameter\":false}],\"output\":{\"dataType\":\"hutje\"},\"binding\":{\"type\":\"FunctionBinding\"}}")
            .toObject(FunctionConfiguration.class);
        Assertions.assertEquals("appd", model.inputs().get(0).dataType());
        Assertions.assertEquals(true, model.inputs().get(0).isConfigurationParameter());
        Assertions.assertEquals("hutje", model.output().dataType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FunctionConfiguration model = new FunctionConfiguration()
            .withInputs(Arrays.asList(new FunctionInput().withDataType("appd").withIsConfigurationParameter(true),
                new FunctionInput().withDataType("vwrwj").withIsConfigurationParameter(false)))
            .withOutput(new FunctionOutput().withDataType("hutje"))
            .withBinding(new FunctionBinding());
        model = BinaryData.fromObject(model).toObject(FunctionConfiguration.class);
        Assertions.assertEquals("appd", model.inputs().get(0).dataType());
        Assertions.assertEquals(true, model.inputs().get(0).isConfigurationParameter());
        Assertions.assertEquals("hutje", model.output().dataType());
    }
}
