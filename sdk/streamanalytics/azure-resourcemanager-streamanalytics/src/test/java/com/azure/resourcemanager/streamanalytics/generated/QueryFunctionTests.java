// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.streamanalytics.models.FunctionInput;
import com.azure.resourcemanager.streamanalytics.models.FunctionOutput;
import com.azure.resourcemanager.streamanalytics.models.QueryFunction;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class QueryFunctionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        QueryFunction model = BinaryData.fromString(
            "{\"name\":\"oqqnwvlryav\",\"type\":\"hheunmmqhgyx\",\"bindingType\":\"konocu\",\"inputs\":[{\"dataType\":\"lyaxuc\",\"isConfigurationParameter\":false},{\"dataType\":\"szfkbe\",\"isConfigurationParameter\":true},{\"dataType\":\"rmjmwvvjektc\",\"isConfigurationParameter\":false}],\"output\":{\"dataType\":\"hwlrsf\"}}")
            .toObject(QueryFunction.class);
        Assertions.assertEquals("oqqnwvlryav", model.name());
        Assertions.assertEquals("hheunmmqhgyx", model.type());
        Assertions.assertEquals("konocu", model.bindingType());
        Assertions.assertEquals("lyaxuc", model.inputs().get(0).dataType());
        Assertions.assertEquals(false, model.inputs().get(0).isConfigurationParameter());
        Assertions.assertEquals("hwlrsf", model.output().dataType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        QueryFunction model = new QueryFunction().withName("oqqnwvlryav").withType("hheunmmqhgyx")
            .withBindingType("konocu")
            .withInputs(Arrays.asList(new FunctionInput().withDataType("lyaxuc").withIsConfigurationParameter(false),
                new FunctionInput().withDataType("szfkbe").withIsConfigurationParameter(true),
                new FunctionInput().withDataType("rmjmwvvjektc").withIsConfigurationParameter(false)))
            .withOutput(new FunctionOutput().withDataType("hwlrsf"));
        model = BinaryData.fromObject(model).toObject(QueryFunction.class);
        Assertions.assertEquals("oqqnwvlryav", model.name());
        Assertions.assertEquals("hheunmmqhgyx", model.type());
        Assertions.assertEquals("konocu", model.bindingType());
        Assertions.assertEquals("lyaxuc", model.inputs().get(0).dataType());
        Assertions.assertEquals(false, model.inputs().get(0).isConfigurationParameter());
        Assertions.assertEquals("hwlrsf", model.output().dataType());
    }
}
