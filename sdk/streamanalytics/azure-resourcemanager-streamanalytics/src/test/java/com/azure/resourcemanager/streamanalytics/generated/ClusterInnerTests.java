// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.streamanalytics.fluent.models.ClusterInner;
import com.azure.resourcemanager.streamanalytics.models.ClusterProperties;
import com.azure.resourcemanager.streamanalytics.models.ClusterSku;
import com.azure.resourcemanager.streamanalytics.models.ClusterSkuName;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterInner model = BinaryData.fromString(
            "{\"sku\":{\"name\":\"Default\",\"capacity\":1813898530},\"etag\":\"kcxywnyt\",\"properties\":{\"createdDate\":\"2021-02-23T04:05:10Z\",\"clusterId\":\"lqidyby\",\"provisioningState\":\"Succeeded\",\"capacityAllocated\":858824887,\"capacityAssigned\":751467546},\"location\":\"aaxdbabphlwrq\",\"tags\":{\"yyazttbt\":\"tsthsucocm\",\"ckzywbiexzfeyue\":\"wrqpue\",\"zyoxaepdkzjan\":\"xibxujwbhqwalm\",\"hdwbavxbniwdjs\":\"ux\"},\"id\":\"zt\",\"name\":\"dbpgnxytxhp\",\"type\":\"xbzpfzab\"}")
            .toObject(ClusterInner.class);
        Assertions.assertEquals("aaxdbabphlwrq", model.location());
        Assertions.assertEquals("tsthsucocm", model.tags().get("yyazttbt"));
        Assertions.assertEquals(ClusterSkuName.DEFAULT, model.sku().name());
        Assertions.assertEquals(1813898530, model.sku().capacity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterInner model = new ClusterInner().withLocation("aaxdbabphlwrq")
            .withTags(mapOf("yyazttbt", "tsthsucocm", "ckzywbiexzfeyue", "wrqpue", "zyoxaepdkzjan", "xibxujwbhqwalm",
                "hdwbavxbniwdjs", "ux"))
            .withSku(new ClusterSku().withName(ClusterSkuName.DEFAULT).withCapacity(1813898530))
            .withProperties(new ClusterProperties());
        model = BinaryData.fromObject(model).toObject(ClusterInner.class);
        Assertions.assertEquals("aaxdbabphlwrq", model.location());
        Assertions.assertEquals("tsthsucocm", model.tags().get("yyazttbt"));
        Assertions.assertEquals(ClusterSkuName.DEFAULT, model.sku().name());
        Assertions.assertEquals(1813898530, model.sku().capacity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
