// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.streamanalytics.StreamAnalyticsManager;
import com.azure.resourcemanager.streamanalytics.models.PrivateEndpoint;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointsListByClusterMockTests {
    @Test
    public void testListByCluster() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"createdDate\":\"jyxgtczh\",\"manualPrivateLinkServiceConnections\":[{\"properties\":{\"privateLinkServiceId\":\"dshmkxmaehvbbx\",\"groupIds\":[\"pltfnhtba\"],\"requestMessage\":\"gx\",\"privateLinkServiceConnectionState\":{}}},{\"properties\":{\"privateLinkServiceId\":\"kpyklyhp\",\"groupIds\":[\"dpvruud\",\"gzibthostgktstv\",\"xeclzedqbcvhzlhp\",\"odqkdlwwqfb\"],\"requestMessage\":\"lkxt\",\"privateLinkServiceConnectionState\":{}}}]},\"etag\":\"fsmlmbtxhwgfw\",\"id\":\"rtawcoezb\",\"name\":\"hubskhudygooo\",\"type\":\"kqfqjbvl\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        StreamAnalyticsManager manager = StreamAnalyticsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PrivateEndpoint> response
            = manager.privateEndpoints().listByCluster("vpkjpr", "kwcf", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("dshmkxmaehvbbx",
            response.iterator().next().manualPrivateLinkServiceConnections().get(0).privateLinkServiceId());
        Assertions.assertEquals("pltfnhtba",
            response.iterator().next().manualPrivateLinkServiceConnections().get(0).groupIds().get(0));
    }
}
