// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.streamanalytics.models.CompatibilityLevel;
import com.azure.resourcemanager.streamanalytics.models.CompileQuery;
import com.azure.resourcemanager.streamanalytics.models.FunctionInput;
import com.azure.resourcemanager.streamanalytics.models.FunctionOutput;
import com.azure.resourcemanager.streamanalytics.models.JobType;
import com.azure.resourcemanager.streamanalytics.models.QueryFunction;
import com.azure.resourcemanager.streamanalytics.models.QueryInput;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class CompileQueryTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CompileQuery model = BinaryData.fromString(
            "{\"query\":\"yokacspkw\",\"inputs\":[{\"name\":\"dobpxjmflbvvn\",\"type\":\"hrk\"},{\"name\":\"ciwwzjuqkhr\",\"type\":\"ajiwkuo\"},{\"name\":\"oskg\",\"type\":\"sauuimj\"},{\"name\":\"vxieduugidyj\",\"type\":\"rfbyaosvexcso\"}],\"functions\":[{\"name\":\"lhocohslkev\",\"type\":\"eggzfb\",\"bindingType\":\"hfmvfaxkffe\",\"inputs\":[{\"dataType\":\"hl\",\"isConfigurationParameter\":false},{\"dataType\":\"yvshxmz\",\"isConfigurationParameter\":true},{\"dataType\":\"oggigrxwburv\",\"isConfigurationParameter\":false},{\"dataType\":\"nspydptkoenkoukn\",\"isConfigurationParameter\":true}],\"output\":{\"dataType\":\"tiukbldngkpoci\"}},{\"name\":\"azyxoegukg\",\"type\":\"npiucgygevqznty\",\"bindingType\":\"mrbpizcdrqj\",\"inputs\":[{\"dataType\":\"ydnfyhxdeoejz\",\"isConfigurationParameter\":false},{\"dataType\":\"fsj\",\"isConfigurationParameter\":true}],\"output\":{\"dataType\":\"fbishcbkha\"}},{\"name\":\"deyeamdphagalpbu\",\"type\":\"wgipwhono\",\"bindingType\":\"kgshwa\",\"inputs\":[{\"dataType\":\"xzbinjeputt\",\"isConfigurationParameter\":false}],\"output\":{\"dataType\":\"nuzo\"}}],\"jobType\":\"Edge\",\"compatibilityLevel\":\"1.0\"}")
            .toObject(CompileQuery.class);
        Assertions.assertEquals("yokacspkw", model.query());
        Assertions.assertEquals("dobpxjmflbvvn", model.inputs().get(0).name());
        Assertions.assertEquals("hrk", model.inputs().get(0).type());
        Assertions.assertEquals("lhocohslkev", model.functions().get(0).name());
        Assertions.assertEquals("eggzfb", model.functions().get(0).type());
        Assertions.assertEquals("hfmvfaxkffe", model.functions().get(0).bindingType());
        Assertions.assertEquals("hl", model.functions().get(0).inputs().get(0).dataType());
        Assertions.assertEquals(false, model.functions().get(0).inputs().get(0).isConfigurationParameter());
        Assertions.assertEquals("tiukbldngkpoci", model.functions().get(0).output().dataType());
        Assertions.assertEquals(JobType.EDGE, model.jobType());
        Assertions.assertEquals(CompatibilityLevel.ONE_ZERO, model.compatibilityLevel());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CompileQuery model = new CompileQuery().withQuery("yokacspkw")
            .withInputs(Arrays.asList(new QueryInput().withName("dobpxjmflbvvn").withType("hrk"),
                new QueryInput().withName("ciwwzjuqkhr").withType("ajiwkuo"),
                new QueryInput().withName("oskg").withType("sauuimj"),
                new QueryInput().withName("vxieduugidyj").withType("rfbyaosvexcso")))
            .withFunctions(
                Arrays
                    .asList(
                        new QueryFunction().withName("lhocohslkev")
                            .withType("eggzfb")
                            .withBindingType("hfmvfaxkffe")
                            .withInputs(Arrays.asList(
                                new FunctionInput().withDataType("hl").withIsConfigurationParameter(false),
                                new FunctionInput().withDataType("yvshxmz").withIsConfigurationParameter(true),
                                new FunctionInput().withDataType("oggigrxwburv").withIsConfigurationParameter(false),
                                new FunctionInput().withDataType("nspydptkoenkoukn")
                                    .withIsConfigurationParameter(true)))
                            .withOutput(new FunctionOutput().withDataType("tiukbldngkpoci")),
                        new QueryFunction().withName("azyxoegukg")
                            .withType("npiucgygevqznty")
                            .withBindingType("mrbpizcdrqj")
                            .withInputs(Arrays.asList(
                                new FunctionInput().withDataType("ydnfyhxdeoejz").withIsConfigurationParameter(false),
                                new FunctionInput().withDataType("fsj").withIsConfigurationParameter(true)))
                            .withOutput(new FunctionOutput().withDataType("fbishcbkha")),
                        new QueryFunction().withName("deyeamdphagalpbu")
                            .withType("wgipwhono")
                            .withBindingType("kgshwa")
                            .withInputs(Arrays.asList(
                                new FunctionInput().withDataType("xzbinjeputt").withIsConfigurationParameter(false)))
                            .withOutput(new FunctionOutput().withDataType("nuzo"))))
            .withJobType(JobType.EDGE)
            .withCompatibilityLevel(CompatibilityLevel.ONE_ZERO);
        model = BinaryData.fromObject(model).toObject(CompileQuery.class);
        Assertions.assertEquals("yokacspkw", model.query());
        Assertions.assertEquals("dobpxjmflbvvn", model.inputs().get(0).name());
        Assertions.assertEquals("hrk", model.inputs().get(0).type());
        Assertions.assertEquals("lhocohslkev", model.functions().get(0).name());
        Assertions.assertEquals("eggzfb", model.functions().get(0).type());
        Assertions.assertEquals("hfmvfaxkffe", model.functions().get(0).bindingType());
        Assertions.assertEquals("hl", model.functions().get(0).inputs().get(0).dataType());
        Assertions.assertEquals(false, model.functions().get(0).inputs().get(0).isConfigurationParameter());
        Assertions.assertEquals("tiukbldngkpoci", model.functions().get(0).output().dataType());
        Assertions.assertEquals(JobType.EDGE, model.jobType());
        Assertions.assertEquals(CompatibilityLevel.ONE_ZERO, model.compatibilityLevel());
    }
}
