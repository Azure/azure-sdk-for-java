// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.streamanalytics.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.streamanalytics.StreamAnalyticsManager;
import com.azure.resourcemanager.streamanalytics.models.Cluster;
import com.azure.resourcemanager.streamanalytics.models.ClusterSku;
import com.azure.resourcemanager.streamanalytics.models.ClusterSkuName;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ClustersCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"sku\":{\"name\":\"Default\",\"capacity\":515426509},\"etag\":\"frymsgaojfmwnc\",\"properties\":{\"createdDate\":\"2021-05-09T10:35:28Z\",\"clusterId\":\"hirctymoxoftpipi\",\"provisioningState\":\"Succeeded\",\"capacityAllocated\":422952763,\"capacityAssigned\":1967043899},\"location\":\"a\",\"tags\":{\"skasdvlmfwdgzxu\":\"jlihhyus\",\"euzvx\":\"ucvpamrs\",\"xmrhu\":\"risjnhnytxifqjz\",\"cesutrgjupauut\":\"lw\"},\"id\":\"woqhihe\",\"name\":\"qg\",\"type\":\"zpnfqntcypsxj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        StreamAnalyticsManager manager = StreamAnalyticsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Cluster response = manager.clusters()
            .define("z")
            .withRegion("ntps")
            .withExistingResourceGroup("fbshrnsvbuswd")
            .withTags(mapOf("ieoxorggufhyaomt", "ioilqukrydxtq", "jzhpjbibgjmfx", "ghhavgrvkffo"))
            .withSku(new ClusterSku().withName(ClusterSkuName.DEFAULT).withCapacity(449257280))
            .withIfMatch("zbomvzzbtdcqvpni")
            .withIfNoneMatch("ujviylwdshfs")
            .create();

        Assertions.assertEquals("a", response.location());
        Assertions.assertEquals("jlihhyus", response.tags().get("skasdvlmfwdgzxu"));
        Assertions.assertEquals(ClusterSkuName.DEFAULT, response.sku().name());
        Assertions.assertEquals(515426509, response.sku().capacity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
