/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.implementation;

import com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.OutputDataSource;
import com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.Serialization;
import com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.Diagnostics;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.SubResource;

/**
 * An output object, containing all information associated with the named
 * output. All outputs are contained under a streaming job.
 */
@JsonFlatten
public class OutputInner extends SubResource {
    /**
     * Describes the data source that output will be written to. Required on
     * PUT (CreateOrReplace) requests.
     */
    @JsonProperty(value = "properties.datasource")
    private OutputDataSource datasource;

    /**
     * The timeWindow property.
     */
    @JsonProperty(value = "properties.timeWindow")
    private String timeWindow;

    /**
     * The sizeWindow property.
     */
    @JsonProperty(value = "properties.sizeWindow")
    private Double sizeWindow;

    /**
     * Describes how data from an input is serialized or how data is serialized
     * when written to an output. Required on PUT (CreateOrReplace) requests.
     */
    @JsonProperty(value = "properties.serialization")
    private Serialization serialization;

    /**
     * Describes conditions applicable to the Input, Output, or the job
     * overall, that warrant customer attention.
     */
    @JsonProperty(value = "properties.diagnostics", access = JsonProperty.Access.WRITE_ONLY)
    private Diagnostics diagnostics;

    /**
     * The current entity tag for the output. This is an opaque string. You can
     * use it to detect whether the resource has changed between requests. You
     * can also use it in the If-Match or If-None-Match headers for write
     * operations for optimistic concurrency.
     */
    @JsonProperty(value = "properties.etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /**
     * Resource name.
     */
    @JsonProperty(value = "name")
    private String name;

    /**
     * Resource type.
     */
    @JsonProperty(value = "type", access = JsonProperty.Access.WRITE_ONLY)
    private String type;

    /**
     * Get describes the data source that output will be written to. Required on PUT (CreateOrReplace) requests.
     *
     * @return the datasource value
     */
    public OutputDataSource datasource() {
        return this.datasource;
    }

    /**
     * Set describes the data source that output will be written to. Required on PUT (CreateOrReplace) requests.
     *
     * @param datasource the datasource value to set
     * @return the OutputInner object itself.
     */
    public OutputInner withDatasource(OutputDataSource datasource) {
        this.datasource = datasource;
        return this;
    }

    /**
     * Get the timeWindow value.
     *
     * @return the timeWindow value
     */
    public String timeWindow() {
        return this.timeWindow;
    }

    /**
     * Set the timeWindow value.
     *
     * @param timeWindow the timeWindow value to set
     * @return the OutputInner object itself.
     */
    public OutputInner withTimeWindow(String timeWindow) {
        this.timeWindow = timeWindow;
        return this;
    }

    /**
     * Get the sizeWindow value.
     *
     * @return the sizeWindow value
     */
    public Double sizeWindow() {
        return this.sizeWindow;
    }

    /**
     * Set the sizeWindow value.
     *
     * @param sizeWindow the sizeWindow value to set
     * @return the OutputInner object itself.
     */
    public OutputInner withSizeWindow(Double sizeWindow) {
        this.sizeWindow = sizeWindow;
        return this;
    }

    /**
     * Get describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
     *
     * @return the serialization value
     */
    public Serialization serialization() {
        return this.serialization;
    }

    /**
     * Set describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
     *
     * @param serialization the serialization value to set
     * @return the OutputInner object itself.
     */
    public OutputInner withSerialization(Serialization serialization) {
        this.serialization = serialization;
        return this;
    }

    /**
     * Get describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
     *
     * @return the diagnostics value
     */
    public Diagnostics diagnostics() {
        return this.diagnostics;
    }

    /**
     * Get the current entity tag for the output. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
     *
     * @return the etag value
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get resource name.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set resource name.
     *
     * @param name the name value to set
     * @return the OutputInner object itself.
     */
    public OutputInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get resource type.
     *
     * @return the type value
     */
    public String type() {
        return this.type;
    }

}
