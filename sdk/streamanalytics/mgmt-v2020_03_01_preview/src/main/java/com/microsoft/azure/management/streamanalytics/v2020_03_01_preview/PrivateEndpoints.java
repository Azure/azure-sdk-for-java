/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.streamanalytics.v2020_03_01_preview;

import com.microsoft.azure.arm.collection.SupportsCreating;
import rx.Completable;
import rx.Observable;
import com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.implementation.PrivateEndpointsInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing PrivateEndpoints.
 */
public interface PrivateEndpoints extends SupportsCreating<PrivateEndpoint.DefinitionStages.Blank>, HasInner<PrivateEndpointsInner> {
    /**
     * Gets information about the specified Private Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PrivateEndpoint> getAsync(String resourceGroupName, String clusterName, String privateEndpointName);

    /**
     * Lists the private endpoints in the cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PrivateEndpoint> listByClusterAsync(final String resourceGroupName, final String clusterName);

    /**
     * Delete the specified private endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteAsync(String resourceGroupName, String clusterName, String privateEndpointName);

}
