/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.streamanalytics.v2020_03_01_preview;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.microsoft.rest.serializer.JsonFlatten;

/**
 * The properties that are associated with a function.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", defaultImpl = FunctionProperties.class)
@JsonTypeName("FunctionProperties")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "Scalar", value = ScalarFunctionProperties.class),
    @JsonSubTypes.Type(name = "Aggregate", value = AggregateFunctionProperties.class)
})
@JsonFlatten
public class FunctionProperties {
    /**
     * The current entity tag for the function. This is an opaque string. You
     * can use it to detect whether the resource has changed between requests.
     * You can also use it in the If-Match or If-None-Match headers for write
     * operations for optimistic concurrency.
     */
    @JsonProperty(value = "etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /**
     * The inputs property.
     */
    @JsonProperty(value = "properties.inputs")
    private List<FunctionInput> inputs;

    /**
     * The output property.
     */
    @JsonProperty(value = "properties.output")
    private FunctionOutput output;

    /**
     * The binding property.
     */
    @JsonProperty(value = "properties.binding")
    private FunctionBinding binding;

    /**
     * Get the current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
     *
     * @return the etag value
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get the inputs value.
     *
     * @return the inputs value
     */
    public List<FunctionInput> inputs() {
        return this.inputs;
    }

    /**
     * Set the inputs value.
     *
     * @param inputs the inputs value to set
     * @return the FunctionProperties object itself.
     */
    public FunctionProperties withInputs(List<FunctionInput> inputs) {
        this.inputs = inputs;
        return this;
    }

    /**
     * Get the output value.
     *
     * @return the output value
     */
    public FunctionOutput output() {
        return this.output;
    }

    /**
     * Set the output value.
     *
     * @param output the output value to set
     * @return the FunctionProperties object itself.
     */
    public FunctionProperties withOutput(FunctionOutput output) {
        this.output = output;
        return this;
    }

    /**
     * Get the binding value.
     *
     * @return the binding value
     */
    public FunctionBinding binding() {
        return this.binding;
    }

    /**
     * Set the binding value.
     *
     * @param binding the binding value to set
     * @return the FunctionProperties object itself.
     */
    public FunctionProperties withBinding(FunctionBinding binding) {
        this.binding = binding;
        return this;
    }

}
