/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.implementation;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.SubResource;

/**
 * A transformation object, containing all information associated with the
 * named transformation. All transformations are contained under a streaming
 * job.
 */
@JsonFlatten
public class TransformationInner extends SubResource {
    /**
     * Specifies the number of streaming units that the streaming job uses.
     */
    @JsonProperty(value = "properties.streamingUnits")
    private Integer streamingUnits;

    /**
     * Specifies the query that will be run in the streaming job. You can learn
     * more about the Stream Analytics Query Language (SAQL) here:
     * https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT
     * (CreateOrReplace) requests.
     */
    @JsonProperty(value = "properties.query")
    private String query;

    /**
     * The current entity tag for the transformation. This is an opaque string.
     * You can use it to detect whether the resource has changed between
     * requests. You can also use it in the If-Match or If-None-Match headers
     * for write operations for optimistic concurrency.
     */
    @JsonProperty(value = "properties.etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /**
     * Resource name.
     */
    @JsonProperty(value = "name")
    private String name;

    /**
     * Resource type.
     */
    @JsonProperty(value = "type", access = JsonProperty.Access.WRITE_ONLY)
    private String type;

    /**
     * Get specifies the number of streaming units that the streaming job uses.
     *
     * @return the streamingUnits value
     */
    public Integer streamingUnits() {
        return this.streamingUnits;
    }

    /**
     * Set specifies the number of streaming units that the streaming job uses.
     *
     * @param streamingUnits the streamingUnits value to set
     * @return the TransformationInner object itself.
     */
    public TransformationInner withStreamingUnits(Integer streamingUnits) {
        this.streamingUnits = streamingUnits;
        return this;
    }

    /**
     * Get specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.
     *
     * @return the query value
     */
    public String query() {
        return this.query;
    }

    /**
     * Set specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.
     *
     * @param query the query value to set
     * @return the TransformationInner object itself.
     */
    public TransformationInner withQuery(String query) {
        this.query = query;
        return this;
    }

    /**
     * Get the current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
     *
     * @return the etag value
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get resource name.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set resource name.
     *
     * @param name the name value to set
     * @return the TransformationInner object itself.
     */
    public TransformationInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get resource type.
     *
     * @return the type value
     */
    public String type() {
        return this.type;
    }

}
