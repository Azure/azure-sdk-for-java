/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.streamanalytics.v2020_03_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.implementation.PrivateEndpointInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.implementation.StreamAnalyticsManager;
import java.util.List;

/**
 * Type representing PrivateEndpoint.
 */
public interface PrivateEndpoint extends HasInner<PrivateEndpointInner>, Indexable, Refreshable<PrivateEndpoint>, Updatable<PrivateEndpoint.Update>, HasManager<StreamAnalyticsManager> {
    /**
     * @return the etag value.
     */
    String etag();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the properties value.
     */
    PrivateEndpointProperties properties();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the PrivateEndpoint definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithCluster, DefinitionStages.WithIfMatch, DefinitionStages.WithIfNoneMatch, DefinitionStages.WithProperties, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of PrivateEndpoint definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a PrivateEndpoint definition.
         */
        interface Blank extends WithCluster {
        }

        /**
         * The stage of the privateendpoint definition allowing to specify Cluster.
         */
        interface WithCluster {
           /**
            * Specifies resourceGroupName, clusterName.
            * @param resourceGroupName The name of the resource group. The name is case insensitive
            * @param clusterName The name of the cluster
            * @return the next definition stage
            */
            WithIfMatch withExistingCluster(String resourceGroupName, String clusterName);
        }

        /**
         * The stage of the privateendpoint definition allowing to specify IfMatch.
         */
        interface WithIfMatch {
           /**
            * Specifies ifMatch.
            * @param ifMatch The ETag of the resource. Omit this value to always overwrite the current record set. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes
            * @return the next definition stage
            */
            WithIfNoneMatch withIfMatch(String ifMatch);
        }

        /**
         * The stage of the privateendpoint definition allowing to specify IfNoneMatch.
         */
        interface WithIfNoneMatch {
           /**
            * Specifies ifNoneMatch.
            * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing record set. Other values will result in a 412 Pre-condition Failed response
            * @return the next definition stage
            */
            WithProperties withIfNoneMatch(String ifNoneMatch);
        }

        /**
         * The stage of the privateendpoint definition allowing to specify Properties.
         */
        interface WithProperties {
           /**
            * Specifies properties.
            * @param properties The properties associated with a private endpoint
            * @return the next definition stage
            */
            WithCreate withProperties(PrivateEndpointProperties properties);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<PrivateEndpoint> {
        }
    }
    /**
     * The template for a PrivateEndpoint update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<PrivateEndpoint>, UpdateStages.WithIfMatch, UpdateStages.WithIfNoneMatch, UpdateStages.WithProperties {
    }

    /**
     * Grouping of PrivateEndpoint update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the privateendpoint update allowing to specify IfMatch.
         */
        interface WithIfMatch {
            /**
             * Specifies ifMatch.
             * @param ifMatch The ETag of the resource. Omit this value to always overwrite the current record set. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes
             * @return the next update stage
             */
            Update withIfMatch(String ifMatch);
        }

        /**
         * The stage of the privateendpoint update allowing to specify IfNoneMatch.
         */
        interface WithIfNoneMatch {
            /**
             * Specifies ifNoneMatch.
             * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing record set. Other values will result in a 412 Pre-condition Failed response
             * @return the next update stage
             */
            Update withIfNoneMatch(String ifNoneMatch);
        }

        /**
         * The stage of the privateendpoint update allowing to specify Properties.
         */
        interface WithProperties {
            /**
             * Specifies properties.
             * @param properties The properties associated with a private endpoint
             * @return the next update stage
             */
            Update withProperties(PrivateEndpointProperties properties);
        }

    }
}
