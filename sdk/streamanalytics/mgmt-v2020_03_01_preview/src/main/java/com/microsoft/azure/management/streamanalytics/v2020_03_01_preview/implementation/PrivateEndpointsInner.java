/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.ErrorException;
import com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.PrivateEndpointProperties;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PrivateEndpoints.
 */
public class PrivateEndpointsInner {
    /** The Retrofit service to perform REST calls. */
    private PrivateEndpointsService service;
    /** The service client containing this operation class. */
    private StreamAnalyticsManagementClientImpl client;

    /**
     * Initializes an instance of PrivateEndpointsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PrivateEndpointsInner(Retrofit retrofit, StreamAnalyticsManagementClientImpl client) {
        this.service = retrofit.create(PrivateEndpointsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for PrivateEndpoints to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PrivateEndpointsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.PrivateEndpoints createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/clusters/{clusterName}/privateEndpoints/{privateEndpointName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("privateEndpointName") String privateEndpointName, @Query("api-version") String apiVersion, @Header("If-Match") String ifMatch, @Header("If-None-Match") String ifNoneMatch, @Header("accept-language") String acceptLanguage, @Body PrivateEndpointInner privateEndpoint, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.PrivateEndpoints get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/clusters/{clusterName}/privateEndpoints/{privateEndpointName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("privateEndpointName") String privateEndpointName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.PrivateEndpoints delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/clusters/{clusterName}/privateEndpoints/{privateEndpointName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("privateEndpointName") String privateEndpointName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.PrivateEndpoints beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/clusters/{clusterName}/privateEndpoints/{privateEndpointName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("privateEndpointName") String privateEndpointName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.PrivateEndpoints listByCluster" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/clusters/{clusterName}/privateEndpoints")
        Observable<Response<ResponseBody>> listByCluster(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.PrivateEndpoints listByClusterNext" })
        @GET
        Observable<Response<ResponseBody>> listByClusterNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates a Stream Analytics Private Endpoint or replaces an already existing Private Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PrivateEndpointInner object if successful.
     */
    public PrivateEndpointInner createOrUpdate(String resourceGroupName, String clusterName, String privateEndpointName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, clusterName, privateEndpointName).toBlocking().single().body();
    }

    /**
     * Creates a Stream Analytics Private Endpoint or replaces an already existing Private Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PrivateEndpointInner> createOrUpdateAsync(String resourceGroupName, String clusterName, String privateEndpointName, final ServiceCallback<PrivateEndpointInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, clusterName, privateEndpointName), serviceCallback);
    }

    /**
     * Creates a Stream Analytics Private Endpoint or replaces an already existing Private Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateEndpointInner object
     */
    public Observable<PrivateEndpointInner> createOrUpdateAsync(String resourceGroupName, String clusterName, String privateEndpointName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, clusterName, privateEndpointName).map(new Func1<ServiceResponse<PrivateEndpointInner>, PrivateEndpointInner>() {
            @Override
            public PrivateEndpointInner call(ServiceResponse<PrivateEndpointInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a Stream Analytics Private Endpoint or replaces an already existing Private Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateEndpointInner object
     */
    public Observable<ServiceResponse<PrivateEndpointInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String clusterName, String privateEndpointName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (privateEndpointName == null) {
            throw new IllegalArgumentException("Parameter privateEndpointName is required and cannot be null.");
        }
        final String apiVersion = "2020-03-01-preview";
        final String ifMatch = null;
        final String ifNoneMatch = null;
        final PrivateEndpointProperties properties = null;
        PrivateEndpointInner privateEndpoint = new PrivateEndpointInner();
        privateEndpoint.withProperties(null);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, clusterName, privateEndpointName, apiVersion, ifMatch, ifNoneMatch, this.client.acceptLanguage(), privateEndpoint, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PrivateEndpointInner>>>() {
                @Override
                public Observable<ServiceResponse<PrivateEndpointInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PrivateEndpointInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates a Stream Analytics Private Endpoint or replaces an already existing Private Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @param ifMatch The ETag of the resource. Omit this value to always overwrite the current record set. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing record set. Other values will result in a 412 Pre-condition Failed response.
     * @param properties The properties associated with a private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PrivateEndpointInner object if successful.
     */
    public PrivateEndpointInner createOrUpdate(String resourceGroupName, String clusterName, String privateEndpointName, String ifMatch, String ifNoneMatch, PrivateEndpointProperties properties) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, clusterName, privateEndpointName, ifMatch, ifNoneMatch, properties).toBlocking().single().body();
    }

    /**
     * Creates a Stream Analytics Private Endpoint or replaces an already existing Private Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @param ifMatch The ETag of the resource. Omit this value to always overwrite the current record set. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing record set. Other values will result in a 412 Pre-condition Failed response.
     * @param properties The properties associated with a private endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PrivateEndpointInner> createOrUpdateAsync(String resourceGroupName, String clusterName, String privateEndpointName, String ifMatch, String ifNoneMatch, PrivateEndpointProperties properties, final ServiceCallback<PrivateEndpointInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, clusterName, privateEndpointName, ifMatch, ifNoneMatch, properties), serviceCallback);
    }

    /**
     * Creates a Stream Analytics Private Endpoint or replaces an already existing Private Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @param ifMatch The ETag of the resource. Omit this value to always overwrite the current record set. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing record set. Other values will result in a 412 Pre-condition Failed response.
     * @param properties The properties associated with a private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateEndpointInner object
     */
    public Observable<PrivateEndpointInner> createOrUpdateAsync(String resourceGroupName, String clusterName, String privateEndpointName, String ifMatch, String ifNoneMatch, PrivateEndpointProperties properties) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, clusterName, privateEndpointName, ifMatch, ifNoneMatch, properties).map(new Func1<ServiceResponse<PrivateEndpointInner>, PrivateEndpointInner>() {
            @Override
            public PrivateEndpointInner call(ServiceResponse<PrivateEndpointInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a Stream Analytics Private Endpoint or replaces an already existing Private Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @param ifMatch The ETag of the resource. Omit this value to always overwrite the current record set. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new resource to be created, but to prevent updating an existing record set. Other values will result in a 412 Pre-condition Failed response.
     * @param properties The properties associated with a private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateEndpointInner object
     */
    public Observable<ServiceResponse<PrivateEndpointInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String clusterName, String privateEndpointName, String ifMatch, String ifNoneMatch, PrivateEndpointProperties properties) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (privateEndpointName == null) {
            throw new IllegalArgumentException("Parameter privateEndpointName is required and cannot be null.");
        }
        Validator.validate(properties);
        final String apiVersion = "2020-03-01-preview";
        PrivateEndpointInner privateEndpoint = new PrivateEndpointInner();
        privateEndpoint.withProperties(properties);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, clusterName, privateEndpointName, apiVersion, ifMatch, ifNoneMatch, this.client.acceptLanguage(), privateEndpoint, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PrivateEndpointInner>>>() {
                @Override
                public Observable<ServiceResponse<PrivateEndpointInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PrivateEndpointInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PrivateEndpointInner> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PrivateEndpointInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PrivateEndpointInner>() { }.getType())
                .register(201, new TypeToken<PrivateEndpointInner>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Gets information about the specified Private Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PrivateEndpointInner object if successful.
     */
    public PrivateEndpointInner get(String resourceGroupName, String clusterName, String privateEndpointName) {
        return getWithServiceResponseAsync(resourceGroupName, clusterName, privateEndpointName).toBlocking().single().body();
    }

    /**
     * Gets information about the specified Private Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PrivateEndpointInner> getAsync(String resourceGroupName, String clusterName, String privateEndpointName, final ServiceCallback<PrivateEndpointInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, clusterName, privateEndpointName), serviceCallback);
    }

    /**
     * Gets information about the specified Private Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateEndpointInner object
     */
    public Observable<PrivateEndpointInner> getAsync(String resourceGroupName, String clusterName, String privateEndpointName) {
        return getWithServiceResponseAsync(resourceGroupName, clusterName, privateEndpointName).map(new Func1<ServiceResponse<PrivateEndpointInner>, PrivateEndpointInner>() {
            @Override
            public PrivateEndpointInner call(ServiceResponse<PrivateEndpointInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about the specified Private Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateEndpointInner object
     */
    public Observable<ServiceResponse<PrivateEndpointInner>> getWithServiceResponseAsync(String resourceGroupName, String clusterName, String privateEndpointName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (privateEndpointName == null) {
            throw new IllegalArgumentException("Parameter privateEndpointName is required and cannot be null.");
        }
        final String apiVersion = "2020-03-01-preview";
        return service.get(this.client.subscriptionId(), resourceGroupName, clusterName, privateEndpointName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PrivateEndpointInner>>>() {
                @Override
                public Observable<ServiceResponse<PrivateEndpointInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PrivateEndpointInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PrivateEndpointInner> getDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PrivateEndpointInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PrivateEndpointInner>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Delete the specified private endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String clusterName, String privateEndpointName) {
        deleteWithServiceResponseAsync(resourceGroupName, clusterName, privateEndpointName).toBlocking().last().body();
    }

    /**
     * Delete the specified private endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String clusterName, String privateEndpointName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, clusterName, privateEndpointName), serviceCallback);
    }

    /**
     * Delete the specified private endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String clusterName, String privateEndpointName) {
        return deleteWithServiceResponseAsync(resourceGroupName, clusterName, privateEndpointName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete the specified private endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String clusterName, String privateEndpointName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (privateEndpointName == null) {
            throw new IllegalArgumentException("Parameter privateEndpointName is required and cannot be null.");
        }
        final String apiVersion = "2020-03-01-preview";
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, clusterName, privateEndpointName, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete the specified private endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String clusterName, String privateEndpointName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, clusterName, privateEndpointName).toBlocking().single().body();
    }

    /**
     * Delete the specified private endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String clusterName, String privateEndpointName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, clusterName, privateEndpointName), serviceCallback);
    }

    /**
     * Delete the specified private endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String clusterName, String privateEndpointName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, clusterName, privateEndpointName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete the specified private endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param privateEndpointName The name of the private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String clusterName, String privateEndpointName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (privateEndpointName == null) {
            throw new IllegalArgumentException("Parameter privateEndpointName is required and cannot be null.");
        }
        final String apiVersion = "2020-03-01-preview";
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, clusterName, privateEndpointName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Lists the private endpoints in the cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PrivateEndpointInner&gt; object if successful.
     */
    public PagedList<PrivateEndpointInner> listByCluster(final String resourceGroupName, final String clusterName) {
        ServiceResponse<Page<PrivateEndpointInner>> response = listByClusterSinglePageAsync(resourceGroupName, clusterName).toBlocking().single();
        return new PagedList<PrivateEndpointInner>(response.body()) {
            @Override
            public Page<PrivateEndpointInner> nextPage(String nextPageLink) {
                return listByClusterNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the private endpoints in the cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PrivateEndpointInner>> listByClusterAsync(final String resourceGroupName, final String clusterName, final ListOperationCallback<PrivateEndpointInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByClusterSinglePageAsync(resourceGroupName, clusterName),
            new Func1<String, Observable<ServiceResponse<Page<PrivateEndpointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PrivateEndpointInner>>> call(String nextPageLink) {
                    return listByClusterNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the private endpoints in the cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PrivateEndpointInner&gt; object
     */
    public Observable<Page<PrivateEndpointInner>> listByClusterAsync(final String resourceGroupName, final String clusterName) {
        return listByClusterWithServiceResponseAsync(resourceGroupName, clusterName)
            .map(new Func1<ServiceResponse<Page<PrivateEndpointInner>>, Page<PrivateEndpointInner>>() {
                @Override
                public Page<PrivateEndpointInner> call(ServiceResponse<Page<PrivateEndpointInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the private endpoints in the cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PrivateEndpointInner&gt; object
     */
    public Observable<ServiceResponse<Page<PrivateEndpointInner>>> listByClusterWithServiceResponseAsync(final String resourceGroupName, final String clusterName) {
        return listByClusterSinglePageAsync(resourceGroupName, clusterName)
            .concatMap(new Func1<ServiceResponse<Page<PrivateEndpointInner>>, Observable<ServiceResponse<Page<PrivateEndpointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PrivateEndpointInner>>> call(ServiceResponse<Page<PrivateEndpointInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByClusterNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the private endpoints in the cluster.
     *
    ServiceResponse<PageImpl<PrivateEndpointInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<PrivateEndpointInner>> * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PrivateEndpointInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PrivateEndpointInner>>> listByClusterSinglePageAsync(final String resourceGroupName, final String clusterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        final String apiVersion = "2020-03-01-preview";
        return service.listByCluster(this.client.subscriptionId(), resourceGroupName, clusterName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PrivateEndpointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PrivateEndpointInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PrivateEndpointInner>> result = listByClusterDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PrivateEndpointInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PrivateEndpointInner>> listByClusterDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PrivateEndpointInner>, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PrivateEndpointInner>>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Lists the private endpoints in the cluster.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PrivateEndpointInner&gt; object if successful.
     */
    public PagedList<PrivateEndpointInner> listByClusterNext(final String nextPageLink) {
        ServiceResponse<Page<PrivateEndpointInner>> response = listByClusterNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PrivateEndpointInner>(response.body()) {
            @Override
            public Page<PrivateEndpointInner> nextPage(String nextPageLink) {
                return listByClusterNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the private endpoints in the cluster.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PrivateEndpointInner>> listByClusterNextAsync(final String nextPageLink, final ServiceFuture<List<PrivateEndpointInner>> serviceFuture, final ListOperationCallback<PrivateEndpointInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByClusterNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PrivateEndpointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PrivateEndpointInner>>> call(String nextPageLink) {
                    return listByClusterNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the private endpoints in the cluster.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PrivateEndpointInner&gt; object
     */
    public Observable<Page<PrivateEndpointInner>> listByClusterNextAsync(final String nextPageLink) {
        return listByClusterNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PrivateEndpointInner>>, Page<PrivateEndpointInner>>() {
                @Override
                public Page<PrivateEndpointInner> call(ServiceResponse<Page<PrivateEndpointInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the private endpoints in the cluster.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PrivateEndpointInner&gt; object
     */
    public Observable<ServiceResponse<Page<PrivateEndpointInner>>> listByClusterNextWithServiceResponseAsync(final String nextPageLink) {
        return listByClusterNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PrivateEndpointInner>>, Observable<ServiceResponse<Page<PrivateEndpointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PrivateEndpointInner>>> call(ServiceResponse<Page<PrivateEndpointInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByClusterNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the private endpoints in the cluster.
     *
    ServiceResponse<PageImpl<PrivateEndpointInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PrivateEndpointInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PrivateEndpointInner>>> listByClusterNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByClusterNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PrivateEndpointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PrivateEndpointInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PrivateEndpointInner>> result = listByClusterNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PrivateEndpointInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PrivateEndpointInner>> listByClusterNextDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PrivateEndpointInner>, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PrivateEndpointInner>>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

}
