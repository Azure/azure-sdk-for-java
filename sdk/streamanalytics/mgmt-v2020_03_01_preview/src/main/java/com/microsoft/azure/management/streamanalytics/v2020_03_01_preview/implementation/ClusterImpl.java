/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.Cluster;
import rx.Observable;
import com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.ClusterSku;
import com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.ClusterProperties;

class ClusterImpl extends GroupableResourceCoreImpl<Cluster, ClusterInner, ClusterImpl, StreamAnalyticsManager> implements Cluster, Cluster.Definition, Cluster.Update {
    private String cifMatch;
    private String cifNoneMatch;
    private String uifMatch;
    ClusterImpl(String name, ClusterInner inner, StreamAnalyticsManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<Cluster> createResourceAsync() {
        ClustersInner client = this.manager().inner().clusters();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner(), this.cifMatch, this.cifNoneMatch)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Cluster> updateResourceAsync() {
        ClustersInner client = this.manager().inner().clusters();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.inner(), this.uifMatch)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ClusterInner> getInnerAsync() {
        ClustersInner client = this.manager().inner().clusters();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public ClusterProperties properties() {
        return this.inner().properties();
    }

    @Override
    public ClusterSku sku() {
        return this.inner().sku();
    }

    @Override
    public ClusterImpl withIfNoneMatch(String ifNoneMatch) {
        this.cifNoneMatch = ifNoneMatch;
        return this;
    }

    @Override
    public ClusterImpl withIfMatch(String ifMatch) {
        if (isInCreateMode()) {
            this.cifMatch = ifMatch;
        } else {
            this.uifMatch = ifMatch;
        }
        return this;
    }

    @Override
    public ClusterImpl withProperties(ClusterProperties properties) {
        this.inner().withProperties(properties);
        return this;
    }

    @Override
    public ClusterImpl withSku(ClusterSku sku) {
        this.inner().withSku(sku);
        return this;
    }

}
