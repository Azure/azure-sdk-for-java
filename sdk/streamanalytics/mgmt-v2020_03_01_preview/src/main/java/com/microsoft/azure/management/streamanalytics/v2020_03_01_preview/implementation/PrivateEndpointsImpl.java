/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.PrivateEndpoints;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.PrivateEndpoint;

class PrivateEndpointsImpl extends WrapperImpl<PrivateEndpointsInner> implements PrivateEndpoints {
    private final StreamAnalyticsManager manager;

    PrivateEndpointsImpl(StreamAnalyticsManager manager) {
        super(manager.inner().privateEndpoints());
        this.manager = manager;
    }

    public StreamAnalyticsManager manager() {
        return this.manager;
    }

    @Override
    public PrivateEndpointImpl define(String name) {
        return wrapModel(name);
    }

    private PrivateEndpointImpl wrapModel(PrivateEndpointInner inner) {
        return  new PrivateEndpointImpl(inner, manager());
    }

    private PrivateEndpointImpl wrapModel(String name) {
        return new PrivateEndpointImpl(name, this.manager());
    }

    @Override
    public Observable<PrivateEndpoint> listByClusterAsync(final String resourceGroupName, final String clusterName) {
        PrivateEndpointsInner client = this.inner();
        return client.listByClusterAsync(resourceGroupName, clusterName)
        .flatMapIterable(new Func1<Page<PrivateEndpointInner>, Iterable<PrivateEndpointInner>>() {
            @Override
            public Iterable<PrivateEndpointInner> call(Page<PrivateEndpointInner> page) {
                return page.items();
            }
        })
        .map(new Func1<PrivateEndpointInner, PrivateEndpoint>() {
            @Override
            public PrivateEndpoint call(PrivateEndpointInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<PrivateEndpoint> getAsync(String resourceGroupName, String clusterName, String privateEndpointName) {
        PrivateEndpointsInner client = this.inner();
        return client.getAsync(resourceGroupName, clusterName, privateEndpointName)
        .flatMap(new Func1<PrivateEndpointInner, Observable<PrivateEndpoint>>() {
            @Override
            public Observable<PrivateEndpoint> call(PrivateEndpointInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((PrivateEndpoint)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String clusterName, String privateEndpointName) {
        PrivateEndpointsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, clusterName, privateEndpointName).toCompletable();
    }

}
