/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.Functions;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.ResourceTestStatus;
import com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.Function;

class FunctionsImpl extends WrapperImpl<FunctionsInner> implements Functions {
    private final StreamAnalyticsManager manager;

    FunctionsImpl(StreamAnalyticsManager manager) {
        super(manager.inner().functions());
        this.manager = manager;
    }

    public StreamAnalyticsManager manager() {
        return this.manager;
    }

    @Override
    public FunctionImpl define(String name) {
        return wrapModel(name);
    }

    private FunctionImpl wrapModel(FunctionInner inner) {
        return  new FunctionImpl(inner, manager());
    }

    private FunctionImpl wrapModel(String name) {
        return new FunctionImpl(name, this.manager());
    }

    @Override
    public Observable<ResourceTestStatus> testAsync(String resourceGroupName, String jobName, String functionName) {
        FunctionsInner client = this.inner();
        return client.testAsync(resourceGroupName, jobName, functionName)
        .map(new Func1<ResourceTestStatusInner, ResourceTestStatus>() {
            @Override
            public ResourceTestStatus call(ResourceTestStatusInner inner) {
                return new ResourceTestStatusImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Function> retrieveDefaultDefinitionAsync(String resourceGroupName, String jobName, String functionName) {
        FunctionsInner client = this.inner();
        return client.retrieveDefaultDefinitionAsync(resourceGroupName, jobName, functionName)
        .map(new Func1<FunctionInner, Function>() {
            @Override
            public Function call(FunctionInner inner) {
                return new FunctionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Function> listByStreamingJobAsync(final String resourceGroupName, final String jobName) {
        FunctionsInner client = this.inner();
        return client.listByStreamingJobAsync(resourceGroupName, jobName)
        .flatMapIterable(new Func1<Page<FunctionInner>, Iterable<FunctionInner>>() {
            @Override
            public Iterable<FunctionInner> call(Page<FunctionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<FunctionInner, Function>() {
            @Override
            public Function call(FunctionInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<Function> getAsync(String resourceGroupName, String jobName, String functionName) {
        FunctionsInner client = this.inner();
        return client.getAsync(resourceGroupName, jobName, functionName)
        .flatMap(new Func1<FunctionInner, Observable<Function>>() {
            @Override
            public Observable<Function> call(FunctionInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((Function)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String jobName, String functionName) {
        FunctionsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, jobName, functionName).toCompletable();
    }

}
