/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.implementation;

import com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.PrivateEndpoint;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.PrivateEndpointProperties;
import java.util.List;
import rx.functions.Func1;

class PrivateEndpointImpl extends CreatableUpdatableImpl<PrivateEndpoint, PrivateEndpointInner, PrivateEndpointImpl> implements PrivateEndpoint, PrivateEndpoint.Definition, PrivateEndpoint.Update {
    private final StreamAnalyticsManager manager;
    private String resourceGroupName;
    private String clusterName;
    private String privateEndpointName;
    private String cifMatch;
    private String cifNoneMatch;
    private PrivateEndpointProperties cproperties;
    private String uifMatch;
    private String uifNoneMatch;
    private PrivateEndpointProperties uproperties;

    PrivateEndpointImpl(String name, StreamAnalyticsManager manager) {
        super(name, new PrivateEndpointInner());
        this.manager = manager;
        // Set resource name
        this.privateEndpointName = name;
        //
        this.cproperties = new PrivateEndpointProperties();
        this.uproperties = new PrivateEndpointProperties();
    }

    PrivateEndpointImpl(PrivateEndpointInner inner, StreamAnalyticsManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.privateEndpointName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.clusterName = IdParsingUtils.getValueFromIdByName(inner.id(), "clusters");
        this.privateEndpointName = IdParsingUtils.getValueFromIdByName(inner.id(), "privateEndpoints");
        //
        this.cproperties = new PrivateEndpointProperties();
        this.uproperties = new PrivateEndpointProperties();
    }

    @Override
    public StreamAnalyticsManager manager() {
        return this.manager;
    }

    @Override
    public Observable<PrivateEndpoint> createResourceAsync() {
        PrivateEndpointsInner client = this.manager().inner().privateEndpoints();
        return client.createOrUpdateAsync(this.resourceGroupName, this.clusterName, this.privateEndpointName, this.cifMatch, this.cifNoneMatch, this.cproperties)
            .map(new Func1<PrivateEndpointInner, PrivateEndpointInner>() {
               @Override
               public PrivateEndpointInner call(PrivateEndpointInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<PrivateEndpoint> updateResourceAsync() {
        PrivateEndpointsInner client = this.manager().inner().privateEndpoints();
        return client.createOrUpdateAsync(this.resourceGroupName, this.clusterName, this.privateEndpointName, this.uifMatch, this.uifNoneMatch, this.uproperties)
            .map(new Func1<PrivateEndpointInner, PrivateEndpointInner>() {
               @Override
               public PrivateEndpointInner call(PrivateEndpointInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<PrivateEndpointInner> getInnerAsync() {
        PrivateEndpointsInner client = this.manager().inner().privateEndpoints();
        return client.getAsync(this.resourceGroupName, this.clusterName, this.privateEndpointName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.cproperties = new PrivateEndpointProperties();
        this.uproperties = new PrivateEndpointProperties();
    }

    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public PrivateEndpointProperties properties() {
        return this.inner().properties();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public PrivateEndpointImpl withExistingCluster(String resourceGroupName, String clusterName) {
        this.resourceGroupName = resourceGroupName;
        this.clusterName = clusterName;
        return this;
    }

    @Override
    public PrivateEndpointImpl withIfMatch(String ifMatch) {
        if (isInCreateMode()) {
            this.cifMatch = ifMatch;
        } else {
            this.uifMatch = ifMatch;
        }
        return this;
    }

    @Override
    public PrivateEndpointImpl withIfNoneMatch(String ifNoneMatch) {
        if (isInCreateMode()) {
            this.cifNoneMatch = ifNoneMatch;
        } else {
            this.uifNoneMatch = ifNoneMatch;
        }
        return this;
    }

    @Override
    public PrivateEndpointImpl withProperties(PrivateEndpointProperties properties) {
        if (isInCreateMode()) {
            this.cproperties = properties;
        } else {
            this.uproperties = properties;
        }
        return this;
    }

}
