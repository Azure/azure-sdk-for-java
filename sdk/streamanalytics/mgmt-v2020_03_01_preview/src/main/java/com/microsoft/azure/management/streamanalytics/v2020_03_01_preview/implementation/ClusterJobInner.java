/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.implementation;

import com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.JobState;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A streaming job.
 */
public class ClusterJobInner {
    /**
     * Resource ID of the streaming job.
     */
    @JsonProperty(value = "id", access = JsonProperty.Access.WRITE_ONLY)
    private String id;

    /**
     * The number of streaming units that are used by the streaming job.
     */
    @JsonProperty(value = "streamingUnits", access = JsonProperty.Access.WRITE_ONLY)
    private Integer streamingUnits;

    /**
     * Possible values include: 'Created', 'Starting', 'Running', 'Stopping',
     * 'Stopped', 'Deleting', 'Failed', 'Degraded', 'Restarting', 'Scaling'.
     */
    @JsonProperty(value = "jobState")
    private JobState jobState;

    /**
     * Get resource ID of the streaming job.
     *
     * @return the id value
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the number of streaming units that are used by the streaming job.
     *
     * @return the streamingUnits value
     */
    public Integer streamingUnits() {
        return this.streamingUnits;
    }

    /**
     * Get possible values include: 'Created', 'Starting', 'Running', 'Stopping', 'Stopped', 'Deleting', 'Failed', 'Degraded', 'Restarting', 'Scaling'.
     *
     * @return the jobState value
     */
    public JobState jobState() {
        return this.jobState;
    }

    /**
     * Set possible values include: 'Created', 'Starting', 'Running', 'Stopping', 'Stopped', 'Deleting', 'Failed', 'Degraded', 'Restarting', 'Scaling'.
     *
     * @param jobState the jobState value to set
     * @return the ClusterJobInner object itself.
     */
    public ClusterJobInner withJobState(JobState jobState) {
        this.jobState = jobState;
        return this;
    }

}
