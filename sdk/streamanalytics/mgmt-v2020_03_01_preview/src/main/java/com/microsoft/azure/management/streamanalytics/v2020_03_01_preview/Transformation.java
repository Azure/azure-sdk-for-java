/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.streamanalytics.v2020_03_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.implementation.TransformationInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.streamanalytics.v2020_03_01_preview.implementation.StreamAnalyticsManager;

/**
 * Type representing Transformation.
 */
public interface Transformation extends HasInner<TransformationInner>, Indexable, Refreshable<Transformation>, Updatable<Transformation.Update>, HasManager<StreamAnalyticsManager> {
    /**
     * @return the etag value.
     */
    String etag();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the query value.
     */
    String query();

    /**
     * @return the streamingUnits value.
     */
    Integer streamingUnits();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the Transformation definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithStreamingjob, DefinitionStages.WithIfMatch, DefinitionStages.WithIfNoneMatch, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of Transformation definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a Transformation definition.
         */
        interface Blank extends WithStreamingjob {
        }

        /**
         * The stage of the transformation definition allowing to specify Streamingjob.
         */
        interface WithStreamingjob {
           /**
            * Specifies resourceGroupName, jobName.
            * @param resourceGroupName The name of the resource group. The name is case insensitive
            * @param jobName The name of the streaming job
            * @return the next definition stage
            */
            WithIfMatch withExistingStreamingjob(String resourceGroupName, String jobName);
        }

        /**
         * The stage of the transformation definition allowing to specify IfMatch.
         */
        interface WithIfMatch {
           /**
            * Specifies ifMatch.
            * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current transformation. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes
            * @return the next definition stage
            */
            WithIfNoneMatch withIfMatch(String ifMatch);
        }

        /**
         * The stage of the transformation definition allowing to specify IfNoneMatch.
         */
        interface WithIfNoneMatch {
           /**
            * Specifies ifNoneMatch.
            * @param ifNoneMatch Set to '*' to allow a new transformation to be created, but to prevent updating an existing transformation. Other values will result in a 412 Pre-condition Failed response
            * @return the next definition stage
            */
            WithCreate withIfNoneMatch(String ifNoneMatch);
        }

        /**
         * The stage of the transformation definition allowing to specify Name.
         */
        interface WithName {
            /**
             * Specifies name.
             * @param name Resource name
             * @return the next definition stage
             */
            WithCreate withName(String name);
        }

        /**
         * The stage of the transformation definition allowing to specify Query.
         */
        interface WithQuery {
            /**
             * Specifies query.
             * @param query Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests
             * @return the next definition stage
             */
            WithCreate withQuery(String query);
        }

        /**
         * The stage of the transformation definition allowing to specify StreamingUnits.
         */
        interface WithStreamingUnits {
            /**
             * Specifies streamingUnits.
             * @param streamingUnits Specifies the number of streaming units that the streaming job uses
             * @return the next definition stage
             */
            WithCreate withStreamingUnits(Integer streamingUnits);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<Transformation>, DefinitionStages.WithName, DefinitionStages.WithQuery, DefinitionStages.WithStreamingUnits {
        }
    }
    /**
     * The template for a Transformation update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<Transformation>, UpdateStages.WithIfMatch, UpdateStages.WithName, UpdateStages.WithQuery, UpdateStages.WithStreamingUnits {
    }

    /**
     * Grouping of Transformation update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the transformation update allowing to specify IfMatch.
         */
        interface WithIfMatch {
            /**
             * Specifies ifMatch.
             * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current transformation. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes
             * @return the next update stage
             */
            Update withIfMatch(String ifMatch);
        }

        /**
         * The stage of the transformation update allowing to specify Name.
         */
        interface WithName {
            /**
             * Specifies name.
             * @param name Resource name
             * @return the next update stage
             */
            Update withName(String name);
        }

        /**
         * The stage of the transformation update allowing to specify Query.
         */
        interface WithQuery {
            /**
             * Specifies query.
             * @param query Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests
             * @return the next update stage
             */
            Update withQuery(String query);
        }

        /**
         * The stage of the transformation update allowing to specify StreamingUnits.
         */
        interface WithStreamingUnits {
            /**
             * Specifies streamingUnits.
             * @param streamingUnits Specifies the number of streaming units that the streaming job uses
             * @return the next update stage
             */
            Update withStreamingUnits(Integer streamingUnits);
        }

    }
}
