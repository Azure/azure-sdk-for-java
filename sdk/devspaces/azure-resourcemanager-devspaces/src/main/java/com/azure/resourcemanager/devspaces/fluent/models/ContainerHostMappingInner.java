// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devspaces.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Container host mapping object specifying the Container host resource ID and its associated Controller resource. */
@Fluent
public final class ContainerHostMappingInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ContainerHostMappingInner.class);

    /*
     * ARM ID of the Container Host resource
     */
    @JsonProperty(value = "containerHostResourceId")
    private String containerHostResourceId;

    /*
     * ARM ID of the mapped Controller resource
     */
    @JsonProperty(value = "mappedControllerResourceId", access = JsonProperty.Access.WRITE_ONLY)
    private String mappedControllerResourceId;

    /**
     * Get the containerHostResourceId property: ARM ID of the Container Host resource.
     *
     * @return the containerHostResourceId value.
     */
    public String containerHostResourceId() {
        return this.containerHostResourceId;
    }

    /**
     * Set the containerHostResourceId property: ARM ID of the Container Host resource.
     *
     * @param containerHostResourceId the containerHostResourceId value to set.
     * @return the ContainerHostMappingInner object itself.
     */
    public ContainerHostMappingInner withContainerHostResourceId(String containerHostResourceId) {
        this.containerHostResourceId = containerHostResourceId;
        return this;
    }

    /**
     * Get the mappedControllerResourceId property: ARM ID of the mapped Controller resource.
     *
     * @return the mappedControllerResourceId value.
     */
    public String mappedControllerResourceId() {
        return this.mappedControllerResourceId;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
