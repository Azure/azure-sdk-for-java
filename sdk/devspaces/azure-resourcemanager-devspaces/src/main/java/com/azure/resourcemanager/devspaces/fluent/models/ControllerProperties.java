// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devspaces.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devspaces.models.ProvisioningState;
import java.io.IOException;

/**
 * The ControllerProperties model.
 */
@Fluent
public final class ControllerProperties implements JsonSerializable<ControllerProperties> {
    /*
     * Provisioning state of the Azure Dev Spaces Controller.
     */
    private ProvisioningState provisioningState;

    /*
     * DNS suffix for public endpoints running in the Azure Dev Spaces Controller.
     */
    private String hostSuffix;

    /*
     * DNS name for accessing DataPlane services
     */
    private String dataPlaneFqdn;

    /*
     * DNS of the target container host's API server
     */
    private String targetContainerHostApiServerFqdn;

    /*
     * Resource ID of the target container host
     */
    private String targetContainerHostResourceId;

    /*
     * Credentials of the target container host (base64).
     */
    private String targetContainerHostCredentialsBase64;

    /**
     * Creates an instance of ControllerProperties class.
     */
    public ControllerProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state of the Azure Dev Spaces Controller.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the hostSuffix property: DNS suffix for public endpoints running in the Azure Dev Spaces Controller.
     * 
     * @return the hostSuffix value.
     */
    public String hostSuffix() {
        return this.hostSuffix;
    }

    /**
     * Get the dataPlaneFqdn property: DNS name for accessing DataPlane services.
     * 
     * @return the dataPlaneFqdn value.
     */
    public String dataPlaneFqdn() {
        return this.dataPlaneFqdn;
    }

    /**
     * Get the targetContainerHostApiServerFqdn property: DNS of the target container host's API server.
     * 
     * @return the targetContainerHostApiServerFqdn value.
     */
    public String targetContainerHostApiServerFqdn() {
        return this.targetContainerHostApiServerFqdn;
    }

    /**
     * Get the targetContainerHostResourceId property: Resource ID of the target container host.
     * 
     * @return the targetContainerHostResourceId value.
     */
    public String targetContainerHostResourceId() {
        return this.targetContainerHostResourceId;
    }

    /**
     * Set the targetContainerHostResourceId property: Resource ID of the target container host.
     * 
     * @param targetContainerHostResourceId the targetContainerHostResourceId value to set.
     * @return the ControllerProperties object itself.
     */
    public ControllerProperties withTargetContainerHostResourceId(String targetContainerHostResourceId) {
        this.targetContainerHostResourceId = targetContainerHostResourceId;
        return this;
    }

    /**
     * Get the targetContainerHostCredentialsBase64 property: Credentials of the target container host (base64).
     * 
     * @return the targetContainerHostCredentialsBase64 value.
     */
    public String targetContainerHostCredentialsBase64() {
        return this.targetContainerHostCredentialsBase64;
    }

    /**
     * Set the targetContainerHostCredentialsBase64 property: Credentials of the target container host (base64).
     * 
     * @param targetContainerHostCredentialsBase64 the targetContainerHostCredentialsBase64 value to set.
     * @return the ControllerProperties object itself.
     */
    public ControllerProperties withTargetContainerHostCredentialsBase64(String targetContainerHostCredentialsBase64) {
        this.targetContainerHostCredentialsBase64 = targetContainerHostCredentialsBase64;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetContainerHostResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetContainerHostResourceId in model ControllerProperties"));
        }
        if (targetContainerHostCredentialsBase64() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetContainerHostCredentialsBase64 in model ControllerProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ControllerProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetContainerHostResourceId", this.targetContainerHostResourceId);
        jsonWriter.writeStringField("targetContainerHostCredentialsBase64", this.targetContainerHostCredentialsBase64);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ControllerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ControllerProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ControllerProperties.
     */
    public static ControllerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ControllerProperties deserializedControllerProperties = new ControllerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetContainerHostResourceId".equals(fieldName)) {
                    deserializedControllerProperties.targetContainerHostResourceId = reader.getString();
                } else if ("targetContainerHostCredentialsBase64".equals(fieldName)) {
                    deserializedControllerProperties.targetContainerHostCredentialsBase64 = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedControllerProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("hostSuffix".equals(fieldName)) {
                    deserializedControllerProperties.hostSuffix = reader.getString();
                } else if ("dataPlaneFqdn".equals(fieldName)) {
                    deserializedControllerProperties.dataPlaneFqdn = reader.getString();
                } else if ("targetContainerHostApiServerFqdn".equals(fieldName)) {
                    deserializedControllerProperties.targetContainerHostApiServerFqdn = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedControllerProperties;
        });
    }
}
