// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devspaces.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devspaces.models.ControllerConnectionDetails;
import java.io.IOException;
import java.util.List;

/**
 * The ControllerConnectionDetailsList model.
 */
@Fluent
public final class ControllerConnectionDetailsListInner
    implements JsonSerializable<ControllerConnectionDetailsListInner> {
    /*
     * List of Azure Dev Spaces Controller connection details.
     */
    private List<ControllerConnectionDetails> connectionDetailsList;

    /**
     * Creates an instance of ControllerConnectionDetailsListInner class.
     */
    public ControllerConnectionDetailsListInner() {
    }

    /**
     * Get the connectionDetailsList property: List of Azure Dev Spaces Controller connection details.
     * 
     * @return the connectionDetailsList value.
     */
    public List<ControllerConnectionDetails> connectionDetailsList() {
        return this.connectionDetailsList;
    }

    /**
     * Set the connectionDetailsList property: List of Azure Dev Spaces Controller connection details.
     * 
     * @param connectionDetailsList the connectionDetailsList value to set.
     * @return the ControllerConnectionDetailsListInner object itself.
     */
    public ControllerConnectionDetailsListInner
        withConnectionDetailsList(List<ControllerConnectionDetails> connectionDetailsList) {
        this.connectionDetailsList = connectionDetailsList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connectionDetailsList() != null) {
            connectionDetailsList().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("connectionDetailsList", this.connectionDetailsList,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ControllerConnectionDetailsListInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ControllerConnectionDetailsListInner if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ControllerConnectionDetailsListInner.
     */
    public static ControllerConnectionDetailsListInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ControllerConnectionDetailsListInner deserializedControllerConnectionDetailsListInner
                = new ControllerConnectionDetailsListInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectionDetailsList".equals(fieldName)) {
                    List<ControllerConnectionDetails> connectionDetailsList
                        = reader.readArray(reader1 -> ControllerConnectionDetails.fromJson(reader1));
                    deserializedControllerConnectionDetailsListInner.connectionDetailsList = connectionDetailsList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedControllerConnectionDetailsListInner;
        });
    }
}
