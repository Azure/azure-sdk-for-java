/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.devspaces.v2018_06_01_preview.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.devspaces.v2018_06_01_preview.Controller;
import rx.Observable;
import com.microsoft.azure.management.devspaces.v2018_06_01_preview.ProvisioningState;
import com.microsoft.azure.management.devspaces.v2018_06_01_preview.Sku;

class ControllerImpl extends GroupableResourceCoreImpl<Controller, ControllerInner, ControllerImpl, DevSpacesManager> implements Controller, Controller.Definition, Controller.Update {
    ControllerImpl(String name, ControllerInner inner, DevSpacesManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<Controller> createResourceAsync() {
        ControllersInner client = this.manager().inner().controllers();
        return client.createAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Controller> updateResourceAsync() {
        ControllersInner client = this.manager().inner().controllers();
        return client.createAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ControllerInner> getInnerAsync() {
        ControllersInner client = this.manager().inner().controllers();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String dataPlaneFqdn() {
        return this.inner().dataPlaneFqdn();
    }

    @Override
    public String hostSuffix() {
        return this.inner().hostSuffix();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public Sku sku() {
        return this.inner().sku();
    }

    @Override
    public String targetContainerHostCredentialsBase64() {
        return this.inner().targetContainerHostCredentialsBase64();
    }

    @Override
    public String targetContainerHostResourceId() {
        return this.inner().targetContainerHostResourceId();
    }

    @Override
    public ControllerImpl withHostSuffix(String hostSuffix) {
        this.inner().withHostSuffix(hostSuffix);
        return this;
    }

    @Override
    public ControllerImpl withSku(Sku sku) {
        this.inner().withSku(sku);
        return this;
    }

    @Override
    public ControllerImpl withTargetContainerHostCredentialsBase64(String targetContainerHostCredentialsBase64) {
        this.inner().withTargetContainerHostCredentialsBase64(targetContainerHostCredentialsBase64);
        return this;
    }

    @Override
    public ControllerImpl withTargetContainerHostResourceId(String targetContainerHostResourceId) {
        this.inner().withTargetContainerHostResourceId(targetContainerHostResourceId);
        return this;
    }

}
