// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservice.nodecustom.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerservice.nodecustom.fluent.models.NodeCustomizationInner;
import com.azure.resourcemanager.containerservice.nodecustom.models.ExecutionPoint;
import com.azure.resourcemanager.containerservice.nodecustom.models.NodeCustomizationProperties;
import com.azure.resourcemanager.containerservice.nodecustom.models.NodeCustomizationScript;
import com.azure.resourcemanager.containerservice.nodecustom.models.ScriptType;
import com.azure.resourcemanager.containerservice.nodecustom.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NodeCustomizationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NodeCustomizationInner model = BinaryData.fromString(
            "{\"properties\":{\"containerImages\":[\"bpzvgn\",\"zsymglzufcyzkohd\",\"ihanuf\",\"fcbjysagithxqha\"],\"identityProfile\":{\"principalId\":\"pikxwczbyscnpqxu\",\"clientId\":\"vyq\"},\"version\":\"wby\",\"provisioningState\":\"Deleting\",\"customizationScripts\":[{\"name\":\"dumjgrtfwvuk\",\"executionPoint\":\"NodeImageBuildTime\",\"scriptType\":\"PowerShell\",\"script\":\"dcc\",\"rebootAfter\":false}]},\"eTag\":\"jcny\",\"location\":\"hkryhtn\",\"tags\":{\"okjye\":\"zw\",\"jnchgej\":\"kkvnipjox\",\"huxinpmqnj\":\"podmailzydehojwy\"},\"id\":\"qwixjspro\",\"name\":\"vcputegj\",\"type\":\"wmfdatscmdvpjhul\"}")
            .toObject(NodeCustomizationInner.class);
        Assertions.assertEquals("hkryhtn", model.location());
        Assertions.assertEquals("zw", model.tags().get("okjye"));
        Assertions.assertEquals("bpzvgn", model.properties().containerImages().get(0));
        Assertions.assertEquals("dumjgrtfwvuk", model.properties().customizationScripts().get(0).name());
        Assertions.assertEquals(ExecutionPoint.NODE_IMAGE_BUILD_TIME,
            model.properties().customizationScripts().get(0).executionPoint());
        Assertions.assertEquals(ScriptType.POWER_SHELL, model.properties().customizationScripts().get(0).scriptType());
        Assertions.assertEquals("dcc", model.properties().customizationScripts().get(0).script());
        Assertions.assertFalse(model.properties().customizationScripts().get(0).rebootAfter());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NodeCustomizationInner model = new NodeCustomizationInner().withLocation("hkryhtn")
            .withTags(mapOf("okjye", "zw", "jnchgej", "kkvnipjox", "huxinpmqnj", "podmailzydehojwy"))
            .withProperties(new NodeCustomizationProperties()
                .withContainerImages(Arrays.asList("bpzvgn", "zsymglzufcyzkohd", "ihanuf", "fcbjysagithxqha"))
                .withIdentityProfile(new UserAssignedIdentity())
                .withCustomizationScripts(Arrays.asList(new NodeCustomizationScript().withName("dumjgrtfwvuk")
                    .withExecutionPoint(ExecutionPoint.NODE_IMAGE_BUILD_TIME)
                    .withScriptType(ScriptType.POWER_SHELL)
                    .withScript("dcc")
                    .withRebootAfter(false))));
        model = BinaryData.fromObject(model).toObject(NodeCustomizationInner.class);
        Assertions.assertEquals("hkryhtn", model.location());
        Assertions.assertEquals("zw", model.tags().get("okjye"));
        Assertions.assertEquals("bpzvgn", model.properties().containerImages().get(0));
        Assertions.assertEquals("dumjgrtfwvuk", model.properties().customizationScripts().get(0).name());
        Assertions.assertEquals(ExecutionPoint.NODE_IMAGE_BUILD_TIME,
            model.properties().customizationScripts().get(0).executionPoint());
        Assertions.assertEquals(ScriptType.POWER_SHELL, model.properties().customizationScripts().get(0).scriptType());
        Assertions.assertEquals("dcc", model.properties().customizationScripts().get(0).script());
        Assertions.assertFalse(model.properties().customizationScripts().get(0).rebootAfter());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
