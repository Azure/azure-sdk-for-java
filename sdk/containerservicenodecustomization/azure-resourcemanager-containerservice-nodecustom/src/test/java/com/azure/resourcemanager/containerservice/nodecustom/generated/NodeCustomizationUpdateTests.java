// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservice.nodecustom.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.containerservice.nodecustom.models.ExecutionPoint;
import com.azure.resourcemanager.containerservice.nodecustom.models.NodeCustomizationScript;
import com.azure.resourcemanager.containerservice.nodecustom.models.NodeCustomizationUpdate;
import com.azure.resourcemanager.containerservice.nodecustom.models.NodeCustomizationUpdateProperties;
import com.azure.resourcemanager.containerservice.nodecustom.models.ScriptType;
import com.azure.resourcemanager.containerservice.nodecustom.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NodeCustomizationUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NodeCustomizationUpdate model = BinaryData.fromString(
            "{\"tags\":{\"ninmayhuyb\":\"jlxofpdvhpfxxyp\",\"ooginuvamih\":\"kpode\",\"vyevcciqi\":\"ognarxzxtheotus\"},\"properties\":{\"containerImages\":[\"ngbwjz\"],\"identityProfile\":{\"principalId\":\"ygxgispemvtz\",\"clientId\":\"ufubl\"},\"customizationScripts\":[{\"name\":\"xqeofjaeqjhqjba\",\"executionPoint\":\"NodeImageBuildTime\",\"scriptType\":\"PowerShell\",\"script\":\"mjqulngsn\",\"rebootAfter\":true},{\"name\":\"ybkzgcwr\",\"executionPoint\":\"NodeProvisionTime\",\"scriptType\":\"PowerShell\",\"script\":\"xwrljdouskcqvkoc\",\"rebootAfter\":true}]}}")
            .toObject(NodeCustomizationUpdate.class);
        Assertions.assertEquals("jlxofpdvhpfxxyp", model.tags().get("ninmayhuyb"));
        Assertions.assertEquals("ngbwjz", model.properties().containerImages().get(0));
        Assertions.assertEquals("xqeofjaeqjhqjba", model.properties().customizationScripts().get(0).name());
        Assertions.assertEquals(ExecutionPoint.NODE_IMAGE_BUILD_TIME,
            model.properties().customizationScripts().get(0).executionPoint());
        Assertions.assertEquals(ScriptType.POWER_SHELL, model.properties().customizationScripts().get(0).scriptType());
        Assertions.assertEquals("mjqulngsn", model.properties().customizationScripts().get(0).script());
        Assertions.assertTrue(model.properties().customizationScripts().get(0).rebootAfter());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NodeCustomizationUpdate model = new NodeCustomizationUpdate()
            .withTags(mapOf("ninmayhuyb", "jlxofpdvhpfxxyp", "ooginuvamih", "kpode", "vyevcciqi", "ognarxzxtheotus"))
            .withProperties(new NodeCustomizationUpdateProperties().withContainerImages(Arrays.asList("ngbwjz"))
                .withIdentityProfile(new UserAssignedIdentity())
                .withCustomizationScripts(Arrays.asList(
                    new NodeCustomizationScript().withName("xqeofjaeqjhqjba")
                        .withExecutionPoint(ExecutionPoint.NODE_IMAGE_BUILD_TIME)
                        .withScriptType(ScriptType.POWER_SHELL)
                        .withScript("mjqulngsn")
                        .withRebootAfter(true),
                    new NodeCustomizationScript().withName("ybkzgcwr")
                        .withExecutionPoint(ExecutionPoint.NODE_PROVISION_TIME)
                        .withScriptType(ScriptType.POWER_SHELL)
                        .withScript("xwrljdouskcqvkoc")
                        .withRebootAfter(true))));
        model = BinaryData.fromObject(model).toObject(NodeCustomizationUpdate.class);
        Assertions.assertEquals("jlxofpdvhpfxxyp", model.tags().get("ninmayhuyb"));
        Assertions.assertEquals("ngbwjz", model.properties().containerImages().get(0));
        Assertions.assertEquals("xqeofjaeqjhqjba", model.properties().customizationScripts().get(0).name());
        Assertions.assertEquals(ExecutionPoint.NODE_IMAGE_BUILD_TIME,
            model.properties().customizationScripts().get(0).executionPoint());
        Assertions.assertEquals(ScriptType.POWER_SHELL, model.properties().customizationScripts().get(0).scriptType());
        Assertions.assertEquals("mjqulngsn", model.properties().customizationScripts().get(0).script());
        Assertions.assertTrue(model.properties().customizationScripts().get(0).rebootAfter());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
