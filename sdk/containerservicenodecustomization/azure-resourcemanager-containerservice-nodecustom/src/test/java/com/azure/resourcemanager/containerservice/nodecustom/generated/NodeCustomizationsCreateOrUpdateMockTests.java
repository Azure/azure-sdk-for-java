// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservice.nodecustom.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.containerservice.nodecustom.ContainerServiceNodeCustomizationManager;
import com.azure.resourcemanager.containerservice.nodecustom.models.ExecutionPoint;
import com.azure.resourcemanager.containerservice.nodecustom.models.NodeCustomization;
import com.azure.resourcemanager.containerservice.nodecustom.models.NodeCustomizationProperties;
import com.azure.resourcemanager.containerservice.nodecustom.models.NodeCustomizationScript;
import com.azure.resourcemanager.containerservice.nodecustom.models.ScriptType;
import com.azure.resourcemanager.containerservice.nodecustom.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NodeCustomizationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"containerImages\":[\"hbttkphyw\"],\"identityProfile\":{\"principalId\":\"jtoqne\",\"clientId\":\"clfp\"},\"version\":\"hoxus\",\"provisioningState\":\"Succeeded\",\"customizationScripts\":[{\"name\":\"gyepsbjt\",\"executionPoint\":\"NodeImageBuildTime\",\"scriptType\":\"PowerShell\",\"script\":\"gxywpmue\",\"rebootAfter\":false},{\"name\":\"zwfqkqujidsuyon\",\"executionPoint\":\"NodeProvisionTime\",\"scriptType\":\"Bash\",\"script\":\"aocqxtccmgy\",\"rebootAfter\":false}]},\"eTag\":\"tlmoyrx\",\"location\":\"fudwpznt\",\"tags\":{\"ck\":\"zhlrqjb\",\"kyv\":\"rlhrxs\"},\"id\":\"ycanuzbpzkafku\",\"name\":\"b\",\"type\":\"rnwb\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ContainerServiceNodeCustomizationManager manager = ContainerServiceNodeCustomizationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        NodeCustomization response = manager.nodeCustomizations()
            .define("wbhqwal")
            .withRegion("ghxpkdw")
            .withExistingResourceGroup("bxu")
            .withTags(mapOf("upedeojnabckhs", "iuebbaumny", "ie", "txp", "jdhtldwkyzxu", "tfhvpesapskrdqmh",
                "svlxotogtwrup", "tkncwsc"))
            .withProperties(new NodeCustomizationProperties().withContainerImages(Arrays.asList("oxaepd"))
                .withIdentityProfile(new UserAssignedIdentity())
                .withCustomizationScripts(Arrays.asList(
                    new NodeCustomizationScript().withName("pfza")
                        .withExecutionPoint(ExecutionPoint.NODE_PROVISION_TIME)
                        .withScriptType(ScriptType.POWER_SHELL)
                        .withScript("uhxwtctyqiklbbov")
                        .withRebootAfter(true),
                    new NodeCustomizationScript().withName("zbhvgyuguosv")
                        .withExecutionPoint(ExecutionPoint.NODE_PROVISION_TIME)
                        .withScriptType(ScriptType.POWER_SHELL)
                        .withScript("sxqu")
                        .withRebootAfter(false),
                    new NodeCustomizationScript().withName("plgmgsxnk")
                        .withExecutionPoint(ExecutionPoint.NODE_IMAGE_BUILD_TIME)
                        .withScriptType(ScriptType.BASH)
                        .withScript("es")
                        .withRebootAfter(true))))
            .withIfMatch("fcnj")
            .withIfNoneMatch("k")
            .create();

        Assertions.assertEquals("fudwpznt", response.location());
        Assertions.assertEquals("zhlrqjb", response.tags().get("ck"));
        Assertions.assertEquals("hbttkphyw", response.properties().containerImages().get(0));
        Assertions.assertEquals("gyepsbjt", response.properties().customizationScripts().get(0).name());
        Assertions.assertEquals(ExecutionPoint.NODE_IMAGE_BUILD_TIME,
            response.properties().customizationScripts().get(0).executionPoint());
        Assertions.assertEquals(ScriptType.POWER_SHELL,
            response.properties().customizationScripts().get(0).scriptType());
        Assertions.assertEquals("gxywpmue", response.properties().customizationScripts().get(0).script());
        Assertions.assertFalse(response.properties().customizationScripts().get(0).rebootAfter());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
