// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservice.nodecustom.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.containerservice.nodecustom.fluent.NodeCustomizationsClient;
import com.azure.resourcemanager.containerservice.nodecustom.fluent.models.NodeCustomizationInner;
import com.azure.resourcemanager.containerservice.nodecustom.fluent.models.NodeCustomizationVersionInner;
import com.azure.resourcemanager.containerservice.nodecustom.implementation.models.NodeCustomizationListResult;
import com.azure.resourcemanager.containerservice.nodecustom.implementation.models.NodeCustomizationVersionListResult;
import com.azure.resourcemanager.containerservice.nodecustom.models.NodeCustomizationUpdate;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in NodeCustomizationsClient.
 */
public final class NodeCustomizationsClientImpl implements NodeCustomizationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final NodeCustomizationsService service;

    /**
     * The service client containing this operation class.
     */
    private final ContainerServiceNodeCustomizationManagementClientImpl client;

    /**
     * Initializes an instance of NodeCustomizationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    NodeCustomizationsClientImpl(ContainerServiceNodeCustomizationManagementClientImpl client) {
        this.service = RestProxy.create(NodeCustomizationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ContainerServiceNodeCustomizationManagementClientNodeCustomizations
     * to be used by the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "ContainerServiceNodeCustomizationManagementClientNodeCustomizations")
    public interface NodeCustomizationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations/{nodeCustomizationName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NodeCustomizationInner>> getByResourceGroup(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("nodeCustomizationName") String nodeCustomizationName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations/{nodeCustomizationName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<NodeCustomizationInner> getByResourceGroupSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("nodeCustomizationName") String nodeCustomizationName, @HeaderParam("Accept") String accept,
            Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations/{nodeCustomizationName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @PathParam("nodeCustomizationName") String nodeCustomizationName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") NodeCustomizationInner resource, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations/{nodeCustomizationName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @PathParam("nodeCustomizationName") String nodeCustomizationName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") NodeCustomizationInner resource, Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations/{nodeCustomizationName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @HeaderParam("If-Match") String ifMatch,
            @PathParam("nodeCustomizationName") String nodeCustomizationName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") NodeCustomizationUpdate properties, Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations/{nodeCustomizationName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @HeaderParam("If-Match") String ifMatch,
            @PathParam("nodeCustomizationName") String nodeCustomizationName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") NodeCustomizationUpdate properties, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations/{nodeCustomizationName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @HeaderParam("If-Match") String ifMatch,
            @PathParam("nodeCustomizationName") String nodeCustomizationName, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations/{nodeCustomizationName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @HeaderParam("If-Match") String ifMatch,
            @PathParam("nodeCustomizationName") String nodeCustomizationName, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations/{nodeCustomizationName}/versions/{version}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> deleteVersion(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @HeaderParam("If-Match") String ifMatch,
            @PathParam("nodeCustomizationName") String nodeCustomizationName, @PathParam("version") String version,
            Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations/{nodeCustomizationName}/versions/{version}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteVersionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @HeaderParam("If-Match") String ifMatch,
            @PathParam("nodeCustomizationName") String nodeCustomizationName, @PathParam("version") String version,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NodeCustomizationListResult>> listByResourceGroup(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<NodeCustomizationListResult> listByResourceGroupSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/nodeCustomizations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NodeCustomizationListResult>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/nodeCustomizations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<NodeCustomizationListResult> listSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations/{nodeCustomizationName}/versions/{version}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NodeCustomizationVersionInner>> getVersion(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("nodeCustomizationName") String nodeCustomizationName, @PathParam("version") String version,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations/{nodeCustomizationName}/versions/{version}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<NodeCustomizationVersionInner> getVersionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("nodeCustomizationName") String nodeCustomizationName, @PathParam("version") String version,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations/{nodeCustomizationName}/versions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NodeCustomizationVersionListResult>> listVersions(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("nodeCustomizationName") String nodeCustomizationName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations/{nodeCustomizationName}/versions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<NodeCustomizationVersionListResult> listVersionsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("nodeCustomizationName") String nodeCustomizationName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NodeCustomizationListResult>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<NodeCustomizationListResult> listByResourceGroupNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NodeCustomizationListResult>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<NodeCustomizationListResult> listBySubscriptionNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NodeCustomizationVersionListResult>> listVersionsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<NodeCustomizationVersionListResult> listVersionsNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a node customization at the latest version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a node customization at the latest version along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<NodeCustomizationInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String nodeCustomizationName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, nodeCustomizationName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a node customization at the latest version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a node customization at the latest version on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NodeCustomizationInner> getByResourceGroupAsync(String resourceGroupName,
        String nodeCustomizationName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, nodeCustomizationName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a node customization at the latest version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a node customization at the latest version along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<NodeCustomizationInner> getByResourceGroupWithResponse(String resourceGroupName,
        String nodeCustomizationName, Context context) {
        final String accept = "application/json";
        return service.getByResourceGroupSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, nodeCustomizationName, accept, context);
    }

    /**
     * Get a node customization at the latest version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a node customization at the latest version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NodeCustomizationInner getByResourceGroup(String resourceGroupName, String nodeCustomizationName) {
        return getByResourceGroupWithResponse(resourceGroupName, nodeCustomizationName, Context.NONE).getValue();
    }

    /**
     * Create or update a node customization resource. This will create a new version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param resource Resource create parameters.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch The request should only proceed if the targeted resource's etag does not match the value
     * provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Node Customization resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String nodeCustomizationName, NodeCustomizationInner resource, String ifMatch, String ifNoneMatch) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, ifMatch, ifNoneMatch, nodeCustomizationName,
                contentType, accept, resource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update a node customization resource. This will create a new version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param resource Resource create parameters.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch The request should only proceed if the targeted resource's etag does not match the value
     * provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Node Customization resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String nodeCustomizationName,
        NodeCustomizationInner resource, String ifMatch, String ifNoneMatch) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, ifMatch, ifNoneMatch, nodeCustomizationName,
            contentType, accept, resource, Context.NONE);
    }

    /**
     * Create or update a node customization resource. This will create a new version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param resource Resource create parameters.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch The request should only proceed if the targeted resource's etag does not match the value
     * provided.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Node Customization resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String nodeCustomizationName,
        NodeCustomizationInner resource, String ifMatch, String ifNoneMatch, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, ifMatch, ifNoneMatch, nodeCustomizationName,
            contentType, accept, resource, context);
    }

    /**
     * Create or update a node customization resource. This will create a new version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param resource Resource create parameters.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch The request should only proceed if the targeted resource's etag does not match the value
     * provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the Node Customization resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<NodeCustomizationInner>, NodeCustomizationInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String nodeCustomizationName, NodeCustomizationInner resource, String ifMatch,
        String ifNoneMatch) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, nodeCustomizationName, resource, ifMatch, ifNoneMatch);
        return this.client.<NodeCustomizationInner, NodeCustomizationInner>getLroResult(mono,
            this.client.getHttpPipeline(), NodeCustomizationInner.class, NodeCustomizationInner.class,
            this.client.getContext());
    }

    /**
     * Create or update a node customization resource. This will create a new version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the Node Customization resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<NodeCustomizationInner>, NodeCustomizationInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String nodeCustomizationName, NodeCustomizationInner resource) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, nodeCustomizationName, resource, ifMatch, ifNoneMatch);
        return this.client.<NodeCustomizationInner, NodeCustomizationInner>getLroResult(mono,
            this.client.getHttpPipeline(), NodeCustomizationInner.class, NodeCustomizationInner.class,
            this.client.getContext());
    }

    /**
     * Create or update a node customization resource. This will create a new version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param resource Resource create parameters.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch The request should only proceed if the targeted resource's etag does not match the value
     * provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Node Customization resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<NodeCustomizationInner>, NodeCustomizationInner> beginCreateOrUpdate(
        String resourceGroupName, String nodeCustomizationName, NodeCustomizationInner resource, String ifMatch,
        String ifNoneMatch) {
        Response<BinaryData> response
            = createOrUpdateWithResponse(resourceGroupName, nodeCustomizationName, resource, ifMatch, ifNoneMatch);
        return this.client.<NodeCustomizationInner, NodeCustomizationInner>getLroResult(response,
            NodeCustomizationInner.class, NodeCustomizationInner.class, Context.NONE);
    }

    /**
     * Create or update a node customization resource. This will create a new version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Node Customization resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<NodeCustomizationInner>, NodeCustomizationInner>
        beginCreateOrUpdate(String resourceGroupName, String nodeCustomizationName, NodeCustomizationInner resource) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        Response<BinaryData> response
            = createOrUpdateWithResponse(resourceGroupName, nodeCustomizationName, resource, ifMatch, ifNoneMatch);
        return this.client.<NodeCustomizationInner, NodeCustomizationInner>getLroResult(response,
            NodeCustomizationInner.class, NodeCustomizationInner.class, Context.NONE);
    }

    /**
     * Create or update a node customization resource. This will create a new version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param resource Resource create parameters.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch The request should only proceed if the targeted resource's etag does not match the value
     * provided.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Node Customization resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<NodeCustomizationInner>, NodeCustomizationInner> beginCreateOrUpdate(
        String resourceGroupName, String nodeCustomizationName, NodeCustomizationInner resource, String ifMatch,
        String ifNoneMatch, Context context) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, nodeCustomizationName, resource,
            ifMatch, ifNoneMatch, context);
        return this.client.<NodeCustomizationInner, NodeCustomizationInner>getLroResult(response,
            NodeCustomizationInner.class, NodeCustomizationInner.class, context);
    }

    /**
     * Create or update a node customization resource. This will create a new version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param resource Resource create parameters.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch The request should only proceed if the targeted resource's etag does not match the value
     * provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Node Customization resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NodeCustomizationInner> createOrUpdateAsync(String resourceGroupName, String nodeCustomizationName,
        NodeCustomizationInner resource, String ifMatch, String ifNoneMatch) {
        return beginCreateOrUpdateAsync(resourceGroupName, nodeCustomizationName, resource, ifMatch, ifNoneMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a node customization resource. This will create a new version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Node Customization resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NodeCustomizationInner> createOrUpdateAsync(String resourceGroupName, String nodeCustomizationName,
        NodeCustomizationInner resource) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return beginCreateOrUpdateAsync(resourceGroupName, nodeCustomizationName, resource, ifMatch, ifNoneMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a node customization resource. This will create a new version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Node Customization resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NodeCustomizationInner createOrUpdate(String resourceGroupName, String nodeCustomizationName,
        NodeCustomizationInner resource) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return beginCreateOrUpdate(resourceGroupName, nodeCustomizationName, resource, ifMatch, ifNoneMatch)
            .getFinalResult();
    }

    /**
     * Create or update a node customization resource. This will create a new version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param resource Resource create parameters.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch The request should only proceed if the targeted resource's etag does not match the value
     * provided.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Node Customization resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NodeCustomizationInner createOrUpdate(String resourceGroupName, String nodeCustomizationName,
        NodeCustomizationInner resource, String ifMatch, String ifNoneMatch, Context context) {
        return beginCreateOrUpdate(resourceGroupName, nodeCustomizationName, resource, ifMatch, ifNoneMatch, context)
            .getFinalResult();
    }

    /**
     * Update a NodeCustomization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param properties The resource properties to be updated.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Node Customization resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String nodeCustomizationName, NodeCustomizationUpdate properties, String ifMatch) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, ifMatch, nodeCustomizationName, contentType, accept,
                properties, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a NodeCustomization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param properties The resource properties to be updated.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Node Customization resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String nodeCustomizationName,
        NodeCustomizationUpdate properties, String ifMatch) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, ifMatch, nodeCustomizationName, contentType, accept,
            properties, Context.NONE);
    }

    /**
     * Update a NodeCustomization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param properties The resource properties to be updated.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Node Customization resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String nodeCustomizationName,
        NodeCustomizationUpdate properties, String ifMatch, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, ifMatch, nodeCustomizationName, contentType, accept,
            properties, context);
    }

    /**
     * Update a NodeCustomization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param properties The resource properties to be updated.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the Node Customization resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<NodeCustomizationInner>, NodeCustomizationInner> beginUpdateAsync(
        String resourceGroupName, String nodeCustomizationName, NodeCustomizationUpdate properties, String ifMatch) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, nodeCustomizationName, properties, ifMatch);
        return this.client.<NodeCustomizationInner, NodeCustomizationInner>getLroResult(mono,
            this.client.getHttpPipeline(), NodeCustomizationInner.class, NodeCustomizationInner.class,
            this.client.getContext());
    }

    /**
     * Update a NodeCustomization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the Node Customization resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<NodeCustomizationInner>, NodeCustomizationInner>
        beginUpdateAsync(String resourceGroupName, String nodeCustomizationName, NodeCustomizationUpdate properties) {
        final String ifMatch = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, nodeCustomizationName, properties, ifMatch);
        return this.client.<NodeCustomizationInner, NodeCustomizationInner>getLroResult(mono,
            this.client.getHttpPipeline(), NodeCustomizationInner.class, NodeCustomizationInner.class,
            this.client.getContext());
    }

    /**
     * Update a NodeCustomization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param properties The resource properties to be updated.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Node Customization resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<NodeCustomizationInner>, NodeCustomizationInner> beginUpdate(String resourceGroupName,
        String nodeCustomizationName, NodeCustomizationUpdate properties, String ifMatch) {
        Response<BinaryData> response
            = updateWithResponse(resourceGroupName, nodeCustomizationName, properties, ifMatch);
        return this.client.<NodeCustomizationInner, NodeCustomizationInner>getLroResult(response,
            NodeCustomizationInner.class, NodeCustomizationInner.class, Context.NONE);
    }

    /**
     * Update a NodeCustomization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Node Customization resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<NodeCustomizationInner>, NodeCustomizationInner> beginUpdate(String resourceGroupName,
        String nodeCustomizationName, NodeCustomizationUpdate properties) {
        final String ifMatch = null;
        Response<BinaryData> response
            = updateWithResponse(resourceGroupName, nodeCustomizationName, properties, ifMatch);
        return this.client.<NodeCustomizationInner, NodeCustomizationInner>getLroResult(response,
            NodeCustomizationInner.class, NodeCustomizationInner.class, Context.NONE);
    }

    /**
     * Update a NodeCustomization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param properties The resource properties to be updated.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Node Customization resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<NodeCustomizationInner>, NodeCustomizationInner> beginUpdate(String resourceGroupName,
        String nodeCustomizationName, NodeCustomizationUpdate properties, String ifMatch, Context context) {
        Response<BinaryData> response
            = updateWithResponse(resourceGroupName, nodeCustomizationName, properties, ifMatch, context);
        return this.client.<NodeCustomizationInner, NodeCustomizationInner>getLroResult(response,
            NodeCustomizationInner.class, NodeCustomizationInner.class, context);
    }

    /**
     * Update a NodeCustomization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param properties The resource properties to be updated.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Node Customization resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NodeCustomizationInner> updateAsync(String resourceGroupName, String nodeCustomizationName,
        NodeCustomizationUpdate properties, String ifMatch) {
        return beginUpdateAsync(resourceGroupName, nodeCustomizationName, properties, ifMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a NodeCustomization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Node Customization resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NodeCustomizationInner> updateAsync(String resourceGroupName, String nodeCustomizationName,
        NodeCustomizationUpdate properties) {
        final String ifMatch = null;
        return beginUpdateAsync(resourceGroupName, nodeCustomizationName, properties, ifMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a NodeCustomization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Node Customization resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NodeCustomizationInner update(String resourceGroupName, String nodeCustomizationName,
        NodeCustomizationUpdate properties) {
        final String ifMatch = null;
        return beginUpdate(resourceGroupName, nodeCustomizationName, properties, ifMatch).getFinalResult();
    }

    /**
     * Update a NodeCustomization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param properties The resource properties to be updated.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Node Customization resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NodeCustomizationInner update(String resourceGroupName, String nodeCustomizationName,
        NodeCustomizationUpdate properties, String ifMatch, Context context) {
        return beginUpdate(resourceGroupName, nodeCustomizationName, properties, ifMatch, context).getFinalResult();
    }

    /**
     * Delete a node customization. This operation will be blocked if the resource is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String nodeCustomizationName, String ifMatch) {
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, ifMatch, nodeCustomizationName, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a node customization. This operation will be blocked if the resource is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String nodeCustomizationName,
        String ifMatch) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, ifMatch, nodeCustomizationName, Context.NONE);
    }

    /**
     * Delete a node customization. This operation will be blocked if the resource is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String nodeCustomizationName,
        String ifMatch, Context context) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, ifMatch, nodeCustomizationName, context);
    }

    /**
     * Delete a node customization. This operation will be blocked if the resource is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String nodeCustomizationName,
        String ifMatch) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, nodeCustomizationName, ifMatch);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a node customization. This operation will be blocked if the resource is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName,
        String nodeCustomizationName) {
        final String ifMatch = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, nodeCustomizationName, ifMatch);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a node customization. This operation will be blocked if the resource is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String nodeCustomizationName,
        String ifMatch) {
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, nodeCustomizationName, ifMatch);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete a node customization. This operation will be blocked if the resource is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String nodeCustomizationName) {
        final String ifMatch = null;
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, nodeCustomizationName, ifMatch);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete a node customization. This operation will be blocked if the resource is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String nodeCustomizationName,
        String ifMatch, Context context) {
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, nodeCustomizationName, ifMatch, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Delete a node customization. This operation will be blocked if the resource is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String nodeCustomizationName, String ifMatch) {
        return beginDeleteAsync(resourceGroupName, nodeCustomizationName, ifMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a node customization. This operation will be blocked if the resource is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String nodeCustomizationName) {
        final String ifMatch = null;
        return beginDeleteAsync(resourceGroupName, nodeCustomizationName, ifMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a node customization. This operation will be blocked if the resource is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String nodeCustomizationName) {
        final String ifMatch = null;
        beginDelete(resourceGroupName, nodeCustomizationName, ifMatch).getFinalResult();
    }

    /**
     * Delete a node customization. This operation will be blocked if the resource is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String nodeCustomizationName, String ifMatch, Context context) {
        beginDelete(resourceGroupName, nodeCustomizationName, ifMatch, context).getFinalResult();
    }

    /**
     * Delete a node customization version. This operation will be blocked if the node customization version is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param version The version of the Node Customization.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteVersionWithResponseAsync(String resourceGroupName,
        String nodeCustomizationName, String version, String ifMatch) {
        return FluxUtil
            .withContext(context -> service.deleteVersion(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, ifMatch, nodeCustomizationName, version, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a node customization version. This operation will be blocked if the node customization version is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param version The version of the Node Customization.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteVersionWithResponse(String resourceGroupName, String nodeCustomizationName,
        String version, String ifMatch) {
        return service.deleteVersionSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, ifMatch, nodeCustomizationName, version, Context.NONE);
    }

    /**
     * Delete a node customization version. This operation will be blocked if the node customization version is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param version The version of the Node Customization.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteVersionWithResponse(String resourceGroupName, String nodeCustomizationName,
        String version, String ifMatch, Context context) {
        return service.deleteVersionSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, ifMatch, nodeCustomizationName, version, context);
    }

    /**
     * Delete a node customization version. This operation will be blocked if the node customization version is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param version The version of the Node Customization.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteVersionAsync(String resourceGroupName,
        String nodeCustomizationName, String version, String ifMatch) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteVersionWithResponseAsync(resourceGroupName, nodeCustomizationName, version, ifMatch);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a node customization version. This operation will be blocked if the node customization version is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param version The version of the Node Customization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteVersionAsync(String resourceGroupName,
        String nodeCustomizationName, String version) {
        final String ifMatch = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteVersionWithResponseAsync(resourceGroupName, nodeCustomizationName, version, ifMatch);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a node customization version. This operation will be blocked if the node customization version is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param version The version of the Node Customization.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDeleteVersion(String resourceGroupName, String nodeCustomizationName,
        String version, String ifMatch) {
        Response<BinaryData> response
            = deleteVersionWithResponse(resourceGroupName, nodeCustomizationName, version, ifMatch);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete a node customization version. This operation will be blocked if the node customization version is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param version The version of the Node Customization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDeleteVersion(String resourceGroupName, String nodeCustomizationName,
        String version) {
        final String ifMatch = null;
        Response<BinaryData> response
            = deleteVersionWithResponse(resourceGroupName, nodeCustomizationName, version, ifMatch);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete a node customization version. This operation will be blocked if the node customization version is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param version The version of the Node Customization.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDeleteVersion(String resourceGroupName, String nodeCustomizationName,
        String version, String ifMatch, Context context) {
        Response<BinaryData> response
            = deleteVersionWithResponse(resourceGroupName, nodeCustomizationName, version, ifMatch, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Delete a node customization version. This operation will be blocked if the node customization version is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param version The version of the Node Customization.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteVersionAsync(String resourceGroupName, String nodeCustomizationName, String version,
        String ifMatch) {
        return beginDeleteVersionAsync(resourceGroupName, nodeCustomizationName, version, ifMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a node customization version. This operation will be blocked if the node customization version is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param version The version of the Node Customization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteVersionAsync(String resourceGroupName, String nodeCustomizationName, String version) {
        final String ifMatch = null;
        return beginDeleteVersionAsync(resourceGroupName, nodeCustomizationName, version, ifMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a node customization version. This operation will be blocked if the node customization version is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param version The version of the Node Customization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteVersion(String resourceGroupName, String nodeCustomizationName, String version) {
        final String ifMatch = null;
        beginDeleteVersion(resourceGroupName, nodeCustomizationName, version, ifMatch).getFinalResult();
    }

    /**
     * Delete a node customization version. This operation will be blocked if the node customization version is in use.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param version The version of the Node Customization.
     * @param ifMatch The request should only proceed if the targeted resource's etag matches the value provided.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteVersion(String resourceGroupName, String nodeCustomizationName, String version, String ifMatch,
        Context context) {
        beginDeleteVersion(resourceGroupName, nodeCustomizationName, version, ifMatch, context).getFinalResult();
    }

    /**
     * List the node customizations in a resource group at the latest version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomization list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NodeCustomizationInner>> listByResourceGroupSinglePageAsync(String resourceGroupName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, accept, context))
            .<PagedResponse<NodeCustomizationInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List the node customizations in a resource group at the latest version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomization list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<NodeCustomizationInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * List the node customizations in a resource group at the latest version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomization list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<NodeCustomizationInner> listByResourceGroupSinglePage(String resourceGroupName) {
        final String accept = "application/json";
        Response<NodeCustomizationListResult> res = service.listByResourceGroupSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List the node customizations in a resource group at the latest version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomization list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<NodeCustomizationInner> listByResourceGroupSinglePage(String resourceGroupName,
        Context context) {
        final String accept = "application/json";
        Response<NodeCustomizationListResult> res = service.listByResourceGroupSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List the node customizations in a resource group at the latest version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomization list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NodeCustomizationInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(() -> listByResourceGroupSinglePage(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePage(nextLink));
    }

    /**
     * List the node customizations in a resource group at the latest version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomization list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NodeCustomizationInner> listByResourceGroup(String resourceGroupName, Context context) {
        return new PagedIterable<>(() -> listByResourceGroupSinglePage(resourceGroupName, context),
            nextLink -> listByResourceGroupNextSinglePage(nextLink, context));
    }

    /**
     * List the node customizations in a subscription at the latest version.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomization list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NodeCustomizationInner>> listSinglePageAsync() {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), accept, context))
            .<PagedResponse<NodeCustomizationInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List the node customizations in a subscription at the latest version.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomization list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<NodeCustomizationInner> listAsync() {
        return new PagedFlux<>(() -> listSinglePageAsync(),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * List the node customizations in a subscription at the latest version.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomization list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<NodeCustomizationInner> listSinglePage() {
        final String accept = "application/json";
        Response<NodeCustomizationListResult> res = service.listSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List the node customizations in a subscription at the latest version.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomization list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<NodeCustomizationInner> listSinglePage(Context context) {
        final String accept = "application/json";
        Response<NodeCustomizationListResult> res = service.listSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List the node customizations in a subscription at the latest version.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomization list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NodeCustomizationInner> list() {
        return new PagedIterable<>(() -> listSinglePage(), nextLink -> listBySubscriptionNextSinglePage(nextLink));
    }

    /**
     * List the node customizations in a subscription at the latest version.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomization list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NodeCustomizationInner> list(Context context) {
        return new PagedIterable<>(() -> listSinglePage(context),
            nextLink -> listBySubscriptionNextSinglePage(nextLink, context));
    }

    /**
     * Get a node customization at a particular version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param version The version of the Node Customization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a node customization at a particular version along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<NodeCustomizationVersionInner>> getVersionWithResponseAsync(String resourceGroupName,
        String nodeCustomizationName, String version) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getVersion(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, nodeCustomizationName, version, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a node customization at a particular version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param version The version of the Node Customization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a node customization at a particular version on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NodeCustomizationVersionInner> getVersionAsync(String resourceGroupName, String nodeCustomizationName,
        String version) {
        return getVersionWithResponseAsync(resourceGroupName, nodeCustomizationName, version)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a node customization at a particular version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param version The version of the Node Customization.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a node customization at a particular version along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<NodeCustomizationVersionInner> getVersionWithResponse(String resourceGroupName,
        String nodeCustomizationName, String version, Context context) {
        final String accept = "application/json";
        return service.getVersionSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, nodeCustomizationName, version, accept, context);
    }

    /**
     * Get a node customization at a particular version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param version The version of the Node Customization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a node customization at a particular version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NodeCustomizationVersionInner getVersion(String resourceGroupName, String nodeCustomizationName,
        String version) {
        return getVersionWithResponse(resourceGroupName, nodeCustomizationName, version, Context.NONE).getValue();
    }

    /**
     * List all versions of a node customization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomizationVersion list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NodeCustomizationVersionInner>> listVersionsSinglePageAsync(String resourceGroupName,
        String nodeCustomizationName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listVersions(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, nodeCustomizationName, accept, context))
            .<PagedResponse<NodeCustomizationVersionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List all versions of a node customization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomizationVersion list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<NodeCustomizationVersionInner> listVersionsAsync(String resourceGroupName,
        String nodeCustomizationName) {
        return new PagedFlux<>(() -> listVersionsSinglePageAsync(resourceGroupName, nodeCustomizationName),
            nextLink -> listVersionsNextSinglePageAsync(nextLink));
    }

    /**
     * List all versions of a node customization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomizationVersion list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<NodeCustomizationVersionInner> listVersionsSinglePage(String resourceGroupName,
        String nodeCustomizationName) {
        final String accept = "application/json";
        Response<NodeCustomizationVersionListResult> res
            = service.listVersionsSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, nodeCustomizationName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List all versions of a node customization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomizationVersion list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<NodeCustomizationVersionInner> listVersionsSinglePage(String resourceGroupName,
        String nodeCustomizationName, Context context) {
        final String accept = "application/json";
        Response<NodeCustomizationVersionListResult> res
            = service.listVersionsSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, nodeCustomizationName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List all versions of a node customization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomizationVersion list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NodeCustomizationVersionInner> listVersions(String resourceGroupName,
        String nodeCustomizationName) {
        return new PagedIterable<>(() -> listVersionsSinglePage(resourceGroupName, nodeCustomizationName),
            nextLink -> listVersionsNextSinglePage(nextLink));
    }

    /**
     * List all versions of a node customization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nodeCustomizationName The name of the Node Customization resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomizationVersion list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NodeCustomizationVersionInner> listVersions(String resourceGroupName,
        String nodeCustomizationName, Context context) {
        return new PagedIterable<>(() -> listVersionsSinglePage(resourceGroupName, nodeCustomizationName, context),
            nextLink -> listVersionsNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomization list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NodeCustomizationInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<NodeCustomizationInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomization list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<NodeCustomizationInner> listByResourceGroupNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<NodeCustomizationListResult> res
            = service.listByResourceGroupNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomization list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<NodeCustomizationInner> listByResourceGroupNextSinglePage(String nextLink, Context context) {
        final String accept = "application/json";
        Response<NodeCustomizationListResult> res
            = service.listByResourceGroupNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomization list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NodeCustomizationInner>> listBySubscriptionNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<NodeCustomizationInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomization list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<NodeCustomizationInner> listBySubscriptionNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<NodeCustomizationListResult> res
            = service.listBySubscriptionNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomization list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<NodeCustomizationInner> listBySubscriptionNextSinglePage(String nextLink, Context context) {
        final String accept = "application/json";
        Response<NodeCustomizationListResult> res
            = service.listBySubscriptionNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomizationVersion list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NodeCustomizationVersionInner>> listVersionsNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listVersionsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<NodeCustomizationVersionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomizationVersion list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<NodeCustomizationVersionInner> listVersionsNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<NodeCustomizationVersionListResult> res
            = service.listVersionsNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NodeCustomizationVersion list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<NodeCustomizationVersionInner> listVersionsNextSinglePage(String nextLink, Context context) {
        final String accept = "application/json";
        Response<NodeCustomizationVersionListResult> res
            = service.listVersionsNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }
}
