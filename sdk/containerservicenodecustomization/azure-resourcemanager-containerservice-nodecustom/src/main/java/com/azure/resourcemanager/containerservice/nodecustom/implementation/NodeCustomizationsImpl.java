// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservice.nodecustom.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerservice.nodecustom.fluent.NodeCustomizationsClient;
import com.azure.resourcemanager.containerservice.nodecustom.fluent.models.NodeCustomizationInner;
import com.azure.resourcemanager.containerservice.nodecustom.fluent.models.NodeCustomizationVersionInner;
import com.azure.resourcemanager.containerservice.nodecustom.models.NodeCustomization;
import com.azure.resourcemanager.containerservice.nodecustom.models.NodeCustomizationVersion;
import com.azure.resourcemanager.containerservice.nodecustom.models.NodeCustomizations;

public final class NodeCustomizationsImpl implements NodeCustomizations {
    private static final ClientLogger LOGGER = new ClientLogger(NodeCustomizationsImpl.class);

    private final NodeCustomizationsClient innerClient;

    private final com.azure.resourcemanager.containerservice.nodecustom.ContainerServiceNodeCustomizationManager serviceManager;

    public NodeCustomizationsImpl(NodeCustomizationsClient innerClient,
        com.azure.resourcemanager.containerservice.nodecustom.ContainerServiceNodeCustomizationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<NodeCustomization> getByResourceGroupWithResponse(String resourceGroupName,
        String nodeCustomizationName, Context context) {
        Response<NodeCustomizationInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, nodeCustomizationName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new NodeCustomizationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NodeCustomization getByResourceGroup(String resourceGroupName, String nodeCustomizationName) {
        NodeCustomizationInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, nodeCustomizationName);
        if (inner != null) {
            return new NodeCustomizationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String nodeCustomizationName) {
        this.serviceClient().delete(resourceGroupName, nodeCustomizationName);
    }

    public void delete(String resourceGroupName, String nodeCustomizationName, String ifMatch, Context context) {
        this.serviceClient().delete(resourceGroupName, nodeCustomizationName, ifMatch, context);
    }

    public void deleteVersion(String resourceGroupName, String nodeCustomizationName, String version) {
        this.serviceClient().deleteVersion(resourceGroupName, nodeCustomizationName, version);
    }

    public void deleteVersion(String resourceGroupName, String nodeCustomizationName, String version, String ifMatch,
        Context context) {
        this.serviceClient().deleteVersion(resourceGroupName, nodeCustomizationName, version, ifMatch, context);
    }

    public PagedIterable<NodeCustomization> listByResourceGroup(String resourceGroupName) {
        PagedIterable<NodeCustomizationInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NodeCustomizationImpl(inner1, this.manager()));
    }

    public PagedIterable<NodeCustomization> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<NodeCustomizationInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NodeCustomizationImpl(inner1, this.manager()));
    }

    public PagedIterable<NodeCustomization> list() {
        PagedIterable<NodeCustomizationInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NodeCustomizationImpl(inner1, this.manager()));
    }

    public PagedIterable<NodeCustomization> list(Context context) {
        PagedIterable<NodeCustomizationInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NodeCustomizationImpl(inner1, this.manager()));
    }

    public Response<NodeCustomizationVersion> getVersionWithResponse(String resourceGroupName,
        String nodeCustomizationName, String version, Context context) {
        Response<NodeCustomizationVersionInner> inner
            = this.serviceClient().getVersionWithResponse(resourceGroupName, nodeCustomizationName, version, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new NodeCustomizationVersionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NodeCustomizationVersion getVersion(String resourceGroupName, String nodeCustomizationName, String version) {
        NodeCustomizationVersionInner inner
            = this.serviceClient().getVersion(resourceGroupName, nodeCustomizationName, version);
        if (inner != null) {
            return new NodeCustomizationVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<NodeCustomizationVersion> listVersions(String resourceGroupName,
        String nodeCustomizationName) {
        PagedIterable<NodeCustomizationVersionInner> inner
            = this.serviceClient().listVersions(resourceGroupName, nodeCustomizationName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NodeCustomizationVersionImpl(inner1, this.manager()));
    }

    public PagedIterable<NodeCustomizationVersion> listVersions(String resourceGroupName, String nodeCustomizationName,
        Context context) {
        PagedIterable<NodeCustomizationVersionInner> inner
            = this.serviceClient().listVersions(resourceGroupName, nodeCustomizationName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NodeCustomizationVersionImpl(inner1, this.manager()));
    }

    public NodeCustomization getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String nodeCustomizationName = ResourceManagerUtils.getValueFromIdByName(id, "nodeCustomizations");
        if (nodeCustomizationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'nodeCustomizations'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, nodeCustomizationName, Context.NONE).getValue();
    }

    public Response<NodeCustomization> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String nodeCustomizationName = ResourceManagerUtils.getValueFromIdByName(id, "nodeCustomizations");
        if (nodeCustomizationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'nodeCustomizations'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, nodeCustomizationName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String nodeCustomizationName = ResourceManagerUtils.getValueFromIdByName(id, "nodeCustomizations");
        if (nodeCustomizationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'nodeCustomizations'.", id)));
        }
        String localIfMatch = null;
        this.delete(resourceGroupName, nodeCustomizationName, localIfMatch, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, String ifMatch, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String nodeCustomizationName = ResourceManagerUtils.getValueFromIdByName(id, "nodeCustomizations");
        if (nodeCustomizationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'nodeCustomizations'.", id)));
        }
        this.delete(resourceGroupName, nodeCustomizationName, ifMatch, context);
    }

    private NodeCustomizationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.containerservice.nodecustom.ContainerServiceNodeCustomizationManager manager() {
        return this.serviceManager;
    }

    public NodeCustomizationImpl define(String name) {
        return new NodeCustomizationImpl(name, this.manager());
    }
}
