// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservice.nodecustom.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Node customization script.
 */
@Fluent
public final class NodeCustomizationScript implements JsonSerializable<NodeCustomizationScript> {
    /*
     * The name for the customization script.
     * Must be unique within the node customization resource.
     * Can only contain lowercase alphanumeric,'-' or '.' characters.
     */
    private String name;

    /*
     * The stage at which the script is executed.
     * Specifying `NodeImageBuildTime` will ensure changes are persisted into the node image.
     */
    private ExecutionPoint executionPoint;

    /*
     * The runtime environment for the script (e.g. Bash).
     */
    private ScriptType scriptType;

    /*
     * The script content to be executed in plain text. Do not include secrets.
     */
    private String script;

    /*
     * Whether the node should reboot after successful script execution.
     */
    private Boolean rebootAfter;

    /**
     * Creates an instance of NodeCustomizationScript class.
     */
    public NodeCustomizationScript() {
    }

    /**
     * Get the name property: The name for the customization script.
     * Must be unique within the node customization resource.
     * Can only contain lowercase alphanumeric,'-' or '.' characters.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name for the customization script.
     * Must be unique within the node customization resource.
     * Can only contain lowercase alphanumeric,'-' or '.' characters.
     * 
     * @param name the name value to set.
     * @return the NodeCustomizationScript object itself.
     */
    public NodeCustomizationScript withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the executionPoint property: The stage at which the script is executed.
     * Specifying `NodeImageBuildTime` will ensure changes are persisted into the node image.
     * 
     * @return the executionPoint value.
     */
    public ExecutionPoint executionPoint() {
        return this.executionPoint;
    }

    /**
     * Set the executionPoint property: The stage at which the script is executed.
     * Specifying `NodeImageBuildTime` will ensure changes are persisted into the node image.
     * 
     * @param executionPoint the executionPoint value to set.
     * @return the NodeCustomizationScript object itself.
     */
    public NodeCustomizationScript withExecutionPoint(ExecutionPoint executionPoint) {
        this.executionPoint = executionPoint;
        return this;
    }

    /**
     * Get the scriptType property: The runtime environment for the script (e.g. Bash).
     * 
     * @return the scriptType value.
     */
    public ScriptType scriptType() {
        return this.scriptType;
    }

    /**
     * Set the scriptType property: The runtime environment for the script (e.g. Bash).
     * 
     * @param scriptType the scriptType value to set.
     * @return the NodeCustomizationScript object itself.
     */
    public NodeCustomizationScript withScriptType(ScriptType scriptType) {
        this.scriptType = scriptType;
        return this;
    }

    /**
     * Get the script property: The script content to be executed in plain text. Do not include secrets.
     * 
     * @return the script value.
     */
    public String script() {
        return this.script;
    }

    /**
     * Set the script property: The script content to be executed in plain text. Do not include secrets.
     * 
     * @param script the script value to set.
     * @return the NodeCustomizationScript object itself.
     */
    public NodeCustomizationScript withScript(String script) {
        this.script = script;
        return this;
    }

    /**
     * Get the rebootAfter property: Whether the node should reboot after successful script execution.
     * 
     * @return the rebootAfter value.
     */
    public Boolean rebootAfter() {
        return this.rebootAfter;
    }

    /**
     * Set the rebootAfter property: Whether the node should reboot after successful script execution.
     * 
     * @param rebootAfter the rebootAfter value to set.
     * @return the NodeCustomizationScript object itself.
     */
    public NodeCustomizationScript withRebootAfter(Boolean rebootAfter) {
        this.rebootAfter = rebootAfter;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("executionPoint",
            this.executionPoint == null ? null : this.executionPoint.toString());
        jsonWriter.writeStringField("scriptType", this.scriptType == null ? null : this.scriptType.toString());
        jsonWriter.writeStringField("script", this.script);
        jsonWriter.writeBooleanField("rebootAfter", this.rebootAfter);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NodeCustomizationScript from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NodeCustomizationScript if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NodeCustomizationScript.
     */
    public static NodeCustomizationScript fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NodeCustomizationScript deserializedNodeCustomizationScript = new NodeCustomizationScript();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedNodeCustomizationScript.name = reader.getString();
                } else if ("executionPoint".equals(fieldName)) {
                    deserializedNodeCustomizationScript.executionPoint = ExecutionPoint.fromString(reader.getString());
                } else if ("scriptType".equals(fieldName)) {
                    deserializedNodeCustomizationScript.scriptType = ScriptType.fromString(reader.getString());
                } else if ("script".equals(fieldName)) {
                    deserializedNodeCustomizationScript.script = reader.getString();
                } else if ("rebootAfter".equals(fieldName)) {
                    deserializedNodeCustomizationScript.rebootAfter = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNodeCustomizationScript;
        });
    }
}
