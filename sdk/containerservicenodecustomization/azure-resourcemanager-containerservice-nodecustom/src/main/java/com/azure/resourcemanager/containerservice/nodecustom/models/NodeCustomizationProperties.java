// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservice.nodecustom.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties of the Node Customization resource.
 */
@Fluent
public final class NodeCustomizationProperties implements JsonSerializable<NodeCustomizationProperties> {
    /*
     * The list of container images to cache on nodes. See
     * https://kubernetes.io/docs/concepts/containers/images/#image-names
     */
    private List<String> containerImages;

    /*
     * The identity used to execute node customization tasks during image build time and provisioning time.
     * If not specified the default agentpool identity will be used.
     * This does not affect provisioned nodes.
     */
    private UserAssignedIdentity identityProfile;

    /*
     * An auto-generated value that changes when the other fields of the image customization are changed.
     */
    private String version;

    /*
     * The provisioning state of the node customization.
     */
    private ProvisioningState provisioningState;

    /*
     * The scripts to customize the node before or after image capture.
     */
    private List<NodeCustomizationScript> customizationScripts;

    /**
     * Creates an instance of NodeCustomizationProperties class.
     */
    public NodeCustomizationProperties() {
    }

    /**
     * Get the containerImages property: The list of container images to cache on nodes. See
     * https://kubernetes.io/docs/concepts/containers/images/#image-names.
     * 
     * @return the containerImages value.
     */
    public List<String> containerImages() {
        return this.containerImages;
    }

    /**
     * Set the containerImages property: The list of container images to cache on nodes. See
     * https://kubernetes.io/docs/concepts/containers/images/#image-names.
     * 
     * @param containerImages the containerImages value to set.
     * @return the NodeCustomizationProperties object itself.
     */
    public NodeCustomizationProperties withContainerImages(List<String> containerImages) {
        this.containerImages = containerImages;
        return this;
    }

    /**
     * Get the identityProfile property: The identity used to execute node customization tasks during image build time
     * and provisioning time.
     * If not specified the default agentpool identity will be used.
     * This does not affect provisioned nodes.
     * 
     * @return the identityProfile value.
     */
    public UserAssignedIdentity identityProfile() {
        return this.identityProfile;
    }

    /**
     * Set the identityProfile property: The identity used to execute node customization tasks during image build time
     * and provisioning time.
     * If not specified the default agentpool identity will be used.
     * This does not affect provisioned nodes.
     * 
     * @param identityProfile the identityProfile value to set.
     * @return the NodeCustomizationProperties object itself.
     */
    public NodeCustomizationProperties withIdentityProfile(UserAssignedIdentity identityProfile) {
        this.identityProfile = identityProfile;
        return this;
    }

    /**
     * Get the version property: An auto-generated value that changes when the other fields of the image customization
     * are changed.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the provisioningState property: The provisioning state of the node customization.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the customizationScripts property: The scripts to customize the node before or after image capture.
     * 
     * @return the customizationScripts value.
     */
    public List<NodeCustomizationScript> customizationScripts() {
        return this.customizationScripts;
    }

    /**
     * Set the customizationScripts property: The scripts to customize the node before or after image capture.
     * 
     * @param customizationScripts the customizationScripts value to set.
     * @return the NodeCustomizationProperties object itself.
     */
    public NodeCustomizationProperties withCustomizationScripts(List<NodeCustomizationScript> customizationScripts) {
        this.customizationScripts = customizationScripts;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("containerImages", this.containerImages,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("identityProfile", this.identityProfile);
        jsonWriter.writeArrayField("customizationScripts", this.customizationScripts,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NodeCustomizationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NodeCustomizationProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NodeCustomizationProperties.
     */
    public static NodeCustomizationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NodeCustomizationProperties deserializedNodeCustomizationProperties = new NodeCustomizationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("containerImages".equals(fieldName)) {
                    List<String> containerImages = reader.readArray(reader1 -> reader1.getString());
                    deserializedNodeCustomizationProperties.containerImages = containerImages;
                } else if ("identityProfile".equals(fieldName)) {
                    deserializedNodeCustomizationProperties.identityProfile = UserAssignedIdentity.fromJson(reader);
                } else if ("version".equals(fieldName)) {
                    deserializedNodeCustomizationProperties.version = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNodeCustomizationProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("customizationScripts".equals(fieldName)) {
                    List<NodeCustomizationScript> customizationScripts
                        = reader.readArray(reader1 -> NodeCustomizationScript.fromJson(reader1));
                    deserializedNodeCustomizationProperties.customizationScripts = customizationScripts;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNodeCustomizationProperties;
        });
    }
}
