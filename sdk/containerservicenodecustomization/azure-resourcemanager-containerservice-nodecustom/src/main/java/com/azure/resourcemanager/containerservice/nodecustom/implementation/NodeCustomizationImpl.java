// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservice.nodecustom.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerservice.nodecustom.fluent.models.NodeCustomizationInner;
import com.azure.resourcemanager.containerservice.nodecustom.models.NodeCustomization;
import com.azure.resourcemanager.containerservice.nodecustom.models.NodeCustomizationProperties;
import com.azure.resourcemanager.containerservice.nodecustom.models.NodeCustomizationUpdate;
import com.azure.resourcemanager.containerservice.nodecustom.models.NodeCustomizationUpdateProperties;
import java.util.Collections;
import java.util.Map;

public final class NodeCustomizationImpl
    implements NodeCustomization, NodeCustomization.Definition, NodeCustomization.Update {
    private NodeCustomizationInner innerObject;

    private final com.azure.resourcemanager.containerservice.nodecustom.ContainerServiceNodeCustomizationManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public NodeCustomizationProperties properties() {
        return this.innerModel().properties();
    }

    public String eTag() {
        return this.innerModel().eTag();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public NodeCustomizationInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.containerservice.nodecustom.ContainerServiceNodeCustomizationManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String nodeCustomizationName;

    private String createIfMatch;

    private String createIfNoneMatch;

    private String updateIfMatch;

    private NodeCustomizationUpdate updateProperties;

    public NodeCustomizationImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public NodeCustomization create() {
        this.innerObject = serviceManager.serviceClient()
            .getNodeCustomizations()
            .createOrUpdate(resourceGroupName, nodeCustomizationName, this.innerModel(), createIfMatch,
                createIfNoneMatch, Context.NONE);
        return this;
    }

    public NodeCustomization create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getNodeCustomizations()
            .createOrUpdate(resourceGroupName, nodeCustomizationName, this.innerModel(), createIfMatch,
                createIfNoneMatch, context);
        return this;
    }

    NodeCustomizationImpl(String name,
        com.azure.resourcemanager.containerservice.nodecustom.ContainerServiceNodeCustomizationManager serviceManager) {
        this.innerObject = new NodeCustomizationInner();
        this.serviceManager = serviceManager;
        this.nodeCustomizationName = name;
        this.createIfMatch = null;
        this.createIfNoneMatch = null;
    }

    public NodeCustomizationImpl update() {
        this.updateIfMatch = null;
        this.updateProperties = new NodeCustomizationUpdate();
        return this;
    }

    public NodeCustomization apply() {
        this.innerObject = serviceManager.serviceClient()
            .getNodeCustomizations()
            .update(resourceGroupName, nodeCustomizationName, updateProperties, updateIfMatch, Context.NONE);
        return this;
    }

    public NodeCustomization apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getNodeCustomizations()
            .update(resourceGroupName, nodeCustomizationName, updateProperties, updateIfMatch, context);
        return this;
    }

    NodeCustomizationImpl(NodeCustomizationInner innerObject,
        com.azure.resourcemanager.containerservice.nodecustom.ContainerServiceNodeCustomizationManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.nodeCustomizationName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "nodeCustomizations");
    }

    public NodeCustomization refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getNodeCustomizations()
            .getByResourceGroupWithResponse(resourceGroupName, nodeCustomizationName, Context.NONE)
            .getValue();
        return this;
    }

    public NodeCustomization refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getNodeCustomizations()
            .getByResourceGroupWithResponse(resourceGroupName, nodeCustomizationName, context)
            .getValue();
        return this;
    }

    public NodeCustomizationImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public NodeCustomizationImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public NodeCustomizationImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public NodeCustomizationImpl withProperties(NodeCustomizationProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public NodeCustomizationImpl withIfMatch(String ifMatch) {
        if (isInCreateMode()) {
            this.createIfMatch = ifMatch;
            return this;
        } else {
            this.updateIfMatch = ifMatch;
            return this;
        }
    }

    public NodeCustomizationImpl withIfNoneMatch(String ifNoneMatch) {
        this.createIfNoneMatch = ifNoneMatch;
        return this;
    }

    public NodeCustomizationImpl withProperties(NodeCustomizationUpdateProperties properties) {
        this.updateProperties.withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel() == null || this.innerModel().id() == null;
    }
}
