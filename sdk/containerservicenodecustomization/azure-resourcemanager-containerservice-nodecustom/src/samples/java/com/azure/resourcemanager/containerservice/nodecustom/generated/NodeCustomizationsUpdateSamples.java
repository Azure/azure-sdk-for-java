// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.containerservice.nodecustom.generated;

import com.azure.resourcemanager.containerservice.nodecustom.models.ExecutionPoint;
import com.azure.resourcemanager.containerservice.nodecustom.models.NodeCustomization;
import com.azure.resourcemanager.containerservice.nodecustom.models.NodeCustomizationScript;
import com.azure.resourcemanager.containerservice.nodecustom.models.NodeCustomizationUpdateProperties;
import com.azure.resourcemanager.containerservice.nodecustom.models.ScriptType;
import com.azure.resourcemanager.containerservice.nodecustom.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for NodeCustomizations Update.
 */
public final class NodeCustomizationsUpdateSamples {
    /*
     * x-ms-original-file: 2025-09-02-preview/NodeCustomizations_Update.json
     */
    /**
     * Sample code: NodeCustomizations_Update.
     * 
     * @param manager Entry point to ContainerServiceNodeCustomizationManager.
     */
    public static void nodeCustomizationsUpdate(
        com.azure.resourcemanager.containerservice.nodecustom.ContainerServiceNodeCustomizationManager manager) {
        NodeCustomization resource = manager.nodeCustomizations()
            .getByResourceGroupWithResponse("rg1", "my-node-customization", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withTags(mapOf("key5558", "fakeTokenPlaceholder"))
            .withProperties(
                new NodeCustomizationUpdateProperties().withContainerImages(Arrays.asList("qmetlvqgbvhjnncyraxlhs"))
                    .withIdentityProfile(new UserAssignedIdentity())
                    .withCustomizationScripts(Arrays.asList(new NodeCustomizationScript().withName("initialize-node")
                        .withExecutionPoint(ExecutionPoint.NODE_IMAGE_BUILD_TIME)
                        .withScriptType(ScriptType.BASH)
                        .withScript("echo \"test node customization\" > /var/log/test-node-customization.txt"))))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
