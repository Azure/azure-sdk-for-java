// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.delegatednetwork.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of Delegated controller resource.
 */
@Immutable
public final class DelegatedControllerProperties implements JsonSerializable<DelegatedControllerProperties> {
    /*
     * Resource guid.
     */
    private String resourceGuid;

    /*
     * The current state of dnc controller resource.
     */
    private ControllerState provisioningState;

    /*
     * dnc application id should be used by customer to authenticate with dnc gateway.
     */
    private String dncAppId;

    /*
     * tenant id of dnc application id
     */
    private String dncTenantId;

    /*
     * dnc endpoint url that customers can use to connect to
     */
    private String dncEndpoint;

    /**
     * Creates an instance of DelegatedControllerProperties class.
     */
    public DelegatedControllerProperties() {
    }

    /**
     * Get the resourceGuid property: Resource guid.
     * 
     * @return the resourceGuid value.
     */
    public String resourceGuid() {
        return this.resourceGuid;
    }

    /**
     * Get the provisioningState property: The current state of dnc controller resource.
     * 
     * @return the provisioningState value.
     */
    public ControllerState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the dncAppId property: dnc application id should be used by customer to authenticate with dnc gateway.
     * 
     * @return the dncAppId value.
     */
    public String dncAppId() {
        return this.dncAppId;
    }

    /**
     * Get the dncTenantId property: tenant id of dnc application id.
     * 
     * @return the dncTenantId value.
     */
    public String dncTenantId() {
        return this.dncTenantId;
    }

    /**
     * Get the dncEndpoint property: dnc endpoint url that customers can use to connect to.
     * 
     * @return the dncEndpoint value.
     */
    public String dncEndpoint() {
        return this.dncEndpoint;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DelegatedControllerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DelegatedControllerProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DelegatedControllerProperties.
     */
    public static DelegatedControllerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DelegatedControllerProperties deserializedDelegatedControllerProperties
                = new DelegatedControllerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceGuid".equals(fieldName)) {
                    deserializedDelegatedControllerProperties.resourceGuid = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDelegatedControllerProperties.provisioningState
                        = ControllerState.fromString(reader.getString());
                } else if ("dncAppId".equals(fieldName)) {
                    deserializedDelegatedControllerProperties.dncAppId = reader.getString();
                } else if ("dncTenantId".equals(fieldName)) {
                    deserializedDelegatedControllerProperties.dncTenantId = reader.getString();
                } else if ("dncEndpoint".equals(fieldName)) {
                    deserializedDelegatedControllerProperties.dncEndpoint = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDelegatedControllerProperties;
        });
    }
}
