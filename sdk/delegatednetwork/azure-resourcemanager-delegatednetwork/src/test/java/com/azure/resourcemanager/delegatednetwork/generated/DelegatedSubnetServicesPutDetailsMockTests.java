// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.delegatednetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.delegatednetwork.DelegatedNetworkManager;
import com.azure.resourcemanager.delegatednetwork.models.ControllerDetails;
import com.azure.resourcemanager.delegatednetwork.models.DelegatedSubnet;
import com.azure.resourcemanager.delegatednetwork.models.SubnetDetails;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DelegatedSubnetServicesPutDetailsMockTests {
    @Test
    public void testPutDetails() throws Exception {
        String responseStr
            = "{\"properties\":{\"resourceGuid\":\"bqtkoievseotgqr\",\"provisioningState\":\"Succeeded\",\"subnetDetails\":{\"id\":\"wlauwzizxbmpg\"},\"controllerDetails\":{\"id\":\"fuzmuvpbtt\"}},\"location\":\"um\",\"tags\":{\"hjpglkf\":\"pxebmnzbt\"},\"id\":\"ohdneuel\",\"name\":\"phsdyhto\",\"type\":\"fikdowwqu\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DelegatedNetworkManager manager = DelegatedNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DelegatedSubnet response = manager.delegatedSubnetServices()
            .define("tmweriofzpyq")
            .withRegion("dnkwwtppjflcxog")
            .withExistingResourceGroup("fiwjmygtdssls")
            .withTags(mapOf("nsikvmkqzeqqkdl", "onz", "bdagxt", "fzxmhhvhgureodkw", "akbogqxndlkzgxh", "bqdxbx"))
            .withSubnetDetails(new SubnetDetails().withId("hszhedplvwiwu"))
            .withControllerDetails(new ControllerDetails().withId("mbes"))
            .create();

        Assertions.assertEquals("um", response.location());
        Assertions.assertEquals("pxebmnzbt", response.tags().get("hjpglkf"));
        Assertions.assertEquals("wlauwzizxbmpg", response.subnetDetails().id());
        Assertions.assertEquals("fuzmuvpbtt", response.controllerDetails().id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
