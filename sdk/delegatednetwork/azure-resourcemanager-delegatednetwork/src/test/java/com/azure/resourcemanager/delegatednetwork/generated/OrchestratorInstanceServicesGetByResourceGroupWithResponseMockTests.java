// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.delegatednetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.delegatednetwork.DelegatedNetworkManager;
import com.azure.resourcemanager.delegatednetwork.models.Orchestrator;
import com.azure.resourcemanager.delegatednetwork.models.OrchestratorKind;
import com.azure.resourcemanager.delegatednetwork.models.ResourceIdentityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrchestratorInstanceServicesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"resourceGuid\":\"osvmk\",\"provisioningState\":\"Deleting\",\"orchestratorAppId\":\"qukkfp\",\"orchestratorTenantId\":\"mg\",\"clusterRootCA\":\"nkjzkdeslpvlop\",\"apiServerEndpoint\":\"yighxpk\",\"privateLinkResourceId\":\"zb\",\"controllerDetails\":{\"id\":\"uebbaumnyqup\"}},\"kind\":\"Kubernetes\",\"identity\":{\"principalId\":\"jn\",\"tenantId\":\"ckhsmtxpsieb\",\"type\":\"None\"},\"location\":\"vpesapskrdqmhjjd\",\"tags\":{\"kn\":\"dwkyzxuu\",\"wsvlxotogtwrupqs\":\"ws\",\"cykvceo\":\"vnm\"},\"id\":\"eil\",\"name\":\"vnotyfjfcnj\",\"type\":\"k\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DelegatedNetworkManager manager = DelegatedNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Orchestrator response = manager.orchestratorInstanceServices()
            .getByResourceGroupWithResponse("ovplw", "bhvgy", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("vpesapskrdqmhjjd", response.location());
        Assertions.assertEquals("dwkyzxuu", response.tags().get("kn"));
        Assertions.assertEquals(OrchestratorKind.KUBERNETES, response.kind());
        Assertions.assertEquals(ResourceIdentityType.NONE, response.identity().type());
        Assertions.assertEquals("qukkfp", response.properties().orchestratorAppId());
        Assertions.assertEquals("mg", response.properties().orchestratorTenantId());
        Assertions.assertEquals("nkjzkdeslpvlop", response.properties().clusterRootCA());
        Assertions.assertEquals("yighxpk", response.properties().apiServerEndpoint());
        Assertions.assertEquals("zb", response.properties().privateLinkResourceId());
        Assertions.assertEquals("uebbaumnyqup", response.properties().controllerDetails().id());
    }
}
