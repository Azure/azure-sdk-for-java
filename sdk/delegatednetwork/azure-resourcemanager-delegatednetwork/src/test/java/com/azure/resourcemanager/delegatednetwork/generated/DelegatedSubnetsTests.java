// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.delegatednetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.delegatednetwork.fluent.models.DelegatedSubnetInner;
import com.azure.resourcemanager.delegatednetwork.models.DelegatedSubnets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DelegatedSubnetsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DelegatedSubnets model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"resourceGuid\":\"ipheoflokeyyien\",\"provisioningState\":\"Failed\"},\"location\":\"tgrhpdjpjumas\",\"tags\":{\"lhbxxhejjzzvdud\":\"jpqyegu\"},\"id\":\"wdslfhotwmcy\",\"name\":\"pwlbjnpg\",\"type\":\"cftadeh\"}],\"nextLink\":\"ltyfsop\"}")
                .toObject(DelegatedSubnets.class);
        Assertions.assertEquals("tgrhpdjpjumas", model.value().get(0).location());
        Assertions.assertEquals("jpqyegu", model.value().get(0).tags().get("lhbxxhejjzzvdud"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DelegatedSubnets model =
            new DelegatedSubnets()
                .withValue(
                    Arrays
                        .asList(
                            new DelegatedSubnetInner()
                                .withLocation("tgrhpdjpjumas")
                                .withTags(mapOf("lhbxxhejjzzvdud", "jpqyegu"))));
        model = BinaryData.fromObject(model).toObject(DelegatedSubnets.class);
        Assertions.assertEquals("tgrhpdjpjumas", model.value().get(0).location());
        Assertions.assertEquals("jpqyegu", model.value().get(0).tags().get("lhbxxhejjzzvdud"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
