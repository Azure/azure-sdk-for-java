// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.delegatednetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.delegatednetwork.DelegatedNetworkManager;
import com.azure.resourcemanager.delegatednetwork.models.ControllerDetails;
import com.azure.resourcemanager.delegatednetwork.models.Orchestrator;
import com.azure.resourcemanager.delegatednetwork.models.OrchestratorIdentity;
import com.azure.resourcemanager.delegatednetwork.models.OrchestratorKind;
import com.azure.resourcemanager.delegatednetwork.models.OrchestratorResourceProperties;
import com.azure.resourcemanager.delegatednetwork.models.ResourceIdentityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrchestratorInstanceServicesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"resourceGuid\":\"peilpjzuaejxdu\",\"provisioningState\":\"Succeeded\",\"orchestratorAppId\":\"zbbtdzumveek\",\"orchestratorTenantId\":\"wozuhkf\",\"clusterRootCA\":\"sjyofdx\",\"apiServerEndpoint\":\"us\",\"privateLinkResourceId\":\"touwaboekqv\",\"controllerDetails\":{\"id\":\"lns\"}},\"kind\":\"Kubernetes\",\"identity\":{\"principalId\":\"wyjsflhhcaalnjix\",\"tenantId\":\"xyawj\",\"type\":\"SystemAssigned\"},\"location\":\"qcslyjpkiid\",\"tags\":{\"lhbnxkna\":\"xznelixhnrztf\",\"pnapnyiropuh\":\"aulppggd\",\"git\":\"igvpgylg\"},\"id\":\"medjvcslynqwwncw\",\"name\":\"zhxgktrmgucn\",\"type\":\"pkteo\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DelegatedNetworkManager manager = DelegatedNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Orchestrator response = manager.orchestratorInstanceServices()
            .define("przqlveu")
            .withRegion("bp")
            .withExistingResourceGroup("xujznbmpowu")
            .withKind(OrchestratorKind.KUBERNETES)
            .withTags(mapOf("rknftguvriuhprwm", "p", "bexrmcq", "yvxqtayriwwroy", "e", "bycnojvkn", "zhpvgqzcjrvxd",
                "qsgzvahapj"))
            .withIdentity(new OrchestratorIdentity().withType(ResourceIdentityType.NONE))
            .withProperties(new OrchestratorResourceProperties().withOrchestratorAppId("tjrip")
                .withOrchestratorTenantId("bpbewtghfgb")
                .withClusterRootCA("gw")
                .withApiServerEndpoint("vlvqhjkbegi")
                .withPrivateLinkResourceId("nmxiebwwaloayqc")
                .withControllerDetails(new ControllerDetails().withId("rtzju")))
            .create();

        Assertions.assertEquals("qcslyjpkiid", response.location());
        Assertions.assertEquals("xznelixhnrztf", response.tags().get("lhbnxkna"));
        Assertions.assertEquals(OrchestratorKind.KUBERNETES, response.kind());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals("zbbtdzumveek", response.properties().orchestratorAppId());
        Assertions.assertEquals("wozuhkf", response.properties().orchestratorTenantId());
        Assertions.assertEquals("sjyofdx", response.properties().clusterRootCA());
        Assertions.assertEquals("us", response.properties().apiServerEndpoint());
        Assertions.assertEquals("touwaboekqv", response.properties().privateLinkResourceId());
        Assertions.assertEquals("lns", response.properties().controllerDetails().id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
