// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.delegatednetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.delegatednetwork.fluent.models.OrchestratorInner;
import com.azure.resourcemanager.delegatednetwork.models.ControllerDetails;
import com.azure.resourcemanager.delegatednetwork.models.OrchestratorIdentity;
import com.azure.resourcemanager.delegatednetwork.models.OrchestratorKind;
import com.azure.resourcemanager.delegatednetwork.models.OrchestratorResourceProperties;
import com.azure.resourcemanager.delegatednetwork.models.Orchestrators;
import com.azure.resourcemanager.delegatednetwork.models.ResourceIdentityType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OrchestratorsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Orchestrators model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"resourceGuid\":\"mrldhu\",\"provisioningState\":\"Deleting\",\"orchestratorAppId\":\"datqxhocdgeabl\",\"orchestratorTenantId\":\"huticndvkao\",\"clusterRootCA\":\"yiftyhxhuro\",\"apiServerEndpoint\":\"tyxolniwpwc\",\"privateLinkResourceId\":\"jfkgiawxk\",\"controllerDetails\":{\"id\":\"ypl\"}},\"kind\":\"Kubernetes\",\"identity\":{\"principalId\":\"asy\",\"tenantId\":\"nddhsgcbacph\",\"type\":\"SystemAssigned\"},\"location\":\"ot\",\"tags\":{\"zndlikwy\":\"gou\",\"bmadgak\":\"kgfg\"},\"id\":\"qsrxybzqqed\",\"name\":\"ytb\",\"type\":\"iqfouflmmnkz\"},{\"properties\":{\"resourceGuid\":\"dmgloug\",\"provisioningState\":\"Provisioning\",\"orchestratorAppId\":\"tmut\",\"orchestratorTenantId\":\"qktapspwgcuert\",\"clusterRootCA\":\"kdosvqw\",\"apiServerEndpoint\":\"mdgbbjfdd\",\"privateLinkResourceId\":\"bmbexppbhtqqro\",\"controllerDetails\":{\"id\":\"p\"}},\"kind\":\"Kubernetes\",\"identity\":{\"principalId\":\"lgbquxig\",\"tenantId\":\"jgzjaoyfhrtx\",\"type\":\"SystemAssigned\"},\"location\":\"erkujys\",\"tags\":{\"awrlyx\":\"juvf\"},\"id\":\"jkcpr\",\"name\":\"nwbxgjvtbvpyssz\",\"type\":\"nruj\"},{\"properties\":{\"resourceGuid\":\"hmuouqfprwzwbn\",\"provisioningState\":\"Provisioning\",\"orchestratorAppId\":\"nwui\",\"orchestratorTenantId\":\"a\",\"clusterRootCA\":\"ufizuckyf\",\"apiServerEndpoint\":\"rfidfvzwdz\",\"privateLinkResourceId\":\"tymw\",\"controllerDetails\":{\"id\":\"dkfthwxmnt\"}},\"kind\":\"Kubernetes\",\"identity\":{\"principalId\":\"opvkmijcm\",\"tenantId\":\"dcuf\",\"type\":\"SystemAssigned\"},\"location\":\"rpymzidnsez\",\"tags\":{\"mdwzjeiachboo\":\"bzsgfyccsne\",\"ypyqrimzinp\":\"flnrosfqpteehzz\",\"dqxhcrmnohjtckwh\":\"swjdkirso\"},\"id\":\"soifiyipjxsqw\",\"name\":\"gr\",\"type\":\"bznorcjxvsnby\"},{\"properties\":{\"resourceGuid\":\"bnmo\",\"provisioningState\":\"Provisioning\",\"orchestratorAppId\":\"shurzafbljjgpbto\",\"orchestratorTenantId\":\"jmkljavbqidtqajz\",\"clusterRootCA\":\"l\",\"apiServerEndpoint\":\"u\",\"privateLinkResourceId\":\"krlkhbzhfepg\",\"controllerDetails\":{\"id\":\"qex\"}},\"kind\":\"Kubernetes\",\"identity\":{\"principalId\":\"xscpaierhhbc\",\"tenantId\":\"l\",\"type\":\"SystemAssigned\"},\"location\":\"a\",\"tags\":{\"nbdxk\":\"aodxo\"},\"id\":\"pxokajionp\",\"name\":\"mexgstxgcp\",\"type\":\"dg\"}],\"nextLink\":\"ajrmvdjwzrlovmc\"}")
            .toObject(Orchestrators.class);
        Assertions.assertEquals("ot", model.value().get(0).location());
        Assertions.assertEquals("gou", model.value().get(0).tags().get("zndlikwy"));
        Assertions.assertEquals(OrchestratorKind.KUBERNETES, model.value().get(0).kind());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("datqxhocdgeabl", model.value().get(0).properties().orchestratorAppId());
        Assertions.assertEquals("huticndvkao", model.value().get(0).properties().orchestratorTenantId());
        Assertions.assertEquals("yiftyhxhuro", model.value().get(0).properties().clusterRootCA());
        Assertions.assertEquals("tyxolniwpwc", model.value().get(0).properties().apiServerEndpoint());
        Assertions.assertEquals("jfkgiawxk", model.value().get(0).properties().privateLinkResourceId());
        Assertions.assertEquals("ypl", model.value().get(0).properties().controllerDetails().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Orchestrators model = new Orchestrators().withValue(Arrays.asList(
            new OrchestratorInner().withLocation("ot")
                .withTags(mapOf("zndlikwy", "gou", "bmadgak", "kgfg"))
                .withKind(OrchestratorKind.KUBERNETES)
                .withIdentity(new OrchestratorIdentity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
                .withProperties(new OrchestratorResourceProperties().withOrchestratorAppId("datqxhocdgeabl")
                    .withOrchestratorTenantId("huticndvkao")
                    .withClusterRootCA("yiftyhxhuro")
                    .withApiServerEndpoint("tyxolniwpwc")
                    .withPrivateLinkResourceId("jfkgiawxk")
                    .withControllerDetails(new ControllerDetails().withId("ypl"))),
            new OrchestratorInner().withLocation("erkujys")
                .withTags(mapOf("awrlyx", "juvf"))
                .withKind(OrchestratorKind.KUBERNETES)
                .withIdentity(new OrchestratorIdentity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
                .withProperties(new OrchestratorResourceProperties().withOrchestratorAppId("tmut")
                    .withOrchestratorTenantId("qktapspwgcuert")
                    .withClusterRootCA("kdosvqw")
                    .withApiServerEndpoint("mdgbbjfdd")
                    .withPrivateLinkResourceId("bmbexppbhtqqro")
                    .withControllerDetails(new ControllerDetails().withId("p"))),
            new OrchestratorInner().withLocation("rpymzidnsez")
                .withTags(mapOf("mdwzjeiachboo", "bzsgfyccsne", "ypyqrimzinp", "flnrosfqpteehzz", "dqxhcrmnohjtckwh",
                    "swjdkirso"))
                .withKind(OrchestratorKind.KUBERNETES)
                .withIdentity(new OrchestratorIdentity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
                .withProperties(new OrchestratorResourceProperties().withOrchestratorAppId("nwui")
                    .withOrchestratorTenantId("a")
                    .withClusterRootCA("ufizuckyf")
                    .withApiServerEndpoint("rfidfvzwdz")
                    .withPrivateLinkResourceId("tymw")
                    .withControllerDetails(new ControllerDetails().withId("dkfthwxmnt"))),
            new OrchestratorInner().withLocation("a")
                .withTags(mapOf("nbdxk", "aodxo"))
                .withKind(OrchestratorKind.KUBERNETES)
                .withIdentity(new OrchestratorIdentity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
                .withProperties(new OrchestratorResourceProperties().withOrchestratorAppId("shurzafbljjgpbto")
                    .withOrchestratorTenantId("jmkljavbqidtqajz")
                    .withClusterRootCA("l")
                    .withApiServerEndpoint("u")
                    .withPrivateLinkResourceId("krlkhbzhfepg")
                    .withControllerDetails(new ControllerDetails().withId("qex")))));
        model = BinaryData.fromObject(model).toObject(Orchestrators.class);
        Assertions.assertEquals("ot", model.value().get(0).location());
        Assertions.assertEquals("gou", model.value().get(0).tags().get("zndlikwy"));
        Assertions.assertEquals(OrchestratorKind.KUBERNETES, model.value().get(0).kind());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("datqxhocdgeabl", model.value().get(0).properties().orchestratorAppId());
        Assertions.assertEquals("huticndvkao", model.value().get(0).properties().orchestratorTenantId());
        Assertions.assertEquals("yiftyhxhuro", model.value().get(0).properties().clusterRootCA());
        Assertions.assertEquals("tyxolniwpwc", model.value().get(0).properties().apiServerEndpoint());
        Assertions.assertEquals("jfkgiawxk", model.value().get(0).properties().privateLinkResourceId());
        Assertions.assertEquals("ypl", model.value().get(0).properties().controllerDetails().id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
