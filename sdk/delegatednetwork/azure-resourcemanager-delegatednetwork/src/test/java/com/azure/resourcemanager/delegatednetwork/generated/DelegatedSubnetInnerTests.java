// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.delegatednetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.delegatednetwork.fluent.models.DelegatedSubnetInner;
import com.azure.resourcemanager.delegatednetwork.models.ControllerDetails;
import com.azure.resourcemanager.delegatednetwork.models.SubnetDetails;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DelegatedSubnetInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DelegatedSubnetInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"resourceGuid\":\"x\",\"provisioningState\":\"Deleting\",\"subnetDetails\":{\"id\":\"ddtocjjxhvp\"},\"controllerDetails\":{\"id\":\"exhd\"}},\"location\":\"xibqeojnx\",\"tags\":{\"eic\":\"vddntwn\",\"cyddglmjthjqk\":\"twnpzaoqvuhrhcf\",\"ciwqvhk\":\"pyeicxm\",\"ghmewuam\":\"ixuigdtopbobj\"},\"id\":\"uhrzayvvt\",\"name\":\"gvdfgiotkftutq\",\"type\":\"ln\"}")
                .toObject(DelegatedSubnetInner.class);
        Assertions.assertEquals("xibqeojnx", model.location());
        Assertions.assertEquals("vddntwn", model.tags().get("eic"));
        Assertions.assertEquals("ddtocjjxhvp", model.subnetDetails().id());
        Assertions.assertEquals("exhd", model.controllerDetails().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DelegatedSubnetInner model =
            new DelegatedSubnetInner()
                .withLocation("xibqeojnx")
                .withTags(
                    mapOf(
                        "eic",
                        "vddntwn",
                        "cyddglmjthjqk",
                        "twnpzaoqvuhrhcf",
                        "ciwqvhk",
                        "pyeicxm",
                        "ghmewuam",
                        "ixuigdtopbobj"))
                .withSubnetDetails(new SubnetDetails().withId("ddtocjjxhvp"))
                .withControllerDetails(new ControllerDetails().withId("exhd"));
        model = BinaryData.fromObject(model).toObject(DelegatedSubnetInner.class);
        Assertions.assertEquals("xibqeojnx", model.location());
        Assertions.assertEquals("vddntwn", model.tags().get("eic"));
        Assertions.assertEquals("ddtocjjxhvp", model.subnetDetails().id());
        Assertions.assertEquals("exhd", model.controllerDetails().id());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
