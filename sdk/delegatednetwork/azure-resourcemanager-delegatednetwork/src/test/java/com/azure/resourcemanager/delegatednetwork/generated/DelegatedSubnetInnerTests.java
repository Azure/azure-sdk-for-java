// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.delegatednetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.delegatednetwork.fluent.models.DelegatedSubnetInner;
import com.azure.resourcemanager.delegatednetwork.models.ControllerDetails;
import com.azure.resourcemanager.delegatednetwork.models.SubnetDetails;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DelegatedSubnetInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DelegatedSubnetInner model = BinaryData.fromString(
            "{\"properties\":{\"resourceGuid\":\"ijcoejctb\",\"provisioningState\":\"Succeeded\",\"subnetDetails\":{\"id\":\"sycbkbfk\"},\"controllerDetails\":{\"id\":\"dkexxppofm\"}},\"location\":\"axcfjpgddtocjjx\",\"tags\":{\"bqe\":\"mouexhdzx\",\"eic\":\"jnxqbzvddntwn\",\"cyddglmjthjqk\":\"twnpzaoqvuhrhcf\"},\"id\":\"pyeicxm\",\"name\":\"ciwqvhk\",\"type\":\"ixuigdtopbobj\"}")
            .toObject(DelegatedSubnetInner.class);
        Assertions.assertEquals("axcfjpgddtocjjx", model.location());
        Assertions.assertEquals("mouexhdzx", model.tags().get("bqe"));
        Assertions.assertEquals("sycbkbfk", model.subnetDetails().id());
        Assertions.assertEquals("dkexxppofm", model.controllerDetails().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DelegatedSubnetInner model = new DelegatedSubnetInner().withLocation("axcfjpgddtocjjx")
            .withTags(mapOf("bqe", "mouexhdzx", "eic", "jnxqbzvddntwn", "cyddglmjthjqk", "twnpzaoqvuhrhcf"))
            .withSubnetDetails(new SubnetDetails().withId("sycbkbfk"))
            .withControllerDetails(new ControllerDetails().withId("dkexxppofm"));
        model = BinaryData.fromObject(model).toObject(DelegatedSubnetInner.class);
        Assertions.assertEquals("axcfjpgddtocjjx", model.location());
        Assertions.assertEquals("mouexhdzx", model.tags().get("bqe"));
        Assertions.assertEquals("sycbkbfk", model.subnetDetails().id());
        Assertions.assertEquals("dkexxppofm", model.controllerDetails().id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
