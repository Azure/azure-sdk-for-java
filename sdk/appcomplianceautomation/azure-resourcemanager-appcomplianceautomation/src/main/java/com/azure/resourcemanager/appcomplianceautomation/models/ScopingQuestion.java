// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The definition of a scoping question.
 */
@Immutable
public final class ScopingQuestion implements JsonSerializable<ScopingQuestion> {
    /*
     * Question id.
     */
    private String questionId;

    /*
     * Superior question id.
     */
    private String superiorQuestionId;

    /*
     * Input type of the question answer.
     */
    private InputType inputType;

    /*
     * Option id list.
     */
    private List<String> optionIds;

    /*
     * The rule of the question.
     */
    private List<Rule> rules;

    /*
     * The answer value to show the sub questions.
     */
    private String showSubQuestionsValue;

    /**
     * Creates an instance of ScopingQuestion class.
     */
    private ScopingQuestion() {
    }

    /**
     * Get the questionId property: Question id.
     * 
     * @return the questionId value.
     */
    public String questionId() {
        return this.questionId;
    }

    /**
     * Get the superiorQuestionId property: Superior question id.
     * 
     * @return the superiorQuestionId value.
     */
    public String superiorQuestionId() {
        return this.superiorQuestionId;
    }

    /**
     * Get the inputType property: Input type of the question answer.
     * 
     * @return the inputType value.
     */
    public InputType inputType() {
        return this.inputType;
    }

    /**
     * Get the optionIds property: Option id list.
     * 
     * @return the optionIds value.
     */
    public List<String> optionIds() {
        return this.optionIds;
    }

    /**
     * Get the rules property: The rule of the question.
     * 
     * @return the rules value.
     */
    public List<Rule> rules() {
        return this.rules;
    }

    /**
     * Get the showSubQuestionsValue property: The answer value to show the sub questions.
     * 
     * @return the showSubQuestionsValue value.
     */
    public String showSubQuestionsValue() {
        return this.showSubQuestionsValue;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScopingQuestion from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScopingQuestion if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ScopingQuestion.
     */
    public static ScopingQuestion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScopingQuestion deserializedScopingQuestion = new ScopingQuestion();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("questionId".equals(fieldName)) {
                    deserializedScopingQuestion.questionId = reader.getString();
                } else if ("inputType".equals(fieldName)) {
                    deserializedScopingQuestion.inputType = InputType.fromString(reader.getString());
                } else if ("optionIds".equals(fieldName)) {
                    List<String> optionIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedScopingQuestion.optionIds = optionIds;
                } else if ("rules".equals(fieldName)) {
                    List<Rule> rules = reader.readArray(reader1 -> Rule.fromString(reader1.getString()));
                    deserializedScopingQuestion.rules = rules;
                } else if ("superiorQuestionId".equals(fieldName)) {
                    deserializedScopingQuestion.superiorQuestionId = reader.getString();
                } else if ("showSubQuestionsValue".equals(fieldName)) {
                    deserializedScopingQuestion.showSubQuestionsValue = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScopingQuestion;
        });
    }
}
