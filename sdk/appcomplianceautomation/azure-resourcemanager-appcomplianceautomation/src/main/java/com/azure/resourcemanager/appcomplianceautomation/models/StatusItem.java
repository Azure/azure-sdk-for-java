// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Single status.
 */
@Immutable
public final class StatusItem implements JsonSerializable<StatusItem> {
    /*
     * Status name - e.g. "Active", "Failed".
     */
    private String statusName;

    /*
     * Status value. e.g. "100", or "100%".
     */
    private String statusValue;

    /**
     * Creates an instance of StatusItem class.
     */
    private StatusItem() {
    }

    /**
     * Get the statusName property: Status name - e.g. "Active", "Failed".
     * 
     * @return the statusName value.
     */
    public String statusName() {
        return this.statusName;
    }

    /**
     * Get the statusValue property: Status value. e.g. "100", or "100%".
     * 
     * @return the statusValue value.
     */
    public String statusValue() {
        return this.statusValue;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("statusName", this.statusName);
        jsonWriter.writeStringField("statusValue", this.statusValue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StatusItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StatusItem if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the StatusItem.
     */
    public static StatusItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StatusItem deserializedStatusItem = new StatusItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("statusName".equals(fieldName)) {
                    deserializedStatusItem.statusName = reader.getString();
                } else if ("statusValue".equals(fieldName)) {
                    deserializedStatusItem.statusValue = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStatusItem;
        });
    }
}
