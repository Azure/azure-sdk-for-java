// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Success. The response indicates given subscriptions has been onboarded.
 */
@Immutable
public final class OnboardResponseInner implements JsonSerializable<OnboardResponseInner> {
    /*
     * List of subscription ids that are onboarded
     */
    private List<String> subscriptionIds;

    /**
     * Creates an instance of OnboardResponseInner class.
     */
    private OnboardResponseInner() {
    }

    /**
     * Get the subscriptionIds property: List of subscription ids that are onboarded.
     * 
     * @return the subscriptionIds value.
     */
    public List<String> subscriptionIds() {
        return this.subscriptionIds;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("subscriptionIds", this.subscriptionIds,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OnboardResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OnboardResponseInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OnboardResponseInner.
     */
    public static OnboardResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OnboardResponseInner deserializedOnboardResponseInner = new OnboardResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subscriptionIds".equals(fieldName)) {
                    List<String> subscriptionIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedOnboardResponseInner.subscriptionIds = subscriptionIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOnboardResponseInner;
        });
    }
}
