// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * A class represent the resource.
 */
@Immutable
public final class ResponsibilityResource implements JsonSerializable<ResponsibilityResource> {
    /*
     * The Id of the resource.
     */
    private String resourceId;

    /*
     * Account Id. For example - AWS account Id.
     */
    private String accountId;

    /*
     * The type of the resource. e.g. "Microsoft.SignalRService/SignalR"
     */
    private String resourceType;

    /*
     * Resource origin.
     */
    private ResourceOrigin resourceOrigin;

    /*
     * Resource status.
     */
    private ResourceStatus resourceStatus;

    /*
     * The status change date for the resource.
     */
    private OffsetDateTime resourceStatusChangeDate;

    /*
     * List of recommendation id.
     */
    private List<String> recommendationIds;

    /**
     * Creates an instance of ResponsibilityResource class.
     */
    private ResponsibilityResource() {
    }

    /**
     * Get the resourceId property: The Id of the resource.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Get the accountId property: Account Id. For example - AWS account Id.
     * 
     * @return the accountId value.
     */
    public String accountId() {
        return this.accountId;
    }

    /**
     * Get the resourceType property: The type of the resource. e.g. "Microsoft.SignalRService/SignalR".
     * 
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Get the resourceOrigin property: Resource origin.
     * 
     * @return the resourceOrigin value.
     */
    public ResourceOrigin resourceOrigin() {
        return this.resourceOrigin;
    }

    /**
     * Get the resourceStatus property: Resource status.
     * 
     * @return the resourceStatus value.
     */
    public ResourceStatus resourceStatus() {
        return this.resourceStatus;
    }

    /**
     * Get the resourceStatusChangeDate property: The status change date for the resource.
     * 
     * @return the resourceStatusChangeDate value.
     */
    public OffsetDateTime resourceStatusChangeDate() {
        return this.resourceStatusChangeDate;
    }

    /**
     * Get the recommendationIds property: List of recommendation id.
     * 
     * @return the recommendationIds value.
     */
    public List<String> recommendationIds() {
        return this.recommendationIds;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("recommendationIds", this.recommendationIds,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponsibilityResource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponsibilityResource if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResponsibilityResource.
     */
    public static ResponsibilityResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResponsibilityResource deserializedResponsibilityResource = new ResponsibilityResource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceId".equals(fieldName)) {
                    deserializedResponsibilityResource.resourceId = reader.getString();
                } else if ("accountId".equals(fieldName)) {
                    deserializedResponsibilityResource.accountId = reader.getString();
                } else if ("resourceType".equals(fieldName)) {
                    deserializedResponsibilityResource.resourceType = reader.getString();
                } else if ("resourceOrigin".equals(fieldName)) {
                    deserializedResponsibilityResource.resourceOrigin = ResourceOrigin.fromString(reader.getString());
                } else if ("resourceStatus".equals(fieldName)) {
                    deserializedResponsibilityResource.resourceStatus = ResourceStatus.fromString(reader.getString());
                } else if ("resourceStatusChangeDate".equals(fieldName)) {
                    deserializedResponsibilityResource.resourceStatusChangeDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("recommendationIds".equals(fieldName)) {
                    List<String> recommendationIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedResponsibilityResource.recommendationIds = recommendationIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResponsibilityResource;
        });
    }
}
