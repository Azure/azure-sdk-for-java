// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Trigger evaluation request.
 */
@Fluent
public final class TriggerEvaluationRequest implements JsonSerializable<TriggerEvaluationRequest> {
    /*
     * List of resource ids to be evaluated
     */
    private List<String> resourceIds;

    /**
     * Creates an instance of TriggerEvaluationRequest class.
     */
    public TriggerEvaluationRequest() {
    }

    /**
     * Get the resourceIds property: List of resource ids to be evaluated.
     * 
     * @return the resourceIds value.
     */
    public List<String> resourceIds() {
        return this.resourceIds;
    }

    /**
     * Set the resourceIds property: List of resource ids to be evaluated.
     * 
     * @param resourceIds the resourceIds value to set.
     * @return the TriggerEvaluationRequest object itself.
     */
    public TriggerEvaluationRequest withResourceIds(List<String> resourceIds) {
        this.resourceIds = resourceIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceIds() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceIds in model TriggerEvaluationRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TriggerEvaluationRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("resourceIds", this.resourceIds, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TriggerEvaluationRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TriggerEvaluationRequest if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TriggerEvaluationRequest.
     */
    public static TriggerEvaluationRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TriggerEvaluationRequest deserializedTriggerEvaluationRequest = new TriggerEvaluationRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceIds".equals(fieldName)) {
                    List<String> resourceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedTriggerEvaluationRequest.resourceIds = resourceIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTriggerEvaluationRequest;
        });
    }
}
