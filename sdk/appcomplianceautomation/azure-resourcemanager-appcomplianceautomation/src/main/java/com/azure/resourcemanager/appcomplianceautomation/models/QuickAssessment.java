// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * A class represent the quick assessment.
 */
@Immutable
public final class QuickAssessment implements JsonSerializable<QuickAssessment> {
    /*
     * Resource id.
     */
    private String resourceId;

    /*
     * Responsibility id.
     */
    private String responsibilityId;

    /*
     * The timestamp of resource creation (UTC).
     */
    private OffsetDateTime timestamp;

    /*
     * Quick assessment status.
     */
    private ResourceStatus resourceStatus;

    /*
     * Quick assessment display name.
     */
    private String displayName;

    /*
     * Quick assessment display name.
     */
    private String description;

    /*
     * Link to remediation steps for this quick assessment.
     */
    private String remediationLink;

    /**
     * Creates an instance of QuickAssessment class.
     */
    private QuickAssessment() {
    }

    /**
     * Get the resourceId property: Resource id.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Get the responsibilityId property: Responsibility id.
     * 
     * @return the responsibilityId value.
     */
    public String responsibilityId() {
        return this.responsibilityId;
    }

    /**
     * Get the timestamp property: The timestamp of resource creation (UTC).
     * 
     * @return the timestamp value.
     */
    public OffsetDateTime timestamp() {
        return this.timestamp;
    }

    /**
     * Get the resourceStatus property: Quick assessment status.
     * 
     * @return the resourceStatus value.
     */
    public ResourceStatus resourceStatus() {
        return this.resourceStatus;
    }

    /**
     * Get the displayName property: Quick assessment display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the description property: Quick assessment display name.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the remediationLink property: Link to remediation steps for this quick assessment.
     * 
     * @return the remediationLink value.
     */
    public String remediationLink() {
        return this.remediationLink;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QuickAssessment from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QuickAssessment if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the QuickAssessment.
     */
    public static QuickAssessment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QuickAssessment deserializedQuickAssessment = new QuickAssessment();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceId".equals(fieldName)) {
                    deserializedQuickAssessment.resourceId = reader.getString();
                } else if ("responsibilityId".equals(fieldName)) {
                    deserializedQuickAssessment.responsibilityId = reader.getString();
                } else if ("timestamp".equals(fieldName)) {
                    deserializedQuickAssessment.timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("resourceStatus".equals(fieldName)) {
                    deserializedQuickAssessment.resourceStatus = ResourceStatus.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedQuickAssessment.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedQuickAssessment.description = reader.getString();
                } else if ("remediationLink".equals(fieldName)) {
                    deserializedQuickAssessment.remediationLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQuickAssessment;
        });
    }
}
