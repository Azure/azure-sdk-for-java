// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A class represent the recommendation.
 */
@Immutable
public final class Recommendation implements JsonSerializable<Recommendation> {
    /*
     * The Id of the recommendation.
     */
    private String recommendationId;

    /*
     * The short name of the recommendation. e.g. "Invalid TLS config"
     */
    private String recommendationShortName;

    /*
     * List of recommendation solutions.
     */
    private List<RecommendationSolution> recommendationSolutions;

    /**
     * Creates an instance of Recommendation class.
     */
    public Recommendation() {
    }

    /**
     * Get the recommendationId property: The Id of the recommendation.
     * 
     * @return the recommendationId value.
     */
    public String recommendationId() {
        return this.recommendationId;
    }

    /**
     * Get the recommendationShortName property: The short name of the recommendation. e.g. "Invalid TLS config".
     * 
     * @return the recommendationShortName value.
     */
    public String recommendationShortName() {
        return this.recommendationShortName;
    }

    /**
     * Get the recommendationSolutions property: List of recommendation solutions.
     * 
     * @return the recommendationSolutions value.
     */
    public List<RecommendationSolution> recommendationSolutions() {
        return this.recommendationSolutions;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (recommendationSolutions() != null) {
            recommendationSolutions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Recommendation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Recommendation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the Recommendation.
     */
    public static Recommendation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Recommendation deserializedRecommendation = new Recommendation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recommendationId".equals(fieldName)) {
                    deserializedRecommendation.recommendationId = reader.getString();
                } else if ("recommendationShortName".equals(fieldName)) {
                    deserializedRecommendation.recommendationShortName = reader.getString();
                } else if ("recommendationSolutions".equals(fieldName)) {
                    List<RecommendationSolution> recommendationSolutions
                        = reader.readArray(reader1 -> RecommendationSolution.fromJson(reader1));
                    deserializedRecommendation.recommendationSolutions = recommendationSolutions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecommendation;
        });
    }
}
