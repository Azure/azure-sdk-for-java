// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appcomplianceautomation.fluent.ProviderActionsClient;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.CheckNameAvailabilityResponseInner;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.GetCollectionCountResponseInner;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.GetOverviewStatusResponseInner;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.ListInUseStorageAccountsResponseInner;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.OnboardResponseInner;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.TriggerEvaluationResponseInner;
import com.azure.resourcemanager.appcomplianceautomation.models.CheckNameAvailabilityRequest;
import com.azure.resourcemanager.appcomplianceautomation.models.CheckNameAvailabilityResponse;
import com.azure.resourcemanager.appcomplianceautomation.models.GetCollectionCountRequest;
import com.azure.resourcemanager.appcomplianceautomation.models.GetCollectionCountResponse;
import com.azure.resourcemanager.appcomplianceautomation.models.GetOverviewStatusRequest;
import com.azure.resourcemanager.appcomplianceautomation.models.GetOverviewStatusResponse;
import com.azure.resourcemanager.appcomplianceautomation.models.ListInUseStorageAccountsRequest;
import com.azure.resourcemanager.appcomplianceautomation.models.ListInUseStorageAccountsResponse;
import com.azure.resourcemanager.appcomplianceautomation.models.OnboardRequest;
import com.azure.resourcemanager.appcomplianceautomation.models.OnboardResponse;
import com.azure.resourcemanager.appcomplianceautomation.models.ProviderActions;
import com.azure.resourcemanager.appcomplianceautomation.models.TriggerEvaluationRequest;
import com.azure.resourcemanager.appcomplianceautomation.models.TriggerEvaluationResponse;

public final class ProviderActionsImpl implements ProviderActions {
    private static final ClientLogger LOGGER = new ClientLogger(ProviderActionsImpl.class);

    private final ProviderActionsClient innerClient;

    private final com.azure.resourcemanager.appcomplianceautomation.AppComplianceAutomationManager serviceManager;

    public ProviderActionsImpl(ProviderActionsClient innerClient,
        com.azure.resourcemanager.appcomplianceautomation.AppComplianceAutomationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<CheckNameAvailabilityResponse> checkNameAvailabilityWithResponse(CheckNameAvailabilityRequest body,
        Context context) {
        Response<CheckNameAvailabilityResponseInner> inner
            = this.serviceClient().checkNameAvailabilityWithResponse(body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CheckNameAvailabilityResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CheckNameAvailabilityResponse checkNameAvailability(CheckNameAvailabilityRequest body) {
        CheckNameAvailabilityResponseInner inner = this.serviceClient().checkNameAvailability(body);
        if (inner != null) {
            return new CheckNameAvailabilityResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GetCollectionCountResponse> getCollectionCountWithResponse(GetCollectionCountRequest body,
        Context context) {
        Response<GetCollectionCountResponseInner> inner
            = this.serviceClient().getCollectionCountWithResponse(body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new GetCollectionCountResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GetCollectionCountResponse getCollectionCount(GetCollectionCountRequest body) {
        GetCollectionCountResponseInner inner = this.serviceClient().getCollectionCount(body);
        if (inner != null) {
            return new GetCollectionCountResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GetOverviewStatusResponse> getOverviewStatusWithResponse(GetOverviewStatusRequest body,
        Context context) {
        Response<GetOverviewStatusResponseInner> inner
            = this.serviceClient().getOverviewStatusWithResponse(body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new GetOverviewStatusResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GetOverviewStatusResponse getOverviewStatus(GetOverviewStatusRequest body) {
        GetOverviewStatusResponseInner inner = this.serviceClient().getOverviewStatus(body);
        if (inner != null) {
            return new GetOverviewStatusResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OnboardResponse onboard(OnboardRequest body) {
        OnboardResponseInner inner = this.serviceClient().onboard(body);
        if (inner != null) {
            return new OnboardResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OnboardResponse onboard(OnboardRequest body, Context context) {
        OnboardResponseInner inner = this.serviceClient().onboard(body, context);
        if (inner != null) {
            return new OnboardResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public TriggerEvaluationResponse triggerEvaluation(TriggerEvaluationRequest body) {
        TriggerEvaluationResponseInner inner = this.serviceClient().triggerEvaluation(body);
        if (inner != null) {
            return new TriggerEvaluationResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public TriggerEvaluationResponse triggerEvaluation(TriggerEvaluationRequest body, Context context) {
        TriggerEvaluationResponseInner inner = this.serviceClient().triggerEvaluation(body, context);
        if (inner != null) {
            return new TriggerEvaluationResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ListInUseStorageAccountsResponse>
        listInUseStorageAccountsWithResponse(ListInUseStorageAccountsRequest body, Context context) {
        Response<ListInUseStorageAccountsResponseInner> inner
            = this.serviceClient().listInUseStorageAccountsWithResponse(body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ListInUseStorageAccountsResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ListInUseStorageAccountsResponse listInUseStorageAccounts(ListInUseStorageAccountsRequest body) {
        ListInUseStorageAccountsResponseInner inner = this.serviceClient().listInUseStorageAccounts(body);
        if (inner != null) {
            return new ListInUseStorageAccountsResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private ProviderActionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appcomplianceautomation.AppComplianceAutomationManager manager() {
        return this.serviceManager;
    }
}
