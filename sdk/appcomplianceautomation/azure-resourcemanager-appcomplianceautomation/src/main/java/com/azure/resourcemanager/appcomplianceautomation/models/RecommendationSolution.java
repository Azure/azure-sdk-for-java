// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A class represent the recommendation solution.
 */
@Immutable
public final class RecommendationSolution implements JsonSerializable<RecommendationSolution> {
    /*
     * The index of the recommendation solution.
     */
    private String recommendationSolutionIndex;

    /*
     * The detail steps of the recommendation solution.
     */
    private String recommendationSolutionContent;

    /*
     * Indicates whether this solution is the recommended.
     */
    private IsRecommendSolution isRecommendSolution;

    /**
     * Creates an instance of RecommendationSolution class.
     */
    private RecommendationSolution() {
    }

    /**
     * Get the recommendationSolutionIndex property: The index of the recommendation solution.
     * 
     * @return the recommendationSolutionIndex value.
     */
    public String recommendationSolutionIndex() {
        return this.recommendationSolutionIndex;
    }

    /**
     * Get the recommendationSolutionContent property: The detail steps of the recommendation solution.
     * 
     * @return the recommendationSolutionContent value.
     */
    public String recommendationSolutionContent() {
        return this.recommendationSolutionContent;
    }

    /**
     * Get the isRecommendSolution property: Indicates whether this solution is the recommended.
     * 
     * @return the isRecommendSolution value.
     */
    public IsRecommendSolution isRecommendSolution() {
        return this.isRecommendSolution;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecommendationSolution from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecommendationSolution if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RecommendationSolution.
     */
    public static RecommendationSolution fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecommendationSolution deserializedRecommendationSolution = new RecommendationSolution();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recommendationSolutionIndex".equals(fieldName)) {
                    deserializedRecommendationSolution.recommendationSolutionIndex = reader.getString();
                } else if ("recommendationSolutionContent".equals(fieldName)) {
                    deserializedRecommendationSolution.recommendationSolutionContent = reader.getString();
                } else if ("isRecommendSolution".equals(fieldName)) {
                    deserializedRecommendationSolution.isRecommendSolution
                        = IsRecommendSolution.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecommendationSolution;
        });
    }
}
