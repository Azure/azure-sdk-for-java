// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.appcomplianceautomation.models.CertSyncRecord;
import java.io.IOException;

/**
 * Synchronize certification record response.
 */
@Immutable
public final class SyncCertRecordResponseInner implements JsonSerializable<SyncCertRecordResponseInner> {
    /*
     * certification record synchronized.
     */
    private CertSyncRecord certRecord;

    /**
     * Creates an instance of SyncCertRecordResponseInner class.
     */
    private SyncCertRecordResponseInner() {
    }

    /**
     * Get the certRecord property: certification record synchronized.
     * 
     * @return the certRecord value.
     */
    public CertSyncRecord certRecord() {
        return this.certRecord;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (certRecord() != null) {
            certRecord().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("certRecord", this.certRecord);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SyncCertRecordResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SyncCertRecordResponseInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SyncCertRecordResponseInner.
     */
    public static SyncCertRecordResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SyncCertRecordResponseInner deserializedSyncCertRecordResponseInner = new SyncCertRecordResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("certRecord".equals(fieldName)) {
                    deserializedSyncCertRecordResponseInner.certRecord = CertSyncRecord.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSyncCertRecordResponseInner;
        });
    }
}
