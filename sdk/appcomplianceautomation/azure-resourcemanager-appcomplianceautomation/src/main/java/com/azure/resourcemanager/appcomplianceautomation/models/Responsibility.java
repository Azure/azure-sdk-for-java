// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A class represent the customer responsibility.
 */
@Fluent
public final class Responsibility implements JsonSerializable<Responsibility> {
    /*
     * The id of the customer responsibility.
     */
    private String responsibilityId;

    /*
     * The title of the customer responsibility.
     */
    private String responsibilityTitle;

    /*
     * The description of the customer responsibility.
     */
    private String responsibilityDescription;

    /*
     * The type of customer responsibility.
     */
    private ResponsibilityType responsibilityType;

    /*
     * The severity level of this customer responsibility.
     */
    private ResponsibilitySeverity responsibilitySeverity;

    /*
     * The status of this customer responsibility.
     */
    private ResponsibilityStatus responsibilityStatus;

    /*
     * The supported cloud environment of this customer responsibility.
     */
    private ResponsibilityEnvironment responsibilityEnvironment;

    /*
     * The count of all failed resources.
     */
    private Integer failedResourceCount;

    /*
     * The count of all resources.
     */
    private Integer totalResourceCount;

    /*
     * List of resource.
     */
    private List<ResponsibilityResource> resourceList;

    /*
     * List of recommendation.
     */
    private List<Recommendation> recommendationList;

    /*
     * The evidence upload guidance description.
     */
    private String guidance;

    /*
     * The justification given by the user to clarify the reason.
     */
    private String justification;

    /*
     * List of evidence file url.
     */
    private List<String> evidenceFiles;

    /**
     * Creates an instance of Responsibility class.
     */
    public Responsibility() {
    }

    /**
     * Get the responsibilityId property: The id of the customer responsibility.
     * 
     * @return the responsibilityId value.
     */
    public String responsibilityId() {
        return this.responsibilityId;
    }

    /**
     * Get the responsibilityTitle property: The title of the customer responsibility.
     * 
     * @return the responsibilityTitle value.
     */
    public String responsibilityTitle() {
        return this.responsibilityTitle;
    }

    /**
     * Get the responsibilityDescription property: The description of the customer responsibility.
     * 
     * @return the responsibilityDescription value.
     */
    public String responsibilityDescription() {
        return this.responsibilityDescription;
    }

    /**
     * Get the responsibilityType property: The type of customer responsibility.
     * 
     * @return the responsibilityType value.
     */
    public ResponsibilityType responsibilityType() {
        return this.responsibilityType;
    }

    /**
     * Get the responsibilitySeverity property: The severity level of this customer responsibility.
     * 
     * @return the responsibilitySeverity value.
     */
    public ResponsibilitySeverity responsibilitySeverity() {
        return this.responsibilitySeverity;
    }

    /**
     * Get the responsibilityStatus property: The status of this customer responsibility.
     * 
     * @return the responsibilityStatus value.
     */
    public ResponsibilityStatus responsibilityStatus() {
        return this.responsibilityStatus;
    }

    /**
     * Get the responsibilityEnvironment property: The supported cloud environment of this customer responsibility.
     * 
     * @return the responsibilityEnvironment value.
     */
    public ResponsibilityEnvironment responsibilityEnvironment() {
        return this.responsibilityEnvironment;
    }

    /**
     * Get the failedResourceCount property: The count of all failed resources.
     * 
     * @return the failedResourceCount value.
     */
    public Integer failedResourceCount() {
        return this.failedResourceCount;
    }

    /**
     * Set the failedResourceCount property: The count of all failed resources.
     * 
     * @param failedResourceCount the failedResourceCount value to set.
     * @return the Responsibility object itself.
     */
    public Responsibility withFailedResourceCount(Integer failedResourceCount) {
        this.failedResourceCount = failedResourceCount;
        return this;
    }

    /**
     * Get the totalResourceCount property: The count of all resources.
     * 
     * @return the totalResourceCount value.
     */
    public Integer totalResourceCount() {
        return this.totalResourceCount;
    }

    /**
     * Set the totalResourceCount property: The count of all resources.
     * 
     * @param totalResourceCount the totalResourceCount value to set.
     * @return the Responsibility object itself.
     */
    public Responsibility withTotalResourceCount(Integer totalResourceCount) {
        this.totalResourceCount = totalResourceCount;
        return this;
    }

    /**
     * Get the resourceList property: List of resource.
     * 
     * @return the resourceList value.
     */
    public List<ResponsibilityResource> resourceList() {
        return this.resourceList;
    }

    /**
     * Get the recommendationList property: List of recommendation.
     * 
     * @return the recommendationList value.
     */
    public List<Recommendation> recommendationList() {
        return this.recommendationList;
    }

    /**
     * Get the guidance property: The evidence upload guidance description.
     * 
     * @return the guidance value.
     */
    public String guidance() {
        return this.guidance;
    }

    /**
     * Get the justification property: The justification given by the user to clarify the reason.
     * 
     * @return the justification value.
     */
    public String justification() {
        return this.justification;
    }

    /**
     * Get the evidenceFiles property: List of evidence file url.
     * 
     * @return the evidenceFiles value.
     */
    public List<String> evidenceFiles() {
        return this.evidenceFiles;
    }

    /**
     * Set the evidenceFiles property: List of evidence file url.
     * 
     * @param evidenceFiles the evidenceFiles value to set.
     * @return the Responsibility object itself.
     */
    public Responsibility withEvidenceFiles(List<String> evidenceFiles) {
        this.evidenceFiles = evidenceFiles;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceList() != null) {
            resourceList().forEach(e -> e.validate());
        }
        if (recommendationList() != null) {
            recommendationList().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("failedResourceCount", this.failedResourceCount);
        jsonWriter.writeNumberField("totalResourceCount", this.totalResourceCount);
        jsonWriter.writeArrayField("evidenceFiles", this.evidenceFiles,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Responsibility from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Responsibility if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the Responsibility.
     */
    public static Responsibility fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Responsibility deserializedResponsibility = new Responsibility();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("responsibilityId".equals(fieldName)) {
                    deserializedResponsibility.responsibilityId = reader.getString();
                } else if ("responsibilityTitle".equals(fieldName)) {
                    deserializedResponsibility.responsibilityTitle = reader.getString();
                } else if ("responsibilityDescription".equals(fieldName)) {
                    deserializedResponsibility.responsibilityDescription = reader.getString();
                } else if ("responsibilityType".equals(fieldName)) {
                    deserializedResponsibility.responsibilityType = ResponsibilityType.fromString(reader.getString());
                } else if ("responsibilitySeverity".equals(fieldName)) {
                    deserializedResponsibility.responsibilitySeverity
                        = ResponsibilitySeverity.fromString(reader.getString());
                } else if ("responsibilityStatus".equals(fieldName)) {
                    deserializedResponsibility.responsibilityStatus
                        = ResponsibilityStatus.fromString(reader.getString());
                } else if ("responsibilityEnvironment".equals(fieldName)) {
                    deserializedResponsibility.responsibilityEnvironment
                        = ResponsibilityEnvironment.fromString(reader.getString());
                } else if ("failedResourceCount".equals(fieldName)) {
                    deserializedResponsibility.failedResourceCount = reader.getNullable(JsonReader::getInt);
                } else if ("totalResourceCount".equals(fieldName)) {
                    deserializedResponsibility.totalResourceCount = reader.getNullable(JsonReader::getInt);
                } else if ("resourceList".equals(fieldName)) {
                    List<ResponsibilityResource> resourceList
                        = reader.readArray(reader1 -> ResponsibilityResource.fromJson(reader1));
                    deserializedResponsibility.resourceList = resourceList;
                } else if ("recommendationList".equals(fieldName)) {
                    List<Recommendation> recommendationList
                        = reader.readArray(reader1 -> Recommendation.fromJson(reader1));
                    deserializedResponsibility.recommendationList = recommendationList;
                } else if ("guidance".equals(fieldName)) {
                    deserializedResponsibility.guidance = reader.getString();
                } else if ("justification".equals(fieldName)) {
                    deserializedResponsibility.justification = reader.getString();
                } else if ("evidenceFiles".equals(fieldName)) {
                    List<String> evidenceFiles = reader.readArray(reader1 -> reader1.getString());
                    deserializedResponsibility.evidenceFiles = evidenceFiles;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResponsibility;
        });
    }
}
