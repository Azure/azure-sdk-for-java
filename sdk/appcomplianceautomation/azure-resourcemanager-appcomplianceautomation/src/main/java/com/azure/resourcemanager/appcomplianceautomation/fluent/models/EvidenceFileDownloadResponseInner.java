// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.appcomplianceautomation.models.EvidenceFileDownloadResponseEvidenceFile;
import java.io.IOException;

/**
 * Object that includes all the possible response for the evidence file download operation.
 */
@Immutable
public final class EvidenceFileDownloadResponseInner implements JsonSerializable<EvidenceFileDownloadResponseInner> {
    /*
     * The uri of evidence file
     */
    private EvidenceFileDownloadResponseEvidenceFile evidenceFile;

    /**
     * Creates an instance of EvidenceFileDownloadResponseInner class.
     */
    private EvidenceFileDownloadResponseInner() {
    }

    /**
     * Get the evidenceFile property: The uri of evidence file.
     * 
     * @return the evidenceFile value.
     */
    public EvidenceFileDownloadResponseEvidenceFile evidenceFile() {
        return this.evidenceFile;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (evidenceFile() != null) {
            evidenceFile().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EvidenceFileDownloadResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EvidenceFileDownloadResponseInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EvidenceFileDownloadResponseInner.
     */
    public static EvidenceFileDownloadResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EvidenceFileDownloadResponseInner deserializedEvidenceFileDownloadResponseInner
                = new EvidenceFileDownloadResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("evidenceFile".equals(fieldName)) {
                    deserializedEvidenceFileDownloadResponseInner.evidenceFile
                        = EvidenceFileDownloadResponseEvidenceFile.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEvidenceFileDownloadResponseInner;
        });
    }
}
