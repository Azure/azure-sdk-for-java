// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.appcomplianceautomation.models.ScopingQuestion;
import java.io.IOException;
import java.util.List;

/**
 * Scoping question list.
 */
@Immutable
public final class ScopingQuestionsInner implements JsonSerializable<ScopingQuestionsInner> {
    /*
     * List of scoping questions.
     */
    private List<ScopingQuestion> questions;

    /**
     * Creates an instance of ScopingQuestionsInner class.
     */
    private ScopingQuestionsInner() {
    }

    /**
     * Get the questions property: List of scoping questions.
     * 
     * @return the questions value.
     */
    public List<ScopingQuestion> questions() {
        return this.questions;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (questions() != null) {
            questions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("questions", this.questions, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScopingQuestionsInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScopingQuestionsInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScopingQuestionsInner.
     */
    public static ScopingQuestionsInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScopingQuestionsInner deserializedScopingQuestionsInner = new ScopingQuestionsInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("questions".equals(fieldName)) {
                    List<ScopingQuestion> questions = reader.readArray(reader1 -> ScopingQuestion.fromJson(reader1));
                    deserializedScopingQuestionsInner.questions = questions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScopingQuestionsInner;
        });
    }
}
