// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appcomplianceautomation.fluent.ScopingConfigurationsClient;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.ScopingConfigurationResourceInner;
import com.azure.resourcemanager.appcomplianceautomation.models.ScopingConfigurationResource;
import com.azure.resourcemanager.appcomplianceautomation.models.ScopingConfigurations;

public final class ScopingConfigurationsImpl implements ScopingConfigurations {
    private static final ClientLogger LOGGER = new ClientLogger(ScopingConfigurationsImpl.class);

    private final ScopingConfigurationsClient innerClient;

    private final com.azure.resourcemanager.appcomplianceautomation.AppComplianceAutomationManager serviceManager;

    public ScopingConfigurationsImpl(ScopingConfigurationsClient innerClient,
        com.azure.resourcemanager.appcomplianceautomation.AppComplianceAutomationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<ScopingConfigurationResource> getWithResponse(String reportName, String scopingConfigurationName,
        Context context) {
        Response<ScopingConfigurationResourceInner> inner
            = this.serviceClient().getWithResponse(reportName, scopingConfigurationName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ScopingConfigurationResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ScopingConfigurationResource get(String reportName, String scopingConfigurationName) {
        ScopingConfigurationResourceInner inner = this.serviceClient().get(reportName, scopingConfigurationName);
        if (inner != null) {
            return new ScopingConfigurationResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ScopingConfigurationResource> createOrUpdateWithResponse(String reportName,
        String scopingConfigurationName, ScopingConfigurationResourceInner parameters, Context context) {
        Response<ScopingConfigurationResourceInner> inner = this.serviceClient()
            .createOrUpdateWithResponse(reportName, scopingConfigurationName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ScopingConfigurationResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ScopingConfigurationResource createOrUpdate(String reportName, String scopingConfigurationName,
        ScopingConfigurationResourceInner parameters) {
        ScopingConfigurationResourceInner inner
            = this.serviceClient().createOrUpdate(reportName, scopingConfigurationName, parameters);
        if (inner != null) {
            return new ScopingConfigurationResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String reportName, String scopingConfigurationName,
        Context context) {
        return this.serviceClient().deleteWithResponse(reportName, scopingConfigurationName, context);
    }

    public void deleteByResourceGroup(String reportName, String scopingConfigurationName) {
        this.serviceClient().delete(reportName, scopingConfigurationName);
    }

    public PagedIterable<ScopingConfigurationResource> listByReportResource(String reportName) {
        PagedIterable<ScopingConfigurationResourceInner> inner = this.serviceClient().listByReportResource(reportName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new ScopingConfigurationResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ScopingConfigurationResource> listByReportResource(String reportName, Context context) {
        PagedIterable<ScopingConfigurationResourceInner> inner
            = this.serviceClient().listByReportResource(reportName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new ScopingConfigurationResourceImpl(inner1, this.manager()));
    }

    private ScopingConfigurationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appcomplianceautomation.AppComplianceAutomationManager manager() {
        return this.serviceManager;
    }
}
