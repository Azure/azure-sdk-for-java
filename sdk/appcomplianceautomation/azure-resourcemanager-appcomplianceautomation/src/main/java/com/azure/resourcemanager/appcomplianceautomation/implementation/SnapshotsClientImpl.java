// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.appcomplianceautomation.fluent.SnapshotsClient;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.SnapshotResourceInner;
import com.azure.resourcemanager.appcomplianceautomation.models.SnapshotResourceList;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in SnapshotsClient. */
public final class SnapshotsClientImpl implements SnapshotsClient {
    /** The proxy service used to perform REST calls. */
    private final SnapshotsService service;

    /** The service client containing this operation class. */
    private final AppComplianceAutomationToolForMicrosoft365Impl client;

    /**
     * Initializes an instance of SnapshotsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SnapshotsClientImpl(AppComplianceAutomationToolForMicrosoft365Impl client) {
        this.service =
            RestProxy.create(SnapshotsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AppComplianceAutomationToolForMicrosoft365Snapshots to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AppComplianceAutomat")
    public interface SnapshotsService {
        @Headers({"Content-Type: application/json"})
        @Get("/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/snapshots")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SnapshotResourceList>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("reportName") String reportName,
            @QueryParam("$skipToken") String skipToken,
            @QueryParam("$top") Integer top,
            @QueryParam("$select") String select,
            @QueryParam("reportCreatorTenantId") String reportCreatorTenantId,
            @QueryParam("offerGuid") String offerGuid,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SnapshotResourceList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get the AppComplianceAutomation snapshot list.
     *
     * @param reportName Report Name.
     * @param skipToken Skip over when retrieving results.
     * @param top Number of elements to return when retrieving results.
     * @param select OData Select statement. Limits the properties on each entry to just those requested, e.g.
     *     ?$select=reportName,id.
     * @param reportCreatorTenantId The tenant id of the report creator.
     * @param offerGuid The offerGuid which mapping to the reports.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation snapshot list along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SnapshotResourceInner>> listSinglePageAsync(
        String reportName,
        String skipToken,
        Integer top,
        String select,
        String reportCreatorTenantId,
        String offerGuid) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            reportName,
                            skipToken,
                            top,
                            select,
                            reportCreatorTenantId,
                            offerGuid,
                            accept,
                            context))
            .<PagedResponse<SnapshotResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the AppComplianceAutomation snapshot list.
     *
     * @param reportName Report Name.
     * @param skipToken Skip over when retrieving results.
     * @param top Number of elements to return when retrieving results.
     * @param select OData Select statement. Limits the properties on each entry to just those requested, e.g.
     *     ?$select=reportName,id.
     * @param reportCreatorTenantId The tenant id of the report creator.
     * @param offerGuid The offerGuid which mapping to the reports.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation snapshot list along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SnapshotResourceInner>> listSinglePageAsync(
        String reportName,
        String skipToken,
        Integer top,
        String select,
        String reportCreatorTenantId,
        String offerGuid,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                reportName,
                skipToken,
                top,
                select,
                reportCreatorTenantId,
                offerGuid,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the AppComplianceAutomation snapshot list.
     *
     * @param reportName Report Name.
     * @param skipToken Skip over when retrieving results.
     * @param top Number of elements to return when retrieving results.
     * @param select OData Select statement. Limits the properties on each entry to just those requested, e.g.
     *     ?$select=reportName,id.
     * @param reportCreatorTenantId The tenant id of the report creator.
     * @param offerGuid The offerGuid which mapping to the reports.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation snapshot list as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SnapshotResourceInner> listAsync(
        String reportName,
        String skipToken,
        Integer top,
        String select,
        String reportCreatorTenantId,
        String offerGuid) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(reportName, skipToken, top, select, reportCreatorTenantId, offerGuid),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get the AppComplianceAutomation snapshot list.
     *
     * @param reportName Report Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation snapshot list as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SnapshotResourceInner> listAsync(String reportName) {
        final String skipToken = null;
        final Integer top = null;
        final String select = null;
        final String reportCreatorTenantId = null;
        final String offerGuid = null;
        return new PagedFlux<>(
            () -> listSinglePageAsync(reportName, skipToken, top, select, reportCreatorTenantId, offerGuid),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get the AppComplianceAutomation snapshot list.
     *
     * @param reportName Report Name.
     * @param skipToken Skip over when retrieving results.
     * @param top Number of elements to return when retrieving results.
     * @param select OData Select statement. Limits the properties on each entry to just those requested, e.g.
     *     ?$select=reportName,id.
     * @param reportCreatorTenantId The tenant id of the report creator.
     * @param offerGuid The offerGuid which mapping to the reports.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation snapshot list as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SnapshotResourceInner> listAsync(
        String reportName,
        String skipToken,
        Integer top,
        String select,
        String reportCreatorTenantId,
        String offerGuid,
        Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(reportName, skipToken, top, select, reportCreatorTenantId, offerGuid, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get the AppComplianceAutomation snapshot list.
     *
     * @param reportName Report Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation snapshot list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SnapshotResourceInner> list(String reportName) {
        final String skipToken = null;
        final Integer top = null;
        final String select = null;
        final String reportCreatorTenantId = null;
        final String offerGuid = null;
        return new PagedIterable<>(listAsync(reportName, skipToken, top, select, reportCreatorTenantId, offerGuid));
    }

    /**
     * Get the AppComplianceAutomation snapshot list.
     *
     * @param reportName Report Name.
     * @param skipToken Skip over when retrieving results.
     * @param top Number of elements to return when retrieving results.
     * @param select OData Select statement. Limits the properties on each entry to just those requested, e.g.
     *     ?$select=reportName,id.
     * @param reportCreatorTenantId The tenant id of the report creator.
     * @param offerGuid The offerGuid which mapping to the reports.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation snapshot list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SnapshotResourceInner> list(
        String reportName,
        String skipToken,
        Integer top,
        String select,
        String reportCreatorTenantId,
        String offerGuid,
        Context context) {
        return new PagedIterable<>(
            listAsync(reportName, skipToken, top, select, reportCreatorTenantId, offerGuid, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of resources and a possible link for next set along with {@link
     *     PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SnapshotResourceInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SnapshotResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of resources and a possible link for next set along with {@link
     *     PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SnapshotResourceInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
