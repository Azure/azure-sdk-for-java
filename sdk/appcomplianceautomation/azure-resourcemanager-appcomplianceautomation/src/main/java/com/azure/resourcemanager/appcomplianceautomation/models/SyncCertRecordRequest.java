// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Synchronize certification record request.
 */
@Fluent
public final class SyncCertRecordRequest implements JsonSerializable<SyncCertRecordRequest> {
    /*
     * certification record to be synchronized.
     */
    private CertSyncRecord certRecord;

    /**
     * Creates an instance of SyncCertRecordRequest class.
     */
    public SyncCertRecordRequest() {
    }

    /**
     * Get the certRecord property: certification record to be synchronized.
     * 
     * @return the certRecord value.
     */
    public CertSyncRecord certRecord() {
        return this.certRecord;
    }

    /**
     * Set the certRecord property: certification record to be synchronized.
     * 
     * @param certRecord the certRecord value to set.
     * @return the SyncCertRecordRequest object itself.
     */
    public SyncCertRecordRequest withCertRecord(CertSyncRecord certRecord) {
        this.certRecord = certRecord;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (certRecord() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property certRecord in model SyncCertRecordRequest"));
        } else {
            certRecord().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SyncCertRecordRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("certRecord", this.certRecord);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SyncCertRecordRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SyncCertRecordRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SyncCertRecordRequest.
     */
    public static SyncCertRecordRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SyncCertRecordRequest deserializedSyncCertRecordRequest = new SyncCertRecordRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("certRecord".equals(fieldName)) {
                    deserializedSyncCertRecordRequest.certRecord = CertSyncRecord.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSyncCertRecordRequest;
        });
    }
}
