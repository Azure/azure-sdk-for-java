// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * ScopingConfiguration's properties.
 */
@Fluent
public final class ScopingConfigurationProperties implements JsonSerializable<ScopingConfigurationProperties> {
    /*
     * List of scoping question answers.
     */
    private List<ScopingAnswer> answers;

    /*
     * Azure lifecycle management
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of ScopingConfigurationProperties class.
     */
    public ScopingConfigurationProperties() {
    }

    /**
     * Get the answers property: List of scoping question answers.
     * 
     * @return the answers value.
     */
    public List<ScopingAnswer> answers() {
        return this.answers;
    }

    /**
     * Set the answers property: List of scoping question answers.
     * 
     * @param answers the answers value to set.
     * @return the ScopingConfigurationProperties object itself.
     */
    public ScopingConfigurationProperties withAnswers(List<ScopingAnswer> answers) {
        this.answers = answers;
        return this;
    }

    /**
     * Get the provisioningState property: Azure lifecycle management.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (answers() != null) {
            answers().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("answers", this.answers, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScopingConfigurationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScopingConfigurationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScopingConfigurationProperties.
     */
    public static ScopingConfigurationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScopingConfigurationProperties deserializedScopingConfigurationProperties
                = new ScopingConfigurationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("answers".equals(fieldName)) {
                    List<ScopingAnswer> answers = reader.readArray(reader1 -> ScopingAnswer.fromJson(reader1));
                    deserializedScopingConfigurationProperties.answers = answers;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedScopingConfigurationProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScopingConfigurationProperties;
        });
    }
}
