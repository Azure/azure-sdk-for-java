// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.appcomplianceautomation.fluent.WebhooksClient;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.WebhookResourceInner;
import com.azure.resourcemanager.appcomplianceautomation.implementation.models.WebhookResourceListResult;
import com.azure.resourcemanager.appcomplianceautomation.models.WebhookResourcePatch;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in WebhooksClient.
 */
public final class WebhooksClientImpl implements WebhooksClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final WebhooksService service;

    /**
     * The service client containing this operation class.
     */
    private final AppComplianceAutomationClientImpl client;

    /**
     * Initializes an instance of WebhooksClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    WebhooksClientImpl(AppComplianceAutomationClientImpl client) {
        this.service = RestProxy.create(WebhooksService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AppComplianceAutomationClientWebhooks to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AppComplianceAutomat")
    public interface WebhooksService {
        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/webhooks/{webhookName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<WebhookResourceInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("reportName") String reportName,
            @PathParam("webhookName") String webhookName, @HeaderParam("accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/webhooks/{webhookName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<WebhookResourceInner>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("reportName") String reportName,
            @PathParam("webhookName") String webhookName, @HeaderParam("accept") String accept,
            @BodyParam("application/json") WebhookResourceInner parameters, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/webhooks/{webhookName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<WebhookResourceInner>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("reportName") String reportName,
            @PathParam("webhookName") String webhookName, @HeaderParam("accept") String accept,
            @BodyParam("application/json") WebhookResourcePatch properties, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/webhooks/{webhookName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("reportName") String reportName,
            @PathParam("webhookName") String webhookName, @HeaderParam("accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/webhooks")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<WebhookResourceListResult>> listByReportResource(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("$skipToken") String skipToken,
            @QueryParam("$top") Integer top, @QueryParam("$select") String select, @QueryParam("$filter") String filter,
            @QueryParam("$orderby") String orderby, @QueryParam("offerGuid") String offerGuid,
            @QueryParam("reportCreatorTenantId") String reportCreatorTenantId,
            @PathParam("reportName") String reportName, @HeaderParam("accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<WebhookResourceListResult>> listByReportResourceNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, Context context);
    }

    /**
     * Get the AppComplianceAutomation webhook and its properties.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation webhook and its properties along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<WebhookResourceInner>> getWithResponseAsync(String reportName, String webhookName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        if (webhookName == null) {
            return Mono.error(new IllegalArgumentException("Parameter webhookName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(), reportName,
                webhookName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the AppComplianceAutomation webhook and its properties.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation webhook and its properties along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<WebhookResourceInner>> getWithResponseAsync(String reportName, String webhookName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        if (webhookName == null) {
            return Mono.error(new IllegalArgumentException("Parameter webhookName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), reportName, webhookName, accept,
            context);
    }

    /**
     * Get the AppComplianceAutomation webhook and its properties.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation webhook and its properties on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<WebhookResourceInner> getAsync(String reportName, String webhookName) {
        return getWithResponseAsync(reportName, webhookName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the AppComplianceAutomation webhook and its properties.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation webhook and its properties along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<WebhookResourceInner> getWithResponse(String reportName, String webhookName, Context context) {
        return getWithResponseAsync(reportName, webhookName, context).block();
    }

    /**
     * Get the AppComplianceAutomation webhook and its properties.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation webhook and its properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WebhookResourceInner get(String reportName, String webhookName) {
        return getWithResponse(reportName, webhookName, Context.NONE).getValue();
    }

    /**
     * Create a new AppComplianceAutomation webhook or update an exiting AppComplianceAutomation webhook.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @param parameters Parameters for the create or update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a class represent an AppComplianceAutomation webhook resource along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<WebhookResourceInner>> createOrUpdateWithResponseAsync(String reportName, String webhookName,
        WebhookResourceInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        if (webhookName == null) {
            return Mono.error(new IllegalArgumentException("Parameter webhookName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                reportName, webhookName, accept, parameters, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a new AppComplianceAutomation webhook or update an exiting AppComplianceAutomation webhook.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @param parameters Parameters for the create or update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a class represent an AppComplianceAutomation webhook resource along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<WebhookResourceInner>> createOrUpdateWithResponseAsync(String reportName, String webhookName,
        WebhookResourceInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        if (webhookName == null) {
            return Mono.error(new IllegalArgumentException("Parameter webhookName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(), reportName, webhookName,
            accept, parameters, context);
    }

    /**
     * Create a new AppComplianceAutomation webhook or update an exiting AppComplianceAutomation webhook.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @param parameters Parameters for the create or update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a class represent an AppComplianceAutomation webhook resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<WebhookResourceInner> createOrUpdateAsync(String reportName, String webhookName,
        WebhookResourceInner parameters) {
        return createOrUpdateWithResponseAsync(reportName, webhookName, parameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create a new AppComplianceAutomation webhook or update an exiting AppComplianceAutomation webhook.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @param parameters Parameters for the create or update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a class represent an AppComplianceAutomation webhook resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<WebhookResourceInner> createOrUpdateWithResponse(String reportName, String webhookName,
        WebhookResourceInner parameters, Context context) {
        return createOrUpdateWithResponseAsync(reportName, webhookName, parameters, context).block();
    }

    /**
     * Create a new AppComplianceAutomation webhook or update an exiting AppComplianceAutomation webhook.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @param parameters Parameters for the create or update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a class represent an AppComplianceAutomation webhook resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WebhookResourceInner createOrUpdate(String reportName, String webhookName, WebhookResourceInner parameters) {
        return createOrUpdateWithResponse(reportName, webhookName, parameters, Context.NONE).getValue();
    }

    /**
     * Update an exiting AppComplianceAutomation webhook.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @param properties Parameters for the create or update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a class represent an AppComplianceAutomation webhook resource along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<WebhookResourceInner>> updateWithResponseAsync(String reportName, String webhookName,
        WebhookResourcePatch properties) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        if (webhookName == null) {
            return Mono.error(new IllegalArgumentException("Parameter webhookName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(), reportName,
                webhookName, accept, properties, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update an exiting AppComplianceAutomation webhook.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @param properties Parameters for the create or update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a class represent an AppComplianceAutomation webhook resource along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<WebhookResourceInner>> updateWithResponseAsync(String reportName, String webhookName,
        WebhookResourcePatch properties, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        if (webhookName == null) {
            return Mono.error(new IllegalArgumentException("Parameter webhookName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), reportName, webhookName, accept,
            properties, context);
    }

    /**
     * Update an exiting AppComplianceAutomation webhook.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @param properties Parameters for the create or update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a class represent an AppComplianceAutomation webhook resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<WebhookResourceInner> updateAsync(String reportName, String webhookName,
        WebhookResourcePatch properties) {
        return updateWithResponseAsync(reportName, webhookName, properties)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Update an exiting AppComplianceAutomation webhook.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @param properties Parameters for the create or update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a class represent an AppComplianceAutomation webhook resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<WebhookResourceInner> updateWithResponse(String reportName, String webhookName,
        WebhookResourcePatch properties, Context context) {
        return updateWithResponseAsync(reportName, webhookName, properties, context).block();
    }

    /**
     * Update an exiting AppComplianceAutomation webhook.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @param properties Parameters for the create or update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a class represent an AppComplianceAutomation webhook resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WebhookResourceInner update(String reportName, String webhookName, WebhookResourcePatch properties) {
        return updateWithResponse(reportName, webhookName, properties, Context.NONE).getValue();
    }

    /**
     * Delete an AppComplianceAutomation webhook.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String reportName, String webhookName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        if (webhookName == null) {
            return Mono.error(new IllegalArgumentException("Parameter webhookName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(), reportName,
                webhookName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete an AppComplianceAutomation webhook.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String reportName, String webhookName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        if (webhookName == null) {
            return Mono.error(new IllegalArgumentException("Parameter webhookName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), reportName, webhookName, accept,
            context);
    }

    /**
     * Delete an AppComplianceAutomation webhook.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String reportName, String webhookName) {
        return deleteWithResponseAsync(reportName, webhookName).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete an AppComplianceAutomation webhook.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String reportName, String webhookName, Context context) {
        return deleteWithResponseAsync(reportName, webhookName, context).block();
    }

    /**
     * Delete an AppComplianceAutomation webhook.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String reportName, String webhookName) {
        deleteWithResponse(reportName, webhookName, Context.NONE);
    }

    /**
     * Get the AppComplianceAutomation webhook list.
     * 
     * @param reportName Report Name.
     * @param skipToken Skip over when retrieving results.
     * @param top Number of elements to return when retrieving results.
     * @param select OData Select statement. Limits the properties on each entry to just those requested, e.g.
     * ?$select=reportName,id.
     * @param filter The filter to apply on the operation.
     * @param orderby OData order by query option.
     * @param offerGuid The offerGuid which mapping to the reports.
     * @param reportCreatorTenantId The tenant id of the report creator.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation webhook list along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WebhookResourceInner>> listByReportResourceSinglePageAsync(String reportName,
        String skipToken, Integer top, String select, String filter, String orderby, String offerGuid,
        String reportCreatorTenantId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByReportResource(this.client.getEndpoint(), this.client.getApiVersion(),
                skipToken, top, select, filter, orderby, offerGuid, reportCreatorTenantId, reportName, accept, context))
            .<PagedResponse<WebhookResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the AppComplianceAutomation webhook list.
     * 
     * @param reportName Report Name.
     * @param skipToken Skip over when retrieving results.
     * @param top Number of elements to return when retrieving results.
     * @param select OData Select statement. Limits the properties on each entry to just those requested, e.g.
     * ?$select=reportName,id.
     * @param filter The filter to apply on the operation.
     * @param orderby OData order by query option.
     * @param offerGuid The offerGuid which mapping to the reports.
     * @param reportCreatorTenantId The tenant id of the report creator.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation webhook list along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WebhookResourceInner>> listByReportResourceSinglePageAsync(String reportName,
        String skipToken, Integer top, String select, String filter, String orderby, String offerGuid,
        String reportCreatorTenantId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByReportResource(this.client.getEndpoint(), this.client.getApiVersion(), skipToken, top, select,
                filter, orderby, offerGuid, reportCreatorTenantId, reportName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the AppComplianceAutomation webhook list.
     * 
     * @param reportName Report Name.
     * @param skipToken Skip over when retrieving results.
     * @param top Number of elements to return when retrieving results.
     * @param select OData Select statement. Limits the properties on each entry to just those requested, e.g.
     * ?$select=reportName,id.
     * @param filter The filter to apply on the operation.
     * @param orderby OData order by query option.
     * @param offerGuid The offerGuid which mapping to the reports.
     * @param reportCreatorTenantId The tenant id of the report creator.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation webhook list as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<WebhookResourceInner> listByReportResourceAsync(String reportName, String skipToken, Integer top,
        String select, String filter, String orderby, String offerGuid, String reportCreatorTenantId) {
        return new PagedFlux<>(() -> listByReportResourceSinglePageAsync(reportName, skipToken, top, select, filter,
            orderby, offerGuid, reportCreatorTenantId), nextLink -> listByReportResourceNextSinglePageAsync(nextLink));
    }

    /**
     * Get the AppComplianceAutomation webhook list.
     * 
     * @param reportName Report Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation webhook list as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<WebhookResourceInner> listByReportResourceAsync(String reportName) {
        final String skipToken = null;
        final Integer top = null;
        final String select = null;
        final String filter = null;
        final String orderby = null;
        final String offerGuid = null;
        final String reportCreatorTenantId = null;
        return new PagedFlux<>(() -> listByReportResourceSinglePageAsync(reportName, skipToken, top, select, filter,
            orderby, offerGuid, reportCreatorTenantId), nextLink -> listByReportResourceNextSinglePageAsync(nextLink));
    }

    /**
     * Get the AppComplianceAutomation webhook list.
     * 
     * @param reportName Report Name.
     * @param skipToken Skip over when retrieving results.
     * @param top Number of elements to return when retrieving results.
     * @param select OData Select statement. Limits the properties on each entry to just those requested, e.g.
     * ?$select=reportName,id.
     * @param filter The filter to apply on the operation.
     * @param orderby OData order by query option.
     * @param offerGuid The offerGuid which mapping to the reports.
     * @param reportCreatorTenantId The tenant id of the report creator.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation webhook list as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<WebhookResourceInner> listByReportResourceAsync(String reportName, String skipToken, Integer top,
        String select, String filter, String orderby, String offerGuid, String reportCreatorTenantId, Context context) {
        return new PagedFlux<>(
            () -> listByReportResourceSinglePageAsync(reportName, skipToken, top, select, filter, orderby, offerGuid,
                reportCreatorTenantId, context),
            nextLink -> listByReportResourceNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get the AppComplianceAutomation webhook list.
     * 
     * @param reportName Report Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation webhook list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<WebhookResourceInner> listByReportResource(String reportName) {
        final String skipToken = null;
        final Integer top = null;
        final String select = null;
        final String filter = null;
        final String orderby = null;
        final String offerGuid = null;
        final String reportCreatorTenantId = null;
        return new PagedIterable<>(listByReportResourceAsync(reportName, skipToken, top, select, filter, orderby,
            offerGuid, reportCreatorTenantId));
    }

    /**
     * Get the AppComplianceAutomation webhook list.
     * 
     * @param reportName Report Name.
     * @param skipToken Skip over when retrieving results.
     * @param top Number of elements to return when retrieving results.
     * @param select OData Select statement. Limits the properties on each entry to just those requested, e.g.
     * ?$select=reportName,id.
     * @param filter The filter to apply on the operation.
     * @param orderby OData order by query option.
     * @param offerGuid The offerGuid which mapping to the reports.
     * @param reportCreatorTenantId The tenant id of the report creator.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation webhook list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<WebhookResourceInner> listByReportResource(String reportName, String skipToken, Integer top,
        String select, String filter, String orderby, String offerGuid, String reportCreatorTenantId, Context context) {
        return new PagedIterable<>(listByReportResourceAsync(reportName, skipToken, top, select, filter, orderby,
            offerGuid, reportCreatorTenantId, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WebhookResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WebhookResourceInner>> listByReportResourceNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByReportResourceNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<WebhookResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WebhookResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WebhookResourceInner>> listByReportResourceNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByReportResourceNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
