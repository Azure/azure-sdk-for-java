// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Webhook properties.
 */
@Fluent
public final class WebhookProperties implements JsonSerializable<WebhookProperties> {
    /*
     * Webhook id in database.
     */
    private String webhookId;

    /*
     * Webhook status.
     */
    private WebhookStatus status;

    /*
     * Tenant id.
     */
    private String tenantId;

    /*
     * whether to send notification under any event.
     */
    private SendAllEvents sendAllEvents;

    /*
     * under which event notification should be sent.
     */
    private List<NotificationEvent> events;

    /*
     * webhook payload url
     */
    private String payloadUrl;

    /*
     * content type
     */
    private ContentType contentType;

    /*
     * webhook secret token. If not set, this field value is null; otherwise, please set a string value.
     */
    private String webhookKey;

    /*
     * whether to update webhookKey.
     */
    private UpdateWebhookKey updateWebhookKey;

    /*
     * whether webhookKey is enabled.
     */
    private WebhookKeyEnabled webhookKeyEnabled;

    /*
     * whether to enable ssl verification
     */
    private EnableSslVerification enableSslVerification;

    /*
     * webhook deliveryStatus
     */
    private DeliveryStatus deliveryStatus;

    /*
     * Azure Resource Provisioning State
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of WebhookProperties class.
     */
    public WebhookProperties() {
    }

    /**
     * Get the webhookId property: Webhook id in database.
     * 
     * @return the webhookId value.
     */
    public String webhookId() {
        return this.webhookId;
    }

    /**
     * Get the status property: Webhook status.
     * 
     * @return the status value.
     */
    public WebhookStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Webhook status.
     * 
     * @param status the status value to set.
     * @return the WebhookProperties object itself.
     */
    public WebhookProperties withStatus(WebhookStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the tenantId property: Tenant id.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Get the sendAllEvents property: whether to send notification under any event.
     * 
     * @return the sendAllEvents value.
     */
    public SendAllEvents sendAllEvents() {
        return this.sendAllEvents;
    }

    /**
     * Set the sendAllEvents property: whether to send notification under any event.
     * 
     * @param sendAllEvents the sendAllEvents value to set.
     * @return the WebhookProperties object itself.
     */
    public WebhookProperties withSendAllEvents(SendAllEvents sendAllEvents) {
        this.sendAllEvents = sendAllEvents;
        return this;
    }

    /**
     * Get the events property: under which event notification should be sent.
     * 
     * @return the events value.
     */
    public List<NotificationEvent> events() {
        return this.events;
    }

    /**
     * Set the events property: under which event notification should be sent.
     * 
     * @param events the events value to set.
     * @return the WebhookProperties object itself.
     */
    public WebhookProperties withEvents(List<NotificationEvent> events) {
        this.events = events;
        return this;
    }

    /**
     * Get the payloadUrl property: webhook payload url.
     * 
     * @return the payloadUrl value.
     */
    public String payloadUrl() {
        return this.payloadUrl;
    }

    /**
     * Set the payloadUrl property: webhook payload url.
     * 
     * @param payloadUrl the payloadUrl value to set.
     * @return the WebhookProperties object itself.
     */
    public WebhookProperties withPayloadUrl(String payloadUrl) {
        this.payloadUrl = payloadUrl;
        return this;
    }

    /**
     * Get the contentType property: content type.
     * 
     * @return the contentType value.
     */
    public ContentType contentType() {
        return this.contentType;
    }

    /**
     * Set the contentType property: content type.
     * 
     * @param contentType the contentType value to set.
     * @return the WebhookProperties object itself.
     */
    public WebhookProperties withContentType(ContentType contentType) {
        this.contentType = contentType;
        return this;
    }

    /**
     * Get the webhookKey property: webhook secret token. If not set, this field value is null; otherwise, please set a
     * string value.
     * 
     * @return the webhookKey value.
     */
    public String webhookKey() {
        return this.webhookKey;
    }

    /**
     * Set the webhookKey property: webhook secret token. If not set, this field value is null; otherwise, please set a
     * string value.
     * 
     * @param webhookKey the webhookKey value to set.
     * @return the WebhookProperties object itself.
     */
    public WebhookProperties withWebhookKey(String webhookKey) {
        this.webhookKey = webhookKey;
        return this;
    }

    /**
     * Get the updateWebhookKey property: whether to update webhookKey.
     * 
     * @return the updateWebhookKey value.
     */
    public UpdateWebhookKey updateWebhookKey() {
        return this.updateWebhookKey;
    }

    /**
     * Set the updateWebhookKey property: whether to update webhookKey.
     * 
     * @param updateWebhookKey the updateWebhookKey value to set.
     * @return the WebhookProperties object itself.
     */
    public WebhookProperties withUpdateWebhookKey(UpdateWebhookKey updateWebhookKey) {
        this.updateWebhookKey = updateWebhookKey;
        return this;
    }

    /**
     * Get the webhookKeyEnabled property: whether webhookKey is enabled.
     * 
     * @return the webhookKeyEnabled value.
     */
    public WebhookKeyEnabled webhookKeyEnabled() {
        return this.webhookKeyEnabled;
    }

    /**
     * Get the enableSslVerification property: whether to enable ssl verification.
     * 
     * @return the enableSslVerification value.
     */
    public EnableSslVerification enableSslVerification() {
        return this.enableSslVerification;
    }

    /**
     * Set the enableSslVerification property: whether to enable ssl verification.
     * 
     * @param enableSslVerification the enableSslVerification value to set.
     * @return the WebhookProperties object itself.
     */
    public WebhookProperties withEnableSslVerification(EnableSslVerification enableSslVerification) {
        this.enableSslVerification = enableSslVerification;
        return this;
    }

    /**
     * Get the deliveryStatus property: webhook deliveryStatus.
     * 
     * @return the deliveryStatus value.
     */
    public DeliveryStatus deliveryStatus() {
        return this.deliveryStatus;
    }

    /**
     * Get the provisioningState property: Azure Resource Provisioning State.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("sendAllEvents", this.sendAllEvents == null ? null : this.sendAllEvents.toString());
        jsonWriter.writeArrayField("events", this.events,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("payloadUrl", this.payloadUrl);
        jsonWriter.writeStringField("contentType", this.contentType == null ? null : this.contentType.toString());
        jsonWriter.writeStringField("webhookKey", this.webhookKey);
        jsonWriter.writeStringField("updateWebhookKey",
            this.updateWebhookKey == null ? null : this.updateWebhookKey.toString());
        jsonWriter.writeStringField("enableSslVerification",
            this.enableSslVerification == null ? null : this.enableSslVerification.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebhookProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebhookProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WebhookProperties.
     */
    public static WebhookProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebhookProperties deserializedWebhookProperties = new WebhookProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("webhookId".equals(fieldName)) {
                    deserializedWebhookProperties.webhookId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedWebhookProperties.status = WebhookStatus.fromString(reader.getString());
                } else if ("tenantId".equals(fieldName)) {
                    deserializedWebhookProperties.tenantId = reader.getString();
                } else if ("sendAllEvents".equals(fieldName)) {
                    deserializedWebhookProperties.sendAllEvents = SendAllEvents.fromString(reader.getString());
                } else if ("events".equals(fieldName)) {
                    List<NotificationEvent> events
                        = reader.readArray(reader1 -> NotificationEvent.fromString(reader1.getString()));
                    deserializedWebhookProperties.events = events;
                } else if ("payloadUrl".equals(fieldName)) {
                    deserializedWebhookProperties.payloadUrl = reader.getString();
                } else if ("contentType".equals(fieldName)) {
                    deserializedWebhookProperties.contentType = ContentType.fromString(reader.getString());
                } else if ("webhookKey".equals(fieldName)) {
                    deserializedWebhookProperties.webhookKey = reader.getString();
                } else if ("updateWebhookKey".equals(fieldName)) {
                    deserializedWebhookProperties.updateWebhookKey = UpdateWebhookKey.fromString(reader.getString());
                } else if ("webhookKeyEnabled".equals(fieldName)) {
                    deserializedWebhookProperties.webhookKeyEnabled = WebhookKeyEnabled.fromString(reader.getString());
                } else if ("enableSslVerification".equals(fieldName)) {
                    deserializedWebhookProperties.enableSslVerification
                        = EnableSslVerification.fromString(reader.getString());
                } else if ("deliveryStatus".equals(fieldName)) {
                    deserializedWebhookProperties.deliveryStatus = DeliveryStatus.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedWebhookProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebhookProperties;
        });
    }
}
