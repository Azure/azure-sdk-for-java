// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.WebhookResourceInner;

/**
 * Resource collection API of Webhooks.
 */
public interface Webhooks {
    /**
     * Get the AppComplianceAutomation webhook and its properties.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation webhook and its properties along with {@link Response}.
     */
    Response<WebhookResource> getWithResponse(String reportName, String webhookName, Context context);

    /**
     * Get the AppComplianceAutomation webhook and its properties.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation webhook and its properties.
     */
    WebhookResource get(String reportName, String webhookName);

    /**
     * Create a new AppComplianceAutomation webhook or update an exiting AppComplianceAutomation webhook.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @param parameters Parameters for the create or update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a class represent an AppComplianceAutomation webhook resource along with {@link Response}.
     */
    Response<WebhookResource> createOrUpdateWithResponse(String reportName, String webhookName,
        WebhookResourceInner parameters, Context context);

    /**
     * Create a new AppComplianceAutomation webhook or update an exiting AppComplianceAutomation webhook.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @param parameters Parameters for the create or update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a class represent an AppComplianceAutomation webhook resource.
     */
    WebhookResource createOrUpdate(String reportName, String webhookName, WebhookResourceInner parameters);

    /**
     * Update an exiting AppComplianceAutomation webhook.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @param properties Parameters for the create or update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a class represent an AppComplianceAutomation webhook resource along with {@link Response}.
     */
    Response<WebhookResource> updateWithResponse(String reportName, String webhookName, WebhookResourcePatch properties,
        Context context);

    /**
     * Update an exiting AppComplianceAutomation webhook.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @param properties Parameters for the create or update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a class represent an AppComplianceAutomation webhook resource.
     */
    WebhookResource update(String reportName, String webhookName, WebhookResourcePatch properties);

    /**
     * Delete an AppComplianceAutomation webhook.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByResourceGroupWithResponse(String reportName, String webhookName, Context context);

    /**
     * Delete an AppComplianceAutomation webhook.
     * 
     * @param reportName Report Name.
     * @param webhookName Webhook Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String reportName, String webhookName);

    /**
     * Get the AppComplianceAutomation webhook list.
     * 
     * @param reportName Report Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation webhook list as paginated response with {@link PagedIterable}.
     */
    PagedIterable<WebhookResource> listByReportResource(String reportName);

    /**
     * Get the AppComplianceAutomation webhook list.
     * 
     * @param reportName Report Name.
     * @param skipToken Skip over when retrieving results.
     * @param top Number of elements to return when retrieving results.
     * @param select OData Select statement. Limits the properties on each entry to just those requested, e.g.
     * ?$select=reportName,id.
     * @param filter The filter to apply on the operation.
     * @param orderby OData order by query option.
     * @param offerGuid The offerGuid which mapping to the reports.
     * @param reportCreatorTenantId The tenant id of the report creator.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation webhook list as paginated response with {@link PagedIterable}.
     */
    PagedIterable<WebhookResource> listByReportResource(String reportName, String skipToken, Integer top, String select,
        String filter, String orderby, String offerGuid, String reportCreatorTenantId, Context context);
}
