// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Object that includes all the content for single compliance result.
 */
@Immutable
public final class ComplianceReportItem implements JsonSerializable<ComplianceReportItem> {
    /*
     * The category name.
     */
    private String categoryName;

    /*
     * The control family name.
     */
    private String controlFamilyName;

    /*
     * The control Id - e.g. "1".
     */
    private String controlId;

    /*
     * The control name.
     */
    private String controlName;

    /*
     * Control status.
     */
    private ControlStatus controlStatus;

    /*
     * The title of the customer responsibility.
     */
    private String responsibilityTitle;

    /*
     * The description of the customer responsibility.
     */
    private String responsibilityDescription;

    /*
     * The Id of the resource.
     */
    private String resourceId;

    /*
     * The type of the resource. e.g. "Microsoft.SignalRService/SignalR"
     */
    private String resourceType;

    /*
     * Resource origin.
     */
    private ResourceOrigin resourceOrigin;

    /*
     * Resource status.
     */
    private ResourceStatus resourceStatus;

    /*
     * The status change date for the resource.
     */
    private OffsetDateTime resourceStatusChangeDate;

    /**
     * Creates an instance of ComplianceReportItem class.
     */
    private ComplianceReportItem() {
    }

    /**
     * Get the categoryName property: The category name.
     * 
     * @return the categoryName value.
     */
    public String categoryName() {
        return this.categoryName;
    }

    /**
     * Get the controlFamilyName property: The control family name.
     * 
     * @return the controlFamilyName value.
     */
    public String controlFamilyName() {
        return this.controlFamilyName;
    }

    /**
     * Get the controlId property: The control Id - e.g. "1".
     * 
     * @return the controlId value.
     */
    public String controlId() {
        return this.controlId;
    }

    /**
     * Get the controlName property: The control name.
     * 
     * @return the controlName value.
     */
    public String controlName() {
        return this.controlName;
    }

    /**
     * Get the controlStatus property: Control status.
     * 
     * @return the controlStatus value.
     */
    public ControlStatus controlStatus() {
        return this.controlStatus;
    }

    /**
     * Get the responsibilityTitle property: The title of the customer responsibility.
     * 
     * @return the responsibilityTitle value.
     */
    public String responsibilityTitle() {
        return this.responsibilityTitle;
    }

    /**
     * Get the responsibilityDescription property: The description of the customer responsibility.
     * 
     * @return the responsibilityDescription value.
     */
    public String responsibilityDescription() {
        return this.responsibilityDescription;
    }

    /**
     * Get the resourceId property: The Id of the resource.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Get the resourceType property: The type of the resource. e.g. "Microsoft.SignalRService/SignalR".
     * 
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Get the resourceOrigin property: Resource origin.
     * 
     * @return the resourceOrigin value.
     */
    public ResourceOrigin resourceOrigin() {
        return this.resourceOrigin;
    }

    /**
     * Get the resourceStatus property: Resource status.
     * 
     * @return the resourceStatus value.
     */
    public ResourceStatus resourceStatus() {
        return this.resourceStatus;
    }

    /**
     * Get the resourceStatusChangeDate property: The status change date for the resource.
     * 
     * @return the resourceStatusChangeDate value.
     */
    public OffsetDateTime resourceStatusChangeDate() {
        return this.resourceStatusChangeDate;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComplianceReportItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComplianceReportItem if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ComplianceReportItem.
     */
    public static ComplianceReportItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComplianceReportItem deserializedComplianceReportItem = new ComplianceReportItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("categoryName".equals(fieldName)) {
                    deserializedComplianceReportItem.categoryName = reader.getString();
                } else if ("controlFamilyName".equals(fieldName)) {
                    deserializedComplianceReportItem.controlFamilyName = reader.getString();
                } else if ("controlId".equals(fieldName)) {
                    deserializedComplianceReportItem.controlId = reader.getString();
                } else if ("controlName".equals(fieldName)) {
                    deserializedComplianceReportItem.controlName = reader.getString();
                } else if ("controlStatus".equals(fieldName)) {
                    deserializedComplianceReportItem.controlStatus = ControlStatus.fromString(reader.getString());
                } else if ("responsibilityTitle".equals(fieldName)) {
                    deserializedComplianceReportItem.responsibilityTitle = reader.getString();
                } else if ("responsibilityDescription".equals(fieldName)) {
                    deserializedComplianceReportItem.responsibilityDescription = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    deserializedComplianceReportItem.resourceId = reader.getString();
                } else if ("resourceType".equals(fieldName)) {
                    deserializedComplianceReportItem.resourceType = reader.getString();
                } else if ("resourceOrigin".equals(fieldName)) {
                    deserializedComplianceReportItem.resourceOrigin = ResourceOrigin.fromString(reader.getString());
                } else if ("resourceStatus".equals(fieldName)) {
                    deserializedComplianceReportItem.resourceStatus = ResourceStatus.fromString(reader.getString());
                } else if ("resourceStatusChangeDate".equals(fieldName)) {
                    deserializedComplianceReportItem.resourceStatusChangeDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedComplianceReportItem;
        });
    }
}
