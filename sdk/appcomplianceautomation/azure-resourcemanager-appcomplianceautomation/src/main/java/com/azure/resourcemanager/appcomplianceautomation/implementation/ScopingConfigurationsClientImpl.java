// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.appcomplianceautomation.fluent.ScopingConfigurationsClient;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.ScopingConfigurationResourceInner;
import com.azure.resourcemanager.appcomplianceautomation.implementation.models.ScopingConfigurationResourceListResult;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ScopingConfigurationsClient.
 */
public final class ScopingConfigurationsClientImpl implements ScopingConfigurationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ScopingConfigurationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AppComplianceAutomationClientImpl client;

    /**
     * Initializes an instance of ScopingConfigurationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ScopingConfigurationsClientImpl(AppComplianceAutomationClientImpl client) {
        this.service = RestProxy.create(ScopingConfigurationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AppComplianceAutomationClientScopingConfigurations to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AppComplianceAutomat")
    public interface ScopingConfigurationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/scopingConfigurations/{scopingConfigurationName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ScopingConfigurationResourceInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("reportName") String reportName,
            @PathParam("scopingConfigurationName") String scopingConfigurationName,
            @HeaderParam("accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/scopingConfigurations/{scopingConfigurationName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ScopingConfigurationResourceInner>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("reportName") String reportName,
            @PathParam("scopingConfigurationName") String scopingConfigurationName,
            @HeaderParam("accept") String accept,
            @BodyParam("application/json") ScopingConfigurationResourceInner parameters, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/scopingConfigurations/{scopingConfigurationName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("reportName") String reportName,
            @PathParam("scopingConfigurationName") String scopingConfigurationName,
            @HeaderParam("accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/scopingConfigurations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ScopingConfigurationResourceListResult>> listByReportResource(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("reportName") String reportName, @HeaderParam("accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ScopingConfigurationResourceListResult>> listByReportResourceNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, Context context);
    }

    /**
     * Get the AppComplianceAutomation scoping configuration of the specific report.
     * 
     * @param reportName Report Name.
     * @param scopingConfigurationName The scoping configuration of the specific report.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation scoping configuration of the specific report along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ScopingConfigurationResourceInner>> getWithResponseAsync(String reportName,
        String scopingConfigurationName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        if (scopingConfigurationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter scopingConfigurationName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(), reportName,
                scopingConfigurationName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the AppComplianceAutomation scoping configuration of the specific report.
     * 
     * @param reportName Report Name.
     * @param scopingConfigurationName The scoping configuration of the specific report.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation scoping configuration of the specific report along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ScopingConfigurationResourceInner>> getWithResponseAsync(String reportName,
        String scopingConfigurationName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        if (scopingConfigurationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter scopingConfigurationName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), reportName, scopingConfigurationName,
            accept, context);
    }

    /**
     * Get the AppComplianceAutomation scoping configuration of the specific report.
     * 
     * @param reportName Report Name.
     * @param scopingConfigurationName The scoping configuration of the specific report.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation scoping configuration of the specific report on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ScopingConfigurationResourceInner> getAsync(String reportName, String scopingConfigurationName) {
        return getWithResponseAsync(reportName, scopingConfigurationName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the AppComplianceAutomation scoping configuration of the specific report.
     * 
     * @param reportName Report Name.
     * @param scopingConfigurationName The scoping configuration of the specific report.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation scoping configuration of the specific report along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ScopingConfigurationResourceInner> getWithResponse(String reportName,
        String scopingConfigurationName, Context context) {
        return getWithResponseAsync(reportName, scopingConfigurationName, context).block();
    }

    /**
     * Get the AppComplianceAutomation scoping configuration of the specific report.
     * 
     * @param reportName Report Name.
     * @param scopingConfigurationName The scoping configuration of the specific report.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation scoping configuration of the specific report.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ScopingConfigurationResourceInner get(String reportName, String scopingConfigurationName) {
        return getWithResponse(reportName, scopingConfigurationName, Context.NONE).getValue();
    }

    /**
     * Get the AppComplianceAutomation scoping configuration of the specific report.
     * 
     * @param reportName Report Name.
     * @param scopingConfigurationName The scoping configuration of the specific report.
     * @param parameters Parameters for the create or update operation, this is a singleton resource, so please make
     * sure you're using 'default' as the name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation scoping configuration of the specific report along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ScopingConfigurationResourceInner>> createOrUpdateWithResponseAsync(String reportName,
        String scopingConfigurationName, ScopingConfigurationResourceInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        if (scopingConfigurationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter scopingConfigurationName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                reportName, scopingConfigurationName, accept, parameters, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the AppComplianceAutomation scoping configuration of the specific report.
     * 
     * @param reportName Report Name.
     * @param scopingConfigurationName The scoping configuration of the specific report.
     * @param parameters Parameters for the create or update operation, this is a singleton resource, so please make
     * sure you're using 'default' as the name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation scoping configuration of the specific report along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ScopingConfigurationResourceInner>> createOrUpdateWithResponseAsync(String reportName,
        String scopingConfigurationName, ScopingConfigurationResourceInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        if (scopingConfigurationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter scopingConfigurationName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(), reportName,
            scopingConfigurationName, accept, parameters, context);
    }

    /**
     * Get the AppComplianceAutomation scoping configuration of the specific report.
     * 
     * @param reportName Report Name.
     * @param scopingConfigurationName The scoping configuration of the specific report.
     * @param parameters Parameters for the create or update operation, this is a singleton resource, so please make
     * sure you're using 'default' as the name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation scoping configuration of the specific report on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ScopingConfigurationResourceInner> createOrUpdateAsync(String reportName,
        String scopingConfigurationName, ScopingConfigurationResourceInner parameters) {
        return createOrUpdateWithResponseAsync(reportName, scopingConfigurationName, parameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the AppComplianceAutomation scoping configuration of the specific report.
     * 
     * @param reportName Report Name.
     * @param scopingConfigurationName The scoping configuration of the specific report.
     * @param parameters Parameters for the create or update operation, this is a singleton resource, so please make
     * sure you're using 'default' as the name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation scoping configuration of the specific report along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ScopingConfigurationResourceInner> createOrUpdateWithResponse(String reportName,
        String scopingConfigurationName, ScopingConfigurationResourceInner parameters, Context context) {
        return createOrUpdateWithResponseAsync(reportName, scopingConfigurationName, parameters, context).block();
    }

    /**
     * Get the AppComplianceAutomation scoping configuration of the specific report.
     * 
     * @param reportName Report Name.
     * @param scopingConfigurationName The scoping configuration of the specific report.
     * @param parameters Parameters for the create or update operation, this is a singleton resource, so please make
     * sure you're using 'default' as the name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppComplianceAutomation scoping configuration of the specific report.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ScopingConfigurationResourceInner createOrUpdate(String reportName, String scopingConfigurationName,
        ScopingConfigurationResourceInner parameters) {
        return createOrUpdateWithResponse(reportName, scopingConfigurationName, parameters, Context.NONE).getValue();
    }

    /**
     * Clean the AppComplianceAutomation scoping configuration of the specific report.
     * 
     * @param reportName Report Name.
     * @param scopingConfigurationName The scoping configuration of the specific report.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String reportName, String scopingConfigurationName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        if (scopingConfigurationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter scopingConfigurationName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(), reportName,
                scopingConfigurationName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Clean the AppComplianceAutomation scoping configuration of the specific report.
     * 
     * @param reportName Report Name.
     * @param scopingConfigurationName The scoping configuration of the specific report.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String reportName, String scopingConfigurationName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        if (scopingConfigurationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter scopingConfigurationName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), reportName,
            scopingConfigurationName, accept, context);
    }

    /**
     * Clean the AppComplianceAutomation scoping configuration of the specific report.
     * 
     * @param reportName Report Name.
     * @param scopingConfigurationName The scoping configuration of the specific report.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String reportName, String scopingConfigurationName) {
        return deleteWithResponseAsync(reportName, scopingConfigurationName).flatMap(ignored -> Mono.empty());
    }

    /**
     * Clean the AppComplianceAutomation scoping configuration of the specific report.
     * 
     * @param reportName Report Name.
     * @param scopingConfigurationName The scoping configuration of the specific report.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String reportName, String scopingConfigurationName, Context context) {
        return deleteWithResponseAsync(reportName, scopingConfigurationName, context).block();
    }

    /**
     * Clean the AppComplianceAutomation scoping configuration of the specific report.
     * 
     * @param reportName Report Name.
     * @param scopingConfigurationName The scoping configuration of the specific report.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String reportName, String scopingConfigurationName) {
        deleteWithResponse(reportName, scopingConfigurationName, Context.NONE);
    }

    /**
     * Returns a list format of the singleton scopingConfiguration for a specified report.
     * 
     * @param reportName Report Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ScopingConfigurationResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ScopingConfigurationResourceInner>>
        listByReportResourceSinglePageAsync(String reportName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByReportResource(this.client.getEndpoint(), this.client.getApiVersion(),
                reportName, accept, context))
            .<PagedResponse<ScopingConfigurationResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns a list format of the singleton scopingConfiguration for a specified report.
     * 
     * @param reportName Report Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ScopingConfigurationResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ScopingConfigurationResourceInner>>
        listByReportResourceSinglePageAsync(String reportName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (reportName == null) {
            return Mono.error(new IllegalArgumentException("Parameter reportName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByReportResource(this.client.getEndpoint(), this.client.getApiVersion(), reportName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Returns a list format of the singleton scopingConfiguration for a specified report.
     * 
     * @param reportName Report Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ScopingConfigurationResource list operation as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ScopingConfigurationResourceInner> listByReportResourceAsync(String reportName) {
        return new PagedFlux<>(() -> listByReportResourceSinglePageAsync(reportName),
            nextLink -> listByReportResourceNextSinglePageAsync(nextLink));
    }

    /**
     * Returns a list format of the singleton scopingConfiguration for a specified report.
     * 
     * @param reportName Report Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ScopingConfigurationResource list operation as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ScopingConfigurationResourceInner> listByReportResourceAsync(String reportName, Context context) {
        return new PagedFlux<>(() -> listByReportResourceSinglePageAsync(reportName, context),
            nextLink -> listByReportResourceNextSinglePageAsync(nextLink, context));
    }

    /**
     * Returns a list format of the singleton scopingConfiguration for a specified report.
     * 
     * @param reportName Report Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ScopingConfigurationResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ScopingConfigurationResourceInner> listByReportResource(String reportName) {
        return new PagedIterable<>(listByReportResourceAsync(reportName));
    }

    /**
     * Returns a list format of the singleton scopingConfiguration for a specified report.
     * 
     * @param reportName Report Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ScopingConfigurationResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ScopingConfigurationResourceInner> listByReportResource(String reportName, Context context) {
        return new PagedIterable<>(listByReportResourceAsync(reportName, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ScopingConfigurationResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ScopingConfigurationResourceInner>>
        listByReportResourceNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByReportResourceNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ScopingConfigurationResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ScopingConfigurationResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ScopingConfigurationResourceInner>>
        listByReportResourceNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByReportResourceNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
