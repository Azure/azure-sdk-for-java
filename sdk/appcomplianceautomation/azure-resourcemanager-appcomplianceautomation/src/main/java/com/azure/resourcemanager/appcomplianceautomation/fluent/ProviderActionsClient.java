// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.CheckNameAvailabilityResponseInner;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.GetCollectionCountResponseInner;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.GetOverviewStatusResponseInner;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.ListInUseStorageAccountsResponseInner;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.OnboardResponseInner;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.TriggerEvaluationResponseInner;
import com.azure.resourcemanager.appcomplianceautomation.models.CheckNameAvailabilityRequest;
import com.azure.resourcemanager.appcomplianceautomation.models.GetCollectionCountRequest;
import com.azure.resourcemanager.appcomplianceautomation.models.GetOverviewStatusRequest;
import com.azure.resourcemanager.appcomplianceautomation.models.ListInUseStorageAccountsRequest;
import com.azure.resourcemanager.appcomplianceautomation.models.OnboardRequest;
import com.azure.resourcemanager.appcomplianceautomation.models.TriggerEvaluationRequest;

/**
 * An instance of this class provides access to all the operations defined in ProviderActionsClient.
 */
public interface ProviderActionsClient {
    /**
     * Check if the given name is available for a report.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the check availability result along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CheckNameAvailabilityResponseInner> checkNameAvailabilityWithResponse(CheckNameAvailabilityRequest body,
        Context context);

    /**
     * Check if the given name is available for a report.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the check availability result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CheckNameAvailabilityResponseInner checkNameAvailability(CheckNameAvailabilityRequest body);

    /**
     * Get the count of reports.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the count of reports along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<GetCollectionCountResponseInner> getCollectionCountWithResponse(GetCollectionCountRequest body,
        Context context);

    /**
     * Get the count of reports.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the count of reports.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GetCollectionCountResponseInner getCollectionCount(GetCollectionCountRequest body);

    /**
     * Get the resource overview status.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource overview status along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<GetOverviewStatusResponseInner> getOverviewStatusWithResponse(GetOverviewStatusRequest body,
        Context context);

    /**
     * Get the resource overview status.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource overview status.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GetOverviewStatusResponseInner getOverviewStatus(GetOverviewStatusRequest body);

    /**
     * Onboard given subscriptions to Microsoft.AppComplianceAutomation provider.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OnboardResponseInner>, OnboardResponseInner> beginOnboard(OnboardRequest body);

    /**
     * Onboard given subscriptions to Microsoft.AppComplianceAutomation provider.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OnboardResponseInner>, OnboardResponseInner> beginOnboard(OnboardRequest body,
        Context context);

    /**
     * Onboard given subscriptions to Microsoft.AppComplianceAutomation provider.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OnboardResponseInner onboard(OnboardRequest body);

    /**
     * Onboard given subscriptions to Microsoft.AppComplianceAutomation provider.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OnboardResponseInner onboard(OnboardRequest body, Context context);

    /**
     * Trigger quick evaluation for the given subscriptions.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<TriggerEvaluationResponseInner>, TriggerEvaluationResponseInner>
        beginTriggerEvaluation(TriggerEvaluationRequest body);

    /**
     * Trigger quick evaluation for the given subscriptions.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<TriggerEvaluationResponseInner>, TriggerEvaluationResponseInner>
        beginTriggerEvaluation(TriggerEvaluationRequest body, Context context);

    /**
     * Trigger quick evaluation for the given subscriptions.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TriggerEvaluationResponseInner triggerEvaluation(TriggerEvaluationRequest body);

    /**
     * Trigger quick evaluation for the given subscriptions.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TriggerEvaluationResponseInner triggerEvaluation(TriggerEvaluationRequest body, Context context);

    /**
     * List the storage accounts which are in use by related reports.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters for listing in use storage accounts operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ListInUseStorageAccountsResponseInner>
        listInUseStorageAccountsWithResponse(ListInUseStorageAccountsRequest body, Context context);

    /**
     * List the storage accounts which are in use by related reports.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters for listing in use storage accounts operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ListInUseStorageAccountsResponseInner listInUseStorageAccounts(ListInUseStorageAccountsRequest body);
}
