// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A class represent the certification record synchronized from app compliance.
 */
@Fluent
public final class CertSyncRecord implements JsonSerializable<CertSyncRecord> {
    /*
     * The offerGuid which mapping to the reports.
     */
    private String offerGuid;

    /*
     * Indicates the status of certification process.
     */
    private String certificationStatus;

    /*
     * Indicates the status of compliance process.
     */
    private String ingestionStatus;

    /*
     * The control records list to be synchronized.
     */
    private List<ControlSyncRecord> controls;

    /**
     * Creates an instance of CertSyncRecord class.
     */
    public CertSyncRecord() {
    }

    /**
     * Get the offerGuid property: The offerGuid which mapping to the reports.
     * 
     * @return the offerGuid value.
     */
    public String offerGuid() {
        return this.offerGuid;
    }

    /**
     * Set the offerGuid property: The offerGuid which mapping to the reports.
     * 
     * @param offerGuid the offerGuid value to set.
     * @return the CertSyncRecord object itself.
     */
    public CertSyncRecord withOfferGuid(String offerGuid) {
        this.offerGuid = offerGuid;
        return this;
    }

    /**
     * Get the certificationStatus property: Indicates the status of certification process.
     * 
     * @return the certificationStatus value.
     */
    public String certificationStatus() {
        return this.certificationStatus;
    }

    /**
     * Set the certificationStatus property: Indicates the status of certification process.
     * 
     * @param certificationStatus the certificationStatus value to set.
     * @return the CertSyncRecord object itself.
     */
    public CertSyncRecord withCertificationStatus(String certificationStatus) {
        this.certificationStatus = certificationStatus;
        return this;
    }

    /**
     * Get the ingestionStatus property: Indicates the status of compliance process.
     * 
     * @return the ingestionStatus value.
     */
    public String ingestionStatus() {
        return this.ingestionStatus;
    }

    /**
     * Set the ingestionStatus property: Indicates the status of compliance process.
     * 
     * @param ingestionStatus the ingestionStatus value to set.
     * @return the CertSyncRecord object itself.
     */
    public CertSyncRecord withIngestionStatus(String ingestionStatus) {
        this.ingestionStatus = ingestionStatus;
        return this;
    }

    /**
     * Get the controls property: The control records list to be synchronized.
     * 
     * @return the controls value.
     */
    public List<ControlSyncRecord> controls() {
        return this.controls;
    }

    /**
     * Set the controls property: The control records list to be synchronized.
     * 
     * @param controls the controls value to set.
     * @return the CertSyncRecord object itself.
     */
    public CertSyncRecord withControls(List<ControlSyncRecord> controls) {
        this.controls = controls;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (controls() != null) {
            controls().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("offerGuid", this.offerGuid);
        jsonWriter.writeStringField("certificationStatus", this.certificationStatus);
        jsonWriter.writeStringField("ingestionStatus", this.ingestionStatus);
        jsonWriter.writeArrayField("controls", this.controls, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CertSyncRecord from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CertSyncRecord if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CertSyncRecord.
     */
    public static CertSyncRecord fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CertSyncRecord deserializedCertSyncRecord = new CertSyncRecord();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("offerGuid".equals(fieldName)) {
                    deserializedCertSyncRecord.offerGuid = reader.getString();
                } else if ("certificationStatus".equals(fieldName)) {
                    deserializedCertSyncRecord.certificationStatus = reader.getString();
                } else if ("ingestionStatus".equals(fieldName)) {
                    deserializedCertSyncRecord.ingestionStatus = reader.getString();
                } else if ("controls".equals(fieldName)) {
                    List<ControlSyncRecord> controls = reader.readArray(reader1 -> ControlSyncRecord.fromJson(reader1));
                    deserializedCertSyncRecord.controls = controls;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCertSyncRecord;
        });
    }
}
