// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A class represent the compliance category.
 */
@Immutable
public final class Category implements JsonSerializable<Category> {
    /*
     * The name of the compliance category. e.g. "Operational Security"
     */
    private String categoryName;

    /*
     * Category status.
     */
    private CategoryStatus categoryStatus;

    /*
     * List of control families.
     */
    private List<ControlFamily> controlFamilies;

    /**
     * Creates an instance of Category class.
     */
    private Category() {
    }

    /**
     * Get the categoryName property: The name of the compliance category. e.g. "Operational Security".
     * 
     * @return the categoryName value.
     */
    public String categoryName() {
        return this.categoryName;
    }

    /**
     * Get the categoryStatus property: Category status.
     * 
     * @return the categoryStatus value.
     */
    public CategoryStatus categoryStatus() {
        return this.categoryStatus;
    }

    /**
     * Get the controlFamilies property: List of control families.
     * 
     * @return the controlFamilies value.
     */
    public List<ControlFamily> controlFamilies() {
        return this.controlFamilies;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (controlFamilies() != null) {
            controlFamilies().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Category from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Category if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Category.
     */
    public static Category fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Category deserializedCategory = new Category();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("categoryName".equals(fieldName)) {
                    deserializedCategory.categoryName = reader.getString();
                } else if ("categoryStatus".equals(fieldName)) {
                    deserializedCategory.categoryStatus = CategoryStatus.fromString(reader.getString());
                } else if ("controlFamilies".equals(fieldName)) {
                    List<ControlFamily> controlFamilies = reader.readArray(reader1 -> ControlFamily.fromJson(reader1));
                    deserializedCategory.controlFamilies = controlFamilies;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCategory;
        });
    }
}
