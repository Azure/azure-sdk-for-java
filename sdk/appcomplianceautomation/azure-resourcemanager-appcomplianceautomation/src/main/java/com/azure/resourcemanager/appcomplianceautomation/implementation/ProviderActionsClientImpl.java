// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.appcomplianceautomation.fluent.ProviderActionsClient;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.CheckNameAvailabilityResponseInner;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.GetCollectionCountResponseInner;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.GetOverviewStatusResponseInner;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.ListInUseStorageAccountsResponseInner;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.OnboardResponseInner;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.TriggerEvaluationResponseInner;
import com.azure.resourcemanager.appcomplianceautomation.models.CheckNameAvailabilityRequest;
import com.azure.resourcemanager.appcomplianceautomation.models.GetCollectionCountRequest;
import com.azure.resourcemanager.appcomplianceautomation.models.GetOverviewStatusRequest;
import com.azure.resourcemanager.appcomplianceautomation.models.ListInUseStorageAccountsRequest;
import com.azure.resourcemanager.appcomplianceautomation.models.OnboardRequest;
import com.azure.resourcemanager.appcomplianceautomation.models.TriggerEvaluationRequest;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ProviderActionsClient.
 */
public final class ProviderActionsClientImpl implements ProviderActionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ProviderActionsService service;

    /**
     * The service client containing this operation class.
     */
    private final AppComplianceAutomationClientImpl client;

    /**
     * Initializes an instance of ProviderActionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ProviderActionsClientImpl(AppComplianceAutomationClientImpl client) {
        this.service
            = RestProxy.create(ProviderActionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AppComplianceAutomationClientProviderActions to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AppComplianceAutomat")
    public interface ProviderActionsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.AppComplianceAutomation/checkNameAvailability")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CheckNameAvailabilityResponseInner>> checkNameAvailability(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") CheckNameAvailabilityRequest body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.AppComplianceAutomation/getCollectionCount")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GetCollectionCountResponseInner>> getCollectionCount(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") GetCollectionCountRequest body,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.AppComplianceAutomation/getOverviewStatus")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GetOverviewStatusResponseInner>> getOverviewStatus(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") GetOverviewStatusRequest body,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.AppComplianceAutomation/listInUseStorageAccounts")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ListInUseStorageAccountsResponseInner>> listInUseStorageAccounts(
            @HostParam("$host") String endpoint, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ListInUseStorageAccountsRequest body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.AppComplianceAutomation/onboard")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> onboard(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") OnboardRequest body,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/Microsoft.AppComplianceAutomation/triggerEvaluation")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> triggerEvaluation(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") TriggerEvaluationRequest body,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Check if the given name is available for a report.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the check availability result along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CheckNameAvailabilityResponseInner>>
        checkNameAvailabilityWithResponseAsync(CheckNameAvailabilityRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.checkNameAvailability(this.client.getEndpoint(),
                this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Check if the given name is available for a report.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the check availability result along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CheckNameAvailabilityResponseInner>>
        checkNameAvailabilityWithResponseAsync(CheckNameAvailabilityRequest body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.checkNameAvailability(this.client.getEndpoint(), this.client.getApiVersion(), body, accept,
            context);
    }

    /**
     * Check if the given name is available for a report.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the check availability result on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CheckNameAvailabilityResponseInner> checkNameAvailabilityAsync(CheckNameAvailabilityRequest body) {
        return checkNameAvailabilityWithResponseAsync(body).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Check if the given name is available for a report.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the check availability result along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CheckNameAvailabilityResponseInner>
        checkNameAvailabilityWithResponse(CheckNameAvailabilityRequest body, Context context) {
        return checkNameAvailabilityWithResponseAsync(body, context).block();
    }

    /**
     * Check if the given name is available for a report.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the check availability result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CheckNameAvailabilityResponseInner checkNameAvailability(CheckNameAvailabilityRequest body) {
        return checkNameAvailabilityWithResponse(body, Context.NONE).getValue();
    }

    /**
     * Get the count of reports.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the count of reports along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GetCollectionCountResponseInner>>
        getCollectionCountWithResponseAsync(GetCollectionCountRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getCollectionCount(this.client.getEndpoint(), this.client.getApiVersion(),
                body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the count of reports.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the count of reports along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GetCollectionCountResponseInner>>
        getCollectionCountWithResponseAsync(GetCollectionCountRequest body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getCollectionCount(this.client.getEndpoint(), this.client.getApiVersion(), body, accept,
            context);
    }

    /**
     * Get the count of reports.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the count of reports on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GetCollectionCountResponseInner> getCollectionCountAsync(GetCollectionCountRequest body) {
        return getCollectionCountWithResponseAsync(body).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the count of reports.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the count of reports along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GetCollectionCountResponseInner> getCollectionCountWithResponse(GetCollectionCountRequest body,
        Context context) {
        return getCollectionCountWithResponseAsync(body, context).block();
    }

    /**
     * Get the count of reports.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the count of reports.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GetCollectionCountResponseInner getCollectionCount(GetCollectionCountRequest body) {
        return getCollectionCountWithResponse(body, Context.NONE).getValue();
    }

    /**
     * Get the resource overview status.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource overview status along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GetOverviewStatusResponseInner>>
        getOverviewStatusWithResponseAsync(GetOverviewStatusRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getOverviewStatus(this.client.getEndpoint(), this.client.getApiVersion(),
                body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the resource overview status.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource overview status along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GetOverviewStatusResponseInner>>
        getOverviewStatusWithResponseAsync(GetOverviewStatusRequest body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getOverviewStatus(this.client.getEndpoint(), this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Get the resource overview status.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource overview status on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GetOverviewStatusResponseInner> getOverviewStatusAsync(GetOverviewStatusRequest body) {
        return getOverviewStatusWithResponseAsync(body).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the resource overview status.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource overview status along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GetOverviewStatusResponseInner> getOverviewStatusWithResponse(GetOverviewStatusRequest body,
        Context context) {
        return getOverviewStatusWithResponseAsync(body, context).block();
    }

    /**
     * Get the resource overview status.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource overview status.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GetOverviewStatusResponseInner getOverviewStatus(GetOverviewStatusRequest body) {
        return getOverviewStatusWithResponse(body, Context.NONE).getValue();
    }

    /**
     * List the storage accounts which are in use by related reports.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters for listing in use storage accounts operation along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ListInUseStorageAccountsResponseInner>>
        listInUseStorageAccountsWithResponseAsync(ListInUseStorageAccountsRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listInUseStorageAccounts(this.client.getEndpoint(),
                this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List the storage accounts which are in use by related reports.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters for listing in use storage accounts operation along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ListInUseStorageAccountsResponseInner>>
        listInUseStorageAccountsWithResponseAsync(ListInUseStorageAccountsRequest body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listInUseStorageAccounts(this.client.getEndpoint(), this.client.getApiVersion(), body, accept,
            context);
    }

    /**
     * List the storage accounts which are in use by related reports.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters for listing in use storage accounts operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ListInUseStorageAccountsResponseInner>
        listInUseStorageAccountsAsync(ListInUseStorageAccountsRequest body) {
        return listInUseStorageAccountsWithResponseAsync(body).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * List the storage accounts which are in use by related reports.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters for listing in use storage accounts operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ListInUseStorageAccountsResponseInner>
        listInUseStorageAccountsWithResponse(ListInUseStorageAccountsRequest body, Context context) {
        return listInUseStorageAccountsWithResponseAsync(body, context).block();
    }

    /**
     * List the storage accounts which are in use by related reports.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return parameters for listing in use storage accounts operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListInUseStorageAccountsResponseInner listInUseStorageAccounts(ListInUseStorageAccountsRequest body) {
        return listInUseStorageAccountsWithResponse(body, Context.NONE).getValue();
    }

    /**
     * Onboard given subscriptions to Microsoft.AppComplianceAutomation provider.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return success along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> onboardWithResponseAsync(OnboardRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.onboard(this.client.getEndpoint(), this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Onboard given subscriptions to Microsoft.AppComplianceAutomation provider.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return success along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> onboardWithResponseAsync(OnboardRequest body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.onboard(this.client.getEndpoint(), this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Onboard given subscriptions to Microsoft.AppComplianceAutomation provider.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of success.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OnboardResponseInner>, OnboardResponseInner> beginOnboardAsync(OnboardRequest body) {
        Mono<Response<Flux<ByteBuffer>>> mono = onboardWithResponseAsync(body);
        return this.client.<OnboardResponseInner, OnboardResponseInner>getLroResult(mono, this.client.getHttpPipeline(),
            OnboardResponseInner.class, OnboardResponseInner.class, this.client.getContext());
    }

    /**
     * Onboard given subscriptions to Microsoft.AppComplianceAutomation provider.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of success.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OnboardResponseInner>, OnboardResponseInner> beginOnboardAsync(OnboardRequest body,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = onboardWithResponseAsync(body, context);
        return this.client.<OnboardResponseInner, OnboardResponseInner>getLroResult(mono, this.client.getHttpPipeline(),
            OnboardResponseInner.class, OnboardResponseInner.class, context);
    }

    /**
     * Onboard given subscriptions to Microsoft.AppComplianceAutomation provider.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of success.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OnboardResponseInner>, OnboardResponseInner> beginOnboard(OnboardRequest body) {
        return this.beginOnboardAsync(body).getSyncPoller();
    }

    /**
     * Onboard given subscriptions to Microsoft.AppComplianceAutomation provider.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of success.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OnboardResponseInner>, OnboardResponseInner> beginOnboard(OnboardRequest body,
        Context context) {
        return this.beginOnboardAsync(body, context).getSyncPoller();
    }

    /**
     * Onboard given subscriptions to Microsoft.AppComplianceAutomation provider.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return success on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OnboardResponseInner> onboardAsync(OnboardRequest body) {
        return beginOnboardAsync(body).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Onboard given subscriptions to Microsoft.AppComplianceAutomation provider.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return success on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OnboardResponseInner> onboardAsync(OnboardRequest body, Context context) {
        return beginOnboardAsync(body, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Onboard given subscriptions to Microsoft.AppComplianceAutomation provider.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return success.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OnboardResponseInner onboard(OnboardRequest body) {
        return onboardAsync(body).block();
    }

    /**
     * Onboard given subscriptions to Microsoft.AppComplianceAutomation provider.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return success.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OnboardResponseInner onboard(OnboardRequest body, Context context) {
        return onboardAsync(body, context).block();
    }

    /**
     * Trigger quick evaluation for the given subscriptions.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return trigger evaluation response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> triggerEvaluationWithResponseAsync(TriggerEvaluationRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.triggerEvaluation(this.client.getEndpoint(), this.client.getApiVersion(),
                body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Trigger quick evaluation for the given subscriptions.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return trigger evaluation response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> triggerEvaluationWithResponseAsync(TriggerEvaluationRequest body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.triggerEvaluation(this.client.getEndpoint(), this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Trigger quick evaluation for the given subscriptions.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of trigger evaluation response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<TriggerEvaluationResponseInner>, TriggerEvaluationResponseInner>
        beginTriggerEvaluationAsync(TriggerEvaluationRequest body) {
        Mono<Response<Flux<ByteBuffer>>> mono = triggerEvaluationWithResponseAsync(body);
        return this.client.<TriggerEvaluationResponseInner, TriggerEvaluationResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), TriggerEvaluationResponseInner.class, TriggerEvaluationResponseInner.class,
            this.client.getContext());
    }

    /**
     * Trigger quick evaluation for the given subscriptions.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of trigger evaluation response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<TriggerEvaluationResponseInner>, TriggerEvaluationResponseInner>
        beginTriggerEvaluationAsync(TriggerEvaluationRequest body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = triggerEvaluationWithResponseAsync(body, context);
        return this.client.<TriggerEvaluationResponseInner, TriggerEvaluationResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), TriggerEvaluationResponseInner.class, TriggerEvaluationResponseInner.class,
            context);
    }

    /**
     * Trigger quick evaluation for the given subscriptions.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of trigger evaluation response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<TriggerEvaluationResponseInner>, TriggerEvaluationResponseInner>
        beginTriggerEvaluation(TriggerEvaluationRequest body) {
        return this.beginTriggerEvaluationAsync(body).getSyncPoller();
    }

    /**
     * Trigger quick evaluation for the given subscriptions.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of trigger evaluation response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<TriggerEvaluationResponseInner>, TriggerEvaluationResponseInner>
        beginTriggerEvaluation(TriggerEvaluationRequest body, Context context) {
        return this.beginTriggerEvaluationAsync(body, context).getSyncPoller();
    }

    /**
     * Trigger quick evaluation for the given subscriptions.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return trigger evaluation response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TriggerEvaluationResponseInner> triggerEvaluationAsync(TriggerEvaluationRequest body) {
        return beginTriggerEvaluationAsync(body).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Trigger quick evaluation for the given subscriptions.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return trigger evaluation response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TriggerEvaluationResponseInner> triggerEvaluationAsync(TriggerEvaluationRequest body,
        Context context) {
        return beginTriggerEvaluationAsync(body, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Trigger quick evaluation for the given subscriptions.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return trigger evaluation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TriggerEvaluationResponseInner triggerEvaluation(TriggerEvaluationRequest body) {
        return triggerEvaluationAsync(body).block();
    }

    /**
     * Trigger quick evaluation for the given subscriptions.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return trigger evaluation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TriggerEvaluationResponseInner triggerEvaluation(TriggerEvaluationRequest body, Context context) {
        return triggerEvaluationAsync(body, context).block();
    }
}
