// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A class represent the control record synchronized from app compliance.
 */
@Fluent
public final class ControlSyncRecord implements JsonSerializable<ControlSyncRecord> {
    /*
     * The Id of the control. e.g. "Operational_Security_10"
     */
    private String controlId;

    /*
     * Control status synchronized from app compliance.
     */
    private String controlStatus;

    /**
     * Creates an instance of ControlSyncRecord class.
     */
    public ControlSyncRecord() {
    }

    /**
     * Get the controlId property: The Id of the control. e.g. "Operational_Security_10".
     * 
     * @return the controlId value.
     */
    public String controlId() {
        return this.controlId;
    }

    /**
     * Set the controlId property: The Id of the control. e.g. "Operational_Security_10".
     * 
     * @param controlId the controlId value to set.
     * @return the ControlSyncRecord object itself.
     */
    public ControlSyncRecord withControlId(String controlId) {
        this.controlId = controlId;
        return this;
    }

    /**
     * Get the controlStatus property: Control status synchronized from app compliance.
     * 
     * @return the controlStatus value.
     */
    public String controlStatus() {
        return this.controlStatus;
    }

    /**
     * Set the controlStatus property: Control status synchronized from app compliance.
     * 
     * @param controlStatus the controlStatus value to set.
     * @return the ControlSyncRecord object itself.
     */
    public ControlSyncRecord withControlStatus(String controlStatus) {
        this.controlStatus = controlStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("controlId", this.controlId);
        jsonWriter.writeStringField("controlStatus", this.controlStatus);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ControlSyncRecord from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ControlSyncRecord if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ControlSyncRecord.
     */
    public static ControlSyncRecord fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ControlSyncRecord deserializedControlSyncRecord = new ControlSyncRecord();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("controlId".equals(fieldName)) {
                    deserializedControlSyncRecord.controlId = reader.getString();
                } else if ("controlStatus".equals(fieldName)) {
                    deserializedControlSyncRecord.controlStatus = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedControlSyncRecord;
        });
    }
}
