// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appcomplianceautomation.AppComplianceAutomationManager;
import com.azure.resourcemanager.appcomplianceautomation.models.ReportPatchProperties;
import com.azure.resourcemanager.appcomplianceautomation.models.ReportResource;
import com.azure.resourcemanager.appcomplianceautomation.models.ReportResourcePatch;
import com.azure.resourcemanager.appcomplianceautomation.models.ResourceMetadata;
import com.azure.resourcemanager.appcomplianceautomation.models.ResourceOrigin;
import com.azure.resourcemanager.appcomplianceautomation.models.StorageInfo;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ReportsUpdateMockTests {
    @Test
    public void testUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"triggerTime\":\"2021-09-29T03:03:45Z\",\"timeZone\":\"eg\",\"resources\":[{\"resourceId\":\"alzxwhcan\",\"resourceType\":\"moy\",\"resourceKind\":\"lwigdivbkbx\",\"resourceOrigin\":\"GCP\",\"accountId\":\"ajuwas\"},{\"resourceId\":\"vdaeyyguxakjsq\",\"resourceType\":\"zbezkgimsidxasic\",\"resourceKind\":\"yvvjskgfmo\",\"resourceOrigin\":\"GCP\",\"accountId\":\"pqg\"},{\"resourceId\":\"tjeaahhvjhh\",\"resourceType\":\"kzyb\",\"resourceKind\":\"jid\",\"resourceOrigin\":\"GCP\",\"accountId\":\"xkyxvxevblbj\"},{\"resourceId\":\"dnlj\",\"resourceType\":\"geuaulx\",\"resourceKind\":\"smjbnkppxyn\",\"resourceOrigin\":\"Azure\",\"accountId\":\"vxei\"}],\"status\":\"Failed\",\"errors\":[\"lnsrmffe\",\"cxcktpi\",\"merteeammxqiek\"],\"tenantId\":\"zddrt\",\"offerGuid\":\"doj\",\"nextTriggerTime\":\"2021-10-30T06:17:16Z\",\"lastTriggerTime\":\"2021-07-26T15:13:29Z\",\"subscriptions\":[\"efdeesve\",\"uij\"],\"complianceStatus\":{\"m365\":{\"passedCount\":214563643,\"failedCount\":1101105605,\"manualCount\":1728879575,\"notApplicableCount\":2079646623,\"pendingCount\":1491745835}},\"storageInfo\":{\"subscriptionId\":\"wddji\",\"resourceGroup\":\"bxv\",\"accountName\":\"itvtzeexavo\",\"location\":\"fglecdmdqbwp\"},\"certRecords\":[{\"offerGuid\":\"gsfjac\",\"certificationStatus\":\"lhhxudbxvodhtnsi\",\"ingestionStatus\":\"dhzmmesckdlp\",\"controls\":[{},{},{},{}]}],\"provisioningState\":\"Succeeded\"},\"id\":\"failcfx\",\"name\":\"m\",\"type\":\"boxdfgsftufq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppComplianceAutomationManager manager = AppComplianceAutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ReportResource response = manager.reports()
            .update("eazulcs",
                new ReportResourcePatch().withProperties(
                    new ReportPatchProperties().withTriggerTime(OffsetDateTime.parse("2021-08-08T19:14:03Z"))
                        .withTimeZone("npjhlfzswpchwahf")
                        .withResources(Arrays.asList(
                            new ResourceMetadata().withResourceId("snfepgfewetwlyx")
                                .withResourceType("cxy")
                                .withResourceKind("hdjhlimmbcx")
                                .withResourceOrigin(ResourceOrigin.AZURE)
                                .withAccountId("po"),
                            new ResourceMetadata().withResourceId("xvxcjzhq")
                                .withResourceType("xfpxtgqscja")
                                .withResourceKind("t")
                                .withResourceOrigin(ResourceOrigin.AWS)
                                .withAccountId("qaz"),
                            new ResourceMetadata().withResourceId("mtggu")
                                .withResourceType("ijr")
                                .withResourceKind("civmmg")
                                .withResourceOrigin(ResourceOrigin.AWS)
                                .withAccountId("iwrxgkn")))
                        .withOfferGuid("dtutnwldu")
                        .withStorageInfo(new StorageInfo().withSubscriptionId("xvmhf")
                            .withResourceGroup("zjyi")
                            .withAccountName("as")
                            .withLocation("udypohyuems"))),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals(OffsetDateTime.parse("2021-09-29T03:03:45Z"), response.properties().triggerTime());
        Assertions.assertEquals("eg", response.properties().timeZone());
        Assertions.assertEquals("alzxwhcan", response.properties().resources().get(0).resourceId());
        Assertions.assertEquals("moy", response.properties().resources().get(0).resourceType());
        Assertions.assertEquals("lwigdivbkbx", response.properties().resources().get(0).resourceKind());
        Assertions.assertEquals(ResourceOrigin.GCP, response.properties().resources().get(0).resourceOrigin());
        Assertions.assertEquals("ajuwas", response.properties().resources().get(0).accountId());
        Assertions.assertEquals("doj", response.properties().offerGuid());
        Assertions.assertEquals("wddji", response.properties().storageInfo().subscriptionId());
        Assertions.assertEquals("bxv", response.properties().storageInfo().resourceGroup());
        Assertions.assertEquals("itvtzeexavo", response.properties().storageInfo().accountName());
        Assertions.assertEquals("fglecdmdqbwp", response.properties().storageInfo().location());
    }
}
