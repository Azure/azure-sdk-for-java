// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appcomplianceautomation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appcomplianceautomation.AppComplianceAutomationManager;
import com.azure.resourcemanager.appcomplianceautomation.fluent.models.ReportResourceInner;
import com.azure.resourcemanager.appcomplianceautomation.models.ReportProperties;
import com.azure.resourcemanager.appcomplianceautomation.models.ReportResource;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReportOperationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"id\":\"misgwbnb\",\"status\":\"Disabled\",\"tenantId\":\"awkz\",\"reportName\":\"liourqhak\",\"offerGuid\":\"hashsfwxosow\",\"timeZone\":\"xcug\",\"triggerTime\":\"2021-06-04T05:08:46Z\",\"nextTriggerTime\":\"2020-12-22T21:46:37Z\",\"lastTriggerTime\":\"2021-06-13T13:40:46Z\",\"subscriptions\":[\"ebwpucwwfvo\"],\"resources\":[],\"complianceStatus\":{},\"provisioningState\":\"Succeeded\"},\"id\":\"civyhzceuo\",\"name\":\"gjrwjueiotwmcdyt\",\"type\":\"x\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AppComplianceAutomationManager manager =
            AppComplianceAutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ReportResource response =
            manager
                .reportOperations()
                .createOrUpdate(
                    "wfudwpzntxhdzhl",
                    new ReportResourceInner()
                        .withProperties(
                            new ReportProperties()
                                .withOfferGuid("hhseyv")
                                .withTimeZone("us")
                                .withTriggerTime(OffsetDateTime.parse("2021-04-19T12:26:41Z"))
                                .withResources(Arrays.asList())),
                    Context.NONE);

        Assertions.assertEquals("hashsfwxosow", response.properties().offerGuid());
        Assertions.assertEquals("xcug", response.properties().timeZone());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-04T05:08:46Z"), response.properties().triggerTime());
    }
}
