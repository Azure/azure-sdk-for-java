/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.consumption.v2018_08_31.implementation;

import com.microsoft.azure.management.consumption.v2018_08_31.Grain;
import java.math.BigDecimal;
import com.microsoft.azure.management.consumption.v2018_08_31.ChargeType;
import java.util.List;
import com.microsoft.azure.management.consumption.v2018_08_31.ForecastPropertiesConfidenceLevelsItem;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.ProxyResource;

/**
 * A forecast resource.
 */
@JsonFlatten
public class ForecastInner extends ProxyResource {
    /**
     * The usage date of the forecast.
     */
    @JsonProperty(value = "properties.usageDate", access = JsonProperty.Access.WRITE_ONLY)
    private String usageDate;

    /**
     * The granularity of forecast. Possible values include: 'Daily',
     * 'Monthly', 'Yearly'.
     */
    @JsonProperty(value = "properties.grain")
    private Grain grain;

    /**
     * The amount of charge.
     */
    @JsonProperty(value = "properties.charge", access = JsonProperty.Access.WRITE_ONLY)
    private BigDecimal charge;

    /**
     * The ISO currency in which the meter is charged, for example, USD.
     */
    @JsonProperty(value = "properties.currency", access = JsonProperty.Access.WRITE_ONLY)
    private String currency;

    /**
     * The type of the charge. Could be actual or forecast. Possible values
     * include: 'Actual', 'Forecast'.
     */
    @JsonProperty(value = "properties.chargeType")
    private ChargeType chargeType;

    /**
     * The details about the forecast confidence levels. This is populated only
     * when chargeType is Forecast.
     */
    @JsonProperty(value = "properties.confidenceLevels", access = JsonProperty.Access.WRITE_ONLY)
    private List<ForecastPropertiesConfidenceLevelsItem> confidenceLevels;

    /**
     * Resource tags.
     */
    @JsonProperty(value = "tags", access = JsonProperty.Access.WRITE_ONLY)
    private Map<String, String> tags;

    /**
     * Get the usage date of the forecast.
     *
     * @return the usageDate value
     */
    public String usageDate() {
        return this.usageDate;
    }

    /**
     * Get the granularity of forecast. Possible values include: 'Daily', 'Monthly', 'Yearly'.
     *
     * @return the grain value
     */
    public Grain grain() {
        return this.grain;
    }

    /**
     * Set the granularity of forecast. Possible values include: 'Daily', 'Monthly', 'Yearly'.
     *
     * @param grain the grain value to set
     * @return the ForecastInner object itself.
     */
    public ForecastInner withGrain(Grain grain) {
        this.grain = grain;
        return this;
    }

    /**
     * Get the amount of charge.
     *
     * @return the charge value
     */
    public BigDecimal charge() {
        return this.charge;
    }

    /**
     * Get the ISO currency in which the meter is charged, for example, USD.
     *
     * @return the currency value
     */
    public String currency() {
        return this.currency;
    }

    /**
     * Get the type of the charge. Could be actual or forecast. Possible values include: 'Actual', 'Forecast'.
     *
     * @return the chargeType value
     */
    public ChargeType chargeType() {
        return this.chargeType;
    }

    /**
     * Set the type of the charge. Could be actual or forecast. Possible values include: 'Actual', 'Forecast'.
     *
     * @param chargeType the chargeType value to set
     * @return the ForecastInner object itself.
     */
    public ForecastInner withChargeType(ChargeType chargeType) {
        this.chargeType = chargeType;
        return this;
    }

    /**
     * Get the details about the forecast confidence levels. This is populated only when chargeType is Forecast.
     *
     * @return the confidenceLevels value
     */
    public List<ForecastPropertiesConfidenceLevelsItem> confidenceLevels() {
        return this.confidenceLevels;
    }

    /**
     * Get resource tags.
     *
     * @return the tags value
     */
    public Map<String, String> tags() {
        return this.tags;
    }

}
