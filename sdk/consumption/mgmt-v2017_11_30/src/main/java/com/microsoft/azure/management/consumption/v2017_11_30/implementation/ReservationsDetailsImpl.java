/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.consumption.v2017_11_30.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.consumption.v2017_11_30.ReservationsDetails;
import rx.functions.Func1;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.consumption.v2017_11_30.ReservationDetails;

class ReservationsDetailsImpl extends WrapperImpl<ReservationsDetailsInner> implements ReservationsDetails {
    private final ConsumptionManager manager;

    ReservationsDetailsImpl(ConsumptionManager manager) {
        super(manager.inner().reservationsDetails());
        this.manager = manager;
    }

    public ConsumptionManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ReservationDetails> listAsync(String scope, String filter) {
        ReservationsDetailsInner client = this.inner();
        return client.listAsync(scope, filter)
        .flatMap(new Func1<List<ReservationDetailsInner>, Observable<ReservationDetailsInner>>() {
            @Override
            public Observable<ReservationDetailsInner> call(List<ReservationDetailsInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<ReservationDetailsInner, ReservationDetails>() {
            @Override
            public ReservationDetails call(ReservationDetailsInner inner) {
                return new ReservationDetailsImpl(inner, manager());
            }
        });
    }

}
