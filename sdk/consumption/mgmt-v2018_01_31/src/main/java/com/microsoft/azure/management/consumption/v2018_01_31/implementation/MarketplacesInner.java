/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.consumption.v2018_01_31.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.consumption.v2018_01_31.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Marketplaces.
 */
public class MarketplacesInner {
    /** The Retrofit service to perform REST calls. */
    private MarketplacesService service;
    /** The service client containing this operation class. */
    private ConsumptionManagementClientImpl client;

    /**
     * Initializes an instance of MarketplacesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public MarketplacesInner(Retrofit retrofit, ConsumptionManagementClientImpl client) {
        this.service = retrofit.create(MarketplacesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Marketplaces to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MarketplacesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.consumption.v2018_01_31.Marketplaces list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Consumption/marketplaces")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skiptoken") String skiptoken, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.consumption.v2018_01_31.Marketplaces listByBillingPeriod" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/marketplaces")
        Observable<Response<ResponseBody>> listByBillingPeriod(@Path("subscriptionId") String subscriptionId, @Path("billingPeriodName") String billingPeriodName, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skiptoken") String skiptoken, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.consumption.v2018_01_31.Marketplaces listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.consumption.v2018_01_31.Marketplaces listByBillingPeriodNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingPeriodNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists the marketplaces for a scope by subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MarketplaceInner&gt; object if successful.
     */
    public PagedList<MarketplaceInner> list() {
        ServiceResponse<Page<MarketplaceInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<MarketplaceInner>(response.body()) {
            @Override
            public Page<MarketplaceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the marketplaces for a scope by subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MarketplaceInner>> listAsync(final ListOperationCallback<MarketplaceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<MarketplaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MarketplaceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the marketplaces for a scope by subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MarketplaceInner&gt; object
     */
    public Observable<Page<MarketplaceInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<MarketplaceInner>>, Page<MarketplaceInner>>() {
                @Override
                public Page<MarketplaceInner> call(ServiceResponse<Page<MarketplaceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the marketplaces for a scope by subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MarketplaceInner&gt; object
     */
    public Observable<ServiceResponse<Page<MarketplaceInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<MarketplaceInner>>, Observable<ServiceResponse<Page<MarketplaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MarketplaceInner>>> call(ServiceResponse<Page<MarketplaceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the marketplaces for a scope by subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MarketplaceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MarketplaceInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        final String skiptoken = null;
        return service.list(this.client.subscriptionId(), filter, top, skiptoken, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MarketplaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MarketplaceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MarketplaceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MarketplaceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the marketplaces for a scope by subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param filter May be used to filter marketplaces by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'.
     * @param top May be used to limit the number of results to the most recent N marketplaces.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MarketplaceInner&gt; object if successful.
     */
    public PagedList<MarketplaceInner> list(final String filter, final Integer top, final String skiptoken) {
        ServiceResponse<Page<MarketplaceInner>> response = listSinglePageAsync(filter, top, skiptoken).toBlocking().single();
        return new PagedList<MarketplaceInner>(response.body()) {
            @Override
            public Page<MarketplaceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the marketplaces for a scope by subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param filter May be used to filter marketplaces by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'.
     * @param top May be used to limit the number of results to the most recent N marketplaces.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MarketplaceInner>> listAsync(final String filter, final Integer top, final String skiptoken, final ListOperationCallback<MarketplaceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(filter, top, skiptoken),
            new Func1<String, Observable<ServiceResponse<Page<MarketplaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MarketplaceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the marketplaces for a scope by subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param filter May be used to filter marketplaces by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'.
     * @param top May be used to limit the number of results to the most recent N marketplaces.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MarketplaceInner&gt; object
     */
    public Observable<Page<MarketplaceInner>> listAsync(final String filter, final Integer top, final String skiptoken) {
        return listWithServiceResponseAsync(filter, top, skiptoken)
            .map(new Func1<ServiceResponse<Page<MarketplaceInner>>, Page<MarketplaceInner>>() {
                @Override
                public Page<MarketplaceInner> call(ServiceResponse<Page<MarketplaceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the marketplaces for a scope by subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param filter May be used to filter marketplaces by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'.
     * @param top May be used to limit the number of results to the most recent N marketplaces.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MarketplaceInner&gt; object
     */
    public Observable<ServiceResponse<Page<MarketplaceInner>>> listWithServiceResponseAsync(final String filter, final Integer top, final String skiptoken) {
        return listSinglePageAsync(filter, top, skiptoken)
            .concatMap(new Func1<ServiceResponse<Page<MarketplaceInner>>, Observable<ServiceResponse<Page<MarketplaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MarketplaceInner>>> call(ServiceResponse<Page<MarketplaceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the marketplaces for a scope by subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
    ServiceResponse<PageImpl<MarketplaceInner>> * @param filter May be used to filter marketplaces by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'.
    ServiceResponse<PageImpl<MarketplaceInner>> * @param top May be used to limit the number of results to the most recent N marketplaces.
    ServiceResponse<PageImpl<MarketplaceInner>> * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MarketplaceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MarketplaceInner>>> listSinglePageAsync(final String filter, final Integer top, final String skiptoken) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), filter, top, skiptoken, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MarketplaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MarketplaceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MarketplaceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MarketplaceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MarketplaceInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MarketplaceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MarketplaceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the marketplaces for a scope by billing period and subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param billingPeriodName Billing Period Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MarketplaceInner&gt; object if successful.
     */
    public PagedList<MarketplaceInner> listByBillingPeriod(final String billingPeriodName) {
        ServiceResponse<Page<MarketplaceInner>> response = listByBillingPeriodSinglePageAsync(billingPeriodName).toBlocking().single();
        return new PagedList<MarketplaceInner>(response.body()) {
            @Override
            public Page<MarketplaceInner> nextPage(String nextPageLink) {
                return listByBillingPeriodNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the marketplaces for a scope by billing period and subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param billingPeriodName Billing Period Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MarketplaceInner>> listByBillingPeriodAsync(final String billingPeriodName, final ListOperationCallback<MarketplaceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingPeriodSinglePageAsync(billingPeriodName),
            new Func1<String, Observable<ServiceResponse<Page<MarketplaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MarketplaceInner>>> call(String nextPageLink) {
                    return listByBillingPeriodNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the marketplaces for a scope by billing period and subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param billingPeriodName Billing Period Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MarketplaceInner&gt; object
     */
    public Observable<Page<MarketplaceInner>> listByBillingPeriodAsync(final String billingPeriodName) {
        return listByBillingPeriodWithServiceResponseAsync(billingPeriodName)
            .map(new Func1<ServiceResponse<Page<MarketplaceInner>>, Page<MarketplaceInner>>() {
                @Override
                public Page<MarketplaceInner> call(ServiceResponse<Page<MarketplaceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the marketplaces for a scope by billing period and subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param billingPeriodName Billing Period Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MarketplaceInner&gt; object
     */
    public Observable<ServiceResponse<Page<MarketplaceInner>>> listByBillingPeriodWithServiceResponseAsync(final String billingPeriodName) {
        return listByBillingPeriodSinglePageAsync(billingPeriodName)
            .concatMap(new Func1<ServiceResponse<Page<MarketplaceInner>>, Observable<ServiceResponse<Page<MarketplaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MarketplaceInner>>> call(ServiceResponse<Page<MarketplaceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingPeriodNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the marketplaces for a scope by billing period and subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param billingPeriodName Billing Period Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MarketplaceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MarketplaceInner>>> listByBillingPeriodSinglePageAsync(final String billingPeriodName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (billingPeriodName == null) {
            throw new IllegalArgumentException("Parameter billingPeriodName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        final String skiptoken = null;
        return service.listByBillingPeriod(this.client.subscriptionId(), billingPeriodName, filter, top, skiptoken, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MarketplaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MarketplaceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MarketplaceInner>> result = listByBillingPeriodDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MarketplaceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the marketplaces for a scope by billing period and subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param billingPeriodName Billing Period Name.
     * @param filter May be used to filter marketplaces by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'.
     * @param top May be used to limit the number of results to the most recent N marketplaces.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MarketplaceInner&gt; object if successful.
     */
    public PagedList<MarketplaceInner> listByBillingPeriod(final String billingPeriodName, final String filter, final Integer top, final String skiptoken) {
        ServiceResponse<Page<MarketplaceInner>> response = listByBillingPeriodSinglePageAsync(billingPeriodName, filter, top, skiptoken).toBlocking().single();
        return new PagedList<MarketplaceInner>(response.body()) {
            @Override
            public Page<MarketplaceInner> nextPage(String nextPageLink) {
                return listByBillingPeriodNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the marketplaces for a scope by billing period and subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param billingPeriodName Billing Period Name.
     * @param filter May be used to filter marketplaces by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'.
     * @param top May be used to limit the number of results to the most recent N marketplaces.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MarketplaceInner>> listByBillingPeriodAsync(final String billingPeriodName, final String filter, final Integer top, final String skiptoken, final ListOperationCallback<MarketplaceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingPeriodSinglePageAsync(billingPeriodName, filter, top, skiptoken),
            new Func1<String, Observable<ServiceResponse<Page<MarketplaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MarketplaceInner>>> call(String nextPageLink) {
                    return listByBillingPeriodNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the marketplaces for a scope by billing period and subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param billingPeriodName Billing Period Name.
     * @param filter May be used to filter marketplaces by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'.
     * @param top May be used to limit the number of results to the most recent N marketplaces.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MarketplaceInner&gt; object
     */
    public Observable<Page<MarketplaceInner>> listByBillingPeriodAsync(final String billingPeriodName, final String filter, final Integer top, final String skiptoken) {
        return listByBillingPeriodWithServiceResponseAsync(billingPeriodName, filter, top, skiptoken)
            .map(new Func1<ServiceResponse<Page<MarketplaceInner>>, Page<MarketplaceInner>>() {
                @Override
                public Page<MarketplaceInner> call(ServiceResponse<Page<MarketplaceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the marketplaces for a scope by billing period and subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param billingPeriodName Billing Period Name.
     * @param filter May be used to filter marketplaces by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'.
     * @param top May be used to limit the number of results to the most recent N marketplaces.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MarketplaceInner&gt; object
     */
    public Observable<ServiceResponse<Page<MarketplaceInner>>> listByBillingPeriodWithServiceResponseAsync(final String billingPeriodName, final String filter, final Integer top, final String skiptoken) {
        return listByBillingPeriodSinglePageAsync(billingPeriodName, filter, top, skiptoken)
            .concatMap(new Func1<ServiceResponse<Page<MarketplaceInner>>, Observable<ServiceResponse<Page<MarketplaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MarketplaceInner>>> call(ServiceResponse<Page<MarketplaceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingPeriodNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the marketplaces for a scope by billing period and subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
    ServiceResponse<PageImpl<MarketplaceInner>> * @param billingPeriodName Billing Period Name.
    ServiceResponse<PageImpl<MarketplaceInner>> * @param filter May be used to filter marketplaces by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'.
    ServiceResponse<PageImpl<MarketplaceInner>> * @param top May be used to limit the number of results to the most recent N marketplaces.
    ServiceResponse<PageImpl<MarketplaceInner>> * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MarketplaceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MarketplaceInner>>> listByBillingPeriodSinglePageAsync(final String billingPeriodName, final String filter, final Integer top, final String skiptoken) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (billingPeriodName == null) {
            throw new IllegalArgumentException("Parameter billingPeriodName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByBillingPeriod(this.client.subscriptionId(), billingPeriodName, filter, top, skiptoken, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MarketplaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MarketplaceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MarketplaceInner>> result = listByBillingPeriodDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MarketplaceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MarketplaceInner>> listByBillingPeriodDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MarketplaceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MarketplaceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the marketplaces for a scope by subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MarketplaceInner&gt; object if successful.
     */
    public PagedList<MarketplaceInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<MarketplaceInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<MarketplaceInner>(response.body()) {
            @Override
            public Page<MarketplaceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the marketplaces for a scope by subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MarketplaceInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<MarketplaceInner>> serviceFuture, final ListOperationCallback<MarketplaceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<MarketplaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MarketplaceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the marketplaces for a scope by subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MarketplaceInner&gt; object
     */
    public Observable<Page<MarketplaceInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<MarketplaceInner>>, Page<MarketplaceInner>>() {
                @Override
                public Page<MarketplaceInner> call(ServiceResponse<Page<MarketplaceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the marketplaces for a scope by subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MarketplaceInner&gt; object
     */
    public Observable<ServiceResponse<Page<MarketplaceInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<MarketplaceInner>>, Observable<ServiceResponse<Page<MarketplaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MarketplaceInner>>> call(ServiceResponse<Page<MarketplaceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the marketplaces for a scope by subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
    ServiceResponse<PageImpl<MarketplaceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MarketplaceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MarketplaceInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MarketplaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MarketplaceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MarketplaceInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MarketplaceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MarketplaceInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MarketplaceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MarketplaceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the marketplaces for a scope by billing period and subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MarketplaceInner&gt; object if successful.
     */
    public PagedList<MarketplaceInner> listByBillingPeriodNext(final String nextPageLink) {
        ServiceResponse<Page<MarketplaceInner>> response = listByBillingPeriodNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<MarketplaceInner>(response.body()) {
            @Override
            public Page<MarketplaceInner> nextPage(String nextPageLink) {
                return listByBillingPeriodNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the marketplaces for a scope by billing period and subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MarketplaceInner>> listByBillingPeriodNextAsync(final String nextPageLink, final ServiceFuture<List<MarketplaceInner>> serviceFuture, final ListOperationCallback<MarketplaceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingPeriodNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<MarketplaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MarketplaceInner>>> call(String nextPageLink) {
                    return listByBillingPeriodNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the marketplaces for a scope by billing period and subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MarketplaceInner&gt; object
     */
    public Observable<Page<MarketplaceInner>> listByBillingPeriodNextAsync(final String nextPageLink) {
        return listByBillingPeriodNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<MarketplaceInner>>, Page<MarketplaceInner>>() {
                @Override
                public Page<MarketplaceInner> call(ServiceResponse<Page<MarketplaceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the marketplaces for a scope by billing period and subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MarketplaceInner&gt; object
     */
    public Observable<ServiceResponse<Page<MarketplaceInner>>> listByBillingPeriodNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingPeriodNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<MarketplaceInner>>, Observable<ServiceResponse<Page<MarketplaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MarketplaceInner>>> call(ServiceResponse<Page<MarketplaceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingPeriodNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the marketplaces for a scope by billing period and subscriptionId. Marketplaces are available via this API only for May 1, 2014 or later.
     *
    ServiceResponse<PageImpl<MarketplaceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MarketplaceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MarketplaceInner>>> listByBillingPeriodNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingPeriodNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MarketplaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MarketplaceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MarketplaceInner>> result = listByBillingPeriodNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MarketplaceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MarketplaceInner>> listByBillingPeriodNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MarketplaceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MarketplaceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
