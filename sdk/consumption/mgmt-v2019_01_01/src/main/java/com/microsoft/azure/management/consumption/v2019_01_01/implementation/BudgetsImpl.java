/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.consumption.v2019_01_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.consumption.v2019_01_01.Budgets;
import rx.Completable;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.consumption.v2019_01_01.Budget;

class BudgetsImpl extends WrapperImpl<BudgetsInner> implements Budgets {
    private final ConsumptionManager manager;

    BudgetsImpl(ConsumptionManager manager) {
        super(manager.inner().budgets());
        this.manager = manager;
    }

    public ConsumptionManager manager() {
        return this.manager;
    }

    @Override
    public BudgetImpl define(String name) {
        return wrapModel(name);
    }

    private BudgetImpl wrapModel(BudgetInner inner) {
        return  new BudgetImpl(inner, manager());
    }

    private BudgetImpl wrapModel(String name) {
        return new BudgetImpl(name, this.manager());
    }

    @Override
    public Observable<Budget> getAsync(String scope, String budgetName) {
        BudgetsInner client = this.inner();
        return client.getAsync(scope, budgetName)
        .map(new Func1<BudgetInner, Budget>() {
            @Override
            public Budget call(BudgetInner inner) {
                return new BudgetImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAsync(String scope, String budgetName) {
        BudgetsInner client = this.inner();
        return client.deleteAsync(scope, budgetName).toCompletable();
    }

    @Override
    public Observable<Budget> listAsync(final String scope) {
        BudgetsInner client = this.inner();
        return client.listAsync(scope)
        .flatMapIterable(new Func1<Page<BudgetInner>, Iterable<BudgetInner>>() {
            @Override
            public Iterable<BudgetInner> call(Page<BudgetInner> page) {
                return page.items();
            }
        })
        .map(new Func1<BudgetInner, Budget>() {
            @Override
            public Budget call(BudgetInner inner) {
                return new BudgetImpl(inner, manager());
            }
        });
    }

}
