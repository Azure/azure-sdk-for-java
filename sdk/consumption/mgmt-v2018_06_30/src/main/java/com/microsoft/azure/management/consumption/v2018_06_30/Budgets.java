/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.consumption.v2018_06_30;

import com.microsoft.azure.arm.collection.SupportsCreating;
import com.microsoft.azure.arm.resources.collection.SupportsDeletingByResourceGroup;
import com.microsoft.azure.arm.resources.collection.SupportsBatchDeletion;
import com.microsoft.azure.arm.resources.collection.SupportsGettingByResourceGroup;
import rx.Observable;
import com.microsoft.azure.arm.resources.collection.SupportsListingByResourceGroup;
import com.microsoft.azure.arm.collection.SupportsListing;
import rx.Completable;
import com.microsoft.azure.management.consumption.v2018_06_30.implementation.BudgetInner;
import com.microsoft.azure.management.consumption.v2018_06_30.implementation.BudgetsInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing Budgets.
 */
public interface Budgets extends SupportsCreating<Budget.DefinitionStages.Blank>, SupportsDeletingByResourceGroup, SupportsBatchDeletion, SupportsGettingByResourceGroup<Budget>, SupportsListingByResourceGroup<Budget>, SupportsListing<Budget>, HasInner<BudgetsInner> {
    /**
     * Gets the budget for a subscription by budget name.
     *
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Budget> getAsync(String budgetName);

    /**
     * The operation to create or update a budget. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param budgetName Budget Name.
     * @param parameters Parameters supplied to the Create Budget operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Budget> createOrUpdateAsync(String budgetName, BudgetInner parameters);

    /**
     * The operation to delete a budget.
     *
     * @param budgetName Budget Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteAsync(String budgetName);

}
