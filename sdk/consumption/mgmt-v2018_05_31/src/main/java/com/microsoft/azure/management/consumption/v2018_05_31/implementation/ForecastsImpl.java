/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.consumption.v2018_05_31.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.consumption.v2018_05_31.Forecasts;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.arm.utils.PagedListConverter;
import com.microsoft.azure.management.consumption.v2018_05_31.Forecast;

class ForecastsImpl extends WrapperImpl<ForecastsInner> implements Forecasts {
    private PagedListConverter<ForecastInner, Forecast> converter;
    private final ConsumptionManager manager;

    ForecastsImpl(ConsumptionManager manager) {
        super(manager.inner().forecasts());
        this.manager = manager;
        this.converter = new PagedListConverter<ForecastInner, Forecast>() {
            @Override
            public Observable<Forecast> typeConvertAsync(ForecastInner inner) {
                return Observable.just((Forecast) wrapModel(inner));
            }
        };
    }

    public ConsumptionManager manager() {
        return this.manager;
    }

    private ForecastImpl wrapModel(ForecastInner inner) {
        return  new ForecastImpl(inner, manager());
    }

    @Override
    public PagedList<Forecast> list() {
        ForecastsInner client = this.inner();
        return converter.convert(client.list());
    }

    @Override
    public Observable<Forecast> listAsync() {
        ForecastsInner client = this.inner();
        return client.listAsync()
        .flatMap(new Func1<Page<ForecastInner>, Observable<ForecastInner>>() {
            @Override
            public Observable<ForecastInner> call(Page<ForecastInner> innerPage) {
                return Observable.from(innerPage.items());
            }
        })
        .map(new Func1<ForecastInner, Forecast>() {
            @Override
            public Forecast call(ForecastInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
