// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.consumption.ConsumptionManager;
import com.azure.resourcemanager.consumption.models.Marketplace;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class MarketplacesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"billingPeriodId\":\"vidttgepuslvyjt\",\"usageStart\":\"2021-05-30T23:50:17Z\",\"usageEnd\":\"2021-03-17T17:29:52Z\",\"offerName\":\"iziesfuughtuq\",\"resourceGroup\":\"cjxeygt\",\"additionalInfo\":\"xu\",\"orderNumber\":\"buew\",\"instanceName\":\"s\",\"instanceId\":\"jlxuz\",\"currency\":\"wpusxjbaqehg\",\"unitOfMeasure\":\"hzjqatucoige\",\"isEstimated\":true,\"meterId\":\"a19f9e80-0ced-4d77-b91c-7dfbd47f64b5\",\"subscriptionGuid\":\"6a06a62b-6bf2-4474-9e54-b7507c1aa672\",\"subscriptionName\":\"epbnwgfm\",\"accountName\":\"gcgbjb\",\"departmentName\":\"lfgtdysnaquflqbc\",\"consumedService\":\"hamzjrwdkqze\",\"costCenter\":\"jleziunjx\",\"additionalProperties\":\"zantkwceg\",\"publisherName\":\"mlbnseq\",\"planName\":\"jjvpilguooqja\",\"isRecurringCharge\":false},\"etag\":\"tg\",\"tags\":{\"qacsl\":\"ookjbsahrtdtpde\",\"jkgd\":\"otoebnfxofv\",\"vcopex\":\"razftxejwabmdujt\"},\"id\":\"m\",\"name\":\"urbuhhlkyqltq\",\"type\":\"rogtuwkf\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ConsumptionManager manager = ConsumptionManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Marketplace> response
            = manager.marketplaces().list("ovne", "henlusfnr", 1567868178, "jxtxrdc", com.azure.core.util.Context.NONE);

    }
}
