// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.consumption.models.BudgetComparisonExpression;
import com.azure.resourcemanager.consumption.models.BudgetFilter;
import com.azure.resourcemanager.consumption.models.BudgetFilterProperties;
import com.azure.resourcemanager.consumption.models.BudgetOperatorType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class BudgetFilterTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BudgetFilter model = BinaryData.fromString(
            "{\"and\":[{\"dimensions\":{\"name\":\"zjancuxr\",\"operator\":\"In\",\"values\":[\"bavxbniwdjswzt\",\"dbpgnxytxhp\",\"xbzpfzab\"]},\"tags\":{\"name\":\"cuh\",\"operator\":\"In\",\"values\":[\"ctyqik\"]}},{\"dimensions\":{\"name\":\"bovpl\",\"operator\":\"In\",\"values\":[\"hvgyuguosvmk\",\"ss\"]},\"tags\":{\"name\":\"ukkfplgmgs\",\"operator\":\"In\",\"values\":[\"jzkdeslpvlopwi\"]}},{\"dimensions\":{\"name\":\"ghxpkdw\",\"operator\":\"In\",\"values\":[\"iuebbaumny\",\"upedeojnabckhs\",\"txp\",\"ie\"]},\"tags\":{\"name\":\"fhvpesaps\",\"operator\":\"In\",\"values\":[\"qmhjjdhtld\"]}}],\"dimensions\":{\"name\":\"yzxuutkncw\",\"operator\":\"In\",\"values\":[\"svlxotogtwrup\",\"sx\",\"nmic\",\"kvceoveilovnotyf\"]},\"tags\":{\"name\":\"cnjbkcnxdhbt\",\"operator\":\"In\",\"values\":[\"h\",\"wpn\"]}}")
            .toObject(BudgetFilter.class);
        Assertions.assertEquals("zjancuxr", model.and().get(0).dimensions().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.and().get(0).dimensions().operator());
        Assertions.assertEquals("bavxbniwdjswzt", model.and().get(0).dimensions().values().get(0));
        Assertions.assertEquals("cuh", model.and().get(0).tags().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.and().get(0).tags().operator());
        Assertions.assertEquals("ctyqik", model.and().get(0).tags().values().get(0));
        Assertions.assertEquals("yzxuutkncw", model.dimensions().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.dimensions().operator());
        Assertions.assertEquals("svlxotogtwrup", model.dimensions().values().get(0));
        Assertions.assertEquals("cnjbkcnxdhbt", model.tags().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.tags().operator());
        Assertions.assertEquals("h", model.tags().values().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BudgetFilter model = new BudgetFilter()
            .withAnd(Arrays.asList(
                new BudgetFilterProperties()
                    .withDimensions(new BudgetComparisonExpression().withName("zjancuxr")
                        .withOperator(BudgetOperatorType.IN)
                        .withValues(Arrays.asList("bavxbniwdjswzt", "dbpgnxytxhp", "xbzpfzab")))
                    .withTags(new BudgetComparisonExpression().withName("cuh")
                        .withOperator(BudgetOperatorType.IN)
                        .withValues(Arrays.asList("ctyqik"))),
                new BudgetFilterProperties()
                    .withDimensions(new BudgetComparisonExpression().withName("bovpl")
                        .withOperator(BudgetOperatorType.IN)
                        .withValues(Arrays.asList("hvgyuguosvmk", "ss")))
                    .withTags(new BudgetComparisonExpression().withName("ukkfplgmgs")
                        .withOperator(BudgetOperatorType.IN)
                        .withValues(Arrays.asList("jzkdeslpvlopwi"))),
                new BudgetFilterProperties()
                    .withDimensions(new BudgetComparisonExpression().withName("ghxpkdw")
                        .withOperator(BudgetOperatorType.IN)
                        .withValues(Arrays.asList("iuebbaumny", "upedeojnabckhs", "txp", "ie")))
                    .withTags(new BudgetComparisonExpression().withName("fhvpesaps")
                        .withOperator(BudgetOperatorType.IN)
                        .withValues(Arrays.asList("qmhjjdhtld")))))
            .withDimensions(new BudgetComparisonExpression().withName("yzxuutkncw")
                .withOperator(BudgetOperatorType.IN)
                .withValues(Arrays.asList("svlxotogtwrup", "sx", "nmic", "kvceoveilovnotyf")))
            .withTags(new BudgetComparisonExpression().withName("cnjbkcnxdhbt")
                .withOperator(BudgetOperatorType.IN)
                .withValues(Arrays.asList("h", "wpn")));
        model = BinaryData.fromObject(model).toObject(BudgetFilter.class);
        Assertions.assertEquals("zjancuxr", model.and().get(0).dimensions().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.and().get(0).dimensions().operator());
        Assertions.assertEquals("bavxbniwdjswzt", model.and().get(0).dimensions().values().get(0));
        Assertions.assertEquals("cuh", model.and().get(0).tags().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.and().get(0).tags().operator());
        Assertions.assertEquals("ctyqik", model.and().get(0).tags().values().get(0));
        Assertions.assertEquals("yzxuutkncw", model.dimensions().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.dimensions().operator());
        Assertions.assertEquals("svlxotogtwrup", model.dimensions().values().get(0));
        Assertions.assertEquals("cnjbkcnxdhbt", model.tags().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.tags().operator());
        Assertions.assertEquals("h", model.tags().values().get(0));
    }
}
