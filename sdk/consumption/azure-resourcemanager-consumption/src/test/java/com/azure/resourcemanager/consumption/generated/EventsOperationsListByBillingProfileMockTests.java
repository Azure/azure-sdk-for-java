// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.consumption.ConsumptionManager;
import com.azure.resourcemanager.consumption.models.EventSummary;
import com.azure.resourcemanager.consumption.models.EventType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class EventsOperationsListByBillingProfileMockTests {
    @Test
    public void testListByBillingProfile() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"transactionDate\":\"2021-04-03T20:14:26Z\",\"description\":\"t\",\"newCredit\":{\"currency\":\"mevuafpwzy\"},\"adjustments\":{\"currency\":\"gwltxeqip\"},\"creditExpired\":{\"currency\":\"yimsfayorpr\"},\"charges\":{\"currency\":\"oge\"},\"closedBalance\":{\"currency\":\"nsmjkwynqxaekqs\"},\"eventType\":\"PendingCharges\",\"invoiceNumber\":\"tqpkevmy\",\"billingProfileId\":\"jcrspxklurcclfgx\",\"billingProfileDisplayName\":\"n\",\"lotId\":\"ytzpo\",\"lotSource\":\"wxigpxv\",\"canceledCredit\":{\"currency\":\"aupxvpi\"},\"creditCurrency\":\"aifyzyzeyuubeids\",\"billingCurrency\":\"fytoi\",\"reseller\":{\"resellerId\":\"ygvfltgvdihoyn\",\"resellerDescription\":\"xwetwkdrcyrucpc\"},\"creditExpiredInBillingCurrency\":{\"exchangeRateMonth\":1724722364,\"currency\":\"qumoeno\"},\"newCreditInBillingCurrency\":{\"exchangeRateMonth\":577124089,\"currency\":\"qh\"},\"adjustmentsInBillingCurrency\":{\"exchangeRateMonth\":346313139,\"currency\":\"qkaadlknw\"},\"chargesInBillingCurrency\":{\"exchangeRateMonth\":868430810,\"currency\":\"op\"},\"closedBalanceInBillingCurrency\":{\"exchangeRateMonth\":1147774826,\"currency\":\"rl\"},\"eTag\":\"ucae\"},\"eTag\":\"blkwqpatvbqs\",\"id\":\"tcjb\",\"name\":\"tvivuzqym\",\"type\":\"uo\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ConsumptionManager manager = ConsumptionManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<EventSummary> response = manager.eventsOperations()
            .listByBillingProfile("lxeehuxiq", "zlrayme", "xls", "ihmxrfdsajredn", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("blkwqpatvbqs", response.iterator().next().etag());
        Assertions.assertEquals(EventType.PENDING_CHARGES, response.iterator().next().eventType());
    }
}
