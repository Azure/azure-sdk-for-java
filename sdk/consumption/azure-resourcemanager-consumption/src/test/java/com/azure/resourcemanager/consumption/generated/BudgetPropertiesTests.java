// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.consumption.fluent.models.BudgetProperties;
import com.azure.resourcemanager.consumption.models.BudgetComparisonExpression;
import com.azure.resourcemanager.consumption.models.BudgetFilter;
import com.azure.resourcemanager.consumption.models.BudgetFilterProperties;
import com.azure.resourcemanager.consumption.models.BudgetOperatorType;
import com.azure.resourcemanager.consumption.models.BudgetTimePeriod;
import com.azure.resourcemanager.consumption.models.CategoryType;
import com.azure.resourcemanager.consumption.models.CultureCode;
import com.azure.resourcemanager.consumption.models.Notification;
import com.azure.resourcemanager.consumption.models.OperatorType;
import com.azure.resourcemanager.consumption.models.ThresholdType;
import com.azure.resourcemanager.consumption.models.TimeGrainType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BudgetPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BudgetProperties model = BinaryData.fromString(
            "{\"category\":\"Cost\",\"timeGrain\":\"Annually\",\"timePeriod\":{\"startDate\":\"2021-01-01T20:18:45Z\",\"endDate\":\"2021-11-21T08:10:20Z\"},\"filter\":{\"and\":[{\"dimensions\":{\"name\":\"bin\",\"operator\":\"In\",\"values\":[\"uttmrywnuzoqft\"]},\"tags\":{\"name\":\"qzrnkcqvyxlwhz\",\"operator\":\"In\",\"values\":[\"cohoq\",\"nwvlryavwhheunmm\",\"hgyxzkonoc\"]}},{\"dimensions\":{\"name\":\"oklyaxuconuq\",\"operator\":\"In\",\"values\":[\"kbeype\",\"rmjmwvvjektc\"]},\"tags\":{\"name\":\"enhwlrs\",\"operator\":\"In\",\"values\":[\"zpwv\",\"qdqgbi\",\"ylihkaetckt\",\"fcivfsnkym\"]}},{\"dimensions\":{\"name\":\"tqhjfbebrjcx\",\"operator\":\"In\",\"values\":[\"uwutttxfvjrbi\",\"phxepcyvahf\",\"ljkyqxjvuuj\"]},\"tags\":{\"name\":\"idokgjlj\",\"operator\":\"In\",\"values\":[\"gvcl\",\"bgsncghkjeszzhb\"]}}],\"dimensions\":{\"name\":\"htxfvgxbfsmxnehm\",\"operator\":\"In\",\"values\":[\"cxgod\"]},\"tags\":{\"name\":\"fqkkr\",\"operator\":\"In\",\"values\":[\"ukgri\",\"flz\",\"fbxzpuzycisp\",\"qzahmgkbrp\"]}},\"currentSpend\":{\"unit\":\"ibnuqqkpik\"},\"notifications\":{\"cxy\":{\"enabled\":true,\"operator\":\"GreaterThanOrEqualTo\",\"contactEmails\":[\"qagnbuyn\",\"ijggmebfsiar\",\"utrc\"],\"contactRoles\":[\"azzmhjrunmpxt\"],\"contactGroups\":[\"hrbnlankxmyskpbh\"],\"thresholdType\":\"Forecasted\",\"locale\":\"it-it\"},\"ujwb\":{\"enabled\":false,\"operator\":\"GreaterThanOrEqualTo\",\"contactEmails\":[\"nrs\",\"nlqidybyxczf\"],\"contactRoles\":[\"aaxdbabphlwrq\",\"fkts\",\"hsucoc\"],\"contactGroups\":[\"yazttbtwwrqpue\",\"ckzywbiexzfeyue\"],\"thresholdType\":\"Actual\",\"locale\":\"pt-pt\"}},\"forecastSpend\":{\"unit\":\"lmuzy\"}}")
            .toObject(BudgetProperties.class);
        Assertions.assertEquals(CategoryType.COST, model.category());
        Assertions.assertEquals(TimeGrainType.ANNUALLY, model.timeGrain());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-01T20:18:45Z"), model.timePeriod().startDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-21T08:10:20Z"), model.timePeriod().endDate());
        Assertions.assertEquals("bin", model.filter().and().get(0).dimensions().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.filter().and().get(0).dimensions().operator());
        Assertions.assertEquals("uttmrywnuzoqft", model.filter().and().get(0).dimensions().values().get(0));
        Assertions.assertEquals("qzrnkcqvyxlwhz", model.filter().and().get(0).tags().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.filter().and().get(0).tags().operator());
        Assertions.assertEquals("cohoq", model.filter().and().get(0).tags().values().get(0));
        Assertions.assertEquals("htxfvgxbfsmxnehm", model.filter().dimensions().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.filter().dimensions().operator());
        Assertions.assertEquals("cxgod", model.filter().dimensions().values().get(0));
        Assertions.assertEquals("fqkkr", model.filter().tags().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.filter().tags().operator());
        Assertions.assertEquals("ukgri", model.filter().tags().values().get(0));
        Assertions.assertEquals(true, model.notifications().get("cxy").enabled());
        Assertions.assertEquals(OperatorType.GREATER_THAN_OR_EQUAL_TO, model.notifications().get("cxy").operator());
        Assertions.assertEquals("qagnbuyn", model.notifications().get("cxy").contactEmails().get(0));
        Assertions.assertEquals("azzmhjrunmpxt", model.notifications().get("cxy").contactRoles().get(0));
        Assertions.assertEquals("hrbnlankxmyskpbh", model.notifications().get("cxy").contactGroups().get(0));
        Assertions.assertEquals(ThresholdType.FORECASTED, model.notifications().get("cxy").thresholdType());
        Assertions.assertEquals(CultureCode.IT_IT, model.notifications().get("cxy").locale());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BudgetProperties model = new BudgetProperties().withCategory(CategoryType.COST)
            .withTimeGrain(TimeGrainType.ANNUALLY)
            .withTimePeriod(new BudgetTimePeriod().withStartDate(OffsetDateTime.parse("2021-01-01T20:18:45Z"))
                .withEndDate(OffsetDateTime.parse("2021-11-21T08:10:20Z")))
            .withFilter(new BudgetFilter()
                .withAnd(Arrays.asList(
                    new BudgetFilterProperties()
                        .withDimensions(new BudgetComparisonExpression().withName("bin")
                            .withOperator(BudgetOperatorType.IN)
                            .withValues(Arrays.asList("uttmrywnuzoqft")))
                        .withTags(new BudgetComparisonExpression().withName("qzrnkcqvyxlwhz")
                            .withOperator(BudgetOperatorType.IN)
                            .withValues(Arrays.asList("cohoq", "nwvlryavwhheunmm", "hgyxzkonoc"))),
                    new BudgetFilterProperties()
                        .withDimensions(new BudgetComparisonExpression().withName("oklyaxuconuq")
                            .withOperator(BudgetOperatorType.IN)
                            .withValues(Arrays.asList("kbeype", "rmjmwvvjektc")))
                        .withTags(new BudgetComparisonExpression().withName("enhwlrs")
                            .withOperator(BudgetOperatorType.IN)
                            .withValues(Arrays.asList("zpwv", "qdqgbi", "ylihkaetckt", "fcivfsnkym"))),
                    new BudgetFilterProperties()
                        .withDimensions(new BudgetComparisonExpression().withName("tqhjfbebrjcx")
                            .withOperator(BudgetOperatorType.IN)
                            .withValues(Arrays.asList("uwutttxfvjrbi", "phxepcyvahf", "ljkyqxjvuuj")))
                        .withTags(new BudgetComparisonExpression().withName("idokgjlj")
                            .withOperator(BudgetOperatorType.IN)
                            .withValues(Arrays.asList("gvcl", "bgsncghkjeszzhb")))))
                .withDimensions(new BudgetComparisonExpression().withName("htxfvgxbfsmxnehm")
                    .withOperator(BudgetOperatorType.IN)
                    .withValues(Arrays.asList("cxgod")))
                .withTags(new BudgetComparisonExpression().withName("fqkkr")
                    .withOperator(BudgetOperatorType.IN)
                    .withValues(Arrays.asList("ukgri", "flz", "fbxzpuzycisp", "qzahmgkbrp"))))
            .withNotifications(mapOf("cxy",
                new Notification().withEnabled(true)
                    .withOperator(OperatorType.GREATER_THAN_OR_EQUAL_TO)
                    .withContactEmails(Arrays.asList("qagnbuyn", "ijggmebfsiar", "utrc"))
                    .withContactRoles(Arrays.asList("azzmhjrunmpxt"))
                    .withContactGroups(Arrays.asList("hrbnlankxmyskpbh"))
                    .withThresholdType(ThresholdType.FORECASTED)
                    .withLocale(CultureCode.IT_IT),
                "ujwb",
                new Notification().withEnabled(false)
                    .withOperator(OperatorType.GREATER_THAN_OR_EQUAL_TO)
                    .withContactEmails(Arrays.asList("nrs", "nlqidybyxczf"))
                    .withContactRoles(Arrays.asList("aaxdbabphlwrq", "fkts", "hsucoc"))
                    .withContactGroups(Arrays.asList("yazttbtwwrqpue", "ckzywbiexzfeyue"))
                    .withThresholdType(ThresholdType.ACTUAL)
                    .withLocale(CultureCode.PT_PT)));
        model = BinaryData.fromObject(model).toObject(BudgetProperties.class);
        Assertions.assertEquals(CategoryType.COST, model.category());
        Assertions.assertEquals(TimeGrainType.ANNUALLY, model.timeGrain());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-01T20:18:45Z"), model.timePeriod().startDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-21T08:10:20Z"), model.timePeriod().endDate());
        Assertions.assertEquals("bin", model.filter().and().get(0).dimensions().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.filter().and().get(0).dimensions().operator());
        Assertions.assertEquals("uttmrywnuzoqft", model.filter().and().get(0).dimensions().values().get(0));
        Assertions.assertEquals("qzrnkcqvyxlwhz", model.filter().and().get(0).tags().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.filter().and().get(0).tags().operator());
        Assertions.assertEquals("cohoq", model.filter().and().get(0).tags().values().get(0));
        Assertions.assertEquals("htxfvgxbfsmxnehm", model.filter().dimensions().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.filter().dimensions().operator());
        Assertions.assertEquals("cxgod", model.filter().dimensions().values().get(0));
        Assertions.assertEquals("fqkkr", model.filter().tags().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.filter().tags().operator());
        Assertions.assertEquals("ukgri", model.filter().tags().values().get(0));
        Assertions.assertEquals(true, model.notifications().get("cxy").enabled());
        Assertions.assertEquals(OperatorType.GREATER_THAN_OR_EQUAL_TO, model.notifications().get("cxy").operator());
        Assertions.assertEquals("qagnbuyn", model.notifications().get("cxy").contactEmails().get(0));
        Assertions.assertEquals("azzmhjrunmpxt", model.notifications().get("cxy").contactRoles().get(0));
        Assertions.assertEquals("hrbnlankxmyskpbh", model.notifications().get("cxy").contactGroups().get(0));
        Assertions.assertEquals(ThresholdType.FORECASTED, model.notifications().get("cxy").thresholdType());
        Assertions.assertEquals(CultureCode.IT_IT, model.notifications().get("cxy").locale());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
