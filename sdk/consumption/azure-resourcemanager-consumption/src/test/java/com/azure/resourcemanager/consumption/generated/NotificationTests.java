// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.consumption.models.CultureCode;
import com.azure.resourcemanager.consumption.models.Notification;
import com.azure.resourcemanager.consumption.models.OperatorType;
import com.azure.resourcemanager.consumption.models.ThresholdType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NotificationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Notification model = BinaryData.fromString(
            "{\"enabled\":true,\"operator\":\"GreaterThanOrEqualTo\",\"contactEmails\":[\"frlh\",\"xsbkyvpyca\",\"uzbpzkafku\"],\"contactRoles\":[\"rnwb\",\"ehhseyvjusrts\"],\"contactGroups\":[\"pkdeemaofmxagkvt\",\"elmqk\"],\"thresholdType\":\"Forecasted\",\"locale\":\"en-us\"}")
            .toObject(Notification.class);
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals(OperatorType.GREATER_THAN_OR_EQUAL_TO, model.operator());
        Assertions.assertEquals("frlh", model.contactEmails().get(0));
        Assertions.assertEquals("rnwb", model.contactRoles().get(0));
        Assertions.assertEquals("pkdeemaofmxagkvt", model.contactGroups().get(0));
        Assertions.assertEquals(ThresholdType.FORECASTED, model.thresholdType());
        Assertions.assertEquals(CultureCode.EN_US, model.locale());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Notification model = new Notification().withEnabled(true)
            .withOperator(OperatorType.GREATER_THAN_OR_EQUAL_TO)
            .withContactEmails(Arrays.asList("frlh", "xsbkyvpyca", "uzbpzkafku"))
            .withContactRoles(Arrays.asList("rnwb", "ehhseyvjusrts"))
            .withContactGroups(Arrays.asList("pkdeemaofmxagkvt", "elmqk"))
            .withThresholdType(ThresholdType.FORECASTED)
            .withLocale(CultureCode.EN_US);
        model = BinaryData.fromObject(model).toObject(Notification.class);
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals(OperatorType.GREATER_THAN_OR_EQUAL_TO, model.operator());
        Assertions.assertEquals("frlh", model.contactEmails().get(0));
        Assertions.assertEquals("rnwb", model.contactRoles().get(0));
        Assertions.assertEquals("pkdeemaofmxagkvt", model.contactGroups().get(0));
        Assertions.assertEquals(ThresholdType.FORECASTED, model.thresholdType());
        Assertions.assertEquals(CultureCode.EN_US, model.locale());
    }
}
