// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.consumption.ConsumptionManager;
import com.azure.resourcemanager.consumption.models.Budget;
import com.azure.resourcemanager.consumption.models.BudgetComparisonExpression;
import com.azure.resourcemanager.consumption.models.BudgetFilter;
import com.azure.resourcemanager.consumption.models.BudgetFilterProperties;
import com.azure.resourcemanager.consumption.models.BudgetOperatorType;
import com.azure.resourcemanager.consumption.models.BudgetTimePeriod;
import com.azure.resourcemanager.consumption.models.CategoryType;
import com.azure.resourcemanager.consumption.models.CultureCode;
import com.azure.resourcemanager.consumption.models.Notification;
import com.azure.resourcemanager.consumption.models.OperatorType;
import com.azure.resourcemanager.consumption.models.ThresholdType;
import com.azure.resourcemanager.consumption.models.TimeGrainType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BudgetsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"category\":\"Cost\",\"timeGrain\":\"BillingQuarter\",\"timePeriod\":{\"startDate\":\"2021-05-10T19:40:47Z\",\"endDate\":\"2021-01-14T11:50:35Z\"},\"filter\":{\"and\":[{\"dimensions\":{\"name\":\"kmdyomkxfbvfbh\",\"operator\":\"In\",\"values\":[]},\"tags\":{\"name\":\"rhpw\",\"operator\":\"In\",\"values\":[]}},{\"dimensions\":{\"name\":\"deimawzov\",\"operator\":\"In\",\"values\":[]},\"tags\":{\"name\":\"um\",\"operator\":\"In\",\"values\":[]}},{\"dimensions\":{\"name\":\"jcjcazt\",\"operator\":\"In\",\"values\":[]},\"tags\":{\"name\":\"nsq\",\"operator\":\"In\",\"values\":[]}},{\"dimensions\":{\"name\":\"wcoml\",\"operator\":\"In\",\"values\":[]},\"tags\":{\"name\":\"twvc\",\"operator\":\"In\",\"values\":[]}}],\"dimensions\":{\"name\":\"wka\",\"operator\":\"In\",\"values\":[\"jyfdvlv\",\"b\",\"rnfxtgddp\",\"th\"]},\"tags\":{\"name\":\"n\",\"operator\":\"In\",\"values\":[\"oya\",\"kcoeqswank\",\"t\",\"tmhdroznnhdr\"]}},\"currentSpend\":{\"unit\":\"jcsgguxhemlwy\"},\"notifications\":{\"abaobnslujdjltym\":{\"enabled\":false,\"operator\":\"GreaterThanOrEqualTo\",\"contactEmails\":[\"gfbukklelss\",\"blycsxzujksr\",\"smdesqplpvmjcd\",\"ewbidyvteowxv\"],\"contactRoles\":[\"udeugfsxz\",\"c\"],\"contactGroups\":[\"wkufykhvuhxepm\"],\"thresholdType\":\"Actual\",\"locale\":\"fr-fr\"},\"uugqk\":{\"enabled\":true,\"operator\":\"EqualTo\",\"contactEmails\":[\"uihywart\",\"pphkixkykxds\"],\"contactRoles\":[\"emmucfxh\",\"kkflrmymyincqlhr\",\"s\"],\"contactGroups\":[\"miii\",\"v\"],\"thresholdType\":\"Forecasted\",\"locale\":\"ru-ru\"}},\"forecastSpend\":{\"unit\":\"iowlxteqdptj\"}},\"eTag\":\"dtguk\",\"id\":\"anblwphqlkccu\",\"name\":\"gygqwah\",\"type\":\"iul\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ConsumptionManager manager = ConsumptionManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Budget response = manager.budgets()
            .define("nbatzvi")
            .withExistingScope("dlpnfpubn")
            .withEtag("e")
            .withCategory(CategoryType.COST)
            .withTimeGrain(TimeGrainType.ANNUALLY)
            .withTimePeriod(new BudgetTimePeriod().withStartDate(OffsetDateTime.parse("2021-08-18T20:14:36Z"))
                .withEndDate(OffsetDateTime.parse("2021-11-25T12:22:38Z")))
            .withFilter(new BudgetFilter()
                .withAnd(Arrays.asList(new BudgetFilterProperties()
                    .withDimensions(new BudgetComparisonExpression().withName("ttcjuhplrvkmjc")
                        .withOperator(BudgetOperatorType.IN)
                        .withValues(Arrays.asList()))
                    .withTags(new BudgetComparisonExpression().withName("vlgfgg")
                        .withOperator(BudgetOperatorType.IN)
                        .withValues(Arrays.asList()))))
                .withDimensions(new BudgetComparisonExpression().withName("yylizrz")
                    .withOperator(BudgetOperatorType.IN)
                    .withValues(Arrays.asList("sfxsf", "ztlvtmvagbwidqlv")))
                .withTags(new BudgetComparisonExpression().withName("koveof")
                    .withOperator(BudgetOperatorType.IN)
                    .withValues(Arrays.asList("vjfn", "jmvl", "yzgib"))))
            .withNotifications(mapOf("jzfpafolpymwamx",
                new Notification().withEnabled(true)
                    .withOperator(OperatorType.GREATER_THAN_OR_EQUAL_TO)
                    .withContactEmails(Arrays.asList("zoeovvtzejet", "kl", "tikyj", "zkdbqzolx"))
                    .withContactRoles(Arrays.asList("hqjwtrhtgvg", "pcrrk", "lawjmjsmwrok"))
                    .withContactGroups(Arrays.asList("fzzzwyjafitlhg", "ynuchlgmltxd", "hmoz", "sgzv"))
                    .withThresholdType(ThresholdType.FORECASTED)
                    .withLocale(CultureCode.NB_NO),
                "q",
                new Notification().withEnabled(false)
                    .withOperator(OperatorType.EQUAL_TO)
                    .withContactEmails(Arrays.asList("gpgdphtvdulaj", "lejchcsr"))
                    .withContactRoles(Arrays.asList("nmzlanru", "dwv", "phcnzqtpj", "mqrhvthl"))
                    .withContactGroups(Arrays.asList("dcxsmlz", "hzdtxetlgydlh", "vlnnpx"))
                    .withThresholdType(ThresholdType.FORECASTED)
                    .withLocale(CultureCode.ZH_TW),
                "qjjyslurl",
                new Notification().withEnabled(true)
                    .withOperator(OperatorType.GREATER_THAN)
                    .withContactEmails(Arrays.asList("rbgjekglkl", "yulidwcwvm", "eg"))
                    .withContactRoles(Arrays.asList("fhjirwgdnqzbrfk", "pzhz", "tk", "jcitdigsxcdglj"))
                    .withContactGroups(Arrays.asList("euachtomfl", "ytswfp", "mdgycxn"))
                    .withThresholdType(ThresholdType.ACTUAL)
                    .withLocale(CultureCode.PL_PL),
                "ybmrqbrjbbmp",
                new Notification().withEnabled(true)
                    .withOperator(OperatorType.GREATER_THAN)
                    .withContactEmails(Arrays.asList("kvp", "dwqslsrhmpqvw", "skondcbrwimu"))
                    .withContactRoles(Arrays.asList("josovyrrl"))
                    .withContactGroups(Arrays.asList("sinuqtljqobbpih"))
                    .withThresholdType(ThresholdType.FORECASTED)
                    .withLocale(CultureCode.ZH_TW)))
            .create();

        Assertions.assertEquals("dtguk", response.etag());
        Assertions.assertEquals(CategoryType.COST, response.category());
        Assertions.assertEquals(TimeGrainType.BILLING_QUARTER, response.timeGrain());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-10T19:40:47Z"), response.timePeriod().startDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-14T11:50:35Z"), response.timePeriod().endDate());
        Assertions.assertEquals("kmdyomkxfbvfbh", response.filter().and().get(0).dimensions().name());
        Assertions.assertEquals(BudgetOperatorType.IN, response.filter().and().get(0).dimensions().operator());
        Assertions.assertEquals("rhpw", response.filter().and().get(0).tags().name());
        Assertions.assertEquals(BudgetOperatorType.IN, response.filter().and().get(0).tags().operator());
        Assertions.assertEquals("wka", response.filter().dimensions().name());
        Assertions.assertEquals(BudgetOperatorType.IN, response.filter().dimensions().operator());
        Assertions.assertEquals("jyfdvlv", response.filter().dimensions().values().get(0));
        Assertions.assertEquals("n", response.filter().tags().name());
        Assertions.assertEquals(BudgetOperatorType.IN, response.filter().tags().operator());
        Assertions.assertEquals("oya", response.filter().tags().values().get(0));
        Assertions.assertEquals(false, response.notifications().get("abaobnslujdjltym").enabled());
        Assertions.assertEquals(OperatorType.GREATER_THAN_OR_EQUAL_TO,
            response.notifications().get("abaobnslujdjltym").operator());
        Assertions.assertEquals("gfbukklelss", response.notifications().get("abaobnslujdjltym").contactEmails().get(0));
        Assertions.assertEquals("udeugfsxz", response.notifications().get("abaobnslujdjltym").contactRoles().get(0));
        Assertions.assertEquals("wkufykhvuhxepm",
            response.notifications().get("abaobnslujdjltym").contactGroups().get(0));
        Assertions.assertEquals(ThresholdType.ACTUAL, response.notifications().get("abaobnslujdjltym").thresholdType());
        Assertions.assertEquals(CultureCode.FR_FR, response.notifications().get("abaobnslujdjltym").locale());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
