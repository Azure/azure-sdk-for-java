// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.consumption.ConsumptionManager;
import com.azure.resourcemanager.consumption.models.Budget;
import com.azure.resourcemanager.consumption.models.BudgetOperatorType;
import com.azure.resourcemanager.consumption.models.CategoryType;
import com.azure.resourcemanager.consumption.models.CultureCode;
import com.azure.resourcemanager.consumption.models.OperatorType;
import com.azure.resourcemanager.consumption.models.ThresholdType;
import com.azure.resourcemanager.consumption.models.TimeGrainType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BudgetsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"category\":\"Cost\",\"timeGrain\":\"Monthly\",\"timePeriod\":{\"startDate\":\"2021-11-02T01:12:01Z\",\"endDate\":\"2021-03-06T20:54:18Z\"},\"filter\":{\"and\":[{\"dimensions\":{\"name\":\"dhzbdybwwgb\",\"operator\":\"In\",\"values\":[]},\"tags\":{\"name\":\"bid\",\"operator\":\"In\",\"values\":[]}},{\"dimensions\":{\"name\":\"wffplfmuvapc\",\"operator\":\"In\",\"values\":[]},\"tags\":{\"name\":\"rrvwey\",\"operator\":\"In\",\"values\":[]}}],\"dimensions\":{\"name\":\"yyukphaimmo\",\"operator\":\"In\",\"values\":[\"qboshbra\",\"apyyrmfsvbpavbo\",\"fppdbwnu\",\"gahxkumasjcaa\"]},\"tags\":{\"name\":\"dmmcpugmehqep\",\"operator\":\"In\",\"values\":[\"hbzehewho\",\"hnl\",\"qnbldxe\",\"clgsc\"]}},\"currentSpend\":{\"unit\":\"mkrsrrmoucsofl\"},\"notifications\":{\"wefohecbvo\":{\"enabled\":true,\"operator\":\"EqualTo\",\"contactEmails\":[\"fcaabe\",\"lhbhl\",\"bmxuqib\",\"xtkcudfbsfar\"],\"contactRoles\":[\"owlkjxnqpv\"],\"contactGroups\":[\"stmhqykizmd\",\"saoafcluqvox\",\"ycjimryvwgcwwpbm\",\"gwe\"],\"thresholdType\":\"Actual\",\"locale\":\"en-us\"},\"hvtrrmhwrbfdpyf\":{\"enabled\":true,\"operator\":\"EqualTo\",\"contactEmails\":[\"yqleallklmtk\"],\"contactRoles\":[\"wkxxpvbrdfjmzs\",\"zfhotlh\"],\"contactGroups\":[\"yych\",\"nsjlpjrtws\",\"hv\"],\"thresholdType\":\"Forecasted\",\"locale\":\"nl-nl\"},\"jylmbkzudnigr\":{\"enabled\":false,\"operator\":\"GreaterThan\",\"contactEmails\":[\"vjglrocuyzlwhhme\"],\"contactRoles\":[\"oclu\",\"n\"],\"contactGroups\":[\"emc\",\"jk\",\"mykyujxsglhs\"],\"thresholdType\":\"Actual\",\"locale\":\"sv-se\"}},\"forecastSpend\":{\"unit\":\"tjewlpxuzzj\"}},\"eTag\":\"refqy\",\"id\":\"qotoihiqakydiwfb\",\"name\":\"kwpzdqtvh\",\"type\":\"spodaqax\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ConsumptionManager manager = ConsumptionManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Budget response
            = manager.budgets().getWithResponse("tfgxqbawpcb", "nzqcy", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("refqy", response.etag());
        Assertions.assertEquals(CategoryType.COST, response.category());
        Assertions.assertEquals(TimeGrainType.MONTHLY, response.timeGrain());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-02T01:12:01Z"), response.timePeriod().startDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-06T20:54:18Z"), response.timePeriod().endDate());
        Assertions.assertEquals("dhzbdybwwgb", response.filter().and().get(0).dimensions().name());
        Assertions.assertEquals(BudgetOperatorType.IN, response.filter().and().get(0).dimensions().operator());
        Assertions.assertEquals("bid", response.filter().and().get(0).tags().name());
        Assertions.assertEquals(BudgetOperatorType.IN, response.filter().and().get(0).tags().operator());
        Assertions.assertEquals("yyukphaimmo", response.filter().dimensions().name());
        Assertions.assertEquals(BudgetOperatorType.IN, response.filter().dimensions().operator());
        Assertions.assertEquals("qboshbra", response.filter().dimensions().values().get(0));
        Assertions.assertEquals("dmmcpugmehqep", response.filter().tags().name());
        Assertions.assertEquals(BudgetOperatorType.IN, response.filter().tags().operator());
        Assertions.assertEquals("hbzehewho", response.filter().tags().values().get(0));
        Assertions.assertEquals(true, response.notifications().get("wefohecbvo").enabled());
        Assertions.assertEquals(OperatorType.EQUAL_TO, response.notifications().get("wefohecbvo").operator());
        Assertions.assertEquals("fcaabe", response.notifications().get("wefohecbvo").contactEmails().get(0));
        Assertions.assertEquals("owlkjxnqpv", response.notifications().get("wefohecbvo").contactRoles().get(0));
        Assertions.assertEquals("stmhqykizmd", response.notifications().get("wefohecbvo").contactGroups().get(0));
        Assertions.assertEquals(ThresholdType.ACTUAL, response.notifications().get("wefohecbvo").thresholdType());
        Assertions.assertEquals(CultureCode.EN_US, response.notifications().get("wefohecbvo").locale());
    }
}
