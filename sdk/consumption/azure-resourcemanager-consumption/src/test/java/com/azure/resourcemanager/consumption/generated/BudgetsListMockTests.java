// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.consumption.ConsumptionManager;
import com.azure.resourcemanager.consumption.models.Budget;
import com.azure.resourcemanager.consumption.models.BudgetOperatorType;
import com.azure.resourcemanager.consumption.models.CategoryType;
import com.azure.resourcemanager.consumption.models.CultureCode;
import com.azure.resourcemanager.consumption.models.OperatorType;
import com.azure.resourcemanager.consumption.models.ThresholdType;
import com.azure.resourcemanager.consumption.models.TimeGrainType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BudgetsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"category\":\"Cost\",\"timeGrain\":\"BillingQuarter\",\"timePeriod\":{\"startDate\":\"2021-02-01T12:22:18Z\",\"endDate\":\"2021-02-02T17:25:05Z\"},\"filter\":{\"and\":[{\"dimensions\":{\"name\":\"lxnfuijtkbusqogs\",\"operator\":\"In\",\"values\":[]},\"tags\":{\"name\":\"ayiansharujtji\",\"operator\":\"In\",\"values\":[]}},{\"dimensions\":{\"name\":\"zyjq\",\"operator\":\"In\",\"values\":[]},\"tags\":{\"name\":\"wkpqhjpenuygbq\",\"operator\":\"In\",\"values\":[]}}],\"dimensions\":{\"name\":\"ekewvnqvcdlguauc\",\"operator\":\"In\",\"values\":[\"jwnlax\",\"un\",\"qikczvvita\",\"gx\"]},\"tags\":{\"name\":\"csserxht\",\"operator\":\"In\",\"values\":[\"xhlw\",\"tsjgqrsx\"]}},\"currentSpend\":{\"unit\":\"uuybnchrsz\"},\"notifications\":{\"dlpukhpyrne\":{\"enabled\":false,\"operator\":\"GreaterThan\",\"contactEmails\":[\"lyetndnbfqygg\",\"g\",\"lnlg\"],\"contactRoles\":[\"wahzjmucftbyr\",\"lrohkpig\",\"fusuckzmkwklsno\",\"axmqeqal\"],\"contactGroups\":[\"nhg\",\"ydyynfsvkh\",\"bvqt\"],\"thresholdType\":\"Forecasted\",\"locale\":\"it-it\"},\"lvhhtklnvn\":{\"enabled\":false,\"operator\":\"GreaterThan\",\"contactEmails\":[\"pe\",\"gkhnmgbrouxddbh\",\"hpfpazjzoywjxhp\",\"ulontacnpqwteht\"],\"contactRoles\":[\"rhrljyoogwxhn\"],\"contactGroups\":[\"ugwbsreurfqkf\"],\"thresholdType\":\"Forecasted\",\"locale\":\"zh-tw\"},\"vnsasbcrymodi\":{\"enabled\":false,\"operator\":\"EqualTo\",\"contactEmails\":[\"kyfede\",\"jboslcqxypok\",\"hminqcymczngnbdx\",\"ewuninvud\"],\"contactRoles\":[\"aqdtvqecrqctmxxd\"],\"contactGroups\":[\"mflhuytxzvtznapx\",\"annovvoxczytpr\",\"nwvroevytlyokrr\"],\"thresholdType\":\"Forecasted\",\"locale\":\"ko-kr\"}},\"forecastSpend\":{\"unit\":\"lobdxna\"}},\"eTag\":\"mkmlmvevfx\",\"id\":\"op\",\"name\":\"hbzxli\",\"type\":\"hrdd\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ConsumptionManager manager = ConsumptionManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Budget> response = manager.budgets().list("djk", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("mkmlmvevfx", response.iterator().next().etag());
        Assertions.assertEquals(CategoryType.COST, response.iterator().next().category());
        Assertions.assertEquals(TimeGrainType.BILLING_QUARTER, response.iterator().next().timeGrain());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-01T12:22:18Z"),
            response.iterator().next().timePeriod().startDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-02T17:25:05Z"),
            response.iterator().next().timePeriod().endDate());
        Assertions.assertEquals("lxnfuijtkbusqogs",
            response.iterator().next().filter().and().get(0).dimensions().name());
        Assertions.assertEquals(BudgetOperatorType.IN,
            response.iterator().next().filter().and().get(0).dimensions().operator());
        Assertions.assertEquals("ayiansharujtji", response.iterator().next().filter().and().get(0).tags().name());
        Assertions.assertEquals(BudgetOperatorType.IN,
            response.iterator().next().filter().and().get(0).tags().operator());
        Assertions.assertEquals("ekewvnqvcdlguauc", response.iterator().next().filter().dimensions().name());
        Assertions.assertEquals(BudgetOperatorType.IN, response.iterator().next().filter().dimensions().operator());
        Assertions.assertEquals("jwnlax", response.iterator().next().filter().dimensions().values().get(0));
        Assertions.assertEquals("csserxht", response.iterator().next().filter().tags().name());
        Assertions.assertEquals(BudgetOperatorType.IN, response.iterator().next().filter().tags().operator());
        Assertions.assertEquals("xhlw", response.iterator().next().filter().tags().values().get(0));
        Assertions.assertEquals(false, response.iterator().next().notifications().get("dlpukhpyrne").enabled());
        Assertions.assertEquals(OperatorType.GREATER_THAN,
            response.iterator().next().notifications().get("dlpukhpyrne").operator());
        Assertions.assertEquals("lyetndnbfqygg",
            response.iterator().next().notifications().get("dlpukhpyrne").contactEmails().get(0));
        Assertions.assertEquals("wahzjmucftbyr",
            response.iterator().next().notifications().get("dlpukhpyrne").contactRoles().get(0));
        Assertions.assertEquals("nhg",
            response.iterator().next().notifications().get("dlpukhpyrne").contactGroups().get(0));
        Assertions.assertEquals(ThresholdType.FORECASTED,
            response.iterator().next().notifications().get("dlpukhpyrne").thresholdType());
        Assertions.assertEquals(CultureCode.IT_IT,
            response.iterator().next().notifications().get("dlpukhpyrne").locale());
    }
}
