// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.consumption.fluent.models.BudgetInner;
import com.azure.resourcemanager.consumption.models.BudgetComparisonExpression;
import com.azure.resourcemanager.consumption.models.BudgetFilter;
import com.azure.resourcemanager.consumption.models.BudgetFilterProperties;
import com.azure.resourcemanager.consumption.models.BudgetOperatorType;
import com.azure.resourcemanager.consumption.models.BudgetTimePeriod;
import com.azure.resourcemanager.consumption.models.CategoryType;
import com.azure.resourcemanager.consumption.models.CultureCode;
import com.azure.resourcemanager.consumption.models.Notification;
import com.azure.resourcemanager.consumption.models.OperatorType;
import com.azure.resourcemanager.consumption.models.ThresholdType;
import com.azure.resourcemanager.consumption.models.TimeGrainType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BudgetInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BudgetInner model = BinaryData.fromString(
            "{\"properties\":{\"category\":\"Cost\",\"timeGrain\":\"Annually\",\"timePeriod\":{\"startDate\":\"2021-10-26T09:37:04Z\",\"endDate\":\"2021-02-03T09:21:46Z\"},\"filter\":{\"and\":[{\"dimensions\":{\"name\":\"xyqj\",\"operator\":\"In\",\"values\":[\"attpngjcrcczsq\",\"jh\",\"mdajv\",\"ysou\"]},\"tags\":{\"name\":\"e\",\"operator\":\"In\",\"values\":[\"oaeupfhyhltrpmo\"]}},{\"dimensions\":{\"name\":\"mcmatuokthfuiu\",\"operator\":\"In\",\"values\":[\"sfcpkvxodpuozm\",\"zydagfuaxbezyiuo\",\"ktwh\",\"dxwzywqsmbsurexi\"]},\"tags\":{\"name\":\"ryocfsfksymdd\",\"operator\":\"In\",\"values\":[\"kiiuxhqyudxor\"]}}],\"dimensions\":{\"name\":\"nbpoczvyifqrvkdv\",\"operator\":\"In\",\"values\":[\"lrmv\"]},\"tags\":{\"name\":\"f\",\"operator\":\"In\",\"values\":[\"kpnpulexxbczwtr\"]}},\"currentSpend\":{\"unit\":\"zb\"},\"notifications\":{\"npc\":{\"enabled\":true,\"operator\":\"GreaterThan\",\"contactEmails\":[\"myokacspkwlh\",\"dobpxjmflbvvn\",\"hrk\"],\"contactRoles\":[\"wwzjuqkhrsajiwku\",\"foskghsauuimj\"],\"contactGroups\":[\"ied\",\"ugidyjrr\",\"byao\",\"v\"],\"thresholdType\":\"Forecasted\",\"locale\":\"nb-no\"},\"zsbbzoggigrxwb\":{\"enabled\":true,\"operator\":\"EqualTo\",\"contactEmails\":[\"ohslkevlegg\",\"fbuhfmvfaxkffe\"],\"contactRoles\":[\"hl\"],\"contactGroups\":[\"zy\"],\"thresholdType\":\"Forecasted\",\"locale\":\"en-us\"},\"qjsdpydnfyhxdeo\":{\"enabled\":false,\"operator\":\"EqualTo\",\"contactEmails\":[\"xxjnspydptk\"],\"contactRoles\":[\"kouknvudwtiu\",\"bldngkpoc\"],\"contactGroups\":[\"z\",\"xoegukgjnpiucgy\",\"evqzntypmrbp\"],\"thresholdType\":\"Actual\",\"locale\":\"nl-nl\"}},\"forecastSpend\":{\"unit\":\"cwif\"}},\"eTag\":\"ttgzfbis\",\"id\":\"cbkhajdeyeamdph\",\"name\":\"g\",\"type\":\"lpbuxwgipwhonowk\"}")
            .toObject(BudgetInner.class);
        Assertions.assertEquals("ttgzfbis", model.etag());
        Assertions.assertEquals(CategoryType.COST, model.category());
        Assertions.assertEquals(TimeGrainType.ANNUALLY, model.timeGrain());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-26T09:37:04Z"), model.timePeriod().startDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-03T09:21:46Z"), model.timePeriod().endDate());
        Assertions.assertEquals("xyqj", model.filter().and().get(0).dimensions().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.filter().and().get(0).dimensions().operator());
        Assertions.assertEquals("attpngjcrcczsq", model.filter().and().get(0).dimensions().values().get(0));
        Assertions.assertEquals("e", model.filter().and().get(0).tags().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.filter().and().get(0).tags().operator());
        Assertions.assertEquals("oaeupfhyhltrpmo", model.filter().and().get(0).tags().values().get(0));
        Assertions.assertEquals("nbpoczvyifqrvkdv", model.filter().dimensions().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.filter().dimensions().operator());
        Assertions.assertEquals("lrmv", model.filter().dimensions().values().get(0));
        Assertions.assertEquals("f", model.filter().tags().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.filter().tags().operator());
        Assertions.assertEquals("kpnpulexxbczwtr", model.filter().tags().values().get(0));
        Assertions.assertEquals(true, model.notifications().get("npc").enabled());
        Assertions.assertEquals(OperatorType.GREATER_THAN, model.notifications().get("npc").operator());
        Assertions.assertEquals("myokacspkwlh", model.notifications().get("npc").contactEmails().get(0));
        Assertions.assertEquals("wwzjuqkhrsajiwku", model.notifications().get("npc").contactRoles().get(0));
        Assertions.assertEquals("ied", model.notifications().get("npc").contactGroups().get(0));
        Assertions.assertEquals(ThresholdType.FORECASTED, model.notifications().get("npc").thresholdType());
        Assertions.assertEquals(CultureCode.NB_NO, model.notifications().get("npc").locale());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BudgetInner model
            = new BudgetInner().withEtag("ttgzfbis")
                .withCategory(CategoryType.COST)
                .withTimeGrain(TimeGrainType.ANNUALLY)
                .withTimePeriod(new BudgetTimePeriod().withStartDate(OffsetDateTime.parse("2021-10-26T09:37:04Z"))
                    .withEndDate(OffsetDateTime.parse("2021-02-03T09:21:46Z")))
                .withFilter(
                    new BudgetFilter()
                        .withAnd(Arrays.asList(
                            new BudgetFilterProperties()
                                .withDimensions(new BudgetComparisonExpression().withName("xyqj")
                                    .withOperator(BudgetOperatorType.IN)
                                    .withValues(Arrays.asList("attpngjcrcczsq", "jh", "mdajv", "ysou")))
                                .withTags(new BudgetComparisonExpression().withName("e")
                                    .withOperator(BudgetOperatorType.IN)
                                    .withValues(Arrays.asList("oaeupfhyhltrpmo"))),
                            new BudgetFilterProperties()
                                .withDimensions(new BudgetComparisonExpression().withName("mcmatuokthfuiu")
                                    .withOperator(BudgetOperatorType.IN)
                                    .withValues(Arrays.asList("sfcpkvxodpuozm", "zydagfuaxbezyiuo", "ktwh",
                                        "dxwzywqsmbsurexi")))
                                .withTags(new BudgetComparisonExpression().withName("ryocfsfksymdd")
                                    .withOperator(BudgetOperatorType.IN)
                                    .withValues(Arrays.asList("kiiuxhqyudxor")))))
                        .withDimensions(new BudgetComparisonExpression().withName("nbpoczvyifqrvkdv")
                            .withOperator(BudgetOperatorType.IN)
                            .withValues(Arrays.asList("lrmv")))
                        .withTags(new BudgetComparisonExpression().withName("f")
                            .withOperator(BudgetOperatorType.IN)
                            .withValues(Arrays.asList("kpnpulexxbczwtr"))))
                .withNotifications(mapOf("npc",
                    new Notification().withEnabled(true)
                        .withOperator(OperatorType.GREATER_THAN)
                        .withContactEmails(Arrays.asList("myokacspkwlh", "dobpxjmflbvvn", "hrk"))
                        .withContactRoles(Arrays.asList("wwzjuqkhrsajiwku", "foskghsauuimj"))
                        .withContactGroups(Arrays.asList("ied", "ugidyjrr", "byao", "v"))
                        .withThresholdType(ThresholdType.FORECASTED)
                        .withLocale(CultureCode.NB_NO),
                    "zsbbzoggigrxwb",
                    new Notification().withEnabled(true)
                        .withOperator(OperatorType.EQUAL_TO)
                        .withContactEmails(Arrays.asList("ohslkevlegg", "fbuhfmvfaxkffe"))
                        .withContactRoles(Arrays.asList("hl"))
                        .withContactGroups(Arrays.asList("zy"))
                        .withThresholdType(ThresholdType.FORECASTED)
                        .withLocale(CultureCode.EN_US),
                    "qjsdpydnfyhxdeo",
                    new Notification().withEnabled(false)
                        .withOperator(OperatorType.EQUAL_TO)
                        .withContactEmails(Arrays.asList("xxjnspydptk"))
                        .withContactRoles(Arrays.asList("kouknvudwtiu", "bldngkpoc"))
                        .withContactGroups(Arrays.asList("z", "xoegukgjnpiucgy", "evqzntypmrbp"))
                        .withThresholdType(ThresholdType.ACTUAL)
                        .withLocale(CultureCode.NL_NL)));
        model = BinaryData.fromObject(model).toObject(BudgetInner.class);
        Assertions.assertEquals("ttgzfbis", model.etag());
        Assertions.assertEquals(CategoryType.COST, model.category());
        Assertions.assertEquals(TimeGrainType.ANNUALLY, model.timeGrain());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-26T09:37:04Z"), model.timePeriod().startDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-03T09:21:46Z"), model.timePeriod().endDate());
        Assertions.assertEquals("xyqj", model.filter().and().get(0).dimensions().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.filter().and().get(0).dimensions().operator());
        Assertions.assertEquals("attpngjcrcczsq", model.filter().and().get(0).dimensions().values().get(0));
        Assertions.assertEquals("e", model.filter().and().get(0).tags().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.filter().and().get(0).tags().operator());
        Assertions.assertEquals("oaeupfhyhltrpmo", model.filter().and().get(0).tags().values().get(0));
        Assertions.assertEquals("nbpoczvyifqrvkdv", model.filter().dimensions().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.filter().dimensions().operator());
        Assertions.assertEquals("lrmv", model.filter().dimensions().values().get(0));
        Assertions.assertEquals("f", model.filter().tags().name());
        Assertions.assertEquals(BudgetOperatorType.IN, model.filter().tags().operator());
        Assertions.assertEquals("kpnpulexxbczwtr", model.filter().tags().values().get(0));
        Assertions.assertEquals(true, model.notifications().get("npc").enabled());
        Assertions.assertEquals(OperatorType.GREATER_THAN, model.notifications().get("npc").operator());
        Assertions.assertEquals("myokacspkwlh", model.notifications().get("npc").contactEmails().get(0));
        Assertions.assertEquals("wwzjuqkhrsajiwku", model.notifications().get("npc").contactRoles().get(0));
        Assertions.assertEquals("ied", model.notifications().get("npc").contactGroups().get(0));
        Assertions.assertEquals(ThresholdType.FORECASTED, model.notifications().get("npc").thresholdType());
        Assertions.assertEquals(CultureCode.NB_NO, model.notifications().get("npc").locale());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
