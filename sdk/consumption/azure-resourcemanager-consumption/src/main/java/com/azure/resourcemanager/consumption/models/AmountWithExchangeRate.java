// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * The amount with exchange rate.
 */
@Immutable
public final class AmountWithExchangeRate extends Amount {
    /*
     * The exchange rate.
     */
    private BigDecimal exchangeRate;

    /*
     * The exchange rate month.
     */
    private Integer exchangeRateMonth;

    /*
     * Amount.
     */
    private BigDecimal value;

    /*
     * Amount currency.
     */
    private String currency;

    /**
     * Creates an instance of AmountWithExchangeRate class.
     */
    public AmountWithExchangeRate() {
    }

    /**
     * Get the exchangeRate property: The exchange rate.
     * 
     * @return the exchangeRate value.
     */
    public BigDecimal exchangeRate() {
        return this.exchangeRate;
    }

    /**
     * Get the exchangeRateMonth property: The exchange rate month.
     * 
     * @return the exchangeRateMonth value.
     */
    public Integer exchangeRateMonth() {
        return this.exchangeRateMonth;
    }

    /**
     * Get the value property: Amount.
     * 
     * @return the value value.
     */
    @Override
    public BigDecimal value() {
        return this.value;
    }

    /**
     * Get the currency property: Amount currency.
     * 
     * @return the currency value.
     */
    @Override
    public String currency() {
        return this.currency;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AmountWithExchangeRate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AmountWithExchangeRate if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AmountWithExchangeRate.
     */
    public static AmountWithExchangeRate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AmountWithExchangeRate deserializedAmountWithExchangeRate = new AmountWithExchangeRate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("currency".equals(fieldName)) {
                    deserializedAmountWithExchangeRate.currency = reader.getString();
                } else if ("value".equals(fieldName)) {
                    deserializedAmountWithExchangeRate.value
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("exchangeRate".equals(fieldName)) {
                    deserializedAmountWithExchangeRate.exchangeRate
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("exchangeRateMonth".equals(fieldName)) {
                    deserializedAmountWithExchangeRate.exchangeRateMonth = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAmountWithExchangeRate;
        });
    }
}
