// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.consumption.models.Amount;
import com.azure.resourcemanager.consumption.models.CreditBalanceSummary;
import com.azure.resourcemanager.consumption.models.Reseller;
import java.io.IOException;

/**
 * The properties of the credit summary.
 */
@Immutable
public final class CreditSummaryProperties implements JsonSerializable<CreditSummaryProperties> {
    /*
     * Summary of balances associated with this credit summary.
     */
    private CreditBalanceSummary balanceSummary;

    /*
     * Pending credit adjustments.
     */
    private Amount pendingCreditAdjustments;

    /*
     * Expired credit.
     */
    private Amount expiredCredit;

    /*
     * Pending eligible charges.
     */
    private Amount pendingEligibleCharges;

    /*
     * The credit currency.
     */
    private String creditCurrency;

    /*
     * The billing currency.
     */
    private String billingCurrency;

    /*
     * Credit's reseller.
     */
    private Reseller reseller;

    /*
     * The eTag for the resource.
     */
    private String etag;

    /**
     * Creates an instance of CreditSummaryProperties class.
     */
    public CreditSummaryProperties() {
    }

    /**
     * Get the balanceSummary property: Summary of balances associated with this credit summary.
     * 
     * @return the balanceSummary value.
     */
    public CreditBalanceSummary balanceSummary() {
        return this.balanceSummary;
    }

    /**
     * Get the pendingCreditAdjustments property: Pending credit adjustments.
     * 
     * @return the pendingCreditAdjustments value.
     */
    public Amount pendingCreditAdjustments() {
        return this.pendingCreditAdjustments;
    }

    /**
     * Get the expiredCredit property: Expired credit.
     * 
     * @return the expiredCredit value.
     */
    public Amount expiredCredit() {
        return this.expiredCredit;
    }

    /**
     * Get the pendingEligibleCharges property: Pending eligible charges.
     * 
     * @return the pendingEligibleCharges value.
     */
    public Amount pendingEligibleCharges() {
        return this.pendingEligibleCharges;
    }

    /**
     * Get the creditCurrency property: The credit currency.
     * 
     * @return the creditCurrency value.
     */
    public String creditCurrency() {
        return this.creditCurrency;
    }

    /**
     * Get the billingCurrency property: The billing currency.
     * 
     * @return the billingCurrency value.
     */
    public String billingCurrency() {
        return this.billingCurrency;
    }

    /**
     * Get the reseller property: Credit's reseller.
     * 
     * @return the reseller value.
     */
    public Reseller reseller() {
        return this.reseller;
    }

    /**
     * Get the etag property: The eTag for the resource.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (balanceSummary() != null) {
            balanceSummary().validate();
        }
        if (pendingCreditAdjustments() != null) {
            pendingCreditAdjustments().validate();
        }
        if (expiredCredit() != null) {
            expiredCredit().validate();
        }
        if (pendingEligibleCharges() != null) {
            pendingEligibleCharges().validate();
        }
        if (reseller() != null) {
            reseller().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreditSummaryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreditSummaryProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CreditSummaryProperties.
     */
    public static CreditSummaryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CreditSummaryProperties deserializedCreditSummaryProperties = new CreditSummaryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("balanceSummary".equals(fieldName)) {
                    deserializedCreditSummaryProperties.balanceSummary = CreditBalanceSummary.fromJson(reader);
                } else if ("pendingCreditAdjustments".equals(fieldName)) {
                    deserializedCreditSummaryProperties.pendingCreditAdjustments = Amount.fromJson(reader);
                } else if ("expiredCredit".equals(fieldName)) {
                    deserializedCreditSummaryProperties.expiredCredit = Amount.fromJson(reader);
                } else if ("pendingEligibleCharges".equals(fieldName)) {
                    deserializedCreditSummaryProperties.pendingEligibleCharges = Amount.fromJson(reader);
                } else if ("creditCurrency".equals(fieldName)) {
                    deserializedCreditSummaryProperties.creditCurrency = reader.getString();
                } else if ("billingCurrency".equals(fieldName)) {
                    deserializedCreditSummaryProperties.billingCurrency = reader.getString();
                } else if ("reseller".equals(fieldName)) {
                    deserializedCreditSummaryProperties.reseller = Reseller.fromJson(reader);
                } else if ("eTag".equals(fieldName)) {
                    deserializedCreditSummaryProperties.etag = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCreditSummaryProperties;
        });
    }
}
