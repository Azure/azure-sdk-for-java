// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;

/**
 * The properties of the marketplace usage detail.
 */
@Immutable
public final class MarketplaceProperties implements JsonSerializable<MarketplaceProperties> {
    /*
     * The id of the billing period resource that the usage belongs to.
     */
    private String billingPeriodId;

    /*
     * The start of the date time range covered by the usage detail.
     */
    private OffsetDateTime usageStart;

    /*
     * The end of the date time range covered by the usage detail.
     */
    private OffsetDateTime usageEnd;

    /*
     * The marketplace resource rate.
     */
    private BigDecimal resourceRate;

    /*
     * The type of offer.
     */
    private String offerName;

    /*
     * The name of resource group.
     */
    private String resourceGroup;

    /*
     * Additional information.
     */
    private String additionalInfo;

    /*
     * The order number.
     */
    private String orderNumber;

    /*
     * The name of the resource instance that the usage is about.
     */
    private String instanceName;

    /*
     * The uri of the resource instance that the usage is about.
     */
    private String instanceId;

    /*
     * The ISO currency in which the meter is charged, for example, USD.
     */
    private String currency;

    /*
     * The quantity of usage.
     */
    private BigDecimal consumedQuantity;

    /*
     * The unit of measure.
     */
    private String unitOfMeasure;

    /*
     * The amount of cost before tax.
     */
    private BigDecimal pretaxCost;

    /*
     * The estimated usage is subject to change.
     */
    private Boolean isEstimated;

    /*
     * The meter id (GUID).
     */
    private UUID meterId;

    /*
     * Subscription guid.
     */
    private UUID subscriptionGuid;

    /*
     * Subscription name.
     */
    private String subscriptionName;

    /*
     * Account name.
     */
    private String accountName;

    /*
     * Department name.
     */
    private String departmentName;

    /*
     * Consumed service name.
     */
    private String consumedService;

    /*
     * The cost center of this department if it is a department and a costcenter exists
     */
    private String costCenter;

    /*
     * Additional details of this usage item. By default this is not populated, unless it's specified in $expand.
     */
    private String additionalProperties;

    /*
     * The name of publisher.
     */
    private String publisherName;

    /*
     * The name of plan.
     */
    private String planName;

    /*
     * Flag indicating whether this is a recurring charge or not.
     */
    private Boolean isRecurringCharge;

    /**
     * Creates an instance of MarketplaceProperties class.
     */
    public MarketplaceProperties() {
    }

    /**
     * Get the billingPeriodId property: The id of the billing period resource that the usage belongs to.
     * 
     * @return the billingPeriodId value.
     */
    public String billingPeriodId() {
        return this.billingPeriodId;
    }

    /**
     * Get the usageStart property: The start of the date time range covered by the usage detail.
     * 
     * @return the usageStart value.
     */
    public OffsetDateTime usageStart() {
        return this.usageStart;
    }

    /**
     * Get the usageEnd property: The end of the date time range covered by the usage detail.
     * 
     * @return the usageEnd value.
     */
    public OffsetDateTime usageEnd() {
        return this.usageEnd;
    }

    /**
     * Get the resourceRate property: The marketplace resource rate.
     * 
     * @return the resourceRate value.
     */
    public BigDecimal resourceRate() {
        return this.resourceRate;
    }

    /**
     * Get the offerName property: The type of offer.
     * 
     * @return the offerName value.
     */
    public String offerName() {
        return this.offerName;
    }

    /**
     * Get the resourceGroup property: The name of resource group.
     * 
     * @return the resourceGroup value.
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }

    /**
     * Get the additionalInfo property: Additional information.
     * 
     * @return the additionalInfo value.
     */
    public String additionalInfo() {
        return this.additionalInfo;
    }

    /**
     * Get the orderNumber property: The order number.
     * 
     * @return the orderNumber value.
     */
    public String orderNumber() {
        return this.orderNumber;
    }

    /**
     * Get the instanceName property: The name of the resource instance that the usage is about.
     * 
     * @return the instanceName value.
     */
    public String instanceName() {
        return this.instanceName;
    }

    /**
     * Get the instanceId property: The uri of the resource instance that the usage is about.
     * 
     * @return the instanceId value.
     */
    public String instanceId() {
        return this.instanceId;
    }

    /**
     * Get the currency property: The ISO currency in which the meter is charged, for example, USD.
     * 
     * @return the currency value.
     */
    public String currency() {
        return this.currency;
    }

    /**
     * Get the consumedQuantity property: The quantity of usage.
     * 
     * @return the consumedQuantity value.
     */
    public BigDecimal consumedQuantity() {
        return this.consumedQuantity;
    }

    /**
     * Get the unitOfMeasure property: The unit of measure.
     * 
     * @return the unitOfMeasure value.
     */
    public String unitOfMeasure() {
        return this.unitOfMeasure;
    }

    /**
     * Get the pretaxCost property: The amount of cost before tax.
     * 
     * @return the pretaxCost value.
     */
    public BigDecimal pretaxCost() {
        return this.pretaxCost;
    }

    /**
     * Get the isEstimated property: The estimated usage is subject to change.
     * 
     * @return the isEstimated value.
     */
    public Boolean isEstimated() {
        return this.isEstimated;
    }

    /**
     * Get the meterId property: The meter id (GUID).
     * 
     * @return the meterId value.
     */
    public UUID meterId() {
        return this.meterId;
    }

    /**
     * Get the subscriptionGuid property: Subscription guid.
     * 
     * @return the subscriptionGuid value.
     */
    public UUID subscriptionGuid() {
        return this.subscriptionGuid;
    }

    /**
     * Get the subscriptionName property: Subscription name.
     * 
     * @return the subscriptionName value.
     */
    public String subscriptionName() {
        return this.subscriptionName;
    }

    /**
     * Get the accountName property: Account name.
     * 
     * @return the accountName value.
     */
    public String accountName() {
        return this.accountName;
    }

    /**
     * Get the departmentName property: Department name.
     * 
     * @return the departmentName value.
     */
    public String departmentName() {
        return this.departmentName;
    }

    /**
     * Get the consumedService property: Consumed service name.
     * 
     * @return the consumedService value.
     */
    public String consumedService() {
        return this.consumedService;
    }

    /**
     * Get the costCenter property: The cost center of this department if it is a department and a costcenter exists.
     * 
     * @return the costCenter value.
     */
    public String costCenter() {
        return this.costCenter;
    }

    /**
     * Get the additionalProperties property: Additional details of this usage item. By default this is not populated,
     * unless it's specified in $expand.
     * 
     * @return the additionalProperties value.
     */
    public String additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Get the publisherName property: The name of publisher.
     * 
     * @return the publisherName value.
     */
    public String publisherName() {
        return this.publisherName;
    }

    /**
     * Get the planName property: The name of plan.
     * 
     * @return the planName value.
     */
    public String planName() {
        return this.planName;
    }

    /**
     * Get the isRecurringCharge property: Flag indicating whether this is a recurring charge or not.
     * 
     * @return the isRecurringCharge value.
     */
    public Boolean isRecurringCharge() {
        return this.isRecurringCharge;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MarketplaceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MarketplaceProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MarketplaceProperties.
     */
    public static MarketplaceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MarketplaceProperties deserializedMarketplaceProperties = new MarketplaceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("billingPeriodId".equals(fieldName)) {
                    deserializedMarketplaceProperties.billingPeriodId = reader.getString();
                } else if ("usageStart".equals(fieldName)) {
                    deserializedMarketplaceProperties.usageStart = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("usageEnd".equals(fieldName)) {
                    deserializedMarketplaceProperties.usageEnd = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("resourceRate".equals(fieldName)) {
                    deserializedMarketplaceProperties.resourceRate
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("offerName".equals(fieldName)) {
                    deserializedMarketplaceProperties.offerName = reader.getString();
                } else if ("resourceGroup".equals(fieldName)) {
                    deserializedMarketplaceProperties.resourceGroup = reader.getString();
                } else if ("additionalInfo".equals(fieldName)) {
                    deserializedMarketplaceProperties.additionalInfo = reader.getString();
                } else if ("orderNumber".equals(fieldName)) {
                    deserializedMarketplaceProperties.orderNumber = reader.getString();
                } else if ("instanceName".equals(fieldName)) {
                    deserializedMarketplaceProperties.instanceName = reader.getString();
                } else if ("instanceId".equals(fieldName)) {
                    deserializedMarketplaceProperties.instanceId = reader.getString();
                } else if ("currency".equals(fieldName)) {
                    deserializedMarketplaceProperties.currency = reader.getString();
                } else if ("consumedQuantity".equals(fieldName)) {
                    deserializedMarketplaceProperties.consumedQuantity
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("unitOfMeasure".equals(fieldName)) {
                    deserializedMarketplaceProperties.unitOfMeasure = reader.getString();
                } else if ("pretaxCost".equals(fieldName)) {
                    deserializedMarketplaceProperties.pretaxCost
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("isEstimated".equals(fieldName)) {
                    deserializedMarketplaceProperties.isEstimated = reader.getNullable(JsonReader::getBoolean);
                } else if ("meterId".equals(fieldName)) {
                    deserializedMarketplaceProperties.meterId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("subscriptionGuid".equals(fieldName)) {
                    deserializedMarketplaceProperties.subscriptionGuid
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("subscriptionName".equals(fieldName)) {
                    deserializedMarketplaceProperties.subscriptionName = reader.getString();
                } else if ("accountName".equals(fieldName)) {
                    deserializedMarketplaceProperties.accountName = reader.getString();
                } else if ("departmentName".equals(fieldName)) {
                    deserializedMarketplaceProperties.departmentName = reader.getString();
                } else if ("consumedService".equals(fieldName)) {
                    deserializedMarketplaceProperties.consumedService = reader.getString();
                } else if ("costCenter".equals(fieldName)) {
                    deserializedMarketplaceProperties.costCenter = reader.getString();
                } else if ("additionalProperties".equals(fieldName)) {
                    deserializedMarketplaceProperties.additionalProperties = reader.getString();
                } else if ("publisherName".equals(fieldName)) {
                    deserializedMarketplaceProperties.publisherName = reader.getString();
                } else if ("planName".equals(fieldName)) {
                    deserializedMarketplaceProperties.planName = reader.getString();
                } else if ("isRecurringCharge".equals(fieldName)) {
                    deserializedMarketplaceProperties.isRecurringCharge = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMarketplaceProperties;
        });
    }
}
