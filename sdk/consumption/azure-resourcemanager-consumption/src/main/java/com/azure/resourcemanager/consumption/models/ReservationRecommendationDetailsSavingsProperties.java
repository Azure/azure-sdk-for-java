// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Details of the estimated savings.
 */
@Fluent
public final class ReservationRecommendationDetailsSavingsProperties
    implements JsonSerializable<ReservationRecommendationDetailsSavingsProperties> {
    /*
     * List of calculated savings.
     */
    private List<ReservationRecommendationDetailsCalculatedSavingsProperties> calculatedSavings;

    /*
     * Number of days of usage to look back used for computing the recommendation.
     */
    private Integer lookBackPeriod;

    /*
     * Number of recommended units of the resource.
     */
    private Float recommendedQuantity;

    /*
     * Term period of the reservation, ex: P1Y or P3Y.
     */
    private String reservationOrderTerm;

    /*
     * Type of savings, ex: instance.
     */
    private String savingsType;

    /*
     * Measurement unit ex: hour etc.
     */
    private String unitOfMeasure;

    /**
     * Creates an instance of ReservationRecommendationDetailsSavingsProperties class.
     */
    public ReservationRecommendationDetailsSavingsProperties() {
    }

    /**
     * Get the calculatedSavings property: List of calculated savings.
     * 
     * @return the calculatedSavings value.
     */
    public List<ReservationRecommendationDetailsCalculatedSavingsProperties> calculatedSavings() {
        return this.calculatedSavings;
    }

    /**
     * Set the calculatedSavings property: List of calculated savings.
     * 
     * @param calculatedSavings the calculatedSavings value to set.
     * @return the ReservationRecommendationDetailsSavingsProperties object itself.
     */
    public ReservationRecommendationDetailsSavingsProperties
        withCalculatedSavings(List<ReservationRecommendationDetailsCalculatedSavingsProperties> calculatedSavings) {
        this.calculatedSavings = calculatedSavings;
        return this;
    }

    /**
     * Get the lookBackPeriod property: Number of days of usage to look back used for computing the recommendation.
     * 
     * @return the lookBackPeriod value.
     */
    public Integer lookBackPeriod() {
        return this.lookBackPeriod;
    }

    /**
     * Get the recommendedQuantity property: Number of recommended units of the resource.
     * 
     * @return the recommendedQuantity value.
     */
    public Float recommendedQuantity() {
        return this.recommendedQuantity;
    }

    /**
     * Get the reservationOrderTerm property: Term period of the reservation, ex: P1Y or P3Y.
     * 
     * @return the reservationOrderTerm value.
     */
    public String reservationOrderTerm() {
        return this.reservationOrderTerm;
    }

    /**
     * Get the savingsType property: Type of savings, ex: instance.
     * 
     * @return the savingsType value.
     */
    public String savingsType() {
        return this.savingsType;
    }

    /**
     * Get the unitOfMeasure property: Measurement unit ex: hour etc.
     * 
     * @return the unitOfMeasure value.
     */
    public String unitOfMeasure() {
        return this.unitOfMeasure;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (calculatedSavings() != null) {
            calculatedSavings().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("calculatedSavings", this.calculatedSavings,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReservationRecommendationDetailsSavingsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReservationRecommendationDetailsSavingsProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReservationRecommendationDetailsSavingsProperties.
     */
    public static ReservationRecommendationDetailsSavingsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReservationRecommendationDetailsSavingsProperties deserializedReservationRecommendationDetailsSavingsProperties
                = new ReservationRecommendationDetailsSavingsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("calculatedSavings".equals(fieldName)) {
                    List<ReservationRecommendationDetailsCalculatedSavingsProperties> calculatedSavings
                        = reader.readArray(
                            reader1 -> ReservationRecommendationDetailsCalculatedSavingsProperties.fromJson(reader1));
                    deserializedReservationRecommendationDetailsSavingsProperties.calculatedSavings = calculatedSavings;
                } else if ("lookBackPeriod".equals(fieldName)) {
                    deserializedReservationRecommendationDetailsSavingsProperties.lookBackPeriod
                        = reader.getNullable(JsonReader::getInt);
                } else if ("recommendedQuantity".equals(fieldName)) {
                    deserializedReservationRecommendationDetailsSavingsProperties.recommendedQuantity
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("reservationOrderTerm".equals(fieldName)) {
                    deserializedReservationRecommendationDetailsSavingsProperties.reservationOrderTerm
                        = reader.getString();
                } else if ("savingsType".equals(fieldName)) {
                    deserializedReservationRecommendationDetailsSavingsProperties.savingsType = reader.getString();
                } else if ("unitOfMeasure".equals(fieldName)) {
                    deserializedReservationRecommendationDetailsSavingsProperties.unitOfMeasure = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReservationRecommendationDetailsSavingsProperties;
        });
    }
}
