// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.consumption.models.BalancePropertiesAdjustmentDetailsItem;
import com.azure.resourcemanager.consumption.models.BalancePropertiesNewPurchasesDetailsItem;
import com.azure.resourcemanager.consumption.models.BillingFrequency;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;

/**
 * The properties of the balance.
 */
@Fluent
public final class BalanceProperties implements JsonSerializable<BalanceProperties> {
    /*
     * The ISO currency in which the meter is charged, for example, USD.
     */
    private String currency;

    /*
     * The beginning balance for the billing period.
     */
    private BigDecimal beginningBalance;

    /*
     * The ending balance for the billing period (for open periods this will be updated daily).
     */
    private BigDecimal endingBalance;

    /*
     * Total new purchase amount.
     */
    private BigDecimal newPurchases;

    /*
     * Total adjustment amount.
     */
    private BigDecimal adjustments;

    /*
     * Total Commitment usage.
     */
    private BigDecimal utilized;

    /*
     * Overage for Azure services.
     */
    private BigDecimal serviceOverage;

    /*
     * Charges Billed separately.
     */
    private BigDecimal chargesBilledSeparately;

    /*
     * serviceOverage + chargesBilledSeparately.
     */
    private BigDecimal totalOverage;

    /*
     * Azure service commitment + total Overage.
     */
    private BigDecimal totalUsage;

    /*
     * Total charges for Azure Marketplace.
     */
    private BigDecimal azureMarketplaceServiceCharges;

    /*
     * The billing frequency.
     */
    private BillingFrequency billingFrequency;

    /*
     * Price is hidden or not.
     */
    private Boolean priceHidden;

    /*
     * List of new purchases.
     */
    private List<BalancePropertiesNewPurchasesDetailsItem> newPurchasesDetails;

    /*
     * List of Adjustments (Promo credit, SIE credit etc.).
     */
    private List<BalancePropertiesAdjustmentDetailsItem> adjustmentDetails;

    /**
     * Creates an instance of BalanceProperties class.
     */
    public BalanceProperties() {
    }

    /**
     * Get the currency property: The ISO currency in which the meter is charged, for example, USD.
     * 
     * @return the currency value.
     */
    public String currency() {
        return this.currency;
    }

    /**
     * Get the beginningBalance property: The beginning balance for the billing period.
     * 
     * @return the beginningBalance value.
     */
    public BigDecimal beginningBalance() {
        return this.beginningBalance;
    }

    /**
     * Get the endingBalance property: The ending balance for the billing period (for open periods this will be updated
     * daily).
     * 
     * @return the endingBalance value.
     */
    public BigDecimal endingBalance() {
        return this.endingBalance;
    }

    /**
     * Get the newPurchases property: Total new purchase amount.
     * 
     * @return the newPurchases value.
     */
    public BigDecimal newPurchases() {
        return this.newPurchases;
    }

    /**
     * Get the adjustments property: Total adjustment amount.
     * 
     * @return the adjustments value.
     */
    public BigDecimal adjustments() {
        return this.adjustments;
    }

    /**
     * Get the utilized property: Total Commitment usage.
     * 
     * @return the utilized value.
     */
    public BigDecimal utilized() {
        return this.utilized;
    }

    /**
     * Get the serviceOverage property: Overage for Azure services.
     * 
     * @return the serviceOverage value.
     */
    public BigDecimal serviceOverage() {
        return this.serviceOverage;
    }

    /**
     * Get the chargesBilledSeparately property: Charges Billed separately.
     * 
     * @return the chargesBilledSeparately value.
     */
    public BigDecimal chargesBilledSeparately() {
        return this.chargesBilledSeparately;
    }

    /**
     * Get the totalOverage property: serviceOverage + chargesBilledSeparately.
     * 
     * @return the totalOverage value.
     */
    public BigDecimal totalOverage() {
        return this.totalOverage;
    }

    /**
     * Get the totalUsage property: Azure service commitment + total Overage.
     * 
     * @return the totalUsage value.
     */
    public BigDecimal totalUsage() {
        return this.totalUsage;
    }

    /**
     * Get the azureMarketplaceServiceCharges property: Total charges for Azure Marketplace.
     * 
     * @return the azureMarketplaceServiceCharges value.
     */
    public BigDecimal azureMarketplaceServiceCharges() {
        return this.azureMarketplaceServiceCharges;
    }

    /**
     * Get the billingFrequency property: The billing frequency.
     * 
     * @return the billingFrequency value.
     */
    public BillingFrequency billingFrequency() {
        return this.billingFrequency;
    }

    /**
     * Set the billingFrequency property: The billing frequency.
     * 
     * @param billingFrequency the billingFrequency value to set.
     * @return the BalanceProperties object itself.
     */
    public BalanceProperties withBillingFrequency(BillingFrequency billingFrequency) {
        this.billingFrequency = billingFrequency;
        return this;
    }

    /**
     * Get the priceHidden property: Price is hidden or not.
     * 
     * @return the priceHidden value.
     */
    public Boolean priceHidden() {
        return this.priceHidden;
    }

    /**
     * Get the newPurchasesDetails property: List of new purchases.
     * 
     * @return the newPurchasesDetails value.
     */
    public List<BalancePropertiesNewPurchasesDetailsItem> newPurchasesDetails() {
        return this.newPurchasesDetails;
    }

    /**
     * Get the adjustmentDetails property: List of Adjustments (Promo credit, SIE credit etc.).
     * 
     * @return the adjustmentDetails value.
     */
    public List<BalancePropertiesAdjustmentDetailsItem> adjustmentDetails() {
        return this.adjustmentDetails;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (newPurchasesDetails() != null) {
            newPurchasesDetails().forEach(e -> e.validate());
        }
        if (adjustmentDetails() != null) {
            adjustmentDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("billingFrequency",
            this.billingFrequency == null ? null : this.billingFrequency.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BalanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BalanceProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BalanceProperties.
     */
    public static BalanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BalanceProperties deserializedBalanceProperties = new BalanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("currency".equals(fieldName)) {
                    deserializedBalanceProperties.currency = reader.getString();
                } else if ("beginningBalance".equals(fieldName)) {
                    deserializedBalanceProperties.beginningBalance
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("endingBalance".equals(fieldName)) {
                    deserializedBalanceProperties.endingBalance
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("newPurchases".equals(fieldName)) {
                    deserializedBalanceProperties.newPurchases
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("adjustments".equals(fieldName)) {
                    deserializedBalanceProperties.adjustments
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("utilized".equals(fieldName)) {
                    deserializedBalanceProperties.utilized
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("serviceOverage".equals(fieldName)) {
                    deserializedBalanceProperties.serviceOverage
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("chargesBilledSeparately".equals(fieldName)) {
                    deserializedBalanceProperties.chargesBilledSeparately
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("totalOverage".equals(fieldName)) {
                    deserializedBalanceProperties.totalOverage
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("totalUsage".equals(fieldName)) {
                    deserializedBalanceProperties.totalUsage
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("azureMarketplaceServiceCharges".equals(fieldName)) {
                    deserializedBalanceProperties.azureMarketplaceServiceCharges
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("billingFrequency".equals(fieldName)) {
                    deserializedBalanceProperties.billingFrequency = BillingFrequency.fromString(reader.getString());
                } else if ("priceHidden".equals(fieldName)) {
                    deserializedBalanceProperties.priceHidden = reader.getNullable(JsonReader::getBoolean);
                } else if ("newPurchasesDetails".equals(fieldName)) {
                    List<BalancePropertiesNewPurchasesDetailsItem> newPurchasesDetails
                        = reader.readArray(reader1 -> BalancePropertiesNewPurchasesDetailsItem.fromJson(reader1));
                    deserializedBalanceProperties.newPurchasesDetails = newPurchasesDetails;
                } else if ("adjustmentDetails".equals(fieldName)) {
                    List<BalancePropertiesAdjustmentDetailsItem> adjustmentDetails
                        = reader.readArray(reader1 -> BalancePropertiesAdjustmentDetailsItem.fromJson(reader1));
                    deserializedBalanceProperties.adjustmentDetails = adjustmentDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBalanceProperties;
        });
    }
}
