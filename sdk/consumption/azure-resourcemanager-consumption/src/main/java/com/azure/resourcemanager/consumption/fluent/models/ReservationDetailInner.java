// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.ProxyResource;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * reservation detail resource.
 */
@Immutable
public final class ReservationDetailInner extends ProxyResource {
    /*
     * The properties of the reservation detail.
     */
    private ReservationDetailProperties innerProperties;

    /*
     * The etag for the resource.
     */
    private String etag;

    /*
     * Resource tags.
     */
    private Map<String, String> tags;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ReservationDetailInner class.
     */
    public ReservationDetailInner() {
    }

    /**
     * Get the innerProperties property: The properties of the reservation detail.
     * 
     * @return the innerProperties value.
     */
    private ReservationDetailProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the etag property: The etag for the resource.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the reservationOrderId property: The reservation order ID is the identifier for a reservation purchase. Each
     * reservation order ID represents a single purchase transaction. A reservation order contains reservations. The
     * reservation order specifies the VM size and region for the reservations.
     * 
     * @return the reservationOrderId value.
     */
    public String reservationOrderId() {
        return this.innerProperties() == null ? null : this.innerProperties().reservationOrderId();
    }

    /**
     * Get the instanceFlexibilityRatio property: The instance Flexibility Ratio.
     * 
     * @return the instanceFlexibilityRatio value.
     */
    public String instanceFlexibilityRatio() {
        return this.innerProperties() == null ? null : this.innerProperties().instanceFlexibilityRatio();
    }

    /**
     * Get the instanceFlexibilityGroup property: The instance Flexibility Group.
     * 
     * @return the instanceFlexibilityGroup value.
     */
    public String instanceFlexibilityGroup() {
        return this.innerProperties() == null ? null : this.innerProperties().instanceFlexibilityGroup();
    }

    /**
     * Get the reservationId property: The reservation ID is the identifier of a reservation within a reservation order.
     * Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to
     * which the reservation benefit can be applied to.
     * 
     * @return the reservationId value.
     */
    public String reservationId() {
        return this.innerProperties() == null ? null : this.innerProperties().reservationId();
    }

    /**
     * Get the skuName property: This is the ARM Sku name. It can be used to join with the serviceType field in
     * additional info in usage records.
     * 
     * @return the skuName value.
     */
    public String skuName() {
        return this.innerProperties() == null ? null : this.innerProperties().skuName();
    }

    /**
     * Get the reservedHours property: This is the total hours reserved for the day. E.g. if reservation for 1 instance
     * was made on 1 PM, this will be 11 hours for that day and 24 hours from subsequent days.
     * 
     * @return the reservedHours value.
     */
    public BigDecimal reservedHours() {
        return this.innerProperties() == null ? null : this.innerProperties().reservedHours();
    }

    /**
     * Get the usageDate property: The date on which consumption occurred.
     * 
     * @return the usageDate value.
     */
    public OffsetDateTime usageDate() {
        return this.innerProperties() == null ? null : this.innerProperties().usageDate();
    }

    /**
     * Get the usedHours property: This is the total hours used by the instance.
     * 
     * @return the usedHours value.
     */
    public BigDecimal usedHours() {
        return this.innerProperties() == null ? null : this.innerProperties().usedHours();
    }

    /**
     * Get the instanceId property: This identifier is the name of the resource or the fully qualified Resource ID.
     * 
     * @return the instanceId value.
     */
    public String instanceId() {
        return this.innerProperties() == null ? null : this.innerProperties().instanceId();
    }

    /**
     * Get the totalReservedQuantity property: This is the total count of instances that are reserved for the
     * reservationId.
     * 
     * @return the totalReservedQuantity value.
     */
    public BigDecimal totalReservedQuantity() {
        return this.innerProperties() == null ? null : this.innerProperties().totalReservedQuantity();
    }

    /**
     * Get the kind property: The reservation kind.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.innerProperties() == null ? null : this.innerProperties().kind();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReservationDetailInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReservationDetailInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ReservationDetailInner.
     */
    public static ReservationDetailInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReservationDetailInner deserializedReservationDetailInner = new ReservationDetailInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedReservationDetailInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedReservationDetailInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedReservationDetailInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedReservationDetailInner.innerProperties = ReservationDetailProperties.fromJson(reader);
                } else if ("etag".equals(fieldName)) {
                    deserializedReservationDetailInner.etag = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedReservationDetailInner.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReservationDetailInner;
        });
    }
}
