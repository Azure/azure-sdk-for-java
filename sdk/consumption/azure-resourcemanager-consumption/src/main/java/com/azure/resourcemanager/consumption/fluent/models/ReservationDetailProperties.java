// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;

/**
 * The properties of the reservation detail.
 */
@Immutable
public final class ReservationDetailProperties implements JsonSerializable<ReservationDetailProperties> {
    /*
     * The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a
     * single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM
     * size and region for the reservations.
     */
    private String reservationOrderId;

    /*
     * The instance Flexibility Ratio.
     */
    private String instanceFlexibilityRatio;

    /*
     * The instance Flexibility Group.
     */
    private String instanceFlexibilityGroup;

    /*
     * The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the
     * grouping for applying the benefit scope and also specifies the number of instances to which the reservation
     * benefit can be applied to.
     */
    private String reservationId;

    /*
     * This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.
     */
    private String skuName;

    /*
     * This is the total hours reserved for the day. E.g. if reservation for 1 instance was made on 1 PM, this will be
     * 11 hours for that day and 24 hours from subsequent days.
     */
    private BigDecimal reservedHours;

    /*
     * The date on which consumption occurred.
     */
    private OffsetDateTime usageDate;

    /*
     * This is the total hours used by the instance.
     */
    private BigDecimal usedHours;

    /*
     * This identifier is the name of the resource or the fully qualified Resource ID.
     */
    private String instanceId;

    /*
     * This is the total count of instances that are reserved for the reservationId.
     */
    private BigDecimal totalReservedQuantity;

    /*
     * The reservation kind.
     */
    private String kind;

    /**
     * Creates an instance of ReservationDetailProperties class.
     */
    public ReservationDetailProperties() {
    }

    /**
     * Get the reservationOrderId property: The reservation order ID is the identifier for a reservation purchase. Each
     * reservation order ID represents a single purchase transaction. A reservation order contains reservations. The
     * reservation order specifies the VM size and region for the reservations.
     * 
     * @return the reservationOrderId value.
     */
    public String reservationOrderId() {
        return this.reservationOrderId;
    }

    /**
     * Get the instanceFlexibilityRatio property: The instance Flexibility Ratio.
     * 
     * @return the instanceFlexibilityRatio value.
     */
    public String instanceFlexibilityRatio() {
        return this.instanceFlexibilityRatio;
    }

    /**
     * Get the instanceFlexibilityGroup property: The instance Flexibility Group.
     * 
     * @return the instanceFlexibilityGroup value.
     */
    public String instanceFlexibilityGroup() {
        return this.instanceFlexibilityGroup;
    }

    /**
     * Get the reservationId property: The reservation ID is the identifier of a reservation within a reservation order.
     * Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to
     * which the reservation benefit can be applied to.
     * 
     * @return the reservationId value.
     */
    public String reservationId() {
        return this.reservationId;
    }

    /**
     * Get the skuName property: This is the ARM Sku name. It can be used to join with the serviceType field in
     * additional info in usage records.
     * 
     * @return the skuName value.
     */
    public String skuName() {
        return this.skuName;
    }

    /**
     * Get the reservedHours property: This is the total hours reserved for the day. E.g. if reservation for 1 instance
     * was made on 1 PM, this will be 11 hours for that day and 24 hours from subsequent days.
     * 
     * @return the reservedHours value.
     */
    public BigDecimal reservedHours() {
        return this.reservedHours;
    }

    /**
     * Get the usageDate property: The date on which consumption occurred.
     * 
     * @return the usageDate value.
     */
    public OffsetDateTime usageDate() {
        return this.usageDate;
    }

    /**
     * Get the usedHours property: This is the total hours used by the instance.
     * 
     * @return the usedHours value.
     */
    public BigDecimal usedHours() {
        return this.usedHours;
    }

    /**
     * Get the instanceId property: This identifier is the name of the resource or the fully qualified Resource ID.
     * 
     * @return the instanceId value.
     */
    public String instanceId() {
        return this.instanceId;
    }

    /**
     * Get the totalReservedQuantity property: This is the total count of instances that are reserved for the
     * reservationId.
     * 
     * @return the totalReservedQuantity value.
     */
    public BigDecimal totalReservedQuantity() {
        return this.totalReservedQuantity;
    }

    /**
     * Get the kind property: The reservation kind.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReservationDetailProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReservationDetailProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReservationDetailProperties.
     */
    public static ReservationDetailProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReservationDetailProperties deserializedReservationDetailProperties = new ReservationDetailProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("reservationOrderId".equals(fieldName)) {
                    deserializedReservationDetailProperties.reservationOrderId = reader.getString();
                } else if ("instanceFlexibilityRatio".equals(fieldName)) {
                    deserializedReservationDetailProperties.instanceFlexibilityRatio = reader.getString();
                } else if ("instanceFlexibilityGroup".equals(fieldName)) {
                    deserializedReservationDetailProperties.instanceFlexibilityGroup = reader.getString();
                } else if ("reservationId".equals(fieldName)) {
                    deserializedReservationDetailProperties.reservationId = reader.getString();
                } else if ("skuName".equals(fieldName)) {
                    deserializedReservationDetailProperties.skuName = reader.getString();
                } else if ("reservedHours".equals(fieldName)) {
                    deserializedReservationDetailProperties.reservedHours
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("usageDate".equals(fieldName)) {
                    deserializedReservationDetailProperties.usageDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("usedHours".equals(fieldName)) {
                    deserializedReservationDetailProperties.usedHours
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("instanceId".equals(fieldName)) {
                    deserializedReservationDetailProperties.instanceId = reader.getString();
                } else if ("totalReservedQuantity".equals(fieldName)) {
                    deserializedReservationDetailProperties.totalReservedQuantity
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("kind".equals(fieldName)) {
                    deserializedReservationDetailProperties.kind = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReservationDetailProperties;
        });
    }
}
