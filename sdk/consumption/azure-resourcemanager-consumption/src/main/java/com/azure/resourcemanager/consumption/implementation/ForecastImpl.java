// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.implementation;

import com.azure.resourcemanager.consumption.ConsumptionManager;
import com.azure.resourcemanager.consumption.fluent.models.ForecastInner;
import com.azure.resourcemanager.consumption.models.ChargeType;
import com.azure.resourcemanager.consumption.models.Forecast;
import com.azure.resourcemanager.consumption.models.ForecastPropertiesConfidenceLevelsItem;
import com.azure.resourcemanager.consumption.models.Grain;
import java.math.BigDecimal;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class ForecastImpl implements Forecast {
    private ForecastInner innerObject;

    private final ConsumptionManager serviceManager;

    ForecastImpl(ForecastInner innerObject, ConsumptionManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String usageDate() {
        return this.innerModel().usageDate();
    }

    public Grain grain() {
        return this.innerModel().grain();
    }

    public BigDecimal charge() {
        return this.innerModel().charge();
    }

    public String currency() {
        return this.innerModel().currency();
    }

    public ChargeType chargeType() {
        return this.innerModel().chargeType();
    }

    public List<ForecastPropertiesConfidenceLevelsItem> confidenceLevels() {
        List<ForecastPropertiesConfidenceLevelsItem> inner = this.innerModel().confidenceLevels();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ForecastInner innerModel() {
        return this.innerObject;
    }

    private ConsumptionManager manager() {
        return this.serviceManager;
    }
}
