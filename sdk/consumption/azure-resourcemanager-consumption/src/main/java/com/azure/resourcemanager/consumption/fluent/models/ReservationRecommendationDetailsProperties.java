// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.consumption.models.ReservationRecommendationDetailsResourceProperties;
import com.azure.resourcemanager.consumption.models.ReservationRecommendationDetailsSavingsProperties;
import com.azure.resourcemanager.consumption.models.ReservationRecommendationDetailsUsageProperties;
import java.io.IOException;

/**
 * The properties of the reservation recommendation.
 */
@Immutable
public final class ReservationRecommendationDetailsProperties
    implements JsonSerializable<ReservationRecommendationDetailsProperties> {
    /*
     * An ISO 4217 currency code identifier for the costs and savings
     */
    private String currency;

    /*
     * Resource specific properties.
     */
    private ReservationRecommendationDetailsResourceProperties resource;

    /*
     * Resource Group.
     */
    private String resourceGroup;

    /*
     * Savings information for the recommendation.
     */
    private ReservationRecommendationDetailsSavingsProperties savings;

    /*
     * Scope of the reservation, ex: Single or Shared.
     */
    private String scope;

    /*
     * Historical usage details used to calculate the estimated savings.
     */
    private ReservationRecommendationDetailsUsageProperties usage;

    /**
     * Creates an instance of ReservationRecommendationDetailsProperties class.
     */
    public ReservationRecommendationDetailsProperties() {
    }

    /**
     * Get the currency property: An ISO 4217 currency code identifier for the costs and savings.
     * 
     * @return the currency value.
     */
    public String currency() {
        return this.currency;
    }

    /**
     * Get the resource property: Resource specific properties.
     * 
     * @return the resource value.
     */
    public ReservationRecommendationDetailsResourceProperties resource() {
        return this.resource;
    }

    /**
     * Get the resourceGroup property: Resource Group.
     * 
     * @return the resourceGroup value.
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }

    /**
     * Get the savings property: Savings information for the recommendation.
     * 
     * @return the savings value.
     */
    public ReservationRecommendationDetailsSavingsProperties savings() {
        return this.savings;
    }

    /**
     * Get the scope property: Scope of the reservation, ex: Single or Shared.
     * 
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Get the usage property: Historical usage details used to calculate the estimated savings.
     * 
     * @return the usage value.
     */
    public ReservationRecommendationDetailsUsageProperties usage() {
        return this.usage;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resource() != null) {
            resource().validate();
        }
        if (savings() != null) {
            savings().validate();
        }
        if (usage() != null) {
            usage().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReservationRecommendationDetailsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReservationRecommendationDetailsProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReservationRecommendationDetailsProperties.
     */
    public static ReservationRecommendationDetailsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReservationRecommendationDetailsProperties deserializedReservationRecommendationDetailsProperties
                = new ReservationRecommendationDetailsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("currency".equals(fieldName)) {
                    deserializedReservationRecommendationDetailsProperties.currency = reader.getString();
                } else if ("resource".equals(fieldName)) {
                    deserializedReservationRecommendationDetailsProperties.resource
                        = ReservationRecommendationDetailsResourceProperties.fromJson(reader);
                } else if ("resourceGroup".equals(fieldName)) {
                    deserializedReservationRecommendationDetailsProperties.resourceGroup = reader.getString();
                } else if ("savings".equals(fieldName)) {
                    deserializedReservationRecommendationDetailsProperties.savings
                        = ReservationRecommendationDetailsSavingsProperties.fromJson(reader);
                } else if ("scope".equals(fieldName)) {
                    deserializedReservationRecommendationDetailsProperties.scope = reader.getString();
                } else if ("usage".equals(fieldName)) {
                    deserializedReservationRecommendationDetailsProperties.usage
                        = ReservationRecommendationDetailsUsageProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReservationRecommendationDetailsProperties;
        });
    }
}
