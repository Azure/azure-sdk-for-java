// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.consumption.models.Amount;
import com.azure.resourcemanager.consumption.models.AmountWithExchangeRate;
import com.azure.resourcemanager.consumption.models.LotSource;
import com.azure.resourcemanager.consumption.models.Reseller;
import com.azure.resourcemanager.consumption.models.Status;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The lot properties.
 */
@Immutable
public final class LotProperties implements JsonSerializable<LotProperties> {
    /*
     * The original amount of a lot.
     */
    private Amount originalAmount;

    /*
     * The balance as of the last invoice.
     */
    private Amount closedBalance;

    /*
     * The source of the lot.
     */
    private LotSource source;

    /*
     * The date when the lot became effective.
     */
    private OffsetDateTime startDate;

    /*
     * The expiration date of a lot.
     */
    private OffsetDateTime expirationDate;

    /*
     * The po number of the invoice on which the lot was added. This property is not available for ConsumptionCommitment
     * lots.
     */
    private String poNumber;

    /*
     * The date when the lot was added.
     */
    private OffsetDateTime purchasedDate;

    /*
     * The status of the lot.
     */
    private Status status;

    /*
     * The currency of the lot.
     */
    private String creditCurrency;

    /*
     * The billing currency of the lot.
     */
    private String billingCurrency;

    /*
     * The original amount of a lot in billing currency.
     */
    private AmountWithExchangeRate originalAmountInBillingCurrency;

    /*
     * The balance as of the last invoice in billing currency.
     */
    private AmountWithExchangeRate closedBalanceInBillingCurrency;

    /*
     * The reseller of the lot.
     */
    private Reseller reseller;

    /*
     * The eTag for the resource.
     */
    private String etag;

    /**
     * Creates an instance of LotProperties class.
     */
    public LotProperties() {
    }

    /**
     * Get the originalAmount property: The original amount of a lot.
     * 
     * @return the originalAmount value.
     */
    public Amount originalAmount() {
        return this.originalAmount;
    }

    /**
     * Get the closedBalance property: The balance as of the last invoice.
     * 
     * @return the closedBalance value.
     */
    public Amount closedBalance() {
        return this.closedBalance;
    }

    /**
     * Get the source property: The source of the lot.
     * 
     * @return the source value.
     */
    public LotSource source() {
        return this.source;
    }

    /**
     * Get the startDate property: The date when the lot became effective.
     * 
     * @return the startDate value.
     */
    public OffsetDateTime startDate() {
        return this.startDate;
    }

    /**
     * Get the expirationDate property: The expiration date of a lot.
     * 
     * @return the expirationDate value.
     */
    public OffsetDateTime expirationDate() {
        return this.expirationDate;
    }

    /**
     * Get the poNumber property: The po number of the invoice on which the lot was added. This property is not
     * available for ConsumptionCommitment lots.
     * 
     * @return the poNumber value.
     */
    public String poNumber() {
        return this.poNumber;
    }

    /**
     * Get the purchasedDate property: The date when the lot was added.
     * 
     * @return the purchasedDate value.
     */
    public OffsetDateTime purchasedDate() {
        return this.purchasedDate;
    }

    /**
     * Get the status property: The status of the lot.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Get the creditCurrency property: The currency of the lot.
     * 
     * @return the creditCurrency value.
     */
    public String creditCurrency() {
        return this.creditCurrency;
    }

    /**
     * Get the billingCurrency property: The billing currency of the lot.
     * 
     * @return the billingCurrency value.
     */
    public String billingCurrency() {
        return this.billingCurrency;
    }

    /**
     * Get the originalAmountInBillingCurrency property: The original amount of a lot in billing currency.
     * 
     * @return the originalAmountInBillingCurrency value.
     */
    public AmountWithExchangeRate originalAmountInBillingCurrency() {
        return this.originalAmountInBillingCurrency;
    }

    /**
     * Get the closedBalanceInBillingCurrency property: The balance as of the last invoice in billing currency.
     * 
     * @return the closedBalanceInBillingCurrency value.
     */
    public AmountWithExchangeRate closedBalanceInBillingCurrency() {
        return this.closedBalanceInBillingCurrency;
    }

    /**
     * Get the reseller property: The reseller of the lot.
     * 
     * @return the reseller value.
     */
    public Reseller reseller() {
        return this.reseller;
    }

    /**
     * Get the etag property: The eTag for the resource.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (originalAmount() != null) {
            originalAmount().validate();
        }
        if (closedBalance() != null) {
            closedBalance().validate();
        }
        if (originalAmountInBillingCurrency() != null) {
            originalAmountInBillingCurrency().validate();
        }
        if (closedBalanceInBillingCurrency() != null) {
            closedBalanceInBillingCurrency().validate();
        }
        if (reseller() != null) {
            reseller().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LotProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LotProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LotProperties.
     */
    public static LotProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LotProperties deserializedLotProperties = new LotProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("originalAmount".equals(fieldName)) {
                    deserializedLotProperties.originalAmount = Amount.fromJson(reader);
                } else if ("closedBalance".equals(fieldName)) {
                    deserializedLotProperties.closedBalance = Amount.fromJson(reader);
                } else if ("source".equals(fieldName)) {
                    deserializedLotProperties.source = LotSource.fromString(reader.getString());
                } else if ("startDate".equals(fieldName)) {
                    deserializedLotProperties.startDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("expirationDate".equals(fieldName)) {
                    deserializedLotProperties.expirationDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("poNumber".equals(fieldName)) {
                    deserializedLotProperties.poNumber = reader.getString();
                } else if ("purchasedDate".equals(fieldName)) {
                    deserializedLotProperties.purchasedDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedLotProperties.status = Status.fromString(reader.getString());
                } else if ("creditCurrency".equals(fieldName)) {
                    deserializedLotProperties.creditCurrency = reader.getString();
                } else if ("billingCurrency".equals(fieldName)) {
                    deserializedLotProperties.billingCurrency = reader.getString();
                } else if ("originalAmountInBillingCurrency".equals(fieldName)) {
                    deserializedLotProperties.originalAmountInBillingCurrency = AmountWithExchangeRate.fromJson(reader);
                } else if ("closedBalanceInBillingCurrency".equals(fieldName)) {
                    deserializedLotProperties.closedBalanceInBillingCurrency = AmountWithExchangeRate.fromJson(reader);
                } else if ("reseller".equals(fieldName)) {
                    deserializedLotProperties.reseller = Reseller.fromJson(reader);
                } else if ("eTag".equals(fieldName)) {
                    deserializedLotProperties.etag = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLotProperties;
        });
    }
}
