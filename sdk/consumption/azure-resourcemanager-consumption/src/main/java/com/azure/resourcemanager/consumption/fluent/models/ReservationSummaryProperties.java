// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;

/**
 * The properties of the reservation summary.
 */
@Immutable
public final class ReservationSummaryProperties implements JsonSerializable<ReservationSummaryProperties> {
    /*
     * The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a
     * single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM
     * size and region for the reservations.
     */
    private String reservationOrderId;

    /*
     * The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the
     * grouping for applying the benefit scope and also specifies the number of instances to which the reservation
     * benefit can be applied to.
     */
    private String reservationId;

    /*
     * This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.
     */
    private String skuName;

    /*
     * This is the total hours reserved. E.g. if reservation for 1 instance was made on 1 PM, this will be 11 hours for
     * that day and 24 hours from subsequent days
     */
    private BigDecimal reservedHours;

    /*
     * Data corresponding to the utilization record. If the grain of data is monthly, it will be first day of month.
     */
    private OffsetDateTime usageDate;

    /*
     * Total used hours by the reservation
     */
    private BigDecimal usedHours;

    /*
     * This is the minimum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to
     * 12/10/2017 and on that for hour 4 and 5, utilization was 10%, this field will return 10% for that day
     */
    private BigDecimal minUtilizationPercentage;

    /*
     * This is average utilization for the entire time range. (day or month depending on the grain)
     */
    private BigDecimal avgUtilizationPercentage;

    /*
     * This is the maximum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to
     * 12/10/2017 and on that for hour 4 and 5, utilization was 100%, this field will return 100% for that day.
     */
    private BigDecimal maxUtilizationPercentage;

    /*
     * The reservation kind.
     */
    private String kind;

    /*
     * This is the purchased quantity for the reservationId.
     */
    private BigDecimal purchasedQuantity;

    /*
     * This is the remaining quantity for the reservationId.
     */
    private BigDecimal remainingQuantity;

    /*
     * This is the total count of instances that are reserved for the reservationId.
     */
    private BigDecimal totalReservedQuantity;

    /*
     * This is the used quantity for the reservationId.
     */
    private BigDecimal usedQuantity;

    /*
     * This is the utilized percentage for the reservation Id.
     */
    private BigDecimal utilizedPercentage;

    /**
     * Creates an instance of ReservationSummaryProperties class.
     */
    public ReservationSummaryProperties() {
    }

    /**
     * Get the reservationOrderId property: The reservation order ID is the identifier for a reservation purchase. Each
     * reservation order ID represents a single purchase transaction. A reservation order contains reservations. The
     * reservation order specifies the VM size and region for the reservations.
     * 
     * @return the reservationOrderId value.
     */
    public String reservationOrderId() {
        return this.reservationOrderId;
    }

    /**
     * Get the reservationId property: The reservation ID is the identifier of a reservation within a reservation order.
     * Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to
     * which the reservation benefit can be applied to.
     * 
     * @return the reservationId value.
     */
    public String reservationId() {
        return this.reservationId;
    }

    /**
     * Get the skuName property: This is the ARM Sku name. It can be used to join with the serviceType field in
     * additional info in usage records.
     * 
     * @return the skuName value.
     */
    public String skuName() {
        return this.skuName;
    }

    /**
     * Get the reservedHours property: This is the total hours reserved. E.g. if reservation for 1 instance was made on
     * 1 PM, this will be 11 hours for that day and 24 hours from subsequent days.
     * 
     * @return the reservedHours value.
     */
    public BigDecimal reservedHours() {
        return this.reservedHours;
    }

    /**
     * Get the usageDate property: Data corresponding to the utilization record. If the grain of data is monthly, it
     * will be first day of month.
     * 
     * @return the usageDate value.
     */
    public OffsetDateTime usageDate() {
        return this.usageDate;
    }

    /**
     * Get the usedHours property: Total used hours by the reservation.
     * 
     * @return the usedHours value.
     */
    public BigDecimal usedHours() {
        return this.usedHours;
    }

    /**
     * Get the minUtilizationPercentage property: This is the minimum hourly utilization in the usage time (day or
     * month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 10%, this
     * field will return 10% for that day.
     * 
     * @return the minUtilizationPercentage value.
     */
    public BigDecimal minUtilizationPercentage() {
        return this.minUtilizationPercentage;
    }

    /**
     * Get the avgUtilizationPercentage property: This is average utilization for the entire time range. (day or month
     * depending on the grain).
     * 
     * @return the avgUtilizationPercentage value.
     */
    public BigDecimal avgUtilizationPercentage() {
        return this.avgUtilizationPercentage;
    }

    /**
     * Get the maxUtilizationPercentage property: This is the maximum hourly utilization in the usage time (day or
     * month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 100%, this
     * field will return 100% for that day.
     * 
     * @return the maxUtilizationPercentage value.
     */
    public BigDecimal maxUtilizationPercentage() {
        return this.maxUtilizationPercentage;
    }

    /**
     * Get the kind property: The reservation kind.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Get the purchasedQuantity property: This is the purchased quantity for the reservationId.
     * 
     * @return the purchasedQuantity value.
     */
    public BigDecimal purchasedQuantity() {
        return this.purchasedQuantity;
    }

    /**
     * Get the remainingQuantity property: This is the remaining quantity for the reservationId.
     * 
     * @return the remainingQuantity value.
     */
    public BigDecimal remainingQuantity() {
        return this.remainingQuantity;
    }

    /**
     * Get the totalReservedQuantity property: This is the total count of instances that are reserved for the
     * reservationId.
     * 
     * @return the totalReservedQuantity value.
     */
    public BigDecimal totalReservedQuantity() {
        return this.totalReservedQuantity;
    }

    /**
     * Get the usedQuantity property: This is the used quantity for the reservationId.
     * 
     * @return the usedQuantity value.
     */
    public BigDecimal usedQuantity() {
        return this.usedQuantity;
    }

    /**
     * Get the utilizedPercentage property: This is the utilized percentage for the reservation Id.
     * 
     * @return the utilizedPercentage value.
     */
    public BigDecimal utilizedPercentage() {
        return this.utilizedPercentage;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReservationSummaryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReservationSummaryProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReservationSummaryProperties.
     */
    public static ReservationSummaryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReservationSummaryProperties deserializedReservationSummaryProperties = new ReservationSummaryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("reservationOrderId".equals(fieldName)) {
                    deserializedReservationSummaryProperties.reservationOrderId = reader.getString();
                } else if ("reservationId".equals(fieldName)) {
                    deserializedReservationSummaryProperties.reservationId = reader.getString();
                } else if ("skuName".equals(fieldName)) {
                    deserializedReservationSummaryProperties.skuName = reader.getString();
                } else if ("reservedHours".equals(fieldName)) {
                    deserializedReservationSummaryProperties.reservedHours
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("usageDate".equals(fieldName)) {
                    deserializedReservationSummaryProperties.usageDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("usedHours".equals(fieldName)) {
                    deserializedReservationSummaryProperties.usedHours
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("minUtilizationPercentage".equals(fieldName)) {
                    deserializedReservationSummaryProperties.minUtilizationPercentage
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("avgUtilizationPercentage".equals(fieldName)) {
                    deserializedReservationSummaryProperties.avgUtilizationPercentage
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("maxUtilizationPercentage".equals(fieldName)) {
                    deserializedReservationSummaryProperties.maxUtilizationPercentage
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("kind".equals(fieldName)) {
                    deserializedReservationSummaryProperties.kind = reader.getString();
                } else if ("purchasedQuantity".equals(fieldName)) {
                    deserializedReservationSummaryProperties.purchasedQuantity
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("remainingQuantity".equals(fieldName)) {
                    deserializedReservationSummaryProperties.remainingQuantity
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("totalReservedQuantity".equals(fieldName)) {
                    deserializedReservationSummaryProperties.totalReservedQuantity
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("usedQuantity".equals(fieldName)) {
                    deserializedReservationSummaryProperties.usedQuantity
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("utilizedPercentage".equals(fieldName)) {
                    deserializedReservationSummaryProperties.utilizedPercentage
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReservationSummaryProperties;
        });
    }
}
