// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;
import com.azure.resourcemanager.consumption.fluent.models.ModernReservationTransactionInner;
import com.azure.resourcemanager.consumption.fluent.models.ReservationTransactionInner;

/** An instance of this class provides access to all the operations defined in ReservationTransactionsClient. */
public interface ReservationTransactionsClient {
    /**
     * List of transactions for reserved instances on billing account scope.
     *
     * @param billingAccountId BillingAccount ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of listing reservation recommendations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ReservationTransactionInner> list(String billingAccountId);

    /**
     * List of transactions for reserved instances on billing account scope.
     *
     * @param billingAccountId BillingAccount ID.
     * @param filter Filter reservation transactions by date range. The properties/EventDate for start date and end
     *     date. The filter supports 'le' and 'ge'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of listing reservation recommendations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ReservationTransactionInner> list(String billingAccountId, String filter, Context context);

    /**
     * List of transactions for reserved instances on billing account scope.
     *
     * @param billingAccountId BillingAccount ID.
     * @param billingProfileId Azure Billing Profile ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of listing reservation recommendations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ModernReservationTransactionInner> listByBillingProfile(
        String billingAccountId, String billingProfileId);

    /**
     * List of transactions for reserved instances on billing account scope.
     *
     * @param billingAccountId BillingAccount ID.
     * @param billingProfileId Azure Billing Profile ID.
     * @param filter Filter reservation transactions by date range. The properties/EventDate for start date and end
     *     date. The filter supports 'le' and 'ge'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of listing reservation recommendations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ModernReservationTransactionInner> listByBillingProfile(
        String billingAccountId, String billingProfileId, String filter, Context context);
}
