// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Map;

/** reservation summary resource. */
@Fluent
public final class ReservationSummaryInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ReservationSummaryInner.class);

    /*
     * The properties of the reservation summary.
     */
    @JsonProperty(value = "properties")
    private ReservationSummaryProperties innerProperties;

    /*
     * The etag for the resource.
     */
    @JsonProperty(value = "etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /*
     * Resource tags.
     */
    @JsonProperty(value = "tags", access = JsonProperty.Access.WRITE_ONLY)
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> tags;

    /**
     * Get the innerProperties property: The properties of the reservation summary.
     *
     * @return the innerProperties value.
     */
    private ReservationSummaryProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the etag property: The etag for the resource.
     *
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get the tags property: Resource tags.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Get the reservationOrderId property: The reservation order ID is the identifier for a reservation purchase. Each
     * reservation order ID represents a single purchase transaction. A reservation order contains reservations. The
     * reservation order specifies the VM size and region for the reservations.
     *
     * @return the reservationOrderId value.
     */
    public String reservationOrderId() {
        return this.innerProperties() == null ? null : this.innerProperties().reservationOrderId();
    }

    /**
     * Get the reservationId property: The reservation ID is the identifier of a reservation within a reservation order.
     * Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to
     * which the reservation benefit can be applied to.
     *
     * @return the reservationId value.
     */
    public String reservationId() {
        return this.innerProperties() == null ? null : this.innerProperties().reservationId();
    }

    /**
     * Get the skuName property: This is the ARM Sku name. It can be used to join with the serviceType field in
     * additional info in usage records.
     *
     * @return the skuName value.
     */
    public String skuName() {
        return this.innerProperties() == null ? null : this.innerProperties().skuName();
    }

    /**
     * Get the reservedHours property: This is the total hours reserved. E.g. if reservation for 1 instance was made on
     * 1 PM, this will be 11 hours for that day and 24 hours from subsequent days.
     *
     * @return the reservedHours value.
     */
    public BigDecimal reservedHours() {
        return this.innerProperties() == null ? null : this.innerProperties().reservedHours();
    }

    /**
     * Get the usageDate property: Data corresponding to the utilization record. If the grain of data is monthly, it
     * will be first day of month.
     *
     * @return the usageDate value.
     */
    public OffsetDateTime usageDate() {
        return this.innerProperties() == null ? null : this.innerProperties().usageDate();
    }

    /**
     * Get the usedHours property: Total used hours by the reservation.
     *
     * @return the usedHours value.
     */
    public BigDecimal usedHours() {
        return this.innerProperties() == null ? null : this.innerProperties().usedHours();
    }

    /**
     * Get the minUtilizationPercentage property: This is the minimum hourly utilization in the usage time (day or
     * month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 10%, this
     * field will return 10% for that day.
     *
     * @return the minUtilizationPercentage value.
     */
    public BigDecimal minUtilizationPercentage() {
        return this.innerProperties() == null ? null : this.innerProperties().minUtilizationPercentage();
    }

    /**
     * Get the avgUtilizationPercentage property: This is average utilization for the entire time range. (day or month
     * depending on the grain).
     *
     * @return the avgUtilizationPercentage value.
     */
    public BigDecimal avgUtilizationPercentage() {
        return this.innerProperties() == null ? null : this.innerProperties().avgUtilizationPercentage();
    }

    /**
     * Get the maxUtilizationPercentage property: This is the maximum hourly utilization in the usage time (day or
     * month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 100%, this
     * field will return 100% for that day.
     *
     * @return the maxUtilizationPercentage value.
     */
    public BigDecimal maxUtilizationPercentage() {
        return this.innerProperties() == null ? null : this.innerProperties().maxUtilizationPercentage();
    }

    /**
     * Get the kind property: The reservation kind.
     *
     * @return the kind value.
     */
    public String kind() {
        return this.innerProperties() == null ? null : this.innerProperties().kind();
    }

    /**
     * Get the purchasedQuantity property: This is the purchased quantity for the reservationId.
     *
     * @return the purchasedQuantity value.
     */
    public BigDecimal purchasedQuantity() {
        return this.innerProperties() == null ? null : this.innerProperties().purchasedQuantity();
    }

    /**
     * Get the remainingQuantity property: This is the remaining quantity for the reservationId.
     *
     * @return the remainingQuantity value.
     */
    public BigDecimal remainingQuantity() {
        return this.innerProperties() == null ? null : this.innerProperties().remainingQuantity();
    }

    /**
     * Get the totalReservedQuantity property: This is the total count of instances that are reserved for the
     * reservationId.
     *
     * @return the totalReservedQuantity value.
     */
    public BigDecimal totalReservedQuantity() {
        return this.innerProperties() == null ? null : this.innerProperties().totalReservedQuantity();
    }

    /**
     * Get the usedQuantity property: This is the used quantity for the reservationId.
     *
     * @return the usedQuantity value.
     */
    public BigDecimal usedQuantity() {
        return this.innerProperties() == null ? null : this.innerProperties().usedQuantity();
    }

    /**
     * Get the utilizedPercentage property: This is the utilized percentage for the reservation Id.
     *
     * @return the utilizedPercentage value.
     */
    public BigDecimal utilizedPercentage() {
        return this.innerProperties() == null ? null : this.innerProperties().utilizedPercentage();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
