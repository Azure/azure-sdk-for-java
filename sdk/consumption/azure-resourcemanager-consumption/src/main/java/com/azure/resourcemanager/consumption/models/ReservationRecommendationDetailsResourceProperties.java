// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Details of the resource.
 */
@Immutable
public final class ReservationRecommendationDetailsResourceProperties
    implements JsonSerializable<ReservationRecommendationDetailsResourceProperties> {
    /*
     * List of subscriptions for which the reservation is applied.
     */
    private List<String> appliedScopes;

    /*
     * Hourly on-demand rate of the resource. Includes only hardware rate i.e, software rate is not included.
     */
    private Float onDemandRate;

    /*
     * Azure product ex: Standard_E8s_v3 etc.
     */
    private String product;

    /*
     * Azure resource region ex:EastUS, WestUS etc.
     */
    private String region;

    /*
     * Hourly reservation rate of the resource. Varies based on the term.
     */
    private Float reservationRate;

    /*
     * The azure resource type.
     */
    private String resourceType;

    /**
     * Creates an instance of ReservationRecommendationDetailsResourceProperties class.
     */
    public ReservationRecommendationDetailsResourceProperties() {
    }

    /**
     * Get the appliedScopes property: List of subscriptions for which the reservation is applied.
     * 
     * @return the appliedScopes value.
     */
    public List<String> appliedScopes() {
        return this.appliedScopes;
    }

    /**
     * Get the onDemandRate property: Hourly on-demand rate of the resource. Includes only hardware rate i.e, software
     * rate is not included.
     * 
     * @return the onDemandRate value.
     */
    public Float onDemandRate() {
        return this.onDemandRate;
    }

    /**
     * Get the product property: Azure product ex: Standard_E8s_v3 etc.
     * 
     * @return the product value.
     */
    public String product() {
        return this.product;
    }

    /**
     * Get the region property: Azure resource region ex:EastUS, WestUS etc.
     * 
     * @return the region value.
     */
    public String region() {
        return this.region;
    }

    /**
     * Get the reservationRate property: Hourly reservation rate of the resource. Varies based on the term.
     * 
     * @return the reservationRate value.
     */
    public Float reservationRate() {
        return this.reservationRate;
    }

    /**
     * Get the resourceType property: The azure resource type.
     * 
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReservationRecommendationDetailsResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReservationRecommendationDetailsResourceProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReservationRecommendationDetailsResourceProperties.
     */
    public static ReservationRecommendationDetailsResourceProperties fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ReservationRecommendationDetailsResourceProperties deserializedReservationRecommendationDetailsResourceProperties
                = new ReservationRecommendationDetailsResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("appliedScopes".equals(fieldName)) {
                    List<String> appliedScopes = reader.readArray(reader1 -> reader1.getString());
                    deserializedReservationRecommendationDetailsResourceProperties.appliedScopes = appliedScopes;
                } else if ("onDemandRate".equals(fieldName)) {
                    deserializedReservationRecommendationDetailsResourceProperties.onDemandRate
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("product".equals(fieldName)) {
                    deserializedReservationRecommendationDetailsResourceProperties.product = reader.getString();
                } else if ("region".equals(fieldName)) {
                    deserializedReservationRecommendationDetailsResourceProperties.region = reader.getString();
                } else if ("reservationRate".equals(fieldName)) {
                    deserializedReservationRecommendationDetailsResourceProperties.reservationRate
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("resourceType".equals(fieldName)) {
                    deserializedReservationRecommendationDetailsResourceProperties.resourceType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReservationRecommendationDetailsResourceProperties;
        });
    }
}
