// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Details about historical usage data that has been used for computing the recommendation.
 */
@Immutable
public final class ReservationRecommendationDetailsUsageProperties
    implements JsonSerializable<ReservationRecommendationDetailsUsageProperties> {
    /*
     * The first usage date used for looking back for computing the recommendation.
     */
    private String firstConsumptionDate;

    /*
     * The last usage date used for looking back for computing the recommendation.
     */
    private String lastConsumptionDate;

    /*
     * What the usage data values represent ex: virtual machine instance.
     */
    private String lookBackUnitType;

    /*
     * The breakdown of historical resource usage. The values are in the order of usage between the firstConsumptionDate
     * and the lastConsumptionDate.
     */
    private List<Float> usageData;

    /*
     * The grain of the values represented in the usage data ex: hourly.
     */
    private String usageGrain;

    /**
     * Creates an instance of ReservationRecommendationDetailsUsageProperties class.
     */
    public ReservationRecommendationDetailsUsageProperties() {
    }

    /**
     * Get the firstConsumptionDate property: The first usage date used for looking back for computing the
     * recommendation.
     * 
     * @return the firstConsumptionDate value.
     */
    public String firstConsumptionDate() {
        return this.firstConsumptionDate;
    }

    /**
     * Get the lastConsumptionDate property: The last usage date used for looking back for computing the recommendation.
     * 
     * @return the lastConsumptionDate value.
     */
    public String lastConsumptionDate() {
        return this.lastConsumptionDate;
    }

    /**
     * Get the lookBackUnitType property: What the usage data values represent ex: virtual machine instance.
     * 
     * @return the lookBackUnitType value.
     */
    public String lookBackUnitType() {
        return this.lookBackUnitType;
    }

    /**
     * Get the usageData property: The breakdown of historical resource usage. The values are in the order of usage
     * between the firstConsumptionDate and the lastConsumptionDate.
     * 
     * @return the usageData value.
     */
    public List<Float> usageData() {
        return this.usageData;
    }

    /**
     * Get the usageGrain property: The grain of the values represented in the usage data ex: hourly.
     * 
     * @return the usageGrain value.
     */
    public String usageGrain() {
        return this.usageGrain;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReservationRecommendationDetailsUsageProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReservationRecommendationDetailsUsageProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReservationRecommendationDetailsUsageProperties.
     */
    public static ReservationRecommendationDetailsUsageProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReservationRecommendationDetailsUsageProperties deserializedReservationRecommendationDetailsUsageProperties
                = new ReservationRecommendationDetailsUsageProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("firstConsumptionDate".equals(fieldName)) {
                    deserializedReservationRecommendationDetailsUsageProperties.firstConsumptionDate
                        = reader.getString();
                } else if ("lastConsumptionDate".equals(fieldName)) {
                    deserializedReservationRecommendationDetailsUsageProperties.lastConsumptionDate
                        = reader.getString();
                } else if ("lookBackUnitType".equals(fieldName)) {
                    deserializedReservationRecommendationDetailsUsageProperties.lookBackUnitType = reader.getString();
                } else if ("usageData".equals(fieldName)) {
                    List<Float> usageData = reader.readArray(reader1 -> reader1.getFloat());
                    deserializedReservationRecommendationDetailsUsageProperties.usageData = usageData;
                } else if ("usageGrain".equals(fieldName)) {
                    deserializedReservationRecommendationDetailsUsageProperties.usageGrain = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReservationRecommendationDetailsUsageProperties;
        });
    }
}
