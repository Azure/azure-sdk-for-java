// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.consumption.models.Amount;
import java.io.IOException;

/**
 * The properties of modern charge summary.
 */
@Immutable
public final class ModernChargeSummaryProperties implements JsonSerializable<ModernChargeSummaryProperties> {
    /*
     * The id of the billing period resource that the charge belongs to.
     */
    private String billingPeriodId;

    /*
     * Usage start date.
     */
    private String usageStart;

    /*
     * Usage end date.
     */
    private String usageEnd;

    /*
     * Azure Charges.
     */
    private Amount azureCharges;

    /*
     * Charges Billed separately.
     */
    private Amount chargesBilledSeparately;

    /*
     * Marketplace Charges.
     */
    private Amount marketplaceCharges;

    /*
     * Billing Account Id
     */
    private String billingAccountId;

    /*
     * Billing Profile Id
     */
    private String billingProfileId;

    /*
     * Invoice Section Id
     */
    private String invoiceSectionId;

    /*
     * Customer Id
     */
    private String customerId;

    /*
     * Is charge Invoiced
     */
    private Boolean isInvoiced;

    /*
     * Subscription guid.
     */
    private String subscriptionId;

    /**
     * Creates an instance of ModernChargeSummaryProperties class.
     */
    public ModernChargeSummaryProperties() {
    }

    /**
     * Get the billingPeriodId property: The id of the billing period resource that the charge belongs to.
     * 
     * @return the billingPeriodId value.
     */
    public String billingPeriodId() {
        return this.billingPeriodId;
    }

    /**
     * Get the usageStart property: Usage start date.
     * 
     * @return the usageStart value.
     */
    public String usageStart() {
        return this.usageStart;
    }

    /**
     * Get the usageEnd property: Usage end date.
     * 
     * @return the usageEnd value.
     */
    public String usageEnd() {
        return this.usageEnd;
    }

    /**
     * Get the azureCharges property: Azure Charges.
     * 
     * @return the azureCharges value.
     */
    public Amount azureCharges() {
        return this.azureCharges;
    }

    /**
     * Get the chargesBilledSeparately property: Charges Billed separately.
     * 
     * @return the chargesBilledSeparately value.
     */
    public Amount chargesBilledSeparately() {
        return this.chargesBilledSeparately;
    }

    /**
     * Get the marketplaceCharges property: Marketplace Charges.
     * 
     * @return the marketplaceCharges value.
     */
    public Amount marketplaceCharges() {
        return this.marketplaceCharges;
    }

    /**
     * Get the billingAccountId property: Billing Account Id.
     * 
     * @return the billingAccountId value.
     */
    public String billingAccountId() {
        return this.billingAccountId;
    }

    /**
     * Get the billingProfileId property: Billing Profile Id.
     * 
     * @return the billingProfileId value.
     */
    public String billingProfileId() {
        return this.billingProfileId;
    }

    /**
     * Get the invoiceSectionId property: Invoice Section Id.
     * 
     * @return the invoiceSectionId value.
     */
    public String invoiceSectionId() {
        return this.invoiceSectionId;
    }

    /**
     * Get the customerId property: Customer Id.
     * 
     * @return the customerId value.
     */
    public String customerId() {
        return this.customerId;
    }

    /**
     * Get the isInvoiced property: Is charge Invoiced.
     * 
     * @return the isInvoiced value.
     */
    public Boolean isInvoiced() {
        return this.isInvoiced;
    }

    /**
     * Get the subscriptionId property: Subscription guid.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (azureCharges() != null) {
            azureCharges().validate();
        }
        if (chargesBilledSeparately() != null) {
            chargesBilledSeparately().validate();
        }
        if (marketplaceCharges() != null) {
            marketplaceCharges().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ModernChargeSummaryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ModernChargeSummaryProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ModernChargeSummaryProperties.
     */
    public static ModernChargeSummaryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ModernChargeSummaryProperties deserializedModernChargeSummaryProperties
                = new ModernChargeSummaryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("billingPeriodId".equals(fieldName)) {
                    deserializedModernChargeSummaryProperties.billingPeriodId = reader.getString();
                } else if ("usageStart".equals(fieldName)) {
                    deserializedModernChargeSummaryProperties.usageStart = reader.getString();
                } else if ("usageEnd".equals(fieldName)) {
                    deserializedModernChargeSummaryProperties.usageEnd = reader.getString();
                } else if ("azureCharges".equals(fieldName)) {
                    deserializedModernChargeSummaryProperties.azureCharges = Amount.fromJson(reader);
                } else if ("chargesBilledSeparately".equals(fieldName)) {
                    deserializedModernChargeSummaryProperties.chargesBilledSeparately = Amount.fromJson(reader);
                } else if ("marketplaceCharges".equals(fieldName)) {
                    deserializedModernChargeSummaryProperties.marketplaceCharges = Amount.fromJson(reader);
                } else if ("billingAccountId".equals(fieldName)) {
                    deserializedModernChargeSummaryProperties.billingAccountId = reader.getString();
                } else if ("billingProfileId".equals(fieldName)) {
                    deserializedModernChargeSummaryProperties.billingProfileId = reader.getString();
                } else if ("invoiceSectionId".equals(fieldName)) {
                    deserializedModernChargeSummaryProperties.invoiceSectionId = reader.getString();
                } else if ("customerId".equals(fieldName)) {
                    deserializedModernChargeSummaryProperties.customerId = reader.getString();
                } else if ("isInvoiced".equals(fieldName)) {
                    deserializedModernChargeSummaryProperties.isInvoiced = reader.getNullable(JsonReader::getBoolean);
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedModernChargeSummaryProperties.subscriptionId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedModernChargeSummaryProperties;
        });
    }
}
