// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Summary of credit balances.
 */
@Immutable
public final class CreditBalanceSummary implements JsonSerializable<CreditBalanceSummary> {
    /*
     * Estimated balance.
     */
    private Amount estimatedBalance;

    /*
     * Current balance.
     */
    private Amount currentBalance;

    /*
     * Estimated balance in billing currency.
     */
    private AmountWithExchangeRate estimatedBalanceInBillingCurrency;

    /**
     * Creates an instance of CreditBalanceSummary class.
     */
    public CreditBalanceSummary() {
    }

    /**
     * Get the estimatedBalance property: Estimated balance.
     * 
     * @return the estimatedBalance value.
     */
    public Amount estimatedBalance() {
        return this.estimatedBalance;
    }

    /**
     * Get the currentBalance property: Current balance.
     * 
     * @return the currentBalance value.
     */
    public Amount currentBalance() {
        return this.currentBalance;
    }

    /**
     * Get the estimatedBalanceInBillingCurrency property: Estimated balance in billing currency.
     * 
     * @return the estimatedBalanceInBillingCurrency value.
     */
    public AmountWithExchangeRate estimatedBalanceInBillingCurrency() {
        return this.estimatedBalanceInBillingCurrency;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (estimatedBalance() != null) {
            estimatedBalance().validate();
        }
        if (currentBalance() != null) {
            currentBalance().validate();
        }
        if (estimatedBalanceInBillingCurrency() != null) {
            estimatedBalanceInBillingCurrency().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreditBalanceSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreditBalanceSummary if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CreditBalanceSummary.
     */
    public static CreditBalanceSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CreditBalanceSummary deserializedCreditBalanceSummary = new CreditBalanceSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("estimatedBalance".equals(fieldName)) {
                    deserializedCreditBalanceSummary.estimatedBalance = Amount.fromJson(reader);
                } else if ("currentBalance".equals(fieldName)) {
                    deserializedCreditBalanceSummary.currentBalance = Amount.fromJson(reader);
                } else if ("estimatedBalanceInBillingCurrency".equals(fieldName)) {
                    deserializedCreditBalanceSummary.estimatedBalanceInBillingCurrency
                        = AmountWithExchangeRate.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCreditBalanceSummary;
        });
    }
}
