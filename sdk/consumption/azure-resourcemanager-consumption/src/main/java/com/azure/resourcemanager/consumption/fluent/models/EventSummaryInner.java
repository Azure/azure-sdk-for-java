// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.consumption.models.Amount;
import com.azure.resourcemanager.consumption.models.EventType;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.Map;

/** An event summary resource. */
@JsonFlatten
@Fluent
public class EventSummaryInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(EventSummaryInner.class);

    /*
     * Transaction date.
     */
    @JsonProperty(value = "properties.transactionDate", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime transactionDate;

    /*
     * Transaction description.
     */
    @JsonProperty(value = "properties.description", access = JsonProperty.Access.WRITE_ONLY)
    private String description;

    /*
     * New Credit.
     */
    @JsonProperty(value = "properties.newCredit", access = JsonProperty.Access.WRITE_ONLY)
    private Amount newCredit;

    /*
     * Adjustments amount.
     */
    @JsonProperty(value = "properties.adjustments", access = JsonProperty.Access.WRITE_ONLY)
    private Amount adjustments;

    /*
     * Credit expired.
     */
    @JsonProperty(value = "properties.creditExpired", access = JsonProperty.Access.WRITE_ONLY)
    private Amount creditExpired;

    /*
     * Charges amount.
     */
    @JsonProperty(value = "properties.charges", access = JsonProperty.Access.WRITE_ONLY)
    private Amount charges;

    /*
     * Closed balance.
     */
    @JsonProperty(value = "properties.closedBalance", access = JsonProperty.Access.WRITE_ONLY)
    private Amount closedBalance;

    /*
     * The type of event.
     */
    @JsonProperty(value = "properties.eventType")
    private EventType eventType;

    /*
     * Invoice number.
     */
    @JsonProperty(value = "properties.invoiceNumber", access = JsonProperty.Access.WRITE_ONLY)
    private String invoiceNumber;

    /*
     * Resource tags.
     */
    @JsonProperty(value = "tags", access = JsonProperty.Access.WRITE_ONLY)
    private Map<String, String> tags;

    /**
     * Get the transactionDate property: Transaction date.
     *
     * @return the transactionDate value.
     */
    public OffsetDateTime transactionDate() {
        return this.transactionDate;
    }

    /**
     * Get the description property: Transaction description.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the newCredit property: New Credit.
     *
     * @return the newCredit value.
     */
    public Amount newCredit() {
        return this.newCredit;
    }

    /**
     * Get the adjustments property: Adjustments amount.
     *
     * @return the adjustments value.
     */
    public Amount adjustments() {
        return this.adjustments;
    }

    /**
     * Get the creditExpired property: Credit expired.
     *
     * @return the creditExpired value.
     */
    public Amount creditExpired() {
        return this.creditExpired;
    }

    /**
     * Get the charges property: Charges amount.
     *
     * @return the charges value.
     */
    public Amount charges() {
        return this.charges;
    }

    /**
     * Get the closedBalance property: Closed balance.
     *
     * @return the closedBalance value.
     */
    public Amount closedBalance() {
        return this.closedBalance;
    }

    /**
     * Get the eventType property: The type of event.
     *
     * @return the eventType value.
     */
    public EventType eventType() {
        return this.eventType;
    }

    /**
     * Set the eventType property: The type of event.
     *
     * @param eventType the eventType value to set.
     * @return the EventSummaryInner object itself.
     */
    public EventSummaryInner withEventType(EventType eventType) {
        this.eventType = eventType;
        return this;
    }

    /**
     * Get the invoiceNumber property: Invoice number.
     *
     * @return the invoiceNumber value.
     */
    public String invoiceNumber() {
        return this.invoiceNumber;
    }

    /**
     * Get the tags property: Resource tags.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (newCredit() != null) {
            newCredit().validate();
        }
        if (adjustments() != null) {
            adjustments().validate();
        }
        if (creditExpired() != null) {
            creditExpired().validate();
        }
        if (charges() != null) {
            charges().validate();
        }
        if (closedBalance() != null) {
            closedBalance().validate();
        }
    }
}
