// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;

/**
 * The notification associated with a budget.
 */
@Fluent
public final class Notification implements JsonSerializable<Notification> {
    /*
     * The notification is enabled or not.
     */
    private boolean enabled;

    /*
     * The comparison operator.
     */
    private OperatorType operator;

    /*
     * Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is
     * always percent and has to be between 0 and 1000.
     */
    private BigDecimal threshold;

    /*
     * Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact
     * email or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at
     * least one contact email specified.
     */
    private List<String> contactEmails;

    /*
     * Contact roles to send the budget notification to when the threshold is exceeded.
     */
    private List<String> contactRoles;

    /*
     * Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully
     * qualified Azure resource id. Only supported at Subscription or Resource Group scopes.
     */
    private List<String> contactGroups;

    /*
     * The type of threshold
     */
    private ThresholdType thresholdType;

    /*
     * Language in which the recipient will receive the notification
     */
    private CultureCode locale;

    /**
     * Creates an instance of Notification class.
     */
    public Notification() {
    }

    /**
     * Get the enabled property: The notification is enabled or not.
     * 
     * @return the enabled value.
     */
    public boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: The notification is enabled or not.
     * 
     * @param enabled the enabled value to set.
     * @return the Notification object itself.
     */
    public Notification withEnabled(boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the operator property: The comparison operator.
     * 
     * @return the operator value.
     */
    public OperatorType operator() {
        return this.operator;
    }

    /**
     * Set the operator property: The comparison operator.
     * 
     * @param operator the operator value to set.
     * @return the Notification object itself.
     */
    public Notification withOperator(OperatorType operator) {
        this.operator = operator;
        return this;
    }

    /**
     * Get the threshold property: Threshold value associated with a notification. Notification is sent when the cost
     * exceeded the threshold. It is always percent and has to be between 0 and 1000.
     * 
     * @return the threshold value.
     */
    public BigDecimal threshold() {
        return this.threshold;
    }

    /**
     * Set the threshold property: Threshold value associated with a notification. Notification is sent when the cost
     * exceeded the threshold. It is always percent and has to be between 0 and 1000.
     * 
     * @param threshold the threshold value to set.
     * @return the Notification object itself.
     */
    public Notification withThreshold(BigDecimal threshold) {
        this.threshold = threshold;
        return this;
    }

    /**
     * Get the contactEmails property: Email addresses to send the budget notification to when the threshold is
     * exceeded. Must have at least one contact email or contact group specified at the Subscription or Resource Group
     * scopes. All other scopes must have at least one contact email specified.
     * 
     * @return the contactEmails value.
     */
    public List<String> contactEmails() {
        return this.contactEmails;
    }

    /**
     * Set the contactEmails property: Email addresses to send the budget notification to when the threshold is
     * exceeded. Must have at least one contact email or contact group specified at the Subscription or Resource Group
     * scopes. All other scopes must have at least one contact email specified.
     * 
     * @param contactEmails the contactEmails value to set.
     * @return the Notification object itself.
     */
    public Notification withContactEmails(List<String> contactEmails) {
        this.contactEmails = contactEmails;
        return this;
    }

    /**
     * Get the contactRoles property: Contact roles to send the budget notification to when the threshold is exceeded.
     * 
     * @return the contactRoles value.
     */
    public List<String> contactRoles() {
        return this.contactRoles;
    }

    /**
     * Set the contactRoles property: Contact roles to send the budget notification to when the threshold is exceeded.
     * 
     * @param contactRoles the contactRoles value to set.
     * @return the Notification object itself.
     */
    public Notification withContactRoles(List<String> contactRoles) {
        this.contactRoles = contactRoles;
        return this;
    }

    /**
     * Get the contactGroups property: Action groups to send the budget notification to when the threshold is exceeded.
     * Must be provided as a fully qualified Azure resource id. Only supported at Subscription or Resource Group scopes.
     * 
     * @return the contactGroups value.
     */
    public List<String> contactGroups() {
        return this.contactGroups;
    }

    /**
     * Set the contactGroups property: Action groups to send the budget notification to when the threshold is exceeded.
     * Must be provided as a fully qualified Azure resource id. Only supported at Subscription or Resource Group scopes.
     * 
     * @param contactGroups the contactGroups value to set.
     * @return the Notification object itself.
     */
    public Notification withContactGroups(List<String> contactGroups) {
        this.contactGroups = contactGroups;
        return this;
    }

    /**
     * Get the thresholdType property: The type of threshold.
     * 
     * @return the thresholdType value.
     */
    public ThresholdType thresholdType() {
        return this.thresholdType;
    }

    /**
     * Set the thresholdType property: The type of threshold.
     * 
     * @param thresholdType the thresholdType value to set.
     * @return the Notification object itself.
     */
    public Notification withThresholdType(ThresholdType thresholdType) {
        this.thresholdType = thresholdType;
        return this;
    }

    /**
     * Get the locale property: Language in which the recipient will receive the notification.
     * 
     * @return the locale value.
     */
    public CultureCode locale() {
        return this.locale;
    }

    /**
     * Set the locale property: Language in which the recipient will receive the notification.
     * 
     * @param locale the locale value to set.
     * @return the Notification object itself.
     */
    public Notification withLocale(CultureCode locale) {
        this.locale = locale;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (operator() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property operator in model Notification"));
        }
        if (threshold() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property threshold in model Notification"));
        }
        if (contactEmails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property contactEmails in model Notification"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Notification.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("operator", this.operator == null ? null : this.operator.toString());
        jsonWriter.writeNumberField("threshold", this.threshold);
        jsonWriter.writeArrayField("contactEmails", this.contactEmails,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("contactRoles", this.contactRoles, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("contactGroups", this.contactGroups,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("thresholdType", this.thresholdType == null ? null : this.thresholdType.toString());
        jsonWriter.writeStringField("locale", this.locale == null ? null : this.locale.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Notification from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Notification if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Notification.
     */
    public static Notification fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Notification deserializedNotification = new Notification();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedNotification.enabled = reader.getBoolean();
                } else if ("operator".equals(fieldName)) {
                    deserializedNotification.operator = OperatorType.fromString(reader.getString());
                } else if ("threshold".equals(fieldName)) {
                    deserializedNotification.threshold
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("contactEmails".equals(fieldName)) {
                    List<String> contactEmails = reader.readArray(reader1 -> reader1.getString());
                    deserializedNotification.contactEmails = contactEmails;
                } else if ("contactRoles".equals(fieldName)) {
                    List<String> contactRoles = reader.readArray(reader1 -> reader1.getString());
                    deserializedNotification.contactRoles = contactRoles;
                } else if ("contactGroups".equals(fieldName)) {
                    List<String> contactGroups = reader.readArray(reader1 -> reader1.getString());
                    deserializedNotification.contactGroups = contactGroups;
                } else if ("thresholdType".equals(fieldName)) {
                    deserializedNotification.thresholdType = ThresholdType.fromString(reader.getString());
                } else if ("locale".equals(fieldName)) {
                    deserializedNotification.locale = CultureCode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNotification;
        });
    }
}
