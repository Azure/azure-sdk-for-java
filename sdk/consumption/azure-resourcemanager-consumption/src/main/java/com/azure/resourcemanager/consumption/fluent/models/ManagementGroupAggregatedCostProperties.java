// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The properties of the Management Group Aggregated Cost.
 */
@Fluent
public final class ManagementGroupAggregatedCostProperties
    implements JsonSerializable<ManagementGroupAggregatedCostProperties> {
    /*
     * The id of the billing period resource that the aggregated cost belongs to.
     */
    private String billingPeriodId;

    /*
     * The start of the date time range covered by aggregated cost.
     */
    private OffsetDateTime usageStart;

    /*
     * The end of the date time range covered by the aggregated cost.
     */
    private OffsetDateTime usageEnd;

    /*
     * Azure Charges.
     */
    private BigDecimal azureCharges;

    /*
     * Marketplace Charges.
     */
    private BigDecimal marketplaceCharges;

    /*
     * Charges Billed Separately.
     */
    private BigDecimal chargesBilledSeparately;

    /*
     * The ISO currency in which the meter is charged, for example, USD.
     */
    private String currency;

    /*
     * Children of a management group
     */
    private List<ManagementGroupAggregatedCostResultInner> children;

    /*
     * List of subscription Guids included in the calculation of aggregated cost
     */
    private List<String> includedSubscriptions;

    /*
     * List of subscription Guids excluded from the calculation of aggregated cost
     */
    private List<String> excludedSubscriptions;

    /**
     * Creates an instance of ManagementGroupAggregatedCostProperties class.
     */
    public ManagementGroupAggregatedCostProperties() {
    }

    /**
     * Get the billingPeriodId property: The id of the billing period resource that the aggregated cost belongs to.
     * 
     * @return the billingPeriodId value.
     */
    public String billingPeriodId() {
        return this.billingPeriodId;
    }

    /**
     * Get the usageStart property: The start of the date time range covered by aggregated cost.
     * 
     * @return the usageStart value.
     */
    public OffsetDateTime usageStart() {
        return this.usageStart;
    }

    /**
     * Get the usageEnd property: The end of the date time range covered by the aggregated cost.
     * 
     * @return the usageEnd value.
     */
    public OffsetDateTime usageEnd() {
        return this.usageEnd;
    }

    /**
     * Get the azureCharges property: Azure Charges.
     * 
     * @return the azureCharges value.
     */
    public BigDecimal azureCharges() {
        return this.azureCharges;
    }

    /**
     * Get the marketplaceCharges property: Marketplace Charges.
     * 
     * @return the marketplaceCharges value.
     */
    public BigDecimal marketplaceCharges() {
        return this.marketplaceCharges;
    }

    /**
     * Get the chargesBilledSeparately property: Charges Billed Separately.
     * 
     * @return the chargesBilledSeparately value.
     */
    public BigDecimal chargesBilledSeparately() {
        return this.chargesBilledSeparately;
    }

    /**
     * Get the currency property: The ISO currency in which the meter is charged, for example, USD.
     * 
     * @return the currency value.
     */
    public String currency() {
        return this.currency;
    }

    /**
     * Get the children property: Children of a management group.
     * 
     * @return the children value.
     */
    public List<ManagementGroupAggregatedCostResultInner> children() {
        return this.children;
    }

    /**
     * Set the children property: Children of a management group.
     * 
     * @param children the children value to set.
     * @return the ManagementGroupAggregatedCostProperties object itself.
     */
    public ManagementGroupAggregatedCostProperties
        withChildren(List<ManagementGroupAggregatedCostResultInner> children) {
        this.children = children;
        return this;
    }

    /**
     * Get the includedSubscriptions property: List of subscription Guids included in the calculation of aggregated
     * cost.
     * 
     * @return the includedSubscriptions value.
     */
    public List<String> includedSubscriptions() {
        return this.includedSubscriptions;
    }

    /**
     * Set the includedSubscriptions property: List of subscription Guids included in the calculation of aggregated
     * cost.
     * 
     * @param includedSubscriptions the includedSubscriptions value to set.
     * @return the ManagementGroupAggregatedCostProperties object itself.
     */
    public ManagementGroupAggregatedCostProperties withIncludedSubscriptions(List<String> includedSubscriptions) {
        this.includedSubscriptions = includedSubscriptions;
        return this;
    }

    /**
     * Get the excludedSubscriptions property: List of subscription Guids excluded from the calculation of aggregated
     * cost.
     * 
     * @return the excludedSubscriptions value.
     */
    public List<String> excludedSubscriptions() {
        return this.excludedSubscriptions;
    }

    /**
     * Set the excludedSubscriptions property: List of subscription Guids excluded from the calculation of aggregated
     * cost.
     * 
     * @param excludedSubscriptions the excludedSubscriptions value to set.
     * @return the ManagementGroupAggregatedCostProperties object itself.
     */
    public ManagementGroupAggregatedCostProperties withExcludedSubscriptions(List<String> excludedSubscriptions) {
        this.excludedSubscriptions = excludedSubscriptions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (children() != null) {
            children().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("children", this.children, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("includedSubscriptions", this.includedSubscriptions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("excludedSubscriptions", this.excludedSubscriptions,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagementGroupAggregatedCostProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagementGroupAggregatedCostProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagementGroupAggregatedCostProperties.
     */
    public static ManagementGroupAggregatedCostProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagementGroupAggregatedCostProperties deserializedManagementGroupAggregatedCostProperties
                = new ManagementGroupAggregatedCostProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("billingPeriodId".equals(fieldName)) {
                    deserializedManagementGroupAggregatedCostProperties.billingPeriodId = reader.getString();
                } else if ("usageStart".equals(fieldName)) {
                    deserializedManagementGroupAggregatedCostProperties.usageStart = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("usageEnd".equals(fieldName)) {
                    deserializedManagementGroupAggregatedCostProperties.usageEnd = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("azureCharges".equals(fieldName)) {
                    deserializedManagementGroupAggregatedCostProperties.azureCharges
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("marketplaceCharges".equals(fieldName)) {
                    deserializedManagementGroupAggregatedCostProperties.marketplaceCharges
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("chargesBilledSeparately".equals(fieldName)) {
                    deserializedManagementGroupAggregatedCostProperties.chargesBilledSeparately
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("currency".equals(fieldName)) {
                    deserializedManagementGroupAggregatedCostProperties.currency = reader.getString();
                } else if ("children".equals(fieldName)) {
                    List<ManagementGroupAggregatedCostResultInner> children
                        = reader.readArray(reader1 -> ManagementGroupAggregatedCostResultInner.fromJson(reader1));
                    deserializedManagementGroupAggregatedCostProperties.children = children;
                } else if ("includedSubscriptions".equals(fieldName)) {
                    List<String> includedSubscriptions = reader.readArray(reader1 -> reader1.getString());
                    deserializedManagementGroupAggregatedCostProperties.includedSubscriptions = includedSubscriptions;
                } else if ("excludedSubscriptions".equals(fieldName)) {
                    List<String> excludedSubscriptions = reader.readArray(reader1 -> reader1.getString());
                    deserializedManagementGroupAggregatedCostProperties.excludedSubscriptions = excludedSubscriptions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagementGroupAggregatedCostProperties;
        });
    }
}
