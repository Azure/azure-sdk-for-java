// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.consumption.models.MeterDetailsResponse;
import com.azure.resourcemanager.consumption.models.PricingModelType;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;

/**
 * The properties of the legacy usage detail.
 */
@Immutable
public final class LegacyUsageDetailProperties implements JsonSerializable<LegacyUsageDetailProperties> {
    /*
     * Billing Account identifier.
     */
    private String billingAccountId;

    /*
     * Billing Account Name.
     */
    private String billingAccountName;

    /*
     * The billing period start date.
     */
    private OffsetDateTime billingPeriodStartDate;

    /*
     * The billing period end date.
     */
    private OffsetDateTime billingPeriodEndDate;

    /*
     * Billing Profile identifier.
     */
    private String billingProfileId;

    /*
     * Billing Profile Name.
     */
    private String billingProfileName;

    /*
     * Account Owner Id.
     */
    private String accountOwnerId;

    /*
     * Account Name.
     */
    private String accountName;

    /*
     * Subscription guid.
     */
    private String subscriptionId;

    /*
     * Subscription name.
     */
    private String subscriptionName;

    /*
     * Date for the usage record.
     */
    private OffsetDateTime date;

    /*
     * Product name for the consumed service or purchase. Not available for Marketplace.
     */
    private String product;

    /*
     * Part Number of the service used. Can be used to join with the price sheet. Not available for marketplace.
     */
    private String partNumber;

    /*
     * The meter id (GUID). Not available for marketplace. For reserved instance this represents the primary meter for
     * which the reservation was purchased. For the actual VM Size for which the reservation is purchased see
     * productOrderName.
     */
    private UUID meterId;

    /*
     * The details about the meter. By default this is not populated, unless it's specified in $expand.
     */
    private MeterDetailsResponse meterDetails;

    /*
     * The usage quantity.
     */
    private BigDecimal quantity;

    /*
     * Effective Price that's charged for the usage.
     */
    private BigDecimal effectivePrice;

    /*
     * The amount of cost before tax.
     */
    private BigDecimal cost;

    /*
     * Unit Price is the price applicable to you. (your EA or other contract price).
     */
    private BigDecimal unitPrice;

    /*
     * Billing Currency.
     */
    private String billingCurrency;

    /*
     * Resource Location.
     */
    private String resourceLocation;

    /*
     * Consumed service name. Name of the azure resource provider that emits the usage or was purchased. This value is
     * not provided for marketplace usage.
     */
    private String consumedService;

    /*
     * Unique identifier of the Azure Resource Manager usage detail resource.
     */
    private String resourceId;

    /*
     * Resource Name.
     */
    private String resourceName;

    /*
     * Service-specific metadata.
     */
    private String serviceInfo1;

    /*
     * Legacy field with optional service-specific metadata.
     */
    private String serviceInfo2;

    /*
     * Additional details of this usage item. By default this is not populated, unless it's specified in $expand. Use
     * this field to get usage line item specific details such as the actual VM Size (ServiceType) or the ratio in which
     * the reservation discount is applied.
     */
    private String additionalInfo;

    /*
     * Invoice Section Name.
     */
    private String invoiceSection;

    /*
     * The cost center of this department if it is a department and a cost center is provided.
     */
    private String costCenter;

    /*
     * Resource Group Name.
     */
    private String resourceGroup;

    /*
     * ARM resource id of the reservation. Only applies to records relevant to reservations.
     */
    private String reservationId;

    /*
     * User provided display name of the reservation. Last known name for a particular day is populated in the daily
     * data. Only applies to records relevant to reservations.
     */
    private String reservationName;

    /*
     * Product Order Id. For reservations this is the Reservation Order ID.
     */
    private String productOrderId;

    /*
     * Product Order Name. For reservations this is the SKU that was purchased.
     */
    private String productOrderName;

    /*
     * Offer Id. Ex: MS-AZR-0017P, MS-AZR-0148P.
     */
    private String offerId;

    /*
     * Is Azure Credit Eligible.
     */
    private Boolean isAzureCreditEligible;

    /*
     * Term (in months). 1 month for monthly recurring purchase. 12 months for a 1 year reservation. 36 months for a 3
     * year reservation.
     */
    private String term;

    /*
     * Publisher Name.
     */
    private String publisherName;

    /*
     * Publisher Type.
     */
    private String publisherType;

    /*
     * Plan Name.
     */
    private String planName;

    /*
     * Indicates a charge represents credits, usage, a Marketplace purchase, a reservation fee, or a refund.
     */
    private String chargeType;

    /*
     * Indicates how frequently this charge will occur. OneTime for purchases which only happen once, Monthly for fees
     * which recur every month, and UsageBased for charges based on how much a service is used.
     */
    private String frequency;

    /*
     * Retail price for the resource.
     */
    private BigDecimal payGPrice;

    /*
     * Unique identifier for the applicable benefit.
     */
    private String benefitId;

    /*
     * Name of the applicable benefit.
     */
    private String benefitName;

    /*
     * Identifier that indicates how the meter is priced.
     */
    private PricingModelType pricingModel;

    /**
     * Creates an instance of LegacyUsageDetailProperties class.
     */
    public LegacyUsageDetailProperties() {
    }

    /**
     * Get the billingAccountId property: Billing Account identifier.
     * 
     * @return the billingAccountId value.
     */
    public String billingAccountId() {
        return this.billingAccountId;
    }

    /**
     * Get the billingAccountName property: Billing Account Name.
     * 
     * @return the billingAccountName value.
     */
    public String billingAccountName() {
        return this.billingAccountName;
    }

    /**
     * Get the billingPeriodStartDate property: The billing period start date.
     * 
     * @return the billingPeriodStartDate value.
     */
    public OffsetDateTime billingPeriodStartDate() {
        return this.billingPeriodStartDate;
    }

    /**
     * Get the billingPeriodEndDate property: The billing period end date.
     * 
     * @return the billingPeriodEndDate value.
     */
    public OffsetDateTime billingPeriodEndDate() {
        return this.billingPeriodEndDate;
    }

    /**
     * Get the billingProfileId property: Billing Profile identifier.
     * 
     * @return the billingProfileId value.
     */
    public String billingProfileId() {
        return this.billingProfileId;
    }

    /**
     * Get the billingProfileName property: Billing Profile Name.
     * 
     * @return the billingProfileName value.
     */
    public String billingProfileName() {
        return this.billingProfileName;
    }

    /**
     * Get the accountOwnerId property: Account Owner Id.
     * 
     * @return the accountOwnerId value.
     */
    public String accountOwnerId() {
        return this.accountOwnerId;
    }

    /**
     * Get the accountName property: Account Name.
     * 
     * @return the accountName value.
     */
    public String accountName() {
        return this.accountName;
    }

    /**
     * Get the subscriptionId property: Subscription guid.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the subscriptionName property: Subscription name.
     * 
     * @return the subscriptionName value.
     */
    public String subscriptionName() {
        return this.subscriptionName;
    }

    /**
     * Get the date property: Date for the usage record.
     * 
     * @return the date value.
     */
    public OffsetDateTime date() {
        return this.date;
    }

    /**
     * Get the product property: Product name for the consumed service or purchase. Not available for Marketplace.
     * 
     * @return the product value.
     */
    public String product() {
        return this.product;
    }

    /**
     * Get the partNumber property: Part Number of the service used. Can be used to join with the price sheet. Not
     * available for marketplace.
     * 
     * @return the partNumber value.
     */
    public String partNumber() {
        return this.partNumber;
    }

    /**
     * Get the meterId property: The meter id (GUID). Not available for marketplace. For reserved instance this
     * represents the primary meter for which the reservation was purchased. For the actual VM Size for which the
     * reservation is purchased see productOrderName.
     * 
     * @return the meterId value.
     */
    public UUID meterId() {
        return this.meterId;
    }

    /**
     * Get the meterDetails property: The details about the meter. By default this is not populated, unless it's
     * specified in $expand.
     * 
     * @return the meterDetails value.
     */
    public MeterDetailsResponse meterDetails() {
        return this.meterDetails;
    }

    /**
     * Get the quantity property: The usage quantity.
     * 
     * @return the quantity value.
     */
    public BigDecimal quantity() {
        return this.quantity;
    }

    /**
     * Get the effectivePrice property: Effective Price that's charged for the usage.
     * 
     * @return the effectivePrice value.
     */
    public BigDecimal effectivePrice() {
        return this.effectivePrice;
    }

    /**
     * Get the cost property: The amount of cost before tax.
     * 
     * @return the cost value.
     */
    public BigDecimal cost() {
        return this.cost;
    }

    /**
     * Get the unitPrice property: Unit Price is the price applicable to you. (your EA or other contract price).
     * 
     * @return the unitPrice value.
     */
    public BigDecimal unitPrice() {
        return this.unitPrice;
    }

    /**
     * Get the billingCurrency property: Billing Currency.
     * 
     * @return the billingCurrency value.
     */
    public String billingCurrency() {
        return this.billingCurrency;
    }

    /**
     * Get the resourceLocation property: Resource Location.
     * 
     * @return the resourceLocation value.
     */
    public String resourceLocation() {
        return this.resourceLocation;
    }

    /**
     * Get the consumedService property: Consumed service name. Name of the azure resource provider that emits the usage
     * or was purchased. This value is not provided for marketplace usage.
     * 
     * @return the consumedService value.
     */
    public String consumedService() {
        return this.consumedService;
    }

    /**
     * Get the resourceId property: Unique identifier of the Azure Resource Manager usage detail resource.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Get the resourceName property: Resource Name.
     * 
     * @return the resourceName value.
     */
    public String resourceName() {
        return this.resourceName;
    }

    /**
     * Get the serviceInfo1 property: Service-specific metadata.
     * 
     * @return the serviceInfo1 value.
     */
    public String serviceInfo1() {
        return this.serviceInfo1;
    }

    /**
     * Get the serviceInfo2 property: Legacy field with optional service-specific metadata.
     * 
     * @return the serviceInfo2 value.
     */
    public String serviceInfo2() {
        return this.serviceInfo2;
    }

    /**
     * Get the additionalInfo property: Additional details of this usage item. By default this is not populated, unless
     * it's specified in $expand. Use this field to get usage line item specific details such as the actual VM Size
     * (ServiceType) or the ratio in which the reservation discount is applied.
     * 
     * @return the additionalInfo value.
     */
    public String additionalInfo() {
        return this.additionalInfo;
    }

    /**
     * Get the invoiceSection property: Invoice Section Name.
     * 
     * @return the invoiceSection value.
     */
    public String invoiceSection() {
        return this.invoiceSection;
    }

    /**
     * Get the costCenter property: The cost center of this department if it is a department and a cost center is
     * provided.
     * 
     * @return the costCenter value.
     */
    public String costCenter() {
        return this.costCenter;
    }

    /**
     * Get the resourceGroup property: Resource Group Name.
     * 
     * @return the resourceGroup value.
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }

    /**
     * Get the reservationId property: ARM resource id of the reservation. Only applies to records relevant to
     * reservations.
     * 
     * @return the reservationId value.
     */
    public String reservationId() {
        return this.reservationId;
    }

    /**
     * Get the reservationName property: User provided display name of the reservation. Last known name for a particular
     * day is populated in the daily data. Only applies to records relevant to reservations.
     * 
     * @return the reservationName value.
     */
    public String reservationName() {
        return this.reservationName;
    }

    /**
     * Get the productOrderId property: Product Order Id. For reservations this is the Reservation Order ID.
     * 
     * @return the productOrderId value.
     */
    public String productOrderId() {
        return this.productOrderId;
    }

    /**
     * Get the productOrderName property: Product Order Name. For reservations this is the SKU that was purchased.
     * 
     * @return the productOrderName value.
     */
    public String productOrderName() {
        return this.productOrderName;
    }

    /**
     * Get the offerId property: Offer Id. Ex: MS-AZR-0017P, MS-AZR-0148P.
     * 
     * @return the offerId value.
     */
    public String offerId() {
        return this.offerId;
    }

    /**
     * Get the isAzureCreditEligible property: Is Azure Credit Eligible.
     * 
     * @return the isAzureCreditEligible value.
     */
    public Boolean isAzureCreditEligible() {
        return this.isAzureCreditEligible;
    }

    /**
     * Get the term property: Term (in months). 1 month for monthly recurring purchase. 12 months for a 1 year
     * reservation. 36 months for a 3 year reservation.
     * 
     * @return the term value.
     */
    public String term() {
        return this.term;
    }

    /**
     * Get the publisherName property: Publisher Name.
     * 
     * @return the publisherName value.
     */
    public String publisherName() {
        return this.publisherName;
    }

    /**
     * Get the publisherType property: Publisher Type.
     * 
     * @return the publisherType value.
     */
    public String publisherType() {
        return this.publisherType;
    }

    /**
     * Get the planName property: Plan Name.
     * 
     * @return the planName value.
     */
    public String planName() {
        return this.planName;
    }

    /**
     * Get the chargeType property: Indicates a charge represents credits, usage, a Marketplace purchase, a reservation
     * fee, or a refund.
     * 
     * @return the chargeType value.
     */
    public String chargeType() {
        return this.chargeType;
    }

    /**
     * Get the frequency property: Indicates how frequently this charge will occur. OneTime for purchases which only
     * happen once, Monthly for fees which recur every month, and UsageBased for charges based on how much a service is
     * used.
     * 
     * @return the frequency value.
     */
    public String frequency() {
        return this.frequency;
    }

    /**
     * Get the payGPrice property: Retail price for the resource.
     * 
     * @return the payGPrice value.
     */
    public BigDecimal payGPrice() {
        return this.payGPrice;
    }

    /**
     * Get the benefitId property: Unique identifier for the applicable benefit.
     * 
     * @return the benefitId value.
     */
    public String benefitId() {
        return this.benefitId;
    }

    /**
     * Get the benefitName property: Name of the applicable benefit.
     * 
     * @return the benefitName value.
     */
    public String benefitName() {
        return this.benefitName;
    }

    /**
     * Get the pricingModel property: Identifier that indicates how the meter is priced.
     * 
     * @return the pricingModel value.
     */
    public PricingModelType pricingModel() {
        return this.pricingModel;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (meterDetails() != null) {
            meterDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LegacyUsageDetailProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LegacyUsageDetailProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LegacyUsageDetailProperties.
     */
    public static LegacyUsageDetailProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LegacyUsageDetailProperties deserializedLegacyUsageDetailProperties = new LegacyUsageDetailProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("billingAccountId".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.billingAccountId = reader.getString();
                } else if ("billingAccountName".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.billingAccountName = reader.getString();
                } else if ("billingPeriodStartDate".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.billingPeriodStartDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("billingPeriodEndDate".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.billingPeriodEndDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("billingProfileId".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.billingProfileId = reader.getString();
                } else if ("billingProfileName".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.billingProfileName = reader.getString();
                } else if ("accountOwnerId".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.accountOwnerId = reader.getString();
                } else if ("accountName".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.accountName = reader.getString();
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.subscriptionId = reader.getString();
                } else if ("subscriptionName".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.subscriptionName = reader.getString();
                } else if ("date".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.date = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("product".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.product = reader.getString();
                } else if ("partNumber".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.partNumber = reader.getString();
                } else if ("meterId".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.meterId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("meterDetails".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.meterDetails = MeterDetailsResponse.fromJson(reader);
                } else if ("quantity".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.quantity
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("effectivePrice".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.effectivePrice
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("cost".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.cost
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("unitPrice".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.unitPrice
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("billingCurrency".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.billingCurrency = reader.getString();
                } else if ("resourceLocation".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.resourceLocation = reader.getString();
                } else if ("consumedService".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.consumedService = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.resourceId = reader.getString();
                } else if ("resourceName".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.resourceName = reader.getString();
                } else if ("serviceInfo1".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.serviceInfo1 = reader.getString();
                } else if ("serviceInfo2".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.serviceInfo2 = reader.getString();
                } else if ("additionalInfo".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.additionalInfo = reader.getString();
                } else if ("invoiceSection".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.invoiceSection = reader.getString();
                } else if ("costCenter".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.costCenter = reader.getString();
                } else if ("resourceGroup".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.resourceGroup = reader.getString();
                } else if ("reservationId".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.reservationId = reader.getString();
                } else if ("reservationName".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.reservationName = reader.getString();
                } else if ("productOrderId".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.productOrderId = reader.getString();
                } else if ("productOrderName".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.productOrderName = reader.getString();
                } else if ("offerId".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.offerId = reader.getString();
                } else if ("isAzureCreditEligible".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.isAzureCreditEligible
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("term".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.term = reader.getString();
                } else if ("publisherName".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.publisherName = reader.getString();
                } else if ("publisherType".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.publisherType = reader.getString();
                } else if ("planName".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.planName = reader.getString();
                } else if ("chargeType".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.chargeType = reader.getString();
                } else if ("frequency".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.frequency = reader.getString();
                } else if ("payGPrice".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.payGPrice
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("benefitId".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.benefitId = reader.getString();
                } else if ("benefitName".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.benefitName = reader.getString();
                } else if ("pricingModel".equals(fieldName)) {
                    deserializedLegacyUsageDetailProperties.pricingModel
                        = PricingModelType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLegacyUsageDetailProperties;
        });
    }
}
