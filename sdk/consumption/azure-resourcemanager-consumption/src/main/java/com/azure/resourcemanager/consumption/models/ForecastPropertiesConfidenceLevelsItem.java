// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.math.BigDecimal;

/** The ForecastPropertiesConfidenceLevelsItem model. */
@Fluent
public final class ForecastPropertiesConfidenceLevelsItem {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ForecastPropertiesConfidenceLevelsItem.class);

    /*
     * The percentage level of the confidence
     */
    @JsonProperty(value = "percentage", access = JsonProperty.Access.WRITE_ONLY)
    private BigDecimal percentage;

    /*
     * The boundary of the percentage, values could be 'Upper' or 'Lower'
     */
    @JsonProperty(value = "bound")
    private Bound bound;

    /*
     * The amount of forecast within the percentage level
     */
    @JsonProperty(value = "value", access = JsonProperty.Access.WRITE_ONLY)
    private BigDecimal value;

    /**
     * Get the percentage property: The percentage level of the confidence.
     *
     * @return the percentage value.
     */
    public BigDecimal percentage() {
        return this.percentage;
    }

    /**
     * Get the bound property: The boundary of the percentage, values could be 'Upper' or 'Lower'.
     *
     * @return the bound value.
     */
    public Bound bound() {
        return this.bound;
    }

    /**
     * Set the bound property: The boundary of the percentage, values could be 'Upper' or 'Lower'.
     *
     * @param bound the bound value to set.
     * @return the ForecastPropertiesConfidenceLevelsItem object itself.
     */
    public ForecastPropertiesConfidenceLevelsItem withBound(Bound bound) {
        this.bound = bound;
        return this;
    }

    /**
     * Get the value property: The amount of forecast within the percentage level.
     *
     * @return the value value.
     */
    public BigDecimal value() {
        return this.value;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
