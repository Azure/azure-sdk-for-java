// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * May be used to filter budgets by resource group, resource, or meter.
 */
@Fluent
public final class BudgetFilter implements JsonSerializable<BudgetFilter> {
    /*
     * The logical "AND" expression. Must have at least 2 items.
     */
    private List<BudgetFilterProperties> and;

    /*
     * Has comparison expression for a dimension
     */
    private BudgetComparisonExpression dimensions;

    /*
     * Has comparison expression for a tag
     */
    private BudgetComparisonExpression tags;

    /**
     * Creates an instance of BudgetFilter class.
     */
    public BudgetFilter() {
    }

    /**
     * Get the and property: The logical "AND" expression. Must have at least 2 items.
     * 
     * @return the and value.
     */
    public List<BudgetFilterProperties> and() {
        return this.and;
    }

    /**
     * Set the and property: The logical "AND" expression. Must have at least 2 items.
     * 
     * @param and the and value to set.
     * @return the BudgetFilter object itself.
     */
    public BudgetFilter withAnd(List<BudgetFilterProperties> and) {
        this.and = and;
        return this;
    }

    /**
     * Get the dimensions property: Has comparison expression for a dimension.
     * 
     * @return the dimensions value.
     */
    public BudgetComparisonExpression dimensions() {
        return this.dimensions;
    }

    /**
     * Set the dimensions property: Has comparison expression for a dimension.
     * 
     * @param dimensions the dimensions value to set.
     * @return the BudgetFilter object itself.
     */
    public BudgetFilter withDimensions(BudgetComparisonExpression dimensions) {
        this.dimensions = dimensions;
        return this;
    }

    /**
     * Get the tags property: Has comparison expression for a tag.
     * 
     * @return the tags value.
     */
    public BudgetComparisonExpression tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Has comparison expression for a tag.
     * 
     * @param tags the tags value to set.
     * @return the BudgetFilter object itself.
     */
    public BudgetFilter withTags(BudgetComparisonExpression tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (and() != null) {
            and().forEach(e -> e.validate());
        }
        if (dimensions() != null) {
            dimensions().validate();
        }
        if (tags() != null) {
            tags().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("and", this.and, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("dimensions", this.dimensions);
        jsonWriter.writeJsonField("tags", this.tags);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BudgetFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BudgetFilter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BudgetFilter.
     */
    public static BudgetFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BudgetFilter deserializedBudgetFilter = new BudgetFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("and".equals(fieldName)) {
                    List<BudgetFilterProperties> and
                        = reader.readArray(reader1 -> BudgetFilterProperties.fromJson(reader1));
                    deserializedBudgetFilter.and = and;
                } else if ("dimensions".equals(fieldName)) {
                    deserializedBudgetFilter.dimensions = BudgetComparisonExpression.fromJson(reader);
                } else if ("tags".equals(fieldName)) {
                    deserializedBudgetFilter.tags = BudgetComparisonExpression.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBudgetFilter;
        });
    }
}
