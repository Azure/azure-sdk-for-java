// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;

/**
 * The properties of a legacy reservation transaction.
 */
@Immutable
public final class LegacyReservationTransactionProperties
    implements JsonSerializable<LegacyReservationTransactionProperties> {
    /*
     * The date of the transaction
     */
    private OffsetDateTime eventDate;

    /*
     * The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a
     * single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM
     * size and region for the reservations.
     */
    private String reservationOrderId;

    /*
     * The description of the transaction.
     */
    private String description;

    /*
     * The type of the transaction (Purchase, Cancel or Refund).
     */
    private String eventType;

    /*
     * The quantity of the transaction.
     */
    private BigDecimal quantity;

    /*
     * The charge of the transaction.
     */
    private BigDecimal amount;

    /*
     * The ISO currency in which the transaction is charged, for example, USD.
     */
    private String currency;

    /*
     * The name of the reservation order.
     */
    private String reservationOrderName;

    /*
     * The purchasing enrollment.
     */
    private String purchasingEnrollment;

    /*
     * The subscription guid that makes the transaction.
     */
    private UUID purchasingSubscriptionGuid;

    /*
     * The subscription name that makes the transaction.
     */
    private String purchasingSubscriptionName;

    /*
     * This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.
     */
    private String armSkuName;

    /*
     * This is the term of the transaction.
     */
    private String term;

    /*
     * The region of the transaction.
     */
    private String region;

    /*
     * The name of the account that makes the transaction.
     */
    private String accountName;

    /*
     * The email of the account owner that makes the transaction.
     */
    private String accountOwnerEmail;

    /*
     * The department name.
     */
    private String departmentName;

    /*
     * The cost center of this department if it is a department and a cost center is provided.
     */
    private String costCenter;

    /*
     * The current enrollment.
     */
    private String currentEnrollment;

    /*
     * The billing frequency, which can be either one-time or recurring.
     */
    private String billingFrequency;

    /*
     * The billing month(yyyyMMdd), on which the event initiated.
     */
    private Integer billingMonth;

    /*
     * The monetary commitment amount at the enrollment scope.
     */
    private BigDecimal monetaryCommitment;

    /*
     * The overage amount at the enrollment scope.
     */
    private BigDecimal overage;

    /**
     * Creates an instance of LegacyReservationTransactionProperties class.
     */
    public LegacyReservationTransactionProperties() {
    }

    /**
     * Get the eventDate property: The date of the transaction.
     * 
     * @return the eventDate value.
     */
    public OffsetDateTime eventDate() {
        return this.eventDate;
    }

    /**
     * Get the reservationOrderId property: The reservation order ID is the identifier for a reservation purchase. Each
     * reservation order ID represents a single purchase transaction. A reservation order contains reservations. The
     * reservation order specifies the VM size and region for the reservations.
     * 
     * @return the reservationOrderId value.
     */
    public String reservationOrderId() {
        return this.reservationOrderId;
    }

    /**
     * Get the description property: The description of the transaction.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the eventType property: The type of the transaction (Purchase, Cancel or Refund).
     * 
     * @return the eventType value.
     */
    public String eventType() {
        return this.eventType;
    }

    /**
     * Get the quantity property: The quantity of the transaction.
     * 
     * @return the quantity value.
     */
    public BigDecimal quantity() {
        return this.quantity;
    }

    /**
     * Get the amount property: The charge of the transaction.
     * 
     * @return the amount value.
     */
    public BigDecimal amount() {
        return this.amount;
    }

    /**
     * Get the currency property: The ISO currency in which the transaction is charged, for example, USD.
     * 
     * @return the currency value.
     */
    public String currency() {
        return this.currency;
    }

    /**
     * Get the reservationOrderName property: The name of the reservation order.
     * 
     * @return the reservationOrderName value.
     */
    public String reservationOrderName() {
        return this.reservationOrderName;
    }

    /**
     * Get the purchasingEnrollment property: The purchasing enrollment.
     * 
     * @return the purchasingEnrollment value.
     */
    public String purchasingEnrollment() {
        return this.purchasingEnrollment;
    }

    /**
     * Get the purchasingSubscriptionGuid property: The subscription guid that makes the transaction.
     * 
     * @return the purchasingSubscriptionGuid value.
     */
    public UUID purchasingSubscriptionGuid() {
        return this.purchasingSubscriptionGuid;
    }

    /**
     * Get the purchasingSubscriptionName property: The subscription name that makes the transaction.
     * 
     * @return the purchasingSubscriptionName value.
     */
    public String purchasingSubscriptionName() {
        return this.purchasingSubscriptionName;
    }

    /**
     * Get the armSkuName property: This is the ARM Sku name. It can be used to join with the serviceType field in
     * additional info in usage records.
     * 
     * @return the armSkuName value.
     */
    public String armSkuName() {
        return this.armSkuName;
    }

    /**
     * Get the term property: This is the term of the transaction.
     * 
     * @return the term value.
     */
    public String term() {
        return this.term;
    }

    /**
     * Get the region property: The region of the transaction.
     * 
     * @return the region value.
     */
    public String region() {
        return this.region;
    }

    /**
     * Get the accountName property: The name of the account that makes the transaction.
     * 
     * @return the accountName value.
     */
    public String accountName() {
        return this.accountName;
    }

    /**
     * Get the accountOwnerEmail property: The email of the account owner that makes the transaction.
     * 
     * @return the accountOwnerEmail value.
     */
    public String accountOwnerEmail() {
        return this.accountOwnerEmail;
    }

    /**
     * Get the departmentName property: The department name.
     * 
     * @return the departmentName value.
     */
    public String departmentName() {
        return this.departmentName;
    }

    /**
     * Get the costCenter property: The cost center of this department if it is a department and a cost center is
     * provided.
     * 
     * @return the costCenter value.
     */
    public String costCenter() {
        return this.costCenter;
    }

    /**
     * Get the currentEnrollment property: The current enrollment.
     * 
     * @return the currentEnrollment value.
     */
    public String currentEnrollment() {
        return this.currentEnrollment;
    }

    /**
     * Get the billingFrequency property: The billing frequency, which can be either one-time or recurring.
     * 
     * @return the billingFrequency value.
     */
    public String billingFrequency() {
        return this.billingFrequency;
    }

    /**
     * Get the billingMonth property: The billing month(yyyyMMdd), on which the event initiated.
     * 
     * @return the billingMonth value.
     */
    public Integer billingMonth() {
        return this.billingMonth;
    }

    /**
     * Get the monetaryCommitment property: The monetary commitment amount at the enrollment scope.
     * 
     * @return the monetaryCommitment value.
     */
    public BigDecimal monetaryCommitment() {
        return this.monetaryCommitment;
    }

    /**
     * Get the overage property: The overage amount at the enrollment scope.
     * 
     * @return the overage value.
     */
    public BigDecimal overage() {
        return this.overage;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LegacyReservationTransactionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LegacyReservationTransactionProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LegacyReservationTransactionProperties.
     */
    public static LegacyReservationTransactionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LegacyReservationTransactionProperties deserializedLegacyReservationTransactionProperties
                = new LegacyReservationTransactionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("eventDate".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.eventDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("reservationOrderId".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.reservationOrderId = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.description = reader.getString();
                } else if ("eventType".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.eventType = reader.getString();
                } else if ("quantity".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.quantity
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("amount".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.amount
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("currency".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.currency = reader.getString();
                } else if ("reservationOrderName".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.reservationOrderName = reader.getString();
                } else if ("purchasingEnrollment".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.purchasingEnrollment = reader.getString();
                } else if ("purchasingSubscriptionGuid".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.purchasingSubscriptionGuid
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("purchasingSubscriptionName".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.purchasingSubscriptionName = reader.getString();
                } else if ("armSkuName".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.armSkuName = reader.getString();
                } else if ("term".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.term = reader.getString();
                } else if ("region".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.region = reader.getString();
                } else if ("accountName".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.accountName = reader.getString();
                } else if ("accountOwnerEmail".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.accountOwnerEmail = reader.getString();
                } else if ("departmentName".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.departmentName = reader.getString();
                } else if ("costCenter".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.costCenter = reader.getString();
                } else if ("currentEnrollment".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.currentEnrollment = reader.getString();
                } else if ("billingFrequency".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.billingFrequency = reader.getString();
                } else if ("billingMonth".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.billingMonth
                        = reader.getNullable(JsonReader::getInt);
                } else if ("monetaryCommitment".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.monetaryCommitment
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("overage".equals(fieldName)) {
                    deserializedLegacyReservationTransactionProperties.overage
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLegacyReservationTransactionProperties;
        });
    }
}
