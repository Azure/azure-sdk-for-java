// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.consumption.models.PricingModelType;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;

/**
 * The properties of the usage detail.
 */
@Immutable
public final class ModernUsageDetailProperties implements JsonSerializable<ModernUsageDetailProperties> {
    /*
     * Billing Account identifier.
     */
    private String billingAccountId;

    /*
     * Effective Price that's charged for the usage.
     */
    private BigDecimal effectivePrice;

    /*
     * Identifier that indicates how the meter is priced
     */
    private PricingModelType pricingModel;

    /*
     * Name of the Billing Account.
     */
    private String billingAccountName;

    /*
     * Billing Period Start Date as in the invoice.
     */
    private OffsetDateTime billingPeriodStartDate;

    /*
     * Billing Period End Date as in the invoice.
     */
    private OffsetDateTime billingPeriodEndDate;

    /*
     * Identifier for the billing profile that groups costs across invoices in the a singular billing currency across
     * across the customers who have onboarded the Microsoft customer agreement and the customers in CSP who have made
     * entitlement purchases like SaaS, Marketplace, RI, etc.
     */
    private String billingProfileId;

    /*
     * Name of the billing profile that groups costs across invoices in the a singular billing currency across across
     * the customers who have onboarded the Microsoft customer agreement and the customers in CSP who have made
     * entitlement purchases like SaaS, Marketplace, RI, etc.
     */
    private String billingProfileName;

    /*
     * Unique Microsoft generated identifier for the Azure Subscription.
     */
    private String subscriptionGuid;

    /*
     * Name of the Azure Subscription.
     */
    private String subscriptionName;

    /*
     * Date for the usage record.
     */
    private OffsetDateTime date;

    /*
     * Name of the product that has accrued charges by consumption or purchase as listed in the invoice. Not available
     * for Marketplace.
     */
    private String product;

    /*
     * The meter id (GUID). Not available for marketplace. For reserved instance this represents the primary meter for
     * which the reservation was purchased. For the actual VM Size for which the reservation is purchased see
     * productOrderName.
     */
    private UUID meterId;

    /*
     * Identifies the name of the meter against which consumption is measured.
     */
    private String meterName;

    /*
     * Identifies the location of the datacenter for certain services that are priced based on datacenter location.
     */
    private String meterRegion;

    /*
     * Identifies the top-level service for the usage.
     */
    private String meterCategory;

    /*
     * Defines the type or sub-category of Azure service that can affect the rate.
     */
    private String meterSubCategory;

    /*
     * List the service family for the product purchased or charged (Example: Storage ; Compute).
     */
    private String serviceFamily;

    /*
     * Measure the quantity purchased or consumed.The amount of the meter used during the billing period.
     */
    private BigDecimal quantity;

    /*
     * Identifies the Unit that the service is charged in. For example, GB, hours, 10,000 s.
     */
    private String unitOfMeasure;

    /*
     * Instance Name.
     */
    private String instanceName;

    /*
     * Estimated extendedCost or blended cost before tax in USD.
     */
    private BigDecimal costInUsd;

    /*
     * Unit Price is the price applicable to you. (your EA or other contract price).
     */
    private BigDecimal unitPrice;

    /*
     * The currency defining the billed cost.
     */
    private String billingCurrencyCode;

    /*
     * Name of the resource location.
     */
    private String resourceLocation;

    /*
     * Consumed service name. Name of the azure resource provider that emits the usage or was purchased. This value is
     * not provided for marketplace usage.
     */
    private String consumedService;

    /*
     * Service-specific metadata.
     */
    private String serviceInfo1;

    /*
     * Legacy field with optional service-specific metadata.
     */
    private String serviceInfo2;

    /*
     * Additional details of this usage item. Use this field to get usage line item specific details such as the actual
     * VM Size (ServiceType) or the ratio in which the reservation discount is applied.
     */
    private String additionalInfo;

    /*
     * Identifier of the project that is being charged in the invoice. Not applicable for Microsoft Customer Agreements
     * onboarded by partners.
     */
    private String invoiceSectionId;

    /*
     * Name of the project that is being charged in the invoice. Not applicable for Microsoft Customer Agreements
     * onboarded by partners.
     */
    private String invoiceSectionName;

    /*
     * The cost center of this department if it is a department and a cost center is provided.
     */
    private String costCenter;

    /*
     * Name of the Azure resource group used for cohesive lifecycle management of resources.
     */
    private String resourceGroup;

    /*
     * ARM resource id of the reservation. Only applies to records relevant to reservations.
     */
    private String reservationId;

    /*
     * User provided display name of the reservation. Last known name for a particular day is populated in the daily
     * data. Only applies to records relevant to reservations.
     */
    private String reservationName;

    /*
     * The identifier for the asset or Azure plan name that the subscription belongs to. For example: Azure Plan. For
     * reservations this is the Reservation Order ID.
     */
    private String productOrderId;

    /*
     * Product Order Name. For reservations this is the SKU that was purchased.
     */
    private String productOrderName;

    /*
     * Determines if the cost is eligible to be paid for using Azure credits.
     */
    private Boolean isAzureCreditEligible;

    /*
     * Term (in months). Displays the term for the validity of the offer. For example. In case of reserved instances it
     * displays 12 months for yearly term of reserved instance. For one time purchases or recurring purchases, the terms
     * displays 1 month; This is not applicable for Azure consumption.
     */
    private String term;

    /*
     * Name of the publisher of the service including Microsoft or Third Party publishers.
     */
    private String publisherName;

    /*
     * Type of publisher that identifies if the publisher is first party, third party reseller or third party agency.
     */
    private String publisherType;

    /*
     * Indicates a charge represents credits, usage, a Marketplace purchase, a reservation fee, or a refund.
     */
    private String chargeType;

    /*
     * Indicates how frequently this charge will occur. OneTime for purchases which only happen once, Monthly for fees
     * which recur every month, and UsageBased for charges based on how much a service is used.
     */
    private String frequency;

    /*
     * ExtendedCost or blended cost before tax in billed currency.
     */
    private BigDecimal costInBillingCurrency;

    /*
     * ExtendedCost or blended cost before tax in pricing currency to correlate with prices.
     */
    private BigDecimal costInPricingCurrency;

    /*
     * Exchange rate used in conversion from pricing currency to billing currency.
     */
    private String exchangeRate;

    /*
     * Date on which exchange rate used in conversion from pricing currency to billing currency.
     */
    private OffsetDateTime exchangeRateDate;

    /*
     * Invoice ID as on the invoice where the specific transaction appears.
     */
    private String invoiceId;

    /*
     * Reference to an original invoice there is a refund (negative cost). This is populated only when there is a
     * refund.
     */
    private String previousInvoiceId;

    /*
     * Pricing Billing Currency.
     */
    private String pricingCurrencyCode;

    /*
     * Identifier for the product that has accrued charges by consumption or purchase . This is the concatenated key of
     * productId and SkuId in partner center.
     */
    private String productIdentifier;

    /*
     * Resource Location Normalized.
     */
    private String resourceLocationNormalized;

    /*
     * Start date for the rating period when the service usage was rated for charges. The prices for Azure services are
     * determined for the rating period.
     */
    private OffsetDateTime servicePeriodStartDate;

    /*
     * End date for the period when the service usage was rated for charges. The prices for Azure services are
     * determined based on the rating period.
     */
    private OffsetDateTime servicePeriodEndDate;

    /*
     * Identifier of the customer's AAD tenant.
     */
    private String customerTenantId;

    /*
     * Name of the customer's AAD tenant.
     */
    private String customerName;

    /*
     * Identifier for the partner's AAD tenant.
     */
    private String partnerTenantId;

    /*
     * Name of the partner' AAD tenant.
     */
    private String partnerName;

    /*
     * MPNId for the reseller associated with the subscription.
     */
    private String resellerMpnId;

    /*
     * Reseller Name.
     */
    private String resellerName;

    /*
     * Publisher Id.
     */
    private String publisherId;

    /*
     * Market Price that's charged for the usage.
     */
    private BigDecimal marketPrice;

    /*
     * Exchange Rate from pricing currency to billing currency.
     */
    private BigDecimal exchangeRatePricingToBilling;

    /*
     * The amount of PayG cost before tax in billing currency.
     */
    private BigDecimal paygCostInBillingCurrency;

    /*
     * The amount of PayG cost before tax in US Dollar currency.
     */
    private BigDecimal paygCostInUsd;

    /*
     * Rate of discount applied if there is a partner earned credit (PEC) based on partner admin link access.
     */
    private BigDecimal partnerEarnedCreditRate;

    /*
     * Flag to indicate if partner earned credit has been applied or not.
     */
    private String partnerEarnedCreditApplied;

    /*
     * Retail price for the resource.
     */
    private BigDecimal payGPrice;

    /*
     * Unique identifier for the applicable benefit.
     */
    private String benefitId;

    /*
     * Name of the applicable benefit.
     */
    private String benefitName;

    /*
     * Identifier for Product Category or Line Of Business, Ex - Azure, Microsoft 365, AWS e.t.c
     */
    private String provider;

    /*
     * Name for Cost Allocation Rule.
     */
    private String costAllocationRuleName;

    /**
     * Creates an instance of ModernUsageDetailProperties class.
     */
    public ModernUsageDetailProperties() {
    }

    /**
     * Get the billingAccountId property: Billing Account identifier.
     * 
     * @return the billingAccountId value.
     */
    public String billingAccountId() {
        return this.billingAccountId;
    }

    /**
     * Get the effectivePrice property: Effective Price that's charged for the usage.
     * 
     * @return the effectivePrice value.
     */
    public BigDecimal effectivePrice() {
        return this.effectivePrice;
    }

    /**
     * Get the pricingModel property: Identifier that indicates how the meter is priced.
     * 
     * @return the pricingModel value.
     */
    public PricingModelType pricingModel() {
        return this.pricingModel;
    }

    /**
     * Get the billingAccountName property: Name of the Billing Account.
     * 
     * @return the billingAccountName value.
     */
    public String billingAccountName() {
        return this.billingAccountName;
    }

    /**
     * Get the billingPeriodStartDate property: Billing Period Start Date as in the invoice.
     * 
     * @return the billingPeriodStartDate value.
     */
    public OffsetDateTime billingPeriodStartDate() {
        return this.billingPeriodStartDate;
    }

    /**
     * Get the billingPeriodEndDate property: Billing Period End Date as in the invoice.
     * 
     * @return the billingPeriodEndDate value.
     */
    public OffsetDateTime billingPeriodEndDate() {
        return this.billingPeriodEndDate;
    }

    /**
     * Get the billingProfileId property: Identifier for the billing profile that groups costs across invoices in the a
     * singular billing currency across across the customers who have onboarded the Microsoft customer agreement and the
     * customers in CSP who have made entitlement purchases like SaaS, Marketplace, RI, etc.
     * 
     * @return the billingProfileId value.
     */
    public String billingProfileId() {
        return this.billingProfileId;
    }

    /**
     * Get the billingProfileName property: Name of the billing profile that groups costs across invoices in the a
     * singular billing currency across across the customers who have onboarded the Microsoft customer agreement and the
     * customers in CSP who have made entitlement purchases like SaaS, Marketplace, RI, etc.
     * 
     * @return the billingProfileName value.
     */
    public String billingProfileName() {
        return this.billingProfileName;
    }

    /**
     * Get the subscriptionGuid property: Unique Microsoft generated identifier for the Azure Subscription.
     * 
     * @return the subscriptionGuid value.
     */
    public String subscriptionGuid() {
        return this.subscriptionGuid;
    }

    /**
     * Get the subscriptionName property: Name of the Azure Subscription.
     * 
     * @return the subscriptionName value.
     */
    public String subscriptionName() {
        return this.subscriptionName;
    }

    /**
     * Get the date property: Date for the usage record.
     * 
     * @return the date value.
     */
    public OffsetDateTime date() {
        return this.date;
    }

    /**
     * Get the product property: Name of the product that has accrued charges by consumption or purchase as listed in
     * the invoice. Not available for Marketplace.
     * 
     * @return the product value.
     */
    public String product() {
        return this.product;
    }

    /**
     * Get the meterId property: The meter id (GUID). Not available for marketplace. For reserved instance this
     * represents the primary meter for which the reservation was purchased. For the actual VM Size for which the
     * reservation is purchased see productOrderName.
     * 
     * @return the meterId value.
     */
    public UUID meterId() {
        return this.meterId;
    }

    /**
     * Get the meterName property: Identifies the name of the meter against which consumption is measured.
     * 
     * @return the meterName value.
     */
    public String meterName() {
        return this.meterName;
    }

    /**
     * Get the meterRegion property: Identifies the location of the datacenter for certain services that are priced
     * based on datacenter location.
     * 
     * @return the meterRegion value.
     */
    public String meterRegion() {
        return this.meterRegion;
    }

    /**
     * Get the meterCategory property: Identifies the top-level service for the usage.
     * 
     * @return the meterCategory value.
     */
    public String meterCategory() {
        return this.meterCategory;
    }

    /**
     * Get the meterSubCategory property: Defines the type or sub-category of Azure service that can affect the rate.
     * 
     * @return the meterSubCategory value.
     */
    public String meterSubCategory() {
        return this.meterSubCategory;
    }

    /**
     * Get the serviceFamily property: List the service family for the product purchased or charged (Example: Storage ;
     * Compute).
     * 
     * @return the serviceFamily value.
     */
    public String serviceFamily() {
        return this.serviceFamily;
    }

    /**
     * Get the quantity property: Measure the quantity purchased or consumed.The amount of the meter used during the
     * billing period.
     * 
     * @return the quantity value.
     */
    public BigDecimal quantity() {
        return this.quantity;
    }

    /**
     * Get the unitOfMeasure property: Identifies the Unit that the service is charged in. For example, GB, hours,
     * 10,000 s.
     * 
     * @return the unitOfMeasure value.
     */
    public String unitOfMeasure() {
        return this.unitOfMeasure;
    }

    /**
     * Get the instanceName property: Instance Name.
     * 
     * @return the instanceName value.
     */
    public String instanceName() {
        return this.instanceName;
    }

    /**
     * Get the costInUsd property: Estimated extendedCost or blended cost before tax in USD.
     * 
     * @return the costInUsd value.
     */
    public BigDecimal costInUsd() {
        return this.costInUsd;
    }

    /**
     * Get the unitPrice property: Unit Price is the price applicable to you. (your EA or other contract price).
     * 
     * @return the unitPrice value.
     */
    public BigDecimal unitPrice() {
        return this.unitPrice;
    }

    /**
     * Get the billingCurrencyCode property: The currency defining the billed cost.
     * 
     * @return the billingCurrencyCode value.
     */
    public String billingCurrencyCode() {
        return this.billingCurrencyCode;
    }

    /**
     * Get the resourceLocation property: Name of the resource location.
     * 
     * @return the resourceLocation value.
     */
    public String resourceLocation() {
        return this.resourceLocation;
    }

    /**
     * Get the consumedService property: Consumed service name. Name of the azure resource provider that emits the usage
     * or was purchased. This value is not provided for marketplace usage.
     * 
     * @return the consumedService value.
     */
    public String consumedService() {
        return this.consumedService;
    }

    /**
     * Get the serviceInfo1 property: Service-specific metadata.
     * 
     * @return the serviceInfo1 value.
     */
    public String serviceInfo1() {
        return this.serviceInfo1;
    }

    /**
     * Get the serviceInfo2 property: Legacy field with optional service-specific metadata.
     * 
     * @return the serviceInfo2 value.
     */
    public String serviceInfo2() {
        return this.serviceInfo2;
    }

    /**
     * Get the additionalInfo property: Additional details of this usage item. Use this field to get usage line item
     * specific details such as the actual VM Size (ServiceType) or the ratio in which the reservation discount is
     * applied.
     * 
     * @return the additionalInfo value.
     */
    public String additionalInfo() {
        return this.additionalInfo;
    }

    /**
     * Get the invoiceSectionId property: Identifier of the project that is being charged in the invoice. Not applicable
     * for Microsoft Customer Agreements onboarded by partners.
     * 
     * @return the invoiceSectionId value.
     */
    public String invoiceSectionId() {
        return this.invoiceSectionId;
    }

    /**
     * Get the invoiceSectionName property: Name of the project that is being charged in the invoice. Not applicable for
     * Microsoft Customer Agreements onboarded by partners.
     * 
     * @return the invoiceSectionName value.
     */
    public String invoiceSectionName() {
        return this.invoiceSectionName;
    }

    /**
     * Get the costCenter property: The cost center of this department if it is a department and a cost center is
     * provided.
     * 
     * @return the costCenter value.
     */
    public String costCenter() {
        return this.costCenter;
    }

    /**
     * Get the resourceGroup property: Name of the Azure resource group used for cohesive lifecycle management of
     * resources.
     * 
     * @return the resourceGroup value.
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }

    /**
     * Get the reservationId property: ARM resource id of the reservation. Only applies to records relevant to
     * reservations.
     * 
     * @return the reservationId value.
     */
    public String reservationId() {
        return this.reservationId;
    }

    /**
     * Get the reservationName property: User provided display name of the reservation. Last known name for a particular
     * day is populated in the daily data. Only applies to records relevant to reservations.
     * 
     * @return the reservationName value.
     */
    public String reservationName() {
        return this.reservationName;
    }

    /**
     * Get the productOrderId property: The identifier for the asset or Azure plan name that the subscription belongs
     * to. For example: Azure Plan. For reservations this is the Reservation Order ID.
     * 
     * @return the productOrderId value.
     */
    public String productOrderId() {
        return this.productOrderId;
    }

    /**
     * Get the productOrderName property: Product Order Name. For reservations this is the SKU that was purchased.
     * 
     * @return the productOrderName value.
     */
    public String productOrderName() {
        return this.productOrderName;
    }

    /**
     * Get the isAzureCreditEligible property: Determines if the cost is eligible to be paid for using Azure credits.
     * 
     * @return the isAzureCreditEligible value.
     */
    public Boolean isAzureCreditEligible() {
        return this.isAzureCreditEligible;
    }

    /**
     * Get the term property: Term (in months). Displays the term for the validity of the offer. For example. In case of
     * reserved instances it displays 12 months for yearly term of reserved instance. For one time purchases or
     * recurring purchases, the terms displays 1 month; This is not applicable for Azure consumption.
     * 
     * @return the term value.
     */
    public String term() {
        return this.term;
    }

    /**
     * Get the publisherName property: Name of the publisher of the service including Microsoft or Third Party
     * publishers.
     * 
     * @return the publisherName value.
     */
    public String publisherName() {
        return this.publisherName;
    }

    /**
     * Get the publisherType property: Type of publisher that identifies if the publisher is first party, third party
     * reseller or third party agency.
     * 
     * @return the publisherType value.
     */
    public String publisherType() {
        return this.publisherType;
    }

    /**
     * Get the chargeType property: Indicates a charge represents credits, usage, a Marketplace purchase, a reservation
     * fee, or a refund.
     * 
     * @return the chargeType value.
     */
    public String chargeType() {
        return this.chargeType;
    }

    /**
     * Get the frequency property: Indicates how frequently this charge will occur. OneTime for purchases which only
     * happen once, Monthly for fees which recur every month, and UsageBased for charges based on how much a service is
     * used.
     * 
     * @return the frequency value.
     */
    public String frequency() {
        return this.frequency;
    }

    /**
     * Get the costInBillingCurrency property: ExtendedCost or blended cost before tax in billed currency.
     * 
     * @return the costInBillingCurrency value.
     */
    public BigDecimal costInBillingCurrency() {
        return this.costInBillingCurrency;
    }

    /**
     * Get the costInPricingCurrency property: ExtendedCost or blended cost before tax in pricing currency to correlate
     * with prices.
     * 
     * @return the costInPricingCurrency value.
     */
    public BigDecimal costInPricingCurrency() {
        return this.costInPricingCurrency;
    }

    /**
     * Get the exchangeRate property: Exchange rate used in conversion from pricing currency to billing currency.
     * 
     * @return the exchangeRate value.
     */
    public String exchangeRate() {
        return this.exchangeRate;
    }

    /**
     * Get the exchangeRateDate property: Date on which exchange rate used in conversion from pricing currency to
     * billing currency.
     * 
     * @return the exchangeRateDate value.
     */
    public OffsetDateTime exchangeRateDate() {
        return this.exchangeRateDate;
    }

    /**
     * Get the invoiceId property: Invoice ID as on the invoice where the specific transaction appears.
     * 
     * @return the invoiceId value.
     */
    public String invoiceId() {
        return this.invoiceId;
    }

    /**
     * Get the previousInvoiceId property: Reference to an original invoice there is a refund (negative cost). This is
     * populated only when there is a refund.
     * 
     * @return the previousInvoiceId value.
     */
    public String previousInvoiceId() {
        return this.previousInvoiceId;
    }

    /**
     * Get the pricingCurrencyCode property: Pricing Billing Currency.
     * 
     * @return the pricingCurrencyCode value.
     */
    public String pricingCurrencyCode() {
        return this.pricingCurrencyCode;
    }

    /**
     * Get the productIdentifier property: Identifier for the product that has accrued charges by consumption or
     * purchase . This is the concatenated key of productId and SkuId in partner center.
     * 
     * @return the productIdentifier value.
     */
    public String productIdentifier() {
        return this.productIdentifier;
    }

    /**
     * Get the resourceLocationNormalized property: Resource Location Normalized.
     * 
     * @return the resourceLocationNormalized value.
     */
    public String resourceLocationNormalized() {
        return this.resourceLocationNormalized;
    }

    /**
     * Get the servicePeriodStartDate property: Start date for the rating period when the service usage was rated for
     * charges. The prices for Azure services are determined for the rating period.
     * 
     * @return the servicePeriodStartDate value.
     */
    public OffsetDateTime servicePeriodStartDate() {
        return this.servicePeriodStartDate;
    }

    /**
     * Get the servicePeriodEndDate property: End date for the period when the service usage was rated for charges. The
     * prices for Azure services are determined based on the rating period.
     * 
     * @return the servicePeriodEndDate value.
     */
    public OffsetDateTime servicePeriodEndDate() {
        return this.servicePeriodEndDate;
    }

    /**
     * Get the customerTenantId property: Identifier of the customer's AAD tenant.
     * 
     * @return the customerTenantId value.
     */
    public String customerTenantId() {
        return this.customerTenantId;
    }

    /**
     * Get the customerName property: Name of the customer's AAD tenant.
     * 
     * @return the customerName value.
     */
    public String customerName() {
        return this.customerName;
    }

    /**
     * Get the partnerTenantId property: Identifier for the partner's AAD tenant.
     * 
     * @return the partnerTenantId value.
     */
    public String partnerTenantId() {
        return this.partnerTenantId;
    }

    /**
     * Get the partnerName property: Name of the partner' AAD tenant.
     * 
     * @return the partnerName value.
     */
    public String partnerName() {
        return this.partnerName;
    }

    /**
     * Get the resellerMpnId property: MPNId for the reseller associated with the subscription.
     * 
     * @return the resellerMpnId value.
     */
    public String resellerMpnId() {
        return this.resellerMpnId;
    }

    /**
     * Get the resellerName property: Reseller Name.
     * 
     * @return the resellerName value.
     */
    public String resellerName() {
        return this.resellerName;
    }

    /**
     * Get the publisherId property: Publisher Id.
     * 
     * @return the publisherId value.
     */
    public String publisherId() {
        return this.publisherId;
    }

    /**
     * Get the marketPrice property: Market Price that's charged for the usage.
     * 
     * @return the marketPrice value.
     */
    public BigDecimal marketPrice() {
        return this.marketPrice;
    }

    /**
     * Get the exchangeRatePricingToBilling property: Exchange Rate from pricing currency to billing currency.
     * 
     * @return the exchangeRatePricingToBilling value.
     */
    public BigDecimal exchangeRatePricingToBilling() {
        return this.exchangeRatePricingToBilling;
    }

    /**
     * Get the paygCostInBillingCurrency property: The amount of PayG cost before tax in billing currency.
     * 
     * @return the paygCostInBillingCurrency value.
     */
    public BigDecimal paygCostInBillingCurrency() {
        return this.paygCostInBillingCurrency;
    }

    /**
     * Get the paygCostInUsd property: The amount of PayG cost before tax in US Dollar currency.
     * 
     * @return the paygCostInUsd value.
     */
    public BigDecimal paygCostInUsd() {
        return this.paygCostInUsd;
    }

    /**
     * Get the partnerEarnedCreditRate property: Rate of discount applied if there is a partner earned credit (PEC)
     * based on partner admin link access.
     * 
     * @return the partnerEarnedCreditRate value.
     */
    public BigDecimal partnerEarnedCreditRate() {
        return this.partnerEarnedCreditRate;
    }

    /**
     * Get the partnerEarnedCreditApplied property: Flag to indicate if partner earned credit has been applied or not.
     * 
     * @return the partnerEarnedCreditApplied value.
     */
    public String partnerEarnedCreditApplied() {
        return this.partnerEarnedCreditApplied;
    }

    /**
     * Get the payGPrice property: Retail price for the resource.
     * 
     * @return the payGPrice value.
     */
    public BigDecimal payGPrice() {
        return this.payGPrice;
    }

    /**
     * Get the benefitId property: Unique identifier for the applicable benefit.
     * 
     * @return the benefitId value.
     */
    public String benefitId() {
        return this.benefitId;
    }

    /**
     * Get the benefitName property: Name of the applicable benefit.
     * 
     * @return the benefitName value.
     */
    public String benefitName() {
        return this.benefitName;
    }

    /**
     * Get the provider property: Identifier for Product Category or Line Of Business, Ex - Azure, Microsoft 365, AWS
     * e.t.c.
     * 
     * @return the provider value.
     */
    public String provider() {
        return this.provider;
    }

    /**
     * Get the costAllocationRuleName property: Name for Cost Allocation Rule.
     * 
     * @return the costAllocationRuleName value.
     */
    public String costAllocationRuleName() {
        return this.costAllocationRuleName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ModernUsageDetailProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ModernUsageDetailProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ModernUsageDetailProperties.
     */
    public static ModernUsageDetailProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ModernUsageDetailProperties deserializedModernUsageDetailProperties = new ModernUsageDetailProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("billingAccountId".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.billingAccountId = reader.getString();
                } else if ("effectivePrice".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.effectivePrice
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("pricingModel".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.pricingModel
                        = PricingModelType.fromString(reader.getString());
                } else if ("billingAccountName".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.billingAccountName = reader.getString();
                } else if ("billingPeriodStartDate".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.billingPeriodStartDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("billingPeriodEndDate".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.billingPeriodEndDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("billingProfileId".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.billingProfileId = reader.getString();
                } else if ("billingProfileName".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.billingProfileName = reader.getString();
                } else if ("subscriptionGuid".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.subscriptionGuid = reader.getString();
                } else if ("subscriptionName".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.subscriptionName = reader.getString();
                } else if ("date".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.date = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("product".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.product = reader.getString();
                } else if ("meterId".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.meterId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("meterName".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.meterName = reader.getString();
                } else if ("meterRegion".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.meterRegion = reader.getString();
                } else if ("meterCategory".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.meterCategory = reader.getString();
                } else if ("meterSubCategory".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.meterSubCategory = reader.getString();
                } else if ("serviceFamily".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.serviceFamily = reader.getString();
                } else if ("quantity".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.quantity
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("unitOfMeasure".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.unitOfMeasure = reader.getString();
                } else if ("instanceName".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.instanceName = reader.getString();
                } else if ("costInUSD".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.costInUsd
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("unitPrice".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.unitPrice
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("billingCurrencyCode".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.billingCurrencyCode = reader.getString();
                } else if ("resourceLocation".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.resourceLocation = reader.getString();
                } else if ("consumedService".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.consumedService = reader.getString();
                } else if ("serviceInfo1".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.serviceInfo1 = reader.getString();
                } else if ("serviceInfo2".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.serviceInfo2 = reader.getString();
                } else if ("additionalInfo".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.additionalInfo = reader.getString();
                } else if ("invoiceSectionId".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.invoiceSectionId = reader.getString();
                } else if ("invoiceSectionName".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.invoiceSectionName = reader.getString();
                } else if ("costCenter".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.costCenter = reader.getString();
                } else if ("resourceGroup".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.resourceGroup = reader.getString();
                } else if ("reservationId".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.reservationId = reader.getString();
                } else if ("reservationName".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.reservationName = reader.getString();
                } else if ("productOrderId".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.productOrderId = reader.getString();
                } else if ("productOrderName".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.productOrderName = reader.getString();
                } else if ("isAzureCreditEligible".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.isAzureCreditEligible
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("term".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.term = reader.getString();
                } else if ("publisherName".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.publisherName = reader.getString();
                } else if ("publisherType".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.publisherType = reader.getString();
                } else if ("chargeType".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.chargeType = reader.getString();
                } else if ("frequency".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.frequency = reader.getString();
                } else if ("costInBillingCurrency".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.costInBillingCurrency
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("costInPricingCurrency".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.costInPricingCurrency
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("exchangeRate".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.exchangeRate = reader.getString();
                } else if ("exchangeRateDate".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.exchangeRateDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("invoiceId".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.invoiceId = reader.getString();
                } else if ("previousInvoiceId".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.previousInvoiceId = reader.getString();
                } else if ("pricingCurrencyCode".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.pricingCurrencyCode = reader.getString();
                } else if ("productIdentifier".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.productIdentifier = reader.getString();
                } else if ("resourceLocationNormalized".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.resourceLocationNormalized = reader.getString();
                } else if ("servicePeriodStartDate".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.servicePeriodStartDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("servicePeriodEndDate".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.servicePeriodEndDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("customerTenantId".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.customerTenantId = reader.getString();
                } else if ("customerName".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.customerName = reader.getString();
                } else if ("partnerTenantId".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.partnerTenantId = reader.getString();
                } else if ("partnerName".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.partnerName = reader.getString();
                } else if ("resellerMpnId".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.resellerMpnId = reader.getString();
                } else if ("resellerName".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.resellerName = reader.getString();
                } else if ("publisherId".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.publisherId = reader.getString();
                } else if ("marketPrice".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.marketPrice
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("exchangeRatePricingToBilling".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.exchangeRatePricingToBilling
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("paygCostInBillingCurrency".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.paygCostInBillingCurrency
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("paygCostInUSD".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.paygCostInUsd
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("partnerEarnedCreditRate".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.partnerEarnedCreditRate
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("partnerEarnedCreditApplied".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.partnerEarnedCreditApplied = reader.getString();
                } else if ("payGPrice".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.payGPrice
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("benefitId".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.benefitId = reader.getString();
                } else if ("benefitName".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.benefitName = reader.getString();
                } else if ("provider".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.provider = reader.getString();
                } else if ("costAllocationRuleName".equals(fieldName)) {
                    deserializedModernUsageDetailProperties.costAllocationRuleName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedModernUsageDetailProperties;
        });
    }
}
