/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.consumption.v2018_10_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.consumption.v2018_10_01.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Charges.
 */
public class ChargesInner {
    /** The Retrofit service to perform REST calls. */
    private ChargesService service;
    /** The service client containing this operation class. */
    private ConsumptionManagementClientImpl client;

    /**
     * Initializes an instance of ChargesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ChargesInner(Retrofit retrofit, ConsumptionManagementClientImpl client) {
        this.service = retrofit.create(ChargesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Charges to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ChargesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.consumption.v2018_10_01.Charges listByEnrollmentAccount" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}/providers/Microsoft.Consumption/charges")
        Observable<Response<ResponseBody>> listByEnrollmentAccount(@Path("billingAccountId") String billingAccountId, @Path("enrollmentAccountId") String enrollmentAccountId, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.consumption.v2018_10_01.Charges listForBillingPeriodByEnrollmentAccount" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/charges")
        Observable<Response<ResponseBody>> listForBillingPeriodByEnrollmentAccount(@Path("billingAccountId") String billingAccountId, @Path("enrollmentAccountId") String enrollmentAccountId, @Path("billingPeriodName") String billingPeriodName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.consumption.v2018_10_01.Charges listByDepartment" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}/providers/Microsoft.Consumption/charges")
        Observable<Response<ResponseBody>> listByDepartment(@Path("billingAccountId") String billingAccountId, @Path("departmentId") String departmentId, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.consumption.v2018_10_01.Charges listForBillingPeriodByDepartment" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/charges")
        Observable<Response<ResponseBody>> listForBillingPeriodByDepartment(@Path("billingAccountId") String billingAccountId, @Path("departmentId") String departmentId, @Path("billingPeriodName") String billingPeriodName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists the charges by enrollmentAccountId.
     *
     * @param billingAccountId BillingAccount ID
     * @param enrollmentAccountId EnrollmentAccount ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ChargesListResultInner object if successful.
     */
    public ChargesListResultInner listByEnrollmentAccount(String billingAccountId, String enrollmentAccountId) {
        return listByEnrollmentAccountWithServiceResponseAsync(billingAccountId, enrollmentAccountId).toBlocking().single().body();
    }

    /**
     * Lists the charges by enrollmentAccountId.
     *
     * @param billingAccountId BillingAccount ID
     * @param enrollmentAccountId EnrollmentAccount ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ChargesListResultInner> listByEnrollmentAccountAsync(String billingAccountId, String enrollmentAccountId, final ServiceCallback<ChargesListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByEnrollmentAccountWithServiceResponseAsync(billingAccountId, enrollmentAccountId), serviceCallback);
    }

    /**
     * Lists the charges by enrollmentAccountId.
     *
     * @param billingAccountId BillingAccount ID
     * @param enrollmentAccountId EnrollmentAccount ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChargesListResultInner object
     */
    public Observable<ChargesListResultInner> listByEnrollmentAccountAsync(String billingAccountId, String enrollmentAccountId) {
        return listByEnrollmentAccountWithServiceResponseAsync(billingAccountId, enrollmentAccountId).map(new Func1<ServiceResponse<ChargesListResultInner>, ChargesListResultInner>() {
            @Override
            public ChargesListResultInner call(ServiceResponse<ChargesListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the charges by enrollmentAccountId.
     *
     * @param billingAccountId BillingAccount ID
     * @param enrollmentAccountId EnrollmentAccount ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChargesListResultInner object
     */
    public Observable<ServiceResponse<ChargesListResultInner>> listByEnrollmentAccountWithServiceResponseAsync(String billingAccountId, String enrollmentAccountId) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (enrollmentAccountId == null) {
            throw new IllegalArgumentException("Parameter enrollmentAccountId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.listByEnrollmentAccount(billingAccountId, enrollmentAccountId, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ChargesListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<ChargesListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ChargesListResultInner> clientResponse = listByEnrollmentAccountDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the charges by enrollmentAccountId.
     *
     * @param billingAccountId BillingAccount ID
     * @param enrollmentAccountId EnrollmentAccount ID
     * @param filter May be used to filter charges by properties/usageEnd (Utc time), properties/usageStart (Utc time). The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ChargesListResultInner object if successful.
     */
    public ChargesListResultInner listByEnrollmentAccount(String billingAccountId, String enrollmentAccountId, String filter) {
        return listByEnrollmentAccountWithServiceResponseAsync(billingAccountId, enrollmentAccountId, filter).toBlocking().single().body();
    }

    /**
     * Lists the charges by enrollmentAccountId.
     *
     * @param billingAccountId BillingAccount ID
     * @param enrollmentAccountId EnrollmentAccount ID
     * @param filter May be used to filter charges by properties/usageEnd (Utc time), properties/usageStart (Utc time). The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ChargesListResultInner> listByEnrollmentAccountAsync(String billingAccountId, String enrollmentAccountId, String filter, final ServiceCallback<ChargesListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByEnrollmentAccountWithServiceResponseAsync(billingAccountId, enrollmentAccountId, filter), serviceCallback);
    }

    /**
     * Lists the charges by enrollmentAccountId.
     *
     * @param billingAccountId BillingAccount ID
     * @param enrollmentAccountId EnrollmentAccount ID
     * @param filter May be used to filter charges by properties/usageEnd (Utc time), properties/usageStart (Utc time). The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChargesListResultInner object
     */
    public Observable<ChargesListResultInner> listByEnrollmentAccountAsync(String billingAccountId, String enrollmentAccountId, String filter) {
        return listByEnrollmentAccountWithServiceResponseAsync(billingAccountId, enrollmentAccountId, filter).map(new Func1<ServiceResponse<ChargesListResultInner>, ChargesListResultInner>() {
            @Override
            public ChargesListResultInner call(ServiceResponse<ChargesListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the charges by enrollmentAccountId.
     *
     * @param billingAccountId BillingAccount ID
     * @param enrollmentAccountId EnrollmentAccount ID
     * @param filter May be used to filter charges by properties/usageEnd (Utc time), properties/usageStart (Utc time). The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChargesListResultInner object
     */
    public Observable<ServiceResponse<ChargesListResultInner>> listByEnrollmentAccountWithServiceResponseAsync(String billingAccountId, String enrollmentAccountId, String filter) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (enrollmentAccountId == null) {
            throw new IllegalArgumentException("Parameter enrollmentAccountId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByEnrollmentAccount(billingAccountId, enrollmentAccountId, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ChargesListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<ChargesListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ChargesListResultInner> clientResponse = listByEnrollmentAccountDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ChargesListResultInner> listByEnrollmentAccountDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ChargesListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ChargesListResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the charges based on enrollmentAccountId by billing period.
     *
     * @param billingAccountId BillingAccount ID
     * @param enrollmentAccountId EnrollmentAccount ID
     * @param billingPeriodName Billing Period Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ChargeSummaryInner object if successful.
     */
    public ChargeSummaryInner listForBillingPeriodByEnrollmentAccount(String billingAccountId, String enrollmentAccountId, String billingPeriodName) {
        return listForBillingPeriodByEnrollmentAccountWithServiceResponseAsync(billingAccountId, enrollmentAccountId, billingPeriodName).toBlocking().single().body();
    }

    /**
     * Lists the charges based on enrollmentAccountId by billing period.
     *
     * @param billingAccountId BillingAccount ID
     * @param enrollmentAccountId EnrollmentAccount ID
     * @param billingPeriodName Billing Period Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ChargeSummaryInner> listForBillingPeriodByEnrollmentAccountAsync(String billingAccountId, String enrollmentAccountId, String billingPeriodName, final ServiceCallback<ChargeSummaryInner> serviceCallback) {
        return ServiceFuture.fromResponse(listForBillingPeriodByEnrollmentAccountWithServiceResponseAsync(billingAccountId, enrollmentAccountId, billingPeriodName), serviceCallback);
    }

    /**
     * Lists the charges based on enrollmentAccountId by billing period.
     *
     * @param billingAccountId BillingAccount ID
     * @param enrollmentAccountId EnrollmentAccount ID
     * @param billingPeriodName Billing Period Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChargeSummaryInner object
     */
    public Observable<ChargeSummaryInner> listForBillingPeriodByEnrollmentAccountAsync(String billingAccountId, String enrollmentAccountId, String billingPeriodName) {
        return listForBillingPeriodByEnrollmentAccountWithServiceResponseAsync(billingAccountId, enrollmentAccountId, billingPeriodName).map(new Func1<ServiceResponse<ChargeSummaryInner>, ChargeSummaryInner>() {
            @Override
            public ChargeSummaryInner call(ServiceResponse<ChargeSummaryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the charges based on enrollmentAccountId by billing period.
     *
     * @param billingAccountId BillingAccount ID
     * @param enrollmentAccountId EnrollmentAccount ID
     * @param billingPeriodName Billing Period Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChargeSummaryInner object
     */
    public Observable<ServiceResponse<ChargeSummaryInner>> listForBillingPeriodByEnrollmentAccountWithServiceResponseAsync(String billingAccountId, String enrollmentAccountId, String billingPeriodName) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (enrollmentAccountId == null) {
            throw new IllegalArgumentException("Parameter enrollmentAccountId is required and cannot be null.");
        }
        if (billingPeriodName == null) {
            throw new IllegalArgumentException("Parameter billingPeriodName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.listForBillingPeriodByEnrollmentAccount(billingAccountId, enrollmentAccountId, billingPeriodName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ChargeSummaryInner>>>() {
                @Override
                public Observable<ServiceResponse<ChargeSummaryInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ChargeSummaryInner> clientResponse = listForBillingPeriodByEnrollmentAccountDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the charges based on enrollmentAccountId by billing period.
     *
     * @param billingAccountId BillingAccount ID
     * @param enrollmentAccountId EnrollmentAccount ID
     * @param billingPeriodName Billing Period Name.
     * @param filter May be used to filter charges by properties/usageEnd (Utc time), properties/usageStart (Utc time). The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ChargeSummaryInner object if successful.
     */
    public ChargeSummaryInner listForBillingPeriodByEnrollmentAccount(String billingAccountId, String enrollmentAccountId, String billingPeriodName, String filter) {
        return listForBillingPeriodByEnrollmentAccountWithServiceResponseAsync(billingAccountId, enrollmentAccountId, billingPeriodName, filter).toBlocking().single().body();
    }

    /**
     * Lists the charges based on enrollmentAccountId by billing period.
     *
     * @param billingAccountId BillingAccount ID
     * @param enrollmentAccountId EnrollmentAccount ID
     * @param billingPeriodName Billing Period Name.
     * @param filter May be used to filter charges by properties/usageEnd (Utc time), properties/usageStart (Utc time). The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ChargeSummaryInner> listForBillingPeriodByEnrollmentAccountAsync(String billingAccountId, String enrollmentAccountId, String billingPeriodName, String filter, final ServiceCallback<ChargeSummaryInner> serviceCallback) {
        return ServiceFuture.fromResponse(listForBillingPeriodByEnrollmentAccountWithServiceResponseAsync(billingAccountId, enrollmentAccountId, billingPeriodName, filter), serviceCallback);
    }

    /**
     * Lists the charges based on enrollmentAccountId by billing period.
     *
     * @param billingAccountId BillingAccount ID
     * @param enrollmentAccountId EnrollmentAccount ID
     * @param billingPeriodName Billing Period Name.
     * @param filter May be used to filter charges by properties/usageEnd (Utc time), properties/usageStart (Utc time). The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChargeSummaryInner object
     */
    public Observable<ChargeSummaryInner> listForBillingPeriodByEnrollmentAccountAsync(String billingAccountId, String enrollmentAccountId, String billingPeriodName, String filter) {
        return listForBillingPeriodByEnrollmentAccountWithServiceResponseAsync(billingAccountId, enrollmentAccountId, billingPeriodName, filter).map(new Func1<ServiceResponse<ChargeSummaryInner>, ChargeSummaryInner>() {
            @Override
            public ChargeSummaryInner call(ServiceResponse<ChargeSummaryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the charges based on enrollmentAccountId by billing period.
     *
     * @param billingAccountId BillingAccount ID
     * @param enrollmentAccountId EnrollmentAccount ID
     * @param billingPeriodName Billing Period Name.
     * @param filter May be used to filter charges by properties/usageEnd (Utc time), properties/usageStart (Utc time). The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChargeSummaryInner object
     */
    public Observable<ServiceResponse<ChargeSummaryInner>> listForBillingPeriodByEnrollmentAccountWithServiceResponseAsync(String billingAccountId, String enrollmentAccountId, String billingPeriodName, String filter) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (enrollmentAccountId == null) {
            throw new IllegalArgumentException("Parameter enrollmentAccountId is required and cannot be null.");
        }
        if (billingPeriodName == null) {
            throw new IllegalArgumentException("Parameter billingPeriodName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listForBillingPeriodByEnrollmentAccount(billingAccountId, enrollmentAccountId, billingPeriodName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ChargeSummaryInner>>>() {
                @Override
                public Observable<ServiceResponse<ChargeSummaryInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ChargeSummaryInner> clientResponse = listForBillingPeriodByEnrollmentAccountDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ChargeSummaryInner> listForBillingPeriodByEnrollmentAccountDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ChargeSummaryInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ChargeSummaryInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the charges by departmentId.
     *
     * @param billingAccountId BillingAccount ID
     * @param departmentId Department ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ChargesListResultInner object if successful.
     */
    public ChargesListResultInner listByDepartment(String billingAccountId, String departmentId) {
        return listByDepartmentWithServiceResponseAsync(billingAccountId, departmentId).toBlocking().single().body();
    }

    /**
     * Lists the charges by departmentId.
     *
     * @param billingAccountId BillingAccount ID
     * @param departmentId Department ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ChargesListResultInner> listByDepartmentAsync(String billingAccountId, String departmentId, final ServiceCallback<ChargesListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByDepartmentWithServiceResponseAsync(billingAccountId, departmentId), serviceCallback);
    }

    /**
     * Lists the charges by departmentId.
     *
     * @param billingAccountId BillingAccount ID
     * @param departmentId Department ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChargesListResultInner object
     */
    public Observable<ChargesListResultInner> listByDepartmentAsync(String billingAccountId, String departmentId) {
        return listByDepartmentWithServiceResponseAsync(billingAccountId, departmentId).map(new Func1<ServiceResponse<ChargesListResultInner>, ChargesListResultInner>() {
            @Override
            public ChargesListResultInner call(ServiceResponse<ChargesListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the charges by departmentId.
     *
     * @param billingAccountId BillingAccount ID
     * @param departmentId Department ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChargesListResultInner object
     */
    public Observable<ServiceResponse<ChargesListResultInner>> listByDepartmentWithServiceResponseAsync(String billingAccountId, String departmentId) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (departmentId == null) {
            throw new IllegalArgumentException("Parameter departmentId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.listByDepartment(billingAccountId, departmentId, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ChargesListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<ChargesListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ChargesListResultInner> clientResponse = listByDepartmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the charges by departmentId.
     *
     * @param billingAccountId BillingAccount ID
     * @param departmentId Department ID
     * @param filter May be used to filter charges by properties/usageEnd (Utc time), properties/usageStart (Utc time). The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ChargesListResultInner object if successful.
     */
    public ChargesListResultInner listByDepartment(String billingAccountId, String departmentId, String filter) {
        return listByDepartmentWithServiceResponseAsync(billingAccountId, departmentId, filter).toBlocking().single().body();
    }

    /**
     * Lists the charges by departmentId.
     *
     * @param billingAccountId BillingAccount ID
     * @param departmentId Department ID
     * @param filter May be used to filter charges by properties/usageEnd (Utc time), properties/usageStart (Utc time). The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ChargesListResultInner> listByDepartmentAsync(String billingAccountId, String departmentId, String filter, final ServiceCallback<ChargesListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByDepartmentWithServiceResponseAsync(billingAccountId, departmentId, filter), serviceCallback);
    }

    /**
     * Lists the charges by departmentId.
     *
     * @param billingAccountId BillingAccount ID
     * @param departmentId Department ID
     * @param filter May be used to filter charges by properties/usageEnd (Utc time), properties/usageStart (Utc time). The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChargesListResultInner object
     */
    public Observable<ChargesListResultInner> listByDepartmentAsync(String billingAccountId, String departmentId, String filter) {
        return listByDepartmentWithServiceResponseAsync(billingAccountId, departmentId, filter).map(new Func1<ServiceResponse<ChargesListResultInner>, ChargesListResultInner>() {
            @Override
            public ChargesListResultInner call(ServiceResponse<ChargesListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the charges by departmentId.
     *
     * @param billingAccountId BillingAccount ID
     * @param departmentId Department ID
     * @param filter May be used to filter charges by properties/usageEnd (Utc time), properties/usageStart (Utc time). The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChargesListResultInner object
     */
    public Observable<ServiceResponse<ChargesListResultInner>> listByDepartmentWithServiceResponseAsync(String billingAccountId, String departmentId, String filter) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (departmentId == null) {
            throw new IllegalArgumentException("Parameter departmentId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByDepartment(billingAccountId, departmentId, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ChargesListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<ChargesListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ChargesListResultInner> clientResponse = listByDepartmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ChargesListResultInner> listByDepartmentDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ChargesListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ChargesListResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the charges based on departmentId by billing period.
     *
     * @param billingAccountId BillingAccount ID
     * @param departmentId Department ID
     * @param billingPeriodName Billing Period Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ChargeSummaryInner object if successful.
     */
    public ChargeSummaryInner listForBillingPeriodByDepartment(String billingAccountId, String departmentId, String billingPeriodName) {
        return listForBillingPeriodByDepartmentWithServiceResponseAsync(billingAccountId, departmentId, billingPeriodName).toBlocking().single().body();
    }

    /**
     * Lists the charges based on departmentId by billing period.
     *
     * @param billingAccountId BillingAccount ID
     * @param departmentId Department ID
     * @param billingPeriodName Billing Period Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ChargeSummaryInner> listForBillingPeriodByDepartmentAsync(String billingAccountId, String departmentId, String billingPeriodName, final ServiceCallback<ChargeSummaryInner> serviceCallback) {
        return ServiceFuture.fromResponse(listForBillingPeriodByDepartmentWithServiceResponseAsync(billingAccountId, departmentId, billingPeriodName), serviceCallback);
    }

    /**
     * Lists the charges based on departmentId by billing period.
     *
     * @param billingAccountId BillingAccount ID
     * @param departmentId Department ID
     * @param billingPeriodName Billing Period Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChargeSummaryInner object
     */
    public Observable<ChargeSummaryInner> listForBillingPeriodByDepartmentAsync(String billingAccountId, String departmentId, String billingPeriodName) {
        return listForBillingPeriodByDepartmentWithServiceResponseAsync(billingAccountId, departmentId, billingPeriodName).map(new Func1<ServiceResponse<ChargeSummaryInner>, ChargeSummaryInner>() {
            @Override
            public ChargeSummaryInner call(ServiceResponse<ChargeSummaryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the charges based on departmentId by billing period.
     *
     * @param billingAccountId BillingAccount ID
     * @param departmentId Department ID
     * @param billingPeriodName Billing Period Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChargeSummaryInner object
     */
    public Observable<ServiceResponse<ChargeSummaryInner>> listForBillingPeriodByDepartmentWithServiceResponseAsync(String billingAccountId, String departmentId, String billingPeriodName) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (departmentId == null) {
            throw new IllegalArgumentException("Parameter departmentId is required and cannot be null.");
        }
        if (billingPeriodName == null) {
            throw new IllegalArgumentException("Parameter billingPeriodName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.listForBillingPeriodByDepartment(billingAccountId, departmentId, billingPeriodName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ChargeSummaryInner>>>() {
                @Override
                public Observable<ServiceResponse<ChargeSummaryInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ChargeSummaryInner> clientResponse = listForBillingPeriodByDepartmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the charges based on departmentId by billing period.
     *
     * @param billingAccountId BillingAccount ID
     * @param departmentId Department ID
     * @param billingPeriodName Billing Period Name.
     * @param filter May be used to filter charges by properties/usageEnd (Utc time), properties/usageStart (Utc time). The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ChargeSummaryInner object if successful.
     */
    public ChargeSummaryInner listForBillingPeriodByDepartment(String billingAccountId, String departmentId, String billingPeriodName, String filter) {
        return listForBillingPeriodByDepartmentWithServiceResponseAsync(billingAccountId, departmentId, billingPeriodName, filter).toBlocking().single().body();
    }

    /**
     * Lists the charges based on departmentId by billing period.
     *
     * @param billingAccountId BillingAccount ID
     * @param departmentId Department ID
     * @param billingPeriodName Billing Period Name.
     * @param filter May be used to filter charges by properties/usageEnd (Utc time), properties/usageStart (Utc time). The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ChargeSummaryInner> listForBillingPeriodByDepartmentAsync(String billingAccountId, String departmentId, String billingPeriodName, String filter, final ServiceCallback<ChargeSummaryInner> serviceCallback) {
        return ServiceFuture.fromResponse(listForBillingPeriodByDepartmentWithServiceResponseAsync(billingAccountId, departmentId, billingPeriodName, filter), serviceCallback);
    }

    /**
     * Lists the charges based on departmentId by billing period.
     *
     * @param billingAccountId BillingAccount ID
     * @param departmentId Department ID
     * @param billingPeriodName Billing Period Name.
     * @param filter May be used to filter charges by properties/usageEnd (Utc time), properties/usageStart (Utc time). The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChargeSummaryInner object
     */
    public Observable<ChargeSummaryInner> listForBillingPeriodByDepartmentAsync(String billingAccountId, String departmentId, String billingPeriodName, String filter) {
        return listForBillingPeriodByDepartmentWithServiceResponseAsync(billingAccountId, departmentId, billingPeriodName, filter).map(new Func1<ServiceResponse<ChargeSummaryInner>, ChargeSummaryInner>() {
            @Override
            public ChargeSummaryInner call(ServiceResponse<ChargeSummaryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the charges based on departmentId by billing period.
     *
     * @param billingAccountId BillingAccount ID
     * @param departmentId Department ID
     * @param billingPeriodName Billing Period Name.
     * @param filter May be used to filter charges by properties/usageEnd (Utc time), properties/usageStart (Utc time). The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ChargeSummaryInner object
     */
    public Observable<ServiceResponse<ChargeSummaryInner>> listForBillingPeriodByDepartmentWithServiceResponseAsync(String billingAccountId, String departmentId, String billingPeriodName, String filter) {
        if (billingAccountId == null) {
            throw new IllegalArgumentException("Parameter billingAccountId is required and cannot be null.");
        }
        if (departmentId == null) {
            throw new IllegalArgumentException("Parameter departmentId is required and cannot be null.");
        }
        if (billingPeriodName == null) {
            throw new IllegalArgumentException("Parameter billingPeriodName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listForBillingPeriodByDepartment(billingAccountId, departmentId, billingPeriodName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ChargeSummaryInner>>>() {
                @Override
                public Observable<ServiceResponse<ChargeSummaryInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ChargeSummaryInner> clientResponse = listForBillingPeriodByDepartmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ChargeSummaryInner> listForBillingPeriodByDepartmentDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ChargeSummaryInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ChargeSummaryInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
