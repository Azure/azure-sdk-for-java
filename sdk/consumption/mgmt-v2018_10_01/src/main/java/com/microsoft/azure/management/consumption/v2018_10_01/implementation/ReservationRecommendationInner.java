/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.consumption.v2018_10_01.implementation;

import java.util.Map;
import java.util.UUID;
import java.math.BigDecimal;
import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;

/**
 * Reservation recommendation resource.
 */
@JsonFlatten
public class ReservationRecommendationInner {
    /**
     * Resource Id.
     */
    @JsonProperty(value = "id", access = JsonProperty.Access.WRITE_ONLY)
    private String id;

    /**
     * Resource name.
     */
    @JsonProperty(value = "name", access = JsonProperty.Access.WRITE_ONLY)
    private String name;

    /**
     * Resource type.
     */
    @JsonProperty(value = "type", access = JsonProperty.Access.WRITE_ONLY)
    private String type;

    /**
     * Resource tags.
     */
    @JsonProperty(value = "tags", access = JsonProperty.Access.WRITE_ONLY)
    private Map<String, String> tags;

    /**
     * Resource location.
     */
    @JsonProperty(value = "location", access = JsonProperty.Access.WRITE_ONLY)
    private String location;

    /**
     * Resource sku.
     */
    @JsonProperty(value = "sku", access = JsonProperty.Access.WRITE_ONLY)
    private String sku;

    /**
     * The number of days of usage to look back for recommendation.
     */
    @JsonProperty(value = "properties.lookBackPeriod", access = JsonProperty.Access.WRITE_ONLY)
    private String lookBackPeriod;

    /**
     * The meter id (GUID).
     */
    @JsonProperty(value = "properties.meterId", access = JsonProperty.Access.WRITE_ONLY)
    private UUID meterId;

    /**
     * RI recommendations in one or three year terms.
     */
    @JsonProperty(value = "properties.term", access = JsonProperty.Access.WRITE_ONLY)
    private String term;

    /**
     * The total amount of cost without reserved instances.
     */
    @JsonProperty(value = "properties.costWithNoReservedInstances", access = JsonProperty.Access.WRITE_ONLY)
    private BigDecimal costWithNoReservedInstances;

    /**
     * Recommended quality for reserved instances.
     */
    @JsonProperty(value = "properties.recommendedQuantity", access = JsonProperty.Access.WRITE_ONLY)
    private BigDecimal recommendedQuantity;

    /**
     * The total amount of cost with reserved instances.
     */
    @JsonProperty(value = "properties.totalCostWithReservedInstances", access = JsonProperty.Access.WRITE_ONLY)
    private BigDecimal totalCostWithReservedInstances;

    /**
     * Total estimated savings with reserved instances.
     */
    @JsonProperty(value = "properties.netSavings", access = JsonProperty.Access.WRITE_ONLY)
    private BigDecimal netSavings;

    /**
     * The usage date for looking back.
     */
    @JsonProperty(value = "properties.firstUsageDate", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime firstUsageDate;

    /**
     * Shared or single recommendation.
     */
    @JsonProperty(value = "properties.scope", access = JsonProperty.Access.WRITE_ONLY)
    private String scope;

    /**
     * Get resource Id.
     *
     * @return the id value
     */
    public String id() {
        return this.id;
    }

    /**
     * Get resource name.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Get resource type.
     *
     * @return the type value
     */
    public String type() {
        return this.type;
    }

    /**
     * Get resource tags.
     *
     * @return the tags value
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Get resource location.
     *
     * @return the location value
     */
    public String location() {
        return this.location;
    }

    /**
     * Get resource sku.
     *
     * @return the sku value
     */
    public String sku() {
        return this.sku;
    }

    /**
     * Get the number of days of usage to look back for recommendation.
     *
     * @return the lookBackPeriod value
     */
    public String lookBackPeriod() {
        return this.lookBackPeriod;
    }

    /**
     * Get the meter id (GUID).
     *
     * @return the meterId value
     */
    public UUID meterId() {
        return this.meterId;
    }

    /**
     * Get rI recommendations in one or three year terms.
     *
     * @return the term value
     */
    public String term() {
        return this.term;
    }

    /**
     * Get the total amount of cost without reserved instances.
     *
     * @return the costWithNoReservedInstances value
     */
    public BigDecimal costWithNoReservedInstances() {
        return this.costWithNoReservedInstances;
    }

    /**
     * Get recommended quality for reserved instances.
     *
     * @return the recommendedQuantity value
     */
    public BigDecimal recommendedQuantity() {
        return this.recommendedQuantity;
    }

    /**
     * Get the total amount of cost with reserved instances.
     *
     * @return the totalCostWithReservedInstances value
     */
    public BigDecimal totalCostWithReservedInstances() {
        return this.totalCostWithReservedInstances;
    }

    /**
     * Get total estimated savings with reserved instances.
     *
     * @return the netSavings value
     */
    public BigDecimal netSavings() {
        return this.netSavings;
    }

    /**
     * Get the usage date for looking back.
     *
     * @return the firstUsageDate value
     */
    public DateTime firstUsageDate() {
        return this.firstUsageDate;
    }

    /**
     * Get shared or single recommendation.
     *
     * @return the scope value
     */
    public String scope() {
        return this.scope;
    }

}
