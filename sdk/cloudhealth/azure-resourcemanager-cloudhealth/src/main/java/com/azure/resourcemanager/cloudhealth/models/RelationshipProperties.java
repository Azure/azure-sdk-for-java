// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * Relationship properties.
 */
@Fluent
public final class RelationshipProperties implements JsonSerializable<RelationshipProperties> {
    /*
     * The status of the last operation.
     */
    private HealthModelProvisioningState provisioningState;

    /*
     * Display name
     */
    private String displayName;

    /*
     * Resource name of the parent entity
     */
    private String parentEntityName;

    /*
     * Resource name of the child entity
     */
    private String childEntityName;

    /*
     * Optional set of labels (key-value pairs)
     */
    private Map<String, String> labels;

    /*
     * Discovered by which discovery rule. If set, the relationship cannot be deleted manually.
     */
    private String discoveredBy;

    /*
     * Date when the relationship was (soft-)deleted
     */
    private OffsetDateTime deletionDate;

    /**
     * Creates an instance of RelationshipProperties class.
     */
    public RelationshipProperties() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public HealthModelProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the displayName property: Display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name.
     * 
     * @param displayName the displayName value to set.
     * @return the RelationshipProperties object itself.
     */
    public RelationshipProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the parentEntityName property: Resource name of the parent entity.
     * 
     * @return the parentEntityName value.
     */
    public String parentEntityName() {
        return this.parentEntityName;
    }

    /**
     * Set the parentEntityName property: Resource name of the parent entity.
     * 
     * @param parentEntityName the parentEntityName value to set.
     * @return the RelationshipProperties object itself.
     */
    public RelationshipProperties withParentEntityName(String parentEntityName) {
        this.parentEntityName = parentEntityName;
        return this;
    }

    /**
     * Get the childEntityName property: Resource name of the child entity.
     * 
     * @return the childEntityName value.
     */
    public String childEntityName() {
        return this.childEntityName;
    }

    /**
     * Set the childEntityName property: Resource name of the child entity.
     * 
     * @param childEntityName the childEntityName value to set.
     * @return the RelationshipProperties object itself.
     */
    public RelationshipProperties withChildEntityName(String childEntityName) {
        this.childEntityName = childEntityName;
        return this;
    }

    /**
     * Get the labels property: Optional set of labels (key-value pairs).
     * 
     * @return the labels value.
     */
    public Map<String, String> labels() {
        return this.labels;
    }

    /**
     * Set the labels property: Optional set of labels (key-value pairs).
     * 
     * @param labels the labels value to set.
     * @return the RelationshipProperties object itself.
     */
    public RelationshipProperties withLabels(Map<String, String> labels) {
        this.labels = labels;
        return this;
    }

    /**
     * Get the discoveredBy property: Discovered by which discovery rule. If set, the relationship cannot be deleted
     * manually.
     * 
     * @return the discoveredBy value.
     */
    public String discoveredBy() {
        return this.discoveredBy;
    }

    /**
     * Get the deletionDate property: Date when the relationship was (soft-)deleted.
     * 
     * @return the deletionDate value.
     */
    public OffsetDateTime deletionDate() {
        return this.deletionDate;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (parentEntityName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property parentEntityName in model RelationshipProperties"));
        }
        if (childEntityName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property childEntityName in model RelationshipProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RelationshipProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("parentEntityName", this.parentEntityName);
        jsonWriter.writeStringField("childEntityName", this.childEntityName);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeMapField("labels", this.labels, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RelationshipProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RelationshipProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RelationshipProperties.
     */
    public static RelationshipProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RelationshipProperties deserializedRelationshipProperties = new RelationshipProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("parentEntityName".equals(fieldName)) {
                    deserializedRelationshipProperties.parentEntityName = reader.getString();
                } else if ("childEntityName".equals(fieldName)) {
                    deserializedRelationshipProperties.childEntityName = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedRelationshipProperties.provisioningState
                        = HealthModelProvisioningState.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedRelationshipProperties.displayName = reader.getString();
                } else if ("labels".equals(fieldName)) {
                    Map<String, String> labels = reader.readMap(reader1 -> reader1.getString());
                    deserializedRelationshipProperties.labels = labels;
                } else if ("discoveredBy".equals(fieldName)) {
                    deserializedRelationshipProperties.discoveredBy = reader.getString();
                } else if ("deletionDate".equals(fieldName)) {
                    deserializedRelationshipProperties.deletionDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRelationshipProperties;
        });
    }
}
