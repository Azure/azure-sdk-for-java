// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cloudhealth.fluent.AuthenticationSettingsClient;
import com.azure.resourcemanager.cloudhealth.fluent.models.AuthenticationSettingInner;
import com.azure.resourcemanager.cloudhealth.models.AuthenticationSetting;
import com.azure.resourcemanager.cloudhealth.models.AuthenticationSettings;

public final class AuthenticationSettingsImpl implements AuthenticationSettings {
    private static final ClientLogger LOGGER = new ClientLogger(AuthenticationSettingsImpl.class);

    private final AuthenticationSettingsClient innerClient;

    private final com.azure.resourcemanager.cloudhealth.CloudHealthManager serviceManager;

    public AuthenticationSettingsImpl(AuthenticationSettingsClient innerClient,
        com.azure.resourcemanager.cloudhealth.CloudHealthManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<AuthenticationSetting> getWithResponse(String resourceGroupName, String healthModelName,
        String authenticationSettingName, Context context) {
        Response<AuthenticationSettingInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, healthModelName, authenticationSettingName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AuthenticationSettingImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AuthenticationSetting get(String resourceGroupName, String healthModelName,
        String authenticationSettingName) {
        AuthenticationSettingInner inner
            = this.serviceClient().get(resourceGroupName, healthModelName, authenticationSettingName);
        if (inner != null) {
            return new AuthenticationSettingImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String healthModelName,
        String authenticationSettingName, Context context) {
        return this.serviceClient()
            .deleteWithResponse(resourceGroupName, healthModelName, authenticationSettingName, context);
    }

    public void delete(String resourceGroupName, String healthModelName, String authenticationSettingName) {
        this.serviceClient().delete(resourceGroupName, healthModelName, authenticationSettingName);
    }

    public PagedIterable<AuthenticationSetting> listByHealthModel(String resourceGroupName, String healthModelName) {
        PagedIterable<AuthenticationSettingInner> inner
            = this.serviceClient().listByHealthModel(resourceGroupName, healthModelName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AuthenticationSettingImpl(inner1, this.manager()));
    }

    public PagedIterable<AuthenticationSetting> listByHealthModel(String resourceGroupName, String healthModelName,
        Context context) {
        PagedIterable<AuthenticationSettingInner> inner
            = this.serviceClient().listByHealthModel(resourceGroupName, healthModelName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AuthenticationSettingImpl(inner1, this.manager()));
    }

    public AuthenticationSetting getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String healthModelName = ResourceManagerUtils.getValueFromIdByName(id, "healthmodels");
        if (healthModelName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'healthmodels'.", id)));
        }
        String authenticationSettingName = ResourceManagerUtils.getValueFromIdByName(id, "authenticationsettings");
        if (authenticationSettingName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'authenticationsettings'.", id)));
        }
        return this.getWithResponse(resourceGroupName, healthModelName, authenticationSettingName, Context.NONE)
            .getValue();
    }

    public Response<AuthenticationSetting> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String healthModelName = ResourceManagerUtils.getValueFromIdByName(id, "healthmodels");
        if (healthModelName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'healthmodels'.", id)));
        }
        String authenticationSettingName = ResourceManagerUtils.getValueFromIdByName(id, "authenticationsettings");
        if (authenticationSettingName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'authenticationsettings'.", id)));
        }
        return this.getWithResponse(resourceGroupName, healthModelName, authenticationSettingName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String healthModelName = ResourceManagerUtils.getValueFromIdByName(id, "healthmodels");
        if (healthModelName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'healthmodels'.", id)));
        }
        String authenticationSettingName = ResourceManagerUtils.getValueFromIdByName(id, "authenticationsettings");
        if (authenticationSettingName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'authenticationsettings'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, healthModelName, authenticationSettingName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String healthModelName = ResourceManagerUtils.getValueFromIdByName(id, "healthmodels");
        if (healthModelName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'healthmodels'.", id)));
        }
        String authenticationSettingName = ResourceManagerUtils.getValueFromIdByName(id, "authenticationsettings");
        if (authenticationSettingName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'authenticationsettings'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, healthModelName, authenticationSettingName, context);
    }

    private AuthenticationSettingsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cloudhealth.CloudHealthManager manager() {
        return this.serviceManager;
    }

    public AuthenticationSettingImpl define(String name) {
        return new AuthenticationSettingImpl(name, this.manager());
    }
}
