// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import java.time.OffsetDateTime;

/**
 * Resource collection API of Relationships.
 */
public interface Relationships {
    /**
     * Get a Relationship.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param relationshipName Name of the relationship. Must be unique within a health model. For example, a
     * concatenation of parentEntityName and childEntityName can be used as the name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Relationship along with {@link Response}.
     */
    Response<Relationship> getWithResponse(String resourceGroupName, String healthModelName, String relationshipName,
        Context context);

    /**
     * Get a Relationship.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param relationshipName Name of the relationship. Must be unique within a health model. For example, a
     * concatenation of parentEntityName and childEntityName can be used as the name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Relationship.
     */
    Relationship get(String resourceGroupName, String healthModelName, String relationshipName);

    /**
     * Delete a Relationship.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param relationshipName Name of the relationship. Must be unique within a health model. For example, a
     * concatenation of parentEntityName and childEntityName can be used as the name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(String resourceGroupName, String healthModelName, String relationshipName,
        Context context);

    /**
     * Delete a Relationship.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param relationshipName Name of the relationship. Must be unique within a health model. For example, a
     * concatenation of parentEntityName and childEntityName can be used as the name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String healthModelName, String relationshipName);

    /**
     * List Relationship resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Relationship list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Relationship> listByHealthModel(String resourceGroupName, String healthModelName);

    /**
     * List Relationship resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param timestamp Timestamp to use for the operation. When specified, the version of the resource at this point in
     * time is retrieved. If not specified, the latest version is used.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Relationship list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Relationship> listByHealthModel(String resourceGroupName, String healthModelName,
        OffsetDateTime timestamp, Context context);

    /**
     * Get a Relationship.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Relationship along with {@link Response}.
     */
    Relationship getById(String id);

    /**
     * Get a Relationship.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Relationship along with {@link Response}.
     */
    Response<Relationship> getByIdWithResponse(String id, Context context);

    /**
     * Delete a Relationship.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a Relationship.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new Relationship resource.
     * 
     * @param name resource name.
     * @return the first stage of the new Relationship definition.
     */
    Relationship.DefinitionStages.Blank define(String name);
}
