// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cloudhealth.fluent.AuthenticationSettingsClient;
import com.azure.resourcemanager.cloudhealth.fluent.models.AuthenticationSettingInner;
import com.azure.resourcemanager.cloudhealth.implementation.models.AuthenticationSettingListResult;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in AuthenticationSettingsClient.
 */
public final class AuthenticationSettingsClientImpl implements AuthenticationSettingsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AuthenticationSettingsService service;

    /**
     * The service client containing this operation class.
     */
    private final CloudHealthManagementClientImpl client;

    /**
     * Initializes an instance of AuthenticationSettingsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    AuthenticationSettingsClientImpl(CloudHealthManagementClientImpl client) {
        this.service = RestProxy.create(AuthenticationSettingsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for CloudHealthManagementClientAuthenticationSettings to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "CloudHealthManagemen")
    public interface AuthenticationSettingsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/authenticationsettings/{authenticationSettingName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AuthenticationSettingInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("healthModelName") String healthModelName,
            @PathParam("authenticationSettingName") String authenticationSettingName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/authenticationsettings/{authenticationSettingName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<AuthenticationSettingInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("healthModelName") String healthModelName,
            @PathParam("authenticationSettingName") String authenticationSettingName,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/authenticationsettings/{authenticationSettingName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AuthenticationSettingInner>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("healthModelName") String healthModelName,
            @PathParam("authenticationSettingName") String authenticationSettingName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") AuthenticationSettingInner resource, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/authenticationsettings/{authenticationSettingName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<AuthenticationSettingInner> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("healthModelName") String healthModelName,
            @PathParam("authenticationSettingName") String authenticationSettingName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") AuthenticationSettingInner resource, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/authenticationsettings/{authenticationSettingName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("healthModelName") String healthModelName,
            @PathParam("authenticationSettingName") String authenticationSettingName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/authenticationsettings/{authenticationSettingName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<Void> deleteSync(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("healthModelName") String healthModelName,
            @PathParam("authenticationSettingName") String authenticationSettingName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/authenticationsettings")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AuthenticationSettingListResult>> listByHealthModel(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("healthModelName") String healthModelName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/authenticationsettings")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<AuthenticationSettingListResult> listByHealthModelSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("healthModelName") String healthModelName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AuthenticationSettingListResult>> listByHealthModelNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<AuthenticationSettingListResult> listByHealthModelNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a AuthenticationSetting.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param authenticationSettingName Name of the authentication setting. Must be unique within a health model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a AuthenticationSetting along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AuthenticationSettingInner>> getWithResponseAsync(String resourceGroupName,
        String healthModelName, String authenticationSettingName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (healthModelName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter healthModelName is required and cannot be null."));
        }
        if (authenticationSettingName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter authenticationSettingName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, healthModelName, authenticationSettingName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a AuthenticationSetting.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param authenticationSettingName Name of the authentication setting. Must be unique within a health model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a AuthenticationSetting on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AuthenticationSettingInner> getAsync(String resourceGroupName, String healthModelName,
        String authenticationSettingName) {
        return getWithResponseAsync(resourceGroupName, healthModelName, authenticationSettingName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a AuthenticationSetting.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param authenticationSettingName Name of the authentication setting. Must be unique within a health model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a AuthenticationSetting along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AuthenticationSettingInner> getWithResponse(String resourceGroupName, String healthModelName,
        String authenticationSettingName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (healthModelName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter healthModelName is required and cannot be null."));
        }
        if (authenticationSettingName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter authenticationSettingName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, healthModelName, authenticationSettingName, accept, context);
    }

    /**
     * Get a AuthenticationSetting.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param authenticationSettingName Name of the authentication setting. Must be unique within a health model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a AuthenticationSetting.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AuthenticationSettingInner get(String resourceGroupName, String healthModelName,
        String authenticationSettingName) {
        return getWithResponse(resourceGroupName, healthModelName, authenticationSettingName, Context.NONE).getValue();
    }

    /**
     * Create a AuthenticationSetting.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param authenticationSettingName Name of the authentication setting. Must be unique within a health model.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an authentication setting in a health model along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AuthenticationSettingInner>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String healthModelName, String authenticationSettingName, AuthenticationSettingInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (healthModelName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter healthModelName is required and cannot be null."));
        }
        if (authenticationSettingName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter authenticationSettingName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, healthModelName, authenticationSettingName,
                contentType, accept, resource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a AuthenticationSetting.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param authenticationSettingName Name of the authentication setting. Must be unique within a health model.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an authentication setting in a health model on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AuthenticationSettingInner> createOrUpdateAsync(String resourceGroupName, String healthModelName,
        String authenticationSettingName, AuthenticationSettingInner resource) {
        return createOrUpdateWithResponseAsync(resourceGroupName, healthModelName, authenticationSettingName, resource)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create a AuthenticationSetting.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param authenticationSettingName Name of the authentication setting. Must be unique within a health model.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an authentication setting in a health model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AuthenticationSettingInner> createOrUpdateWithResponse(String resourceGroupName,
        String healthModelName, String authenticationSettingName, AuthenticationSettingInner resource,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (healthModelName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter healthModelName is required and cannot be null."));
        }
        if (authenticationSettingName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter authenticationSettingName is required and cannot be null."));
        }
        if (resource == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, healthModelName, authenticationSettingName, contentType,
            accept, resource, context);
    }

    /**
     * Create a AuthenticationSetting.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param authenticationSettingName Name of the authentication setting. Must be unique within a health model.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an authentication setting in a health model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AuthenticationSettingInner createOrUpdate(String resourceGroupName, String healthModelName,
        String authenticationSettingName, AuthenticationSettingInner resource) {
        return createOrUpdateWithResponse(resourceGroupName, healthModelName, authenticationSettingName, resource,
            Context.NONE).getValue();
    }

    /**
     * Delete a AuthenticationSetting.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param authenticationSettingName Name of the authentication setting. Must be unique within a health model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String healthModelName,
        String authenticationSettingName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (healthModelName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter healthModelName is required and cannot be null."));
        }
        if (authenticationSettingName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter authenticationSettingName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, healthModelName, authenticationSettingName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a AuthenticationSetting.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param authenticationSettingName Name of the authentication setting. Must be unique within a health model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String healthModelName, String authenticationSettingName) {
        return deleteWithResponseAsync(resourceGroupName, healthModelName, authenticationSettingName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete a AuthenticationSetting.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param authenticationSettingName Name of the authentication setting. Must be unique within a health model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceGroupName, String healthModelName,
        String authenticationSettingName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (healthModelName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter healthModelName is required and cannot be null."));
        }
        if (authenticationSettingName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter authenticationSettingName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, healthModelName, authenticationSettingName, accept,
            context);
    }

    /**
     * Delete a AuthenticationSetting.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param authenticationSettingName Name of the authentication setting. Must be unique within a health model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String healthModelName, String authenticationSettingName) {
        deleteWithResponse(resourceGroupName, healthModelName, authenticationSettingName, Context.NONE);
    }

    /**
     * List AuthenticationSetting resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AuthenticationSetting list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AuthenticationSettingInner>> listByHealthModelSinglePageAsync(String resourceGroupName,
        String healthModelName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (healthModelName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter healthModelName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByHealthModel(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, healthModelName, accept, context))
            .<PagedResponse<AuthenticationSettingInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List AuthenticationSetting resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AuthenticationSetting list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AuthenticationSettingInner> listByHealthModelAsync(String resourceGroupName,
        String healthModelName) {
        return new PagedFlux<>(() -> listByHealthModelSinglePageAsync(resourceGroupName, healthModelName),
            nextLink -> listByHealthModelNextSinglePageAsync(nextLink));
    }

    /**
     * List AuthenticationSetting resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AuthenticationSetting list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<AuthenticationSettingInner> listByHealthModelSinglePage(String resourceGroupName,
        String healthModelName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (healthModelName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter healthModelName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<AuthenticationSettingListResult> res
            = service.listByHealthModelSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, healthModelName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List AuthenticationSetting resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AuthenticationSetting list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<AuthenticationSettingInner> listByHealthModelSinglePage(String resourceGroupName,
        String healthModelName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (healthModelName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter healthModelName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<AuthenticationSettingListResult> res
            = service.listByHealthModelSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, healthModelName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List AuthenticationSetting resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AuthenticationSetting list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AuthenticationSettingInner> listByHealthModel(String resourceGroupName,
        String healthModelName) {
        return new PagedIterable<>(() -> listByHealthModelSinglePage(resourceGroupName, healthModelName),
            nextLink -> listByHealthModelNextSinglePage(nextLink));
    }

    /**
     * List AuthenticationSetting resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AuthenticationSetting list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AuthenticationSettingInner> listByHealthModel(String resourceGroupName, String healthModelName,
        Context context) {
        return new PagedIterable<>(() -> listByHealthModelSinglePage(resourceGroupName, healthModelName, context),
            nextLink -> listByHealthModelNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AuthenticationSetting list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AuthenticationSettingInner>> listByHealthModelNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByHealthModelNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<AuthenticationSettingInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AuthenticationSetting list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<AuthenticationSettingInner> listByHealthModelNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<AuthenticationSettingListResult> res
            = service.listByHealthModelNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AuthenticationSetting list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<AuthenticationSettingInner> listByHealthModelNextSinglePage(String nextLink,
        Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<AuthenticationSettingListResult> res
            = service.listByHealthModelNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(AuthenticationSettingsClientImpl.class);
}
