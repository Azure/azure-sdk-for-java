// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties for dependent entities, i.e. child entities.
 */
@Fluent
public final class DependenciesSignalGroup implements JsonSerializable<DependenciesSignalGroup> {
    /*
     * Aggregation type for child dependencies.
     */
    private DependenciesAggregationType aggregationType;

    /*
     * Degraded threshold for aggregating the propagated health state of child dependencies. Can be either an absolute
     * number that is greater than 0, or a percentage between 1-100%. The entity will be considered degraded when the
     * number of not healthy child dependents (unhealthy, degraded, unknown) is equal to or above the threshold value.
     * Must only be set when AggregationType is 'Thresholds'.
     */
    private String degradedThreshold;

    /*
     * Unhealthy threshold for aggregating the propagated health state of child dependencies. Can be either an absolute
     * number that is greater than 0, or a percentage between 1-100%. The entity will be considered unhealthy when the
     * number of not healthy child dependents (unhealthy, degraded, unknown) is equal to or above the threshold value.
     * Must only be set when AggregationType is 'Thresholds'.
     */
    private String unhealthyThreshold;

    /**
     * Creates an instance of DependenciesSignalGroup class.
     */
    public DependenciesSignalGroup() {
    }

    /**
     * Get the aggregationType property: Aggregation type for child dependencies.
     * 
     * @return the aggregationType value.
     */
    public DependenciesAggregationType aggregationType() {
        return this.aggregationType;
    }

    /**
     * Set the aggregationType property: Aggregation type for child dependencies.
     * 
     * @param aggregationType the aggregationType value to set.
     * @return the DependenciesSignalGroup object itself.
     */
    public DependenciesSignalGroup withAggregationType(DependenciesAggregationType aggregationType) {
        this.aggregationType = aggregationType;
        return this;
    }

    /**
     * Get the degradedThreshold property: Degraded threshold for aggregating the propagated health state of child
     * dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity
     * will be considered degraded when the number of not healthy child dependents (unhealthy, degraded, unknown) is
     * equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'.
     * 
     * @return the degradedThreshold value.
     */
    public String degradedThreshold() {
        return this.degradedThreshold;
    }

    /**
     * Set the degradedThreshold property: Degraded threshold for aggregating the propagated health state of child
     * dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity
     * will be considered degraded when the number of not healthy child dependents (unhealthy, degraded, unknown) is
     * equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'.
     * 
     * @param degradedThreshold the degradedThreshold value to set.
     * @return the DependenciesSignalGroup object itself.
     */
    public DependenciesSignalGroup withDegradedThreshold(String degradedThreshold) {
        this.degradedThreshold = degradedThreshold;
        return this;
    }

    /**
     * Get the unhealthyThreshold property: Unhealthy threshold for aggregating the propagated health state of child
     * dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity
     * will be considered unhealthy when the number of not healthy child dependents (unhealthy, degraded, unknown) is
     * equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'.
     * 
     * @return the unhealthyThreshold value.
     */
    public String unhealthyThreshold() {
        return this.unhealthyThreshold;
    }

    /**
     * Set the unhealthyThreshold property: Unhealthy threshold for aggregating the propagated health state of child
     * dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity
     * will be considered unhealthy when the number of not healthy child dependents (unhealthy, degraded, unknown) is
     * equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'.
     * 
     * @param unhealthyThreshold the unhealthyThreshold value to set.
     * @return the DependenciesSignalGroup object itself.
     */
    public DependenciesSignalGroup withUnhealthyThreshold(String unhealthyThreshold) {
        this.unhealthyThreshold = unhealthyThreshold;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (aggregationType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property aggregationType in model DependenciesSignalGroup"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DependenciesSignalGroup.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("aggregationType",
            this.aggregationType == null ? null : this.aggregationType.toString());
        jsonWriter.writeStringField("degradedThreshold", this.degradedThreshold);
        jsonWriter.writeStringField("unhealthyThreshold", this.unhealthyThreshold);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DependenciesSignalGroup from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DependenciesSignalGroup if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DependenciesSignalGroup.
     */
    public static DependenciesSignalGroup fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DependenciesSignalGroup deserializedDependenciesSignalGroup = new DependenciesSignalGroup();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("aggregationType".equals(fieldName)) {
                    deserializedDependenciesSignalGroup.aggregationType
                        = DependenciesAggregationType.fromString(reader.getString());
                } else if ("degradedThreshold".equals(fieldName)) {
                    deserializedDependenciesSignalGroup.degradedThreshold = reader.getString();
                } else if ("unhealthyThreshold".equals(fieldName)) {
                    deserializedDependenciesSignalGroup.unhealthyThreshold = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDependenciesSignalGroup;
        });
    }
}
