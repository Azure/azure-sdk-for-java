// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cloudhealth.fluent.SignalDefinitionsClient;
import com.azure.resourcemanager.cloudhealth.fluent.models.SignalDefinitionInner;
import com.azure.resourcemanager.cloudhealth.models.SignalDefinition;
import com.azure.resourcemanager.cloudhealth.models.SignalDefinitions;
import java.time.OffsetDateTime;

public final class SignalDefinitionsImpl implements SignalDefinitions {
    private static final ClientLogger LOGGER = new ClientLogger(SignalDefinitionsImpl.class);

    private final SignalDefinitionsClient innerClient;

    private final com.azure.resourcemanager.cloudhealth.CloudHealthManager serviceManager;

    public SignalDefinitionsImpl(SignalDefinitionsClient innerClient,
        com.azure.resourcemanager.cloudhealth.CloudHealthManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<SignalDefinition> getWithResponse(String resourceGroupName, String healthModelName,
        String signalDefinitionName, Context context) {
        Response<SignalDefinitionInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, healthModelName, signalDefinitionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SignalDefinitionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SignalDefinition get(String resourceGroupName, String healthModelName, String signalDefinitionName) {
        SignalDefinitionInner inner
            = this.serviceClient().get(resourceGroupName, healthModelName, signalDefinitionName);
        if (inner != null) {
            return new SignalDefinitionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String healthModelName,
        String signalDefinitionName, Context context) {
        return this.serviceClient()
            .deleteWithResponse(resourceGroupName, healthModelName, signalDefinitionName, context);
    }

    public void delete(String resourceGroupName, String healthModelName, String signalDefinitionName) {
        this.serviceClient().delete(resourceGroupName, healthModelName, signalDefinitionName);
    }

    public PagedIterable<SignalDefinition> listByHealthModel(String resourceGroupName, String healthModelName) {
        PagedIterable<SignalDefinitionInner> inner
            = this.serviceClient().listByHealthModel(resourceGroupName, healthModelName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SignalDefinitionImpl(inner1, this.manager()));
    }

    public PagedIterable<SignalDefinition> listByHealthModel(String resourceGroupName, String healthModelName,
        OffsetDateTime timestamp, Context context) {
        PagedIterable<SignalDefinitionInner> inner
            = this.serviceClient().listByHealthModel(resourceGroupName, healthModelName, timestamp, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SignalDefinitionImpl(inner1, this.manager()));
    }

    public SignalDefinition getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String healthModelName = ResourceManagerUtils.getValueFromIdByName(id, "healthmodels");
        if (healthModelName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'healthmodels'.", id)));
        }
        String signalDefinitionName = ResourceManagerUtils.getValueFromIdByName(id, "signaldefinitions");
        if (signalDefinitionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'signaldefinitions'.", id)));
        }
        return this.getWithResponse(resourceGroupName, healthModelName, signalDefinitionName, Context.NONE).getValue();
    }

    public Response<SignalDefinition> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String healthModelName = ResourceManagerUtils.getValueFromIdByName(id, "healthmodels");
        if (healthModelName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'healthmodels'.", id)));
        }
        String signalDefinitionName = ResourceManagerUtils.getValueFromIdByName(id, "signaldefinitions");
        if (signalDefinitionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'signaldefinitions'.", id)));
        }
        return this.getWithResponse(resourceGroupName, healthModelName, signalDefinitionName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String healthModelName = ResourceManagerUtils.getValueFromIdByName(id, "healthmodels");
        if (healthModelName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'healthmodels'.", id)));
        }
        String signalDefinitionName = ResourceManagerUtils.getValueFromIdByName(id, "signaldefinitions");
        if (signalDefinitionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'signaldefinitions'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, healthModelName, signalDefinitionName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String healthModelName = ResourceManagerUtils.getValueFromIdByName(id, "healthmodels");
        if (healthModelName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'healthmodels'.", id)));
        }
        String signalDefinitionName = ResourceManagerUtils.getValueFromIdByName(id, "signaldefinitions");
        if (signalDefinitionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'signaldefinitions'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, healthModelName, signalDefinitionName, context);
    }

    private SignalDefinitionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cloudhealth.CloudHealthManager manager() {
        return this.serviceManager;
    }

    public SignalDefinitionImpl define(String name) {
        return new SignalDefinitionImpl(name, this.manager());
    }
}
