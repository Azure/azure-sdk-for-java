// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A grouping of signal assignments for a Log Analytics Workspace.
 */
@Fluent
public final class LogAnalyticsSignalGroup implements JsonSerializable<LogAnalyticsSignalGroup> {
    /*
     * Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
     */
    private List<SignalAssignment> signalAssignments;

    /*
     * Reference to the name of the authentication setting which is used for querying the data source
     */
    private String authenticationSetting;

    /*
     * Log Analytics Workspace resource ID
     */
    private String logAnalyticsWorkspaceResourceId;

    /**
     * Creates an instance of LogAnalyticsSignalGroup class.
     */
    public LogAnalyticsSignalGroup() {
    }

    /**
     * Get the signalAssignments property: Signal definitions which are assigned to this signal group. All assignments
     * are combined with an OR operator.
     * 
     * @return the signalAssignments value.
     */
    public List<SignalAssignment> signalAssignments() {
        return this.signalAssignments;
    }

    /**
     * Set the signalAssignments property: Signal definitions which are assigned to this signal group. All assignments
     * are combined with an OR operator.
     * 
     * @param signalAssignments the signalAssignments value to set.
     * @return the LogAnalyticsSignalGroup object itself.
     */
    public LogAnalyticsSignalGroup withSignalAssignments(List<SignalAssignment> signalAssignments) {
        this.signalAssignments = signalAssignments;
        return this;
    }

    /**
     * Get the authenticationSetting property: Reference to the name of the authentication setting which is used for
     * querying the data source.
     * 
     * @return the authenticationSetting value.
     */
    public String authenticationSetting() {
        return this.authenticationSetting;
    }

    /**
     * Set the authenticationSetting property: Reference to the name of the authentication setting which is used for
     * querying the data source.
     * 
     * @param authenticationSetting the authenticationSetting value to set.
     * @return the LogAnalyticsSignalGroup object itself.
     */
    public LogAnalyticsSignalGroup withAuthenticationSetting(String authenticationSetting) {
        this.authenticationSetting = authenticationSetting;
        return this;
    }

    /**
     * Get the logAnalyticsWorkspaceResourceId property: Log Analytics Workspace resource ID.
     * 
     * @return the logAnalyticsWorkspaceResourceId value.
     */
    public String logAnalyticsWorkspaceResourceId() {
        return this.logAnalyticsWorkspaceResourceId;
    }

    /**
     * Set the logAnalyticsWorkspaceResourceId property: Log Analytics Workspace resource ID.
     * 
     * @param logAnalyticsWorkspaceResourceId the logAnalyticsWorkspaceResourceId value to set.
     * @return the LogAnalyticsSignalGroup object itself.
     */
    public LogAnalyticsSignalGroup withLogAnalyticsWorkspaceResourceId(String logAnalyticsWorkspaceResourceId) {
        this.logAnalyticsWorkspaceResourceId = logAnalyticsWorkspaceResourceId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (signalAssignments() != null) {
            signalAssignments().forEach(e -> e.validate());
        }
        if (authenticationSetting() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property authenticationSetting in model LogAnalyticsSignalGroup"));
        }
        if (logAnalyticsWorkspaceResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property logAnalyticsWorkspaceResourceId in model LogAnalyticsSignalGroup"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LogAnalyticsSignalGroup.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("authenticationSetting", this.authenticationSetting);
        jsonWriter.writeStringField("logAnalyticsWorkspaceResourceId", this.logAnalyticsWorkspaceResourceId);
        jsonWriter.writeArrayField("signalAssignments", this.signalAssignments,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LogAnalyticsSignalGroup from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LogAnalyticsSignalGroup if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LogAnalyticsSignalGroup.
     */
    public static LogAnalyticsSignalGroup fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LogAnalyticsSignalGroup deserializedLogAnalyticsSignalGroup = new LogAnalyticsSignalGroup();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authenticationSetting".equals(fieldName)) {
                    deserializedLogAnalyticsSignalGroup.authenticationSetting = reader.getString();
                } else if ("logAnalyticsWorkspaceResourceId".equals(fieldName)) {
                    deserializedLogAnalyticsSignalGroup.logAnalyticsWorkspaceResourceId = reader.getString();
                } else if ("signalAssignments".equals(fieldName)) {
                    List<SignalAssignment> signalAssignments
                        = reader.readArray(reader1 -> SignalAssignment.fromJson(reader1));
                    deserializedLogAnalyticsSignalGroup.signalAssignments = signalAssignments;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLogAnalyticsSignalGroup;
        });
    }
}
