// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * SignalDefinition properties.
 */
@Fluent
public class SignalDefinitionProperties implements JsonSerializable<SignalDefinitionProperties> {
    /*
     * Kind of the signal definition
     */
    private SignalKind signalKind = SignalKind.fromString("SignalDefinitionProperties");

    /*
     * The status of the last operation.
     */
    private HealthModelProvisioningState provisioningState;

    /*
     * Display name
     */
    private String displayName;

    /*
     * Interval in which the signal is being evaluated. Defaults to PT1M (1 minute).
     */
    private RefreshInterval refreshInterval;

    /*
     * Optional set of labels (key-value pairs)
     */
    private Map<String, String> labels;

    /*
     * Unit of the signal result (e.g. Bytes, MilliSeconds, Percent, Count))
     */
    private String dataUnit;

    /*
     * Evaluation rules for the signal definition
     */
    private EvaluationRule evaluationRules;

    /*
     * Date when the signal definition was (soft-)deleted
     */
    private OffsetDateTime deletionDate;

    /**
     * Creates an instance of SignalDefinitionProperties class.
     */
    public SignalDefinitionProperties() {
    }

    /**
     * Get the signalKind property: Kind of the signal definition.
     * 
     * @return the signalKind value.
     */
    public SignalKind signalKind() {
        return this.signalKind;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public HealthModelProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The status of the last operation.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the SignalDefinitionProperties object itself.
     */
    SignalDefinitionProperties withProvisioningState(HealthModelProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the displayName property: Display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name.
     * 
     * @param displayName the displayName value to set.
     * @return the SignalDefinitionProperties object itself.
     */
    public SignalDefinitionProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the refreshInterval property: Interval in which the signal is being evaluated. Defaults to PT1M (1 minute).
     * 
     * @return the refreshInterval value.
     */
    public RefreshInterval refreshInterval() {
        return this.refreshInterval;
    }

    /**
     * Set the refreshInterval property: Interval in which the signal is being evaluated. Defaults to PT1M (1 minute).
     * 
     * @param refreshInterval the refreshInterval value to set.
     * @return the SignalDefinitionProperties object itself.
     */
    public SignalDefinitionProperties withRefreshInterval(RefreshInterval refreshInterval) {
        this.refreshInterval = refreshInterval;
        return this;
    }

    /**
     * Get the labels property: Optional set of labels (key-value pairs).
     * 
     * @return the labels value.
     */
    public Map<String, String> labels() {
        return this.labels;
    }

    /**
     * Set the labels property: Optional set of labels (key-value pairs).
     * 
     * @param labels the labels value to set.
     * @return the SignalDefinitionProperties object itself.
     */
    public SignalDefinitionProperties withLabels(Map<String, String> labels) {
        this.labels = labels;
        return this;
    }

    /**
     * Get the dataUnit property: Unit of the signal result (e.g. Bytes, MilliSeconds, Percent, Count)).
     * 
     * @return the dataUnit value.
     */
    public String dataUnit() {
        return this.dataUnit;
    }

    /**
     * Set the dataUnit property: Unit of the signal result (e.g. Bytes, MilliSeconds, Percent, Count)).
     * 
     * @param dataUnit the dataUnit value to set.
     * @return the SignalDefinitionProperties object itself.
     */
    public SignalDefinitionProperties withDataUnit(String dataUnit) {
        this.dataUnit = dataUnit;
        return this;
    }

    /**
     * Get the evaluationRules property: Evaluation rules for the signal definition.
     * 
     * @return the evaluationRules value.
     */
    public EvaluationRule evaluationRules() {
        return this.evaluationRules;
    }

    /**
     * Set the evaluationRules property: Evaluation rules for the signal definition.
     * 
     * @param evaluationRules the evaluationRules value to set.
     * @return the SignalDefinitionProperties object itself.
     */
    public SignalDefinitionProperties withEvaluationRules(EvaluationRule evaluationRules) {
        this.evaluationRules = evaluationRules;
        return this;
    }

    /**
     * Get the deletionDate property: Date when the signal definition was (soft-)deleted.
     * 
     * @return the deletionDate value.
     */
    public OffsetDateTime deletionDate() {
        return this.deletionDate;
    }

    /**
     * Set the deletionDate property: Date when the signal definition was (soft-)deleted.
     * 
     * @param deletionDate the deletionDate value to set.
     * @return the SignalDefinitionProperties object itself.
     */
    SignalDefinitionProperties withDeletionDate(OffsetDateTime deletionDate) {
        this.deletionDate = deletionDate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (evaluationRules() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property evaluationRules in model SignalDefinitionProperties"));
        } else {
            evaluationRules().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SignalDefinitionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("evaluationRules", this.evaluationRules);
        jsonWriter.writeStringField("signalKind", this.signalKind == null ? null : this.signalKind.toString());
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("refreshInterval",
            this.refreshInterval == null ? null : this.refreshInterval.toString());
        jsonWriter.writeMapField("labels", this.labels, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("dataUnit", this.dataUnit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SignalDefinitionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SignalDefinitionProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SignalDefinitionProperties.
     */
    public static SignalDefinitionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("signalKind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("AzureResourceMetric".equals(discriminatorValue)) {
                    return ResourceMetricSignalDefinitionProperties.fromJson(readerToUse.reset());
                } else if ("LogAnalyticsQuery".equals(discriminatorValue)) {
                    return LogAnalyticsQuerySignalDefinitionProperties.fromJson(readerToUse.reset());
                } else if ("PrometheusMetricsQuery".equals(discriminatorValue)) {
                    return PrometheusMetricsSignalDefinitionProperties.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static SignalDefinitionProperties fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SignalDefinitionProperties deserializedSignalDefinitionProperties = new SignalDefinitionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("evaluationRules".equals(fieldName)) {
                    deserializedSignalDefinitionProperties.evaluationRules = EvaluationRule.fromJson(reader);
                } else if ("signalKind".equals(fieldName)) {
                    deserializedSignalDefinitionProperties.signalKind = SignalKind.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSignalDefinitionProperties.provisioningState
                        = HealthModelProvisioningState.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedSignalDefinitionProperties.displayName = reader.getString();
                } else if ("refreshInterval".equals(fieldName)) {
                    deserializedSignalDefinitionProperties.refreshInterval
                        = RefreshInterval.fromString(reader.getString());
                } else if ("labels".equals(fieldName)) {
                    Map<String, String> labels = reader.readMap(reader1 -> reader1.getString());
                    deserializedSignalDefinitionProperties.labels = labels;
                } else if ("dataUnit".equals(fieldName)) {
                    deserializedSignalDefinitionProperties.dataUnit = reader.getString();
                } else if ("deletionDate".equals(fieldName)) {
                    deserializedSignalDefinitionProperties.deletionDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSignalDefinitionProperties;
        });
    }
}
