// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * HealthModel properties.
 */
@Fluent
public final class HealthModelProperties implements JsonSerializable<HealthModelProperties> {
    /*
     * The data plane endpoint for interacting with health data
     */
    private String dataplaneEndpoint;

    /*
     * The status of the last operation.
     */
    private HealthModelProvisioningState provisioningState;

    /*
     * Configure to automatically discover entities from a given scope, such as a Service Group. The discovered entities
     * will be linked to the root entity of the health model.
     */
    private ModelDiscoverySettings discovery;

    /**
     * Creates an instance of HealthModelProperties class.
     */
    public HealthModelProperties() {
    }

    /**
     * Get the dataplaneEndpoint property: The data plane endpoint for interacting with health data.
     * 
     * @return the dataplaneEndpoint value.
     */
    public String dataplaneEndpoint() {
        return this.dataplaneEndpoint;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public HealthModelProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the discovery property: Configure to automatically discover entities from a given scope, such as a Service
     * Group. The discovered entities will be linked to the root entity of the health model.
     * 
     * @return the discovery value.
     */
    public ModelDiscoverySettings discovery() {
        return this.discovery;
    }

    /**
     * Set the discovery property: Configure to automatically discover entities from a given scope, such as a Service
     * Group. The discovered entities will be linked to the root entity of the health model.
     * 
     * @param discovery the discovery value to set.
     * @return the HealthModelProperties object itself.
     */
    public HealthModelProperties withDiscovery(ModelDiscoverySettings discovery) {
        this.discovery = discovery;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (discovery() != null) {
            discovery().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("discovery", this.discovery);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HealthModelProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HealthModelProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HealthModelProperties.
     */
    public static HealthModelProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HealthModelProperties deserializedHealthModelProperties = new HealthModelProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataplaneEndpoint".equals(fieldName)) {
                    deserializedHealthModelProperties.dataplaneEndpoint = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedHealthModelProperties.provisioningState
                        = HealthModelProvisioningState.fromString(reader.getString());
                } else if ("discovery".equals(fieldName)) {
                    deserializedHealthModelProperties.discovery = ModelDiscoverySettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHealthModelProperties;
        });
    }
}
