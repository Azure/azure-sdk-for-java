// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Alert configuration for an entity.
 */
@Fluent
public final class EntityAlerts implements JsonSerializable<EntityAlerts> {
    /*
     * Alert to be triggered on state change to unhealthy
     */
    private AlertConfiguration unhealthy;

    /*
     * Alert to be triggered on state change to degraded
     */
    private AlertConfiguration degraded;

    /**
     * Creates an instance of EntityAlerts class.
     */
    public EntityAlerts() {
    }

    /**
     * Get the unhealthy property: Alert to be triggered on state change to unhealthy.
     * 
     * @return the unhealthy value.
     */
    public AlertConfiguration unhealthy() {
        return this.unhealthy;
    }

    /**
     * Set the unhealthy property: Alert to be triggered on state change to unhealthy.
     * 
     * @param unhealthy the unhealthy value to set.
     * @return the EntityAlerts object itself.
     */
    public EntityAlerts withUnhealthy(AlertConfiguration unhealthy) {
        this.unhealthy = unhealthy;
        return this;
    }

    /**
     * Get the degraded property: Alert to be triggered on state change to degraded.
     * 
     * @return the degraded value.
     */
    public AlertConfiguration degraded() {
        return this.degraded;
    }

    /**
     * Set the degraded property: Alert to be triggered on state change to degraded.
     * 
     * @param degraded the degraded value to set.
     * @return the EntityAlerts object itself.
     */
    public EntityAlerts withDegraded(AlertConfiguration degraded) {
        this.degraded = degraded;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (unhealthy() != null) {
            unhealthy().validate();
        }
        if (degraded() != null) {
            degraded().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("unhealthy", this.unhealthy);
        jsonWriter.writeJsonField("degraded", this.degraded);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EntityAlerts from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EntityAlerts if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EntityAlerts.
     */
    public static EntityAlerts fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EntityAlerts deserializedEntityAlerts = new EntityAlerts();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("unhealthy".equals(fieldName)) {
                    deserializedEntityAlerts.unhealthy = AlertConfiguration.fromJson(reader);
                } else if ("degraded".equals(fieldName)) {
                    deserializedEntityAlerts.degraded = AlertConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEntityAlerts;
        });
    }
}
