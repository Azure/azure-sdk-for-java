// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Authentication setting properties for Azure Managed Identity.
 */
@Fluent
public final class ManagedIdentityAuthenticationSettingProperties extends AuthenticationSettingProperties {
    /*
     * Kind of the authentication setting
     */
    private AuthenticationKind authenticationKind = AuthenticationKind.MANAGED_IDENTITY;

    /*
     * Name of the managed identity to use. Either 'SystemAssigned' or the resourceId of a user-assigned identity.
     */
    private String managedIdentityName;

    /**
     * Creates an instance of ManagedIdentityAuthenticationSettingProperties class.
     */
    public ManagedIdentityAuthenticationSettingProperties() {
    }

    /**
     * Get the authenticationKind property: Kind of the authentication setting.
     * 
     * @return the authenticationKind value.
     */
    @Override
    public AuthenticationKind authenticationKind() {
        return this.authenticationKind;
    }

    /**
     * Get the managedIdentityName property: Name of the managed identity to use. Either 'SystemAssigned' or the
     * resourceId of a user-assigned identity.
     * 
     * @return the managedIdentityName value.
     */
    public String managedIdentityName() {
        return this.managedIdentityName;
    }

    /**
     * Set the managedIdentityName property: Name of the managed identity to use. Either 'SystemAssigned' or the
     * resourceId of a user-assigned identity.
     * 
     * @param managedIdentityName the managedIdentityName value to set.
     * @return the ManagedIdentityAuthenticationSettingProperties object itself.
     */
    public ManagedIdentityAuthenticationSettingProperties withManagedIdentityName(String managedIdentityName) {
        this.managedIdentityName = managedIdentityName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ManagedIdentityAuthenticationSettingProperties withDisplayName(String displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (managedIdentityName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property managedIdentityName in model ManagedIdentityAuthenticationSettingProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ManagedIdentityAuthenticationSettingProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", displayName());
        jsonWriter.writeStringField("managedIdentityName", this.managedIdentityName);
        jsonWriter.writeStringField("authenticationKind",
            this.authenticationKind == null ? null : this.authenticationKind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedIdentityAuthenticationSettingProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedIdentityAuthenticationSettingProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ManagedIdentityAuthenticationSettingProperties.
     */
    public static ManagedIdentityAuthenticationSettingProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedIdentityAuthenticationSettingProperties deserializedManagedIdentityAuthenticationSettingProperties
                = new ManagedIdentityAuthenticationSettingProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedManagedIdentityAuthenticationSettingProperties
                        .withProvisioningState(HealthModelProvisioningState.fromString(reader.getString()));
                } else if ("displayName".equals(fieldName)) {
                    deserializedManagedIdentityAuthenticationSettingProperties.withDisplayName(reader.getString());
                } else if ("managedIdentityName".equals(fieldName)) {
                    deserializedManagedIdentityAuthenticationSettingProperties.managedIdentityName = reader.getString();
                } else if ("authenticationKind".equals(fieldName)) {
                    deserializedManagedIdentityAuthenticationSettingProperties.authenticationKind
                        = AuthenticationKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedIdentityAuthenticationSettingProperties;
        });
    }
}
