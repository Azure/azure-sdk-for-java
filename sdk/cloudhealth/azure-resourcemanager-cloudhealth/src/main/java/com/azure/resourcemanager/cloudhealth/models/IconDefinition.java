// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Visual icon definition of an entity.
 */
@Fluent
public final class IconDefinition implements JsonSerializable<IconDefinition> {
    /*
     * Name of the built-in icon, or 'Custom' to use customData
     */
    private String iconName;

    /*
     * Custom data. Base64-encoded SVG data. If set, this overrides the built-in icon.
     */
    private String customData;

    /**
     * Creates an instance of IconDefinition class.
     */
    public IconDefinition() {
    }

    /**
     * Get the iconName property: Name of the built-in icon, or 'Custom' to use customData.
     * 
     * @return the iconName value.
     */
    public String iconName() {
        return this.iconName;
    }

    /**
     * Set the iconName property: Name of the built-in icon, or 'Custom' to use customData.
     * 
     * @param iconName the iconName value to set.
     * @return the IconDefinition object itself.
     */
    public IconDefinition withIconName(String iconName) {
        this.iconName = iconName;
        return this;
    }

    /**
     * Get the customData property: Custom data. Base64-encoded SVG data. If set, this overrides the built-in icon.
     * 
     * @return the customData value.
     */
    public String customData() {
        return this.customData;
    }

    /**
     * Set the customData property: Custom data. Base64-encoded SVG data. If set, this overrides the built-in icon.
     * 
     * @param customData the customData value to set.
     * @return the IconDefinition object itself.
     */
    public IconDefinition withCustomData(String customData) {
        this.customData = customData;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (iconName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property iconName in model IconDefinition"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IconDefinition.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("iconName", this.iconName);
        jsonWriter.writeStringField("customData", this.customData);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IconDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IconDefinition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IconDefinition.
     */
    public static IconDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IconDefinition deserializedIconDefinition = new IconDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("iconName".equals(fieldName)) {
                    deserializedIconDefinition.iconName = reader.getString();
                } else if ("customData".equals(fieldName)) {
                    deserializedIconDefinition.customData = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIconDefinition;
        });
    }
}
