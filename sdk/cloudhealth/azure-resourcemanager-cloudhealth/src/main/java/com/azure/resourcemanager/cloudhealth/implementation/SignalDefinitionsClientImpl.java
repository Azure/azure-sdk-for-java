// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.cloudhealth.fluent.SignalDefinitionsClient;
import com.azure.resourcemanager.cloudhealth.fluent.models.SignalDefinitionInner;
import com.azure.resourcemanager.cloudhealth.implementation.models.SignalDefinitionListResult;
import java.time.OffsetDateTime;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SignalDefinitionsClient.
 */
public final class SignalDefinitionsClientImpl implements SignalDefinitionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SignalDefinitionsService service;

    /**
     * The service client containing this operation class.
     */
    private final CloudHealthManagementClientImpl client;

    /**
     * Initializes an instance of SignalDefinitionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SignalDefinitionsClientImpl(CloudHealthManagementClientImpl client) {
        this.service
            = RestProxy.create(SignalDefinitionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for CloudHealthManagementClientSignalDefinitions to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "CloudHealthManagementClientSignalDefinitions")
    public interface SignalDefinitionsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/signaldefinitions/{signalDefinitionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SignalDefinitionInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("healthModelName") String healthModelName,
            @PathParam("signalDefinitionName") String signalDefinitionName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/signaldefinitions/{signalDefinitionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SignalDefinitionInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("healthModelName") String healthModelName,
            @PathParam("signalDefinitionName") String signalDefinitionName, @HeaderParam("Accept") String accept,
            Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/signaldefinitions/{signalDefinitionName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SignalDefinitionInner>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("healthModelName") String healthModelName,
            @PathParam("signalDefinitionName") String signalDefinitionName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") SignalDefinitionInner resource, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/signaldefinitions/{signalDefinitionName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SignalDefinitionInner> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("healthModelName") String healthModelName,
            @PathParam("signalDefinitionName") String signalDefinitionName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") SignalDefinitionInner resource, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/signaldefinitions/{signalDefinitionName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("healthModelName") String healthModelName,
            @PathParam("signalDefinitionName") String signalDefinitionName, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/signaldefinitions/{signalDefinitionName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<Void> deleteSync(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("healthModelName") String healthModelName,
            @PathParam("signalDefinitionName") String signalDefinitionName, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/signaldefinitions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SignalDefinitionListResult>> listByHealthModel(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("timestamp") OffsetDateTime timestamp,
            @PathParam("healthModelName") String healthModelName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/signaldefinitions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SignalDefinitionListResult> listByHealthModelSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("timestamp") OffsetDateTime timestamp,
            @PathParam("healthModelName") String healthModelName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SignalDefinitionListResult>> listByHealthModelNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SignalDefinitionListResult> listByHealthModelNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a SignalDefinition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param signalDefinitionName Name of the signal definition. Must be unique within a health model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SignalDefinition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SignalDefinitionInner>> getWithResponseAsync(String resourceGroupName, String healthModelName,
        String signalDefinitionName) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, healthModelName, signalDefinitionName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a SignalDefinition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param signalDefinitionName Name of the signal definition. Must be unique within a health model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SignalDefinition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SignalDefinitionInner> getAsync(String resourceGroupName, String healthModelName,
        String signalDefinitionName) {
        return getWithResponseAsync(resourceGroupName, healthModelName, signalDefinitionName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a SignalDefinition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param signalDefinitionName Name of the signal definition. Must be unique within a health model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SignalDefinition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SignalDefinitionInner> getWithResponse(String resourceGroupName, String healthModelName,
        String signalDefinitionName, Context context) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, healthModelName, signalDefinitionName, accept, context);
    }

    /**
     * Get a SignalDefinition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param signalDefinitionName Name of the signal definition. Must be unique within a health model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SignalDefinition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SignalDefinitionInner get(String resourceGroupName, String healthModelName, String signalDefinitionName) {
        return getWithResponse(resourceGroupName, healthModelName, signalDefinitionName, Context.NONE).getValue();
    }

    /**
     * Create a SignalDefinition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param signalDefinitionName Name of the signal definition. Must be unique within a health model.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a signal definition in a health model along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SignalDefinitionInner>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String healthModelName, String signalDefinitionName, SignalDefinitionInner resource) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, healthModelName, signalDefinitionName, contentType,
                accept, resource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a SignalDefinition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param signalDefinitionName Name of the signal definition. Must be unique within a health model.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a signal definition in a health model on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SignalDefinitionInner> createOrUpdateAsync(String resourceGroupName, String healthModelName,
        String signalDefinitionName, SignalDefinitionInner resource) {
        return createOrUpdateWithResponseAsync(resourceGroupName, healthModelName, signalDefinitionName, resource)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create a SignalDefinition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param signalDefinitionName Name of the signal definition. Must be unique within a health model.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a signal definition in a health model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SignalDefinitionInner> createOrUpdateWithResponse(String resourceGroupName, String healthModelName,
        String signalDefinitionName, SignalDefinitionInner resource, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, healthModelName, signalDefinitionName, contentType,
            accept, resource, context);
    }

    /**
     * Create a SignalDefinition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param signalDefinitionName Name of the signal definition. Must be unique within a health model.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a signal definition in a health model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SignalDefinitionInner createOrUpdate(String resourceGroupName, String healthModelName,
        String signalDefinitionName, SignalDefinitionInner resource) {
        return createOrUpdateWithResponse(resourceGroupName, healthModelName, signalDefinitionName, resource,
            Context.NONE).getValue();
    }

    /**
     * Delete a SignalDefinition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param signalDefinitionName Name of the signal definition. Must be unique within a health model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String healthModelName,
        String signalDefinitionName) {
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, healthModelName, signalDefinitionName, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a SignalDefinition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param signalDefinitionName Name of the signal definition. Must be unique within a health model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String healthModelName, String signalDefinitionName) {
        return deleteWithResponseAsync(resourceGroupName, healthModelName, signalDefinitionName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete a SignalDefinition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param signalDefinitionName Name of the signal definition. Must be unique within a health model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceGroupName, String healthModelName,
        String signalDefinitionName, Context context) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, healthModelName, signalDefinitionName, context);
    }

    /**
     * Delete a SignalDefinition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param signalDefinitionName Name of the signal definition. Must be unique within a health model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String healthModelName, String signalDefinitionName) {
        deleteWithResponse(resourceGroupName, healthModelName, signalDefinitionName, Context.NONE);
    }

    /**
     * List SignalDefinition resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param timestamp Timestamp to use for the operation. When specified, the version of the resource at this point in
     * time is retrieved. If not specified, the latest version is used.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SignalDefinition list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SignalDefinitionInner>> listByHealthModelSinglePageAsync(String resourceGroupName,
        String healthModelName, OffsetDateTime timestamp) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByHealthModel(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, timestamp, healthModelName, accept, context))
            .<PagedResponse<SignalDefinitionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List SignalDefinition resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param timestamp Timestamp to use for the operation. When specified, the version of the resource at this point in
     * time is retrieved. If not specified, the latest version is used.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SignalDefinition list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SignalDefinitionInner> listByHealthModelAsync(String resourceGroupName, String healthModelName,
        OffsetDateTime timestamp) {
        return new PagedFlux<>(() -> listByHealthModelSinglePageAsync(resourceGroupName, healthModelName, timestamp),
            nextLink -> listByHealthModelNextSinglePageAsync(nextLink));
    }

    /**
     * List SignalDefinition resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SignalDefinition list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SignalDefinitionInner> listByHealthModelAsync(String resourceGroupName, String healthModelName) {
        final OffsetDateTime timestamp = null;
        return new PagedFlux<>(() -> listByHealthModelSinglePageAsync(resourceGroupName, healthModelName, timestamp),
            nextLink -> listByHealthModelNextSinglePageAsync(nextLink));
    }

    /**
     * List SignalDefinition resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param timestamp Timestamp to use for the operation. When specified, the version of the resource at this point in
     * time is retrieved. If not specified, the latest version is used.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SignalDefinition list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<SignalDefinitionInner> listByHealthModelSinglePage(String resourceGroupName,
        String healthModelName, OffsetDateTime timestamp) {
        final String accept = "application/json";
        Response<SignalDefinitionListResult> res
            = service.listByHealthModelSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, timestamp, healthModelName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List SignalDefinition resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param timestamp Timestamp to use for the operation. When specified, the version of the resource at this point in
     * time is retrieved. If not specified, the latest version is used.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SignalDefinition list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<SignalDefinitionInner> listByHealthModelSinglePage(String resourceGroupName,
        String healthModelName, OffsetDateTime timestamp, Context context) {
        final String accept = "application/json";
        Response<SignalDefinitionListResult> res
            = service.listByHealthModelSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, timestamp, healthModelName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List SignalDefinition resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SignalDefinition list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SignalDefinitionInner> listByHealthModel(String resourceGroupName, String healthModelName) {
        final OffsetDateTime timestamp = null;
        return new PagedIterable<>(() -> listByHealthModelSinglePage(resourceGroupName, healthModelName, timestamp),
            nextLink -> listByHealthModelNextSinglePage(nextLink));
    }

    /**
     * List SignalDefinition resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param timestamp Timestamp to use for the operation. When specified, the version of the resource at this point in
     * time is retrieved. If not specified, the latest version is used.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SignalDefinition list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SignalDefinitionInner> listByHealthModel(String resourceGroupName, String healthModelName,
        OffsetDateTime timestamp, Context context) {
        return new PagedIterable<>(
            () -> listByHealthModelSinglePage(resourceGroupName, healthModelName, timestamp, context),
            nextLink -> listByHealthModelNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SignalDefinition list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SignalDefinitionInner>> listByHealthModelNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByHealthModelNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SignalDefinitionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SignalDefinition list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<SignalDefinitionInner> listByHealthModelNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<SignalDefinitionListResult> res
            = service.listByHealthModelNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SignalDefinition list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<SignalDefinitionInner> listByHealthModelNextSinglePage(String nextLink, Context context) {
        final String accept = "application/json";
        Response<SignalDefinitionListResult> res
            = service.listByHealthModelNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }
}
