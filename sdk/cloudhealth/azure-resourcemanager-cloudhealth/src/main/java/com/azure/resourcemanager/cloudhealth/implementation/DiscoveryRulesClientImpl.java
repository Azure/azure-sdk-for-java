// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cloudhealth.fluent.DiscoveryRulesClient;
import com.azure.resourcemanager.cloudhealth.fluent.models.DiscoveryRuleInner;
import com.azure.resourcemanager.cloudhealth.implementation.models.DiscoveryRuleListResult;
import java.time.OffsetDateTime;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DiscoveryRulesClient.
 */
public final class DiscoveryRulesClientImpl implements DiscoveryRulesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DiscoveryRulesService service;

    /**
     * The service client containing this operation class.
     */
    private final CloudHealthManagementClientImpl client;

    /**
     * Initializes an instance of DiscoveryRulesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DiscoveryRulesClientImpl(CloudHealthManagementClientImpl client) {
        this.service
            = RestProxy.create(DiscoveryRulesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for CloudHealthManagementClientDiscoveryRules to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "CloudHealthManagemen")
    public interface DiscoveryRulesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/discoveryrules/{discoveryRuleName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DiscoveryRuleInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("healthModelName") String healthModelName,
            @PathParam("discoveryRuleName") String discoveryRuleName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/discoveryrules/{discoveryRuleName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DiscoveryRuleInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("healthModelName") String healthModelName,
            @PathParam("discoveryRuleName") String discoveryRuleName, @HeaderParam("Accept") String accept,
            Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/discoveryrules/{discoveryRuleName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DiscoveryRuleInner>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("healthModelName") String healthModelName,
            @PathParam("discoveryRuleName") String discoveryRuleName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") DiscoveryRuleInner resource,
            Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/discoveryrules/{discoveryRuleName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DiscoveryRuleInner> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("healthModelName") String healthModelName,
            @PathParam("discoveryRuleName") String discoveryRuleName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") DiscoveryRuleInner resource,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/discoveryrules/{discoveryRuleName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("healthModelName") String healthModelName,
            @PathParam("discoveryRuleName") String discoveryRuleName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/discoveryrules/{discoveryRuleName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<Void> deleteSync(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("healthModelName") String healthModelName,
            @PathParam("discoveryRuleName") String discoveryRuleName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/discoveryrules")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DiscoveryRuleListResult>> listByHealthModel(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("timestamp") OffsetDateTime timestamp,
            @PathParam("healthModelName") String healthModelName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/discoveryrules")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DiscoveryRuleListResult> listByHealthModelSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("timestamp") OffsetDateTime timestamp,
            @PathParam("healthModelName") String healthModelName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DiscoveryRuleListResult>> listByHealthModelNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DiscoveryRuleListResult> listByHealthModelNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a DiscoveryRule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param discoveryRuleName Name of the discovery rule. Must be unique within a health model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DiscoveryRule along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DiscoveryRuleInner>> getWithResponseAsync(String resourceGroupName, String healthModelName,
        String discoveryRuleName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (healthModelName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter healthModelName is required and cannot be null."));
        }
        if (discoveryRuleName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter discoveryRuleName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, healthModelName, discoveryRuleName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a DiscoveryRule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param discoveryRuleName Name of the discovery rule. Must be unique within a health model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DiscoveryRule on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DiscoveryRuleInner> getAsync(String resourceGroupName, String healthModelName,
        String discoveryRuleName) {
        return getWithResponseAsync(resourceGroupName, healthModelName, discoveryRuleName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a DiscoveryRule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param discoveryRuleName Name of the discovery rule. Must be unique within a health model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DiscoveryRule along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DiscoveryRuleInner> getWithResponse(String resourceGroupName, String healthModelName,
        String discoveryRuleName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (healthModelName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter healthModelName is required and cannot be null."));
        }
        if (discoveryRuleName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter discoveryRuleName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, healthModelName, discoveryRuleName, accept, context);
    }

    /**
     * Get a DiscoveryRule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param discoveryRuleName Name of the discovery rule. Must be unique within a health model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DiscoveryRule.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscoveryRuleInner get(String resourceGroupName, String healthModelName, String discoveryRuleName) {
        return getWithResponse(resourceGroupName, healthModelName, discoveryRuleName, Context.NONE).getValue();
    }

    /**
     * Create a DiscoveryRule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param discoveryRuleName Name of the discovery rule. Must be unique within a health model.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a discovery rule which automatically finds entities and relationships in a health model based on an Azure
     * Resource Graph query along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DiscoveryRuleInner>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String healthModelName, String discoveryRuleName, DiscoveryRuleInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (healthModelName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter healthModelName is required and cannot be null."));
        }
        if (discoveryRuleName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter discoveryRuleName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, healthModelName, discoveryRuleName, contentType,
                accept, resource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a DiscoveryRule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param discoveryRuleName Name of the discovery rule. Must be unique within a health model.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a discovery rule which automatically finds entities and relationships in a health model based on an Azure
     * Resource Graph query on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DiscoveryRuleInner> createOrUpdateAsync(String resourceGroupName, String healthModelName,
        String discoveryRuleName, DiscoveryRuleInner resource) {
        return createOrUpdateWithResponseAsync(resourceGroupName, healthModelName, discoveryRuleName, resource)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create a DiscoveryRule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param discoveryRuleName Name of the discovery rule. Must be unique within a health model.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a discovery rule which automatically finds entities and relationships in a health model based on an Azure
     * Resource Graph query along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DiscoveryRuleInner> createOrUpdateWithResponse(String resourceGroupName, String healthModelName,
        String discoveryRuleName, DiscoveryRuleInner resource, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (healthModelName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter healthModelName is required and cannot be null."));
        }
        if (discoveryRuleName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter discoveryRuleName is required and cannot be null."));
        }
        if (resource == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, healthModelName, discoveryRuleName, contentType, accept,
            resource, context);
    }

    /**
     * Create a DiscoveryRule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param discoveryRuleName Name of the discovery rule. Must be unique within a health model.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a discovery rule which automatically finds entities and relationships in a health model based on an Azure
     * Resource Graph query.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscoveryRuleInner createOrUpdate(String resourceGroupName, String healthModelName, String discoveryRuleName,
        DiscoveryRuleInner resource) {
        return createOrUpdateWithResponse(resourceGroupName, healthModelName, discoveryRuleName, resource, Context.NONE)
            .getValue();
    }

    /**
     * Delete a DiscoveryRule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param discoveryRuleName Name of the discovery rule. Must be unique within a health model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String healthModelName,
        String discoveryRuleName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (healthModelName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter healthModelName is required and cannot be null."));
        }
        if (discoveryRuleName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter discoveryRuleName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, healthModelName, discoveryRuleName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a DiscoveryRule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param discoveryRuleName Name of the discovery rule. Must be unique within a health model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String healthModelName, String discoveryRuleName) {
        return deleteWithResponseAsync(resourceGroupName, healthModelName, discoveryRuleName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete a DiscoveryRule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param discoveryRuleName Name of the discovery rule. Must be unique within a health model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceGroupName, String healthModelName, String discoveryRuleName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (healthModelName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter healthModelName is required and cannot be null."));
        }
        if (discoveryRuleName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter discoveryRuleName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, healthModelName, discoveryRuleName, accept, context);
    }

    /**
     * Delete a DiscoveryRule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param discoveryRuleName Name of the discovery rule. Must be unique within a health model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String healthModelName, String discoveryRuleName) {
        deleteWithResponse(resourceGroupName, healthModelName, discoveryRuleName, Context.NONE);
    }

    /**
     * List DiscoveryRule resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param timestamp Timestamp to use for the operation. When specified, the version of the resource at this point in
     * time is retrieved. If not specified, the latest version is used.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DiscoveryRule list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DiscoveryRuleInner>> listByHealthModelSinglePageAsync(String resourceGroupName,
        String healthModelName, OffsetDateTime timestamp) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (healthModelName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter healthModelName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByHealthModel(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, timestamp, healthModelName, accept, context))
            .<PagedResponse<DiscoveryRuleInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List DiscoveryRule resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param timestamp Timestamp to use for the operation. When specified, the version of the resource at this point in
     * time is retrieved. If not specified, the latest version is used.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DiscoveryRule list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DiscoveryRuleInner> listByHealthModelAsync(String resourceGroupName, String healthModelName,
        OffsetDateTime timestamp) {
        return new PagedFlux<>(() -> listByHealthModelSinglePageAsync(resourceGroupName, healthModelName, timestamp),
            nextLink -> listByHealthModelNextSinglePageAsync(nextLink));
    }

    /**
     * List DiscoveryRule resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DiscoveryRule list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DiscoveryRuleInner> listByHealthModelAsync(String resourceGroupName, String healthModelName) {
        final OffsetDateTime timestamp = null;
        return new PagedFlux<>(() -> listByHealthModelSinglePageAsync(resourceGroupName, healthModelName, timestamp),
            nextLink -> listByHealthModelNextSinglePageAsync(nextLink));
    }

    /**
     * List DiscoveryRule resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param timestamp Timestamp to use for the operation. When specified, the version of the resource at this point in
     * time is retrieved. If not specified, the latest version is used.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DiscoveryRule list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DiscoveryRuleInner> listByHealthModelSinglePage(String resourceGroupName,
        String healthModelName, OffsetDateTime timestamp) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (healthModelName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter healthModelName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<DiscoveryRuleListResult> res
            = service.listByHealthModelSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, timestamp, healthModelName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List DiscoveryRule resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param timestamp Timestamp to use for the operation. When specified, the version of the resource at this point in
     * time is retrieved. If not specified, the latest version is used.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DiscoveryRule list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DiscoveryRuleInner> listByHealthModelSinglePage(String resourceGroupName,
        String healthModelName, OffsetDateTime timestamp, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (healthModelName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter healthModelName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<DiscoveryRuleListResult> res
            = service.listByHealthModelSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, timestamp, healthModelName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List DiscoveryRule resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DiscoveryRule list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryRuleInner> listByHealthModel(String resourceGroupName, String healthModelName) {
        final OffsetDateTime timestamp = null;
        return new PagedIterable<>(() -> listByHealthModelSinglePage(resourceGroupName, healthModelName, timestamp),
            nextLink -> listByHealthModelNextSinglePage(nextLink));
    }

    /**
     * List DiscoveryRule resources by HealthModel.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param healthModelName Name of health model resource.
     * @param timestamp Timestamp to use for the operation. When specified, the version of the resource at this point in
     * time is retrieved. If not specified, the latest version is used.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DiscoveryRule list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryRuleInner> listByHealthModel(String resourceGroupName, String healthModelName,
        OffsetDateTime timestamp, Context context) {
        return new PagedIterable<>(
            () -> listByHealthModelSinglePage(resourceGroupName, healthModelName, timestamp, context),
            nextLink -> listByHealthModelNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DiscoveryRule list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DiscoveryRuleInner>> listByHealthModelNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByHealthModelNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DiscoveryRuleInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DiscoveryRule list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DiscoveryRuleInner> listByHealthModelNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<DiscoveryRuleListResult> res
            = service.listByHealthModelNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DiscoveryRule list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DiscoveryRuleInner> listByHealthModelNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<DiscoveryRuleListResult> res
            = service.listByHealthModelNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(DiscoveryRulesClientImpl.class);
}
