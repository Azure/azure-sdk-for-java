// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Alert configuration details.
 */
@Fluent
public final class AlertConfiguration implements JsonSerializable<AlertConfiguration> {
    /*
     * The severity of triggered alert.
     */
    private AlertSeverity severity;

    /*
     * The alert rule description.
     */
    private String description;

    /*
     * Optional list of action group resource IDs to be notified when the alert is triggered.
     */
    private List<String> actionGroupIds;

    /**
     * Creates an instance of AlertConfiguration class.
     */
    public AlertConfiguration() {
    }

    /**
     * Get the severity property: The severity of triggered alert.
     * 
     * @return the severity value.
     */
    public AlertSeverity severity() {
        return this.severity;
    }

    /**
     * Set the severity property: The severity of triggered alert.
     * 
     * @param severity the severity value to set.
     * @return the AlertConfiguration object itself.
     */
    public AlertConfiguration withSeverity(AlertSeverity severity) {
        this.severity = severity;
        return this;
    }

    /**
     * Get the description property: The alert rule description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The alert rule description.
     * 
     * @param description the description value to set.
     * @return the AlertConfiguration object itself.
     */
    public AlertConfiguration withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the actionGroupIds property: Optional list of action group resource IDs to be notified when the alert is
     * triggered.
     * 
     * @return the actionGroupIds value.
     */
    public List<String> actionGroupIds() {
        return this.actionGroupIds;
    }

    /**
     * Set the actionGroupIds property: Optional list of action group resource IDs to be notified when the alert is
     * triggered.
     * 
     * @param actionGroupIds the actionGroupIds value to set.
     * @return the AlertConfiguration object itself.
     */
    public AlertConfiguration withActionGroupIds(List<String> actionGroupIds) {
        this.actionGroupIds = actionGroupIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (severity() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property severity in model AlertConfiguration"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AlertConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("severity", this.severity == null ? null : this.severity.toString());
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("actionGroupIds", this.actionGroupIds,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AlertConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AlertConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AlertConfiguration.
     */
    public static AlertConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AlertConfiguration deserializedAlertConfiguration = new AlertConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("severity".equals(fieldName)) {
                    deserializedAlertConfiguration.severity = AlertSeverity.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedAlertConfiguration.description = reader.getString();
                } else if ("actionGroupIds".equals(fieldName)) {
                    List<String> actionGroupIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedAlertConfiguration.actionGroupIds = actionGroupIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAlertConfiguration;
        });
    }
}
