// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * Properties which are common across all kinds of entities.
 */
@Fluent
public final class EntityProperties implements JsonSerializable<EntityProperties> {
    /*
     * The status of the last operation.
     */
    private HealthModelProvisioningState provisioningState;

    /*
     * Display name
     */
    private String displayName;

    /*
     * Entity kind
     */
    private String kind;

    /*
     * Positioning of the entity on the model canvas
     */
    private EntityCoordinates canvasPosition;

    /*
     * Visual icon definition. If not set, a default icon is used.
     */
    private IconDefinition icon;

    /*
     * Health objective as a percentage of time the entity should be healthy.
     */
    private Double healthObjective;

    /*
     * Impact of the entity in health state propagation
     */
    private EntityImpact impact;

    /*
     * Optional set of labels (key-value pairs)
     */
    private Map<String, String> labels;

    /*
     * Signal groups which are assigned to this entity
     */
    private SignalGroup signals;

    /*
     * Discovered by which discovery rule. If set, the entity cannot be deleted manually.
     */
    private String discoveredBy;

    /*
     * Date when the entity was (soft-)deleted
     */
    private OffsetDateTime deletionDate;

    /*
     * Health state of this entity
     */
    private HealthState healthState;

    /*
     * Alert configuration for this entity
     */
    private EntityAlerts alerts;

    /**
     * Creates an instance of EntityProperties class.
     */
    public EntityProperties() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public HealthModelProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the displayName property: Display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name.
     * 
     * @param displayName the displayName value to set.
     * @return the EntityProperties object itself.
     */
    public EntityProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the kind property: Entity kind.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Entity kind.
     * 
     * @param kind the kind value to set.
     * @return the EntityProperties object itself.
     */
    public EntityProperties withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the canvasPosition property: Positioning of the entity on the model canvas.
     * 
     * @return the canvasPosition value.
     */
    public EntityCoordinates canvasPosition() {
        return this.canvasPosition;
    }

    /**
     * Set the canvasPosition property: Positioning of the entity on the model canvas.
     * 
     * @param canvasPosition the canvasPosition value to set.
     * @return the EntityProperties object itself.
     */
    public EntityProperties withCanvasPosition(EntityCoordinates canvasPosition) {
        this.canvasPosition = canvasPosition;
        return this;
    }

    /**
     * Get the icon property: Visual icon definition. If not set, a default icon is used.
     * 
     * @return the icon value.
     */
    public IconDefinition icon() {
        return this.icon;
    }

    /**
     * Set the icon property: Visual icon definition. If not set, a default icon is used.
     * 
     * @param icon the icon value to set.
     * @return the EntityProperties object itself.
     */
    public EntityProperties withIcon(IconDefinition icon) {
        this.icon = icon;
        return this;
    }

    /**
     * Get the healthObjective property: Health objective as a percentage of time the entity should be healthy.
     * 
     * @return the healthObjective value.
     */
    public Double healthObjective() {
        return this.healthObjective;
    }

    /**
     * Set the healthObjective property: Health objective as a percentage of time the entity should be healthy.
     * 
     * @param healthObjective the healthObjective value to set.
     * @return the EntityProperties object itself.
     */
    public EntityProperties withHealthObjective(Double healthObjective) {
        this.healthObjective = healthObjective;
        return this;
    }

    /**
     * Get the impact property: Impact of the entity in health state propagation.
     * 
     * @return the impact value.
     */
    public EntityImpact impact() {
        return this.impact;
    }

    /**
     * Set the impact property: Impact of the entity in health state propagation.
     * 
     * @param impact the impact value to set.
     * @return the EntityProperties object itself.
     */
    public EntityProperties withImpact(EntityImpact impact) {
        this.impact = impact;
        return this;
    }

    /**
     * Get the labels property: Optional set of labels (key-value pairs).
     * 
     * @return the labels value.
     */
    public Map<String, String> labels() {
        return this.labels;
    }

    /**
     * Set the labels property: Optional set of labels (key-value pairs).
     * 
     * @param labels the labels value to set.
     * @return the EntityProperties object itself.
     */
    public EntityProperties withLabels(Map<String, String> labels) {
        this.labels = labels;
        return this;
    }

    /**
     * Get the signals property: Signal groups which are assigned to this entity.
     * 
     * @return the signals value.
     */
    public SignalGroup signals() {
        return this.signals;
    }

    /**
     * Set the signals property: Signal groups which are assigned to this entity.
     * 
     * @param signals the signals value to set.
     * @return the EntityProperties object itself.
     */
    public EntityProperties withSignals(SignalGroup signals) {
        this.signals = signals;
        return this;
    }

    /**
     * Get the discoveredBy property: Discovered by which discovery rule. If set, the entity cannot be deleted manually.
     * 
     * @return the discoveredBy value.
     */
    public String discoveredBy() {
        return this.discoveredBy;
    }

    /**
     * Get the deletionDate property: Date when the entity was (soft-)deleted.
     * 
     * @return the deletionDate value.
     */
    public OffsetDateTime deletionDate() {
        return this.deletionDate;
    }

    /**
     * Get the healthState property: Health state of this entity.
     * 
     * @return the healthState value.
     */
    public HealthState healthState() {
        return this.healthState;
    }

    /**
     * Get the alerts property: Alert configuration for this entity.
     * 
     * @return the alerts value.
     */
    public EntityAlerts alerts() {
        return this.alerts;
    }

    /**
     * Set the alerts property: Alert configuration for this entity.
     * 
     * @param alerts the alerts value to set.
     * @return the EntityProperties object itself.
     */
    public EntityProperties withAlerts(EntityAlerts alerts) {
        this.alerts = alerts;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (canvasPosition() != null) {
            canvasPosition().validate();
        }
        if (icon() != null) {
            icon().validate();
        }
        if (signals() != null) {
            signals().validate();
        }
        if (alerts() != null) {
            alerts().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("kind", this.kind);
        jsonWriter.writeJsonField("canvasPosition", this.canvasPosition);
        jsonWriter.writeJsonField("icon", this.icon);
        jsonWriter.writeNumberField("healthObjective", this.healthObjective);
        jsonWriter.writeStringField("impact", this.impact == null ? null : this.impact.toString());
        jsonWriter.writeMapField("labels", this.labels, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("signals", this.signals);
        jsonWriter.writeJsonField("alerts", this.alerts);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EntityProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EntityProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EntityProperties.
     */
    public static EntityProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EntityProperties deserializedEntityProperties = new EntityProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedEntityProperties.provisioningState
                        = HealthModelProvisioningState.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedEntityProperties.displayName = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    deserializedEntityProperties.kind = reader.getString();
                } else if ("canvasPosition".equals(fieldName)) {
                    deserializedEntityProperties.canvasPosition = EntityCoordinates.fromJson(reader);
                } else if ("icon".equals(fieldName)) {
                    deserializedEntityProperties.icon = IconDefinition.fromJson(reader);
                } else if ("healthObjective".equals(fieldName)) {
                    deserializedEntityProperties.healthObjective = reader.getNullable(JsonReader::getDouble);
                } else if ("impact".equals(fieldName)) {
                    deserializedEntityProperties.impact = EntityImpact.fromString(reader.getString());
                } else if ("labels".equals(fieldName)) {
                    Map<String, String> labels = reader.readMap(reader1 -> reader1.getString());
                    deserializedEntityProperties.labels = labels;
                } else if ("signals".equals(fieldName)) {
                    deserializedEntityProperties.signals = SignalGroup.fromJson(reader);
                } else if ("discoveredBy".equals(fieldName)) {
                    deserializedEntityProperties.discoveredBy = reader.getString();
                } else if ("deletionDate".equals(fieldName)) {
                    deserializedEntityProperties.deletionDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("healthState".equals(fieldName)) {
                    deserializedEntityProperties.healthState = HealthState.fromString(reader.getString());
                } else if ("alerts".equals(fieldName)) {
                    deserializedEntityProperties.alerts = EntityAlerts.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEntityProperties;
        });
    }
}
