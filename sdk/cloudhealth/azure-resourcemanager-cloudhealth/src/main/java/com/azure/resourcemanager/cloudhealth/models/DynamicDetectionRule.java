// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * ML-based evaluation rule for a signal definition.
 */
@Fluent
public final class DynamicDetectionRule implements JsonSerializable<DynamicDetectionRule> {
    /*
     * ML model to use for dynamic thresholds
     */
    private DynamicThresholdModel dynamicThresholdModel;

    /*
     * ML model sensitivity. Lowest value = high sensitivity. Supported step size = 0.5
     */
    private double modelSensitivity;

    /*
     * Threshold direction
     */
    private DynamicThresholdDirection dynamicThresholdDirection;

    /*
     * Start time of the training in UTC.
     */
    private OffsetDateTime trainingStartTime;

    /**
     * Creates an instance of DynamicDetectionRule class.
     */
    public DynamicDetectionRule() {
    }

    /**
     * Get the dynamicThresholdModel property: ML model to use for dynamic thresholds.
     * 
     * @return the dynamicThresholdModel value.
     */
    public DynamicThresholdModel dynamicThresholdModel() {
        return this.dynamicThresholdModel;
    }

    /**
     * Set the dynamicThresholdModel property: ML model to use for dynamic thresholds.
     * 
     * @param dynamicThresholdModel the dynamicThresholdModel value to set.
     * @return the DynamicDetectionRule object itself.
     */
    public DynamicDetectionRule withDynamicThresholdModel(DynamicThresholdModel dynamicThresholdModel) {
        this.dynamicThresholdModel = dynamicThresholdModel;
        return this;
    }

    /**
     * Get the modelSensitivity property: ML model sensitivity. Lowest value = high sensitivity. Supported step size =
     * 0.5.
     * 
     * @return the modelSensitivity value.
     */
    public double modelSensitivity() {
        return this.modelSensitivity;
    }

    /**
     * Set the modelSensitivity property: ML model sensitivity. Lowest value = high sensitivity. Supported step size =
     * 0.5.
     * 
     * @param modelSensitivity the modelSensitivity value to set.
     * @return the DynamicDetectionRule object itself.
     */
    public DynamicDetectionRule withModelSensitivity(double modelSensitivity) {
        this.modelSensitivity = modelSensitivity;
        return this;
    }

    /**
     * Get the dynamicThresholdDirection property: Threshold direction.
     * 
     * @return the dynamicThresholdDirection value.
     */
    public DynamicThresholdDirection dynamicThresholdDirection() {
        return this.dynamicThresholdDirection;
    }

    /**
     * Set the dynamicThresholdDirection property: Threshold direction.
     * 
     * @param dynamicThresholdDirection the dynamicThresholdDirection value to set.
     * @return the DynamicDetectionRule object itself.
     */
    public DynamicDetectionRule withDynamicThresholdDirection(DynamicThresholdDirection dynamicThresholdDirection) {
        this.dynamicThresholdDirection = dynamicThresholdDirection;
        return this;
    }

    /**
     * Get the trainingStartTime property: Start time of the training in UTC.
     * 
     * @return the trainingStartTime value.
     */
    public OffsetDateTime trainingStartTime() {
        return this.trainingStartTime;
    }

    /**
     * Set the trainingStartTime property: Start time of the training in UTC.
     * 
     * @param trainingStartTime the trainingStartTime value to set.
     * @return the DynamicDetectionRule object itself.
     */
    public DynamicDetectionRule withTrainingStartTime(OffsetDateTime trainingStartTime) {
        this.trainingStartTime = trainingStartTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dynamicThresholdModel() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dynamicThresholdModel in model DynamicDetectionRule"));
        }
        if (dynamicThresholdDirection() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dynamicThresholdDirection in model DynamicDetectionRule"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DynamicDetectionRule.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dynamicThresholdModel",
            this.dynamicThresholdModel == null ? null : this.dynamicThresholdModel.toString());
        jsonWriter.writeDoubleField("modelSensitivity", this.modelSensitivity);
        jsonWriter.writeStringField("dynamicThresholdDirection",
            this.dynamicThresholdDirection == null ? null : this.dynamicThresholdDirection.toString());
        jsonWriter.writeStringField("trainingStartTime",
            this.trainingStartTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.trainingStartTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DynamicDetectionRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DynamicDetectionRule if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DynamicDetectionRule.
     */
    public static DynamicDetectionRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DynamicDetectionRule deserializedDynamicDetectionRule = new DynamicDetectionRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dynamicThresholdModel".equals(fieldName)) {
                    deserializedDynamicDetectionRule.dynamicThresholdModel
                        = DynamicThresholdModel.fromString(reader.getString());
                } else if ("modelSensitivity".equals(fieldName)) {
                    deserializedDynamicDetectionRule.modelSensitivity = reader.getDouble();
                } else if ("dynamicThresholdDirection".equals(fieldName)) {
                    deserializedDynamicDetectionRule.dynamicThresholdDirection
                        = DynamicThresholdDirection.fromString(reader.getString());
                } else if ("trainingStartTime".equals(fieldName)) {
                    deserializedDynamicDetectionRule.trainingStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDynamicDetectionRule;
        });
    }
}
