// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Visual position of the entity.
 */
@Fluent
public final class EntityCoordinates implements JsonSerializable<EntityCoordinates> {
    /*
     * X Coordinate
     */
    private double x;

    /*
     * Y Coordinate
     */
    private double y;

    /**
     * Creates an instance of EntityCoordinates class.
     */
    public EntityCoordinates() {
    }

    /**
     * Get the x property: X Coordinate.
     * 
     * @return the x value.
     */
    public double x() {
        return this.x;
    }

    /**
     * Set the x property: X Coordinate.
     * 
     * @param x the x value to set.
     * @return the EntityCoordinates object itself.
     */
    public EntityCoordinates withX(double x) {
        this.x = x;
        return this;
    }

    /**
     * Get the y property: Y Coordinate.
     * 
     * @return the y value.
     */
    public double y() {
        return this.y;
    }

    /**
     * Set the y property: Y Coordinate.
     * 
     * @param y the y value to set.
     * @return the EntityCoordinates object itself.
     */
    public EntityCoordinates withY(double y) {
        this.y = y;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeDoubleField("x", this.x);
        jsonWriter.writeDoubleField("y", this.y);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EntityCoordinates from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EntityCoordinates if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EntityCoordinates.
     */
    public static EntityCoordinates fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EntityCoordinates deserializedEntityCoordinates = new EntityCoordinates();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("x".equals(fieldName)) {
                    deserializedEntityCoordinates.x = reader.getDouble();
                } else if ("y".equals(fieldName)) {
                    deserializedEntityCoordinates.y = reader.getDouble();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEntityCoordinates;
        });
    }
}
