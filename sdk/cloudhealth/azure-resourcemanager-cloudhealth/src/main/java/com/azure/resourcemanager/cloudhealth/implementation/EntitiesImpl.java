// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cloudhealth.fluent.EntitiesClient;
import com.azure.resourcemanager.cloudhealth.fluent.models.EntityInner;
import com.azure.resourcemanager.cloudhealth.models.Entities;
import com.azure.resourcemanager.cloudhealth.models.Entity;
import java.time.OffsetDateTime;

public final class EntitiesImpl implements Entities {
    private static final ClientLogger LOGGER = new ClientLogger(EntitiesImpl.class);

    private final EntitiesClient innerClient;

    private final com.azure.resourcemanager.cloudhealth.CloudHealthManager serviceManager;

    public EntitiesImpl(EntitiesClient innerClient,
        com.azure.resourcemanager.cloudhealth.CloudHealthManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<Entity> getWithResponse(String resourceGroupName, String healthModelName, String entityName,
        Context context) {
        Response<EntityInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, healthModelName, entityName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new EntityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Entity get(String resourceGroupName, String healthModelName, String entityName) {
        EntityInner inner = this.serviceClient().get(resourceGroupName, healthModelName, entityName);
        if (inner != null) {
            return new EntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String healthModelName, String entityName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, healthModelName, entityName, context);
    }

    public void delete(String resourceGroupName, String healthModelName, String entityName) {
        this.serviceClient().delete(resourceGroupName, healthModelName, entityName);
    }

    public PagedIterable<Entity> listByHealthModel(String resourceGroupName, String healthModelName) {
        PagedIterable<EntityInner> inner = this.serviceClient().listByHealthModel(resourceGroupName, healthModelName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EntityImpl(inner1, this.manager()));
    }

    public PagedIterable<Entity> listByHealthModel(String resourceGroupName, String healthModelName,
        OffsetDateTime timestamp, Context context) {
        PagedIterable<EntityInner> inner
            = this.serviceClient().listByHealthModel(resourceGroupName, healthModelName, timestamp, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EntityImpl(inner1, this.manager()));
    }

    public Entity getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String healthModelName = ResourceManagerUtils.getValueFromIdByName(id, "healthmodels");
        if (healthModelName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'healthmodels'.", id)));
        }
        String entityName = ResourceManagerUtils.getValueFromIdByName(id, "entities");
        if (entityName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'entities'.", id)));
        }
        return this.getWithResponse(resourceGroupName, healthModelName, entityName, Context.NONE).getValue();
    }

    public Response<Entity> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String healthModelName = ResourceManagerUtils.getValueFromIdByName(id, "healthmodels");
        if (healthModelName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'healthmodels'.", id)));
        }
        String entityName = ResourceManagerUtils.getValueFromIdByName(id, "entities");
        if (entityName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'entities'.", id)));
        }
        return this.getWithResponse(resourceGroupName, healthModelName, entityName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String healthModelName = ResourceManagerUtils.getValueFromIdByName(id, "healthmodels");
        if (healthModelName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'healthmodels'.", id)));
        }
        String entityName = ResourceManagerUtils.getValueFromIdByName(id, "entities");
        if (entityName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'entities'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, healthModelName, entityName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String healthModelName = ResourceManagerUtils.getValueFromIdByName(id, "healthmodels");
        if (healthModelName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'healthmodels'.", id)));
        }
        String entityName = ResourceManagerUtils.getValueFromIdByName(id, "entities");
        if (entityName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'entities'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, healthModelName, entityName, context);
    }

    private EntitiesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cloudhealth.CloudHealthManager manager() {
        return this.serviceManager;
    }

    public EntityImpl define(String name) {
        return new EntityImpl(name, this.manager());
    }
}
