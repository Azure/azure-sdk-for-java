// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Azure Resource Metric Signal Definition properties.
 */
@Fluent
public final class ResourceMetricSignalDefinitionProperties extends SignalDefinitionProperties {
    /*
     * Kind of the signal definition
     */
    private SignalKind signalKind = SignalKind.AZURE_RESOURCE_METRIC;

    /*
     * Metric namespace
     */
    private String metricNamespace;

    /*
     * Name of the metric
     */
    private String metricName;

    /*
     * Time range of signal. ISO duration format like PT10M.
     */
    private String timeGrain;

    /*
     * Type of aggregation to apply to the metric
     */
    private MetricAggregationType aggregationType;

    /*
     * Optional: Dimension to split by
     */
    private String dimension;

    /*
     * Optional: Dimension filter to apply to the dimension. Must only be set if also Dimension is set.
     */
    private String dimensionFilter;

    /**
     * Creates an instance of ResourceMetricSignalDefinitionProperties class.
     */
    public ResourceMetricSignalDefinitionProperties() {
    }

    /**
     * Get the signalKind property: Kind of the signal definition.
     * 
     * @return the signalKind value.
     */
    @Override
    public SignalKind signalKind() {
        return this.signalKind;
    }

    /**
     * Get the metricNamespace property: Metric namespace.
     * 
     * @return the metricNamespace value.
     */
    public String metricNamespace() {
        return this.metricNamespace;
    }

    /**
     * Set the metricNamespace property: Metric namespace.
     * 
     * @param metricNamespace the metricNamespace value to set.
     * @return the ResourceMetricSignalDefinitionProperties object itself.
     */
    public ResourceMetricSignalDefinitionProperties withMetricNamespace(String metricNamespace) {
        this.metricNamespace = metricNamespace;
        return this;
    }

    /**
     * Get the metricName property: Name of the metric.
     * 
     * @return the metricName value.
     */
    public String metricName() {
        return this.metricName;
    }

    /**
     * Set the metricName property: Name of the metric.
     * 
     * @param metricName the metricName value to set.
     * @return the ResourceMetricSignalDefinitionProperties object itself.
     */
    public ResourceMetricSignalDefinitionProperties withMetricName(String metricName) {
        this.metricName = metricName;
        return this;
    }

    /**
     * Get the timeGrain property: Time range of signal. ISO duration format like PT10M.
     * 
     * @return the timeGrain value.
     */
    public String timeGrain() {
        return this.timeGrain;
    }

    /**
     * Set the timeGrain property: Time range of signal. ISO duration format like PT10M.
     * 
     * @param timeGrain the timeGrain value to set.
     * @return the ResourceMetricSignalDefinitionProperties object itself.
     */
    public ResourceMetricSignalDefinitionProperties withTimeGrain(String timeGrain) {
        this.timeGrain = timeGrain;
        return this;
    }

    /**
     * Get the aggregationType property: Type of aggregation to apply to the metric.
     * 
     * @return the aggregationType value.
     */
    public MetricAggregationType aggregationType() {
        return this.aggregationType;
    }

    /**
     * Set the aggregationType property: Type of aggregation to apply to the metric.
     * 
     * @param aggregationType the aggregationType value to set.
     * @return the ResourceMetricSignalDefinitionProperties object itself.
     */
    public ResourceMetricSignalDefinitionProperties withAggregationType(MetricAggregationType aggregationType) {
        this.aggregationType = aggregationType;
        return this;
    }

    /**
     * Get the dimension property: Optional: Dimension to split by.
     * 
     * @return the dimension value.
     */
    public String dimension() {
        return this.dimension;
    }

    /**
     * Set the dimension property: Optional: Dimension to split by.
     * 
     * @param dimension the dimension value to set.
     * @return the ResourceMetricSignalDefinitionProperties object itself.
     */
    public ResourceMetricSignalDefinitionProperties withDimension(String dimension) {
        this.dimension = dimension;
        return this;
    }

    /**
     * Get the dimensionFilter property: Optional: Dimension filter to apply to the dimension. Must only be set if also
     * Dimension is set.
     * 
     * @return the dimensionFilter value.
     */
    public String dimensionFilter() {
        return this.dimensionFilter;
    }

    /**
     * Set the dimensionFilter property: Optional: Dimension filter to apply to the dimension. Must only be set if also
     * Dimension is set.
     * 
     * @param dimensionFilter the dimensionFilter value to set.
     * @return the ResourceMetricSignalDefinitionProperties object itself.
     */
    public ResourceMetricSignalDefinitionProperties withDimensionFilter(String dimensionFilter) {
        this.dimensionFilter = dimensionFilter;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceMetricSignalDefinitionProperties withDisplayName(String displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceMetricSignalDefinitionProperties withRefreshInterval(RefreshInterval refreshInterval) {
        super.withRefreshInterval(refreshInterval);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceMetricSignalDefinitionProperties withLabels(Map<String, String> labels) {
        super.withLabels(labels);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceMetricSignalDefinitionProperties withDataUnit(String dataUnit) {
        super.withDataUnit(dataUnit);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceMetricSignalDefinitionProperties withEvaluationRules(EvaluationRule evaluationRules) {
        super.withEvaluationRules(evaluationRules);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (metricNamespace() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property metricNamespace in model ResourceMetricSignalDefinitionProperties"));
        }
        if (metricName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property metricName in model ResourceMetricSignalDefinitionProperties"));
        }
        if (timeGrain() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property timeGrain in model ResourceMetricSignalDefinitionProperties"));
        }
        if (aggregationType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property aggregationType in model ResourceMetricSignalDefinitionProperties"));
        }
        if (evaluationRules() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property evaluationRules in model ResourceMetricSignalDefinitionProperties"));
        } else {
            evaluationRules().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResourceMetricSignalDefinitionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("evaluationRules", evaluationRules());
        jsonWriter.writeStringField("displayName", displayName());
        jsonWriter.writeStringField("refreshInterval", refreshInterval() == null ? null : refreshInterval().toString());
        jsonWriter.writeMapField("labels", labels(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("dataUnit", dataUnit());
        jsonWriter.writeStringField("metricNamespace", this.metricNamespace);
        jsonWriter.writeStringField("metricName", this.metricName);
        jsonWriter.writeStringField("timeGrain", this.timeGrain);
        jsonWriter.writeStringField("aggregationType",
            this.aggregationType == null ? null : this.aggregationType.toString());
        jsonWriter.writeStringField("signalKind", this.signalKind == null ? null : this.signalKind.toString());
        jsonWriter.writeStringField("dimension", this.dimension);
        jsonWriter.writeStringField("dimensionFilter", this.dimensionFilter);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceMetricSignalDefinitionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceMetricSignalDefinitionProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceMetricSignalDefinitionProperties.
     */
    public static ResourceMetricSignalDefinitionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceMetricSignalDefinitionProperties deserializedResourceMetricSignalDefinitionProperties
                = new ResourceMetricSignalDefinitionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("evaluationRules".equals(fieldName)) {
                    deserializedResourceMetricSignalDefinitionProperties
                        .withEvaluationRules(EvaluationRule.fromJson(reader));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedResourceMetricSignalDefinitionProperties
                        .withProvisioningState(HealthModelProvisioningState.fromString(reader.getString()));
                } else if ("displayName".equals(fieldName)) {
                    deserializedResourceMetricSignalDefinitionProperties.withDisplayName(reader.getString());
                } else if ("refreshInterval".equals(fieldName)) {
                    deserializedResourceMetricSignalDefinitionProperties
                        .withRefreshInterval(RefreshInterval.fromString(reader.getString()));
                } else if ("labels".equals(fieldName)) {
                    Map<String, String> labels = reader.readMap(reader1 -> reader1.getString());
                    deserializedResourceMetricSignalDefinitionProperties.withLabels(labels);
                } else if ("dataUnit".equals(fieldName)) {
                    deserializedResourceMetricSignalDefinitionProperties.withDataUnit(reader.getString());
                } else if ("deletionDate".equals(fieldName)) {
                    deserializedResourceMetricSignalDefinitionProperties.withDeletionDate(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("metricNamespace".equals(fieldName)) {
                    deserializedResourceMetricSignalDefinitionProperties.metricNamespace = reader.getString();
                } else if ("metricName".equals(fieldName)) {
                    deserializedResourceMetricSignalDefinitionProperties.metricName = reader.getString();
                } else if ("timeGrain".equals(fieldName)) {
                    deserializedResourceMetricSignalDefinitionProperties.timeGrain = reader.getString();
                } else if ("aggregationType".equals(fieldName)) {
                    deserializedResourceMetricSignalDefinitionProperties.aggregationType
                        = MetricAggregationType.fromString(reader.getString());
                } else if ("signalKind".equals(fieldName)) {
                    deserializedResourceMetricSignalDefinitionProperties.signalKind
                        = SignalKind.fromString(reader.getString());
                } else if ("dimension".equals(fieldName)) {
                    deserializedResourceMetricSignalDefinitionProperties.dimension = reader.getString();
                } else if ("dimensionFilter".equals(fieldName)) {
                    deserializedResourceMetricSignalDefinitionProperties.dimensionFilter = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceMetricSignalDefinitionProperties;
        });
    }
}
