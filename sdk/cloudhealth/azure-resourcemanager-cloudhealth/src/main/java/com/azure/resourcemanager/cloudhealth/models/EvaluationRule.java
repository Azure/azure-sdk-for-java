// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Evaluation rule for a signal definition.
 */
@Fluent
public final class EvaluationRule implements JsonSerializable<EvaluationRule> {
    /*
     * Configure to use ML-based dynamic thresholds. When used, degradedRule and unhealthyRule must not be set.
     */
    private DynamicDetectionRule dynamicDetectionRule;

    /*
     * Degraded rule with static threshold. When used, dynamicDetectionRule must not be set.
     */
    private ThresholdRule degradedRule;

    /*
     * Unhealthy rule with static threshold. When used, dynamicDetectionRule must not be set.
     */
    private ThresholdRule unhealthyRule;

    /**
     * Creates an instance of EvaluationRule class.
     */
    public EvaluationRule() {
    }

    /**
     * Get the dynamicDetectionRule property: Configure to use ML-based dynamic thresholds. When used, degradedRule and
     * unhealthyRule must not be set.
     * 
     * @return the dynamicDetectionRule value.
     */
    public DynamicDetectionRule dynamicDetectionRule() {
        return this.dynamicDetectionRule;
    }

    /**
     * Set the dynamicDetectionRule property: Configure to use ML-based dynamic thresholds. When used, degradedRule and
     * unhealthyRule must not be set.
     * 
     * @param dynamicDetectionRule the dynamicDetectionRule value to set.
     * @return the EvaluationRule object itself.
     */
    public EvaluationRule withDynamicDetectionRule(DynamicDetectionRule dynamicDetectionRule) {
        this.dynamicDetectionRule = dynamicDetectionRule;
        return this;
    }

    /**
     * Get the degradedRule property: Degraded rule with static threshold. When used, dynamicDetectionRule must not be
     * set.
     * 
     * @return the degradedRule value.
     */
    public ThresholdRule degradedRule() {
        return this.degradedRule;
    }

    /**
     * Set the degradedRule property: Degraded rule with static threshold. When used, dynamicDetectionRule must not be
     * set.
     * 
     * @param degradedRule the degradedRule value to set.
     * @return the EvaluationRule object itself.
     */
    public EvaluationRule withDegradedRule(ThresholdRule degradedRule) {
        this.degradedRule = degradedRule;
        return this;
    }

    /**
     * Get the unhealthyRule property: Unhealthy rule with static threshold. When used, dynamicDetectionRule must not be
     * set.
     * 
     * @return the unhealthyRule value.
     */
    public ThresholdRule unhealthyRule() {
        return this.unhealthyRule;
    }

    /**
     * Set the unhealthyRule property: Unhealthy rule with static threshold. When used, dynamicDetectionRule must not be
     * set.
     * 
     * @param unhealthyRule the unhealthyRule value to set.
     * @return the EvaluationRule object itself.
     */
    public EvaluationRule withUnhealthyRule(ThresholdRule unhealthyRule) {
        this.unhealthyRule = unhealthyRule;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dynamicDetectionRule() != null) {
            dynamicDetectionRule().validate();
        }
        if (degradedRule() != null) {
            degradedRule().validate();
        }
        if (unhealthyRule() != null) {
            unhealthyRule().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("dynamicDetectionRule", this.dynamicDetectionRule);
        jsonWriter.writeJsonField("degradedRule", this.degradedRule);
        jsonWriter.writeJsonField("unhealthyRule", this.unhealthyRule);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EvaluationRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EvaluationRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EvaluationRule.
     */
    public static EvaluationRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EvaluationRule deserializedEvaluationRule = new EvaluationRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dynamicDetectionRule".equals(fieldName)) {
                    deserializedEvaluationRule.dynamicDetectionRule = DynamicDetectionRule.fromJson(reader);
                } else if ("degradedRule".equals(fieldName)) {
                    deserializedEvaluationRule.degradedRule = ThresholdRule.fromJson(reader);
                } else if ("unhealthyRule".equals(fieldName)) {
                    deserializedEvaluationRule.unhealthyRule = ThresholdRule.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEvaluationRule;
        });
    }
}
