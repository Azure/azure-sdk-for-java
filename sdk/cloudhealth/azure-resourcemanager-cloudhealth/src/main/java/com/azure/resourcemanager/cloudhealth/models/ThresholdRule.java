// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Threshold-based evaluation rule for a signal definition.
 */
@Fluent
public final class ThresholdRule implements JsonSerializable<ThresholdRule> {
    /*
     * Operator how to compare the signal value with the threshold
     */
    private SignalOperator operator;

    /*
     * Threshold value
     */
    private String threshold;

    /**
     * Creates an instance of ThresholdRule class.
     */
    public ThresholdRule() {
    }

    /**
     * Get the operator property: Operator how to compare the signal value with the threshold.
     * 
     * @return the operator value.
     */
    public SignalOperator operator() {
        return this.operator;
    }

    /**
     * Set the operator property: Operator how to compare the signal value with the threshold.
     * 
     * @param operator the operator value to set.
     * @return the ThresholdRule object itself.
     */
    public ThresholdRule withOperator(SignalOperator operator) {
        this.operator = operator;
        return this;
    }

    /**
     * Get the threshold property: Threshold value.
     * 
     * @return the threshold value.
     */
    public String threshold() {
        return this.threshold;
    }

    /**
     * Set the threshold property: Threshold value.
     * 
     * @param threshold the threshold value to set.
     * @return the ThresholdRule object itself.
     */
    public ThresholdRule withThreshold(String threshold) {
        this.threshold = threshold;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (operator() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property operator in model ThresholdRule"));
        }
        if (threshold() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property threshold in model ThresholdRule"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ThresholdRule.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("operator", this.operator == null ? null : this.operator.toString());
        jsonWriter.writeStringField("threshold", this.threshold);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ThresholdRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ThresholdRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ThresholdRule.
     */
    public static ThresholdRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ThresholdRule deserializedThresholdRule = new ThresholdRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operator".equals(fieldName)) {
                    deserializedThresholdRule.operator = SignalOperator.fromString(reader.getString());
                } else if ("threshold".equals(fieldName)) {
                    deserializedThresholdRule.threshold = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedThresholdRule;
        });
    }
}
