// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Discovery rule properties.
 */
@Fluent
public final class DiscoveryRuleProperties implements JsonSerializable<DiscoveryRuleProperties> {
    /*
     * The status of the last operation.
     */
    private HealthModelProvisioningState provisioningState;

    /*
     * Display name
     */
    private String displayName;

    /*
     * Azure Resource Graph query text in KQL syntax. The query must return at least a column named 'id' which contains
     * the resource ID of the discovered resources.
     */
    private String resourceGraphQuery;

    /*
     * Reference to the name of the authentication setting which is used for querying Azure Resource Graph. The same
     * authentication setting will also be assigned to any discovered entities.
     */
    private String authenticationSetting;

    /*
     * Whether to create relationships between the discovered entities based on a set of built-in rules. These
     * relationships cannot be manually deleted.
     */
    private DiscoveryRuleRelationshipDiscoveryBehavior discoverRelationships;

    /*
     * Whether to add all recommended signals to the discovered entities.
     */
    private DiscoveryRuleRecommendedSignalsBehavior addRecommendedSignals;

    /*
     * Date when the discovery rule was (soft-)deleted.
     */
    private OffsetDateTime deletionDate;

    /*
     * Error message if the last discovery operation failed.
     */
    private String errorMessage;

    /*
     * Number of discovered entities in the last discovery operation.
     */
    private Integer numberOfDiscoveredEntities;

    /*
     * Name of the entity which represents the discovery rule. Note: It might take a few minutes after creating the
     * discovery rule until the entity is created.
     */
    private String entityName;

    /**
     * Creates an instance of DiscoveryRuleProperties class.
     */
    public DiscoveryRuleProperties() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public HealthModelProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the displayName property: Display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name.
     * 
     * @param displayName the displayName value to set.
     * @return the DiscoveryRuleProperties object itself.
     */
    public DiscoveryRuleProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the resourceGraphQuery property: Azure Resource Graph query text in KQL syntax. The query must return at
     * least a column named 'id' which contains the resource ID of the discovered resources.
     * 
     * @return the resourceGraphQuery value.
     */
    public String resourceGraphQuery() {
        return this.resourceGraphQuery;
    }

    /**
     * Set the resourceGraphQuery property: Azure Resource Graph query text in KQL syntax. The query must return at
     * least a column named 'id' which contains the resource ID of the discovered resources.
     * 
     * @param resourceGraphQuery the resourceGraphQuery value to set.
     * @return the DiscoveryRuleProperties object itself.
     */
    public DiscoveryRuleProperties withResourceGraphQuery(String resourceGraphQuery) {
        this.resourceGraphQuery = resourceGraphQuery;
        return this;
    }

    /**
     * Get the authenticationSetting property: Reference to the name of the authentication setting which is used for
     * querying Azure Resource Graph. The same authentication setting will also be assigned to any discovered entities.
     * 
     * @return the authenticationSetting value.
     */
    public String authenticationSetting() {
        return this.authenticationSetting;
    }

    /**
     * Set the authenticationSetting property: Reference to the name of the authentication setting which is used for
     * querying Azure Resource Graph. The same authentication setting will also be assigned to any discovered entities.
     * 
     * @param authenticationSetting the authenticationSetting value to set.
     * @return the DiscoveryRuleProperties object itself.
     */
    public DiscoveryRuleProperties withAuthenticationSetting(String authenticationSetting) {
        this.authenticationSetting = authenticationSetting;
        return this;
    }

    /**
     * Get the discoverRelationships property: Whether to create relationships between the discovered entities based on
     * a set of built-in rules. These relationships cannot be manually deleted.
     * 
     * @return the discoverRelationships value.
     */
    public DiscoveryRuleRelationshipDiscoveryBehavior discoverRelationships() {
        return this.discoverRelationships;
    }

    /**
     * Set the discoverRelationships property: Whether to create relationships between the discovered entities based on
     * a set of built-in rules. These relationships cannot be manually deleted.
     * 
     * @param discoverRelationships the discoverRelationships value to set.
     * @return the DiscoveryRuleProperties object itself.
     */
    public DiscoveryRuleProperties
        withDiscoverRelationships(DiscoveryRuleRelationshipDiscoveryBehavior discoverRelationships) {
        this.discoverRelationships = discoverRelationships;
        return this;
    }

    /**
     * Get the addRecommendedSignals property: Whether to add all recommended signals to the discovered entities.
     * 
     * @return the addRecommendedSignals value.
     */
    public DiscoveryRuleRecommendedSignalsBehavior addRecommendedSignals() {
        return this.addRecommendedSignals;
    }

    /**
     * Set the addRecommendedSignals property: Whether to add all recommended signals to the discovered entities.
     * 
     * @param addRecommendedSignals the addRecommendedSignals value to set.
     * @return the DiscoveryRuleProperties object itself.
     */
    public DiscoveryRuleProperties
        withAddRecommendedSignals(DiscoveryRuleRecommendedSignalsBehavior addRecommendedSignals) {
        this.addRecommendedSignals = addRecommendedSignals;
        return this;
    }

    /**
     * Get the deletionDate property: Date when the discovery rule was (soft-)deleted.
     * 
     * @return the deletionDate value.
     */
    public OffsetDateTime deletionDate() {
        return this.deletionDate;
    }

    /**
     * Get the errorMessage property: Error message if the last discovery operation failed.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Get the numberOfDiscoveredEntities property: Number of discovered entities in the last discovery operation.
     * 
     * @return the numberOfDiscoveredEntities value.
     */
    public Integer numberOfDiscoveredEntities() {
        return this.numberOfDiscoveredEntities;
    }

    /**
     * Get the entityName property: Name of the entity which represents the discovery rule. Note: It might take a few
     * minutes after creating the discovery rule until the entity is created.
     * 
     * @return the entityName value.
     */
    public String entityName() {
        return this.entityName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceGraphQuery() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceGraphQuery in model DiscoveryRuleProperties"));
        }
        if (authenticationSetting() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property authenticationSetting in model DiscoveryRuleProperties"));
        }
        if (discoverRelationships() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property discoverRelationships in model DiscoveryRuleProperties"));
        }
        if (addRecommendedSignals() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property addRecommendedSignals in model DiscoveryRuleProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DiscoveryRuleProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceGraphQuery", this.resourceGraphQuery);
        jsonWriter.writeStringField("authenticationSetting", this.authenticationSetting);
        jsonWriter.writeStringField("discoverRelationships",
            this.discoverRelationships == null ? null : this.discoverRelationships.toString());
        jsonWriter.writeStringField("addRecommendedSignals",
            this.addRecommendedSignals == null ? null : this.addRecommendedSignals.toString());
        jsonWriter.writeStringField("displayName", this.displayName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiscoveryRuleProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiscoveryRuleProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DiscoveryRuleProperties.
     */
    public static DiscoveryRuleProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiscoveryRuleProperties deserializedDiscoveryRuleProperties = new DiscoveryRuleProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceGraphQuery".equals(fieldName)) {
                    deserializedDiscoveryRuleProperties.resourceGraphQuery = reader.getString();
                } else if ("authenticationSetting".equals(fieldName)) {
                    deserializedDiscoveryRuleProperties.authenticationSetting = reader.getString();
                } else if ("discoverRelationships".equals(fieldName)) {
                    deserializedDiscoveryRuleProperties.discoverRelationships
                        = DiscoveryRuleRelationshipDiscoveryBehavior.fromString(reader.getString());
                } else if ("addRecommendedSignals".equals(fieldName)) {
                    deserializedDiscoveryRuleProperties.addRecommendedSignals
                        = DiscoveryRuleRecommendedSignalsBehavior.fromString(reader.getString());
                } else if ("entityName".equals(fieldName)) {
                    deserializedDiscoveryRuleProperties.entityName = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDiscoveryRuleProperties.provisioningState
                        = HealthModelProvisioningState.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedDiscoveryRuleProperties.displayName = reader.getString();
                } else if ("deletionDate".equals(fieldName)) {
                    deserializedDiscoveryRuleProperties.deletionDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedDiscoveryRuleProperties.errorMessage = reader.getString();
                } else if ("numberOfDiscoveredEntities".equals(fieldName)) {
                    deserializedDiscoveryRuleProperties.numberOfDiscoveredEntities
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiscoveryRuleProperties;
        });
    }
}
