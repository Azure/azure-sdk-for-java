// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Prometheus Metrics Signal Definition properties.
 */
@Fluent
public final class PrometheusMetricsSignalDefinitionProperties extends SignalDefinitionProperties {
    /*
     * Kind of the signal definition
     */
    private SignalKind signalKind = SignalKind.PROMETHEUS_METRICS_QUERY;

    /*
     * Query text in PromQL syntax
     */
    private String queryText;

    /*
     * Time range of signal. ISO duration format like PT10M.
     */
    private String timeGrain;

    /**
     * Creates an instance of PrometheusMetricsSignalDefinitionProperties class.
     */
    public PrometheusMetricsSignalDefinitionProperties() {
    }

    /**
     * Get the signalKind property: Kind of the signal definition.
     * 
     * @return the signalKind value.
     */
    @Override
    public SignalKind signalKind() {
        return this.signalKind;
    }

    /**
     * Get the queryText property: Query text in PromQL syntax.
     * 
     * @return the queryText value.
     */
    public String queryText() {
        return this.queryText;
    }

    /**
     * Set the queryText property: Query text in PromQL syntax.
     * 
     * @param queryText the queryText value to set.
     * @return the PrometheusMetricsSignalDefinitionProperties object itself.
     */
    public PrometheusMetricsSignalDefinitionProperties withQueryText(String queryText) {
        this.queryText = queryText;
        return this;
    }

    /**
     * Get the timeGrain property: Time range of signal. ISO duration format like PT10M.
     * 
     * @return the timeGrain value.
     */
    public String timeGrain() {
        return this.timeGrain;
    }

    /**
     * Set the timeGrain property: Time range of signal. ISO duration format like PT10M.
     * 
     * @param timeGrain the timeGrain value to set.
     * @return the PrometheusMetricsSignalDefinitionProperties object itself.
     */
    public PrometheusMetricsSignalDefinitionProperties withTimeGrain(String timeGrain) {
        this.timeGrain = timeGrain;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PrometheusMetricsSignalDefinitionProperties withDisplayName(String displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PrometheusMetricsSignalDefinitionProperties withRefreshInterval(RefreshInterval refreshInterval) {
        super.withRefreshInterval(refreshInterval);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PrometheusMetricsSignalDefinitionProperties withLabels(Map<String, String> labels) {
        super.withLabels(labels);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PrometheusMetricsSignalDefinitionProperties withDataUnit(String dataUnit) {
        super.withDataUnit(dataUnit);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PrometheusMetricsSignalDefinitionProperties withEvaluationRules(EvaluationRule evaluationRules) {
        super.withEvaluationRules(evaluationRules);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (queryText() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property queryText in model PrometheusMetricsSignalDefinitionProperties"));
        }
        if (evaluationRules() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property evaluationRules in model PrometheusMetricsSignalDefinitionProperties"));
        } else {
            evaluationRules().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PrometheusMetricsSignalDefinitionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("evaluationRules", evaluationRules());
        jsonWriter.writeStringField("displayName", displayName());
        jsonWriter.writeStringField("refreshInterval", refreshInterval() == null ? null : refreshInterval().toString());
        jsonWriter.writeMapField("labels", labels(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("dataUnit", dataUnit());
        jsonWriter.writeStringField("queryText", this.queryText);
        jsonWriter.writeStringField("signalKind", this.signalKind == null ? null : this.signalKind.toString());
        jsonWriter.writeStringField("timeGrain", this.timeGrain);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PrometheusMetricsSignalDefinitionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PrometheusMetricsSignalDefinitionProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PrometheusMetricsSignalDefinitionProperties.
     */
    public static PrometheusMetricsSignalDefinitionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PrometheusMetricsSignalDefinitionProperties deserializedPrometheusMetricsSignalDefinitionProperties
                = new PrometheusMetricsSignalDefinitionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("evaluationRules".equals(fieldName)) {
                    deserializedPrometheusMetricsSignalDefinitionProperties
                        .withEvaluationRules(EvaluationRule.fromJson(reader));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedPrometheusMetricsSignalDefinitionProperties
                        .withProvisioningState(HealthModelProvisioningState.fromString(reader.getString()));
                } else if ("displayName".equals(fieldName)) {
                    deserializedPrometheusMetricsSignalDefinitionProperties.withDisplayName(reader.getString());
                } else if ("refreshInterval".equals(fieldName)) {
                    deserializedPrometheusMetricsSignalDefinitionProperties
                        .withRefreshInterval(RefreshInterval.fromString(reader.getString()));
                } else if ("labels".equals(fieldName)) {
                    Map<String, String> labels = reader.readMap(reader1 -> reader1.getString());
                    deserializedPrometheusMetricsSignalDefinitionProperties.withLabels(labels);
                } else if ("dataUnit".equals(fieldName)) {
                    deserializedPrometheusMetricsSignalDefinitionProperties.withDataUnit(reader.getString());
                } else if ("deletionDate".equals(fieldName)) {
                    deserializedPrometheusMetricsSignalDefinitionProperties.withDeletionDate(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("queryText".equals(fieldName)) {
                    deserializedPrometheusMetricsSignalDefinitionProperties.queryText = reader.getString();
                } else if ("signalKind".equals(fieldName)) {
                    deserializedPrometheusMetricsSignalDefinitionProperties.signalKind
                        = SignalKind.fromString(reader.getString());
                } else if ("timeGrain".equals(fieldName)) {
                    deserializedPrometheusMetricsSignalDefinitionProperties.timeGrain = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPrometheusMetricsSignalDefinitionProperties;
        });
    }
}
