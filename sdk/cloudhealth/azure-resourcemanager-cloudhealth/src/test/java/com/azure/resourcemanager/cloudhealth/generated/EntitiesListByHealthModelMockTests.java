// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cloudhealth.CloudHealthManager;
import com.azure.resourcemanager.cloudhealth.models.AlertSeverity;
import com.azure.resourcemanager.cloudhealth.models.DependenciesAggregationType;
import com.azure.resourcemanager.cloudhealth.models.Entity;
import com.azure.resourcemanager.cloudhealth.models.EntityImpact;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class EntitiesListByHealthModelMockTests {
    @Test
    public void testListByHealthModel() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"displayName\":\"fiakpjpqqm\",\"kind\":\"d\",\"canvasPosition\":{\"x\":23.946302596011293,\"y\":23.23506119623675},\"icon\":{\"iconName\":\"yeozphvwauyqncy\",\"customData\":\"p\"},\"healthObjective\":47.120863278217264,\"impact\":\"Limited\",\"labels\":{\"upev\":\"wx\",\"lmcuvhixb\":\"hfstotxhojujbyp\"},\"signals\":{\"azureResource\":{\"signalAssignments\":[{\"signalDefinitions\":[]}],\"authenticationSetting\":\"n\",\"azureResourceId\":\"lrcoolsttpki\"},\"azureLogAnalytics\":{\"signalAssignments\":[{\"signalDefinitions\":[]},{\"signalDefinitions\":[]},{\"signalDefinitions\":[]},{\"signalDefinitions\":[]}],\"authenticationSetting\":\"nujrywvtyl\",\"logAnalyticsWorkspaceResourceId\":\"fpncurdo\"},\"azureMonitorWorkspace\":{\"signalAssignments\":[{\"signalDefinitions\":[]},{\"signalDefinitions\":[]}],\"authenticationSetting\":\"thtywub\",\"azureMonitorWorkspaceResourceId\":\"cbihwqk\"},\"dependencies\":{\"aggregationType\":\"Thresholds\",\"degradedThreshold\":\"twjchrdg\",\"unhealthyThreshold\":\"hxumwctondzj\"}},\"discoveredBy\":\"udfdlwgg\",\"deletionDate\":\"2021-07-30T14:09:03Z\",\"healthState\":\"Healthy\",\"alerts\":{\"unhealthy\":{\"severity\":\"Sev2\",\"description\":\"tgseinqfiufxqkn\",\"actionGroupIds\":[\"gnepttwqmsni\",\"fcdmqnrojlpijn\",\"rxfrddhc\",\"atiz\"]},\"degraded\":{\"severity\":\"Sev1\",\"description\":\"asxifto\",\"actionGroupIds\":[\"zh\",\"tw\",\"sgogczhonnxk\",\"lgnyhmo\"]}}},\"id\":\"xkk\",\"name\":\"thrrgh\",\"type\":\"jbdhqxvc\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CloudHealthManager manager = CloudHealthManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Entity> response = manager.entities()
            .listByHealthModel("aays", "kixqtnqtt", OffsetDateTime.parse("2021-01-22T12:04:18Z"),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("fiakpjpqqm", response.iterator().next().properties().displayName());
        Assertions.assertEquals("d", response.iterator().next().properties().kind());
        Assertions.assertEquals(23.946302596011293, response.iterator().next().properties().canvasPosition().x());
        Assertions.assertEquals(23.23506119623675, response.iterator().next().properties().canvasPosition().y());
        Assertions.assertEquals("yeozphvwauyqncy", response.iterator().next().properties().icon().iconName());
        Assertions.assertEquals("p", response.iterator().next().properties().icon().customData());
        Assertions.assertEquals(47.120863278217264D, response.iterator().next().properties().healthObjective());
        Assertions.assertEquals(EntityImpact.LIMITED, response.iterator().next().properties().impact());
        Assertions.assertEquals("wx", response.iterator().next().properties().labels().get("upev"));
        Assertions.assertEquals("n",
            response.iterator().next().properties().signals().azureResource().authenticationSetting());
        Assertions.assertEquals("lrcoolsttpki",
            response.iterator().next().properties().signals().azureResource().azureResourceId());
        Assertions.assertEquals("nujrywvtyl",
            response.iterator().next().properties().signals().azureLogAnalytics().authenticationSetting());
        Assertions.assertEquals("fpncurdo",
            response.iterator().next().properties().signals().azureLogAnalytics().logAnalyticsWorkspaceResourceId());
        Assertions.assertEquals("thtywub",
            response.iterator().next().properties().signals().azureMonitorWorkspace().authenticationSetting());
        Assertions.assertEquals("cbihwqk",
            response.iterator()
                .next()
                .properties()
                .signals()
                .azureMonitorWorkspace()
                .azureMonitorWorkspaceResourceId());
        Assertions.assertEquals(DependenciesAggregationType.THRESHOLDS,
            response.iterator().next().properties().signals().dependencies().aggregationType());
        Assertions.assertEquals("twjchrdg",
            response.iterator().next().properties().signals().dependencies().degradedThreshold());
        Assertions.assertEquals("hxumwctondzj",
            response.iterator().next().properties().signals().dependencies().unhealthyThreshold());
        Assertions.assertEquals(AlertSeverity.SEV2,
            response.iterator().next().properties().alerts().unhealthy().severity());
        Assertions.assertEquals("tgseinqfiufxqkn",
            response.iterator().next().properties().alerts().unhealthy().description());
        Assertions.assertEquals("gnepttwqmsni",
            response.iterator().next().properties().alerts().unhealthy().actionGroupIds().get(0));
        Assertions.assertEquals(AlertSeverity.SEV1,
            response.iterator().next().properties().alerts().degraded().severity());
        Assertions.assertEquals("asxifto", response.iterator().next().properties().alerts().degraded().description());
        Assertions.assertEquals("zh",
            response.iterator().next().properties().alerts().degraded().actionGroupIds().get(0));
    }
}
