// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cloudhealth.fluent.models.EntityInner;
import com.azure.resourcemanager.cloudhealth.models.AlertConfiguration;
import com.azure.resourcemanager.cloudhealth.models.AlertSeverity;
import com.azure.resourcemanager.cloudhealth.models.AzureMonitorWorkspaceSignalGroup;
import com.azure.resourcemanager.cloudhealth.models.AzureResourceSignalGroup;
import com.azure.resourcemanager.cloudhealth.models.DependenciesAggregationType;
import com.azure.resourcemanager.cloudhealth.models.DependenciesSignalGroup;
import com.azure.resourcemanager.cloudhealth.models.EntityAlerts;
import com.azure.resourcemanager.cloudhealth.models.EntityCoordinates;
import com.azure.resourcemanager.cloudhealth.models.EntityImpact;
import com.azure.resourcemanager.cloudhealth.models.EntityProperties;
import com.azure.resourcemanager.cloudhealth.models.IconDefinition;
import com.azure.resourcemanager.cloudhealth.models.LogAnalyticsSignalGroup;
import com.azure.resourcemanager.cloudhealth.models.SignalAssignment;
import com.azure.resourcemanager.cloudhealth.models.SignalGroup;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class EntityInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EntityInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"displayName\":\"dpydn\",\"kind\":\"hxdeoejz\",\"canvasPosition\":{\"x\":3.966818601093458,\"y\":17.378484722859245},\"icon\":{\"iconName\":\"ttgzfbis\",\"customData\":\"bkh\"},\"healthObjective\":99.54184484128005,\"impact\":\"Suppressed\",\"labels\":{\"honowkgshwank\":\"dphagalpbuxwgip\"},\"signals\":{\"azureResource\":{\"signalAssignments\":[{\"signalDefinitions\":[\"jeputtmrywn\",\"zoqftiyqzrnkcqvy\",\"lwh\"]},{\"signalDefinitions\":[\"sicohoqqnwvlry\",\"vwhheunmmqhgyx\",\"konocu\"]}],\"authenticationSetting\":\"oklyaxuconuq\",\"azureResourceId\":\"zf\"},\"azureLogAnalytics\":{\"signalAssignments\":[{\"signalDefinitions\":[\"ewrmjmwvvjektc\"]},{\"signalDefinitions\":[\"enhwlrs\",\"frzpwvlqdqgb\"]},{\"signalDefinitions\":[\"ylihkaetckt\",\"fcivfsnkym\",\"ctq\"]},{\"signalDefinitions\":[\"fbebrjcxer\"]}],\"authenticationSetting\":\"uwutttxfvjrbi\",\"logAnalyticsWorkspaceResourceId\":\"phxepcyvahf\"},\"azureMonitorWorkspace\":{\"signalAssignments\":[{\"signalDefinitions\":[\"qxj\"]},{\"signalDefinitions\":[\"ujqgidok\",\"jljyoxgv\",\"ltbgsncghkj\",\"szzhbijhtxfvgxbf\"]},{\"signalDefinitions\":[\"xnehmpvec\",\"godebfqkkrbmpu\"]},{\"signalDefinitions\":[\"riwflzlfb\"]}],\"authenticationSetting\":\"zpuzycisp\",\"azureMonitorWorkspaceResourceId\":\"qzahmgkbrp\"},\"dependencies\":{\"aggregationType\":\"WorstOf\",\"degradedThreshold\":\"ibnuqqkpik\",\"unhealthyThreshold\":\"rgvtqag\"}},\"discoveredBy\":\"uynhijg\",\"deletionDate\":\"2021-02-22T23:18:30Z\",\"healthState\":\"Error\",\"alerts\":{\"unhealthy\":{\"severity\":\"Sev2\",\"description\":\"butr\",\"actionGroupIds\":[\"na\",\"zmhjrunmp\"]},\"degraded\":{\"severity\":\"Sev1\",\"description\":\"bh\",\"actionGroupIds\":[\"l\",\"nkxmyskpbhenbtk\",\"xywnytnrsynlqidy\"]}}},\"id\":\"xczfcl\",\"name\":\"aaxdbabphlwrq\",\"type\":\"fkts\"}")
            .toObject(EntityInner.class);
        Assertions.assertEquals("dpydn", model.properties().displayName());
        Assertions.assertEquals("hxdeoejz", model.properties().kind());
        Assertions.assertEquals(3.966818601093458, model.properties().canvasPosition().x());
        Assertions.assertEquals(17.378484722859245, model.properties().canvasPosition().y());
        Assertions.assertEquals("ttgzfbis", model.properties().icon().iconName());
        Assertions.assertEquals("bkh", model.properties().icon().customData());
        Assertions.assertEquals(99.54184484128005D, model.properties().healthObjective());
        Assertions.assertEquals(EntityImpact.SUPPRESSED, model.properties().impact());
        Assertions.assertEquals("dphagalpbuxwgip", model.properties().labels().get("honowkgshwank"));
        Assertions.assertEquals("jeputtmrywn",
            model.properties().signals().azureResource().signalAssignments().get(0).signalDefinitions().get(0));
        Assertions.assertEquals("oklyaxuconuq", model.properties().signals().azureResource().authenticationSetting());
        Assertions.assertEquals("zf", model.properties().signals().azureResource().azureResourceId());
        Assertions.assertEquals("ewrmjmwvvjektc",
            model.properties().signals().azureLogAnalytics().signalAssignments().get(0).signalDefinitions().get(0));
        Assertions.assertEquals("uwutttxfvjrbi",
            model.properties().signals().azureLogAnalytics().authenticationSetting());
        Assertions.assertEquals("phxepcyvahf",
            model.properties().signals().azureLogAnalytics().logAnalyticsWorkspaceResourceId());
        Assertions.assertEquals("qxj",
            model.properties().signals().azureMonitorWorkspace().signalAssignments().get(0).signalDefinitions().get(0));
        Assertions.assertEquals("zpuzycisp",
            model.properties().signals().azureMonitorWorkspace().authenticationSetting());
        Assertions.assertEquals("qzahmgkbrp",
            model.properties().signals().azureMonitorWorkspace().azureMonitorWorkspaceResourceId());
        Assertions.assertEquals(DependenciesAggregationType.WORST_OF,
            model.properties().signals().dependencies().aggregationType());
        Assertions.assertEquals("ibnuqqkpik", model.properties().signals().dependencies().degradedThreshold());
        Assertions.assertEquals("rgvtqag", model.properties().signals().dependencies().unhealthyThreshold());
        Assertions.assertEquals(AlertSeverity.SEV2, model.properties().alerts().unhealthy().severity());
        Assertions.assertEquals("butr", model.properties().alerts().unhealthy().description());
        Assertions.assertEquals("na", model.properties().alerts().unhealthy().actionGroupIds().get(0));
        Assertions.assertEquals(AlertSeverity.SEV1, model.properties().alerts().degraded().severity());
        Assertions.assertEquals("bh", model.properties().alerts().degraded().description());
        Assertions.assertEquals("l", model.properties().alerts().degraded().actionGroupIds().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EntityInner model
            = new EntityInner()
                .withProperties(new EntityProperties().withDisplayName("dpydn")
                    .withKind("hxdeoejz")
                    .withCanvasPosition(new EntityCoordinates().withX(3.966818601093458).withY(17.378484722859245))
                    .withIcon(new IconDefinition().withIconName("ttgzfbis").withCustomData("bkh"))
                    .withHealthObjective(99.54184484128005D)
                    .withImpact(EntityImpact.SUPPRESSED)
                    .withLabels(mapOf("honowkgshwank", "dphagalpbuxwgip"))
                    .withSignals(new SignalGroup()
                        .withAzureResource(new AzureResourceSignalGroup()
                            .withSignalAssignments(Arrays.asList(
                                new SignalAssignment()
                                    .withSignalDefinitions(Arrays.asList("jeputtmrywn", "zoqftiyqzrnkcqvy", "lwh")),
                                new SignalAssignment().withSignalDefinitions(
                                    Arrays.asList("sicohoqqnwvlry", "vwhheunmmqhgyx", "konocu"))))
                            .withAuthenticationSetting("oklyaxuconuq")
                            .withAzureResourceId("zf"))
                        .withAzureLogAnalytics(new LogAnalyticsSignalGroup()
                            .withSignalAssignments(Arrays.asList(
                                new SignalAssignment().withSignalDefinitions(Arrays.asList("ewrmjmwvvjektc")),
                                new SignalAssignment().withSignalDefinitions(Arrays.asList("enhwlrs", "frzpwvlqdqgb")),
                                new SignalAssignment()
                                    .withSignalDefinitions(Arrays.asList("ylihkaetckt", "fcivfsnkym", "ctq")),
                                new SignalAssignment().withSignalDefinitions(Arrays.asList("fbebrjcxer"))))
                            .withAuthenticationSetting("uwutttxfvjrbi")
                            .withLogAnalyticsWorkspaceResourceId("phxepcyvahf"))
                        .withAzureMonitorWorkspace(new AzureMonitorWorkspaceSignalGroup()
                            .withSignalAssignments(
                                Arrays.asList(new SignalAssignment().withSignalDefinitions(Arrays.asList("qxj")),
                                    new SignalAssignment().withSignalDefinitions(
                                        Arrays.asList("ujqgidok", "jljyoxgv", "ltbgsncghkj", "szzhbijhtxfvgxbf")),
                                    new SignalAssignment()
                                        .withSignalDefinitions(Arrays.asList("xnehmpvec", "godebfqkkrbmpu")),
                                    new SignalAssignment().withSignalDefinitions(Arrays.asList("riwflzlfb"))))
                            .withAuthenticationSetting("zpuzycisp")
                            .withAzureMonitorWorkspaceResourceId("qzahmgkbrp"))
                        .withDependencies(
                            new DependenciesSignalGroup().withAggregationType(DependenciesAggregationType.WORST_OF)
                                .withDegradedThreshold("ibnuqqkpik")
                                .withUnhealthyThreshold("rgvtqag")))
                    .withAlerts(new EntityAlerts()
                        .withUnhealthy(new AlertConfiguration().withSeverity(AlertSeverity.SEV2)
                            .withDescription("butr")
                            .withActionGroupIds(Arrays.asList("na", "zmhjrunmp")))
                        .withDegraded(new AlertConfiguration().withSeverity(AlertSeverity.SEV1)
                            .withDescription("bh")
                            .withActionGroupIds(Arrays.asList("l", "nkxmyskpbhenbtk", "xywnytnrsynlqidy")))));
        model = BinaryData.fromObject(model).toObject(EntityInner.class);
        Assertions.assertEquals("dpydn", model.properties().displayName());
        Assertions.assertEquals("hxdeoejz", model.properties().kind());
        Assertions.assertEquals(3.966818601093458, model.properties().canvasPosition().x());
        Assertions.assertEquals(17.378484722859245, model.properties().canvasPosition().y());
        Assertions.assertEquals("ttgzfbis", model.properties().icon().iconName());
        Assertions.assertEquals("bkh", model.properties().icon().customData());
        Assertions.assertEquals(99.54184484128005D, model.properties().healthObjective());
        Assertions.assertEquals(EntityImpact.SUPPRESSED, model.properties().impact());
        Assertions.assertEquals("dphagalpbuxwgip", model.properties().labels().get("honowkgshwank"));
        Assertions.assertEquals("jeputtmrywn",
            model.properties().signals().azureResource().signalAssignments().get(0).signalDefinitions().get(0));
        Assertions.assertEquals("oklyaxuconuq", model.properties().signals().azureResource().authenticationSetting());
        Assertions.assertEquals("zf", model.properties().signals().azureResource().azureResourceId());
        Assertions.assertEquals("ewrmjmwvvjektc",
            model.properties().signals().azureLogAnalytics().signalAssignments().get(0).signalDefinitions().get(0));
        Assertions.assertEquals("uwutttxfvjrbi",
            model.properties().signals().azureLogAnalytics().authenticationSetting());
        Assertions.assertEquals("phxepcyvahf",
            model.properties().signals().azureLogAnalytics().logAnalyticsWorkspaceResourceId());
        Assertions.assertEquals("qxj",
            model.properties().signals().azureMonitorWorkspace().signalAssignments().get(0).signalDefinitions().get(0));
        Assertions.assertEquals("zpuzycisp",
            model.properties().signals().azureMonitorWorkspace().authenticationSetting());
        Assertions.assertEquals("qzahmgkbrp",
            model.properties().signals().azureMonitorWorkspace().azureMonitorWorkspaceResourceId());
        Assertions.assertEquals(DependenciesAggregationType.WORST_OF,
            model.properties().signals().dependencies().aggregationType());
        Assertions.assertEquals("ibnuqqkpik", model.properties().signals().dependencies().degradedThreshold());
        Assertions.assertEquals("rgvtqag", model.properties().signals().dependencies().unhealthyThreshold());
        Assertions.assertEquals(AlertSeverity.SEV2, model.properties().alerts().unhealthy().severity());
        Assertions.assertEquals("butr", model.properties().alerts().unhealthy().description());
        Assertions.assertEquals("na", model.properties().alerts().unhealthy().actionGroupIds().get(0));
        Assertions.assertEquals(AlertSeverity.SEV1, model.properties().alerts().degraded().severity());
        Assertions.assertEquals("bh", model.properties().alerts().degraded().description());
        Assertions.assertEquals("l", model.properties().alerts().degraded().actionGroupIds().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
