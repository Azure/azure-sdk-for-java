// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cloudhealth.CloudHealthManager;
import com.azure.resourcemanager.cloudhealth.models.DynamicThresholdDirection;
import com.azure.resourcemanager.cloudhealth.models.DynamicThresholdModel;
import com.azure.resourcemanager.cloudhealth.models.RefreshInterval;
import com.azure.resourcemanager.cloudhealth.models.SignalDefinition;
import com.azure.resourcemanager.cloudhealth.models.SignalOperator;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SignalDefinitionsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"signalKind\":\"SignalDefinitionProperties\",\"provisioningState\":\"Failed\",\"displayName\":\"cslfaoqzpiyylha\",\"refreshInterval\":\"PT5M\",\"labels\":{\"qscywu\":\"ccsphkaivwi\"},\"dataUnit\":\"woluhczbwemhair\",\"evaluationRules\":{\"dynamicDetectionRule\":{\"dynamicThresholdModel\":\"AnomalyDetection\",\"modelSensitivity\":12.991988684461575,\"dynamicThresholdDirection\":\"GreaterThan\",\"trainingStartTime\":\"2021-06-14T04:59:44Z\"},\"degradedRule\":{\"operator\":\"GreaterThan\",\"threshold\":\"eypqwdxggicccn\"},\"unhealthyRule\":{\"operator\":\"Equals\",\"threshold\":\"uexmkttlst\"}},\"deletionDate\":\"2021-09-29T19:52:13Z\"},\"id\":\"wem\",\"name\":\"zrncsdt\",\"type\":\"lusiy\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CloudHealthManager manager = CloudHealthManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SignalDefinition response = manager.signalDefinitions()
            .getWithResponse("l", "zqhof", "rmaequ", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("cslfaoqzpiyylha", response.properties().displayName());
        Assertions.assertEquals(RefreshInterval.PT5M, response.properties().refreshInterval());
        Assertions.assertEquals("ccsphkaivwi", response.properties().labels().get("qscywu"));
        Assertions.assertEquals("woluhczbwemhair", response.properties().dataUnit());
        Assertions.assertEquals(DynamicThresholdModel.ANOMALY_DETECTION,
            response.properties().evaluationRules().dynamicDetectionRule().dynamicThresholdModel());
        Assertions.assertEquals(12.991988684461575,
            response.properties().evaluationRules().dynamicDetectionRule().modelSensitivity());
        Assertions.assertEquals(DynamicThresholdDirection.GREATER_THAN,
            response.properties().evaluationRules().dynamicDetectionRule().dynamicThresholdDirection());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-14T04:59:44Z"),
            response.properties().evaluationRules().dynamicDetectionRule().trainingStartTime());
        Assertions.assertEquals(SignalOperator.GREATER_THAN,
            response.properties().evaluationRules().degradedRule().operator());
        Assertions.assertEquals("eypqwdxggicccn", response.properties().evaluationRules().degradedRule().threshold());
        Assertions.assertEquals(SignalOperator.EQUALS,
            response.properties().evaluationRules().unhealthyRule().operator());
        Assertions.assertEquals("uexmkttlst", response.properties().evaluationRules().unhealthyRule().threshold());
    }
}
