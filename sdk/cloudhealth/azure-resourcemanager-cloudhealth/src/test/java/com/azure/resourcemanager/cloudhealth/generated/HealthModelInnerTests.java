// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cloudhealth.fluent.models.HealthModelInner;
import com.azure.resourcemanager.cloudhealth.models.DiscoveryRuleRecommendedSignalsBehavior;
import com.azure.resourcemanager.cloudhealth.models.HealthModelProperties;
import com.azure.resourcemanager.cloudhealth.models.ManagedServiceIdentity;
import com.azure.resourcemanager.cloudhealth.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.cloudhealth.models.ModelDiscoverySettings;
import com.azure.resourcemanager.cloudhealth.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HealthModelInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HealthModelInner model = BinaryData.fromString(
            "{\"properties\":{\"dataplaneEndpoint\":\"jbpzvgnwzsymg\",\"provisioningState\":\"Deleting\",\"discovery\":{\"scope\":\"cyzkohdbihanuf\",\"addRecommendedSignals\":\"Disabled\",\"identity\":\"bj\"}},\"identity\":{\"principalId\":\"git\",\"tenantId\":\"qhabifpikxwcz\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"iwbybrkxvdumjg\":{\"principalId\":\"pqxu\",\"clientId\":\"vyq\"},\"cnyejhkryhtnapcz\":{\"principalId\":\"fwvuk\",\"clientId\":\"audccsnhs\"},\"nchgej\":{\"principalId\":\"okjye\",\"clientId\":\"kvnipjoxz\"},\"wyahuxinpmqnja\":{\"principalId\":\"odmailzyd\",\"clientId\":\"o\"}}},\"location\":\"ixjsprozvcputeg\",\"tags\":{\"u\":\"mfdatscmdvpj\",\"kjozkrwfnd\":\"suuv\",\"vwryoqpso\":\"odjpslwejd\",\"yffdfdos\":\"cctazakljlahbc\"},\"id\":\"gexpaojakhmsbz\",\"name\":\"hcrzevd\",\"type\":\"hlxaolthqtr\"}")
            .toObject(HealthModelInner.class);
        Assertions.assertEquals("ixjsprozvcputeg", model.location());
        Assertions.assertEquals("mfdatscmdvpj", model.tags().get("u"));
        Assertions.assertEquals("cyzkohdbihanuf", model.properties().discovery().scope());
        Assertions.assertEquals(DiscoveryRuleRecommendedSignalsBehavior.DISABLED,
            model.properties().discovery().addRecommendedSignals());
        Assertions.assertEquals("bj", model.properties().discovery().identity());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HealthModelInner model
            = new HealthModelInner().withLocation("ixjsprozvcputeg")
                .withTags(mapOf("u", "mfdatscmdvpj", "kjozkrwfnd", "suuv", "vwryoqpso", "odjpslwejd", "yffdfdos",
                    "cctazakljlahbc"))
                .withProperties(
                    new HealthModelProperties().withDiscovery(new ModelDiscoverySettings().withScope("cyzkohdbihanuf")
                        .withAddRecommendedSignals(DiscoveryRuleRecommendedSignalsBehavior.DISABLED)
                        .withIdentity("bj")))
                .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("iwbybrkxvdumjg", new UserAssignedIdentity(), "cnyejhkryhtnapcz",
                        new UserAssignedIdentity(), "nchgej", new UserAssignedIdentity(), "wyahuxinpmqnja",
                        new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(HealthModelInner.class);
        Assertions.assertEquals("ixjsprozvcputeg", model.location());
        Assertions.assertEquals("mfdatscmdvpj", model.tags().get("u"));
        Assertions.assertEquals("cyzkohdbihanuf", model.properties().discovery().scope());
        Assertions.assertEquals(DiscoveryRuleRecommendedSignalsBehavior.DISABLED,
            model.properties().discovery().addRecommendedSignals());
        Assertions.assertEquals("bj", model.properties().discovery().identity());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
