// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cloudhealth.CloudHealthManager;
import com.azure.resourcemanager.cloudhealth.models.Relationship;
import com.azure.resourcemanager.cloudhealth.models.RelationshipProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RelationshipsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"displayName\":\"gqqqxh\",\"parentEntityName\":\"n\",\"childEntityName\":\"rxcpjuisavo\",\"labels\":{\"jlfrq\":\"zfvazi\"},\"discoveredBy\":\"bajlka\",\"deletionDate\":\"2021-04-16T08:57:57Z\"},\"id\":\"yiopi\",\"name\":\"kqqfk\",\"type\":\"vscx\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CloudHealthManager manager = CloudHealthManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Relationship response = manager.relationships()
            .define("bywdxsmicc")
            .withExistingHealthmodel("ev", "gmblrri")
            .withProperties(new RelationshipProperties().withDisplayName("cj")
                .withParentEntityName("n")
                .withChildEntityName("nszqujiz")
                .withLabels(mapOf("pthjoxo", "qytibyowbblgyavu", "pi", "smsks", "xkcgxxlxsffgcvi", "lqol", "gfbkjubdyh",
                    "qzdwlvwlyoup")))
            .create();

        Assertions.assertEquals("gqqqxh", response.properties().displayName());
        Assertions.assertEquals("n", response.properties().parentEntityName());
        Assertions.assertEquals("rxcpjuisavo", response.properties().childEntityName());
        Assertions.assertEquals("zfvazi", response.properties().labels().get("jlfrq"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
