// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cloudhealth.models.RelationshipProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RelationshipPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RelationshipProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Failed\",\"displayName\":\"cjwvn\",\"parentEntityName\":\"dldwmgxc\",\"childEntityName\":\"rslpmutwuoeg\",\"labels\":{\"dggkzzlvmbmpa\":\"hjwniyqsluic\",\"yhrfouyftaakcpw\":\"modfvuefywsbpfvm\"},\"discoveredBy\":\"zvqtmnubexkp\",\"deletionDate\":\"2021-05-08T13:31:38Z\"}")
            .toObject(RelationshipProperties.class);
        Assertions.assertEquals("cjwvn", model.displayName());
        Assertions.assertEquals("dldwmgxc", model.parentEntityName());
        Assertions.assertEquals("rslpmutwuoeg", model.childEntityName());
        Assertions.assertEquals("hjwniyqsluic", model.labels().get("dggkzzlvmbmpa"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RelationshipProperties model = new RelationshipProperties().withDisplayName("cjwvn")
            .withParentEntityName("dldwmgxc")
            .withChildEntityName("rslpmutwuoeg")
            .withLabels(mapOf("dggkzzlvmbmpa", "hjwniyqsluic", "yhrfouyftaakcpw", "modfvuefywsbpfvm"));
        model = BinaryData.fromObject(model).toObject(RelationshipProperties.class);
        Assertions.assertEquals("cjwvn", model.displayName());
        Assertions.assertEquals("dldwmgxc", model.parentEntityName());
        Assertions.assertEquals("rslpmutwuoeg", model.childEntityName());
        Assertions.assertEquals("hjwniyqsluic", model.labels().get("dggkzzlvmbmpa"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
