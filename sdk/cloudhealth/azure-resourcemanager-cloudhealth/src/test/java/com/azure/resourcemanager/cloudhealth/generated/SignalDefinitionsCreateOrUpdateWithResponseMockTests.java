// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cloudhealth.CloudHealthManager;
import com.azure.resourcemanager.cloudhealth.models.DynamicDetectionRule;
import com.azure.resourcemanager.cloudhealth.models.DynamicThresholdDirection;
import com.azure.resourcemanager.cloudhealth.models.DynamicThresholdModel;
import com.azure.resourcemanager.cloudhealth.models.EvaluationRule;
import com.azure.resourcemanager.cloudhealth.models.RefreshInterval;
import com.azure.resourcemanager.cloudhealth.models.SignalDefinition;
import com.azure.resourcemanager.cloudhealth.models.SignalDefinitionProperties;
import com.azure.resourcemanager.cloudhealth.models.SignalOperator;
import com.azure.resourcemanager.cloudhealth.models.ThresholdRule;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SignalDefinitionsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"signalKind\":\"SignalDefinitionProperties\",\"provisioningState\":\"Creating\",\"displayName\":\"ib\",\"refreshInterval\":\"PT5M\",\"labels\":{\"lfzxiavrmbzonoki\":\"ikpzimejza\",\"rgz\":\"rjqc\"},\"dataUnit\":\"rlazszrnw\",\"evaluationRules\":{\"dynamicDetectionRule\":{\"dynamicThresholdModel\":\"AnomalyDetection\",\"modelSensitivity\":40.13963187173724,\"dynamicThresholdDirection\":\"GreaterThan\",\"trainingStartTime\":\"2020-12-22T05:34:35Z\"},\"degradedRule\":{\"operator\":\"GreaterThan\",\"threshold\":\"ylwbtlhflsjcdhsz\"},\"unhealthyRule\":{\"operator\":\"LowerOrEquals\",\"threshold\":\"fbgofeljagrqmqh\"}},\"deletionDate\":\"2021-03-07T21:36:25Z\"},\"id\":\"iiiojnalghf\",\"name\":\"vtvsexsowueluq\",\"type\":\"hahhxvrhmzkwpj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CloudHealthManager manager = CloudHealthManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SignalDefinition response = manager.signalDefinitions()
            .define("rwkq")
            .withExistingHealthmodel("bdeibqipqk", "hvxndzwmkrefajpj")
            .withProperties(new SignalDefinitionProperties().withDisplayName("ij")
                .withRefreshInterval(RefreshInterval.PT30M)
                .withLabels(mapOf("ystawfsdjpvkvp", "xzsjabib", "jabudurgkakmo", "jxbkzbzkdvn", "gzrf",
                    "zhjjklffhmouwq", "ikayuhqlbjbsybb", "eeyebi"))
                .withDataUnit("r")
                .withEvaluationRules(new EvaluationRule()
                    .withDynamicDetectionRule(
                        new DynamicDetectionRule().withDynamicThresholdModel(DynamicThresholdModel.ANOMALY_DETECTION)
                            .withModelSensitivity(86.86379856850752)
                            .withDynamicThresholdDirection(DynamicThresholdDirection.LOWER_THAN)
                            .withTrainingStartTime(OffsetDateTime.parse("2021-06-20T07:23:19Z")))
                    .withDegradedRule(
                        new ThresholdRule().withOperator(SignalOperator.GREATER_THAN).withThreshold("mpipaslthaqfxs"))
                    .withUnhealthyRule(new ThresholdRule().withOperator(SignalOperator.LOWER_THAN).withThreshold("u"))))
            .create();

        Assertions.assertEquals("ib", response.properties().displayName());
        Assertions.assertEquals(RefreshInterval.PT5M, response.properties().refreshInterval());
        Assertions.assertEquals("ikpzimejza", response.properties().labels().get("lfzxiavrmbzonoki"));
        Assertions.assertEquals("rlazszrnw", response.properties().dataUnit());
        Assertions.assertEquals(DynamicThresholdModel.ANOMALY_DETECTION,
            response.properties().evaluationRules().dynamicDetectionRule().dynamicThresholdModel());
        Assertions.assertEquals(40.13963187173724,
            response.properties().evaluationRules().dynamicDetectionRule().modelSensitivity());
        Assertions.assertEquals(DynamicThresholdDirection.GREATER_THAN,
            response.properties().evaluationRules().dynamicDetectionRule().dynamicThresholdDirection());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-22T05:34:35Z"),
            response.properties().evaluationRules().dynamicDetectionRule().trainingStartTime());
        Assertions.assertEquals(SignalOperator.GREATER_THAN,
            response.properties().evaluationRules().degradedRule().operator());
        Assertions.assertEquals("ylwbtlhflsjcdhsz", response.properties().evaluationRules().degradedRule().threshold());
        Assertions.assertEquals(SignalOperator.LOWER_OR_EQUALS,
            response.properties().evaluationRules().unhealthyRule().operator());
        Assertions.assertEquals("fbgofeljagrqmqh", response.properties().evaluationRules().unhealthyRule().threshold());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
