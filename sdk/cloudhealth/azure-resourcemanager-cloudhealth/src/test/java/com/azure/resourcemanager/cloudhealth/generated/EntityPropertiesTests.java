// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cloudhealth.models.AlertConfiguration;
import com.azure.resourcemanager.cloudhealth.models.AlertSeverity;
import com.azure.resourcemanager.cloudhealth.models.AzureMonitorWorkspaceSignalGroup;
import com.azure.resourcemanager.cloudhealth.models.AzureResourceSignalGroup;
import com.azure.resourcemanager.cloudhealth.models.DependenciesAggregationType;
import com.azure.resourcemanager.cloudhealth.models.DependenciesSignalGroup;
import com.azure.resourcemanager.cloudhealth.models.EntityAlerts;
import com.azure.resourcemanager.cloudhealth.models.EntityCoordinates;
import com.azure.resourcemanager.cloudhealth.models.EntityImpact;
import com.azure.resourcemanager.cloudhealth.models.EntityProperties;
import com.azure.resourcemanager.cloudhealth.models.IconDefinition;
import com.azure.resourcemanager.cloudhealth.models.LogAnalyticsSignalGroup;
import com.azure.resourcemanager.cloudhealth.models.SignalAssignment;
import com.azure.resourcemanager.cloudhealth.models.SignalGroup;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class EntityPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EntityProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Creating\",\"displayName\":\"cocmnyyaztt\",\"kind\":\"wwrq\",\"canvasPosition\":{\"x\":92.70088471408752,\"y\":88.20154440709435},\"icon\":{\"iconName\":\"ywbiexzfeyueax\",\"customData\":\"xujwbhqwalmuzyo\"},\"healthObjective\":38.12073567925543,\"impact\":\"Suppressed\",\"labels\":{\"bavxbniwdjswzt\":\"ancuxrhd\",\"xbzpfzab\":\"dbpgnxytxhp\"},\"signals\":{\"azureResource\":{\"signalAssignments\":[{\"signalDefinitions\":[\"wtctyqi\",\"lbbovplw\",\"bhvgy\",\"gu\"]}],\"authenticationSetting\":\"svmkfssxquk\",\"azureResourceId\":\"fpl\"},\"azureLogAnalytics\":{\"signalAssignments\":[{\"signalDefinitions\":[\"nkjzkdeslpvlop\",\"i\",\"ighxpk\"]},{\"signalDefinitions\":[\"zb\",\"iuebbaumny\"]},{\"signalDefinitions\":[\"ped\",\"ojnabckhsmtxpsie\",\"tfhvpesapskrdqmh\",\"jdhtldwkyzxu\"]},{\"signalDefinitions\":[\"kn\",\"ws\"]}],\"authenticationSetting\":\"wsvlxotogtwrupqs\",\"logAnalyticsWorkspaceResourceId\":\"vnm\"},\"azureMonitorWorkspace\":{\"signalAssignments\":[{\"signalDefinitions\":[\"ceoveilovno\"]},{\"signalDefinitions\":[\"fj\",\"cnjbkcnxdhbt\",\"kphywpnvjto\"]},{\"signalDefinitions\":[\"ermclfplphoxuscr\",\"abgy\"]},{\"signalDefinitions\":[\"sbj\",\"azqugxywpmueefj\"]}],\"authenticationSetting\":\"wfqkquj\",\"azureMonitorWorkspaceResourceId\":\"dsuyonobgla\"},\"dependencies\":{\"aggregationType\":\"Thresholds\",\"degradedThreshold\":\"tcc\",\"unhealthyThreshold\":\"yudxytlmoy\"}},\"discoveredBy\":\"vwfudwpzntxhd\",\"deletionDate\":\"2021-06-26T07:36:51Z\",\"healthState\":\"Healthy\",\"alerts\":{\"unhealthy\":{\"severity\":\"Sev2\",\"description\":\"kfrlhrxsbky\",\"actionGroupIds\":[\"ca\",\"uzbpzkafku\",\"b\",\"rnwb\"]},\"degraded\":{\"severity\":\"Sev1\",\"description\":\"seyvj\",\"actionGroupIds\":[\"tslhspkdeem\"]}}}")
            .toObject(EntityProperties.class);
        Assertions.assertEquals("cocmnyyaztt", model.displayName());
        Assertions.assertEquals("wwrq", model.kind());
        Assertions.assertEquals(92.70088471408752, model.canvasPosition().x());
        Assertions.assertEquals(88.20154440709435, model.canvasPosition().y());
        Assertions.assertEquals("ywbiexzfeyueax", model.icon().iconName());
        Assertions.assertEquals("xujwbhqwalmuzyo", model.icon().customData());
        Assertions.assertEquals(38.12073567925543D, model.healthObjective());
        Assertions.assertEquals(EntityImpact.SUPPRESSED, model.impact());
        Assertions.assertEquals("ancuxrhd", model.labels().get("bavxbniwdjswzt"));
        Assertions.assertEquals("wtctyqi",
            model.signals().azureResource().signalAssignments().get(0).signalDefinitions().get(0));
        Assertions.assertEquals("svmkfssxquk", model.signals().azureResource().authenticationSetting());
        Assertions.assertEquals("fpl", model.signals().azureResource().azureResourceId());
        Assertions.assertEquals("nkjzkdeslpvlop",
            model.signals().azureLogAnalytics().signalAssignments().get(0).signalDefinitions().get(0));
        Assertions.assertEquals("wsvlxotogtwrupqs", model.signals().azureLogAnalytics().authenticationSetting());
        Assertions.assertEquals("vnm", model.signals().azureLogAnalytics().logAnalyticsWorkspaceResourceId());
        Assertions.assertEquals("ceoveilovno",
            model.signals().azureMonitorWorkspace().signalAssignments().get(0).signalDefinitions().get(0));
        Assertions.assertEquals("wfqkquj", model.signals().azureMonitorWorkspace().authenticationSetting());
        Assertions.assertEquals("dsuyonobgla",
            model.signals().azureMonitorWorkspace().azureMonitorWorkspaceResourceId());
        Assertions.assertEquals(DependenciesAggregationType.THRESHOLDS,
            model.signals().dependencies().aggregationType());
        Assertions.assertEquals("tcc", model.signals().dependencies().degradedThreshold());
        Assertions.assertEquals("yudxytlmoy", model.signals().dependencies().unhealthyThreshold());
        Assertions.assertEquals(AlertSeverity.SEV2, model.alerts().unhealthy().severity());
        Assertions.assertEquals("kfrlhrxsbky", model.alerts().unhealthy().description());
        Assertions.assertEquals("ca", model.alerts().unhealthy().actionGroupIds().get(0));
        Assertions.assertEquals(AlertSeverity.SEV1, model.alerts().degraded().severity());
        Assertions.assertEquals("seyvj", model.alerts().degraded().description());
        Assertions.assertEquals("tslhspkdeem", model.alerts().degraded().actionGroupIds().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EntityProperties model = new EntityProperties().withDisplayName("cocmnyyaztt")
            .withKind("wwrq")
            .withCanvasPosition(new EntityCoordinates().withX(92.70088471408752).withY(88.20154440709435))
            .withIcon(new IconDefinition().withIconName("ywbiexzfeyueax").withCustomData("xujwbhqwalmuzyo"))
            .withHealthObjective(38.12073567925543D)
            .withImpact(EntityImpact.SUPPRESSED)
            .withLabels(mapOf("bavxbniwdjswzt", "ancuxrhd", "xbzpfzab", "dbpgnxytxhp"))
            .withSignals(new SignalGroup()
                .withAzureResource(new AzureResourceSignalGroup()
                    .withSignalAssignments(Arrays.asList(new SignalAssignment()
                        .withSignalDefinitions(Arrays.asList("wtctyqi", "lbbovplw", "bhvgy", "gu"))))
                    .withAuthenticationSetting("svmkfssxquk")
                    .withAzureResourceId("fpl"))
                .withAzureLogAnalytics(new LogAnalyticsSignalGroup()
                    .withSignalAssignments(Arrays.asList(
                        new SignalAssignment().withSignalDefinitions(Arrays.asList("nkjzkdeslpvlop", "i", "ighxpk")),
                        new SignalAssignment().withSignalDefinitions(Arrays.asList("zb", "iuebbaumny")),
                        new SignalAssignment().withSignalDefinitions(
                            Arrays.asList("ped", "ojnabckhsmtxpsie", "tfhvpesapskrdqmh", "jdhtldwkyzxu")),
                        new SignalAssignment().withSignalDefinitions(Arrays.asList("kn", "ws"))))
                    .withAuthenticationSetting("wsvlxotogtwrupqs")
                    .withLogAnalyticsWorkspaceResourceId("vnm"))
                .withAzureMonitorWorkspace(new AzureMonitorWorkspaceSignalGroup()
                    .withSignalAssignments(
                        Arrays.asList(new SignalAssignment().withSignalDefinitions(Arrays.asList("ceoveilovno")),
                            new SignalAssignment()
                                .withSignalDefinitions(Arrays.asList("fj", "cnjbkcnxdhbt", "kphywpnvjto")),
                            new SignalAssignment().withSignalDefinitions(Arrays.asList("ermclfplphoxuscr", "abgy")),
                            new SignalAssignment().withSignalDefinitions(Arrays.asList("sbj", "azqugxywpmueefj"))))
                    .withAuthenticationSetting("wfqkquj")
                    .withAzureMonitorWorkspaceResourceId("dsuyonobgla"))
                .withDependencies(
                    new DependenciesSignalGroup().withAggregationType(DependenciesAggregationType.THRESHOLDS)
                        .withDegradedThreshold("tcc")
                        .withUnhealthyThreshold("yudxytlmoy")))
            .withAlerts(new EntityAlerts()
                .withUnhealthy(new AlertConfiguration().withSeverity(AlertSeverity.SEV2)
                    .withDescription("kfrlhrxsbky")
                    .withActionGroupIds(Arrays.asList("ca", "uzbpzkafku", "b", "rnwb")))
                .withDegraded(new AlertConfiguration().withSeverity(AlertSeverity.SEV1)
                    .withDescription("seyvj")
                    .withActionGroupIds(Arrays.asList("tslhspkdeem"))));
        model = BinaryData.fromObject(model).toObject(EntityProperties.class);
        Assertions.assertEquals("cocmnyyaztt", model.displayName());
        Assertions.assertEquals("wwrq", model.kind());
        Assertions.assertEquals(92.70088471408752, model.canvasPosition().x());
        Assertions.assertEquals(88.20154440709435, model.canvasPosition().y());
        Assertions.assertEquals("ywbiexzfeyueax", model.icon().iconName());
        Assertions.assertEquals("xujwbhqwalmuzyo", model.icon().customData());
        Assertions.assertEquals(38.12073567925543D, model.healthObjective());
        Assertions.assertEquals(EntityImpact.SUPPRESSED, model.impact());
        Assertions.assertEquals("ancuxrhd", model.labels().get("bavxbniwdjswzt"));
        Assertions.assertEquals("wtctyqi",
            model.signals().azureResource().signalAssignments().get(0).signalDefinitions().get(0));
        Assertions.assertEquals("svmkfssxquk", model.signals().azureResource().authenticationSetting());
        Assertions.assertEquals("fpl", model.signals().azureResource().azureResourceId());
        Assertions.assertEquals("nkjzkdeslpvlop",
            model.signals().azureLogAnalytics().signalAssignments().get(0).signalDefinitions().get(0));
        Assertions.assertEquals("wsvlxotogtwrupqs", model.signals().azureLogAnalytics().authenticationSetting());
        Assertions.assertEquals("vnm", model.signals().azureLogAnalytics().logAnalyticsWorkspaceResourceId());
        Assertions.assertEquals("ceoveilovno",
            model.signals().azureMonitorWorkspace().signalAssignments().get(0).signalDefinitions().get(0));
        Assertions.assertEquals("wfqkquj", model.signals().azureMonitorWorkspace().authenticationSetting());
        Assertions.assertEquals("dsuyonobgla",
            model.signals().azureMonitorWorkspace().azureMonitorWorkspaceResourceId());
        Assertions.assertEquals(DependenciesAggregationType.THRESHOLDS,
            model.signals().dependencies().aggregationType());
        Assertions.assertEquals("tcc", model.signals().dependencies().degradedThreshold());
        Assertions.assertEquals("yudxytlmoy", model.signals().dependencies().unhealthyThreshold());
        Assertions.assertEquals(AlertSeverity.SEV2, model.alerts().unhealthy().severity());
        Assertions.assertEquals("kfrlhrxsbky", model.alerts().unhealthy().description());
        Assertions.assertEquals("ca", model.alerts().unhealthy().actionGroupIds().get(0));
        Assertions.assertEquals(AlertSeverity.SEV1, model.alerts().degraded().severity());
        Assertions.assertEquals("seyvj", model.alerts().degraded().description());
        Assertions.assertEquals("tslhspkdeem", model.alerts().degraded().actionGroupIds().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
