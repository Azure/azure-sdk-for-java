// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cloudhealth.fluent.models.RelationshipInner;
import com.azure.resourcemanager.cloudhealth.models.RelationshipProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RelationshipInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RelationshipInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"displayName\":\"nosggbhcoh\",\"parentEntityName\":\"wdsjnkalju\",\"childEntityName\":\"iiswacffgdkzze\",\"labels\":{\"pnppfuf\":\"vhqcrail\",\"afcnih\":\"rwdmhdlxyjrxsa\"},\"discoveredBy\":\"qapnedgfbcv\",\"deletionDate\":\"2021-08-11T14:17:34Z\"},\"id\":\"vpk\",\"name\":\"qdcvdrhvoo\",\"type\":\"sotbob\"}")
            .toObject(RelationshipInner.class);
        Assertions.assertEquals("nosggbhcoh", model.properties().displayName());
        Assertions.assertEquals("wdsjnkalju", model.properties().parentEntityName());
        Assertions.assertEquals("iiswacffgdkzze", model.properties().childEntityName());
        Assertions.assertEquals("vhqcrail", model.properties().labels().get("pnppfuf"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RelationshipInner model
            = new RelationshipInner().withProperties(new RelationshipProperties().withDisplayName("nosggbhcoh")
                .withParentEntityName("wdsjnkalju")
                .withChildEntityName("iiswacffgdkzze")
                .withLabels(mapOf("pnppfuf", "vhqcrail", "afcnih", "rwdmhdlxyjrxsa")));
        model = BinaryData.fromObject(model).toObject(RelationshipInner.class);
        Assertions.assertEquals("nosggbhcoh", model.properties().displayName());
        Assertions.assertEquals("wdsjnkalju", model.properties().parentEntityName());
        Assertions.assertEquals("iiswacffgdkzze", model.properties().childEntityName());
        Assertions.assertEquals("vhqcrail", model.properties().labels().get("pnppfuf"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
