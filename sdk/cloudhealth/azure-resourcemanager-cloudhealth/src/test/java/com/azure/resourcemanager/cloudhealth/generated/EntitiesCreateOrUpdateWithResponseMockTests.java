// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cloudhealth.CloudHealthManager;
import com.azure.resourcemanager.cloudhealth.models.AlertConfiguration;
import com.azure.resourcemanager.cloudhealth.models.AlertSeverity;
import com.azure.resourcemanager.cloudhealth.models.AzureMonitorWorkspaceSignalGroup;
import com.azure.resourcemanager.cloudhealth.models.AzureResourceSignalGroup;
import com.azure.resourcemanager.cloudhealth.models.DependenciesAggregationType;
import com.azure.resourcemanager.cloudhealth.models.DependenciesSignalGroup;
import com.azure.resourcemanager.cloudhealth.models.Entity;
import com.azure.resourcemanager.cloudhealth.models.EntityAlerts;
import com.azure.resourcemanager.cloudhealth.models.EntityCoordinates;
import com.azure.resourcemanager.cloudhealth.models.EntityImpact;
import com.azure.resourcemanager.cloudhealth.models.EntityProperties;
import com.azure.resourcemanager.cloudhealth.models.IconDefinition;
import com.azure.resourcemanager.cloudhealth.models.LogAnalyticsSignalGroup;
import com.azure.resourcemanager.cloudhealth.models.SignalAssignment;
import com.azure.resourcemanager.cloudhealth.models.SignalGroup;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class EntitiesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Canceled\",\"displayName\":\"ygdyftumrtw\",\"kind\":\"wjslbiwkojgcyzt\",\"canvasPosition\":{\"x\":63.722844500684204,\"y\":65.66619491167963},\"icon\":{\"iconName\":\"eqphchqnrnr\",\"customData\":\"ehuwrykqgaifmvik\"},\"healthObjective\":15.228066092335435,\"impact\":\"Limited\",\"labels\":{\"nxcvds\":\"ejd\",\"v\":\"hnjivo\",\"jdftuljltd\":\"novqfzge\"},\"signals\":{\"azureResource\":{\"signalAssignments\":[{\"signalDefinitions\":[]},{\"signalDefinitions\":[]},{\"signalDefinitions\":[]}],\"authenticationSetting\":\"tmczuomejwcwwqi\",\"azureResourceId\":\"knssxmojm\"},\"azureLogAnalytics\":{\"signalAssignments\":[{\"signalDefinitions\":[]},{\"signalDefinitions\":[]}],\"authenticationSetting\":\"jpr\",\"logAnalyticsWorkspaceResourceId\":\"kwcf\"},\"azureMonitorWorkspace\":{\"signalAssignments\":[{\"signalDefinitions\":[]},{\"signalDefinitions\":[]}],\"authenticationSetting\":\"yxgtczh\",\"azureMonitorWorkspaceResourceId\":\"ydbsd\"},\"dependencies\":{\"aggregationType\":\"WorstOf\",\"degradedThreshold\":\"xmaehvbbxu\",\"unhealthyThreshold\":\"pltfnhtba\"}},\"discoveredBy\":\"gx\",\"deletionDate\":\"2021-06-15T04:05:50Z\",\"healthState\":\"Unknown\",\"alerts\":{\"unhealthy\":{\"severity\":\"Sev1\",\"description\":\"yhpluodpvruudlgz\",\"actionGroupIds\":[\"hostgktstvdxecl\",\"edqbc\"]},\"degraded\":{\"severity\":\"Sev0\",\"description\":\"h\",\"actionGroupIds\":[\"dqkdlwwqfbu\",\"lkxt\",\"qjfsmlmbtxhw\"]}}},\"id\":\"wsrt\",\"name\":\"wcoezbrhub\",\"type\":\"kh\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CloudHealthManager manager = CloudHealthManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Entity response = manager.entities()
            .define("bshrnsvbuswd")
            .withExistingHealthmodel("gf", "pdso")
            .withProperties(new EntityProperties().withDisplayName("ycnunvjsrtk")
                .withKind("wnopqgikyzirtx")
                .withCanvasPosition(new EntityCoordinates().withX(62.656083708137785).withY(37.982496917873455))
                .withIcon(new IconDefinition().withIconName("ntps").withCustomData("gioilqu"))
                .withHealthObjective(33.91036481131239D)
                .withImpact(EntityImpact.STANDARD)
                .withLabels(
                    mapOf("ghhavgrvkffo", "ieoxorggufhyaomt", "mv", "jzhpjbibgjmfx", "zzxscyhwzdgiruj", "cluyovwxnbkf"))
                .withSignals(new SignalGroup()
                    .withAzureResource(new AzureResourceSignalGroup()
                        .withSignalAssignments(
                            Arrays.asList(new SignalAssignment().withSignalDefinitions(Arrays.asList()),
                                new SignalAssignment().withSignalDefinitions(Arrays.asList()),
                                new SignalAssignment().withSignalDefinitions(Arrays.asList())))
                        .withAuthenticationSetting("vzzbtdcq")
                        .withAzureResourceId("pniyujviyl"))
                    .withAzureLogAnalytics(new LogAnalyticsSignalGroup()
                        .withSignalAssignments(
                            Arrays.asList(new SignalAssignment().withSignalDefinitions(Arrays.asList()),
                                new SignalAssignment().withSignalDefinitions(Arrays.asList())))
                        .withAuthenticationSetting("fssnrbgyefrymsga")
                        .withLogAnalyticsWorkspaceResourceId("j"))
                    .withAzureMonitorWorkspace(new AzureMonitorWorkspaceSignalGroup()
                        .withSignalAssignments(
                            Arrays.asList(new SignalAssignment().withSignalDefinitions(Arrays.asList())))
                        .withAuthenticationSetting("cotmr")
                        .withAzureMonitorWorkspaceResourceId("hirctymoxoftpipi"))
                    .withDependencies(
                        new DependenciesSignalGroup().withAggregationType(DependenciesAggregationType.THRESHOLDS)
                            .withDegradedThreshold("uh")
                            .withUnhealthyThreshold("cpqjlihhyu")))
                .withAlerts(new EntityAlerts()
                    .withUnhealthy(new AlertConfiguration().withSeverity(AlertSeverity.SEV2)
                        .withDescription("reuzvxurisjn")
                        .withActionGroupIds(Arrays.asList("txifqj", "gxmrhublwp", "esutrgjupauutpw", "qhih")))
                    .withDegraded(new AlertConfiguration().withSeverity(AlertSeverity.SEV4)
                        .withDescription("w")
                        .withActionGroupIds(Arrays.asList("fqntcyp")))))
            .create();

        Assertions.assertEquals("ygdyftumrtw", response.properties().displayName());
        Assertions.assertEquals("wjslbiwkojgcyzt", response.properties().kind());
        Assertions.assertEquals(63.722844500684204, response.properties().canvasPosition().x());
        Assertions.assertEquals(65.66619491167963, response.properties().canvasPosition().y());
        Assertions.assertEquals("eqphchqnrnr", response.properties().icon().iconName());
        Assertions.assertEquals("ehuwrykqgaifmvik", response.properties().icon().customData());
        Assertions.assertEquals(15.228066092335435D, response.properties().healthObjective());
        Assertions.assertEquals(EntityImpact.LIMITED, response.properties().impact());
        Assertions.assertEquals("ejd", response.properties().labels().get("nxcvds"));
        Assertions.assertEquals("tmczuomejwcwwqi",
            response.properties().signals().azureResource().authenticationSetting());
        Assertions.assertEquals("knssxmojm", response.properties().signals().azureResource().azureResourceId());
        Assertions.assertEquals("jpr", response.properties().signals().azureLogAnalytics().authenticationSetting());
        Assertions.assertEquals("kwcf",
            response.properties().signals().azureLogAnalytics().logAnalyticsWorkspaceResourceId());
        Assertions.assertEquals("yxgtczh",
            response.properties().signals().azureMonitorWorkspace().authenticationSetting());
        Assertions.assertEquals("ydbsd",
            response.properties().signals().azureMonitorWorkspace().azureMonitorWorkspaceResourceId());
        Assertions.assertEquals(DependenciesAggregationType.WORST_OF,
            response.properties().signals().dependencies().aggregationType());
        Assertions.assertEquals("xmaehvbbxu", response.properties().signals().dependencies().degradedThreshold());
        Assertions.assertEquals("pltfnhtba", response.properties().signals().dependencies().unhealthyThreshold());
        Assertions.assertEquals(AlertSeverity.SEV1, response.properties().alerts().unhealthy().severity());
        Assertions.assertEquals("yhpluodpvruudlgz", response.properties().alerts().unhealthy().description());
        Assertions.assertEquals("hostgktstvdxecl", response.properties().alerts().unhealthy().actionGroupIds().get(0));
        Assertions.assertEquals(AlertSeverity.SEV0, response.properties().alerts().degraded().severity());
        Assertions.assertEquals("h", response.properties().alerts().degraded().description());
        Assertions.assertEquals("dqkdlwwqfbu", response.properties().alerts().degraded().actionGroupIds().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
