// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cloudhealth.models.DynamicDetectionRule;
import com.azure.resourcemanager.cloudhealth.models.DynamicThresholdDirection;
import com.azure.resourcemanager.cloudhealth.models.DynamicThresholdModel;
import com.azure.resourcemanager.cloudhealth.models.EvaluationRule;
import com.azure.resourcemanager.cloudhealth.models.RefreshInterval;
import com.azure.resourcemanager.cloudhealth.models.SignalDefinitionProperties;
import com.azure.resourcemanager.cloudhealth.models.SignalOperator;
import com.azure.resourcemanager.cloudhealth.models.ThresholdRule;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SignalDefinitionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SignalDefinitionProperties model = BinaryData.fromString(
            "{\"signalKind\":\"SignalDefinitionProperties\",\"provisioningState\":\"Canceled\",\"displayName\":\"nxqbzvddn\",\"refreshInterval\":\"PT1M\",\"labels\":{\"vuhrhcffcyddgl\":\"icbtwnpzao\"},\"dataUnit\":\"t\",\"evaluationRules\":{\"dynamicDetectionRule\":{\"dynamicThresholdModel\":\"AnomalyDetection\",\"modelSensitivity\":11.132933027510406,\"dynamicThresholdDirection\":\"GreaterOrLowerThan\",\"trainingStartTime\":\"2021-11-24T17:43:24Z\"},\"degradedRule\":{\"operator\":\"Equals\",\"threshold\":\"xmqci\"},\"unhealthyRule\":{\"operator\":\"LowerOrEquals\",\"threshold\":\"hkh\"}},\"deletionDate\":\"2021-04-08T23:48:15Z\"}")
            .toObject(SignalDefinitionProperties.class);
        Assertions.assertEquals("nxqbzvddn", model.displayName());
        Assertions.assertEquals(RefreshInterval.PT1M, model.refreshInterval());
        Assertions.assertEquals("icbtwnpzao", model.labels().get("vuhrhcffcyddgl"));
        Assertions.assertEquals("t", model.dataUnit());
        Assertions.assertEquals(DynamicThresholdModel.ANOMALY_DETECTION,
            model.evaluationRules().dynamicDetectionRule().dynamicThresholdModel());
        Assertions.assertEquals(11.132933027510406, model.evaluationRules().dynamicDetectionRule().modelSensitivity());
        Assertions.assertEquals(DynamicThresholdDirection.GREATER_OR_LOWER_THAN,
            model.evaluationRules().dynamicDetectionRule().dynamicThresholdDirection());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-24T17:43:24Z"),
            model.evaluationRules().dynamicDetectionRule().trainingStartTime());
        Assertions.assertEquals(SignalOperator.EQUALS, model.evaluationRules().degradedRule().operator());
        Assertions.assertEquals("xmqci", model.evaluationRules().degradedRule().threshold());
        Assertions.assertEquals(SignalOperator.LOWER_OR_EQUALS, model.evaluationRules().unhealthyRule().operator());
        Assertions.assertEquals("hkh", model.evaluationRules().unhealthyRule().threshold());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SignalDefinitionProperties model = new SignalDefinitionProperties().withDisplayName("nxqbzvddn")
            .withRefreshInterval(RefreshInterval.PT1M)
            .withLabels(mapOf("vuhrhcffcyddgl", "icbtwnpzao"))
            .withDataUnit("t")
            .withEvaluationRules(new EvaluationRule()
                .withDynamicDetectionRule(
                    new DynamicDetectionRule().withDynamicThresholdModel(DynamicThresholdModel.ANOMALY_DETECTION)
                        .withModelSensitivity(11.132933027510406)
                        .withDynamicThresholdDirection(DynamicThresholdDirection.GREATER_OR_LOWER_THAN)
                        .withTrainingStartTime(OffsetDateTime.parse("2021-11-24T17:43:24Z")))
                .withDegradedRule(new ThresholdRule().withOperator(SignalOperator.EQUALS).withThreshold("xmqci"))
                .withUnhealthyRule(
                    new ThresholdRule().withOperator(SignalOperator.LOWER_OR_EQUALS).withThreshold("hkh")));
        model = BinaryData.fromObject(model).toObject(SignalDefinitionProperties.class);
        Assertions.assertEquals("nxqbzvddn", model.displayName());
        Assertions.assertEquals(RefreshInterval.PT1M, model.refreshInterval());
        Assertions.assertEquals("icbtwnpzao", model.labels().get("vuhrhcffcyddgl"));
        Assertions.assertEquals("t", model.dataUnit());
        Assertions.assertEquals(DynamicThresholdModel.ANOMALY_DETECTION,
            model.evaluationRules().dynamicDetectionRule().dynamicThresholdModel());
        Assertions.assertEquals(11.132933027510406, model.evaluationRules().dynamicDetectionRule().modelSensitivity());
        Assertions.assertEquals(DynamicThresholdDirection.GREATER_OR_LOWER_THAN,
            model.evaluationRules().dynamicDetectionRule().dynamicThresholdDirection());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-24T17:43:24Z"),
            model.evaluationRules().dynamicDetectionRule().trainingStartTime());
        Assertions.assertEquals(SignalOperator.EQUALS, model.evaluationRules().degradedRule().operator());
        Assertions.assertEquals("xmqci", model.evaluationRules().degradedRule().threshold());
        Assertions.assertEquals(SignalOperator.LOWER_OR_EQUALS, model.evaluationRules().unhealthyRule().operator());
        Assertions.assertEquals("hkh", model.evaluationRules().unhealthyRule().threshold());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
