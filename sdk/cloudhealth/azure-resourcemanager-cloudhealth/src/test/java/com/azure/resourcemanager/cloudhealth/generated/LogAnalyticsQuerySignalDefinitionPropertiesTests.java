// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cloudhealth.models.DynamicDetectionRule;
import com.azure.resourcemanager.cloudhealth.models.DynamicThresholdDirection;
import com.azure.resourcemanager.cloudhealth.models.DynamicThresholdModel;
import com.azure.resourcemanager.cloudhealth.models.EvaluationRule;
import com.azure.resourcemanager.cloudhealth.models.LogAnalyticsQuerySignalDefinitionProperties;
import com.azure.resourcemanager.cloudhealth.models.RefreshInterval;
import com.azure.resourcemanager.cloudhealth.models.SignalOperator;
import com.azure.resourcemanager.cloudhealth.models.ThresholdRule;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LogAnalyticsQuerySignalDefinitionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LogAnalyticsQuerySignalDefinitionProperties model = BinaryData.fromString(
            "{\"signalKind\":\"LogAnalyticsQuery\",\"queryText\":\"cfionl\",\"timeGrain\":\"x\",\"valueColumnName\":\"qgtz\",\"provisioningState\":\"Deleting\",\"displayName\":\"qbqqwxr\",\"refreshInterval\":\"PT30M\",\"labels\":{\"ampmngnz\":\"lnwsubisn\",\"aqw\":\"c\"},\"dataUnit\":\"chcbonqvpkvlrxnj\",\"evaluationRules\":{\"dynamicDetectionRule\":{\"dynamicThresholdModel\":\"AnomalyDetection\",\"modelSensitivity\":80.0054787376229,\"dynamicThresholdDirection\":\"LowerThan\",\"trainingStartTime\":\"2021-01-11T00:37:29Z\"},\"degradedRule\":{\"operator\":\"LowerThan\",\"threshold\":\"lokeyy\"},\"unhealthyRule\":{\"operator\":\"LowerOrEquals\",\"threshold\":\"jbdlwtgrhpdjpju\"}},\"deletionDate\":\"2021-01-02T16:01:04Z\"}")
            .toObject(LogAnalyticsQuerySignalDefinitionProperties.class);
        Assertions.assertEquals("qbqqwxr", model.displayName());
        Assertions.assertEquals(RefreshInterval.PT30M, model.refreshInterval());
        Assertions.assertEquals("lnwsubisn", model.labels().get("ampmngnz"));
        Assertions.assertEquals("chcbonqvpkvlrxnj", model.dataUnit());
        Assertions.assertEquals(DynamicThresholdModel.ANOMALY_DETECTION,
            model.evaluationRules().dynamicDetectionRule().dynamicThresholdModel());
        Assertions.assertEquals(80.0054787376229, model.evaluationRules().dynamicDetectionRule().modelSensitivity());
        Assertions.assertEquals(DynamicThresholdDirection.LOWER_THAN,
            model.evaluationRules().dynamicDetectionRule().dynamicThresholdDirection());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-11T00:37:29Z"),
            model.evaluationRules().dynamicDetectionRule().trainingStartTime());
        Assertions.assertEquals(SignalOperator.LOWER_THAN, model.evaluationRules().degradedRule().operator());
        Assertions.assertEquals("lokeyy", model.evaluationRules().degradedRule().threshold());
        Assertions.assertEquals(SignalOperator.LOWER_OR_EQUALS, model.evaluationRules().unhealthyRule().operator());
        Assertions.assertEquals("jbdlwtgrhpdjpju", model.evaluationRules().unhealthyRule().threshold());
        Assertions.assertEquals("cfionl", model.queryText());
        Assertions.assertEquals("x", model.timeGrain());
        Assertions.assertEquals("qgtz", model.valueColumnName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LogAnalyticsQuerySignalDefinitionProperties model = new LogAnalyticsQuerySignalDefinitionProperties()
            .withDisplayName("qbqqwxr")
            .withRefreshInterval(RefreshInterval.PT30M)
            .withLabels(mapOf("ampmngnz", "lnwsubisn", "aqw", "c"))
            .withDataUnit("chcbonqvpkvlrxnj")
            .withEvaluationRules(new EvaluationRule()
                .withDynamicDetectionRule(
                    new DynamicDetectionRule().withDynamicThresholdModel(DynamicThresholdModel.ANOMALY_DETECTION)
                        .withModelSensitivity(80.0054787376229)
                        .withDynamicThresholdDirection(DynamicThresholdDirection.LOWER_THAN)
                        .withTrainingStartTime(OffsetDateTime.parse("2021-01-11T00:37:29Z")))
                .withDegradedRule(new ThresholdRule().withOperator(SignalOperator.LOWER_THAN).withThreshold("lokeyy"))
                .withUnhealthyRule(
                    new ThresholdRule().withOperator(SignalOperator.LOWER_OR_EQUALS).withThreshold("jbdlwtgrhpdjpju")))
            .withQueryText("cfionl")
            .withTimeGrain("x")
            .withValueColumnName("qgtz");
        model = BinaryData.fromObject(model).toObject(LogAnalyticsQuerySignalDefinitionProperties.class);
        Assertions.assertEquals("qbqqwxr", model.displayName());
        Assertions.assertEquals(RefreshInterval.PT30M, model.refreshInterval());
        Assertions.assertEquals("lnwsubisn", model.labels().get("ampmngnz"));
        Assertions.assertEquals("chcbonqvpkvlrxnj", model.dataUnit());
        Assertions.assertEquals(DynamicThresholdModel.ANOMALY_DETECTION,
            model.evaluationRules().dynamicDetectionRule().dynamicThresholdModel());
        Assertions.assertEquals(80.0054787376229, model.evaluationRules().dynamicDetectionRule().modelSensitivity());
        Assertions.assertEquals(DynamicThresholdDirection.LOWER_THAN,
            model.evaluationRules().dynamicDetectionRule().dynamicThresholdDirection());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-11T00:37:29Z"),
            model.evaluationRules().dynamicDetectionRule().trainingStartTime());
        Assertions.assertEquals(SignalOperator.LOWER_THAN, model.evaluationRules().degradedRule().operator());
        Assertions.assertEquals("lokeyy", model.evaluationRules().degradedRule().threshold());
        Assertions.assertEquals(SignalOperator.LOWER_OR_EQUALS, model.evaluationRules().unhealthyRule().operator());
        Assertions.assertEquals("jbdlwtgrhpdjpju", model.evaluationRules().unhealthyRule().threshold());
        Assertions.assertEquals("cfionl", model.queryText());
        Assertions.assertEquals("x", model.timeGrain());
        Assertions.assertEquals("qgtz", model.valueColumnName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
