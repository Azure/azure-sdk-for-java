// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cloudhealth.CloudHealthManager;
import com.azure.resourcemanager.cloudhealth.models.DynamicThresholdDirection;
import com.azure.resourcemanager.cloudhealth.models.DynamicThresholdModel;
import com.azure.resourcemanager.cloudhealth.models.RefreshInterval;
import com.azure.resourcemanager.cloudhealth.models.SignalDefinition;
import com.azure.resourcemanager.cloudhealth.models.SignalOperator;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SignalDefinitionsListByHealthModelMockTests {
    @Test
    public void testListByHealthModel() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"signalKind\":\"SignalDefinitionProperties\",\"provisioningState\":\"Failed\",\"displayName\":\"aehtwd\",\"refreshInterval\":\"PT5M\",\"labels\":{\"rcdlbhshfwpr\":\"wib\",\"hevxcced\":\"cstwity\"},\"dataUnit\":\"nmdyodnwzxl\",\"evaluationRules\":{\"dynamicDetectionRule\":{\"dynamicThresholdModel\":\"AnomalyDetection\",\"modelSensitivity\":61.44686132510554,\"dynamicThresholdDirection\":\"GreaterOrLowerThan\",\"trainingStartTime\":\"2021-02-20T03:38:09Z\"},\"degradedRule\":{\"operator\":\"GreaterThan\",\"threshold\":\"gcxn\"},\"unhealthyRule\":{\"operator\":\"GreaterOrEquals\",\"threshold\":\"wxqibyq\"}},\"deletionDate\":\"2021-05-22T21:00:43Z\"},\"id\":\"wxwlmdjrkvfgb\",\"name\":\"fvpdbo\",\"type\":\"acizsjqlhkrr\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CloudHealthManager manager = CloudHealthManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<SignalDefinition> response = manager.signalDefinitions()
            .listByHealthModel("xgfpelolppv", "srp", OffsetDateTime.parse("2021-02-05T20:48:24Z"),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("aehtwd", response.iterator().next().properties().displayName());
        Assertions.assertEquals(RefreshInterval.PT5M, response.iterator().next().properties().refreshInterval());
        Assertions.assertEquals("wib", response.iterator().next().properties().labels().get("rcdlbhshfwpr"));
        Assertions.assertEquals("nmdyodnwzxl", response.iterator().next().properties().dataUnit());
        Assertions.assertEquals(DynamicThresholdModel.ANOMALY_DETECTION,
            response.iterator().next().properties().evaluationRules().dynamicDetectionRule().dynamicThresholdModel());
        Assertions.assertEquals(61.44686132510554,
            response.iterator().next().properties().evaluationRules().dynamicDetectionRule().modelSensitivity());
        Assertions.assertEquals(DynamicThresholdDirection.GREATER_OR_LOWER_THAN,
            response.iterator()
                .next()
                .properties()
                .evaluationRules()
                .dynamicDetectionRule()
                .dynamicThresholdDirection());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-20T03:38:09Z"),
            response.iterator().next().properties().evaluationRules().dynamicDetectionRule().trainingStartTime());
        Assertions.assertEquals(SignalOperator.GREATER_THAN,
            response.iterator().next().properties().evaluationRules().degradedRule().operator());
        Assertions.assertEquals("gcxn",
            response.iterator().next().properties().evaluationRules().degradedRule().threshold());
        Assertions.assertEquals(SignalOperator.GREATER_OR_EQUALS,
            response.iterator().next().properties().evaluationRules().unhealthyRule().operator());
        Assertions.assertEquals("wxqibyq",
            response.iterator().next().properties().evaluationRules().unhealthyRule().threshold());
    }
}
