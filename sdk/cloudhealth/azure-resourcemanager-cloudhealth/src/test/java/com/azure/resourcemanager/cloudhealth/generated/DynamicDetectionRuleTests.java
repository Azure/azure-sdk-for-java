// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.cloudhealth.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cloudhealth.models.DynamicDetectionRule;
import com.azure.resourcemanager.cloudhealth.models.DynamicThresholdDirection;
import com.azure.resourcemanager.cloudhealth.models.DynamicThresholdModel;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class DynamicDetectionRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DynamicDetectionRule model = BinaryData.fromString(
            "{\"dynamicThresholdModel\":\"AnomalyDetection\",\"modelSensitivity\":85.08706843049872,\"dynamicThresholdDirection\":\"LowerThan\",\"trainingStartTime\":\"2021-08-19T21:44:29Z\"}")
            .toObject(DynamicDetectionRule.class);
        Assertions.assertEquals(DynamicThresholdModel.ANOMALY_DETECTION, model.dynamicThresholdModel());
        Assertions.assertEquals(85.08706843049872, model.modelSensitivity());
        Assertions.assertEquals(DynamicThresholdDirection.LOWER_THAN, model.dynamicThresholdDirection());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-19T21:44:29Z"), model.trainingStartTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DynamicDetectionRule model
            = new DynamicDetectionRule().withDynamicThresholdModel(DynamicThresholdModel.ANOMALY_DETECTION)
                .withModelSensitivity(85.08706843049872)
                .withDynamicThresholdDirection(DynamicThresholdDirection.LOWER_THAN)
                .withTrainingStartTime(OffsetDateTime.parse("2021-08-19T21:44:29Z"));
        model = BinaryData.fromObject(model).toObject(DynamicDetectionRule.class);
        Assertions.assertEquals(DynamicThresholdModel.ANOMALY_DETECTION, model.dynamicThresholdModel());
        Assertions.assertEquals(85.08706843049872, model.modelSensitivity());
        Assertions.assertEquals(DynamicThresholdDirection.LOWER_THAN, model.dynamicThresholdDirection());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-19T21:44:29Z"), model.trainingStartTime());
    }
}
