// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.liftrarize.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.liftrarize.fluent.models.OrganizationResourceInner;
import com.azure.resourcemanager.liftrarize.models.LiftrBaseMarketplaceDetails;
import com.azure.resourcemanager.liftrarize.models.LiftrBaseOfferDetails;
import com.azure.resourcemanager.liftrarize.models.LiftrBaseSingleSignOnPropertiesV2;
import com.azure.resourcemanager.liftrarize.models.LiftrBaseUserDetails;
import com.azure.resourcemanager.liftrarize.models.ManagedServiceIdentity;
import com.azure.resourcemanager.liftrarize.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.liftrarize.models.OrganizationProperties;
import com.azure.resourcemanager.liftrarize.models.PartnerProperties;
import com.azure.resourcemanager.liftrarize.models.SingleSignOnStates;
import com.azure.resourcemanager.liftrarize.models.SingleSignOnType;
import com.azure.resourcemanager.liftrarize.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OrganizationResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OrganizationResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"marketplace\":{\"subscriptionId\":\"gvfcj\",\"subscriptionStatus\":\"Subscribed\",\"offerDetails\":{\"publisherId\":\"oxxjtfelluwf\",\"offerId\":\"it\",\"planId\":\"np\",\"planName\":\"fpjkjlxofp\",\"termUnit\":\"hpf\",\"termId\":\"ypininm\"}},\"user\":{\"firstName\":\"huyb\",\"lastName\":\"podepoo\",\"emailAddress\":\"nuvamiheogna\",\"upn\":\"zxtheotusivyevcc\",\"phoneNumber\":\"ihnhun\"},\"provisioningState\":\"Failed\",\"partnerProperties\":{\"description\":\"zrnf\"},\"singleSignOnProperties\":{\"type\":\"OpenId\",\"state\":\"Disable\",\"enterpriseAppId\":\"pemvtzfkufubljof\",\"url\":\"eofjaeqjh\",\"aadDomains\":[\"asvm\"]}},\"identity\":{\"principalId\":\"d0170aff-1bf8-4206-8177-8924d04df6be\",\"tenantId\":\"4c44eee3-4621-4779-95db-e0a092cfed0b\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"ntnbybkzg\":{\"principalId\":\"732146b9-0333-4649-aa23-71acc7d6c98a\",\"clientId\":\"a597af69-1c25-49d6-8650-127a014bc412\"},\"wclxxwrl\":{\"principalId\":\"360c3914-71b8-4622-b005-2a831186a6b2\",\"clientId\":\"396f3325-f65d-4010-830f-cd8a0898b6ba\"},\"uskcqvkocrcj\":{\"principalId\":\"7357bb0d-f56b-4666-8d15-4531e5b5e9d3\",\"clientId\":\"e92ea645-a0ea-44bb-8981-454f58033b3b\"}}},\"location\":\"wtnhxbnjbiksqr\",\"tags\":{\"jfm\":\"sainqpjwnzl\",\"vmgxsab\":\"pee\",\"jczdzevndh\":\"yqduujit\",\"feusnhut\":\"rwpdappdsbdkvwrw\"},\"id\":\"eltmrldhugjzzdat\",\"name\":\"xhocdgeablgphuti\",\"type\":\"ndv\"}")
            .toObject(OrganizationResourceInner.class);
        Assertions.assertEquals("wtnhxbnjbiksqr", model.location());
        Assertions.assertEquals("sainqpjwnzl", model.tags().get("jfm"));
        Assertions.assertEquals("gvfcj", model.properties().marketplace().subscriptionId());
        Assertions.assertEquals("oxxjtfelluwf", model.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("it", model.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("np", model.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("fpjkjlxofp", model.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("hpf", model.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("ypininm", model.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("huyb", model.properties().user().firstName());
        Assertions.assertEquals("podepoo", model.properties().user().lastName());
        Assertions.assertEquals("nuvamiheogna", model.properties().user().emailAddress());
        Assertions.assertEquals("zxtheotusivyevcc", model.properties().user().upn());
        Assertions.assertEquals("ihnhun", model.properties().user().phoneNumber());
        Assertions.assertEquals("zrnf", model.properties().partnerProperties().description());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID, model.properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.DISABLE, model.properties().singleSignOnProperties().state());
        Assertions.assertEquals("pemvtzfkufubljof", model.properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("eofjaeqjh", model.properties().singleSignOnProperties().url());
        Assertions.assertEquals("asvm", model.properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OrganizationResourceInner model = new OrganizationResourceInner().withLocation("wtnhxbnjbiksqr")
            .withTags(
                mapOf("jfm", "sainqpjwnzl", "vmgxsab", "pee", "jczdzevndh", "yqduujit", "feusnhut", "rwpdappdsbdkvwrw"))
            .withProperties(new OrganizationProperties()
                .withMarketplace(new LiftrBaseMarketplaceDetails().withSubscriptionId("gvfcj")
                    .withOfferDetails(new LiftrBaseOfferDetails().withPublisherId("oxxjtfelluwf")
                        .withOfferId("it")
                        .withPlanId("np")
                        .withPlanName("fpjkjlxofp")
                        .withTermUnit("hpf")
                        .withTermId("ypininm")))
                .withUser(new LiftrBaseUserDetails().withFirstName("huyb")
                    .withLastName("podepoo")
                    .withEmailAddress("nuvamiheogna")
                    .withUpn("zxtheotusivyevcc")
                    .withPhoneNumber("ihnhun"))
                .withPartnerProperties(new PartnerProperties().withDescription("zrnf"))
                .withSingleSignOnProperties(new LiftrBaseSingleSignOnPropertiesV2().withType(SingleSignOnType.OPEN_ID)
                    .withState(SingleSignOnStates.DISABLE)
                    .withEnterpriseAppId("pemvtzfkufubljof")
                    .withUrl("eofjaeqjh")
                    .withAadDomains(Arrays.asList("asvm"))))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(mapOf("ntnbybkzg", new UserAssignedIdentity(), "wclxxwrl",
                    new UserAssignedIdentity(), "uskcqvkocrcj", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(OrganizationResourceInner.class);
        Assertions.assertEquals("wtnhxbnjbiksqr", model.location());
        Assertions.assertEquals("sainqpjwnzl", model.tags().get("jfm"));
        Assertions.assertEquals("gvfcj", model.properties().marketplace().subscriptionId());
        Assertions.assertEquals("oxxjtfelluwf", model.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("it", model.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("np", model.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("fpjkjlxofp", model.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("hpf", model.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("ypininm", model.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("huyb", model.properties().user().firstName());
        Assertions.assertEquals("podepoo", model.properties().user().lastName());
        Assertions.assertEquals("nuvamiheogna", model.properties().user().emailAddress());
        Assertions.assertEquals("zxtheotusivyevcc", model.properties().user().upn());
        Assertions.assertEquals("ihnhun", model.properties().user().phoneNumber());
        Assertions.assertEquals("zrnf", model.properties().partnerProperties().description());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID, model.properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.DISABLE, model.properties().singleSignOnProperties().state());
        Assertions.assertEquals("pemvtzfkufubljof", model.properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("eofjaeqjh", model.properties().singleSignOnProperties().url());
        Assertions.assertEquals("asvm", model.properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
