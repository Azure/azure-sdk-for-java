// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.liftrarize.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.liftrarize.fluent.models.OrganizationResourceInner;
import com.azure.resourcemanager.liftrarize.models.LiftrBaseMarketplaceDetails;
import com.azure.resourcemanager.liftrarize.models.LiftrBaseOfferDetails;
import com.azure.resourcemanager.liftrarize.models.LiftrBaseSingleSignOnPropertiesV2;
import com.azure.resourcemanager.liftrarize.models.LiftrBaseUserDetails;
import com.azure.resourcemanager.liftrarize.models.ManagedServiceIdentity;
import com.azure.resourcemanager.liftrarize.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.liftrarize.models.OrganizationProperties;
import com.azure.resourcemanager.liftrarize.models.OrganizationResourceListResult;
import com.azure.resourcemanager.liftrarize.models.PartnerProperties;
import com.azure.resourcemanager.liftrarize.models.SingleSignOnStates;
import com.azure.resourcemanager.liftrarize.models.SingleSignOnType;
import com.azure.resourcemanager.liftrarize.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OrganizationResourceListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OrganizationResourceListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"marketplace\":{\"subscriptionId\":\"ithxqhabifpi\",\"subscriptionStatus\":\"Subscribed\",\"offerDetails\":{\"publisherId\":\"czbysc\",\"offerId\":\"pqxu\",\"planId\":\"ivyqniwbybrkxvd\",\"planName\":\"jgrtfwvukxga\",\"termUnit\":\"ccsnhsjc\",\"termId\":\"ejhkry\"}},\"user\":{\"firstName\":\"napczwlokjy\",\"lastName\":\"kkvnipjox\",\"emailAddress\":\"nchgej\",\"upn\":\"odmailzyd\",\"phoneNumber\":\"o\"},\"provisioningState\":\"Failed\",\"partnerProperties\":{\"description\":\"huxinpmqnj\"},\"singleSignOnProperties\":{\"type\":\"OpenId\",\"state\":\"Disable\",\"enterpriseAppId\":\"sprozvcput\",\"url\":\"jvwmfda\",\"aadDomains\":[\"mdvpjhulsu\"]}},\"identity\":{\"principalId\":\"cbc6ef9a-31c5-4643-9c42-7ee389d5308c\",\"tenantId\":\"33cc4e12-69f6-4ad2-b14b-dbf3e7e825ca\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"wfndiodjpsl\":{\"principalId\":\"3767f701-7d81-4ea7-810e-5fbe747aa83b\",\"clientId\":\"0935ba7a-af82-428d-9a8f-624b5d0a89d4\"},\"dpvwryoqpsoaccta\":{\"principalId\":\"7ee4990b-3b3b-4aea-bc10-f54709873f91\",\"clientId\":\"50b3e231-d8fe-4309-85f0-cf1c81241acc\"}}},\"location\":\"kljla\",\"tags\":{\"expa\":\"ryffdfdosy\"},\"id\":\"jakhmsbzjh\",\"name\":\"rzevdphlxaol\",\"type\":\"hqtrgqjbpf\"}],\"nextLink\":\"s\"}")
            .toObject(OrganizationResourceListResult.class);
        Assertions.assertEquals("kljla", model.value().get(0).location());
        Assertions.assertEquals("ryffdfdosy", model.value().get(0).tags().get("expa"));
        Assertions.assertEquals("ithxqhabifpi", model.value().get(0).properties().marketplace().subscriptionId());
        Assertions.assertEquals("czbysc", model.value().get(0).properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("pqxu", model.value().get(0).properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("ivyqniwbybrkxvd",
            model.value().get(0).properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("jgrtfwvukxga",
            model.value().get(0).properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("ccsnhsjc", model.value().get(0).properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("ejhkry", model.value().get(0).properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("napczwlokjy", model.value().get(0).properties().user().firstName());
        Assertions.assertEquals("kkvnipjox", model.value().get(0).properties().user().lastName());
        Assertions.assertEquals("nchgej", model.value().get(0).properties().user().emailAddress());
        Assertions.assertEquals("odmailzyd", model.value().get(0).properties().user().upn());
        Assertions.assertEquals("o", model.value().get(0).properties().user().phoneNumber());
        Assertions.assertEquals("huxinpmqnj", model.value().get(0).properties().partnerProperties().description());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID,
            model.value().get(0).properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.DISABLE,
            model.value().get(0).properties().singleSignOnProperties().state());
        Assertions.assertEquals("sprozvcput",
            model.value().get(0).properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("jvwmfda", model.value().get(0).properties().singleSignOnProperties().url());
        Assertions.assertEquals("mdvpjhulsu",
            model.value().get(0).properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("s", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OrganizationResourceListResult model = new OrganizationResourceListResult()
            .withValue(Arrays.asList(new OrganizationResourceInner().withLocation("kljla")
                .withTags(mapOf("expa", "ryffdfdosy"))
                .withProperties(new OrganizationProperties()
                    .withMarketplace(new LiftrBaseMarketplaceDetails().withSubscriptionId("ithxqhabifpi")
                        .withOfferDetails(new LiftrBaseOfferDetails().withPublisherId("czbysc")
                            .withOfferId("pqxu")
                            .withPlanId("ivyqniwbybrkxvd")
                            .withPlanName("jgrtfwvukxga")
                            .withTermUnit("ccsnhsjc")
                            .withTermId("ejhkry")))
                    .withUser(new LiftrBaseUserDetails().withFirstName("napczwlokjy")
                        .withLastName("kkvnipjox")
                        .withEmailAddress("nchgej")
                        .withUpn("odmailzyd")
                        .withPhoneNumber("o"))
                    .withPartnerProperties(new PartnerProperties().withDescription("huxinpmqnj"))
                    .withSingleSignOnProperties(
                        new LiftrBaseSingleSignOnPropertiesV2().withType(SingleSignOnType.OPEN_ID)
                            .withState(SingleSignOnStates.DISABLE)
                            .withEnterpriseAppId("sprozvcput")
                            .withUrl("jvwmfda")
                            .withAadDomains(Arrays.asList("mdvpjhulsu"))))
                .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("wfndiodjpsl", new UserAssignedIdentity(), "dpvwryoqpsoaccta",
                        new UserAssignedIdentity())))))
            .withNextLink("s");
        model = BinaryData.fromObject(model).toObject(OrganizationResourceListResult.class);
        Assertions.assertEquals("kljla", model.value().get(0).location());
        Assertions.assertEquals("ryffdfdosy", model.value().get(0).tags().get("expa"));
        Assertions.assertEquals("ithxqhabifpi", model.value().get(0).properties().marketplace().subscriptionId());
        Assertions.assertEquals("czbysc", model.value().get(0).properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("pqxu", model.value().get(0).properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("ivyqniwbybrkxvd",
            model.value().get(0).properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("jgrtfwvukxga",
            model.value().get(0).properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("ccsnhsjc", model.value().get(0).properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("ejhkry", model.value().get(0).properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("napczwlokjy", model.value().get(0).properties().user().firstName());
        Assertions.assertEquals("kkvnipjox", model.value().get(0).properties().user().lastName());
        Assertions.assertEquals("nchgej", model.value().get(0).properties().user().emailAddress());
        Assertions.assertEquals("odmailzyd", model.value().get(0).properties().user().upn());
        Assertions.assertEquals("o", model.value().get(0).properties().user().phoneNumber());
        Assertions.assertEquals("huxinpmqnj", model.value().get(0).properties().partnerProperties().description());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID,
            model.value().get(0).properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.DISABLE,
            model.value().get(0).properties().singleSignOnProperties().state());
        Assertions.assertEquals("sprozvcput",
            model.value().get(0).properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("jvwmfda", model.value().get(0).properties().singleSignOnProperties().url());
        Assertions.assertEquals("mdvpjhulsu",
            model.value().get(0).properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("s", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
