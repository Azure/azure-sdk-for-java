// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.liftrarize.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.liftrarize.models.LiftrBaseMarketplaceDetails;
import com.azure.resourcemanager.liftrarize.models.LiftrBaseOfferDetails;
import com.azure.resourcemanager.liftrarize.models.LiftrBaseSingleSignOnPropertiesV2;
import com.azure.resourcemanager.liftrarize.models.LiftrBaseUserDetails;
import com.azure.resourcemanager.liftrarize.models.OrganizationProperties;
import com.azure.resourcemanager.liftrarize.models.PartnerProperties;
import com.azure.resourcemanager.liftrarize.models.SingleSignOnStates;
import com.azure.resourcemanager.liftrarize.models.SingleSignOnType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class OrganizationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OrganizationProperties model = BinaryData.fromString(
            "{\"marketplace\":{\"subscriptionId\":\"ozwyiftyhxhuro\",\"subscriptionStatus\":\"Suspended\",\"offerDetails\":{\"publisherId\":\"yxolniwp\",\"offerId\":\"cukjf\",\"planId\":\"giawx\",\"planName\":\"ryplwckbasyypn\",\"termUnit\":\"hsgcbacphejkot\",\"termId\":\"qgoulznd\"}},\"user\":{\"firstName\":\"kwy\",\"lastName\":\"gfgibm\",\"emailAddress\":\"gakeqsr\",\"upn\":\"bzqqedqytbciq\",\"phoneNumber\":\"uflmm\"},\"provisioningState\":\"Failed\",\"partnerProperties\":{\"description\":\"modmglougpb\"},\"singleSignOnProperties\":{\"type\":\"Saml\",\"state\":\"Enable\",\"enterpriseAppId\":\"duqkt\",\"url\":\"spwgcuertumkdosv\",\"aadDomains\":[\"bmdg\",\"bjf\",\"dgmb\"]}}")
            .toObject(OrganizationProperties.class);
        Assertions.assertEquals("ozwyiftyhxhuro", model.marketplace().subscriptionId());
        Assertions.assertEquals("yxolniwp", model.marketplace().offerDetails().publisherId());
        Assertions.assertEquals("cukjf", model.marketplace().offerDetails().offerId());
        Assertions.assertEquals("giawx", model.marketplace().offerDetails().planId());
        Assertions.assertEquals("ryplwckbasyypn", model.marketplace().offerDetails().planName());
        Assertions.assertEquals("hsgcbacphejkot", model.marketplace().offerDetails().termUnit());
        Assertions.assertEquals("qgoulznd", model.marketplace().offerDetails().termId());
        Assertions.assertEquals("kwy", model.user().firstName());
        Assertions.assertEquals("gfgibm", model.user().lastName());
        Assertions.assertEquals("gakeqsr", model.user().emailAddress());
        Assertions.assertEquals("bzqqedqytbciq", model.user().upn());
        Assertions.assertEquals("uflmm", model.user().phoneNumber());
        Assertions.assertEquals("modmglougpb", model.partnerProperties().description());
        Assertions.assertEquals(SingleSignOnType.SAML, model.singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.ENABLE, model.singleSignOnProperties().state());
        Assertions.assertEquals("duqkt", model.singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("spwgcuertumkdosv", model.singleSignOnProperties().url());
        Assertions.assertEquals("bmdg", model.singleSignOnProperties().aadDomains().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OrganizationProperties model = new OrganizationProperties()
            .withMarketplace(new LiftrBaseMarketplaceDetails().withSubscriptionId("ozwyiftyhxhuro")
                .withOfferDetails(new LiftrBaseOfferDetails().withPublisherId("yxolniwp")
                    .withOfferId("cukjf")
                    .withPlanId("giawx")
                    .withPlanName("ryplwckbasyypn")
                    .withTermUnit("hsgcbacphejkot")
                    .withTermId("qgoulznd")))
            .withUser(new LiftrBaseUserDetails().withFirstName("kwy")
                .withLastName("gfgibm")
                .withEmailAddress("gakeqsr")
                .withUpn("bzqqedqytbciq")
                .withPhoneNumber("uflmm"))
            .withPartnerProperties(new PartnerProperties().withDescription("modmglougpb"))
            .withSingleSignOnProperties(new LiftrBaseSingleSignOnPropertiesV2().withType(SingleSignOnType.SAML)
                .withState(SingleSignOnStates.ENABLE)
                .withEnterpriseAppId("duqkt")
                .withUrl("spwgcuertumkdosv")
                .withAadDomains(Arrays.asList("bmdg", "bjf", "dgmb")));
        model = BinaryData.fromObject(model).toObject(OrganizationProperties.class);
        Assertions.assertEquals("ozwyiftyhxhuro", model.marketplace().subscriptionId());
        Assertions.assertEquals("yxolniwp", model.marketplace().offerDetails().publisherId());
        Assertions.assertEquals("cukjf", model.marketplace().offerDetails().offerId());
        Assertions.assertEquals("giawx", model.marketplace().offerDetails().planId());
        Assertions.assertEquals("ryplwckbasyypn", model.marketplace().offerDetails().planName());
        Assertions.assertEquals("hsgcbacphejkot", model.marketplace().offerDetails().termUnit());
        Assertions.assertEquals("qgoulznd", model.marketplace().offerDetails().termId());
        Assertions.assertEquals("kwy", model.user().firstName());
        Assertions.assertEquals("gfgibm", model.user().lastName());
        Assertions.assertEquals("gakeqsr", model.user().emailAddress());
        Assertions.assertEquals("bzqqedqytbciq", model.user().upn());
        Assertions.assertEquals("uflmm", model.user().phoneNumber());
        Assertions.assertEquals("modmglougpb", model.partnerProperties().description());
        Assertions.assertEquals(SingleSignOnType.SAML, model.singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.ENABLE, model.singleSignOnProperties().state());
        Assertions.assertEquals("duqkt", model.singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("spwgcuertumkdosv", model.singleSignOnProperties().url());
        Assertions.assertEquals("bmdg", model.singleSignOnProperties().aadDomains().get(0));
    }
}
