// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.liftrarize.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.liftrarize.LiftrarizeManager;
import com.azure.resourcemanager.liftrarize.models.LiftrBaseMarketplaceDetails;
import com.azure.resourcemanager.liftrarize.models.LiftrBaseOfferDetails;
import com.azure.resourcemanager.liftrarize.models.LiftrBaseSingleSignOnPropertiesV2;
import com.azure.resourcemanager.liftrarize.models.LiftrBaseUserDetails;
import com.azure.resourcemanager.liftrarize.models.ManagedServiceIdentity;
import com.azure.resourcemanager.liftrarize.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.liftrarize.models.OrganizationProperties;
import com.azure.resourcemanager.liftrarize.models.OrganizationResource;
import com.azure.resourcemanager.liftrarize.models.PartnerProperties;
import com.azure.resourcemanager.liftrarize.models.SingleSignOnStates;
import com.azure.resourcemanager.liftrarize.models.SingleSignOnType;
import com.azure.resourcemanager.liftrarize.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"marketplace\":{\"subscriptionId\":\"bebrjcxerfuwuttt\",\"subscriptionStatus\":\"Unsubscribed\",\"offerDetails\":{\"publisherId\":\"jrbirphxepcyv\",\"offerId\":\"hfnljkyq\",\"planId\":\"j\",\"planName\":\"ujqgidok\",\"termUnit\":\"ljyoxgvcltb\",\"termId\":\"ncghkje\"}},\"user\":{\"firstName\":\"zhbijhtxfv\",\"lastName\":\"bfs\",\"emailAddress\":\"nehmpvecx\",\"upn\":\"debfqkkrbmpukgri\",\"phoneNumber\":\"lzlfbxzpuz\"},\"provisioningState\":\"Succeeded\",\"partnerProperties\":{\"description\":\"pnq\"},\"singleSignOnProperties\":{\"type\":\"OpenId\",\"state\":\"Enable\",\"enterpriseAppId\":\"brpyydhi\",\"url\":\"uqqkpik\",\"aadDomains\":[\"gvtqagnbuynh\",\"jggmebfsiarbu\"]}},\"identity\":{\"principalId\":\"f761404c-37f8-4be1-aa13-74de4e918b68\",\"tenantId\":\"a4645c86-5ee2-4230-9b96-017f542a885a\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"mhjrunmpxttdbhr\":{\"principalId\":\"bd3bc838-b718-42c9-ba59-72222d1ede32\",\"clientId\":\"0dc84ef2-0f3b-411d-9b13-1e60dd1a4702\"},\"ankxmyskpbhenb\":{\"principalId\":\"439eac70-5941-469f-a605-8d6876894ca1\",\"clientId\":\"0a50034e-a82f-49d7-a90b-80f421b9ec14\"},\"xywnytnrsynlqidy\":{\"principalId\":\"c7983547-e423-4beb-8cfc-a29dcbe61194\",\"clientId\":\"f4f323bf-a58a-4a13-8301-07a5f16fc120\"},\"czfc\":{\"principalId\":\"d86d7789-ff59-4f09-a84a-fc7f60d92f14\",\"clientId\":\"afb93002-61af-4485-9ec3-3a515cc378a5\"}}},\"location\":\"aaxdbabphlwrq\",\"tags\":{\"yyazttbt\":\"tsthsucocm\",\"ckzywbiexzfeyue\":\"wrqpue\",\"zyoxaepdkzjan\":\"xibxujwbhqwalm\",\"hdwbavxbniwdjs\":\"ux\"},\"id\":\"zt\",\"name\":\"dbpgnxytxhp\",\"type\":\"xbzpfzab\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LiftrarizeManager manager = LiftrarizeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        OrganizationResource response = manager.organizations()
            .define("ffeii")
            .withRegion("oklyaxuconuq")
            .withExistingResourceGroup("vleggzfbuhfmvfax")
            .withTags(mapOf("rmjmwvvjektc", "kbeype", "frzpwvlqdqgb", "senhwlrs"))
            .withProperties(new OrganizationProperties()
                .withMarketplace(new LiftrBaseMarketplaceDetails().withSubscriptionId("vmezy")
                    .withOfferDetails(new LiftrBaseOfferDetails().withPublisherId("xmzsbbzogg")
                        .withOfferId("grxwbu")
                        .withPlanId("vjxxjnsp")
                        .withPlanName("ptkoenkoukn")
                        .withTermUnit("dwtiukbldngkp")
                        .withTermId("ipazyxoegukgjnpi")))
                .withUser(new LiftrBaseUserDetails().withFirstName("gygev")
                    .withLastName("ntypmrbpizcdrqj")
                    .withEmailAddress("pyd")
                    .withUpn("yhxdeoejzicwi")
                    .withPhoneNumber("jttgzf"))
                .withPartnerProperties(new PartnerProperties().withDescription("cbkhajdeyeamdph"))
                .withSingleSignOnProperties(new LiftrBaseSingleSignOnPropertiesV2().withType(SingleSignOnType.OPEN_ID)
                    .withState(SingleSignOnStates.ENABLE)
                    .withEnterpriseAppId("uxwgipwho")
                    .withUrl("wkgshwa")
                    .withAadDomains(Arrays.asList("xzbinjeputt", "rywn", "zoqftiyqzrnkcqvy", "lwh"))))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(mapOf("qnwvlrya", new UserAssignedIdentity(), "heun",
                    new UserAssignedIdentity(), "hgyxzkonoc", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("aaxdbabphlwrq", response.location());
        Assertions.assertEquals("tsthsucocm", response.tags().get("yyazttbt"));
        Assertions.assertEquals("bebrjcxerfuwuttt", response.properties().marketplace().subscriptionId());
        Assertions.assertEquals("jrbirphxepcyv", response.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("hfnljkyq", response.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("j", response.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("ujqgidok", response.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("ljyoxgvcltb", response.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("ncghkje", response.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("zhbijhtxfv", response.properties().user().firstName());
        Assertions.assertEquals("bfs", response.properties().user().lastName());
        Assertions.assertEquals("nehmpvecx", response.properties().user().emailAddress());
        Assertions.assertEquals("debfqkkrbmpukgri", response.properties().user().upn());
        Assertions.assertEquals("lzlfbxzpuz", response.properties().user().phoneNumber());
        Assertions.assertEquals("pnq", response.properties().partnerProperties().description());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID, response.properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.ENABLE, response.properties().singleSignOnProperties().state());
        Assertions.assertEquals("brpyydhi", response.properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("uqqkpik", response.properties().singleSignOnProperties().url());
        Assertions.assertEquals("gvtqagnbuynh", response.properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
