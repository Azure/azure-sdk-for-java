// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.liftrarize.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.UUID;

/**
 * The UserAssignedIdentities model.
 */
@Immutable
public final class UserAssignedIdentities extends UserAssignedIdentity {
    /*
     * The client ID of the assigned identity.
     */
    private UUID clientId;

    /*
     * The principal ID of the assigned identity.
     */
    private UUID principalId;

    /**
     * Creates an instance of UserAssignedIdentities class.
     */
    public UserAssignedIdentities() {
    }

    /**
     * Get the clientId property: The client ID of the assigned identity.
     * 
     * @return the clientId value.
     */
    @Override
    public UUID clientId() {
        return this.clientId;
    }

    /**
     * Get the principalId property: The principal ID of the assigned identity.
     * 
     * @return the principalId value.
     */
    @Override
    public UUID principalId() {
        return this.principalId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserAssignedIdentities from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserAssignedIdentities if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UserAssignedIdentities.
     */
    public static UserAssignedIdentities fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserAssignedIdentities deserializedUserAssignedIdentities = new UserAssignedIdentities();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("principalId".equals(fieldName)) {
                    deserializedUserAssignedIdentities.principalId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("clientId".equals(fieldName)) {
                    deserializedUserAssignedIdentities.clientId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserAssignedIdentities;
        });
    }
}
