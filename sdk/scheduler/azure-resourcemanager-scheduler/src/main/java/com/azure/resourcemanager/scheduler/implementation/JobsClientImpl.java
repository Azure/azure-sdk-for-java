// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scheduler.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.scheduler.fluent.JobsClient;
import com.azure.resourcemanager.scheduler.fluent.models.JobDefinitionInner;
import com.azure.resourcemanager.scheduler.fluent.models.JobHistoryDefinitionInner;
import com.azure.resourcemanager.scheduler.models.JobHistoryListResult;
import com.azure.resourcemanager.scheduler.models.JobListResult;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in JobsClient. */
public final class JobsClientImpl implements JobsClient {
    private final ClientLogger logger = new ClientLogger(JobsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final JobsService service;

    /** The service client containing this operation class. */
    private final SchedulerManagementClientImpl client;

    /**
     * Initializes an instance of JobsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    JobsClientImpl(SchedulerManagementClientImpl client) {
        this.service = RestProxy.create(JobsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SchedulerManagementClientJobs to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SchedulerManagementC")
    private interface JobsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler"
                + "/jobCollections/{jobCollectionName}/jobs/{jobName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<JobDefinitionInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("jobCollectionName") String jobCollectionName,
            @PathParam("jobName") String jobName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler"
                + "/jobCollections/{jobCollectionName}/jobs/{jobName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<JobDefinitionInner>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("jobCollectionName") String jobCollectionName,
            @PathParam("jobName") String jobName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") JobDefinitionInner job,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler"
                + "/jobCollections/{jobCollectionName}/jobs/{jobName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<JobDefinitionInner>> patch(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("jobCollectionName") String jobCollectionName,
            @PathParam("jobName") String jobName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") JobDefinitionInner job,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Accept: application/json;q=0.9", "Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler"
                + "/jobCollections/{jobCollectionName}/jobs/{jobName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("jobCollectionName") String jobCollectionName,
            @PathParam("jobName") String jobName,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Headers({"Accept: application/json;q=0.9", "Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler"
                + "/jobCollections/{jobCollectionName}/jobs/{jobName}/run")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> run(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("jobCollectionName") String jobCollectionName,
            @PathParam("jobName") String jobName,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler"
                + "/jobCollections/{jobCollectionName}/jobs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<JobListResult>> list(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("jobCollectionName") String jobCollectionName,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$top") Integer top,
            @QueryParam("$skip") Integer skip,
            @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler"
                + "/jobCollections/{jobCollectionName}/jobs/{jobName}/history")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<JobHistoryListResult>> listJobHistory(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("jobCollectionName") String jobCollectionName,
            @PathParam("jobName") String jobName,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$top") Integer top,
            @QueryParam("$skip") Integer skip,
            @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<JobListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<JobHistoryListResult>> listJobHistoryNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<JobDefinitionInner>> getWithResponseAsync(
        String resourceGroupName, String jobCollectionName, String jobName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobCollectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            jobCollectionName,
                            jobName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<JobDefinitionInner>> getWithResponseAsync(
        String resourceGroupName, String jobCollectionName, String jobName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobCollectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                jobCollectionName,
                jobName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<JobDefinitionInner> getAsync(String resourceGroupName, String jobCollectionName, String jobName) {
        return getWithResponseAsync(resourceGroupName, jobCollectionName, jobName)
            .flatMap(
                (Response<JobDefinitionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JobDefinitionInner get(String resourceGroupName, String jobCollectionName, String jobName) {
        return getAsync(resourceGroupName, jobCollectionName, jobName).block();
    }

    /**
     * Gets a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<JobDefinitionInner> getWithResponse(
        String resourceGroupName, String jobCollectionName, String jobName, Context context) {
        return getWithResponseAsync(resourceGroupName, jobCollectionName, jobName, context).block();
    }

    /**
     * Provisions a new job or updates an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param job The job definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<JobDefinitionInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String jobCollectionName, String jobName, JobDefinitionInner job) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobCollectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (job == null) {
            return Mono.error(new IllegalArgumentException("Parameter job is required and cannot be null."));
        } else {
            job.validate();
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            jobCollectionName,
                            jobName,
                            this.client.getApiVersion(),
                            job,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Provisions a new job or updates an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param job The job definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<JobDefinitionInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String jobCollectionName, String jobName, JobDefinitionInner job, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobCollectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (job == null) {
            return Mono.error(new IllegalArgumentException("Parameter job is required and cannot be null."));
        } else {
            job.validate();
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                jobCollectionName,
                jobName,
                this.client.getApiVersion(),
                job,
                accept,
                context);
    }

    /**
     * Provisions a new job or updates an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param job The job definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<JobDefinitionInner> createOrUpdateAsync(
        String resourceGroupName, String jobCollectionName, String jobName, JobDefinitionInner job) {
        return createOrUpdateWithResponseAsync(resourceGroupName, jobCollectionName, jobName, job)
            .flatMap(
                (Response<JobDefinitionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Provisions a new job or updates an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param job The job definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JobDefinitionInner createOrUpdate(
        String resourceGroupName, String jobCollectionName, String jobName, JobDefinitionInner job) {
        return createOrUpdateAsync(resourceGroupName, jobCollectionName, jobName, job).block();
    }

    /**
     * Provisions a new job or updates an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param job The job definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<JobDefinitionInner> createOrUpdateWithResponse(
        String resourceGroupName, String jobCollectionName, String jobName, JobDefinitionInner job, Context context) {
        return createOrUpdateWithResponseAsync(resourceGroupName, jobCollectionName, jobName, job, context).block();
    }

    /**
     * Patches an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param job The job definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<JobDefinitionInner>> patchWithResponseAsync(
        String resourceGroupName, String jobCollectionName, String jobName, JobDefinitionInner job) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobCollectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (job == null) {
            return Mono.error(new IllegalArgumentException("Parameter job is required and cannot be null."));
        } else {
            job.validate();
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .patch(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            jobCollectionName,
                            jobName,
                            this.client.getApiVersion(),
                            job,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Patches an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param job The job definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<JobDefinitionInner>> patchWithResponseAsync(
        String resourceGroupName, String jobCollectionName, String jobName, JobDefinitionInner job, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobCollectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        if (job == null) {
            return Mono.error(new IllegalArgumentException("Parameter job is required and cannot be null."));
        } else {
            job.validate();
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .patch(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                jobCollectionName,
                jobName,
                this.client.getApiVersion(),
                job,
                accept,
                context);
    }

    /**
     * Patches an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param job The job definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<JobDefinitionInner> patchAsync(
        String resourceGroupName, String jobCollectionName, String jobName, JobDefinitionInner job) {
        return patchWithResponseAsync(resourceGroupName, jobCollectionName, jobName, job)
            .flatMap(
                (Response<JobDefinitionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Patches an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param job The job definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JobDefinitionInner patch(
        String resourceGroupName, String jobCollectionName, String jobName, JobDefinitionInner job) {
        return patchAsync(resourceGroupName, jobCollectionName, jobName, job).block();
    }

    /**
     * Patches an existing job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param job The job definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<JobDefinitionInner> patchWithResponse(
        String resourceGroupName, String jobCollectionName, String jobName, JobDefinitionInner job, Context context) {
        return patchWithResponseAsync(resourceGroupName, jobCollectionName, jobName, job, context).block();
    }

    /**
     * Deletes a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String jobCollectionName, String jobName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobCollectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            jobCollectionName,
                            jobName,
                            this.client.getApiVersion(),
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String jobCollectionName, String jobName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobCollectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                jobCollectionName,
                jobName,
                this.client.getApiVersion(),
                context);
    }

    /**
     * Deletes a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String jobCollectionName, String jobName) {
        return deleteWithResponseAsync(resourceGroupName, jobCollectionName, jobName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String jobCollectionName, String jobName) {
        deleteAsync(resourceGroupName, jobCollectionName, jobName).block();
    }

    /**
     * Deletes a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
        String resourceGroupName, String jobCollectionName, String jobName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, jobCollectionName, jobName, context).block();
    }

    /**
     * Runs a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> runWithResponseAsync(
        String resourceGroupName, String jobCollectionName, String jobName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobCollectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        return FluxUtil
            .withContext(
                context ->
                    service
                        .run(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            jobCollectionName,
                            jobName,
                            this.client.getApiVersion(),
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Runs a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> runWithResponseAsync(
        String resourceGroupName, String jobCollectionName, String jobName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobCollectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        context = this.client.mergeContext(context);
        return service
            .run(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                jobCollectionName,
                jobName,
                this.client.getApiVersion(),
                context);
    }

    /**
     * Runs a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> runAsync(String resourceGroupName, String jobCollectionName, String jobName) {
        return runWithResponseAsync(resourceGroupName, jobCollectionName, jobName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Runs a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void run(String resourceGroupName, String jobCollectionName, String jobName) {
        runAsync(resourceGroupName, jobCollectionName, jobName).block();
    }

    /**
     * Runs a job.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> runWithResponse(
        String resourceGroupName, String jobCollectionName, String jobName, Context context) {
        return runWithResponseAsync(resourceGroupName, jobCollectionName, jobName, context).block();
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param top The number of jobs to request, in the of range of [1..100].
     * @param skip The (0-based) index of the job history list from which to begin requesting entries.
     * @param filter The filter to apply on the job state.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobDefinitionInner>> listSinglePageAsync(
        String resourceGroupName, String jobCollectionName, Integer top, Integer skip, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobCollectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            jobCollectionName,
                            this.client.getApiVersion(),
                            top,
                            skip,
                            filter,
                            accept,
                            context))
            .<PagedResponse<JobDefinitionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param top The number of jobs to request, in the of range of [1..100].
     * @param skip The (0-based) index of the job history list from which to begin requesting entries.
     * @param filter The filter to apply on the job state.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobDefinitionInner>> listSinglePageAsync(
        String resourceGroupName, String jobCollectionName, Integer top, Integer skip, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobCollectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                jobCollectionName,
                this.client.getApiVersion(),
                top,
                skip,
                filter,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param top The number of jobs to request, in the of range of [1..100].
     * @param skip The (0-based) index of the job history list from which to begin requesting entries.
     * @param filter The filter to apply on the job state.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JobDefinitionInner> listAsync(
        String resourceGroupName, String jobCollectionName, Integer top, Integer skip, String filter) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, jobCollectionName, top, skip, filter),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JobDefinitionInner> listAsync(String resourceGroupName, String jobCollectionName) {
        final Integer top = null;
        final Integer skip = null;
        final String filter = null;
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, jobCollectionName, top, skip, filter),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param top The number of jobs to request, in the of range of [1..100].
     * @param skip The (0-based) index of the job history list from which to begin requesting entries.
     * @param filter The filter to apply on the job state.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JobDefinitionInner> listAsync(
        String resourceGroupName, String jobCollectionName, Integer top, Integer skip, String filter, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, jobCollectionName, top, skip, filter, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<JobDefinitionInner> list(String resourceGroupName, String jobCollectionName) {
        final Integer top = null;
        final Integer skip = null;
        final String filter = null;
        return new PagedIterable<>(listAsync(resourceGroupName, jobCollectionName, top, skip, filter));
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param top The number of jobs to request, in the of range of [1..100].
     * @param skip The (0-based) index of the job history list from which to begin requesting entries.
     * @param filter The filter to apply on the job state.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<JobDefinitionInner> list(
        String resourceGroupName, String jobCollectionName, Integer top, Integer skip, String filter, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, jobCollectionName, top, skip, filter, context));
    }

    /**
     * Lists job history.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param top the number of job history to request, in the of range of [1..100].
     * @param skip The (0-based) index of the job history list from which to begin requesting entries.
     * @param filter The filter to apply on the job state.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobHistoryDefinitionInner>> listJobHistorySinglePageAsync(
        String resourceGroupName, String jobCollectionName, String jobName, Integer top, Integer skip, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobCollectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listJobHistory(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            jobCollectionName,
                            jobName,
                            this.client.getApiVersion(),
                            top,
                            skip,
                            filter,
                            accept,
                            context))
            .<PagedResponse<JobHistoryDefinitionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists job history.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param top the number of job history to request, in the of range of [1..100].
     * @param skip The (0-based) index of the job history list from which to begin requesting entries.
     * @param filter The filter to apply on the job state.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobHistoryDefinitionInner>> listJobHistorySinglePageAsync(
        String resourceGroupName,
        String jobCollectionName,
        String jobName,
        Integer top,
        Integer skip,
        String filter,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (jobCollectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter jobCollectionName is required and cannot be null."));
        }
        if (jobName == null) {
            return Mono.error(new IllegalArgumentException("Parameter jobName is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .listJobHistory(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                jobCollectionName,
                jobName,
                this.client.getApiVersion(),
                top,
                skip,
                filter,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists job history.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param top the number of job history to request, in the of range of [1..100].
     * @param skip The (0-based) index of the job history list from which to begin requesting entries.
     * @param filter The filter to apply on the job state.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JobHistoryDefinitionInner> listJobHistoryAsync(
        String resourceGroupName, String jobCollectionName, String jobName, Integer top, Integer skip, String filter) {
        return new PagedFlux<>(
            () -> listJobHistorySinglePageAsync(resourceGroupName, jobCollectionName, jobName, top, skip, filter),
            nextLink -> listJobHistoryNextSinglePageAsync(nextLink));
    }

    /**
     * Lists job history.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JobHistoryDefinitionInner> listJobHistoryAsync(
        String resourceGroupName, String jobCollectionName, String jobName) {
        final Integer top = null;
        final Integer skip = null;
        final String filter = null;
        return new PagedFlux<>(
            () -> listJobHistorySinglePageAsync(resourceGroupName, jobCollectionName, jobName, top, skip, filter),
            nextLink -> listJobHistoryNextSinglePageAsync(nextLink));
    }

    /**
     * Lists job history.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param top the number of job history to request, in the of range of [1..100].
     * @param skip The (0-based) index of the job history list from which to begin requesting entries.
     * @param filter The filter to apply on the job state.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<JobHistoryDefinitionInner> listJobHistoryAsync(
        String resourceGroupName,
        String jobCollectionName,
        String jobName,
        Integer top,
        Integer skip,
        String filter,
        Context context) {
        return new PagedFlux<>(
            () ->
                listJobHistorySinglePageAsync(
                    resourceGroupName, jobCollectionName, jobName, top, skip, filter, context),
            nextLink -> listJobHistoryNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists job history.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<JobHistoryDefinitionInner> listJobHistory(
        String resourceGroupName, String jobCollectionName, String jobName) {
        final Integer top = null;
        final Integer skip = null;
        final String filter = null;
        return new PagedIterable<>(
            listJobHistoryAsync(resourceGroupName, jobCollectionName, jobName, top, skip, filter));
    }

    /**
     * Lists job history.
     *
     * @param resourceGroupName The resource group name.
     * @param jobCollectionName The job collection name.
     * @param jobName The job name.
     * @param top the number of job history to request, in the of range of [1..100].
     * @param skip The (0-based) index of the job history list from which to begin requesting entries.
     * @param filter The filter to apply on the job state.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<JobHistoryDefinitionInner> listJobHistory(
        String resourceGroupName,
        String jobCollectionName,
        String jobName,
        Integer top,
        Integer skip,
        String filter,
        Context context) {
        return new PagedIterable<>(
            listJobHistoryAsync(resourceGroupName, jobCollectionName, jobName, top, skip, filter, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobDefinitionInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<JobDefinitionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobDefinitionInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobHistoryDefinitionInner>> listJobHistoryNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        return FluxUtil
            .withContext(context -> service.listJobHistoryNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<JobHistoryDefinitionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<JobHistoryDefinitionInner>> listJobHistoryNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json, text/json";
        context = this.client.mergeContext(context);
        return service
            .listJobHistoryNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
