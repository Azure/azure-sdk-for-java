// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scheduler.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.scheduler.models.JobCollectionProperties;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** The JobCollectionDefinition model. */
@Fluent
public final class JobCollectionDefinitionInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(JobCollectionDefinitionInner.class);

    /*
     * Gets the job collection resource identifier.
     */
    @JsonProperty(value = "id", access = JsonProperty.Access.WRITE_ONLY)
    private String id;

    /*
     * Gets the job collection resource type.
     */
    @JsonProperty(value = "type", access = JsonProperty.Access.WRITE_ONLY)
    private String type;

    /*
     * Gets or sets the job collection resource name.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Gets or sets the storage account location.
     */
    @JsonProperty(value = "location")
    private String location;

    /*
     * Gets or sets the tags.
     */
    @JsonProperty(value = "tags")
    private Map<String, String> tags;

    /*
     * Gets or sets the job collection properties.
     */
    @JsonProperty(value = "properties")
    private JobCollectionProperties properties;

    /**
     * Get the id property: Gets the job collection resource identifier.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the type property: Gets the job collection resource type.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: Gets or sets the job collection resource name.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Gets or sets the job collection resource name.
     *
     * @param name the name value to set.
     * @return the JobCollectionDefinitionInner object itself.
     */
    public JobCollectionDefinitionInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the location property: Gets or sets the storage account location.
     *
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: Gets or sets the storage account location.
     *
     * @param location the location value to set.
     * @return the JobCollectionDefinitionInner object itself.
     */
    public JobCollectionDefinitionInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the tags property: Gets or sets the tags.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Gets or sets the tags.
     *
     * @param tags the tags value to set.
     * @return the JobCollectionDefinitionInner object itself.
     */
    public JobCollectionDefinitionInner withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the properties property: Gets or sets the job collection properties.
     *
     * @return the properties value.
     */
    public JobCollectionProperties properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Gets or sets the job collection properties.
     *
     * @param properties the properties value to set.
     * @return the JobCollectionDefinitionInner object itself.
     */
    public JobCollectionDefinitionInner withProperties(JobCollectionProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (properties() != null) {
            properties().validate();
        }
    }
}
