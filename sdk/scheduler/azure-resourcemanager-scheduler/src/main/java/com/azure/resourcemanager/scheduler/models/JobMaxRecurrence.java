// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scheduler.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The JobMaxRecurrence model. */
@Fluent
public final class JobMaxRecurrence {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(JobMaxRecurrence.class);

    /*
     * Gets or sets the frequency of recurrence (second, minute, hour, day,
     * week, month).
     */
    @JsonProperty(value = "frequency")
    private RecurrenceFrequency frequency;

    /*
     * Gets or sets the interval between retries.
     */
    @JsonProperty(value = "interval")
    private Integer interval;

    /**
     * Get the frequency property: Gets or sets the frequency of recurrence (second, minute, hour, day, week, month).
     *
     * @return the frequency value.
     */
    public RecurrenceFrequency frequency() {
        return this.frequency;
    }

    /**
     * Set the frequency property: Gets or sets the frequency of recurrence (second, minute, hour, day, week, month).
     *
     * @param frequency the frequency value to set.
     * @return the JobMaxRecurrence object itself.
     */
    public JobMaxRecurrence withFrequency(RecurrenceFrequency frequency) {
        this.frequency = frequency;
        return this;
    }

    /**
     * Get the interval property: Gets or sets the interval between retries.
     *
     * @return the interval value.
     */
    public Integer interval() {
        return this.interval;
    }

    /**
     * Set the interval property: Gets or sets the interval between retries.
     *
     * @param interval the interval value to set.
     * @return the JobMaxRecurrence object itself.
     */
    public JobMaxRecurrence withInterval(Integer interval) {
        this.interval = interval;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
