// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scheduler.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;

/** The ClientCertAuthentication model. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("ClientCertificate")
@Fluent
public final class ClientCertAuthentication extends HttpAuthentication {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ClientCertAuthentication.class);

    /*
     * Gets or sets the certificate password, return value will always be
     * empty.
     */
    @JsonProperty(value = "password")
    private String password;

    /*
     * Gets or sets the pfx certificate. Accepts certification in base64
     * encoding, return value will always be empty.
     */
    @JsonProperty(value = "pfx")
    private String pfx;

    /*
     * Gets or sets the certificate thumbprint.
     */
    @JsonProperty(value = "certificateThumbprint")
    private String certificateThumbprint;

    /*
     * Gets or sets the certificate expiration date.
     */
    @JsonProperty(value = "certificateExpirationDate")
    private OffsetDateTime certificateExpirationDate;

    /*
     * Gets or sets the certificate subject name.
     */
    @JsonProperty(value = "certificateSubjectName")
    private String certificateSubjectName;

    /**
     * Get the password property: Gets or sets the certificate password, return value will always be empty.
     *
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: Gets or sets the certificate password, return value will always be empty.
     *
     * @param password the password value to set.
     * @return the ClientCertAuthentication object itself.
     */
    public ClientCertAuthentication withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Get the pfx property: Gets or sets the pfx certificate. Accepts certification in base64 encoding, return value
     * will always be empty.
     *
     * @return the pfx value.
     */
    public String pfx() {
        return this.pfx;
    }

    /**
     * Set the pfx property: Gets or sets the pfx certificate. Accepts certification in base64 encoding, return value
     * will always be empty.
     *
     * @param pfx the pfx value to set.
     * @return the ClientCertAuthentication object itself.
     */
    public ClientCertAuthentication withPfx(String pfx) {
        this.pfx = pfx;
        return this;
    }

    /**
     * Get the certificateThumbprint property: Gets or sets the certificate thumbprint.
     *
     * @return the certificateThumbprint value.
     */
    public String certificateThumbprint() {
        return this.certificateThumbprint;
    }

    /**
     * Set the certificateThumbprint property: Gets or sets the certificate thumbprint.
     *
     * @param certificateThumbprint the certificateThumbprint value to set.
     * @return the ClientCertAuthentication object itself.
     */
    public ClientCertAuthentication withCertificateThumbprint(String certificateThumbprint) {
        this.certificateThumbprint = certificateThumbprint;
        return this;
    }

    /**
     * Get the certificateExpirationDate property: Gets or sets the certificate expiration date.
     *
     * @return the certificateExpirationDate value.
     */
    public OffsetDateTime certificateExpirationDate() {
        return this.certificateExpirationDate;
    }

    /**
     * Set the certificateExpirationDate property: Gets or sets the certificate expiration date.
     *
     * @param certificateExpirationDate the certificateExpirationDate value to set.
     * @return the ClientCertAuthentication object itself.
     */
    public ClientCertAuthentication withCertificateExpirationDate(OffsetDateTime certificateExpirationDate) {
        this.certificateExpirationDate = certificateExpirationDate;
        return this;
    }

    /**
     * Get the certificateSubjectName property: Gets or sets the certificate subject name.
     *
     * @return the certificateSubjectName value.
     */
    public String certificateSubjectName() {
        return this.certificateSubjectName;
    }

    /**
     * Set the certificateSubjectName property: Gets or sets the certificate subject name.
     *
     * @param certificateSubjectName the certificateSubjectName value to set.
     * @return the ClientCertAuthentication object itself.
     */
    public ClientCertAuthentication withCertificateSubjectName(String certificateSubjectName) {
        this.certificateSubjectName = certificateSubjectName;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
