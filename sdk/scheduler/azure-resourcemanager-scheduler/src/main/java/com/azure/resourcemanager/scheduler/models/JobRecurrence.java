// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scheduler.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** The JobRecurrence model. */
@Fluent
public final class JobRecurrence {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(JobRecurrence.class);

    /*
     * Gets or sets the frequency of recurrence (second, minute, hour, day,
     * week, month).
     */
    @JsonProperty(value = "frequency")
    private RecurrenceFrequency frequency;

    /*
     * Gets or sets the interval between retries.
     */
    @JsonProperty(value = "interval")
    private Integer interval;

    /*
     * Gets or sets the maximum number of times that the job should run.
     */
    @JsonProperty(value = "count")
    private Integer count;

    /*
     * Gets or sets the time at which the job will complete.
     */
    @JsonProperty(value = "endTime")
    private OffsetDateTime endTime;

    /*
     * The schedule property.
     */
    @JsonProperty(value = "schedule")
    private JobRecurrenceSchedule schedule;

    /**
     * Get the frequency property: Gets or sets the frequency of recurrence (second, minute, hour, day, week, month).
     *
     * @return the frequency value.
     */
    public RecurrenceFrequency frequency() {
        return this.frequency;
    }

    /**
     * Set the frequency property: Gets or sets the frequency of recurrence (second, minute, hour, day, week, month).
     *
     * @param frequency the frequency value to set.
     * @return the JobRecurrence object itself.
     */
    public JobRecurrence withFrequency(RecurrenceFrequency frequency) {
        this.frequency = frequency;
        return this;
    }

    /**
     * Get the interval property: Gets or sets the interval between retries.
     *
     * @return the interval value.
     */
    public Integer interval() {
        return this.interval;
    }

    /**
     * Set the interval property: Gets or sets the interval between retries.
     *
     * @param interval the interval value to set.
     * @return the JobRecurrence object itself.
     */
    public JobRecurrence withInterval(Integer interval) {
        this.interval = interval;
        return this;
    }

    /**
     * Get the count property: Gets or sets the maximum number of times that the job should run.
     *
     * @return the count value.
     */
    public Integer count() {
        return this.count;
    }

    /**
     * Set the count property: Gets or sets the maximum number of times that the job should run.
     *
     * @param count the count value to set.
     * @return the JobRecurrence object itself.
     */
    public JobRecurrence withCount(Integer count) {
        this.count = count;
        return this;
    }

    /**
     * Get the endTime property: Gets or sets the time at which the job will complete.
     *
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: Gets or sets the time at which the job will complete.
     *
     * @param endTime the endTime value to set.
     * @return the JobRecurrence object itself.
     */
    public JobRecurrence withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the schedule property: The schedule property.
     *
     * @return the schedule value.
     */
    public JobRecurrenceSchedule schedule() {
        return this.schedule;
    }

    /**
     * Set the schedule property: The schedule property.
     *
     * @param schedule the schedule value to set.
     * @return the JobRecurrence object itself.
     */
    public JobRecurrence withSchedule(JobRecurrenceSchedule schedule) {
        this.schedule = schedule;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (schedule() != null) {
            schedule().validate();
        }
    }
}
