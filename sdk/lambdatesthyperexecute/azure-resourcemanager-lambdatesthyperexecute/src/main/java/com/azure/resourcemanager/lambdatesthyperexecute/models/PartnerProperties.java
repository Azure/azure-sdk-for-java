// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.lambdatesthyperexecute.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Partner's specific Properties.
 */
@Fluent
public final class PartnerProperties implements JsonSerializable<PartnerProperties> {
    /*
     * The number of licenses subscribed
     */
    private int licensesSubscribed;

    /**
     * Creates an instance of PartnerProperties class.
     */
    public PartnerProperties() {
    }

    /**
     * Get the licensesSubscribed property: The number of licenses subscribed.
     * 
     * @return the licensesSubscribed value.
     */
    public int licensesSubscribed() {
        return this.licensesSubscribed;
    }

    /**
     * Set the licensesSubscribed property: The number of licenses subscribed.
     * 
     * @param licensesSubscribed the licensesSubscribed value to set.
     * @return the PartnerProperties object itself.
     */
    public PartnerProperties withLicensesSubscribed(int licensesSubscribed) {
        this.licensesSubscribed = licensesSubscribed;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("licensesSubscribed", this.licensesSubscribed);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PartnerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PartnerProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PartnerProperties.
     */
    public static PartnerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PartnerProperties deserializedPartnerProperties = new PartnerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("licensesSubscribed".equals(fieldName)) {
                    deserializedPartnerProperties.licensesSubscribed = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPartnerProperties;
        });
    }
}
