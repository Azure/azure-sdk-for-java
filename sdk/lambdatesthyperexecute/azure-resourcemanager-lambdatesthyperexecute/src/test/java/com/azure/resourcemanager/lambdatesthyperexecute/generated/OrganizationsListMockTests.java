// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.lambdatesthyperexecute.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.lambdatesthyperexecute.LambdaTestHyperExecuteManager;
import com.azure.resourcemanager.lambdatesthyperexecute.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.lambdatesthyperexecute.models.OrganizationResource;
import com.azure.resourcemanager.lambdatesthyperexecute.models.SingleSignOnStates;
import com.azure.resourcemanager.lambdatesthyperexecute.models.SingleSignOnType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"marketplace\":{\"subscriptionId\":\"ydnfyhxdeoejz\",\"subscriptionStatus\":\"PendingFulfillmentStart\",\"offerDetails\":{\"publisherId\":\"ifsjttgzfbishcb\",\"offerId\":\"hajdeyeamdpha\",\"planId\":\"alpbuxwgipwhon\",\"planName\":\"kgshwa\",\"termUnit\":\"ixzbinjeputtmryw\",\"termId\":\"zoqftiyqzrnkcqvy\"}},\"user\":{\"firstName\":\"whzlsicohoq\",\"lastName\":\"wvl\",\"emailAddress\":\"avwhheunm\",\"upn\":\"hgyxzkonoc\",\"phoneNumber\":\"oklyaxuconuq\"},\"provisioningState\":\"Failed\",\"partnerProperties\":{\"licensesSubscribed\":1399923471},\"singleSignOnProperties\":{\"type\":\"Saml\",\"state\":\"Disable\",\"enterpriseAppId\":\"wrmjmwvvjektc\",\"url\":\"enhwlrs\",\"aadDomains\":[\"zpwv\",\"qdqgbi\",\"ylihkaetckt\",\"fcivfsnkym\"]}},\"identity\":{\"principalId\":\"qhjfbebr\",\"tenantId\":\"xerf\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"vuujq\":{\"clientId\":\"txfvjrbirph\",\"principalId\":\"pcyvahfnljkyqx\"},\"gsncghkjeszz\":{\"clientId\":\"dokgjl\",\"principalId\":\"oxgvclt\"},\"mxnehmp\":{\"clientId\":\"ijhtxf\",\"principalId\":\"xbf\"}}},\"location\":\"cxgod\",\"tags\":{\"pukgriwflzlfb\":\"qkkrb\",\"qzahmgkbrp\":\"zpuzycisp\"},\"id\":\"y\",\"name\":\"hibnuqqkpika\",\"type\":\"rgvtqag\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LambdaTestHyperExecuteManager manager = LambdaTestHyperExecuteManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<OrganizationResource> response = manager.organizations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("cxgod", response.iterator().next().location());
        Assertions.assertEquals("qkkrb", response.iterator().next().tags().get("pukgriwflzlfb"));
        Assertions.assertEquals("ydnfyhxdeoejz",
            response.iterator().next().properties().marketplace().subscriptionId());
        Assertions.assertEquals("ifsjttgzfbishcb",
            response.iterator().next().properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("hajdeyeamdpha",
            response.iterator().next().properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("alpbuxwgipwhon",
            response.iterator().next().properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("kgshwa",
            response.iterator().next().properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("ixzbinjeputtmryw",
            response.iterator().next().properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("zoqftiyqzrnkcqvy",
            response.iterator().next().properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("whzlsicohoq", response.iterator().next().properties().user().firstName());
        Assertions.assertEquals("wvl", response.iterator().next().properties().user().lastName());
        Assertions.assertEquals("avwhheunm", response.iterator().next().properties().user().emailAddress());
        Assertions.assertEquals("hgyxzkonoc", response.iterator().next().properties().user().upn());
        Assertions.assertEquals("oklyaxuconuq", response.iterator().next().properties().user().phoneNumber());
        Assertions.assertEquals(1399923471,
            response.iterator().next().properties().partnerProperties().licensesSubscribed());
        Assertions.assertEquals(SingleSignOnType.SAML,
            response.iterator().next().properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.DISABLE,
            response.iterator().next().properties().singleSignOnProperties().state());
        Assertions.assertEquals("wrmjmwvvjektc",
            response.iterator().next().properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("enhwlrs", response.iterator().next().properties().singleSignOnProperties().url());
        Assertions.assertEquals("zpwv",
            response.iterator().next().properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
    }
}
