// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.lambdatesthyperexecute.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.lambdatesthyperexecute.LambdaTestHyperExecuteManager;
import com.azure.resourcemanager.lambdatesthyperexecute.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.lambdatesthyperexecute.models.OrganizationResource;
import com.azure.resourcemanager.lambdatesthyperexecute.models.SingleSignOnStates;
import com.azure.resourcemanager.lambdatesthyperexecute.models.SingleSignOnType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"marketplace\":{\"subscriptionId\":\"reximoryocfs\",\"subscriptionStatus\":\"PendingFulfillmentStart\",\"offerDetails\":{\"publisherId\":\"ymddys\",\"offerId\":\"kiiuxhqyudxor\",\"planId\":\"qn\",\"planName\":\"oczvy\",\"termUnit\":\"qrvkdv\",\"termId\":\"llr\"}},\"user\":{\"firstName\":\"vdfwatkpn\",\"lastName\":\"lexxbczwtru\",\"emailAddress\":\"qzbqjvsov\",\"upn\":\"okacspk\",\"phoneNumber\":\"hzdobpxjmflbvvnc\"},\"provisioningState\":\"Canceled\",\"partnerProperties\":{\"licensesSubscribed\":812677705},\"singleSignOnProperties\":{\"type\":\"Saml\",\"state\":\"Initial\",\"enterpriseAppId\":\"juqk\",\"url\":\"sa\",\"aadDomains\":[\"ku\",\"foskghsauuimj\",\"vxieduugidyj\",\"rfbyaosvexcso\"]}},\"identity\":{\"principalId\":\"lhocohslkev\",\"tenantId\":\"ggzfbu\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"m\":{\"clientId\":\"axkffei\",\"principalId\":\"hl\"},\"burvjxxjnspy\":{\"clientId\":\"yvshxmz\",\"principalId\":\"bzoggigrx\"},\"bldngkpoc\":{\"clientId\":\"tko\",\"principalId\":\"kouknvudwtiu\"}}},\"location\":\"azyxoegukg\",\"tags\":{\"yp\":\"iucgygevqzn\"},\"id\":\"rbpizc\",\"name\":\"r\",\"type\":\"j\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LambdaTestHyperExecuteManager manager = LambdaTestHyperExecuteManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<OrganizationResource> response
            = manager.organizations().listByResourceGroup("twhrdxwzywqsm", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("azyxoegukg", response.iterator().next().location());
        Assertions.assertEquals("iucgygevqzn", response.iterator().next().tags().get("yp"));
        Assertions.assertEquals("reximoryocfs", response.iterator().next().properties().marketplace().subscriptionId());
        Assertions.assertEquals("ymddys",
            response.iterator().next().properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("kiiuxhqyudxor",
            response.iterator().next().properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("qn", response.iterator().next().properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("oczvy",
            response.iterator().next().properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("qrvkdv",
            response.iterator().next().properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("llr", response.iterator().next().properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("vdfwatkpn", response.iterator().next().properties().user().firstName());
        Assertions.assertEquals("lexxbczwtru", response.iterator().next().properties().user().lastName());
        Assertions.assertEquals("qzbqjvsov", response.iterator().next().properties().user().emailAddress());
        Assertions.assertEquals("okacspk", response.iterator().next().properties().user().upn());
        Assertions.assertEquals("hzdobpxjmflbvvnc", response.iterator().next().properties().user().phoneNumber());
        Assertions.assertEquals(812677705,
            response.iterator().next().properties().partnerProperties().licensesSubscribed());
        Assertions.assertEquals(SingleSignOnType.SAML,
            response.iterator().next().properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.INITIAL,
            response.iterator().next().properties().singleSignOnProperties().state());
        Assertions.assertEquals("juqk",
            response.iterator().next().properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("sa", response.iterator().next().properties().singleSignOnProperties().url());
        Assertions.assertEquals("ku",
            response.iterator().next().properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            response.iterator().next().identity().type());
    }
}
