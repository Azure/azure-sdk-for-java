// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.lambdatesthyperexecute.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.lambdatesthyperexecute.LambdaTestHyperExecuteManager;
import com.azure.resourcemanager.lambdatesthyperexecute.models.ManagedServiceIdentity;
import com.azure.resourcemanager.lambdatesthyperexecute.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.lambdatesthyperexecute.models.MarketplaceDetails;
import com.azure.resourcemanager.lambdatesthyperexecute.models.OfferDetails;
import com.azure.resourcemanager.lambdatesthyperexecute.models.OrganizationProperties;
import com.azure.resourcemanager.lambdatesthyperexecute.models.OrganizationResource;
import com.azure.resourcemanager.lambdatesthyperexecute.models.PartnerProperties;
import com.azure.resourcemanager.lambdatesthyperexecute.models.SingleSignOnPropertiesV2;
import com.azure.resourcemanager.lambdatesthyperexecute.models.SingleSignOnStates;
import com.azure.resourcemanager.lambdatesthyperexecute.models.SingleSignOnType;
import com.azure.resourcemanager.lambdatesthyperexecute.models.UserAssignedIdentity;
import com.azure.resourcemanager.lambdatesthyperexecute.models.UserDetails;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"marketplace\":{\"subscriptionId\":\"htldwk\",\"subscriptionStatus\":\"Unsubscribed\",\"offerDetails\":{\"publisherId\":\"uutkncw\",\"offerId\":\"cwsvlxotog\",\"planId\":\"wrupqsxvnmicykvc\",\"planName\":\"vei\",\"termUnit\":\"vnotyfjfcnj\",\"termId\":\"cn\"}},\"user\":{\"firstName\":\"hbttkphyw\",\"lastName\":\"vjtoqnermclfp\",\"emailAddress\":\"hoxus\",\"upn\":\"pabgyeps\",\"phoneNumber\":\"tazqugxywpmueefj\"},\"provisioningState\":\"Succeeded\",\"partnerProperties\":{\"licensesSubscribed\":224913714},\"singleSignOnProperties\":{\"type\":\"Saml\",\"state\":\"Disable\",\"enterpriseAppId\":\"dsuyonobgla\",\"url\":\"qxtccmgyudx\",\"aadDomains\":[\"moyrxvwfudwpz\",\"txhdzh\"]}},\"identity\":{\"principalId\":\"jbhckfrlhr\",\"tenantId\":\"bkyvp\",\"type\":\"None\",\"userAssignedIdentities\":{\"kuwbcrnwb\":{\"clientId\":\"z\",\"principalId\":\"zka\"}}},\"location\":\"hhseyv\",\"tags\":{\"hspkdeemao\":\"rts\",\"gkvtmelmqkrhah\":\"mx\",\"duala\":\"ljuahaquhcdh\",\"rcrgvx\":\"xqpvfadmw\"},\"id\":\"vgomz\",\"name\":\"fmisg\",\"type\":\"bnbbeldawkz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LambdaTestHyperExecuteManager manager = LambdaTestHyperExecuteManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        OrganizationResource response = manager.organizations()
            .define("bfs")
            .withRegion("lbbovplw")
            .withExistingResourceGroup("buynhijggm")
            .withTags(mapOf("mkfssxqukkfplgm", "vgyuguos", "wiyighxpkdw", "sxnkjzkdeslpvlo", "upedeojnabckhs",
                "baiuebbaumny"))
            .withProperties(new OrganizationProperties()
                .withMarketplace(new MarketplaceDetails().withSubscriptionId("butr")
                    .withOfferDetails(new OfferDetails().withPublisherId("na")
                        .withOfferId("zmhjrunmp")
                        .withPlanId("ttdbhrbnl")
                        .withPlanName("kx")
                        .withTermUnit("skpbhenbtkcxywn")
                        .withTermId("nrs")))
                .withUser(new UserDetails().withFirstName("lqidyby")
                    .withLastName("zfcl")
                    .withEmailAddress("axdbabph")
                    .withUpn("rqlfktsthsucocmn")
                    .withPhoneNumber("azt"))
                .withPartnerProperties(new PartnerProperties().withLicensesSubscribed(911926222))
                .withSingleSignOnProperties(new SingleSignOnPropertiesV2().withType(SingleSignOnType.SAML)
                    .withState(SingleSignOnStates.INITIAL)
                    .withEnterpriseAppId("edckzywbiexzfey")
                    .withUrl("axibxujw")
                    .withAadDomains(Arrays.asList("walm", "zyoxaepdkzjan", "ux", "hdwbavxbniwdjs"))))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(mapOf("tyq", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("hhseyv", response.location());
        Assertions.assertEquals("rts", response.tags().get("hspkdeemao"));
        Assertions.assertEquals("htldwk", response.properties().marketplace().subscriptionId());
        Assertions.assertEquals("uutkncw", response.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("cwsvlxotog", response.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("wrupqsxvnmicykvc", response.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("vei", response.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("vnotyfjfcnj", response.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("cn", response.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("hbttkphyw", response.properties().user().firstName());
        Assertions.assertEquals("vjtoqnermclfp", response.properties().user().lastName());
        Assertions.assertEquals("hoxus", response.properties().user().emailAddress());
        Assertions.assertEquals("pabgyeps", response.properties().user().upn());
        Assertions.assertEquals("tazqugxywpmueefj", response.properties().user().phoneNumber());
        Assertions.assertEquals(224913714, response.properties().partnerProperties().licensesSubscribed());
        Assertions.assertEquals(SingleSignOnType.SAML, response.properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.DISABLE, response.properties().singleSignOnProperties().state());
        Assertions.assertEquals("dsuyonobgla", response.properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("qxtccmgyudx", response.properties().singleSignOnProperties().url());
        Assertions.assertEquals("moyrxvwfudwpz", response.properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
