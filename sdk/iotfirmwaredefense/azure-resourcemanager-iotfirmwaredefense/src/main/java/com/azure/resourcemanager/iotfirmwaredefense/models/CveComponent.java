// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Legacy component of a CVE result.
 */
@Immutable
public final class CveComponent implements JsonSerializable<CveComponent> {
    /*
     * ID of the SBOM component.
     */
    private String componentId;

    /*
     * Name of the SBOM component.
     */
    private String name;

    /*
     * Version of the SBOM component.
     */
    private String version;

    /**
     * Creates an instance of CveComponent class.
     */
    private CveComponent() {
    }

    /**
     * Get the componentId property: ID of the SBOM component.
     * 
     * @return the componentId value.
     */
    public String componentId() {
        return this.componentId;
    }

    /**
     * Get the name property: Name of the SBOM component.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the version property: Version of the SBOM component.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("componentId", this.componentId);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("version", this.version);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CveComponent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CveComponent if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CveComponent.
     */
    public static CveComponent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CveComponent deserializedCveComponent = new CveComponent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("componentId".equals(fieldName)) {
                    deserializedCveComponent.componentId = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedCveComponent.name = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedCveComponent.version = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCveComponent;
        });
    }
}
