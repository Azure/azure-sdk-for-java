// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.iotfirmwaredefense.models.ProvisioningState;
import com.azure.resourcemanager.iotfirmwaredefense.models.Status;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Firmware properties. */
@Fluent
public final class FirmwareProperties {
    /*
     * File name for a firmware that user uploaded.
     */
    @JsonProperty(value = "fileName")
    private String fileName;

    /*
     * Firmware vendor.
     */
    @JsonProperty(value = "vendor")
    private String vendor;

    /*
     * Firmware model.
     */
    @JsonProperty(value = "model")
    private String model;

    /*
     * Firmware version.
     */
    @JsonProperty(value = "version")
    private String version;

    /*
     * User-specified description of the firmware.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * File size of the uploaded firmware image.
     */
    @JsonProperty(value = "fileSize")
    private Long fileSize;

    /*
     * The status of firmware scan.
     */
    @JsonProperty(value = "status")
    private Status status;

    /*
     * A list of errors or other messages generated during firmware analysis
     */
    @JsonProperty(value = "statusMessages")
    private List<Object> statusMessages;

    /*
     * Provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /** Creates an instance of FirmwareProperties class. */
    public FirmwareProperties() {
    }

    /**
     * Get the fileName property: File name for a firmware that user uploaded.
     *
     * @return the fileName value.
     */
    public String fileName() {
        return this.fileName;
    }

    /**
     * Set the fileName property: File name for a firmware that user uploaded.
     *
     * @param fileName the fileName value to set.
     * @return the FirmwareProperties object itself.
     */
    public FirmwareProperties withFileName(String fileName) {
        this.fileName = fileName;
        return this;
    }

    /**
     * Get the vendor property: Firmware vendor.
     *
     * @return the vendor value.
     */
    public String vendor() {
        return this.vendor;
    }

    /**
     * Set the vendor property: Firmware vendor.
     *
     * @param vendor the vendor value to set.
     * @return the FirmwareProperties object itself.
     */
    public FirmwareProperties withVendor(String vendor) {
        this.vendor = vendor;
        return this;
    }

    /**
     * Get the model property: Firmware model.
     *
     * @return the model value.
     */
    public String model() {
        return this.model;
    }

    /**
     * Set the model property: Firmware model.
     *
     * @param model the model value to set.
     * @return the FirmwareProperties object itself.
     */
    public FirmwareProperties withModel(String model) {
        this.model = model;
        return this;
    }

    /**
     * Get the version property: Firmware version.
     *
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Firmware version.
     *
     * @param version the version value to set.
     * @return the FirmwareProperties object itself.
     */
    public FirmwareProperties withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the description property: User-specified description of the firmware.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: User-specified description of the firmware.
     *
     * @param description the description value to set.
     * @return the FirmwareProperties object itself.
     */
    public FirmwareProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the fileSize property: File size of the uploaded firmware image.
     *
     * @return the fileSize value.
     */
    public Long fileSize() {
        return this.fileSize;
    }

    /**
     * Set the fileSize property: File size of the uploaded firmware image.
     *
     * @param fileSize the fileSize value to set.
     * @return the FirmwareProperties object itself.
     */
    public FirmwareProperties withFileSize(Long fileSize) {
        this.fileSize = fileSize;
        return this;
    }

    /**
     * Get the status property: The status of firmware scan.
     *
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Set the status property: The status of firmware scan.
     *
     * @param status the status value to set.
     * @return the FirmwareProperties object itself.
     */
    public FirmwareProperties withStatus(Status status) {
        this.status = status;
        return this;
    }

    /**
     * Get the statusMessages property: A list of errors or other messages generated during firmware analysis.
     *
     * @return the statusMessages value.
     */
    public List<Object> statusMessages() {
        return this.statusMessages;
    }

    /**
     * Set the statusMessages property: A list of errors or other messages generated during firmware analysis.
     *
     * @param statusMessages the statusMessages value to set.
     * @return the FirmwareProperties object itself.
     */
    public FirmwareProperties withStatusMessages(List<Object> statusMessages) {
        this.statusMessages = statusMessages;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
