// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * binary hardening analysis result resource.
 */
@Fluent
public final class BinaryHardeningResourceInner extends ProxyResource {
    /*
     * The properties of a binary hardening result found within a firmware image
     */
    @JsonProperty(value = "properties")
    private BinaryHardeningResult innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of BinaryHardeningResourceInner class.
     */
    public BinaryHardeningResourceInner() {
    }

    /**
     * Get the innerProperties property: The properties of a binary hardening result found within a firmware image.
     * 
     * @return the innerProperties value.
     */
    private BinaryHardeningResult innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the binaryHardeningId property: ID for the binary hardening result.
     * 
     * @return the binaryHardeningId value.
     */
    public String binaryHardeningId() {
        return this.innerProperties() == null ? null : this.innerProperties().binaryHardeningId();
    }

    /**
     * Set the binaryHardeningId property: ID for the binary hardening result.
     * 
     * @param binaryHardeningId the binaryHardeningId value to set.
     * @return the BinaryHardeningResourceInner object itself.
     */
    public BinaryHardeningResourceInner withBinaryHardeningId(String binaryHardeningId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BinaryHardeningResult();
        }
        this.innerProperties().withBinaryHardeningId(binaryHardeningId);
        return this;
    }

    /**
     * Get the architecture property: The architecture of the uploaded firmware.
     * 
     * @return the architecture value.
     */
    public String architecture() {
        return this.innerProperties() == null ? null : this.innerProperties().architecture();
    }

    /**
     * Set the architecture property: The architecture of the uploaded firmware.
     * 
     * @param architecture the architecture value to set.
     * @return the BinaryHardeningResourceInner object itself.
     */
    public BinaryHardeningResourceInner withArchitecture(String architecture) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BinaryHardeningResult();
        }
        this.innerProperties().withArchitecture(architecture);
        return this;
    }

    /**
     * Get the filePath property: The executable path.
     * 
     * @return the filePath value.
     */
    public String filePath() {
        return this.innerProperties() == null ? null : this.innerProperties().filePath();
    }

    /**
     * Set the filePath property: The executable path.
     * 
     * @param filePath the filePath value to set.
     * @return the BinaryHardeningResourceInner object itself.
     */
    public BinaryHardeningResourceInner withFilePath(String filePath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BinaryHardeningResult();
        }
        this.innerProperties().withFilePath(filePath);
        return this;
    }

    /**
     * Get the classProperty property: The executable class to indicate 32 or 64 bit.
     * 
     * @return the classProperty value.
     */
    public String classProperty() {
        return this.innerProperties() == null ? null : this.innerProperties().classProperty();
    }

    /**
     * Set the classProperty property: The executable class to indicate 32 or 64 bit.
     * 
     * @param classProperty the classProperty value to set.
     * @return the BinaryHardeningResourceInner object itself.
     */
    public BinaryHardeningResourceInner withClassProperty(String classProperty) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BinaryHardeningResult();
        }
        this.innerProperties().withClassProperty(classProperty);
        return this;
    }

    /**
     * Get the runpath property: The runpath of the uploaded firmware.
     * 
     * @return the runpath value.
     */
    public String runpath() {
        return this.innerProperties() == null ? null : this.innerProperties().runpath();
    }

    /**
     * Set the runpath property: The runpath of the uploaded firmware.
     * 
     * @param runpath the runpath value to set.
     * @return the BinaryHardeningResourceInner object itself.
     */
    public BinaryHardeningResourceInner withRunpath(String runpath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BinaryHardeningResult();
        }
        this.innerProperties().withRunpath(runpath);
        return this;
    }

    /**
     * Get the rpath property: The rpath of the uploaded firmware.
     * 
     * @return the rpath value.
     */
    public String rpath() {
        return this.innerProperties() == null ? null : this.innerProperties().rpath();
    }

    /**
     * Set the rpath property: The rpath of the uploaded firmware.
     * 
     * @param rpath the rpath value to set.
     * @return the BinaryHardeningResourceInner object itself.
     */
    public BinaryHardeningResourceInner withRpath(String rpath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BinaryHardeningResult();
        }
        this.innerProperties().withRpath(rpath);
        return this;
    }

    /**
     * Get the nx property: NX (no-execute) flag.
     * 
     * @return the nx value.
     */
    public Boolean nx() {
        return this.innerProperties() == null ? null : this.innerProperties().nx();
    }

    /**
     * Set the nx property: NX (no-execute) flag.
     * 
     * @param nx the nx value to set.
     * @return the BinaryHardeningResourceInner object itself.
     */
    public BinaryHardeningResourceInner withNx(Boolean nx) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BinaryHardeningResult();
        }
        this.innerProperties().withNx(nx);
        return this;
    }

    /**
     * Get the pie property: PIE (position independent executable) flag.
     * 
     * @return the pie value.
     */
    public Boolean pie() {
        return this.innerProperties() == null ? null : this.innerProperties().pie();
    }

    /**
     * Set the pie property: PIE (position independent executable) flag.
     * 
     * @param pie the pie value to set.
     * @return the BinaryHardeningResourceInner object itself.
     */
    public BinaryHardeningResourceInner withPie(Boolean pie) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BinaryHardeningResult();
        }
        this.innerProperties().withPie(pie);
        return this;
    }

    /**
     * Get the relro property: RELRO (relocation read-only) flag.
     * 
     * @return the relro value.
     */
    public Boolean relro() {
        return this.innerProperties() == null ? null : this.innerProperties().relro();
    }

    /**
     * Set the relro property: RELRO (relocation read-only) flag.
     * 
     * @param relro the relro value to set.
     * @return the BinaryHardeningResourceInner object itself.
     */
    public BinaryHardeningResourceInner withRelro(Boolean relro) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BinaryHardeningResult();
        }
        this.innerProperties().withRelro(relro);
        return this;
    }

    /**
     * Get the canary property: Canary (stack canaries) flag.
     * 
     * @return the canary value.
     */
    public Boolean canary() {
        return this.innerProperties() == null ? null : this.innerProperties().canary();
    }

    /**
     * Set the canary property: Canary (stack canaries) flag.
     * 
     * @param canary the canary value to set.
     * @return the BinaryHardeningResourceInner object itself.
     */
    public BinaryHardeningResourceInner withCanary(Boolean canary) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BinaryHardeningResult();
        }
        this.innerProperties().withCanary(canary);
        return this;
    }

    /**
     * Get the stripped property: Stripped flag.
     * 
     * @return the stripped value.
     */
    public Boolean stripped() {
        return this.innerProperties() == null ? null : this.innerProperties().stripped();
    }

    /**
     * Set the stripped property: Stripped flag.
     * 
     * @param stripped the stripped value to set.
     * @return the BinaryHardeningResourceInner object itself.
     */
    public BinaryHardeningResourceInner withStripped(Boolean stripped) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BinaryHardeningResult();
        }
        this.innerProperties().withStripped(stripped);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
