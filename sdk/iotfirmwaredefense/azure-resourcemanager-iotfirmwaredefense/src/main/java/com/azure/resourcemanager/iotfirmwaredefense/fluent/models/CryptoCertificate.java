// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.iotfirmwaredefense.models.CryptoCertificateEntity;
import com.azure.resourcemanager.iotfirmwaredefense.models.PairedKey;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Crypto certificate properties.
 */
@Fluent
public final class CryptoCertificate implements JsonSerializable<CryptoCertificate> {
    /*
     * ID for the certificate result.
     */
    private String cryptoCertId;

    /*
     * Name of the certificate.
     */
    private String name;

    /*
     * Subject information of the certificate.
     */
    private CryptoCertificateEntity subject;

    /*
     * Issuer information of the certificate.
     */
    private CryptoCertificateEntity issuer;

    /*
     * Issue date for the certificate.
     */
    private OffsetDateTime issuedDate;

    /*
     * Expiration date for the certificate.
     */
    private OffsetDateTime expirationDate;

    /*
     * Role of the certificate (Root CA, etc)
     */
    private String role;

    /*
     * The signature algorithm used in the certificate.
     */
    private String signatureAlgorithm;

    /*
     * Size of the certificate's key in bits
     */
    private Long keySize;

    /*
     * Key algorithm used in the certificate.
     */
    private String keyAlgorithm;

    /*
     * Encoding used for the certificate.
     */
    private String encoding;

    /*
     * Serial number of the certificate.
     */
    private String serialNumber;

    /*
     * Fingerprint of the certificate.
     */
    private String fingerprint;

    /*
     * List of functions the certificate can fulfill.
     */
    private List<String> usage;

    /*
     * List of files where this certificate was found.
     */
    private List<String> filePaths;

    /*
     * A matching paired private key.
     */
    private PairedKey pairedKey;

    /*
     * Indicates if the certificate is expired.
     */
    private Boolean isExpired;

    /*
     * Indicates if the certificate is self-signed.
     */
    private Boolean isSelfSigned;

    /*
     * Indicates the signature algorithm used is insecure.
     */
    private Boolean isWeakSignature;

    /*
     * Indicates the certificate's key size is considered too small to be secure for the key algorithm.
     */
    private Boolean isShortKeySize;

    /**
     * Creates an instance of CryptoCertificate class.
     */
    public CryptoCertificate() {
    }

    /**
     * Get the cryptoCertId property: ID for the certificate result.
     * 
     * @return the cryptoCertId value.
     */
    public String cryptoCertId() {
        return this.cryptoCertId;
    }

    /**
     * Set the cryptoCertId property: ID for the certificate result.
     * 
     * @param cryptoCertId the cryptoCertId value to set.
     * @return the CryptoCertificate object itself.
     */
    public CryptoCertificate withCryptoCertId(String cryptoCertId) {
        this.cryptoCertId = cryptoCertId;
        return this;
    }

    /**
     * Get the name property: Name of the certificate.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the certificate.
     * 
     * @param name the name value to set.
     * @return the CryptoCertificate object itself.
     */
    public CryptoCertificate withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the subject property: Subject information of the certificate.
     * 
     * @return the subject value.
     */
    public CryptoCertificateEntity subject() {
        return this.subject;
    }

    /**
     * Set the subject property: Subject information of the certificate.
     * 
     * @param subject the subject value to set.
     * @return the CryptoCertificate object itself.
     */
    public CryptoCertificate withSubject(CryptoCertificateEntity subject) {
        this.subject = subject;
        return this;
    }

    /**
     * Get the issuer property: Issuer information of the certificate.
     * 
     * @return the issuer value.
     */
    public CryptoCertificateEntity issuer() {
        return this.issuer;
    }

    /**
     * Set the issuer property: Issuer information of the certificate.
     * 
     * @param issuer the issuer value to set.
     * @return the CryptoCertificate object itself.
     */
    public CryptoCertificate withIssuer(CryptoCertificateEntity issuer) {
        this.issuer = issuer;
        return this;
    }

    /**
     * Get the issuedDate property: Issue date for the certificate.
     * 
     * @return the issuedDate value.
     */
    public OffsetDateTime issuedDate() {
        return this.issuedDate;
    }

    /**
     * Set the issuedDate property: Issue date for the certificate.
     * 
     * @param issuedDate the issuedDate value to set.
     * @return the CryptoCertificate object itself.
     */
    public CryptoCertificate withIssuedDate(OffsetDateTime issuedDate) {
        this.issuedDate = issuedDate;
        return this;
    }

    /**
     * Get the expirationDate property: Expiration date for the certificate.
     * 
     * @return the expirationDate value.
     */
    public OffsetDateTime expirationDate() {
        return this.expirationDate;
    }

    /**
     * Set the expirationDate property: Expiration date for the certificate.
     * 
     * @param expirationDate the expirationDate value to set.
     * @return the CryptoCertificate object itself.
     */
    public CryptoCertificate withExpirationDate(OffsetDateTime expirationDate) {
        this.expirationDate = expirationDate;
        return this;
    }

    /**
     * Get the role property: Role of the certificate (Root CA, etc).
     * 
     * @return the role value.
     */
    public String role() {
        return this.role;
    }

    /**
     * Set the role property: Role of the certificate (Root CA, etc).
     * 
     * @param role the role value to set.
     * @return the CryptoCertificate object itself.
     */
    public CryptoCertificate withRole(String role) {
        this.role = role;
        return this;
    }

    /**
     * Get the signatureAlgorithm property: The signature algorithm used in the certificate.
     * 
     * @return the signatureAlgorithm value.
     */
    public String signatureAlgorithm() {
        return this.signatureAlgorithm;
    }

    /**
     * Set the signatureAlgorithm property: The signature algorithm used in the certificate.
     * 
     * @param signatureAlgorithm the signatureAlgorithm value to set.
     * @return the CryptoCertificate object itself.
     */
    public CryptoCertificate withSignatureAlgorithm(String signatureAlgorithm) {
        this.signatureAlgorithm = signatureAlgorithm;
        return this;
    }

    /**
     * Get the keySize property: Size of the certificate's key in bits.
     * 
     * @return the keySize value.
     */
    public Long keySize() {
        return this.keySize;
    }

    /**
     * Set the keySize property: Size of the certificate's key in bits.
     * 
     * @param keySize the keySize value to set.
     * @return the CryptoCertificate object itself.
     */
    public CryptoCertificate withKeySize(Long keySize) {
        this.keySize = keySize;
        return this;
    }

    /**
     * Get the keyAlgorithm property: Key algorithm used in the certificate.
     * 
     * @return the keyAlgorithm value.
     */
    public String keyAlgorithm() {
        return this.keyAlgorithm;
    }

    /**
     * Set the keyAlgorithm property: Key algorithm used in the certificate.
     * 
     * @param keyAlgorithm the keyAlgorithm value to set.
     * @return the CryptoCertificate object itself.
     */
    public CryptoCertificate withKeyAlgorithm(String keyAlgorithm) {
        this.keyAlgorithm = keyAlgorithm;
        return this;
    }

    /**
     * Get the encoding property: Encoding used for the certificate.
     * 
     * @return the encoding value.
     */
    public String encoding() {
        return this.encoding;
    }

    /**
     * Set the encoding property: Encoding used for the certificate.
     * 
     * @param encoding the encoding value to set.
     * @return the CryptoCertificate object itself.
     */
    public CryptoCertificate withEncoding(String encoding) {
        this.encoding = encoding;
        return this;
    }

    /**
     * Get the serialNumber property: Serial number of the certificate.
     * 
     * @return the serialNumber value.
     */
    public String serialNumber() {
        return this.serialNumber;
    }

    /**
     * Set the serialNumber property: Serial number of the certificate.
     * 
     * @param serialNumber the serialNumber value to set.
     * @return the CryptoCertificate object itself.
     */
    public CryptoCertificate withSerialNumber(String serialNumber) {
        this.serialNumber = serialNumber;
        return this;
    }

    /**
     * Get the fingerprint property: Fingerprint of the certificate.
     * 
     * @return the fingerprint value.
     */
    public String fingerprint() {
        return this.fingerprint;
    }

    /**
     * Set the fingerprint property: Fingerprint of the certificate.
     * 
     * @param fingerprint the fingerprint value to set.
     * @return the CryptoCertificate object itself.
     */
    public CryptoCertificate withFingerprint(String fingerprint) {
        this.fingerprint = fingerprint;
        return this;
    }

    /**
     * Get the usage property: List of functions the certificate can fulfill.
     * 
     * @return the usage value.
     */
    public List<String> usage() {
        return this.usage;
    }

    /**
     * Set the usage property: List of functions the certificate can fulfill.
     * 
     * @param usage the usage value to set.
     * @return the CryptoCertificate object itself.
     */
    public CryptoCertificate withUsage(List<String> usage) {
        this.usage = usage;
        return this;
    }

    /**
     * Get the filePaths property: List of files where this certificate was found.
     * 
     * @return the filePaths value.
     */
    public List<String> filePaths() {
        return this.filePaths;
    }

    /**
     * Get the pairedKey property: A matching paired private key.
     * 
     * @return the pairedKey value.
     */
    public PairedKey pairedKey() {
        return this.pairedKey;
    }

    /**
     * Set the pairedKey property: A matching paired private key.
     * 
     * @param pairedKey the pairedKey value to set.
     * @return the CryptoCertificate object itself.
     */
    public CryptoCertificate withPairedKey(PairedKey pairedKey) {
        this.pairedKey = pairedKey;
        return this;
    }

    /**
     * Get the isExpired property: Indicates if the certificate is expired.
     * 
     * @return the isExpired value.
     */
    public Boolean isExpired() {
        return this.isExpired;
    }

    /**
     * Set the isExpired property: Indicates if the certificate is expired.
     * 
     * @param isExpired the isExpired value to set.
     * @return the CryptoCertificate object itself.
     */
    public CryptoCertificate withIsExpired(Boolean isExpired) {
        this.isExpired = isExpired;
        return this;
    }

    /**
     * Get the isSelfSigned property: Indicates if the certificate is self-signed.
     * 
     * @return the isSelfSigned value.
     */
    public Boolean isSelfSigned() {
        return this.isSelfSigned;
    }

    /**
     * Set the isSelfSigned property: Indicates if the certificate is self-signed.
     * 
     * @param isSelfSigned the isSelfSigned value to set.
     * @return the CryptoCertificate object itself.
     */
    public CryptoCertificate withIsSelfSigned(Boolean isSelfSigned) {
        this.isSelfSigned = isSelfSigned;
        return this;
    }

    /**
     * Get the isWeakSignature property: Indicates the signature algorithm used is insecure.
     * 
     * @return the isWeakSignature value.
     */
    public Boolean isWeakSignature() {
        return this.isWeakSignature;
    }

    /**
     * Set the isWeakSignature property: Indicates the signature algorithm used is insecure.
     * 
     * @param isWeakSignature the isWeakSignature value to set.
     * @return the CryptoCertificate object itself.
     */
    public CryptoCertificate withIsWeakSignature(Boolean isWeakSignature) {
        this.isWeakSignature = isWeakSignature;
        return this;
    }

    /**
     * Get the isShortKeySize property: Indicates the certificate's key size is considered too small to be secure for
     * the key algorithm.
     * 
     * @return the isShortKeySize value.
     */
    public Boolean isShortKeySize() {
        return this.isShortKeySize;
    }

    /**
     * Set the isShortKeySize property: Indicates the certificate's key size is considered too small to be secure for
     * the key algorithm.
     * 
     * @param isShortKeySize the isShortKeySize value to set.
     * @return the CryptoCertificate object itself.
     */
    public CryptoCertificate withIsShortKeySize(Boolean isShortKeySize) {
        this.isShortKeySize = isShortKeySize;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subject() != null) {
            subject().validate();
        }
        if (issuer() != null) {
            issuer().validate();
        }
        if (pairedKey() != null) {
            pairedKey().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("cryptoCertId", this.cryptoCertId);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("subject", this.subject);
        jsonWriter.writeJsonField("issuer", this.issuer);
        jsonWriter.writeStringField("issuedDate",
            this.issuedDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.issuedDate));
        jsonWriter.writeStringField("expirationDate",
            this.expirationDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expirationDate));
        jsonWriter.writeStringField("role", this.role);
        jsonWriter.writeStringField("signatureAlgorithm", this.signatureAlgorithm);
        jsonWriter.writeNumberField("keySize", this.keySize);
        jsonWriter.writeStringField("keyAlgorithm", this.keyAlgorithm);
        jsonWriter.writeStringField("encoding", this.encoding);
        jsonWriter.writeStringField("serialNumber", this.serialNumber);
        jsonWriter.writeStringField("fingerprint", this.fingerprint);
        jsonWriter.writeArrayField("usage", this.usage, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("pairedKey", this.pairedKey);
        jsonWriter.writeBooleanField("isExpired", this.isExpired);
        jsonWriter.writeBooleanField("isSelfSigned", this.isSelfSigned);
        jsonWriter.writeBooleanField("isWeakSignature", this.isWeakSignature);
        jsonWriter.writeBooleanField("isShortKeySize", this.isShortKeySize);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CryptoCertificate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CryptoCertificate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CryptoCertificate.
     */
    public static CryptoCertificate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CryptoCertificate deserializedCryptoCertificate = new CryptoCertificate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cryptoCertId".equals(fieldName)) {
                    deserializedCryptoCertificate.cryptoCertId = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedCryptoCertificate.name = reader.getString();
                } else if ("subject".equals(fieldName)) {
                    deserializedCryptoCertificate.subject = CryptoCertificateEntity.fromJson(reader);
                } else if ("issuer".equals(fieldName)) {
                    deserializedCryptoCertificate.issuer = CryptoCertificateEntity.fromJson(reader);
                } else if ("issuedDate".equals(fieldName)) {
                    deserializedCryptoCertificate.issuedDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("expirationDate".equals(fieldName)) {
                    deserializedCryptoCertificate.expirationDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("role".equals(fieldName)) {
                    deserializedCryptoCertificate.role = reader.getString();
                } else if ("signatureAlgorithm".equals(fieldName)) {
                    deserializedCryptoCertificate.signatureAlgorithm = reader.getString();
                } else if ("keySize".equals(fieldName)) {
                    deserializedCryptoCertificate.keySize = reader.getNullable(JsonReader::getLong);
                } else if ("keyAlgorithm".equals(fieldName)) {
                    deserializedCryptoCertificate.keyAlgorithm = reader.getString();
                } else if ("encoding".equals(fieldName)) {
                    deserializedCryptoCertificate.encoding = reader.getString();
                } else if ("serialNumber".equals(fieldName)) {
                    deserializedCryptoCertificate.serialNumber = reader.getString();
                } else if ("fingerprint".equals(fieldName)) {
                    deserializedCryptoCertificate.fingerprint = reader.getString();
                } else if ("usage".equals(fieldName)) {
                    List<String> usage = reader.readArray(reader1 -> reader1.getString());
                    deserializedCryptoCertificate.usage = usage;
                } else if ("filePaths".equals(fieldName)) {
                    List<String> filePaths = reader.readArray(reader1 -> reader1.getString());
                    deserializedCryptoCertificate.filePaths = filePaths;
                } else if ("pairedKey".equals(fieldName)) {
                    deserializedCryptoCertificate.pairedKey = PairedKey.fromJson(reader);
                } else if ("isExpired".equals(fieldName)) {
                    deserializedCryptoCertificate.isExpired = reader.getNullable(JsonReader::getBoolean);
                } else if ("isSelfSigned".equals(fieldName)) {
                    deserializedCryptoCertificate.isSelfSigned = reader.getNullable(JsonReader::getBoolean);
                } else if ("isWeakSignature".equals(fieldName)) {
                    deserializedCryptoCertificate.isWeakSignature = reader.getNullable(JsonReader::getBoolean);
                } else if ("isShortKeySize".equals(fieldName)) {
                    deserializedCryptoCertificate.isShortKeySize = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCryptoCertificate;
        });
    }
}
