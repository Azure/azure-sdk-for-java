// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.FirmwaresClient;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.models.FirmwareInner;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.models.UrlTokenInner;
import com.azure.resourcemanager.iotfirmwaredefense.models.Firmware;
import com.azure.resourcemanager.iotfirmwaredefense.models.Firmwares;
import com.azure.resourcemanager.iotfirmwaredefense.models.UrlToken;

public final class FirmwaresImpl implements Firmwares {
    private static final ClientLogger LOGGER = new ClientLogger(FirmwaresImpl.class);

    private final FirmwaresClient innerClient;

    private final com.azure.resourcemanager.iotfirmwaredefense.IoTFirmwareDefenseManager serviceManager;

    public FirmwaresImpl(FirmwaresClient innerClient,
        com.azure.resourcemanager.iotfirmwaredefense.IoTFirmwareDefenseManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Firmware> listByWorkspace(String resourceGroupName, String workspaceName) {
        PagedIterable<FirmwareInner> inner = this.serviceClient().listByWorkspace(resourceGroupName, workspaceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FirmwareImpl(inner1, this.manager()));
    }

    public PagedIterable<Firmware> listByWorkspace(String resourceGroupName, String workspaceName, Context context) {
        PagedIterable<FirmwareInner> inner
            = this.serviceClient().listByWorkspace(resourceGroupName, workspaceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FirmwareImpl(inner1, this.manager()));
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String workspaceName, String firmwareId,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, workspaceName, firmwareId, context);
    }

    public void delete(String resourceGroupName, String workspaceName, String firmwareId) {
        this.serviceClient().delete(resourceGroupName, workspaceName, firmwareId);
    }

    public Response<Firmware> getWithResponse(String resourceGroupName, String workspaceName, String firmwareId,
        Context context) {
        Response<FirmwareInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, workspaceName, firmwareId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new FirmwareImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Firmware get(String resourceGroupName, String workspaceName, String firmwareId) {
        FirmwareInner inner = this.serviceClient().get(resourceGroupName, workspaceName, firmwareId);
        if (inner != null) {
            return new FirmwareImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<UrlToken> generateDownloadUrlWithResponse(String resourceGroupName, String workspaceName,
        String firmwareId, Context context) {
        Response<UrlTokenInner> inner = this.serviceClient().generateDownloadUrlWithResponse(resourceGroupName,
            workspaceName, firmwareId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new UrlTokenImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public UrlToken generateDownloadUrl(String resourceGroupName, String workspaceName, String firmwareId) {
        UrlTokenInner inner = this.serviceClient().generateDownloadUrl(resourceGroupName, workspaceName, firmwareId);
        if (inner != null) {
            return new UrlTokenImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<UrlToken> generateFilesystemDownloadUrlWithResponse(String resourceGroupName, String workspaceName,
        String firmwareId, Context context) {
        Response<UrlTokenInner> inner = this.serviceClient()
            .generateFilesystemDownloadUrlWithResponse(resourceGroupName, workspaceName, firmwareId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new UrlTokenImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public UrlToken generateFilesystemDownloadUrl(String resourceGroupName, String workspaceName, String firmwareId) {
        UrlTokenInner inner
            = this.serviceClient().generateFilesystemDownloadUrl(resourceGroupName, workspaceName, firmwareId);
        if (inner != null) {
            return new UrlTokenImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Firmware getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String firmwareId = ResourceManagerUtils.getValueFromIdByName(id, "firmwares");
        if (firmwareId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'firmwares'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, firmwareId, Context.NONE).getValue();
    }

    public Response<Firmware> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String firmwareId = ResourceManagerUtils.getValueFromIdByName(id, "firmwares");
        if (firmwareId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'firmwares'.", id)));
        }
        return this.getWithResponse(resourceGroupName, workspaceName, firmwareId, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String firmwareId = ResourceManagerUtils.getValueFromIdByName(id, "firmwares");
        if (firmwareId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'firmwares'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, workspaceName, firmwareId, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = ResourceManagerUtils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String firmwareId = ResourceManagerUtils.getValueFromIdByName(id, "firmwares");
        if (firmwareId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'firmwares'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, workspaceName, firmwareId, context);
    }

    private FirmwaresClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.iotfirmwaredefense.IoTFirmwareDefenseManager manager() {
        return this.serviceManager;
    }

    public FirmwareImpl define(String name) {
        return new FirmwareImpl(name, this.manager());
    }
}
