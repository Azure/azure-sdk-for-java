// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties for cryptographic key summary.
 */
@Fluent
public final class CryptoKeySummaryResource extends SummaryResourceProperties {
    /*
     * Describes the type of summary.
     */
    private SummaryType summaryType = SummaryType.CRYPTO_KEY;

    /*
     * Total number of cryptographic keys found.
     */
    private Long totalKeys;

    /*
     * Total number of (non-certificate) public keys found.
     */
    private Long publicKeys;

    /*
     * Total number of private keys found.
     */
    private Long privateKeys;

    /*
     * Total number of keys found that have a matching paired key or certificate.
     */
    private Long pairedKeys;

    /*
     * Total number of keys found that have an insecure key size for the algorithm.
     */
    private Long shortKeySize;

    /**
     * Creates an instance of CryptoKeySummaryResource class.
     */
    public CryptoKeySummaryResource() {
    }

    /**
     * Get the summaryType property: Describes the type of summary.
     * 
     * @return the summaryType value.
     */
    @Override
    public SummaryType summaryType() {
        return this.summaryType;
    }

    /**
     * Get the totalKeys property: Total number of cryptographic keys found.
     * 
     * @return the totalKeys value.
     */
    public Long totalKeys() {
        return this.totalKeys;
    }

    /**
     * Set the totalKeys property: Total number of cryptographic keys found.
     * 
     * @param totalKeys the totalKeys value to set.
     * @return the CryptoKeySummaryResource object itself.
     */
    public CryptoKeySummaryResource withTotalKeys(Long totalKeys) {
        this.totalKeys = totalKeys;
        return this;
    }

    /**
     * Get the publicKeys property: Total number of (non-certificate) public keys found.
     * 
     * @return the publicKeys value.
     */
    public Long publicKeys() {
        return this.publicKeys;
    }

    /**
     * Set the publicKeys property: Total number of (non-certificate) public keys found.
     * 
     * @param publicKeys the publicKeys value to set.
     * @return the CryptoKeySummaryResource object itself.
     */
    public CryptoKeySummaryResource withPublicKeys(Long publicKeys) {
        this.publicKeys = publicKeys;
        return this;
    }

    /**
     * Get the privateKeys property: Total number of private keys found.
     * 
     * @return the privateKeys value.
     */
    public Long privateKeys() {
        return this.privateKeys;
    }

    /**
     * Set the privateKeys property: Total number of private keys found.
     * 
     * @param privateKeys the privateKeys value to set.
     * @return the CryptoKeySummaryResource object itself.
     */
    public CryptoKeySummaryResource withPrivateKeys(Long privateKeys) {
        this.privateKeys = privateKeys;
        return this;
    }

    /**
     * Get the pairedKeys property: Total number of keys found that have a matching paired key or certificate.
     * 
     * @return the pairedKeys value.
     */
    public Long pairedKeys() {
        return this.pairedKeys;
    }

    /**
     * Set the pairedKeys property: Total number of keys found that have a matching paired key or certificate.
     * 
     * @param pairedKeys the pairedKeys value to set.
     * @return the CryptoKeySummaryResource object itself.
     */
    public CryptoKeySummaryResource withPairedKeys(Long pairedKeys) {
        this.pairedKeys = pairedKeys;
        return this;
    }

    /**
     * Get the shortKeySize property: Total number of keys found that have an insecure key size for the algorithm.
     * 
     * @return the shortKeySize value.
     */
    public Long shortKeySize() {
        return this.shortKeySize;
    }

    /**
     * Set the shortKeySize property: Total number of keys found that have an insecure key size for the algorithm.
     * 
     * @param shortKeySize the shortKeySize value to set.
     * @return the CryptoKeySummaryResource object itself.
     */
    public CryptoKeySummaryResource withShortKeySize(Long shortKeySize) {
        this.shortKeySize = shortKeySize;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("summaryType", this.summaryType == null ? null : this.summaryType.toString());
        jsonWriter.writeNumberField("totalKeys", this.totalKeys);
        jsonWriter.writeNumberField("publicKeys", this.publicKeys);
        jsonWriter.writeNumberField("privateKeys", this.privateKeys);
        jsonWriter.writeNumberField("pairedKeys", this.pairedKeys);
        jsonWriter.writeNumberField("shortKeySize", this.shortKeySize);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CryptoKeySummaryResource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CryptoKeySummaryResource if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CryptoKeySummaryResource.
     */
    public static CryptoKeySummaryResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CryptoKeySummaryResource deserializedCryptoKeySummaryResource = new CryptoKeySummaryResource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("summaryType".equals(fieldName)) {
                    deserializedCryptoKeySummaryResource.summaryType = SummaryType.fromString(reader.getString());
                } else if ("totalKeys".equals(fieldName)) {
                    deserializedCryptoKeySummaryResource.totalKeys = reader.getNullable(JsonReader::getLong);
                } else if ("publicKeys".equals(fieldName)) {
                    deserializedCryptoKeySummaryResource.publicKeys = reader.getNullable(JsonReader::getLong);
                } else if ("privateKeys".equals(fieldName)) {
                    deserializedCryptoKeySummaryResource.privateKeys = reader.getNullable(JsonReader::getLong);
                } else if ("pairedKeys".equals(fieldName)) {
                    deserializedCryptoKeySummaryResource.pairedKeys = reader.getNullable(JsonReader::getLong);
                } else if ("shortKeySize".equals(fieldName)) {
                    deserializedCryptoKeySummaryResource.shortKeySize = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCryptoKeySummaryResource;
        });
    }
}
