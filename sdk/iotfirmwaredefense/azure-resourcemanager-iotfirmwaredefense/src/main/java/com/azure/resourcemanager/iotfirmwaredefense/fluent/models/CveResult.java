// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.iotfirmwaredefense.models.CveComponent;
import com.azure.resourcemanager.iotfirmwaredefense.models.CveLink;
import java.io.IOException;
import java.util.List;

/**
 * Details of a CVE detected in firmware.
 */
@Fluent
public final class CveResult implements JsonSerializable<CveResult> {
    /*
     * ID of the CVE result.
     */
    private String cveId;

    /*
     * The SBOM component for the CVE.
     */
    private CveComponent component;

    /*
     * Severity of the CVE.
     */
    private String severity;

    /*
     * Name of the CVE.
     */
    private String name;

    /*
     * A single CVSS score to represent the CVE. If a V3 score is specified, then it will use the V3 score. Otherwise if
     * the V2 score is specified it will be the V2 score.
     */
    private String cvssScore;

    /*
     * CVSS version of the CVE.
     */
    private String cvssVersion;

    /*
     * CVSS V2 score of the CVE.
     */
    private String cvssV2Score;

    /*
     * CVSS V3 score of the CVE.
     */
    private String cvssV3Score;

    /*
     * The list of reference links for the CVE.
     */
    private List<CveLink> links;

    /*
     * The CVE description.
     */
    private String description;

    /**
     * Creates an instance of CveResult class.
     */
    public CveResult() {
    }

    /**
     * Get the cveId property: ID of the CVE result.
     * 
     * @return the cveId value.
     */
    public String cveId() {
        return this.cveId;
    }

    /**
     * Set the cveId property: ID of the CVE result.
     * 
     * @param cveId the cveId value to set.
     * @return the CveResult object itself.
     */
    public CveResult withCveId(String cveId) {
        this.cveId = cveId;
        return this;
    }

    /**
     * Get the component property: The SBOM component for the CVE.
     * 
     * @return the component value.
     */
    public CveComponent component() {
        return this.component;
    }

    /**
     * Set the component property: The SBOM component for the CVE.
     * 
     * @param component the component value to set.
     * @return the CveResult object itself.
     */
    public CveResult withComponent(CveComponent component) {
        this.component = component;
        return this;
    }

    /**
     * Get the severity property: Severity of the CVE.
     * 
     * @return the severity value.
     */
    public String severity() {
        return this.severity;
    }

    /**
     * Set the severity property: Severity of the CVE.
     * 
     * @param severity the severity value to set.
     * @return the CveResult object itself.
     */
    public CveResult withSeverity(String severity) {
        this.severity = severity;
        return this;
    }

    /**
     * Get the name property: Name of the CVE.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the CVE.
     * 
     * @param name the name value to set.
     * @return the CveResult object itself.
     */
    public CveResult withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the cvssScore property: A single CVSS score to represent the CVE. If a V3 score is specified, then it will
     * use the V3 score. Otherwise if the V2 score is specified it will be the V2 score.
     * 
     * @return the cvssScore value.
     */
    public String cvssScore() {
        return this.cvssScore;
    }

    /**
     * Set the cvssScore property: A single CVSS score to represent the CVE. If a V3 score is specified, then it will
     * use the V3 score. Otherwise if the V2 score is specified it will be the V2 score.
     * 
     * @param cvssScore the cvssScore value to set.
     * @return the CveResult object itself.
     */
    public CveResult withCvssScore(String cvssScore) {
        this.cvssScore = cvssScore;
        return this;
    }

    /**
     * Get the cvssVersion property: CVSS version of the CVE.
     * 
     * @return the cvssVersion value.
     */
    public String cvssVersion() {
        return this.cvssVersion;
    }

    /**
     * Set the cvssVersion property: CVSS version of the CVE.
     * 
     * @param cvssVersion the cvssVersion value to set.
     * @return the CveResult object itself.
     */
    public CveResult withCvssVersion(String cvssVersion) {
        this.cvssVersion = cvssVersion;
        return this;
    }

    /**
     * Get the cvssV2Score property: CVSS V2 score of the CVE.
     * 
     * @return the cvssV2Score value.
     */
    public String cvssV2Score() {
        return this.cvssV2Score;
    }

    /**
     * Set the cvssV2Score property: CVSS V2 score of the CVE.
     * 
     * @param cvssV2Score the cvssV2Score value to set.
     * @return the CveResult object itself.
     */
    public CveResult withCvssV2Score(String cvssV2Score) {
        this.cvssV2Score = cvssV2Score;
        return this;
    }

    /**
     * Get the cvssV3Score property: CVSS V3 score of the CVE.
     * 
     * @return the cvssV3Score value.
     */
    public String cvssV3Score() {
        return this.cvssV3Score;
    }

    /**
     * Set the cvssV3Score property: CVSS V3 score of the CVE.
     * 
     * @param cvssV3Score the cvssV3Score value to set.
     * @return the CveResult object itself.
     */
    public CveResult withCvssV3Score(String cvssV3Score) {
        this.cvssV3Score = cvssV3Score;
        return this;
    }

    /**
     * Get the links property: The list of reference links for the CVE.
     * 
     * @return the links value.
     */
    public List<CveLink> links() {
        return this.links;
    }

    /**
     * Get the description property: The CVE description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The CVE description.
     * 
     * @param description the description value to set.
     * @return the CveResult object itself.
     */
    public CveResult withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (component() != null) {
            component().validate();
        }
        if (links() != null) {
            links().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("cveId", this.cveId);
        jsonWriter.writeJsonField("component", this.component);
        jsonWriter.writeStringField("severity", this.severity);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("cvssScore", this.cvssScore);
        jsonWriter.writeStringField("cvssVersion", this.cvssVersion);
        jsonWriter.writeStringField("cvssV2Score", this.cvssV2Score);
        jsonWriter.writeStringField("cvssV3Score", this.cvssV3Score);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CveResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CveResult if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the CveResult.
     */
    public static CveResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CveResult deserializedCveResult = new CveResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cveId".equals(fieldName)) {
                    deserializedCveResult.cveId = reader.getString();
                } else if ("component".equals(fieldName)) {
                    deserializedCveResult.component = CveComponent.fromJson(reader);
                } else if ("severity".equals(fieldName)) {
                    deserializedCveResult.severity = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedCveResult.name = reader.getString();
                } else if ("cvssScore".equals(fieldName)) {
                    deserializedCveResult.cvssScore = reader.getString();
                } else if ("cvssVersion".equals(fieldName)) {
                    deserializedCveResult.cvssVersion = reader.getString();
                } else if ("cvssV2Score".equals(fieldName)) {
                    deserializedCveResult.cvssV2Score = reader.getString();
                } else if ("cvssV3Score".equals(fieldName)) {
                    deserializedCveResult.cvssV3Score = reader.getString();
                } else if ("links".equals(fieldName)) {
                    List<CveLink> links = reader.readArray(reader1 -> CveLink.fromJson(reader1));
                    deserializedCveResult.links = links;
                } else if ("description".equals(fieldName)) {
                    deserializedCveResult.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCveResult;
        });
    }
}
