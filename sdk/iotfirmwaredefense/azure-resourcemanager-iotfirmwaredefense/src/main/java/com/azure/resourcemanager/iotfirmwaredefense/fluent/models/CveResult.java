// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.iotfirmwaredefense.models.CveComponent;
import com.azure.resourcemanager.iotfirmwaredefense.models.CveLink;
import com.azure.resourcemanager.iotfirmwaredefense.models.CvssScore;
import com.azure.resourcemanager.iotfirmwaredefense.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * Details of a CVE detected in firmware.
 */
@Immutable
public final class CveResult implements JsonSerializable<CveResult> {
    /*
     * ID of the CVE result.
     */
    private String cveId;

    /*
     * ID of the affected SBOM component.
     */
    private String componentId;

    /*
     * Name of the affected SBOM component.
     */
    private String componentName;

    /*
     * Version of the affected SBOM component.
     */
    private String componentVersion;

    /*
     * Severity of the CVE.
     */
    private String severity;

    /*
     * Name of the CVE.
     */
    private String cveName;

    /*
     * Legacy property for what is now componentName
     */
    private CveComponent component;

    /*
     * Legacy property for the effective CVE score.
     */
    private String cvssScore;

    /*
     * Legacy property for the CVE CVSS version 2 score, if one existed.
     */
    private String cvssV2Score;

    /*
     * Legacy property for the CVE CVSS version 3 score, if one existed.
     */
    private String cvssV3Score;

    /*
     * Legacy property for the what CVSS version score was stored in the cvssScore property
     */
    private String cvssVersion;

    /*
     * The most recent CVSS score of the CVE.
     */
    private Double effectiveCvssScore;

    /*
     * The version of the effectiveCvssScore property.
     */
    private Integer effectiveCvssVersion;

    /*
     * All known CVSS scores for the CVE.
     */
    private List<CvssScore> cvssScores;

    /*
     * The list of reference links for the CVE.
     */
    private List<CveLink> links;

    /*
     * The CVE description.
     */
    private String description;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of CveResult class.
     */
    private CveResult() {
    }

    /**
     * Get the cveId property: ID of the CVE result.
     * 
     * @return the cveId value.
     */
    public String cveId() {
        return this.cveId;
    }

    /**
     * Get the componentId property: ID of the affected SBOM component.
     * 
     * @return the componentId value.
     */
    public String componentId() {
        return this.componentId;
    }

    /**
     * Get the componentName property: Name of the affected SBOM component.
     * 
     * @return the componentName value.
     */
    public String componentName() {
        return this.componentName;
    }

    /**
     * Get the componentVersion property: Version of the affected SBOM component.
     * 
     * @return the componentVersion value.
     */
    public String componentVersion() {
        return this.componentVersion;
    }

    /**
     * Get the severity property: Severity of the CVE.
     * 
     * @return the severity value.
     */
    public String severity() {
        return this.severity;
    }

    /**
     * Get the cveName property: Name of the CVE.
     * 
     * @return the cveName value.
     */
    public String cveName() {
        return this.cveName;
    }

    /**
     * Get the component property: Legacy property for what is now componentName.
     * 
     * @return the component value.
     */
    public CveComponent component() {
        return this.component;
    }

    /**
     * Get the cvssScore property: Legacy property for the effective CVE score.
     * 
     * @return the cvssScore value.
     */
    public String cvssScore() {
        return this.cvssScore;
    }

    /**
     * Get the cvssV2Score property: Legacy property for the CVE CVSS version 2 score, if one existed.
     * 
     * @return the cvssV2Score value.
     */
    public String cvssV2Score() {
        return this.cvssV2Score;
    }

    /**
     * Get the cvssV3Score property: Legacy property for the CVE CVSS version 3 score, if one existed.
     * 
     * @return the cvssV3Score value.
     */
    public String cvssV3Score() {
        return this.cvssV3Score;
    }

    /**
     * Get the cvssVersion property: Legacy property for the what CVSS version score was stored in the cvssScore
     * property.
     * 
     * @return the cvssVersion value.
     */
    public String cvssVersion() {
        return this.cvssVersion;
    }

    /**
     * Get the effectiveCvssScore property: The most recent CVSS score of the CVE.
     * 
     * @return the effectiveCvssScore value.
     */
    public Double effectiveCvssScore() {
        return this.effectiveCvssScore;
    }

    /**
     * Get the effectiveCvssVersion property: The version of the effectiveCvssScore property.
     * 
     * @return the effectiveCvssVersion value.
     */
    public Integer effectiveCvssVersion() {
        return this.effectiveCvssVersion;
    }

    /**
     * Get the cvssScores property: All known CVSS scores for the CVE.
     * 
     * @return the cvssScores value.
     */
    public List<CvssScore> cvssScores() {
        return this.cvssScores;
    }

    /**
     * Get the links property: The list of reference links for the CVE.
     * 
     * @return the links value.
     */
    public List<CveLink> links() {
        return this.links;
    }

    /**
     * Get the description property: The CVE description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (component() != null) {
            component().validate();
        }
        if (cvssScores() != null) {
            cvssScores().forEach(e -> e.validate());
        }
        if (links() != null) {
            links().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("cveId", this.cveId);
        jsonWriter.writeStringField("componentId", this.componentId);
        jsonWriter.writeStringField("componentName", this.componentName);
        jsonWriter.writeStringField("componentVersion", this.componentVersion);
        jsonWriter.writeStringField("severity", this.severity);
        jsonWriter.writeStringField("cveName", this.cveName);
        jsonWriter.writeJsonField("component", this.component);
        jsonWriter.writeStringField("cvssScore", this.cvssScore);
        jsonWriter.writeStringField("cvssV2Score", this.cvssV2Score);
        jsonWriter.writeStringField("cvssV3Score", this.cvssV3Score);
        jsonWriter.writeStringField("cvssVersion", this.cvssVersion);
        jsonWriter.writeNumberField("effectiveCvssScore", this.effectiveCvssScore);
        jsonWriter.writeNumberField("effectiveCvssVersion", this.effectiveCvssVersion);
        jsonWriter.writeArrayField("cvssScores", this.cvssScores, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CveResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CveResult if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the CveResult.
     */
    public static CveResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CveResult deserializedCveResult = new CveResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cveId".equals(fieldName)) {
                    deserializedCveResult.cveId = reader.getString();
                } else if ("componentId".equals(fieldName)) {
                    deserializedCveResult.componentId = reader.getString();
                } else if ("componentName".equals(fieldName)) {
                    deserializedCveResult.componentName = reader.getString();
                } else if ("componentVersion".equals(fieldName)) {
                    deserializedCveResult.componentVersion = reader.getString();
                } else if ("severity".equals(fieldName)) {
                    deserializedCveResult.severity = reader.getString();
                } else if ("cveName".equals(fieldName)) {
                    deserializedCveResult.cveName = reader.getString();
                } else if ("component".equals(fieldName)) {
                    deserializedCveResult.component = CveComponent.fromJson(reader);
                } else if ("cvssScore".equals(fieldName)) {
                    deserializedCveResult.cvssScore = reader.getString();
                } else if ("cvssV2Score".equals(fieldName)) {
                    deserializedCveResult.cvssV2Score = reader.getString();
                } else if ("cvssV3Score".equals(fieldName)) {
                    deserializedCveResult.cvssV3Score = reader.getString();
                } else if ("cvssVersion".equals(fieldName)) {
                    deserializedCveResult.cvssVersion = reader.getString();
                } else if ("effectiveCvssScore".equals(fieldName)) {
                    deserializedCveResult.effectiveCvssScore = reader.getNullable(JsonReader::getDouble);
                } else if ("effectiveCvssVersion".equals(fieldName)) {
                    deserializedCveResult.effectiveCvssVersion = reader.getNullable(JsonReader::getInt);
                } else if ("cvssScores".equals(fieldName)) {
                    List<CvssScore> cvssScores = reader.readArray(reader1 -> CvssScore.fromJson(reader1));
                    deserializedCveResult.cvssScores = cvssScores;
                } else if ("links".equals(fieldName)) {
                    List<CveLink> links = reader.readArray(reader1 -> CveLink.fromJson(reader1));
                    deserializedCveResult.links = links;
                } else if ("description".equals(fieldName)) {
                    deserializedCveResult.description = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedCveResult.provisioningState = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCveResult;
        });
    }
}
