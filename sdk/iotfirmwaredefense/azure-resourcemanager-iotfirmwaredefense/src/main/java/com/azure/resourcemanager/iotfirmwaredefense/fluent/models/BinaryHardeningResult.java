// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.iotfirmwaredefense.models.BinaryHardeningFeatures;
import com.azure.resourcemanager.iotfirmwaredefense.models.ExecutableClass;
import com.azure.resourcemanager.iotfirmwaredefense.models.ProvisioningState;
import java.io.IOException;

/**
 * Binary hardening of a firmware.
 */
@Immutable
public final class BinaryHardeningResult implements JsonSerializable<BinaryHardeningResult> {
    /*
     * ID for the binary hardening result.
     */
    private String binaryHardeningId;

    /*
     * The security hardening features of the binary.
     */
    private BinaryHardeningFeatures securityHardeningFeatures;

    /*
     * The architecture of the binary being reported on.
     */
    private String executableArchitecture;

    /*
     * The path to the binary in the firmware.
     */
    private String filePath;

    /*
     * The executable class to indicate 32 or 64 bit.
     */
    private ExecutableClass executableClass;

    /*
     * The runpath property of the uploaded binary, which is a method of specifying additional paths to load objects at
     * runtime.
     */
    private String runpath;

    /*
     * The rpath property of the uploaded binary, which is a deprecated method of specifying additional paths to load
     * objects at runtime.
     */
    private String rpath;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of BinaryHardeningResult class.
     */
    private BinaryHardeningResult() {
    }

    /**
     * Get the binaryHardeningId property: ID for the binary hardening result.
     * 
     * @return the binaryHardeningId value.
     */
    public String binaryHardeningId() {
        return this.binaryHardeningId;
    }

    /**
     * Get the securityHardeningFeatures property: The security hardening features of the binary.
     * 
     * @return the securityHardeningFeatures value.
     */
    public BinaryHardeningFeatures securityHardeningFeatures() {
        return this.securityHardeningFeatures;
    }

    /**
     * Get the executableArchitecture property: The architecture of the binary being reported on.
     * 
     * @return the executableArchitecture value.
     */
    public String executableArchitecture() {
        return this.executableArchitecture;
    }

    /**
     * Get the filePath property: The path to the binary in the firmware.
     * 
     * @return the filePath value.
     */
    public String filePath() {
        return this.filePath;
    }

    /**
     * Get the executableClass property: The executable class to indicate 32 or 64 bit.
     * 
     * @return the executableClass value.
     */
    public ExecutableClass executableClass() {
        return this.executableClass;
    }

    /**
     * Get the runpath property: The runpath property of the uploaded binary, which is a method of specifying additional
     * paths to load objects at runtime.
     * 
     * @return the runpath value.
     */
    public String runpath() {
        return this.runpath;
    }

    /**
     * Get the rpath property: The rpath property of the uploaded binary, which is a deprecated method of specifying
     * additional paths to load objects at runtime.
     * 
     * @return the rpath value.
     */
    public String rpath() {
        return this.rpath;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (securityHardeningFeatures() != null) {
            securityHardeningFeatures().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("binaryHardeningId", this.binaryHardeningId);
        jsonWriter.writeJsonField("securityHardeningFeatures", this.securityHardeningFeatures);
        jsonWriter.writeStringField("executableArchitecture", this.executableArchitecture);
        jsonWriter.writeStringField("filePath", this.filePath);
        jsonWriter.writeStringField("executableClass",
            this.executableClass == null ? null : this.executableClass.toString());
        jsonWriter.writeStringField("runpath", this.runpath);
        jsonWriter.writeStringField("rpath", this.rpath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BinaryHardeningResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BinaryHardeningResult if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BinaryHardeningResult.
     */
    public static BinaryHardeningResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BinaryHardeningResult deserializedBinaryHardeningResult = new BinaryHardeningResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("binaryHardeningId".equals(fieldName)) {
                    deserializedBinaryHardeningResult.binaryHardeningId = reader.getString();
                } else if ("securityHardeningFeatures".equals(fieldName)) {
                    deserializedBinaryHardeningResult.securityHardeningFeatures
                        = BinaryHardeningFeatures.fromJson(reader);
                } else if ("executableArchitecture".equals(fieldName)) {
                    deserializedBinaryHardeningResult.executableArchitecture = reader.getString();
                } else if ("filePath".equals(fieldName)) {
                    deserializedBinaryHardeningResult.filePath = reader.getString();
                } else if ("executableClass".equals(fieldName)) {
                    deserializedBinaryHardeningResult.executableClass = ExecutableClass.fromString(reader.getString());
                } else if ("runpath".equals(fieldName)) {
                    deserializedBinaryHardeningResult.runpath = reader.getString();
                } else if ("rpath".equals(fieldName)) {
                    deserializedBinaryHardeningResult.rpath = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedBinaryHardeningResult.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBinaryHardeningResult;
        });
    }
}
