// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Binary hardening summary percentages. */
@Fluent
public final class BinaryHardeningSummaryInner {
    /*
     * Total number of binaries that were analyzed
     */
    @JsonProperty(value = "totalFiles")
    private Long totalFiles;

    /*
     * NX summary percentage
     */
    @JsonProperty(value = "nx")
    private Integer nx;

    /*
     * PIE summary percentage
     */
    @JsonProperty(value = "pie")
    private Integer pie;

    /*
     * RELRO summary percentage
     */
    @JsonProperty(value = "relro")
    private Integer relro;

    /*
     * Canary summary percentage
     */
    @JsonProperty(value = "canary")
    private Integer canary;

    /*
     * Stripped summary percentage
     */
    @JsonProperty(value = "stripped")
    private Integer stripped;

    /** Creates an instance of BinaryHardeningSummaryInner class. */
    public BinaryHardeningSummaryInner() {
    }

    /**
     * Get the totalFiles property: Total number of binaries that were analyzed.
     *
     * @return the totalFiles value.
     */
    public Long totalFiles() {
        return this.totalFiles;
    }

    /**
     * Set the totalFiles property: Total number of binaries that were analyzed.
     *
     * @param totalFiles the totalFiles value to set.
     * @return the BinaryHardeningSummaryInner object itself.
     */
    public BinaryHardeningSummaryInner withTotalFiles(Long totalFiles) {
        this.totalFiles = totalFiles;
        return this;
    }

    /**
     * Get the nx property: NX summary percentage.
     *
     * @return the nx value.
     */
    public Integer nx() {
        return this.nx;
    }

    /**
     * Set the nx property: NX summary percentage.
     *
     * @param nx the nx value to set.
     * @return the BinaryHardeningSummaryInner object itself.
     */
    public BinaryHardeningSummaryInner withNx(Integer nx) {
        this.nx = nx;
        return this;
    }

    /**
     * Get the pie property: PIE summary percentage.
     *
     * @return the pie value.
     */
    public Integer pie() {
        return this.pie;
    }

    /**
     * Set the pie property: PIE summary percentage.
     *
     * @param pie the pie value to set.
     * @return the BinaryHardeningSummaryInner object itself.
     */
    public BinaryHardeningSummaryInner withPie(Integer pie) {
        this.pie = pie;
        return this;
    }

    /**
     * Get the relro property: RELRO summary percentage.
     *
     * @return the relro value.
     */
    public Integer relro() {
        return this.relro;
    }

    /**
     * Set the relro property: RELRO summary percentage.
     *
     * @param relro the relro value to set.
     * @return the BinaryHardeningSummaryInner object itself.
     */
    public BinaryHardeningSummaryInner withRelro(Integer relro) {
        this.relro = relro;
        return this;
    }

    /**
     * Get the canary property: Canary summary percentage.
     *
     * @return the canary value.
     */
    public Integer canary() {
        return this.canary;
    }

    /**
     * Set the canary property: Canary summary percentage.
     *
     * @param canary the canary value to set.
     * @return the BinaryHardeningSummaryInner object itself.
     */
    public BinaryHardeningSummaryInner withCanary(Integer canary) {
        this.canary = canary;
        return this;
    }

    /**
     * Get the stripped property: Stripped summary percentage.
     *
     * @return the stripped value.
     */
    public Integer stripped() {
        return this.stripped;
    }

    /**
     * Set the stripped property: Stripped summary percentage.
     *
     * @param stripped the stripped value to set.
     * @return the BinaryHardeningSummaryInner object itself.
     */
    public BinaryHardeningSummaryInner withStripped(Integer stripped) {
        this.stripped = stripped;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
