// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.models;

import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * Activities for which the cryptographic certificate can be used.
 */
public final class CertificateUsage extends ExpandableStringEnum<CertificateUsage> {
    /**
     * This certificate can be used to add a signature to a message.
     */
    public static final CertificateUsage DIGITAL_SIGNATURE = fromString("digitalSignature");

    /**
     * This certificates provides a non-repudiation service that protects against false denial of a message.
     */
    public static final CertificateUsage NON_REPUDIATION = fromString("nonRepudiation");

    /**
     * A synonym for NonRepudiation used in newer x509 certificates.
     */
    public static final CertificateUsage CONTENT_COMMITMENT = fromString("contentCommitment");

    /**
     * This certificate can be used to encrypt a private or secret key.
     */
    public static final CertificateUsage KEY_ENCIPHERMENT = fromString("keyEncipherment");

    /**
     * This certificate can be used to decrypt a private or secret key.
     */
    public static final CertificateUsage DATA_ENCIPHERMENT = fromString("dataEncipherment");

    /**
     * This certificate can be used to perform a key agreement, such as with a Diffie-Hellman key exchange.
     */
    public static final CertificateUsage KEY_AGREEMENT = fromString("keyAgreement");

    /**
     * This certificate can be used to verify a other public keys.
     */
    public static final CertificateUsage KEY_CERT_SIGN = fromString("keyCertSign");

    /**
     * This certificate can be used to verify a certificate revocation list.
     */
    public static final CertificateUsage CRLSIGN = fromString("crlSign");

    /**
     * This certificate can be only be used to encrypt data.
     */
    public static final CertificateUsage ENCIPHER_ONLY = fromString("encipherOnly");

    /**
     * This certificate can only be used to decrypt data.
     */
    public static final CertificateUsage DECIPHER_ONLY = fromString("decipherOnly");

    /**
     * This certificate can be used to authenticate a server in a TLS/SSL connection.
     */
    public static final CertificateUsage SERVER_AUTHENTICATION = fromString("serverAuth");

    /**
     * This certificate can be used to authenticate a client in a TLS/SSL connection.
     */
    public static final CertificateUsage CLIENT_AUTHENTICATION = fromString("clientAuth");

    /**
     * This certificate can be used to authenticate a code object.
     */
    public static final CertificateUsage CODE_SIGNING = fromString("codeSigning");

    /**
     * This certificate can be used to authenticate an email address.
     */
    public static final CertificateUsage EMAIL_PROTECTION = fromString("emailProtection");

    /**
     * This certificate binds the hash of an object to a time.
     */
    public static final CertificateUsage TIME_STAMPING = fromString("timeStamping");

    /**
     * This certificate can be used to sign OCSP responses.
     */
    public static final CertificateUsage OCSPSIGNING = fromString("ocspSigning");

    /**
     * Creates a new instance of CertificateUsage value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Deprecated
    public CertificateUsage() {
    }

    /**
     * Creates or finds a CertificateUsage from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding CertificateUsage.
     */
    public static CertificateUsage fromString(String name) {
        return fromString(name, CertificateUsage.class);
    }

    /**
     * Gets known CertificateUsage values.
     * 
     * @return known CertificateUsage values.
     */
    public static Collection<CertificateUsage> values() {
        return values(CertificateUsage.class);
    }
}
