// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.iotfirmwaredefense.models.ProvisioningState;
import java.io.IOException;

/**
 * Properties of a workspaces usage metrics.
 */
@Immutable
public final class UsageMetricProperties implements JsonSerializable<UsageMetricProperties> {
    /*
     * The number of firmware analysis jobs that have been submitted in the current month.
     */
    private long monthlyFirmwareUploadCount;

    /*
     * The total number of firmwares that are in the workspace.
     */
    private long totalFirmwareCount;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of UsageMetricProperties class.
     */
    private UsageMetricProperties() {
    }

    /**
     * Get the monthlyFirmwareUploadCount property: The number of firmware analysis jobs that have been submitted in the
     * current month.
     * 
     * @return the monthlyFirmwareUploadCount value.
     */
    public long monthlyFirmwareUploadCount() {
        return this.monthlyFirmwareUploadCount;
    }

    /**
     * Get the totalFirmwareCount property: The total number of firmwares that are in the workspace.
     * 
     * @return the totalFirmwareCount value.
     */
    public long totalFirmwareCount() {
        return this.totalFirmwareCount;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UsageMetricProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UsageMetricProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UsageMetricProperties.
     */
    public static UsageMetricProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UsageMetricProperties deserializedUsageMetricProperties = new UsageMetricProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("monthlyFirmwareUploadCount".equals(fieldName)) {
                    deserializedUsageMetricProperties.monthlyFirmwareUploadCount = reader.getLong();
                } else if ("totalFirmwareCount".equals(fieldName)) {
                    deserializedUsageMetricProperties.totalFirmwareCount = reader.getLong();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedUsageMetricProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUsageMetricProperties;
        });
    }
}
