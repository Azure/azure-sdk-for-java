// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of a matching paired key or certificate.
 */
@Immutable
public final class PairedKey implements JsonSerializable<PairedKey> {
    /*
     * ID of the paired key or certificate.
     */
    private String pairedKeyId;

    /*
     * The type indicating whether the paired object is a key or certificate.
     */
    private String type;

    /**
     * Creates an instance of PairedKey class.
     */
    private PairedKey() {
    }

    /**
     * Get the pairedKeyId property: ID of the paired key or certificate.
     * 
     * @return the pairedKeyId value.
     */
    public String pairedKeyId() {
        return this.pairedKeyId;
    }

    /**
     * Get the type property: The type indicating whether the paired object is a key or certificate.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("pairedKeyId", this.pairedKeyId);
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PairedKey from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PairedKey if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the PairedKey.
     */
    public static PairedKey fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PairedKey deserializedPairedKey = new PairedKey();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("pairedKeyId".equals(fieldName)) {
                    deserializedPairedKey.pairedKeyId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedPairedKey.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPairedKey;
        });
    }
}
