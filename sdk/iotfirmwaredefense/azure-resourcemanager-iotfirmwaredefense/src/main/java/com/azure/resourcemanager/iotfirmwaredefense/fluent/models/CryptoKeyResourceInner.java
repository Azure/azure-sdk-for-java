// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.iotfirmwaredefense.models.PairedKey;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Crypto key resource.
 */
@Fluent
public final class CryptoKeyResourceInner extends ProxyResource {
    /*
     * The properties of a crypto key found within a firmware image
     */
    @JsonProperty(value = "properties")
    private CryptoKey innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of CryptoKeyResourceInner class.
     */
    public CryptoKeyResourceInner() {
    }

    /**
     * Get the innerProperties property: The properties of a crypto key found within a firmware image.
     * 
     * @return the innerProperties value.
     */
    private CryptoKey innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the cryptoKeyId property: ID for the key result.
     * 
     * @return the cryptoKeyId value.
     */
    public String cryptoKeyId() {
        return this.innerProperties() == null ? null : this.innerProperties().cryptoKeyId();
    }

    /**
     * Set the cryptoKeyId property: ID for the key result.
     * 
     * @param cryptoKeyId the cryptoKeyId value to set.
     * @return the CryptoKeyResourceInner object itself.
     */
    public CryptoKeyResourceInner withCryptoKeyId(String cryptoKeyId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoKey();
        }
        this.innerProperties().withCryptoKeyId(cryptoKeyId);
        return this;
    }

    /**
     * Get the keyType property: Type of the key (public or private).
     * 
     * @return the keyType value.
     */
    public String keyType() {
        return this.innerProperties() == null ? null : this.innerProperties().keyType();
    }

    /**
     * Set the keyType property: Type of the key (public or private).
     * 
     * @param keyType the keyType value to set.
     * @return the CryptoKeyResourceInner object itself.
     */
    public CryptoKeyResourceInner withKeyType(String keyType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoKey();
        }
        this.innerProperties().withKeyType(keyType);
        return this;
    }

    /**
     * Get the keySize property: Size of the key in bits.
     * 
     * @return the keySize value.
     */
    public Long keySize() {
        return this.innerProperties() == null ? null : this.innerProperties().keySize();
    }

    /**
     * Set the keySize property: Size of the key in bits.
     * 
     * @param keySize the keySize value to set.
     * @return the CryptoKeyResourceInner object itself.
     */
    public CryptoKeyResourceInner withKeySize(Long keySize) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoKey();
        }
        this.innerProperties().withKeySize(keySize);
        return this;
    }

    /**
     * Get the keyAlgorithm property: Key algorithm name.
     * 
     * @return the keyAlgorithm value.
     */
    public String keyAlgorithm() {
        return this.innerProperties() == null ? null : this.innerProperties().keyAlgorithm();
    }

    /**
     * Set the keyAlgorithm property: Key algorithm name.
     * 
     * @param keyAlgorithm the keyAlgorithm value to set.
     * @return the CryptoKeyResourceInner object itself.
     */
    public CryptoKeyResourceInner withKeyAlgorithm(String keyAlgorithm) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoKey();
        }
        this.innerProperties().withKeyAlgorithm(keyAlgorithm);
        return this;
    }

    /**
     * Get the usage property: Functions the key can fulfill.
     * 
     * @return the usage value.
     */
    public List<String> usage() {
        return this.innerProperties() == null ? null : this.innerProperties().usage();
    }

    /**
     * Set the usage property: Functions the key can fulfill.
     * 
     * @param usage the usage value to set.
     * @return the CryptoKeyResourceInner object itself.
     */
    public CryptoKeyResourceInner withUsage(List<String> usage) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoKey();
        }
        this.innerProperties().withUsage(usage);
        return this;
    }

    /**
     * Get the filePaths property: List of files where this key was found.
     * 
     * @return the filePaths value.
     */
    public List<String> filePaths() {
        return this.innerProperties() == null ? null : this.innerProperties().filePaths();
    }

    /**
     * Get the pairedKey property: A matching paired key or certificate.
     * 
     * @return the pairedKey value.
     */
    public PairedKey pairedKey() {
        return this.innerProperties() == null ? null : this.innerProperties().pairedKey();
    }

    /**
     * Set the pairedKey property: A matching paired key or certificate.
     * 
     * @param pairedKey the pairedKey value to set.
     * @return the CryptoKeyResourceInner object itself.
     */
    public CryptoKeyResourceInner withPairedKey(PairedKey pairedKey) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoKey();
        }
        this.innerProperties().withPairedKey(pairedKey);
        return this;
    }

    /**
     * Get the isShortKeySize property: Indicates the key size is considered too small to be secure for the algorithm.
     * 
     * @return the isShortKeySize value.
     */
    public Boolean isShortKeySize() {
        return this.innerProperties() == null ? null : this.innerProperties().isShortKeySize();
    }

    /**
     * Set the isShortKeySize property: Indicates the key size is considered too small to be secure for the algorithm.
     * 
     * @param isShortKeySize the isShortKeySize value to set.
     * @return the CryptoKeyResourceInner object itself.
     */
    public CryptoKeyResourceInner withIsShortKeySize(Boolean isShortKeySize) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoKey();
        }
        this.innerProperties().withIsShortKeySize(isShortKeySize);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
