// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.iotfirmwaredefense.models.CryptoKeyType;
import com.azure.resourcemanager.iotfirmwaredefense.models.PairedKey;
import com.azure.resourcemanager.iotfirmwaredefense.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * The object representing a firmware analysis crypto key resource.
 */
@Immutable
public final class CryptoKeyResourceInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    private CryptoKey innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of CryptoKeyResourceInner class.
     */
    private CryptoKeyResourceInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private CryptoKey innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the cryptoKeyId property: ID for the key result.
     * 
     * @return the cryptoKeyId value.
     */
    public String cryptoKeyId() {
        return this.innerProperties() == null ? null : this.innerProperties().cryptoKeyId();
    }

    /**
     * Get the keyType property: Type of the key (public or private).
     * 
     * @return the keyType value.
     */
    public CryptoKeyType keyType() {
        return this.innerProperties() == null ? null : this.innerProperties().keyType();
    }

    /**
     * Get the cryptoKeySize property: Size of the key in bits.
     * 
     * @return the cryptoKeySize value.
     */
    public Long cryptoKeySize() {
        return this.innerProperties() == null ? null : this.innerProperties().cryptoKeySize();
    }

    /**
     * Get the keyAlgorithm property: Key algorithm name.
     * 
     * @return the keyAlgorithm value.
     */
    public String keyAlgorithm() {
        return this.innerProperties() == null ? null : this.innerProperties().keyAlgorithm();
    }

    /**
     * Get the usage property: Functions the key can fulfill.
     * 
     * @return the usage value.
     */
    public List<String> usage() {
        return this.innerProperties() == null ? null : this.innerProperties().usage();
    }

    /**
     * Get the filePaths property: List of files where this key was found.
     * 
     * @return the filePaths value.
     */
    public List<String> filePaths() {
        return this.innerProperties() == null ? null : this.innerProperties().filePaths();
    }

    /**
     * Get the pairedKey property: A matching paired key or certificate.
     * 
     * @return the pairedKey value.
     */
    public PairedKey pairedKey() {
        return this.innerProperties() == null ? null : this.innerProperties().pairedKey();
    }

    /**
     * Get the isShortKeySize property: Indicates the key size is considered too small to be secure for the algorithm
     * according to NIST guidance.
     * 
     * @return the isShortKeySize value.
     */
    public Boolean isShortKeySize() {
        return this.innerProperties() == null ? null : this.innerProperties().isShortKeySize();
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CryptoKeyResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CryptoKeyResourceInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CryptoKeyResourceInner.
     */
    public static CryptoKeyResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CryptoKeyResourceInner deserializedCryptoKeyResourceInner = new CryptoKeyResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedCryptoKeyResourceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedCryptoKeyResourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedCryptoKeyResourceInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedCryptoKeyResourceInner.innerProperties = CryptoKey.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedCryptoKeyResourceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCryptoKeyResourceInner;
        });
    }
}
