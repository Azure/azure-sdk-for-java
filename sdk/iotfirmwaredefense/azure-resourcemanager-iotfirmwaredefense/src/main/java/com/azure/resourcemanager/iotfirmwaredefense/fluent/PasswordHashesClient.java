// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.models.PasswordHashResourceInner;

/**
 * An instance of this class provides access to all the operations defined in PasswordHashesClient.
 */
public interface PasswordHashesClient {
    /**
     * Lists password hash analysis results of a firmware.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of password hash results as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PasswordHashResourceInner> listByFirmware(String resourceGroupName, String workspaceName,
        String firmwareId);

    /**
     * Lists password hash analysis results of a firmware.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of password hash results as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PasswordHashResourceInner> listByFirmware(String resourceGroupName, String workspaceName,
        String firmwareId, Context context);
}
