// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Password hash resource.
 */
@Fluent
public final class PasswordHashResourceInner extends ProxyResource {
    /*
     * The properties of a password hash found within a firmware image
     */
    private PasswordHash innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of PasswordHashResourceInner class.
     */
    public PasswordHashResourceInner() {
    }

    /**
     * Get the innerProperties property: The properties of a password hash found within a firmware image.
     * 
     * @return the innerProperties value.
     */
    private PasswordHash innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the passwordHashId property: ID for password hash.
     * 
     * @return the passwordHashId value.
     */
    public String passwordHashId() {
        return this.innerProperties() == null ? null : this.innerProperties().passwordHashId();
    }

    /**
     * Set the passwordHashId property: ID for password hash.
     * 
     * @param passwordHashId the passwordHashId value to set.
     * @return the PasswordHashResourceInner object itself.
     */
    public PasswordHashResourceInner withPasswordHashId(String passwordHashId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PasswordHash();
        }
        this.innerProperties().withPasswordHashId(passwordHashId);
        return this;
    }

    /**
     * Get the filePath property: File path of the password hash.
     * 
     * @return the filePath value.
     */
    public String filePath() {
        return this.innerProperties() == null ? null : this.innerProperties().filePath();
    }

    /**
     * Set the filePath property: File path of the password hash.
     * 
     * @param filePath the filePath value to set.
     * @return the PasswordHashResourceInner object itself.
     */
    public PasswordHashResourceInner withFilePath(String filePath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PasswordHash();
        }
        this.innerProperties().withFilePath(filePath);
        return this;
    }

    /**
     * Get the salt property: Salt of the password hash.
     * 
     * @return the salt value.
     */
    public String salt() {
        return this.innerProperties() == null ? null : this.innerProperties().salt();
    }

    /**
     * Set the salt property: Salt of the password hash.
     * 
     * @param salt the salt value to set.
     * @return the PasswordHashResourceInner object itself.
     */
    public PasswordHashResourceInner withSalt(String salt) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PasswordHash();
        }
        this.innerProperties().withSalt(salt);
        return this;
    }

    /**
     * Get the hash property: Hash of the password.
     * 
     * @return the hash value.
     */
    public String hash() {
        return this.innerProperties() == null ? null : this.innerProperties().hash();
    }

    /**
     * Set the hash property: Hash of the password.
     * 
     * @param hash the hash value to set.
     * @return the PasswordHashResourceInner object itself.
     */
    public PasswordHashResourceInner withHash(String hash) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PasswordHash();
        }
        this.innerProperties().withHash(hash);
        return this;
    }

    /**
     * Get the context property: Context of password hash.
     * 
     * @return the context value.
     */
    public String context() {
        return this.innerProperties() == null ? null : this.innerProperties().context();
    }

    /**
     * Set the context property: Context of password hash.
     * 
     * @param context the context value to set.
     * @return the PasswordHashResourceInner object itself.
     */
    public PasswordHashResourceInner withContext(String context) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PasswordHash();
        }
        this.innerProperties().withContext(context);
        return this;
    }

    /**
     * Get the username property: User name of password hash.
     * 
     * @return the username value.
     */
    public String username() {
        return this.innerProperties() == null ? null : this.innerProperties().username();
    }

    /**
     * Set the username property: User name of password hash.
     * 
     * @param username the username value to set.
     * @return the PasswordHashResourceInner object itself.
     */
    public PasswordHashResourceInner withUsername(String username) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PasswordHash();
        }
        this.innerProperties().withUsername(username);
        return this;
    }

    /**
     * Get the algorithm property: Algorithm of the password hash.
     * 
     * @return the algorithm value.
     */
    public String algorithm() {
        return this.innerProperties() == null ? null : this.innerProperties().algorithm();
    }

    /**
     * Set the algorithm property: Algorithm of the password hash.
     * 
     * @param algorithm the algorithm value to set.
     * @return the PasswordHashResourceInner object itself.
     */
    public PasswordHashResourceInner withAlgorithm(String algorithm) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PasswordHash();
        }
        this.innerProperties().withAlgorithm(algorithm);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PasswordHashResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PasswordHashResourceInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PasswordHashResourceInner.
     */
    public static PasswordHashResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PasswordHashResourceInner deserializedPasswordHashResourceInner = new PasswordHashResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedPasswordHashResourceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedPasswordHashResourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedPasswordHashResourceInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedPasswordHashResourceInner.innerProperties = PasswordHash.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedPasswordHashResourceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPasswordHashResourceInner;
        });
    }
}
