// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.iotfirmwaredefense.models.PairedKey;
import java.io.IOException;
import java.util.List;

/**
 * Crypto key properties.
 */
@Fluent
public final class CryptoKey implements JsonSerializable<CryptoKey> {
    /*
     * ID for the key result.
     */
    private String cryptoKeyId;

    /*
     * Type of the key (public or private).
     */
    private String keyType;

    /*
     * Size of the key in bits.
     */
    private Long keySize;

    /*
     * Key algorithm name.
     */
    private String keyAlgorithm;

    /*
     * Functions the key can fulfill.
     */
    private List<String> usage;

    /*
     * List of files where this key was found.
     */
    private List<String> filePaths;

    /*
     * A matching paired key or certificate.
     */
    private PairedKey pairedKey;

    /*
     * Indicates the key size is considered too small to be secure for the algorithm.
     */
    private Boolean isShortKeySize;

    /**
     * Creates an instance of CryptoKey class.
     */
    public CryptoKey() {
    }

    /**
     * Get the cryptoKeyId property: ID for the key result.
     * 
     * @return the cryptoKeyId value.
     */
    public String cryptoKeyId() {
        return this.cryptoKeyId;
    }

    /**
     * Set the cryptoKeyId property: ID for the key result.
     * 
     * @param cryptoKeyId the cryptoKeyId value to set.
     * @return the CryptoKey object itself.
     */
    public CryptoKey withCryptoKeyId(String cryptoKeyId) {
        this.cryptoKeyId = cryptoKeyId;
        return this;
    }

    /**
     * Get the keyType property: Type of the key (public or private).
     * 
     * @return the keyType value.
     */
    public String keyType() {
        return this.keyType;
    }

    /**
     * Set the keyType property: Type of the key (public or private).
     * 
     * @param keyType the keyType value to set.
     * @return the CryptoKey object itself.
     */
    public CryptoKey withKeyType(String keyType) {
        this.keyType = keyType;
        return this;
    }

    /**
     * Get the keySize property: Size of the key in bits.
     * 
     * @return the keySize value.
     */
    public Long keySize() {
        return this.keySize;
    }

    /**
     * Set the keySize property: Size of the key in bits.
     * 
     * @param keySize the keySize value to set.
     * @return the CryptoKey object itself.
     */
    public CryptoKey withKeySize(Long keySize) {
        this.keySize = keySize;
        return this;
    }

    /**
     * Get the keyAlgorithm property: Key algorithm name.
     * 
     * @return the keyAlgorithm value.
     */
    public String keyAlgorithm() {
        return this.keyAlgorithm;
    }

    /**
     * Set the keyAlgorithm property: Key algorithm name.
     * 
     * @param keyAlgorithm the keyAlgorithm value to set.
     * @return the CryptoKey object itself.
     */
    public CryptoKey withKeyAlgorithm(String keyAlgorithm) {
        this.keyAlgorithm = keyAlgorithm;
        return this;
    }

    /**
     * Get the usage property: Functions the key can fulfill.
     * 
     * @return the usage value.
     */
    public List<String> usage() {
        return this.usage;
    }

    /**
     * Set the usage property: Functions the key can fulfill.
     * 
     * @param usage the usage value to set.
     * @return the CryptoKey object itself.
     */
    public CryptoKey withUsage(List<String> usage) {
        this.usage = usage;
        return this;
    }

    /**
     * Get the filePaths property: List of files where this key was found.
     * 
     * @return the filePaths value.
     */
    public List<String> filePaths() {
        return this.filePaths;
    }

    /**
     * Get the pairedKey property: A matching paired key or certificate.
     * 
     * @return the pairedKey value.
     */
    public PairedKey pairedKey() {
        return this.pairedKey;
    }

    /**
     * Set the pairedKey property: A matching paired key or certificate.
     * 
     * @param pairedKey the pairedKey value to set.
     * @return the CryptoKey object itself.
     */
    public CryptoKey withPairedKey(PairedKey pairedKey) {
        this.pairedKey = pairedKey;
        return this;
    }

    /**
     * Get the isShortKeySize property: Indicates the key size is considered too small to be secure for the algorithm.
     * 
     * @return the isShortKeySize value.
     */
    public Boolean isShortKeySize() {
        return this.isShortKeySize;
    }

    /**
     * Set the isShortKeySize property: Indicates the key size is considered too small to be secure for the algorithm.
     * 
     * @param isShortKeySize the isShortKeySize value to set.
     * @return the CryptoKey object itself.
     */
    public CryptoKey withIsShortKeySize(Boolean isShortKeySize) {
        this.isShortKeySize = isShortKeySize;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (pairedKey() != null) {
            pairedKey().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("cryptoKeyId", this.cryptoKeyId);
        jsonWriter.writeStringField("keyType", this.keyType);
        jsonWriter.writeNumberField("keySize", this.keySize);
        jsonWriter.writeStringField("keyAlgorithm", this.keyAlgorithm);
        jsonWriter.writeArrayField("usage", this.usage, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("pairedKey", this.pairedKey);
        jsonWriter.writeBooleanField("isShortKeySize", this.isShortKeySize);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CryptoKey from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CryptoKey if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the CryptoKey.
     */
    public static CryptoKey fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CryptoKey deserializedCryptoKey = new CryptoKey();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cryptoKeyId".equals(fieldName)) {
                    deserializedCryptoKey.cryptoKeyId = reader.getString();
                } else if ("keyType".equals(fieldName)) {
                    deserializedCryptoKey.keyType = reader.getString();
                } else if ("keySize".equals(fieldName)) {
                    deserializedCryptoKey.keySize = reader.getNullable(JsonReader::getLong);
                } else if ("keyAlgorithm".equals(fieldName)) {
                    deserializedCryptoKey.keyAlgorithm = reader.getString();
                } else if ("usage".equals(fieldName)) {
                    List<String> usage = reader.readArray(reader1 -> reader1.getString());
                    deserializedCryptoKey.usage = usage;
                } else if ("filePaths".equals(fieldName)) {
                    List<String> filePaths = reader.readArray(reader1 -> reader1.getString());
                    deserializedCryptoKey.filePaths = filePaths;
                } else if ("pairedKey".equals(fieldName)) {
                    deserializedCryptoKey.pairedKey = PairedKey.fromJson(reader);
                } else if ("isShortKeySize".equals(fieldName)) {
                    deserializedCryptoKey.isShortKeySize = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCryptoKey;
        });
    }
}
