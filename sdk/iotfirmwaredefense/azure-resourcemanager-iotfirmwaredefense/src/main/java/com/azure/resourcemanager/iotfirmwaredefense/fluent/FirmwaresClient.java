// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.models.BinaryHardeningInner;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.models.BinaryHardeningSummaryInner;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.models.ComponentInner;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.models.CryptoCertificateInner;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.models.CryptoCertificateSummaryInner;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.models.CryptoKeyInner;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.models.CryptoKeySummaryInner;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.models.CveInner;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.models.CveSummaryInner;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.models.FirmwareInner;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.models.FirmwareSummaryInner;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.models.PasswordHashInner;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.models.UrlTokenInner;
import com.azure.resourcemanager.iotfirmwaredefense.models.FirmwareUpdateDefinition;

/** An instance of this class provides access to all the operations defined in FirmwaresClient. */
public interface FirmwaresClient {
    /**
     * Lists all of firmwares inside a workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of firmwares as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FirmwareInner> listByWorkspace(String resourceGroupName, String workspaceName);

    /**
     * Lists all of firmwares inside a workspace.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of firmwares as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FirmwareInner> listByWorkspace(String resourceGroupName, String workspaceName, Context context);

    /**
     * The operation to create a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param firmware Details of the firmware being created or updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return firmware definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<FirmwareInner> createWithResponse(
        String resourceGroupName, String workspaceName, String firmwareId, FirmwareInner firmware, Context context);

    /**
     * The operation to create a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param firmware Details of the firmware being created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return firmware definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FirmwareInner create(String resourceGroupName, String workspaceName, String firmwareId, FirmwareInner firmware);

    /**
     * The operation to update firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param firmware Details of the firmware being created or updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return firmware definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<FirmwareInner> updateWithResponse(
        String resourceGroupName,
        String workspaceName,
        String firmwareId,
        FirmwareUpdateDefinition firmware,
        Context context);

    /**
     * The operation to update firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param firmware Details of the firmware being created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return firmware definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FirmwareInner update(
        String resourceGroupName, String workspaceName, String firmwareId, FirmwareUpdateDefinition firmware);

    /**
     * The operation to delete a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(
        String resourceGroupName, String workspaceName, String firmwareId, Context context);

    /**
     * The operation to delete a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String workspaceName, String firmwareId);

    /**
     * Get firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return firmware along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<FirmwareInner> getWithResponse(
        String resourceGroupName, String workspaceName, String firmwareId, Context context);

    /**
     * Get firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return firmware.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FirmwareInner get(String resourceGroupName, String workspaceName, String firmwareId);

    /**
     * The operation to a url for file download.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return url data for creating or accessing a blob file along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<UrlTokenInner> generateDownloadUrlWithResponse(
        String resourceGroupName, String workspaceName, String firmwareId, Context context);

    /**
     * The operation to a url for file download.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return url data for creating or accessing a blob file.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    UrlTokenInner generateDownloadUrl(String resourceGroupName, String workspaceName, String firmwareId);

    /**
     * The operation to a url for tar file download.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return url data for creating or accessing a blob file along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<UrlTokenInner> generateFilesystemDownloadUrlWithResponse(
        String resourceGroupName, String workspaceName, String firmwareId, Context context);

    /**
     * The operation to a url for tar file download.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return url data for creating or accessing a blob file.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    UrlTokenInner generateFilesystemDownloadUrl(String resourceGroupName, String workspaceName, String firmwareId);

    /**
     * The operation to get a scan summary.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summary result after scanning the firmware along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<FirmwareSummaryInner> generateSummaryWithResponse(
        String resourceGroupName, String workspaceName, String firmwareId, Context context);

    /**
     * The operation to get a scan summary.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summary result after scanning the firmware.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FirmwareSummaryInner generateSummary(String resourceGroupName, String workspaceName, String firmwareId);

    /**
     * The operation to list all components result for a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list result for components as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ComponentInner> listGenerateComponentList(
        String resourceGroupName, String workspaceName, String firmwareId);

    /**
     * The operation to list all components result for a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list result for components as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ComponentInner> listGenerateComponentList(
        String resourceGroupName, String workspaceName, String firmwareId, Context context);

    /**
     * The operation to get component details for a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return component of a firmware along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ComponentInner> generateComponentDetailsWithResponse(
        String resourceGroupName, String workspaceName, String firmwareId, Context context);

    /**
     * The operation to get component details for a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return component of a firmware.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ComponentInner generateComponentDetails(String resourceGroupName, String workspaceName, String firmwareId);

    /**
     * The operation to list all binary hardening result for a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list result for binary hardening as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BinaryHardeningInner> listGenerateBinaryHardeningList(
        String resourceGroupName, String workspaceName, String firmwareId);

    /**
     * The operation to list all binary hardening result for a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list result for binary hardening as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BinaryHardeningInner> listGenerateBinaryHardeningList(
        String resourceGroupName, String workspaceName, String firmwareId, Context context);

    /**
     * The operation to list the binary hardening summary percentages for a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return binary hardening summary percentages along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryHardeningSummaryInner> generateBinaryHardeningSummaryWithResponse(
        String resourceGroupName, String workspaceName, String firmwareId, Context context);

    /**
     * The operation to list the binary hardening summary percentages for a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return binary hardening summary percentages.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BinaryHardeningSummaryInner generateBinaryHardeningSummary(
        String resourceGroupName, String workspaceName, String firmwareId);

    /**
     * The operation to get binary hardening details for a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return binary hardening of a firmware along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryHardeningInner> generateBinaryHardeningDetailsWithResponse(
        String resourceGroupName, String workspaceName, String firmwareId, Context context);

    /**
     * The operation to get binary hardening details for a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return binary hardening of a firmware.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BinaryHardeningInner generateBinaryHardeningDetails(
        String resourceGroupName, String workspaceName, String firmwareId);

    /**
     * The operation to list all password hashes for a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return password hashes list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PasswordHashInner> listGeneratePasswordHashList(
        String resourceGroupName, String workspaceName, String firmwareId);

    /**
     * The operation to list all password hashes for a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return password hashes list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PasswordHashInner> listGeneratePasswordHashList(
        String resourceGroupName, String workspaceName, String firmwareId, Context context);

    /**
     * The operation to list all cve results for a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list result for CVE as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CveInner> listGenerateCveList(String resourceGroupName, String workspaceName, String firmwareId);

    /**
     * The operation to list all cve results for a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list result for CVE as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CveInner> listGenerateCveList(
        String resourceGroupName, String workspaceName, String firmwareId, Context context);

    /**
     * The operation to provide a high level summary of the CVEs reported for the firmware image.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cVE summary values along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CveSummaryInner> generateCveSummaryWithResponse(
        String resourceGroupName, String workspaceName, String firmwareId, Context context);

    /**
     * The operation to provide a high level summary of the CVEs reported for the firmware image.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cVE summary values.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CveSummaryInner generateCveSummary(String resourceGroupName, String workspaceName, String firmwareId);

    /**
     * The operation to provide a high level summary of the discovered cryptographic certificates reported for the
     * firmware image.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cryptographic certificate summary values along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CryptoCertificateSummaryInner> generateCryptoCertificateSummaryWithResponse(
        String resourceGroupName, String workspaceName, String firmwareId, Context context);

    /**
     * The operation to provide a high level summary of the discovered cryptographic certificates reported for the
     * firmware image.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cryptographic certificate summary values.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CryptoCertificateSummaryInner generateCryptoCertificateSummary(
        String resourceGroupName, String workspaceName, String firmwareId);

    /**
     * The operation to provide a high level summary of the discovered cryptographic keys reported for the firmware
     * image.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cryptographic key summary values along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CryptoKeySummaryInner> generateCryptoKeySummaryWithResponse(
        String resourceGroupName, String workspaceName, String firmwareId, Context context);

    /**
     * The operation to provide a high level summary of the discovered cryptographic keys reported for the firmware
     * image.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cryptographic key summary values.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CryptoKeySummaryInner generateCryptoKeySummary(String resourceGroupName, String workspaceName, String firmwareId);

    /**
     * The operation to list all crypto certificates for a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return crypto certificates list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CryptoCertificateInner> listGenerateCryptoCertificateList(
        String resourceGroupName, String workspaceName, String firmwareId);

    /**
     * The operation to list all crypto certificates for a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return crypto certificates list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CryptoCertificateInner> listGenerateCryptoCertificateList(
        String resourceGroupName, String workspaceName, String firmwareId, Context context);

    /**
     * The operation to list all crypto keys for a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return crypto keys list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CryptoKeyInner> listGenerateCryptoKeyList(
        String resourceGroupName, String workspaceName, String firmwareId);

    /**
     * The operation to list all crypto keys for a firmware.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the firmware analysis workspace.
     * @param firmwareId The id of the firmware.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return crypto keys list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CryptoKeyInner> listGenerateCryptoKeyList(
        String resourceGroupName, String workspaceName, String firmwareId, Context context);
}
