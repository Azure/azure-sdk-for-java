// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.models.FirmwareInner;
import java.util.List;

/**
 * An immutable client-side representation of Firmware.
 */
public interface Firmware {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the fileName property: File name for a firmware that user uploaded.
     * 
     * @return the fileName value.
     */
    String fileName();

    /**
     * Gets the vendor property: Firmware vendor.
     * 
     * @return the vendor value.
     */
    String vendor();

    /**
     * Gets the model property: Firmware model.
     * 
     * @return the model value.
     */
    String model();

    /**
     * Gets the version property: Firmware version.
     * 
     * @return the version value.
     */
    String version();

    /**
     * Gets the description property: User-specified description of the firmware.
     * 
     * @return the description value.
     */
    String description();

    /**
     * Gets the fileSize property: File size of the uploaded firmware image.
     * 
     * @return the fileSize value.
     */
    Long fileSize();

    /**
     * Gets the status property: The status of firmware scan.
     * 
     * @return the status value.
     */
    Status status();

    /**
     * Gets the statusMessages property: A list of errors or other messages generated during firmware analysis.
     * 
     * @return the statusMessages value.
     */
    List<StatusMessage> statusMessages();

    /**
     * Gets the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.iotfirmwaredefense.fluent.models.FirmwareInner object.
     * 
     * @return the inner object.
     */
    FirmwareInner innerModel();

    /**
     * The entirety of the Firmware definition.
     */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /**
     * The Firmware definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the Firmware definition.
         */
        interface Blank extends WithParentResource {
        }

        /**
         * The stage of the Firmware definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, workspaceName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param workspaceName The name of the firmware analysis workspace.
             * @return the next definition stage.
             */
            WithCreate withExistingWorkspace(String resourceGroupName, String workspaceName);
        }

        /**
         * The stage of the Firmware definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithFileName, DefinitionStages.WithVendor,
            DefinitionStages.WithModel, DefinitionStages.WithVersion, DefinitionStages.WithDescription,
            DefinitionStages.WithFileSize, DefinitionStages.WithStatus, DefinitionStages.WithStatusMessages {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            Firmware create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Firmware create(Context context);
        }

        /**
         * The stage of the Firmware definition allowing to specify fileName.
         */
        interface WithFileName {
            /**
             * Specifies the fileName property: File name for a firmware that user uploaded..
             * 
             * @param fileName File name for a firmware that user uploaded.
             * @return the next definition stage.
             */
            WithCreate withFileName(String fileName);
        }

        /**
         * The stage of the Firmware definition allowing to specify vendor.
         */
        interface WithVendor {
            /**
             * Specifies the vendor property: Firmware vendor..
             * 
             * @param vendor Firmware vendor.
             * @return the next definition stage.
             */
            WithCreate withVendor(String vendor);
        }

        /**
         * The stage of the Firmware definition allowing to specify model.
         */
        interface WithModel {
            /**
             * Specifies the model property: Firmware model..
             * 
             * @param model Firmware model.
             * @return the next definition stage.
             */
            WithCreate withModel(String model);
        }

        /**
         * The stage of the Firmware definition allowing to specify version.
         */
        interface WithVersion {
            /**
             * Specifies the version property: Firmware version..
             * 
             * @param version Firmware version.
             * @return the next definition stage.
             */
            WithCreate withVersion(String version);
        }

        /**
         * The stage of the Firmware definition allowing to specify description.
         */
        interface WithDescription {
            /**
             * Specifies the description property: User-specified description of the firmware..
             * 
             * @param description User-specified description of the firmware.
             * @return the next definition stage.
             */
            WithCreate withDescription(String description);
        }

        /**
         * The stage of the Firmware definition allowing to specify fileSize.
         */
        interface WithFileSize {
            /**
             * Specifies the fileSize property: File size of the uploaded firmware image..
             * 
             * @param fileSize File size of the uploaded firmware image.
             * @return the next definition stage.
             */
            WithCreate withFileSize(Long fileSize);
        }

        /**
         * The stage of the Firmware definition allowing to specify status.
         */
        interface WithStatus {
            /**
             * Specifies the status property: The status of firmware scan..
             * 
             * @param status The status of firmware scan.
             * @return the next definition stage.
             */
            WithCreate withStatus(Status status);
        }

        /**
         * The stage of the Firmware definition allowing to specify statusMessages.
         */
        interface WithStatusMessages {
            /**
             * Specifies the statusMessages property: A list of errors or other messages generated during firmware
             * analysis.
             * 
             * @param statusMessages A list of errors or other messages generated during firmware analysis.
             * @return the next definition stage.
             */
            WithCreate withStatusMessages(List<StatusMessage> statusMessages);
        }
    }

    /**
     * Begins update for the Firmware resource.
     * 
     * @return the stage of resource update.
     */
    Firmware.Update update();

    /**
     * The template for Firmware update.
     */
    interface Update extends UpdateStages.WithFileName, UpdateStages.WithVendor, UpdateStages.WithModel,
        UpdateStages.WithVersion, UpdateStages.WithDescription, UpdateStages.WithFileSize, UpdateStages.WithStatus,
        UpdateStages.WithStatusMessages {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        Firmware apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Firmware apply(Context context);
    }

    /**
     * The Firmware update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the Firmware update allowing to specify fileName.
         */
        interface WithFileName {
            /**
             * Specifies the fileName property: File name for a firmware that user uploaded..
             * 
             * @param fileName File name for a firmware that user uploaded.
             * @return the next definition stage.
             */
            Update withFileName(String fileName);
        }

        /**
         * The stage of the Firmware update allowing to specify vendor.
         */
        interface WithVendor {
            /**
             * Specifies the vendor property: Firmware vendor..
             * 
             * @param vendor Firmware vendor.
             * @return the next definition stage.
             */
            Update withVendor(String vendor);
        }

        /**
         * The stage of the Firmware update allowing to specify model.
         */
        interface WithModel {
            /**
             * Specifies the model property: Firmware model..
             * 
             * @param model Firmware model.
             * @return the next definition stage.
             */
            Update withModel(String model);
        }

        /**
         * The stage of the Firmware update allowing to specify version.
         */
        interface WithVersion {
            /**
             * Specifies the version property: Firmware version..
             * 
             * @param version Firmware version.
             * @return the next definition stage.
             */
            Update withVersion(String version);
        }

        /**
         * The stage of the Firmware update allowing to specify description.
         */
        interface WithDescription {
            /**
             * Specifies the description property: User-specified description of the firmware..
             * 
             * @param description User-specified description of the firmware.
             * @return the next definition stage.
             */
            Update withDescription(String description);
        }

        /**
         * The stage of the Firmware update allowing to specify fileSize.
         */
        interface WithFileSize {
            /**
             * Specifies the fileSize property: File size of the uploaded firmware image..
             * 
             * @param fileSize File size of the uploaded firmware image.
             * @return the next definition stage.
             */
            Update withFileSize(Long fileSize);
        }

        /**
         * The stage of the Firmware update allowing to specify status.
         */
        interface WithStatus {
            /**
             * Specifies the status property: The status of firmware scan..
             * 
             * @param status The status of firmware scan.
             * @return the next definition stage.
             */
            Update withStatus(Status status);
        }

        /**
         * The stage of the Firmware update allowing to specify statusMessages.
         */
        interface WithStatusMessages {
            /**
             * Specifies the statusMessages property: A list of errors or other messages generated during firmware
             * analysis.
             * 
             * @param statusMessages A list of errors or other messages generated during firmware analysis.
             * @return the next definition stage.
             */
            Update withStatusMessages(List<StatusMessage> statusMessages);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    Firmware refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Firmware refresh(Context context);

    /**
     * The operation to a url for file download.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return url data for creating or accessing a blob file along with {@link Response}.
     */
    Response<UrlToken> generateDownloadUrlWithResponse(Context context);

    /**
     * The operation to a url for file download.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return url data for creating or accessing a blob file.
     */
    UrlToken generateDownloadUrl();

    /**
     * The operation to a url for tar file download.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return url data for creating or accessing a blob file along with {@link Response}.
     */
    Response<UrlToken> generateFilesystemDownloadUrlWithResponse(Context context);

    /**
     * The operation to a url for tar file download.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return url data for creating or accessing a blob file.
     */
    UrlToken generateFilesystemDownloadUrl();
}
