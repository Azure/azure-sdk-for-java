// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.models.FirmwareInner;
import java.util.List;

/** An immutable client-side representation of Firmware. */
public interface Firmware {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the fileName property: File name for a firmware that user uploaded.
     *
     * @return the fileName value.
     */
    String fileName();

    /**
     * Gets the vendor property: Firmware vendor.
     *
     * @return the vendor value.
     */
    String vendor();

    /**
     * Gets the model property: Firmware model.
     *
     * @return the model value.
     */
    String model();

    /**
     * Gets the version property: Firmware version.
     *
     * @return the version value.
     */
    String version();

    /**
     * Gets the description property: User-specified description of the firmware.
     *
     * @return the description value.
     */
    String description();

    /**
     * Gets the fileSize property: File size of the uploaded firmware image.
     *
     * @return the fileSize value.
     */
    Long fileSize();

    /**
     * Gets the status property: The status of firmware scan.
     *
     * @return the status value.
     */
    Status status();

    /**
     * Gets the statusMessages property: A list of errors or other messages generated during firmware analysis.
     *
     * @return the statusMessages value.
     */
    List<Object> statusMessages();

    /**
     * Gets the provisioningState property: Provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.iotfirmwaredefense.fluent.models.FirmwareInner object.
     *
     * @return the inner object.
     */
    FirmwareInner innerModel();

    /** The entirety of the Firmware definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /** The Firmware definition stages. */
    interface DefinitionStages {
        /** The first stage of the Firmware definition. */
        interface Blank extends WithParentResource {
        }

        /** The stage of the Firmware definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, workspaceName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param workspaceName The name of the firmware analysis workspace.
             * @return the next definition stage.
             */
            WithCreate withExistingWorkspace(String resourceGroupName, String workspaceName);
        }

        /**
         * The stage of the Firmware definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithFileName,
                DefinitionStages.WithVendor,
                DefinitionStages.WithModel,
                DefinitionStages.WithVersion,
                DefinitionStages.WithDescription,
                DefinitionStages.WithFileSize,
                DefinitionStages.WithStatus,
                DefinitionStages.WithStatusMessages {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Firmware create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Firmware create(Context context);
        }

        /** The stage of the Firmware definition allowing to specify fileName. */
        interface WithFileName {
            /**
             * Specifies the fileName property: File name for a firmware that user uploaded..
             *
             * @param fileName File name for a firmware that user uploaded.
             * @return the next definition stage.
             */
            WithCreate withFileName(String fileName);
        }

        /** The stage of the Firmware definition allowing to specify vendor. */
        interface WithVendor {
            /**
             * Specifies the vendor property: Firmware vendor..
             *
             * @param vendor Firmware vendor.
             * @return the next definition stage.
             */
            WithCreate withVendor(String vendor);
        }

        /** The stage of the Firmware definition allowing to specify model. */
        interface WithModel {
            /**
             * Specifies the model property: Firmware model..
             *
             * @param model Firmware model.
             * @return the next definition stage.
             */
            WithCreate withModel(String model);
        }

        /** The stage of the Firmware definition allowing to specify version. */
        interface WithVersion {
            /**
             * Specifies the version property: Firmware version..
             *
             * @param version Firmware version.
             * @return the next definition stage.
             */
            WithCreate withVersion(String version);
        }

        /** The stage of the Firmware definition allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: User-specified description of the firmware..
             *
             * @param description User-specified description of the firmware.
             * @return the next definition stage.
             */
            WithCreate withDescription(String description);
        }

        /** The stage of the Firmware definition allowing to specify fileSize. */
        interface WithFileSize {
            /**
             * Specifies the fileSize property: File size of the uploaded firmware image..
             *
             * @param fileSize File size of the uploaded firmware image.
             * @return the next definition stage.
             */
            WithCreate withFileSize(Long fileSize);
        }

        /** The stage of the Firmware definition allowing to specify status. */
        interface WithStatus {
            /**
             * Specifies the status property: The status of firmware scan..
             *
             * @param status The status of firmware scan.
             * @return the next definition stage.
             */
            WithCreate withStatus(Status status);
        }

        /** The stage of the Firmware definition allowing to specify statusMessages. */
        interface WithStatusMessages {
            /**
             * Specifies the statusMessages property: A list of errors or other messages generated during firmware
             * analysis.
             *
             * @param statusMessages A list of errors or other messages generated during firmware analysis.
             * @return the next definition stage.
             */
            WithCreate withStatusMessages(List<Object> statusMessages);
        }
    }

    /**
     * Begins update for the Firmware resource.
     *
     * @return the stage of resource update.
     */
    Firmware.Update update();

    /** The template for Firmware update. */
    interface Update
        extends UpdateStages.WithFileName,
            UpdateStages.WithVendor,
            UpdateStages.WithModel,
            UpdateStages.WithVersion,
            UpdateStages.WithDescription,
            UpdateStages.WithFileSize,
            UpdateStages.WithStatus,
            UpdateStages.WithStatusMessages {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Firmware apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Firmware apply(Context context);
    }

    /** The Firmware update stages. */
    interface UpdateStages {
        /** The stage of the Firmware update allowing to specify fileName. */
        interface WithFileName {
            /**
             * Specifies the fileName property: File name for a firmware that user uploaded..
             *
             * @param fileName File name for a firmware that user uploaded.
             * @return the next definition stage.
             */
            Update withFileName(String fileName);
        }

        /** The stage of the Firmware update allowing to specify vendor. */
        interface WithVendor {
            /**
             * Specifies the vendor property: Firmware vendor..
             *
             * @param vendor Firmware vendor.
             * @return the next definition stage.
             */
            Update withVendor(String vendor);
        }

        /** The stage of the Firmware update allowing to specify model. */
        interface WithModel {
            /**
             * Specifies the model property: Firmware model..
             *
             * @param model Firmware model.
             * @return the next definition stage.
             */
            Update withModel(String model);
        }

        /** The stage of the Firmware update allowing to specify version. */
        interface WithVersion {
            /**
             * Specifies the version property: Firmware version..
             *
             * @param version Firmware version.
             * @return the next definition stage.
             */
            Update withVersion(String version);
        }

        /** The stage of the Firmware update allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: User-specified description of the firmware..
             *
             * @param description User-specified description of the firmware.
             * @return the next definition stage.
             */
            Update withDescription(String description);
        }

        /** The stage of the Firmware update allowing to specify fileSize. */
        interface WithFileSize {
            /**
             * Specifies the fileSize property: File size of the uploaded firmware image..
             *
             * @param fileSize File size of the uploaded firmware image.
             * @return the next definition stage.
             */
            Update withFileSize(Long fileSize);
        }

        /** The stage of the Firmware update allowing to specify status. */
        interface WithStatus {
            /**
             * Specifies the status property: The status of firmware scan..
             *
             * @param status The status of firmware scan.
             * @return the next definition stage.
             */
            Update withStatus(Status status);
        }

        /** The stage of the Firmware update allowing to specify statusMessages. */
        interface WithStatusMessages {
            /**
             * Specifies the statusMessages property: A list of errors or other messages generated during firmware
             * analysis.
             *
             * @param statusMessages A list of errors or other messages generated during firmware analysis.
             * @return the next definition stage.
             */
            Update withStatusMessages(List<Object> statusMessages);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Firmware refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Firmware refresh(Context context);

    /**
     * The operation to a url for file download.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return url data for creating or accessing a blob file along with {@link Response}.
     */
    Response<UrlToken> generateDownloadUrlWithResponse(Context context);

    /**
     * The operation to a url for file download.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return url data for creating or accessing a blob file.
     */
    UrlToken generateDownloadUrl();

    /**
     * The operation to a url for tar file download.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return url data for creating or accessing a blob file along with {@link Response}.
     */
    Response<UrlToken> generateFilesystemDownloadUrlWithResponse(Context context);

    /**
     * The operation to a url for tar file download.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return url data for creating or accessing a blob file.
     */
    UrlToken generateFilesystemDownloadUrl();

    /**
     * The operation to get a scan summary.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summary result after scanning the firmware along with {@link Response}.
     */
    Response<FirmwareSummary> generateSummaryWithResponse(Context context);

    /**
     * The operation to get a scan summary.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summary result after scanning the firmware.
     */
    FirmwareSummary generateSummary();

    /**
     * The operation to list all components result for a firmware.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list result for components as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Component> listGenerateComponentList();

    /**
     * The operation to list all components result for a firmware.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list result for components as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Component> listGenerateComponentList(Context context);

    /**
     * The operation to get component details for a firmware.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return component of a firmware along with {@link Response}.
     */
    Response<Component> generateComponentDetailsWithResponse(Context context);

    /**
     * The operation to get component details for a firmware.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return component of a firmware.
     */
    Component generateComponentDetails();

    /**
     * The operation to list all binary hardening result for a firmware.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list result for binary hardening as paginated response with {@link PagedIterable}.
     */
    PagedIterable<BinaryHardening> listGenerateBinaryHardeningList();

    /**
     * The operation to list all binary hardening result for a firmware.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list result for binary hardening as paginated response with {@link PagedIterable}.
     */
    PagedIterable<BinaryHardening> listGenerateBinaryHardeningList(Context context);

    /**
     * The operation to list the binary hardening summary percentages for a firmware.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return binary hardening summary percentages along with {@link Response}.
     */
    Response<BinaryHardeningSummary> generateBinaryHardeningSummaryWithResponse(Context context);

    /**
     * The operation to list the binary hardening summary percentages for a firmware.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return binary hardening summary percentages.
     */
    BinaryHardeningSummary generateBinaryHardeningSummary();

    /**
     * The operation to get binary hardening details for a firmware.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return binary hardening of a firmware along with {@link Response}.
     */
    Response<BinaryHardening> generateBinaryHardeningDetailsWithResponse(Context context);

    /**
     * The operation to get binary hardening details for a firmware.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return binary hardening of a firmware.
     */
    BinaryHardening generateBinaryHardeningDetails();

    /**
     * The operation to list all password hashes for a firmware.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return password hashes list as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PasswordHash> listGeneratePasswordHashList();

    /**
     * The operation to list all password hashes for a firmware.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return password hashes list as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PasswordHash> listGeneratePasswordHashList(Context context);

    /**
     * The operation to list all cve results for a firmware.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list result for CVE as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Cve> listGenerateCveList();

    /**
     * The operation to list all cve results for a firmware.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list result for CVE as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Cve> listGenerateCveList(Context context);

    /**
     * The operation to provide a high level summary of the CVEs reported for the firmware image.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cVE summary values along with {@link Response}.
     */
    Response<CveSummary> generateCveSummaryWithResponse(Context context);

    /**
     * The operation to provide a high level summary of the CVEs reported for the firmware image.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cVE summary values.
     */
    CveSummary generateCveSummary();

    /**
     * The operation to provide a high level summary of the discovered cryptographic certificates reported for the
     * firmware image.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cryptographic certificate summary values along with {@link Response}.
     */
    Response<CryptoCertificateSummary> generateCryptoCertificateSummaryWithResponse(Context context);

    /**
     * The operation to provide a high level summary of the discovered cryptographic certificates reported for the
     * firmware image.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cryptographic certificate summary values.
     */
    CryptoCertificateSummary generateCryptoCertificateSummary();

    /**
     * The operation to provide a high level summary of the discovered cryptographic keys reported for the firmware
     * image.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cryptographic key summary values along with {@link Response}.
     */
    Response<CryptoKeySummary> generateCryptoKeySummaryWithResponse(Context context);

    /**
     * The operation to provide a high level summary of the discovered cryptographic keys reported for the firmware
     * image.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cryptographic key summary values.
     */
    CryptoKeySummary generateCryptoKeySummary();

    /**
     * The operation to list all crypto certificates for a firmware.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return crypto certificates list as paginated response with {@link PagedIterable}.
     */
    PagedIterable<CryptoCertificate> listGenerateCryptoCertificateList();

    /**
     * The operation to list all crypto certificates for a firmware.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return crypto certificates list as paginated response with {@link PagedIterable}.
     */
    PagedIterable<CryptoCertificate> listGenerateCryptoCertificateList(Context context);

    /**
     * The operation to list all crypto keys for a firmware.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return crypto keys list as paginated response with {@link PagedIterable}.
     */
    PagedIterable<CryptoKey> listGenerateCryptoKeyList();

    /**
     * The operation to list all crypto keys for a firmware.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return crypto keys list as paginated response with {@link PagedIterable}.
     */
    PagedIterable<CryptoKey> listGenerateCryptoKeyList(Context context);
}
