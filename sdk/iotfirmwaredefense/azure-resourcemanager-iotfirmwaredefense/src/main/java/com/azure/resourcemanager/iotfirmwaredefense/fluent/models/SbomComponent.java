// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * SBOM component of a firmware.
 */
@Fluent
public final class SbomComponent implements JsonSerializable<SbomComponent> {
    /*
     * ID for the component.
     */
    private String componentId;

    /*
     * Name for the component.
     */
    private String componentName;

    /*
     * Version for the component.
     */
    private String version;

    /*
     * License for the component.
     */
    private String license;

    /*
     * File paths related to the component.
     */
    private List<String> filePaths;

    /**
     * Creates an instance of SbomComponent class.
     */
    public SbomComponent() {
    }

    /**
     * Get the componentId property: ID for the component.
     * 
     * @return the componentId value.
     */
    public String componentId() {
        return this.componentId;
    }

    /**
     * Set the componentId property: ID for the component.
     * 
     * @param componentId the componentId value to set.
     * @return the SbomComponent object itself.
     */
    public SbomComponent withComponentId(String componentId) {
        this.componentId = componentId;
        return this;
    }

    /**
     * Get the componentName property: Name for the component.
     * 
     * @return the componentName value.
     */
    public String componentName() {
        return this.componentName;
    }

    /**
     * Set the componentName property: Name for the component.
     * 
     * @param componentName the componentName value to set.
     * @return the SbomComponent object itself.
     */
    public SbomComponent withComponentName(String componentName) {
        this.componentName = componentName;
        return this;
    }

    /**
     * Get the version property: Version for the component.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Version for the component.
     * 
     * @param version the version value to set.
     * @return the SbomComponent object itself.
     */
    public SbomComponent withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the license property: License for the component.
     * 
     * @return the license value.
     */
    public String license() {
        return this.license;
    }

    /**
     * Set the license property: License for the component.
     * 
     * @param license the license value to set.
     * @return the SbomComponent object itself.
     */
    public SbomComponent withLicense(String license) {
        this.license = license;
        return this;
    }

    /**
     * Get the filePaths property: File paths related to the component.
     * 
     * @return the filePaths value.
     */
    public List<String> filePaths() {
        return this.filePaths;
    }

    /**
     * Set the filePaths property: File paths related to the component.
     * 
     * @param filePaths the filePaths value to set.
     * @return the SbomComponent object itself.
     */
    public SbomComponent withFilePaths(List<String> filePaths) {
        this.filePaths = filePaths;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("componentId", this.componentId);
        jsonWriter.writeStringField("componentName", this.componentName);
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeStringField("license", this.license);
        jsonWriter.writeArrayField("filePaths", this.filePaths, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SbomComponent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SbomComponent if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SbomComponent.
     */
    public static SbomComponent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SbomComponent deserializedSbomComponent = new SbomComponent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("componentId".equals(fieldName)) {
                    deserializedSbomComponent.componentId = reader.getString();
                } else if ("componentName".equals(fieldName)) {
                    deserializedSbomComponent.componentName = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedSbomComponent.version = reader.getString();
                } else if ("license".equals(fieldName)) {
                    deserializedSbomComponent.license = reader.getString();
                } else if ("filePaths".equals(fieldName)) {
                    List<String> filePaths = reader.readArray(reader1 -> reader1.getString());
                    deserializedSbomComponent.filePaths = filePaths;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSbomComponent;
        });
    }
}
