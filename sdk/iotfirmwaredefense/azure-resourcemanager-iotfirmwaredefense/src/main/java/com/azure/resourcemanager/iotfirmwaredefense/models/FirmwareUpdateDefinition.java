// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.models.FirmwareProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Firmware definition. */
@Fluent
public final class FirmwareUpdateDefinition {
    /*
     * The editable properties of a firmware
     */
    @JsonProperty(value = "properties")
    private FirmwareProperties innerProperties;

    /** Creates an instance of FirmwareUpdateDefinition class. */
    public FirmwareUpdateDefinition() {
    }

    /**
     * Get the innerProperties property: The editable properties of a firmware.
     *
     * @return the innerProperties value.
     */
    private FirmwareProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the fileName property: File name for a firmware that user uploaded.
     *
     * @return the fileName value.
     */
    public String fileName() {
        return this.innerProperties() == null ? null : this.innerProperties().fileName();
    }

    /**
     * Set the fileName property: File name for a firmware that user uploaded.
     *
     * @param fileName the fileName value to set.
     * @return the FirmwareUpdateDefinition object itself.
     */
    public FirmwareUpdateDefinition withFileName(String fileName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FirmwareProperties();
        }
        this.innerProperties().withFileName(fileName);
        return this;
    }

    /**
     * Get the vendor property: Firmware vendor.
     *
     * @return the vendor value.
     */
    public String vendor() {
        return this.innerProperties() == null ? null : this.innerProperties().vendor();
    }

    /**
     * Set the vendor property: Firmware vendor.
     *
     * @param vendor the vendor value to set.
     * @return the FirmwareUpdateDefinition object itself.
     */
    public FirmwareUpdateDefinition withVendor(String vendor) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FirmwareProperties();
        }
        this.innerProperties().withVendor(vendor);
        return this;
    }

    /**
     * Get the model property: Firmware model.
     *
     * @return the model value.
     */
    public String model() {
        return this.innerProperties() == null ? null : this.innerProperties().model();
    }

    /**
     * Set the model property: Firmware model.
     *
     * @param model the model value to set.
     * @return the FirmwareUpdateDefinition object itself.
     */
    public FirmwareUpdateDefinition withModel(String model) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FirmwareProperties();
        }
        this.innerProperties().withModel(model);
        return this;
    }

    /**
     * Get the version property: Firmware version.
     *
     * @return the version value.
     */
    public String version() {
        return this.innerProperties() == null ? null : this.innerProperties().version();
    }

    /**
     * Set the version property: Firmware version.
     *
     * @param version the version value to set.
     * @return the FirmwareUpdateDefinition object itself.
     */
    public FirmwareUpdateDefinition withVersion(String version) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FirmwareProperties();
        }
        this.innerProperties().withVersion(version);
        return this;
    }

    /**
     * Get the description property: User-specified description of the firmware.
     *
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: User-specified description of the firmware.
     *
     * @param description the description value to set.
     * @return the FirmwareUpdateDefinition object itself.
     */
    public FirmwareUpdateDefinition withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FirmwareProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the fileSize property: File size of the uploaded firmware image.
     *
     * @return the fileSize value.
     */
    public Long fileSize() {
        return this.innerProperties() == null ? null : this.innerProperties().fileSize();
    }

    /**
     * Set the fileSize property: File size of the uploaded firmware image.
     *
     * @param fileSize the fileSize value to set.
     * @return the FirmwareUpdateDefinition object itself.
     */
    public FirmwareUpdateDefinition withFileSize(Long fileSize) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FirmwareProperties();
        }
        this.innerProperties().withFileSize(fileSize);
        return this;
    }

    /**
     * Get the status property: The status of firmware scan.
     *
     * @return the status value.
     */
    public Status status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Set the status property: The status of firmware scan.
     *
     * @param status the status value to set.
     * @return the FirmwareUpdateDefinition object itself.
     */
    public FirmwareUpdateDefinition withStatus(Status status) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FirmwareProperties();
        }
        this.innerProperties().withStatus(status);
        return this;
    }

    /**
     * Get the statusMessages property: A list of errors or other messages generated during firmware analysis.
     *
     * @return the statusMessages value.
     */
    public List<Object> statusMessages() {
        return this.innerProperties() == null ? null : this.innerProperties().statusMessages();
    }

    /**
     * Set the statusMessages property: A list of errors or other messages generated during firmware analysis.
     *
     * @param statusMessages the statusMessages value to set.
     * @return the FirmwareUpdateDefinition object itself.
     */
    public FirmwareUpdateDefinition withStatusMessages(List<Object> statusMessages) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FirmwareProperties();
        }
        this.innerProperties().withStatusMessages(statusMessages);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
