// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of an analysis summary.
 */
@Immutable
public class SummaryResourceProperties implements JsonSerializable<SummaryResourceProperties> {
    /*
     * The type of summary.
     */
    private SummaryType summaryType = SummaryType.fromString("SummaryResourceProperties");

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of SummaryResourceProperties class.
     */
    protected SummaryResourceProperties() {
    }

    /**
     * Get the summaryType property: The type of summary.
     * 
     * @return the summaryType value.
     */
    public SummaryType summaryType() {
        return this.summaryType;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The status of the last operation.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the SummaryResourceProperties object itself.
     */
    SummaryResourceProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("summaryType", this.summaryType == null ? null : this.summaryType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SummaryResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SummaryResourceProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SummaryResourceProperties.
     */
    public static SummaryResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("summaryType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Firmware".equals(discriminatorValue)) {
                    return FirmwareSummary.fromJson(readerToUse.reset());
                } else if ("CommonVulnerabilitiesAndExposures".equals(discriminatorValue)) {
                    return CveSummary.fromJson(readerToUse.reset());
                } else if ("BinaryHardening".equals(discriminatorValue)) {
                    return BinaryHardeningSummaryResource.fromJson(readerToUse.reset());
                } else if ("CryptoCertificate".equals(discriminatorValue)) {
                    return CryptoCertificateSummaryResource.fromJson(readerToUse.reset());
                } else if ("CryptoKey".equals(discriminatorValue)) {
                    return CryptoKeySummaryResource.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static SummaryResourceProperties fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SummaryResourceProperties deserializedSummaryResourceProperties = new SummaryResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("summaryType".equals(fieldName)) {
                    deserializedSummaryResourceProperties.summaryType = SummaryType.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSummaryResourceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSummaryResourceProperties;
        });
    }
}
