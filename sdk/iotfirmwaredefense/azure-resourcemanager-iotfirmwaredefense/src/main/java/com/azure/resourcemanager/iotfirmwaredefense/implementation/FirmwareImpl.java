// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.models.FirmwareInner;
import com.azure.resourcemanager.iotfirmwaredefense.models.Firmware;
import com.azure.resourcemanager.iotfirmwaredefense.models.FirmwareUpdateDefinition;
import com.azure.resourcemanager.iotfirmwaredefense.models.ProvisioningState;
import com.azure.resourcemanager.iotfirmwaredefense.models.Status;
import com.azure.resourcemanager.iotfirmwaredefense.models.StatusMessage;
import com.azure.resourcemanager.iotfirmwaredefense.models.UrlToken;
import java.util.Collections;
import java.util.List;

public final class FirmwareImpl implements Firmware, Firmware.Definition, Firmware.Update {
    private FirmwareInner innerObject;

    private final com.azure.resourcemanager.iotfirmwaredefense.IoTFirmwareDefenseManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String fileName() {
        return this.innerModel().fileName();
    }

    public String vendor() {
        return this.innerModel().vendor();
    }

    public String model() {
        return this.innerModel().model();
    }

    public String version() {
        return this.innerModel().version();
    }

    public String description() {
        return this.innerModel().description();
    }

    public Long fileSize() {
        return this.innerModel().fileSize();
    }

    public Status status() {
        return this.innerModel().status();
    }

    public List<StatusMessage> statusMessages() {
        List<StatusMessage> inner = this.innerModel().statusMessages();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public FirmwareInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.iotfirmwaredefense.IoTFirmwareDefenseManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String workspaceName;

    private String firmwareId;

    private FirmwareUpdateDefinition updateFirmware;

    public FirmwareImpl withExistingWorkspace(String resourceGroupName, String workspaceName) {
        this.resourceGroupName = resourceGroupName;
        this.workspaceName = workspaceName;
        return this;
    }

    public Firmware create() {
        this.innerObject = serviceManager.serviceClient().getFirmwares()
            .createWithResponse(resourceGroupName, workspaceName, firmwareId, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public Firmware create(Context context) {
        this.innerObject = serviceManager.serviceClient().getFirmwares()
            .createWithResponse(resourceGroupName, workspaceName, firmwareId, this.innerModel(), context).getValue();
        return this;
    }

    FirmwareImpl(String name, com.azure.resourcemanager.iotfirmwaredefense.IoTFirmwareDefenseManager serviceManager) {
        this.innerObject = new FirmwareInner();
        this.serviceManager = serviceManager;
        this.firmwareId = name;
    }

    public FirmwareImpl update() {
        this.updateFirmware = new FirmwareUpdateDefinition();
        return this;
    }

    public Firmware apply() {
        this.innerObject = serviceManager.serviceClient().getFirmwares()
            .updateWithResponse(resourceGroupName, workspaceName, firmwareId, updateFirmware, Context.NONE).getValue();
        return this;
    }

    public Firmware apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getFirmwares()
            .updateWithResponse(resourceGroupName, workspaceName, firmwareId, updateFirmware, context).getValue();
        return this;
    }

    FirmwareImpl(FirmwareInner innerObject,
        com.azure.resourcemanager.iotfirmwaredefense.IoTFirmwareDefenseManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.workspaceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "workspaces");
        this.firmwareId = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "firmwares");
    }

    public Firmware refresh() {
        this.innerObject = serviceManager.serviceClient().getFirmwares()
            .getWithResponse(resourceGroupName, workspaceName, firmwareId, Context.NONE).getValue();
        return this;
    }

    public Firmware refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getFirmwares()
            .getWithResponse(resourceGroupName, workspaceName, firmwareId, context).getValue();
        return this;
    }

    public Response<UrlToken> generateDownloadUrlWithResponse(Context context) {
        return serviceManager.firmwares().generateDownloadUrlWithResponse(resourceGroupName, workspaceName, firmwareId,
            context);
    }

    public UrlToken generateDownloadUrl() {
        return serviceManager.firmwares().generateDownloadUrl(resourceGroupName, workspaceName, firmwareId);
    }

    public Response<UrlToken> generateFilesystemDownloadUrlWithResponse(Context context) {
        return serviceManager.firmwares().generateFilesystemDownloadUrlWithResponse(resourceGroupName, workspaceName,
            firmwareId, context);
    }

    public UrlToken generateFilesystemDownloadUrl() {
        return serviceManager.firmwares().generateFilesystemDownloadUrl(resourceGroupName, workspaceName, firmwareId);
    }

    public FirmwareImpl withFileName(String fileName) {
        if (isInCreateMode()) {
            this.innerModel().withFileName(fileName);
            return this;
        } else {
            this.updateFirmware.withFileName(fileName);
            return this;
        }
    }

    public FirmwareImpl withVendor(String vendor) {
        if (isInCreateMode()) {
            this.innerModel().withVendor(vendor);
            return this;
        } else {
            this.updateFirmware.withVendor(vendor);
            return this;
        }
    }

    public FirmwareImpl withModel(String model) {
        if (isInCreateMode()) {
            this.innerModel().withModel(model);
            return this;
        } else {
            this.updateFirmware.withModel(model);
            return this;
        }
    }

    public FirmwareImpl withVersion(String version) {
        if (isInCreateMode()) {
            this.innerModel().withVersion(version);
            return this;
        } else {
            this.updateFirmware.withVersion(version);
            return this;
        }
    }

    public FirmwareImpl withDescription(String description) {
        if (isInCreateMode()) {
            this.innerModel().withDescription(description);
            return this;
        } else {
            this.updateFirmware.withDescription(description);
            return this;
        }
    }

    public FirmwareImpl withFileSize(Long fileSize) {
        if (isInCreateMode()) {
            this.innerModel().withFileSize(fileSize);
            return this;
        } else {
            this.updateFirmware.withFileSize(fileSize);
            return this;
        }
    }

    public FirmwareImpl withStatus(Status status) {
        if (isInCreateMode()) {
            this.innerModel().withStatus(status);
            return this;
        } else {
            this.updateFirmware.withStatus(status);
            return this;
        }
    }

    public FirmwareImpl withStatusMessages(List<StatusMessage> statusMessages) {
        if (isInCreateMode()) {
            this.innerModel().withStatusMessages(statusMessages);
            return this;
        } else {
            this.updateFirmware.withStatusMessages(statusMessages);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
