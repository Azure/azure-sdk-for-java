// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.iotfirmwaredefense.models.CertificateUsage;
import com.azure.resourcemanager.iotfirmwaredefense.models.CryptoCertificateEntity;
import com.azure.resourcemanager.iotfirmwaredefense.models.PairedKey;
import com.azure.resourcemanager.iotfirmwaredefense.models.ProvisioningState;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The object representing a firmware analysis crypto certificate resource.
 */
@Immutable
public final class CryptoCertificateResourceInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    private CryptoCertificate innerProperties;

    /*
     * The id of the crypto certificate result.
     */
    private String name;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of CryptoCertificateResourceInner class.
     */
    private CryptoCertificateResourceInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private CryptoCertificate innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the name property: The id of the crypto certificate result.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the cryptoCertId property: ID for the certificate result.
     * 
     * @return the cryptoCertId value.
     */
    public String cryptoCertId() {
        return this.innerProperties() == null ? null : this.innerProperties().cryptoCertId();
    }

    /**
     * Get the certificateName property: Name of the certificate.
     * 
     * @return the certificateName value.
     */
    public String certificateName() {
        return this.innerProperties() == null ? null : this.innerProperties().certificateName();
    }

    /**
     * Get the subject property: Subject information of the certificate.
     * 
     * @return the subject value.
     */
    public CryptoCertificateEntity subject() {
        return this.innerProperties() == null ? null : this.innerProperties().subject();
    }

    /**
     * Get the issuer property: Issuer information of the certificate.
     * 
     * @return the issuer value.
     */
    public CryptoCertificateEntity issuer() {
        return this.innerProperties() == null ? null : this.innerProperties().issuer();
    }

    /**
     * Get the issuedDate property: Issue date for the certificate.
     * 
     * @return the issuedDate value.
     */
    public OffsetDateTime issuedDate() {
        return this.innerProperties() == null ? null : this.innerProperties().issuedDate();
    }

    /**
     * Get the expirationDate property: Expiration date for the certificate.
     * 
     * @return the expirationDate value.
     */
    public OffsetDateTime expirationDate() {
        return this.innerProperties() == null ? null : this.innerProperties().expirationDate();
    }

    /**
     * Get the certificateRole property: Role of the certificate (Root CA, etc).
     * 
     * @return the certificateRole value.
     */
    public String certificateRole() {
        return this.innerProperties() == null ? null : this.innerProperties().certificateRole();
    }

    /**
     * Get the signatureAlgorithm property: The signature algorithm used in the certificate.
     * 
     * @return the signatureAlgorithm value.
     */
    public String signatureAlgorithm() {
        return this.innerProperties() == null ? null : this.innerProperties().signatureAlgorithm();
    }

    /**
     * Get the certificateKeySize property: Size of the certificate's key in bits.
     * 
     * @return the certificateKeySize value.
     */
    public Long certificateKeySize() {
        return this.innerProperties() == null ? null : this.innerProperties().certificateKeySize();
    }

    /**
     * Get the certificateKeyAlgorithm property: Key algorithm used in the certificate.
     * 
     * @return the certificateKeyAlgorithm value.
     */
    public String certificateKeyAlgorithm() {
        return this.innerProperties() == null ? null : this.innerProperties().certificateKeyAlgorithm();
    }

    /**
     * Get the encoding property: Encoding used for the certificate.
     * 
     * @return the encoding value.
     */
    public String encoding() {
        return this.innerProperties() == null ? null : this.innerProperties().encoding();
    }

    /**
     * Get the serialNumber property: Serial number of the certificate.
     * 
     * @return the serialNumber value.
     */
    public String serialNumber() {
        return this.innerProperties() == null ? null : this.innerProperties().serialNumber();
    }

    /**
     * Get the fingerprint property: Fingerprint of the certificate.
     * 
     * @return the fingerprint value.
     */
    public String fingerprint() {
        return this.innerProperties() == null ? null : this.innerProperties().fingerprint();
    }

    /**
     * Get the certificateUsage property: List of functions the certificate can fulfill.
     * 
     * @return the certificateUsage value.
     */
    public List<CertificateUsage> certificateUsage() {
        return this.innerProperties() == null ? null : this.innerProperties().certificateUsage();
    }

    /**
     * Get the filePaths property: List of files where this certificate was found.
     * 
     * @return the filePaths value.
     */
    public List<String> filePaths() {
        return this.innerProperties() == null ? null : this.innerProperties().filePaths();
    }

    /**
     * Get the pairedKey property: A matching paired private key.
     * 
     * @return the pairedKey value.
     */
    public PairedKey pairedKey() {
        return this.innerProperties() == null ? null : this.innerProperties().pairedKey();
    }

    /**
     * Get the isExpired property: Indicates if the certificate is expired.
     * 
     * @return the isExpired value.
     */
    public Boolean isExpired() {
        return this.innerProperties() == null ? null : this.innerProperties().isExpired();
    }

    /**
     * Get the isSelfSigned property: Indicates if the certificate is self-signed.
     * 
     * @return the isSelfSigned value.
     */
    public Boolean isSelfSigned() {
        return this.innerProperties() == null ? null : this.innerProperties().isSelfSigned();
    }

    /**
     * Get the isWeakSignature property: Indicates the signature algorithm used is insecure according to NIST guidance.
     * 
     * @return the isWeakSignature value.
     */
    public Boolean isWeakSignature() {
        return this.innerProperties() == null ? null : this.innerProperties().isWeakSignature();
    }

    /**
     * Get the isShortKeySize property: Indicates the certificate's key size is considered too small to be secure for
     * the key algorithm according to NIST guidance.
     * 
     * @return the isShortKeySize value.
     */
    public Boolean isShortKeySize() {
        return this.innerProperties() == null ? null : this.innerProperties().isShortKeySize();
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CryptoCertificateResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CryptoCertificateResourceInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CryptoCertificateResourceInner.
     */
    public static CryptoCertificateResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CryptoCertificateResourceInner deserializedCryptoCertificateResourceInner
                = new CryptoCertificateResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedCryptoCertificateResourceInner.id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedCryptoCertificateResourceInner.type = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedCryptoCertificateResourceInner.name = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedCryptoCertificateResourceInner.innerProperties = CryptoCertificate.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedCryptoCertificateResourceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCryptoCertificateResourceInner;
        });
    }
}
