// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.iotfirmwaredefense.models.CryptoCertificateEntity;
import com.azure.resourcemanager.iotfirmwaredefense.models.PairedKey;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Crypto certificate resource.
 */
@Fluent
public final class CryptoCertificateResourceInner extends ProxyResource {
    /*
     * The properties of a crypto certificate found within a firmware image
     */
    @JsonProperty(value = "properties")
    private CryptoCertificate innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of CryptoCertificateResourceInner class.
     */
    public CryptoCertificateResourceInner() {
    }

    /**
     * Get the innerProperties property: The properties of a crypto certificate found within a firmware image.
     * 
     * @return the innerProperties value.
     */
    private CryptoCertificate innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the cryptoCertId property: ID for the certificate result.
     * 
     * @return the cryptoCertId value.
     */
    public String cryptoCertId() {
        return this.innerProperties() == null ? null : this.innerProperties().cryptoCertId();
    }

    /**
     * Set the cryptoCertId property: ID for the certificate result.
     * 
     * @param cryptoCertId the cryptoCertId value to set.
     * @return the CryptoCertificateResourceInner object itself.
     */
    public CryptoCertificateResourceInner withCryptoCertId(String cryptoCertId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoCertificate();
        }
        this.innerProperties().withCryptoCertId(cryptoCertId);
        return this;
    }

    /**
     * Get the name property: Name of the certificate.
     * 
     * @return the name value.
     */
    public String namePropertiesName() {
        return this.innerProperties() == null ? null : this.innerProperties().name();
    }

    /**
     * Set the name property: Name of the certificate.
     * 
     * @param name the name value to set.
     * @return the CryptoCertificateResourceInner object itself.
     */
    public CryptoCertificateResourceInner withNamePropertiesName(String name) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoCertificate();
        }
        this.innerProperties().withName(name);
        return this;
    }

    /**
     * Get the subject property: Subject information of the certificate.
     * 
     * @return the subject value.
     */
    public CryptoCertificateEntity subject() {
        return this.innerProperties() == null ? null : this.innerProperties().subject();
    }

    /**
     * Set the subject property: Subject information of the certificate.
     * 
     * @param subject the subject value to set.
     * @return the CryptoCertificateResourceInner object itself.
     */
    public CryptoCertificateResourceInner withSubject(CryptoCertificateEntity subject) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoCertificate();
        }
        this.innerProperties().withSubject(subject);
        return this;
    }

    /**
     * Get the issuer property: Issuer information of the certificate.
     * 
     * @return the issuer value.
     */
    public CryptoCertificateEntity issuer() {
        return this.innerProperties() == null ? null : this.innerProperties().issuer();
    }

    /**
     * Set the issuer property: Issuer information of the certificate.
     * 
     * @param issuer the issuer value to set.
     * @return the CryptoCertificateResourceInner object itself.
     */
    public CryptoCertificateResourceInner withIssuer(CryptoCertificateEntity issuer) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoCertificate();
        }
        this.innerProperties().withIssuer(issuer);
        return this;
    }

    /**
     * Get the issuedDate property: Issue date for the certificate.
     * 
     * @return the issuedDate value.
     */
    public OffsetDateTime issuedDate() {
        return this.innerProperties() == null ? null : this.innerProperties().issuedDate();
    }

    /**
     * Set the issuedDate property: Issue date for the certificate.
     * 
     * @param issuedDate the issuedDate value to set.
     * @return the CryptoCertificateResourceInner object itself.
     */
    public CryptoCertificateResourceInner withIssuedDate(OffsetDateTime issuedDate) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoCertificate();
        }
        this.innerProperties().withIssuedDate(issuedDate);
        return this;
    }

    /**
     * Get the expirationDate property: Expiration date for the certificate.
     * 
     * @return the expirationDate value.
     */
    public OffsetDateTime expirationDate() {
        return this.innerProperties() == null ? null : this.innerProperties().expirationDate();
    }

    /**
     * Set the expirationDate property: Expiration date for the certificate.
     * 
     * @param expirationDate the expirationDate value to set.
     * @return the CryptoCertificateResourceInner object itself.
     */
    public CryptoCertificateResourceInner withExpirationDate(OffsetDateTime expirationDate) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoCertificate();
        }
        this.innerProperties().withExpirationDate(expirationDate);
        return this;
    }

    /**
     * Get the role property: Role of the certificate (Root CA, etc).
     * 
     * @return the role value.
     */
    public String role() {
        return this.innerProperties() == null ? null : this.innerProperties().role();
    }

    /**
     * Set the role property: Role of the certificate (Root CA, etc).
     * 
     * @param role the role value to set.
     * @return the CryptoCertificateResourceInner object itself.
     */
    public CryptoCertificateResourceInner withRole(String role) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoCertificate();
        }
        this.innerProperties().withRole(role);
        return this;
    }

    /**
     * Get the signatureAlgorithm property: The signature algorithm used in the certificate.
     * 
     * @return the signatureAlgorithm value.
     */
    public String signatureAlgorithm() {
        return this.innerProperties() == null ? null : this.innerProperties().signatureAlgorithm();
    }

    /**
     * Set the signatureAlgorithm property: The signature algorithm used in the certificate.
     * 
     * @param signatureAlgorithm the signatureAlgorithm value to set.
     * @return the CryptoCertificateResourceInner object itself.
     */
    public CryptoCertificateResourceInner withSignatureAlgorithm(String signatureAlgorithm) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoCertificate();
        }
        this.innerProperties().withSignatureAlgorithm(signatureAlgorithm);
        return this;
    }

    /**
     * Get the keySize property: Size of the certificate's key in bits.
     * 
     * @return the keySize value.
     */
    public Long keySize() {
        return this.innerProperties() == null ? null : this.innerProperties().keySize();
    }

    /**
     * Set the keySize property: Size of the certificate's key in bits.
     * 
     * @param keySize the keySize value to set.
     * @return the CryptoCertificateResourceInner object itself.
     */
    public CryptoCertificateResourceInner withKeySize(Long keySize) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoCertificate();
        }
        this.innerProperties().withKeySize(keySize);
        return this;
    }

    /**
     * Get the keyAlgorithm property: Key algorithm used in the certificate.
     * 
     * @return the keyAlgorithm value.
     */
    public String keyAlgorithm() {
        return this.innerProperties() == null ? null : this.innerProperties().keyAlgorithm();
    }

    /**
     * Set the keyAlgorithm property: Key algorithm used in the certificate.
     * 
     * @param keyAlgorithm the keyAlgorithm value to set.
     * @return the CryptoCertificateResourceInner object itself.
     */
    public CryptoCertificateResourceInner withKeyAlgorithm(String keyAlgorithm) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoCertificate();
        }
        this.innerProperties().withKeyAlgorithm(keyAlgorithm);
        return this;
    }

    /**
     * Get the encoding property: Encoding used for the certificate.
     * 
     * @return the encoding value.
     */
    public String encoding() {
        return this.innerProperties() == null ? null : this.innerProperties().encoding();
    }

    /**
     * Set the encoding property: Encoding used for the certificate.
     * 
     * @param encoding the encoding value to set.
     * @return the CryptoCertificateResourceInner object itself.
     */
    public CryptoCertificateResourceInner withEncoding(String encoding) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoCertificate();
        }
        this.innerProperties().withEncoding(encoding);
        return this;
    }

    /**
     * Get the serialNumber property: Serial number of the certificate.
     * 
     * @return the serialNumber value.
     */
    public String serialNumber() {
        return this.innerProperties() == null ? null : this.innerProperties().serialNumber();
    }

    /**
     * Set the serialNumber property: Serial number of the certificate.
     * 
     * @param serialNumber the serialNumber value to set.
     * @return the CryptoCertificateResourceInner object itself.
     */
    public CryptoCertificateResourceInner withSerialNumber(String serialNumber) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoCertificate();
        }
        this.innerProperties().withSerialNumber(serialNumber);
        return this;
    }

    /**
     * Get the fingerprint property: Fingerprint of the certificate.
     * 
     * @return the fingerprint value.
     */
    public String fingerprint() {
        return this.innerProperties() == null ? null : this.innerProperties().fingerprint();
    }

    /**
     * Set the fingerprint property: Fingerprint of the certificate.
     * 
     * @param fingerprint the fingerprint value to set.
     * @return the CryptoCertificateResourceInner object itself.
     */
    public CryptoCertificateResourceInner withFingerprint(String fingerprint) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoCertificate();
        }
        this.innerProperties().withFingerprint(fingerprint);
        return this;
    }

    /**
     * Get the usage property: List of functions the certificate can fulfill.
     * 
     * @return the usage value.
     */
    public List<String> usage() {
        return this.innerProperties() == null ? null : this.innerProperties().usage();
    }

    /**
     * Set the usage property: List of functions the certificate can fulfill.
     * 
     * @param usage the usage value to set.
     * @return the CryptoCertificateResourceInner object itself.
     */
    public CryptoCertificateResourceInner withUsage(List<String> usage) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoCertificate();
        }
        this.innerProperties().withUsage(usage);
        return this;
    }

    /**
     * Get the filePaths property: List of files where this certificate was found.
     * 
     * @return the filePaths value.
     */
    public List<String> filePaths() {
        return this.innerProperties() == null ? null : this.innerProperties().filePaths();
    }

    /**
     * Get the pairedKey property: A matching paired private key.
     * 
     * @return the pairedKey value.
     */
    public PairedKey pairedKey() {
        return this.innerProperties() == null ? null : this.innerProperties().pairedKey();
    }

    /**
     * Set the pairedKey property: A matching paired private key.
     * 
     * @param pairedKey the pairedKey value to set.
     * @return the CryptoCertificateResourceInner object itself.
     */
    public CryptoCertificateResourceInner withPairedKey(PairedKey pairedKey) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoCertificate();
        }
        this.innerProperties().withPairedKey(pairedKey);
        return this;
    }

    /**
     * Get the isExpired property: Indicates if the certificate is expired.
     * 
     * @return the isExpired value.
     */
    public Boolean isExpired() {
        return this.innerProperties() == null ? null : this.innerProperties().isExpired();
    }

    /**
     * Set the isExpired property: Indicates if the certificate is expired.
     * 
     * @param isExpired the isExpired value to set.
     * @return the CryptoCertificateResourceInner object itself.
     */
    public CryptoCertificateResourceInner withIsExpired(Boolean isExpired) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoCertificate();
        }
        this.innerProperties().withIsExpired(isExpired);
        return this;
    }

    /**
     * Get the isSelfSigned property: Indicates if the certificate is self-signed.
     * 
     * @return the isSelfSigned value.
     */
    public Boolean isSelfSigned() {
        return this.innerProperties() == null ? null : this.innerProperties().isSelfSigned();
    }

    /**
     * Set the isSelfSigned property: Indicates if the certificate is self-signed.
     * 
     * @param isSelfSigned the isSelfSigned value to set.
     * @return the CryptoCertificateResourceInner object itself.
     */
    public CryptoCertificateResourceInner withIsSelfSigned(Boolean isSelfSigned) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoCertificate();
        }
        this.innerProperties().withIsSelfSigned(isSelfSigned);
        return this;
    }

    /**
     * Get the isWeakSignature property: Indicates the signature algorithm used is insecure.
     * 
     * @return the isWeakSignature value.
     */
    public Boolean isWeakSignature() {
        return this.innerProperties() == null ? null : this.innerProperties().isWeakSignature();
    }

    /**
     * Set the isWeakSignature property: Indicates the signature algorithm used is insecure.
     * 
     * @param isWeakSignature the isWeakSignature value to set.
     * @return the CryptoCertificateResourceInner object itself.
     */
    public CryptoCertificateResourceInner withIsWeakSignature(Boolean isWeakSignature) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoCertificate();
        }
        this.innerProperties().withIsWeakSignature(isWeakSignature);
        return this;
    }

    /**
     * Get the isShortKeySize property: Indicates the certificate's key size is considered too small to be secure for
     * the key algorithm.
     * 
     * @return the isShortKeySize value.
     */
    public Boolean isShortKeySize() {
        return this.innerProperties() == null ? null : this.innerProperties().isShortKeySize();
    }

    /**
     * Set the isShortKeySize property: Indicates the certificate's key size is considered too small to be secure for
     * the key algorithm.
     * 
     * @param isShortKeySize the isShortKeySize value to set.
     * @return the CryptoCertificateResourceInner object itself.
     */
    public CryptoCertificateResourceInner withIsShortKeySize(Boolean isShortKeySize) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CryptoCertificate();
        }
        this.innerProperties().withIsShortKeySize(isShortKeySize);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
