// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties for cryptographic certificate summary.
 */
@Fluent
public final class CryptoCertificateSummaryResource extends SummaryResourceProperties {
    /*
     * Describes the type of summary.
     */
    private SummaryType summaryType = SummaryType.CRYPTO_CERTIFICATE;

    /*
     * Total number of certificates found.
     */
    private Long totalCertificates;

    /*
     * Total number of paired private keys found for the certificates.
     */
    private Long pairedKeys;

    /*
     * Total number of expired certificates found.
     */
    private Long expired;

    /*
     * Total number of nearly expired certificates found.
     */
    private Long expiringSoon;

    /*
     * Total number of certificates found using a weak signature algorithm.
     */
    private Long weakSignature;

    /*
     * Total number of certificates found that are self-signed.
     */
    private Long selfSigned;

    /*
     * Total number of certificates found that have an insecure key size for the key algorithm.
     */
    private Long shortKeySize;

    /**
     * Creates an instance of CryptoCertificateSummaryResource class.
     */
    public CryptoCertificateSummaryResource() {
    }

    /**
     * Get the summaryType property: Describes the type of summary.
     * 
     * @return the summaryType value.
     */
    @Override
    public SummaryType summaryType() {
        return this.summaryType;
    }

    /**
     * Get the totalCertificates property: Total number of certificates found.
     * 
     * @return the totalCertificates value.
     */
    public Long totalCertificates() {
        return this.totalCertificates;
    }

    /**
     * Set the totalCertificates property: Total number of certificates found.
     * 
     * @param totalCertificates the totalCertificates value to set.
     * @return the CryptoCertificateSummaryResource object itself.
     */
    public CryptoCertificateSummaryResource withTotalCertificates(Long totalCertificates) {
        this.totalCertificates = totalCertificates;
        return this;
    }

    /**
     * Get the pairedKeys property: Total number of paired private keys found for the certificates.
     * 
     * @return the pairedKeys value.
     */
    public Long pairedKeys() {
        return this.pairedKeys;
    }

    /**
     * Set the pairedKeys property: Total number of paired private keys found for the certificates.
     * 
     * @param pairedKeys the pairedKeys value to set.
     * @return the CryptoCertificateSummaryResource object itself.
     */
    public CryptoCertificateSummaryResource withPairedKeys(Long pairedKeys) {
        this.pairedKeys = pairedKeys;
        return this;
    }

    /**
     * Get the expired property: Total number of expired certificates found.
     * 
     * @return the expired value.
     */
    public Long expired() {
        return this.expired;
    }

    /**
     * Set the expired property: Total number of expired certificates found.
     * 
     * @param expired the expired value to set.
     * @return the CryptoCertificateSummaryResource object itself.
     */
    public CryptoCertificateSummaryResource withExpired(Long expired) {
        this.expired = expired;
        return this;
    }

    /**
     * Get the expiringSoon property: Total number of nearly expired certificates found.
     * 
     * @return the expiringSoon value.
     */
    public Long expiringSoon() {
        return this.expiringSoon;
    }

    /**
     * Set the expiringSoon property: Total number of nearly expired certificates found.
     * 
     * @param expiringSoon the expiringSoon value to set.
     * @return the CryptoCertificateSummaryResource object itself.
     */
    public CryptoCertificateSummaryResource withExpiringSoon(Long expiringSoon) {
        this.expiringSoon = expiringSoon;
        return this;
    }

    /**
     * Get the weakSignature property: Total number of certificates found using a weak signature algorithm.
     * 
     * @return the weakSignature value.
     */
    public Long weakSignature() {
        return this.weakSignature;
    }

    /**
     * Set the weakSignature property: Total number of certificates found using a weak signature algorithm.
     * 
     * @param weakSignature the weakSignature value to set.
     * @return the CryptoCertificateSummaryResource object itself.
     */
    public CryptoCertificateSummaryResource withWeakSignature(Long weakSignature) {
        this.weakSignature = weakSignature;
        return this;
    }

    /**
     * Get the selfSigned property: Total number of certificates found that are self-signed.
     * 
     * @return the selfSigned value.
     */
    public Long selfSigned() {
        return this.selfSigned;
    }

    /**
     * Set the selfSigned property: Total number of certificates found that are self-signed.
     * 
     * @param selfSigned the selfSigned value to set.
     * @return the CryptoCertificateSummaryResource object itself.
     */
    public CryptoCertificateSummaryResource withSelfSigned(Long selfSigned) {
        this.selfSigned = selfSigned;
        return this;
    }

    /**
     * Get the shortKeySize property: Total number of certificates found that have an insecure key size for the key
     * algorithm.
     * 
     * @return the shortKeySize value.
     */
    public Long shortKeySize() {
        return this.shortKeySize;
    }

    /**
     * Set the shortKeySize property: Total number of certificates found that have an insecure key size for the key
     * algorithm.
     * 
     * @param shortKeySize the shortKeySize value to set.
     * @return the CryptoCertificateSummaryResource object itself.
     */
    public CryptoCertificateSummaryResource withShortKeySize(Long shortKeySize) {
        this.shortKeySize = shortKeySize;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("summaryType", this.summaryType == null ? null : this.summaryType.toString());
        jsonWriter.writeNumberField("totalCertificates", this.totalCertificates);
        jsonWriter.writeNumberField("pairedKeys", this.pairedKeys);
        jsonWriter.writeNumberField("expired", this.expired);
        jsonWriter.writeNumberField("expiringSoon", this.expiringSoon);
        jsonWriter.writeNumberField("weakSignature", this.weakSignature);
        jsonWriter.writeNumberField("selfSigned", this.selfSigned);
        jsonWriter.writeNumberField("shortKeySize", this.shortKeySize);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CryptoCertificateSummaryResource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CryptoCertificateSummaryResource if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CryptoCertificateSummaryResource.
     */
    public static CryptoCertificateSummaryResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CryptoCertificateSummaryResource deserializedCryptoCertificateSummaryResource
                = new CryptoCertificateSummaryResource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("summaryType".equals(fieldName)) {
                    deserializedCryptoCertificateSummaryResource.summaryType
                        = SummaryType.fromString(reader.getString());
                } else if ("totalCertificates".equals(fieldName)) {
                    deserializedCryptoCertificateSummaryResource.totalCertificates
                        = reader.getNullable(JsonReader::getLong);
                } else if ("pairedKeys".equals(fieldName)) {
                    deserializedCryptoCertificateSummaryResource.pairedKeys = reader.getNullable(JsonReader::getLong);
                } else if ("expired".equals(fieldName)) {
                    deserializedCryptoCertificateSummaryResource.expired = reader.getNullable(JsonReader::getLong);
                } else if ("expiringSoon".equals(fieldName)) {
                    deserializedCryptoCertificateSummaryResource.expiringSoon = reader.getNullable(JsonReader::getLong);
                } else if ("weakSignature".equals(fieldName)) {
                    deserializedCryptoCertificateSummaryResource.weakSignature
                        = reader.getNullable(JsonReader::getLong);
                } else if ("selfSigned".equals(fieldName)) {
                    deserializedCryptoCertificateSummaryResource.selfSigned = reader.getNullable(JsonReader::getLong);
                } else if ("shortKeySize".equals(fieldName)) {
                    deserializedCryptoCertificateSummaryResource.shortKeySize = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCryptoCertificateSummaryResource;
        });
    }
}
