// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.iotfirmwaredefense.models.CveComponent;
import com.azure.resourcemanager.iotfirmwaredefense.models.CveLink;
import java.io.IOException;
import java.util.List;

/**
 * CVE analysis result resource.
 */
@Fluent
public final class CveResourceInner extends ProxyResource {
    /*
     * The properties of a CVE result found within a firmware image
     */
    private CveResult innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of CveResourceInner class.
     */
    public CveResourceInner() {
    }

    /**
     * Get the innerProperties property: The properties of a CVE result found within a firmware image.
     * 
     * @return the innerProperties value.
     */
    private CveResult innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the cveId property: ID of the CVE result.
     * 
     * @return the cveId value.
     */
    public String cveId() {
        return this.innerProperties() == null ? null : this.innerProperties().cveId();
    }

    /**
     * Set the cveId property: ID of the CVE result.
     * 
     * @param cveId the cveId value to set.
     * @return the CveResourceInner object itself.
     */
    public CveResourceInner withCveId(String cveId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CveResult();
        }
        this.innerProperties().withCveId(cveId);
        return this;
    }

    /**
     * Get the component property: The SBOM component for the CVE.
     * 
     * @return the component value.
     */
    public CveComponent component() {
        return this.innerProperties() == null ? null : this.innerProperties().component();
    }

    /**
     * Set the component property: The SBOM component for the CVE.
     * 
     * @param component the component value to set.
     * @return the CveResourceInner object itself.
     */
    public CveResourceInner withComponent(CveComponent component) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CveResult();
        }
        this.innerProperties().withComponent(component);
        return this;
    }

    /**
     * Get the severity property: Severity of the CVE.
     * 
     * @return the severity value.
     */
    public String severity() {
        return this.innerProperties() == null ? null : this.innerProperties().severity();
    }

    /**
     * Set the severity property: Severity of the CVE.
     * 
     * @param severity the severity value to set.
     * @return the CveResourceInner object itself.
     */
    public CveResourceInner withSeverity(String severity) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CveResult();
        }
        this.innerProperties().withSeverity(severity);
        return this;
    }

    /**
     * Get the name property: Name of the CVE.
     * 
     * @return the name value.
     */
    public String namePropertiesName() {
        return this.innerProperties() == null ? null : this.innerProperties().name();
    }

    /**
     * Set the name property: Name of the CVE.
     * 
     * @param name the name value to set.
     * @return the CveResourceInner object itself.
     */
    public CveResourceInner withNamePropertiesName(String name) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CveResult();
        }
        this.innerProperties().withName(name);
        return this;
    }

    /**
     * Get the cvssScore property: A single CVSS score to represent the CVE. If a V3 score is specified, then it will
     * use the V3 score. Otherwise if the V2 score is specified it will be the V2 score.
     * 
     * @return the cvssScore value.
     */
    public String cvssScore() {
        return this.innerProperties() == null ? null : this.innerProperties().cvssScore();
    }

    /**
     * Set the cvssScore property: A single CVSS score to represent the CVE. If a V3 score is specified, then it will
     * use the V3 score. Otherwise if the V2 score is specified it will be the V2 score.
     * 
     * @param cvssScore the cvssScore value to set.
     * @return the CveResourceInner object itself.
     */
    public CveResourceInner withCvssScore(String cvssScore) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CveResult();
        }
        this.innerProperties().withCvssScore(cvssScore);
        return this;
    }

    /**
     * Get the cvssVersion property: CVSS version of the CVE.
     * 
     * @return the cvssVersion value.
     */
    public String cvssVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().cvssVersion();
    }

    /**
     * Set the cvssVersion property: CVSS version of the CVE.
     * 
     * @param cvssVersion the cvssVersion value to set.
     * @return the CveResourceInner object itself.
     */
    public CveResourceInner withCvssVersion(String cvssVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CveResult();
        }
        this.innerProperties().withCvssVersion(cvssVersion);
        return this;
    }

    /**
     * Get the cvssV2Score property: CVSS V2 score of the CVE.
     * 
     * @return the cvssV2Score value.
     */
    public String cvssV2Score() {
        return this.innerProperties() == null ? null : this.innerProperties().cvssV2Score();
    }

    /**
     * Set the cvssV2Score property: CVSS V2 score of the CVE.
     * 
     * @param cvssV2Score the cvssV2Score value to set.
     * @return the CveResourceInner object itself.
     */
    public CveResourceInner withCvssV2Score(String cvssV2Score) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CveResult();
        }
        this.innerProperties().withCvssV2Score(cvssV2Score);
        return this;
    }

    /**
     * Get the cvssV3Score property: CVSS V3 score of the CVE.
     * 
     * @return the cvssV3Score value.
     */
    public String cvssV3Score() {
        return this.innerProperties() == null ? null : this.innerProperties().cvssV3Score();
    }

    /**
     * Set the cvssV3Score property: CVSS V3 score of the CVE.
     * 
     * @param cvssV3Score the cvssV3Score value to set.
     * @return the CveResourceInner object itself.
     */
    public CveResourceInner withCvssV3Score(String cvssV3Score) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CveResult();
        }
        this.innerProperties().withCvssV3Score(cvssV3Score);
        return this;
    }

    /**
     * Get the links property: The list of reference links for the CVE.
     * 
     * @return the links value.
     */
    public List<CveLink> links() {
        return this.innerProperties() == null ? null : this.innerProperties().links();
    }

    /**
     * Get the description property: The CVE description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: The CVE description.
     * 
     * @param description the description value to set.
     * @return the CveResourceInner object itself.
     */
    public CveResourceInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CveResult();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CveResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CveResourceInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CveResourceInner.
     */
    public static CveResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CveResourceInner deserializedCveResourceInner = new CveResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedCveResourceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedCveResourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedCveResourceInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedCveResourceInner.innerProperties = CveResult.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedCveResourceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCveResourceInner;
        });
    }
}
