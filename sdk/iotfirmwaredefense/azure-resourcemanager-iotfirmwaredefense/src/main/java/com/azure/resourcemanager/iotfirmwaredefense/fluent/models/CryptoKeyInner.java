// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.iotfirmwaredefense.models.IsShortKeySize;
import com.azure.resourcemanager.iotfirmwaredefense.models.PairedKey;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Crypto key properties. */
@Fluent
public final class CryptoKeyInner {
    /*
     * ID for the key.
     */
    @JsonProperty(value = "cryptoKeyId")
    private String cryptoKeyId;

    /*
     * Type of the key (public or private).
     */
    @JsonProperty(value = "keyType")
    private String keyType;

    /*
     * Size of the key in bits.
     */
    @JsonProperty(value = "keySize")
    private Long keySize;

    /*
     * Key algorithm name.
     */
    @JsonProperty(value = "keyAlgorithm")
    private String keyAlgorithm;

    /*
     * Functions the key can fulfill.
     */
    @JsonProperty(value = "usage")
    private List<String> usage;

    /*
     * List of files paths for this key.
     */
    @JsonProperty(value = "filePaths", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> filePaths;

    /*
     * A matching paired key or certificate.
     */
    @JsonProperty(value = "pairedKey")
    private PairedKey pairedKey;

    /*
     * Indicates the key size is considered too small to be secure for the algorithm.
     */
    @JsonProperty(value = "isShortKeySize")
    private IsShortKeySize isShortKeySize;

    /** Creates an instance of CryptoKeyInner class. */
    public CryptoKeyInner() {
    }

    /**
     * Get the cryptoKeyId property: ID for the key.
     *
     * @return the cryptoKeyId value.
     */
    public String cryptoKeyId() {
        return this.cryptoKeyId;
    }

    /**
     * Set the cryptoKeyId property: ID for the key.
     *
     * @param cryptoKeyId the cryptoKeyId value to set.
     * @return the CryptoKeyInner object itself.
     */
    public CryptoKeyInner withCryptoKeyId(String cryptoKeyId) {
        this.cryptoKeyId = cryptoKeyId;
        return this;
    }

    /**
     * Get the keyType property: Type of the key (public or private).
     *
     * @return the keyType value.
     */
    public String keyType() {
        return this.keyType;
    }

    /**
     * Set the keyType property: Type of the key (public or private).
     *
     * @param keyType the keyType value to set.
     * @return the CryptoKeyInner object itself.
     */
    public CryptoKeyInner withKeyType(String keyType) {
        this.keyType = keyType;
        return this;
    }

    /**
     * Get the keySize property: Size of the key in bits.
     *
     * @return the keySize value.
     */
    public Long keySize() {
        return this.keySize;
    }

    /**
     * Set the keySize property: Size of the key in bits.
     *
     * @param keySize the keySize value to set.
     * @return the CryptoKeyInner object itself.
     */
    public CryptoKeyInner withKeySize(Long keySize) {
        this.keySize = keySize;
        return this;
    }

    /**
     * Get the keyAlgorithm property: Key algorithm name.
     *
     * @return the keyAlgorithm value.
     */
    public String keyAlgorithm() {
        return this.keyAlgorithm;
    }

    /**
     * Set the keyAlgorithm property: Key algorithm name.
     *
     * @param keyAlgorithm the keyAlgorithm value to set.
     * @return the CryptoKeyInner object itself.
     */
    public CryptoKeyInner withKeyAlgorithm(String keyAlgorithm) {
        this.keyAlgorithm = keyAlgorithm;
        return this;
    }

    /**
     * Get the usage property: Functions the key can fulfill.
     *
     * @return the usage value.
     */
    public List<String> usage() {
        return this.usage;
    }

    /**
     * Set the usage property: Functions the key can fulfill.
     *
     * @param usage the usage value to set.
     * @return the CryptoKeyInner object itself.
     */
    public CryptoKeyInner withUsage(List<String> usage) {
        this.usage = usage;
        return this;
    }

    /**
     * Get the filePaths property: List of files paths for this key.
     *
     * @return the filePaths value.
     */
    public List<String> filePaths() {
        return this.filePaths;
    }

    /**
     * Get the pairedKey property: A matching paired key or certificate.
     *
     * @return the pairedKey value.
     */
    public PairedKey pairedKey() {
        return this.pairedKey;
    }

    /**
     * Set the pairedKey property: A matching paired key or certificate.
     *
     * @param pairedKey the pairedKey value to set.
     * @return the CryptoKeyInner object itself.
     */
    public CryptoKeyInner withPairedKey(PairedKey pairedKey) {
        this.pairedKey = pairedKey;
        return this;
    }

    /**
     * Get the isShortKeySize property: Indicates the key size is considered too small to be secure for the algorithm.
     *
     * @return the isShortKeySize value.
     */
    public IsShortKeySize isShortKeySize() {
        return this.isShortKeySize;
    }

    /**
     * Set the isShortKeySize property: Indicates the key size is considered too small to be secure for the algorithm.
     *
     * @param isShortKeySize the isShortKeySize value to set.
     * @return the CryptoKeyInner object itself.
     */
    public CryptoKeyInner withIsShortKeySize(IsShortKeySize isShortKeySize) {
        this.isShortKeySize = isShortKeySize;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (pairedKey() != null) {
            pairedKey().validate();
        }
    }
}
