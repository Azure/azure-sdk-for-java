// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.iotfirmwaredefense.models.ProvisioningState;
import com.azure.resourcemanager.iotfirmwaredefense.models.Status;
import com.azure.resourcemanager.iotfirmwaredefense.models.StatusMessage;
import java.io.IOException;
import java.util.List;

/**
 * Firmware definition.
 */
@Fluent
public final class FirmwareInner extends ProxyResource {
    /*
     * The properties of a firmware
     */
    private FirmwareProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of FirmwareInner class.
     */
    public FirmwareInner() {
    }

    /**
     * Get the innerProperties property: The properties of a firmware.
     * 
     * @return the innerProperties value.
     */
    private FirmwareProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the fileName property: File name for a firmware that user uploaded.
     * 
     * @return the fileName value.
     */
    public String fileName() {
        return this.innerProperties() == null ? null : this.innerProperties().fileName();
    }

    /**
     * Set the fileName property: File name for a firmware that user uploaded.
     * 
     * @param fileName the fileName value to set.
     * @return the FirmwareInner object itself.
     */
    public FirmwareInner withFileName(String fileName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FirmwareProperties();
        }
        this.innerProperties().withFileName(fileName);
        return this;
    }

    /**
     * Get the vendor property: Firmware vendor.
     * 
     * @return the vendor value.
     */
    public String vendor() {
        return this.innerProperties() == null ? null : this.innerProperties().vendor();
    }

    /**
     * Set the vendor property: Firmware vendor.
     * 
     * @param vendor the vendor value to set.
     * @return the FirmwareInner object itself.
     */
    public FirmwareInner withVendor(String vendor) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FirmwareProperties();
        }
        this.innerProperties().withVendor(vendor);
        return this;
    }

    /**
     * Get the model property: Firmware model.
     * 
     * @return the model value.
     */
    public String model() {
        return this.innerProperties() == null ? null : this.innerProperties().model();
    }

    /**
     * Set the model property: Firmware model.
     * 
     * @param model the model value to set.
     * @return the FirmwareInner object itself.
     */
    public FirmwareInner withModel(String model) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FirmwareProperties();
        }
        this.innerProperties().withModel(model);
        return this;
    }

    /**
     * Get the version property: Firmware version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.innerProperties() == null ? null : this.innerProperties().version();
    }

    /**
     * Set the version property: Firmware version.
     * 
     * @param version the version value to set.
     * @return the FirmwareInner object itself.
     */
    public FirmwareInner withVersion(String version) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FirmwareProperties();
        }
        this.innerProperties().withVersion(version);
        return this;
    }

    /**
     * Get the description property: User-specified description of the firmware.
     * 
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: User-specified description of the firmware.
     * 
     * @param description the description value to set.
     * @return the FirmwareInner object itself.
     */
    public FirmwareInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FirmwareProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the fileSize property: File size of the uploaded firmware image.
     * 
     * @return the fileSize value.
     */
    public Long fileSize() {
        return this.innerProperties() == null ? null : this.innerProperties().fileSize();
    }

    /**
     * Set the fileSize property: File size of the uploaded firmware image.
     * 
     * @param fileSize the fileSize value to set.
     * @return the FirmwareInner object itself.
     */
    public FirmwareInner withFileSize(Long fileSize) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FirmwareProperties();
        }
        this.innerProperties().withFileSize(fileSize);
        return this;
    }

    /**
     * Get the status property: The status of firmware scan.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Set the status property: The status of firmware scan.
     * 
     * @param status the status value to set.
     * @return the FirmwareInner object itself.
     */
    public FirmwareInner withStatus(Status status) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FirmwareProperties();
        }
        this.innerProperties().withStatus(status);
        return this;
    }

    /**
     * Get the statusMessages property: A list of errors or other messages generated during firmware analysis.
     * 
     * @return the statusMessages value.
     */
    public List<StatusMessage> statusMessages() {
        return this.innerProperties() == null ? null : this.innerProperties().statusMessages();
    }

    /**
     * Set the statusMessages property: A list of errors or other messages generated during firmware analysis.
     * 
     * @param statusMessages the statusMessages value to set.
     * @return the FirmwareInner object itself.
     */
    public FirmwareInner withStatusMessages(List<StatusMessage> statusMessages) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FirmwareProperties();
        }
        this.innerProperties().withStatusMessages(statusMessages);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FirmwareInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FirmwareInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FirmwareInner.
     */
    public static FirmwareInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FirmwareInner deserializedFirmwareInner = new FirmwareInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedFirmwareInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedFirmwareInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedFirmwareInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedFirmwareInner.innerProperties = FirmwareProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedFirmwareInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFirmwareInner;
        });
    }
}
