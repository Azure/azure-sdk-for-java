// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.iotfirmwaredefense.models.CanaryFlag;
import com.azure.resourcemanager.iotfirmwaredefense.models.NxFlag;
import com.azure.resourcemanager.iotfirmwaredefense.models.PieFlag;
import com.azure.resourcemanager.iotfirmwaredefense.models.RelroFlag;
import com.azure.resourcemanager.iotfirmwaredefense.models.StrippedFlag;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Binary hardening of a firmware. */
@Fluent
public final class BinaryHardeningInner {
    /*
     * ID for the binary hardening result.
     */
    @JsonProperty(value = "binaryHardeningId")
    private String binaryHardeningId;

    /*
     * Binary hardening features.
     */
    @JsonProperty(value = "features")
    private BinaryHardeningFeatures innerFeatures;

    /*
     * The architecture of the uploaded firmware.
     */
    @JsonProperty(value = "architecture")
    private String architecture;

    /*
     * path for binary hardening.
     */
    @JsonProperty(value = "path")
    private String path;

    /*
     * class for binary hardening.
     */
    @JsonProperty(value = "class")
    private String classProperty;

    /*
     * The runpath of the uploaded firmware.
     */
    @JsonProperty(value = "runpath")
    private String runpath;

    /*
     * The rpath of the uploaded firmware.
     */
    @JsonProperty(value = "rpath")
    private String rpath;

    /** Creates an instance of BinaryHardeningInner class. */
    public BinaryHardeningInner() {
    }

    /**
     * Get the binaryHardeningId property: ID for the binary hardening result.
     *
     * @return the binaryHardeningId value.
     */
    public String binaryHardeningId() {
        return this.binaryHardeningId;
    }

    /**
     * Set the binaryHardeningId property: ID for the binary hardening result.
     *
     * @param binaryHardeningId the binaryHardeningId value to set.
     * @return the BinaryHardeningInner object itself.
     */
    public BinaryHardeningInner withBinaryHardeningId(String binaryHardeningId) {
        this.binaryHardeningId = binaryHardeningId;
        return this;
    }

    /**
     * Get the innerFeatures property: Binary hardening features.
     *
     * @return the innerFeatures value.
     */
    private BinaryHardeningFeatures innerFeatures() {
        return this.innerFeatures;
    }

    /**
     * Get the architecture property: The architecture of the uploaded firmware.
     *
     * @return the architecture value.
     */
    public String architecture() {
        return this.architecture;
    }

    /**
     * Set the architecture property: The architecture of the uploaded firmware.
     *
     * @param architecture the architecture value to set.
     * @return the BinaryHardeningInner object itself.
     */
    public BinaryHardeningInner withArchitecture(String architecture) {
        this.architecture = architecture;
        return this;
    }

    /**
     * Get the path property: path for binary hardening.
     *
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: path for binary hardening.
     *
     * @param path the path value to set.
     * @return the BinaryHardeningInner object itself.
     */
    public BinaryHardeningInner withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the classProperty property: class for binary hardening.
     *
     * @return the classProperty value.
     */
    public String classProperty() {
        return this.classProperty;
    }

    /**
     * Set the classProperty property: class for binary hardening.
     *
     * @param classProperty the classProperty value to set.
     * @return the BinaryHardeningInner object itself.
     */
    public BinaryHardeningInner withClassProperty(String classProperty) {
        this.classProperty = classProperty;
        return this;
    }

    /**
     * Get the runpath property: The runpath of the uploaded firmware.
     *
     * @return the runpath value.
     */
    public String runpath() {
        return this.runpath;
    }

    /**
     * Set the runpath property: The runpath of the uploaded firmware.
     *
     * @param runpath the runpath value to set.
     * @return the BinaryHardeningInner object itself.
     */
    public BinaryHardeningInner withRunpath(String runpath) {
        this.runpath = runpath;
        return this;
    }

    /**
     * Get the rpath property: The rpath of the uploaded firmware.
     *
     * @return the rpath value.
     */
    public String rpath() {
        return this.rpath;
    }

    /**
     * Set the rpath property: The rpath of the uploaded firmware.
     *
     * @param rpath the rpath value to set.
     * @return the BinaryHardeningInner object itself.
     */
    public BinaryHardeningInner withRpath(String rpath) {
        this.rpath = rpath;
        return this;
    }

    /**
     * Get the nx property: NX flag.
     *
     * @return the nx value.
     */
    public NxFlag nx() {
        return this.innerFeatures() == null ? null : this.innerFeatures().nx();
    }

    /**
     * Set the nx property: NX flag.
     *
     * @param nx the nx value to set.
     * @return the BinaryHardeningInner object itself.
     */
    public BinaryHardeningInner withNx(NxFlag nx) {
        if (this.innerFeatures() == null) {
            this.innerFeatures = new BinaryHardeningFeatures();
        }
        this.innerFeatures().withNx(nx);
        return this;
    }

    /**
     * Get the pie property: PIE flag.
     *
     * @return the pie value.
     */
    public PieFlag pie() {
        return this.innerFeatures() == null ? null : this.innerFeatures().pie();
    }

    /**
     * Set the pie property: PIE flag.
     *
     * @param pie the pie value to set.
     * @return the BinaryHardeningInner object itself.
     */
    public BinaryHardeningInner withPie(PieFlag pie) {
        if (this.innerFeatures() == null) {
            this.innerFeatures = new BinaryHardeningFeatures();
        }
        this.innerFeatures().withPie(pie);
        return this;
    }

    /**
     * Get the relro property: RELRO flag.
     *
     * @return the relro value.
     */
    public RelroFlag relro() {
        return this.innerFeatures() == null ? null : this.innerFeatures().relro();
    }

    /**
     * Set the relro property: RELRO flag.
     *
     * @param relro the relro value to set.
     * @return the BinaryHardeningInner object itself.
     */
    public BinaryHardeningInner withRelro(RelroFlag relro) {
        if (this.innerFeatures() == null) {
            this.innerFeatures = new BinaryHardeningFeatures();
        }
        this.innerFeatures().withRelro(relro);
        return this;
    }

    /**
     * Get the canary property: Canary flag.
     *
     * @return the canary value.
     */
    public CanaryFlag canary() {
        return this.innerFeatures() == null ? null : this.innerFeatures().canary();
    }

    /**
     * Set the canary property: Canary flag.
     *
     * @param canary the canary value to set.
     * @return the BinaryHardeningInner object itself.
     */
    public BinaryHardeningInner withCanary(CanaryFlag canary) {
        if (this.innerFeatures() == null) {
            this.innerFeatures = new BinaryHardeningFeatures();
        }
        this.innerFeatures().withCanary(canary);
        return this;
    }

    /**
     * Get the stripped property: Stripped flag.
     *
     * @return the stripped value.
     */
    public StrippedFlag stripped() {
        return this.innerFeatures() == null ? null : this.innerFeatures().stripped();
    }

    /**
     * Set the stripped property: Stripped flag.
     *
     * @param stripped the stripped value to set.
     * @return the BinaryHardeningInner object itself.
     */
    public BinaryHardeningInner withStripped(StrippedFlag stripped) {
        if (this.innerFeatures() == null) {
            this.innerFeatures = new BinaryHardeningFeatures();
        }
        this.innerFeatures().withStripped(stripped);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerFeatures() != null) {
            innerFeatures().validate();
        }
    }
}
