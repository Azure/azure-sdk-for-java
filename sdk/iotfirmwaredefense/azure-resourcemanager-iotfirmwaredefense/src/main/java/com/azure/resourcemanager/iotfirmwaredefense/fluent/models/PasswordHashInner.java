// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Password hash properties. */
@Fluent
public final class PasswordHashInner {
    /*
     * ID for password hash
     */
    @JsonProperty(value = "passwordHashId")
    private String passwordHashId;

    /*
     * File path of the password hash
     */
    @JsonProperty(value = "filePath")
    private String filePath;

    /*
     * Salt of the password hash
     */
    @JsonProperty(value = "salt")
    private String salt;

    /*
     * Hash of the password
     */
    @JsonProperty(value = "hash")
    private String hash;

    /*
     * Context of password hash
     */
    @JsonProperty(value = "context")
    private String context;

    /*
     * User name of password hash
     */
    @JsonProperty(value = "username")
    private String username;

    /*
     * Algorithm of the password hash
     */
    @JsonProperty(value = "algorithm")
    private String algorithm;

    /** Creates an instance of PasswordHashInner class. */
    public PasswordHashInner() {
    }

    /**
     * Get the passwordHashId property: ID for password hash.
     *
     * @return the passwordHashId value.
     */
    public String passwordHashId() {
        return this.passwordHashId;
    }

    /**
     * Set the passwordHashId property: ID for password hash.
     *
     * @param passwordHashId the passwordHashId value to set.
     * @return the PasswordHashInner object itself.
     */
    public PasswordHashInner withPasswordHashId(String passwordHashId) {
        this.passwordHashId = passwordHashId;
        return this;
    }

    /**
     * Get the filePath property: File path of the password hash.
     *
     * @return the filePath value.
     */
    public String filePath() {
        return this.filePath;
    }

    /**
     * Set the filePath property: File path of the password hash.
     *
     * @param filePath the filePath value to set.
     * @return the PasswordHashInner object itself.
     */
    public PasswordHashInner withFilePath(String filePath) {
        this.filePath = filePath;
        return this;
    }

    /**
     * Get the salt property: Salt of the password hash.
     *
     * @return the salt value.
     */
    public String salt() {
        return this.salt;
    }

    /**
     * Set the salt property: Salt of the password hash.
     *
     * @param salt the salt value to set.
     * @return the PasswordHashInner object itself.
     */
    public PasswordHashInner withSalt(String salt) {
        this.salt = salt;
        return this;
    }

    /**
     * Get the hash property: Hash of the password.
     *
     * @return the hash value.
     */
    public String hash() {
        return this.hash;
    }

    /**
     * Set the hash property: Hash of the password.
     *
     * @param hash the hash value to set.
     * @return the PasswordHashInner object itself.
     */
    public PasswordHashInner withHash(String hash) {
        this.hash = hash;
        return this;
    }

    /**
     * Get the context property: Context of password hash.
     *
     * @return the context value.
     */
    public String context() {
        return this.context;
    }

    /**
     * Set the context property: Context of password hash.
     *
     * @param context the context value to set.
     * @return the PasswordHashInner object itself.
     */
    public PasswordHashInner withContext(String context) {
        this.context = context;
        return this;
    }

    /**
     * Get the username property: User name of password hash.
     *
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: User name of password hash.
     *
     * @param username the username value to set.
     * @return the PasswordHashInner object itself.
     */
    public PasswordHashInner withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the algorithm property: Algorithm of the password hash.
     *
     * @return the algorithm value.
     */
    public String algorithm() {
        return this.algorithm;
    }

    /**
     * Set the algorithm property: Algorithm of the password hash.
     *
     * @param algorithm the algorithm value to set.
     * @return the PasswordHashInner object itself.
     */
    public PasswordHashInner withAlgorithm(String algorithm) {
        this.algorithm = algorithm;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
