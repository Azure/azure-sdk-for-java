// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Binary hardening features.
 */
@Fluent
public final class BinaryHardeningFeatures implements JsonSerializable<BinaryHardeningFeatures> {
    /*
     * NX (no-execute) flag.
     */
    private Boolean nx;

    /*
     * PIE (position independent executable) flag.
     */
    private Boolean pie;

    /*
     * RELRO (relocation read-only) flag.
     */
    private Boolean relro;

    /*
     * Canary (stack canaries) flag.
     */
    private Boolean canary;

    /*
     * Stripped flag.
     */
    private Boolean stripped;

    /**
     * Creates an instance of BinaryHardeningFeatures class.
     */
    public BinaryHardeningFeatures() {
    }

    /**
     * Get the nx property: NX (no-execute) flag.
     * 
     * @return the nx value.
     */
    public Boolean nx() {
        return this.nx;
    }

    /**
     * Set the nx property: NX (no-execute) flag.
     * 
     * @param nx the nx value to set.
     * @return the BinaryHardeningFeatures object itself.
     */
    public BinaryHardeningFeatures withNx(Boolean nx) {
        this.nx = nx;
        return this;
    }

    /**
     * Get the pie property: PIE (position independent executable) flag.
     * 
     * @return the pie value.
     */
    public Boolean pie() {
        return this.pie;
    }

    /**
     * Set the pie property: PIE (position independent executable) flag.
     * 
     * @param pie the pie value to set.
     * @return the BinaryHardeningFeatures object itself.
     */
    public BinaryHardeningFeatures withPie(Boolean pie) {
        this.pie = pie;
        return this;
    }

    /**
     * Get the relro property: RELRO (relocation read-only) flag.
     * 
     * @return the relro value.
     */
    public Boolean relro() {
        return this.relro;
    }

    /**
     * Set the relro property: RELRO (relocation read-only) flag.
     * 
     * @param relro the relro value to set.
     * @return the BinaryHardeningFeatures object itself.
     */
    public BinaryHardeningFeatures withRelro(Boolean relro) {
        this.relro = relro;
        return this;
    }

    /**
     * Get the canary property: Canary (stack canaries) flag.
     * 
     * @return the canary value.
     */
    public Boolean canary() {
        return this.canary;
    }

    /**
     * Set the canary property: Canary (stack canaries) flag.
     * 
     * @param canary the canary value to set.
     * @return the BinaryHardeningFeatures object itself.
     */
    public BinaryHardeningFeatures withCanary(Boolean canary) {
        this.canary = canary;
        return this;
    }

    /**
     * Get the stripped property: Stripped flag.
     * 
     * @return the stripped value.
     */
    public Boolean stripped() {
        return this.stripped;
    }

    /**
     * Set the stripped property: Stripped flag.
     * 
     * @param stripped the stripped value to set.
     * @return the BinaryHardeningFeatures object itself.
     */
    public BinaryHardeningFeatures withStripped(Boolean stripped) {
        this.stripped = stripped;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("nx", this.nx);
        jsonWriter.writeBooleanField("pie", this.pie);
        jsonWriter.writeBooleanField("relro", this.relro);
        jsonWriter.writeBooleanField("canary", this.canary);
        jsonWriter.writeBooleanField("stripped", this.stripped);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BinaryHardeningFeatures from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BinaryHardeningFeatures if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BinaryHardeningFeatures.
     */
    public static BinaryHardeningFeatures fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BinaryHardeningFeatures deserializedBinaryHardeningFeatures = new BinaryHardeningFeatures();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nx".equals(fieldName)) {
                    deserializedBinaryHardeningFeatures.nx = reader.getNullable(JsonReader::getBoolean);
                } else if ("pie".equals(fieldName)) {
                    deserializedBinaryHardeningFeatures.pie = reader.getNullable(JsonReader::getBoolean);
                } else if ("relro".equals(fieldName)) {
                    deserializedBinaryHardeningFeatures.relro = reader.getNullable(JsonReader::getBoolean);
                } else if ("canary".equals(fieldName)) {
                    deserializedBinaryHardeningFeatures.canary = reader.getNullable(JsonReader::getBoolean);
                } else if ("stripped".equals(fieldName)) {
                    deserializedBinaryHardeningFeatures.stripped = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBinaryHardeningFeatures;
        });
    }
}
