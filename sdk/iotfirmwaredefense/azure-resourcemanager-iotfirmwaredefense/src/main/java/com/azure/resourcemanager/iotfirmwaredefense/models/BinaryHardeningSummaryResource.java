// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties for a binary hardening analysis summary.
 */
@Immutable
public final class BinaryHardeningSummaryResource extends SummaryResourceProperties {
    /*
     * The type of summary.
     */
    private SummaryType summaryType = SummaryType.BINARY_HARDENING;

    /*
     * Total number of binaries that were analyzed
     */
    private Long totalFiles;

    /*
     * Total number of analyzed files that were found to have a nonexecutable stack
     */
    private Long notExecutableStackCount;

    /*
     * Total number of analyzed files that were compiled to be a position independent executable
     */
    private Long positionIndependentExecutableCount;

    /*
     * Total number of analyzed files that have enabled relocation read-only protections
     */
    private Long relocationReadOnlyCount;

    /*
     * Total number of analyzed files that have stack canaries enabled
     */
    private Long stackCanaryCount;

    /*
     * Total number of analyzed files that have debug symbols stripped
     */
    private Long strippedBinaryCount;

    /**
     * Creates an instance of BinaryHardeningSummaryResource class.
     */
    private BinaryHardeningSummaryResource() {
    }

    /**
     * Get the summaryType property: The type of summary.
     * 
     * @return the summaryType value.
     */
    @Override
    public SummaryType summaryType() {
        return this.summaryType;
    }

    /**
     * Get the totalFiles property: Total number of binaries that were analyzed.
     * 
     * @return the totalFiles value.
     */
    public Long totalFiles() {
        return this.totalFiles;
    }

    /**
     * Get the notExecutableStackCount property: Total number of analyzed files that were found to have a nonexecutable
     * stack.
     * 
     * @return the notExecutableStackCount value.
     */
    public Long notExecutableStackCount() {
        return this.notExecutableStackCount;
    }

    /**
     * Get the positionIndependentExecutableCount property: Total number of analyzed files that were compiled to be a
     * position independent executable.
     * 
     * @return the positionIndependentExecutableCount value.
     */
    public Long positionIndependentExecutableCount() {
        return this.positionIndependentExecutableCount;
    }

    /**
     * Get the relocationReadOnlyCount property: Total number of analyzed files that have enabled relocation read-only
     * protections.
     * 
     * @return the relocationReadOnlyCount value.
     */
    public Long relocationReadOnlyCount() {
        return this.relocationReadOnlyCount;
    }

    /**
     * Get the stackCanaryCount property: Total number of analyzed files that have stack canaries enabled.
     * 
     * @return the stackCanaryCount value.
     */
    public Long stackCanaryCount() {
        return this.stackCanaryCount;
    }

    /**
     * Get the strippedBinaryCount property: Total number of analyzed files that have debug symbols stripped.
     * 
     * @return the strippedBinaryCount value.
     */
    public Long strippedBinaryCount() {
        return this.strippedBinaryCount;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("summaryType", this.summaryType == null ? null : this.summaryType.toString());
        jsonWriter.writeNumberField("totalFiles", this.totalFiles);
        jsonWriter.writeNumberField("notExecutableStackCount", this.notExecutableStackCount);
        jsonWriter.writeNumberField("positionIndependentExecutableCount", this.positionIndependentExecutableCount);
        jsonWriter.writeNumberField("relocationReadOnlyCount", this.relocationReadOnlyCount);
        jsonWriter.writeNumberField("stackCanaryCount", this.stackCanaryCount);
        jsonWriter.writeNumberField("strippedBinaryCount", this.strippedBinaryCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BinaryHardeningSummaryResource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BinaryHardeningSummaryResource if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BinaryHardeningSummaryResource.
     */
    public static BinaryHardeningSummaryResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BinaryHardeningSummaryResource deserializedBinaryHardeningSummaryResource
                = new BinaryHardeningSummaryResource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedBinaryHardeningSummaryResource
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("summaryType".equals(fieldName)) {
                    deserializedBinaryHardeningSummaryResource.summaryType = SummaryType.fromString(reader.getString());
                } else if ("totalFiles".equals(fieldName)) {
                    deserializedBinaryHardeningSummaryResource.totalFiles = reader.getNullable(JsonReader::getLong);
                } else if ("notExecutableStackCount".equals(fieldName)) {
                    deserializedBinaryHardeningSummaryResource.notExecutableStackCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("positionIndependentExecutableCount".equals(fieldName)) {
                    deserializedBinaryHardeningSummaryResource.positionIndependentExecutableCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("relocationReadOnlyCount".equals(fieldName)) {
                    deserializedBinaryHardeningSummaryResource.relocationReadOnlyCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("stackCanaryCount".equals(fieldName)) {
                    deserializedBinaryHardeningSummaryResource.stackCanaryCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("strippedBinaryCount".equals(fieldName)) {
                    deserializedBinaryHardeningSummaryResource.strippedBinaryCount
                        = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBinaryHardeningSummaryResource;
        });
    }
}
