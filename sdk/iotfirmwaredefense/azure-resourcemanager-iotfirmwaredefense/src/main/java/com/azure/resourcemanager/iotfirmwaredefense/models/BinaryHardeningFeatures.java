// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Binary hardening features.
 */
@Immutable
public final class BinaryHardeningFeatures implements JsonSerializable<BinaryHardeningFeatures> {
    /*
     * Flag indicating the binary's stack is set to NX (no-execute).
     */
    private Boolean noExecute;

    /*
     * Flag indicating the binary was compiled to be a position independent executable.
     */
    private Boolean positionIndependentExecutable;

    /*
     * Flag indicating the binary has enabled relocation read-only protections.
     */
    private Boolean relocationReadOnly;

    /*
     * Flag indicating if the binary was compiled with stack canaries enabled.
     */
    private Boolean canary;

    /*
     * Flag indicating if debug symbols have been stripped from the binary.
     */
    private Boolean stripped;

    /**
     * Creates an instance of BinaryHardeningFeatures class.
     */
    private BinaryHardeningFeatures() {
    }

    /**
     * Get the noExecute property: Flag indicating the binary's stack is set to NX (no-execute).
     * 
     * @return the noExecute value.
     */
    public Boolean noExecute() {
        return this.noExecute;
    }

    /**
     * Get the positionIndependentExecutable property: Flag indicating the binary was compiled to be a position
     * independent executable.
     * 
     * @return the positionIndependentExecutable value.
     */
    public Boolean positionIndependentExecutable() {
        return this.positionIndependentExecutable;
    }

    /**
     * Get the relocationReadOnly property: Flag indicating the binary has enabled relocation read-only protections.
     * 
     * @return the relocationReadOnly value.
     */
    public Boolean relocationReadOnly() {
        return this.relocationReadOnly;
    }

    /**
     * Get the canary property: Flag indicating if the binary was compiled with stack canaries enabled.
     * 
     * @return the canary value.
     */
    public Boolean canary() {
        return this.canary;
    }

    /**
     * Get the stripped property: Flag indicating if debug symbols have been stripped from the binary.
     * 
     * @return the stripped value.
     */
    public Boolean stripped() {
        return this.stripped;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("noExecute", this.noExecute);
        jsonWriter.writeBooleanField("positionIndependentExecutable", this.positionIndependentExecutable);
        jsonWriter.writeBooleanField("relocationReadOnly", this.relocationReadOnly);
        jsonWriter.writeBooleanField("canary", this.canary);
        jsonWriter.writeBooleanField("stripped", this.stripped);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BinaryHardeningFeatures from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BinaryHardeningFeatures if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BinaryHardeningFeatures.
     */
    public static BinaryHardeningFeatures fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BinaryHardeningFeatures deserializedBinaryHardeningFeatures = new BinaryHardeningFeatures();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("noExecute".equals(fieldName)) {
                    deserializedBinaryHardeningFeatures.noExecute = reader.getNullable(JsonReader::getBoolean);
                } else if ("positionIndependentExecutable".equals(fieldName)) {
                    deserializedBinaryHardeningFeatures.positionIndependentExecutable
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("relocationReadOnly".equals(fieldName)) {
                    deserializedBinaryHardeningFeatures.relocationReadOnly = reader.getNullable(JsonReader::getBoolean);
                } else if ("canary".equals(fieldName)) {
                    deserializedBinaryHardeningFeatures.canary = reader.getNullable(JsonReader::getBoolean);
                } else if ("stripped".equals(fieldName)) {
                    deserializedBinaryHardeningFeatures.stripped = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBinaryHardeningFeatures;
        });
    }
}
