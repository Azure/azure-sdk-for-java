// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.iotfirmwaredefense.models.ProvisioningState;
import java.io.IOException;

/**
 * Password hash properties.
 */
@Immutable
public final class PasswordHash implements JsonSerializable<PasswordHash> {
    /*
     * ID for password hash
     */
    private String passwordHashId;

    /*
     * File path of the password hash
     */
    private String filePath;

    /*
     * Salt of the password hash
     */
    private String salt;

    /*
     * Hash of the password
     */
    private String hash;

    /*
     * Context of password hash
     */
    private String context;

    /*
     * User name of password hash
     */
    private String username;

    /*
     * Algorithm of the password hash
     */
    private String algorithm;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of PasswordHash class.
     */
    private PasswordHash() {
    }

    /**
     * Get the passwordHashId property: ID for password hash.
     * 
     * @return the passwordHashId value.
     */
    public String passwordHashId() {
        return this.passwordHashId;
    }

    /**
     * Get the filePath property: File path of the password hash.
     * 
     * @return the filePath value.
     */
    public String filePath() {
        return this.filePath;
    }

    /**
     * Get the salt property: Salt of the password hash.
     * 
     * @return the salt value.
     */
    public String salt() {
        return this.salt;
    }

    /**
     * Get the hash property: Hash of the password.
     * 
     * @return the hash value.
     */
    public String hash() {
        return this.hash;
    }

    /**
     * Get the context property: Context of password hash.
     * 
     * @return the context value.
     */
    public String context() {
        return this.context;
    }

    /**
     * Get the username property: User name of password hash.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Get the algorithm property: Algorithm of the password hash.
     * 
     * @return the algorithm value.
     */
    public String algorithm() {
        return this.algorithm;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("passwordHashId", this.passwordHashId);
        jsonWriter.writeStringField("filePath", this.filePath);
        jsonWriter.writeStringField("salt", this.salt);
        jsonWriter.writeStringField("hash", this.hash);
        jsonWriter.writeStringField("context", this.context);
        jsonWriter.writeStringField("username", this.username);
        jsonWriter.writeStringField("algorithm", this.algorithm);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PasswordHash from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PasswordHash if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PasswordHash.
     */
    public static PasswordHash fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PasswordHash deserializedPasswordHash = new PasswordHash();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("passwordHashId".equals(fieldName)) {
                    deserializedPasswordHash.passwordHashId = reader.getString();
                } else if ("filePath".equals(fieldName)) {
                    deserializedPasswordHash.filePath = reader.getString();
                } else if ("salt".equals(fieldName)) {
                    deserializedPasswordHash.salt = reader.getString();
                } else if ("hash".equals(fieldName)) {
                    deserializedPasswordHash.hash = reader.getString();
                } else if ("context".equals(fieldName)) {
                    deserializedPasswordHash.context = reader.getString();
                } else if ("username".equals(fieldName)) {
                    deserializedPasswordHash.username = reader.getString();
                } else if ("algorithm".equals(fieldName)) {
                    deserializedPasswordHash.algorithm = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedPasswordHash.provisioningState = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPasswordHash;
        });
    }
}
