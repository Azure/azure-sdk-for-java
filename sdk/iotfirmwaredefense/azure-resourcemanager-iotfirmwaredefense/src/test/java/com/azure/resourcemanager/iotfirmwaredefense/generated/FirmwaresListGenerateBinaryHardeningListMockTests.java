// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.iotfirmwaredefense.IoTFirmwareDefenseManager;
import com.azure.resourcemanager.iotfirmwaredefense.models.BinaryHardening;
import com.azure.resourcemanager.iotfirmwaredefense.models.CanaryFlag;
import com.azure.resourcemanager.iotfirmwaredefense.models.NxFlag;
import com.azure.resourcemanager.iotfirmwaredefense.models.PieFlag;
import com.azure.resourcemanager.iotfirmwaredefense.models.RelroFlag;
import com.azure.resourcemanager.iotfirmwaredefense.models.StrippedFlag;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class FirmwaresListGenerateBinaryHardeningListMockTests {
    @Test
    public void testListGenerateBinaryHardeningList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"binaryHardeningId\":\"qkqujidsu\",\"features\":{\"nx\":\"False\",\"pie\":\"True\",\"relro\":\"False\",\"canary\":\"True\",\"stripped\":\"True\"},\"architecture\":\"ccm\",\"path\":\"udxytlmoyrx\",\"class\":\"fudwpznt\",\"runpath\":\"dzhlrq\",\"rpath\":\"hckfrlhrx\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        IoTFirmwareDefenseManager manager =
            IoTFirmwareDefenseManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<BinaryHardening> response =
            manager
                .firmwares()
                .listGenerateBinaryHardeningList("zq", "gxywpmue", "fjz", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("qkqujidsu", response.iterator().next().binaryHardeningId());
        Assertions.assertEquals("ccm", response.iterator().next().architecture());
        Assertions.assertEquals("udxytlmoyrx", response.iterator().next().path());
        Assertions.assertEquals("fudwpznt", response.iterator().next().classProperty());
        Assertions.assertEquals("dzhlrq", response.iterator().next().runpath());
        Assertions.assertEquals("hckfrlhrx", response.iterator().next().rpath());
        Assertions.assertEquals(NxFlag.FALSE, response.iterator().next().nx());
        Assertions.assertEquals(PieFlag.TRUE, response.iterator().next().pie());
        Assertions.assertEquals(RelroFlag.FALSE, response.iterator().next().relro());
        Assertions.assertEquals(CanaryFlag.TRUE, response.iterator().next().canary());
        Assertions.assertEquals(StrippedFlag.TRUE, response.iterator().next().stripped());
    }
}
