// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.iotfirmwaredefense.IoTFirmwareDefenseManager;
import com.azure.resourcemanager.iotfirmwaredefense.models.BinaryHardeningResource;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BinaryHardeningsListByFirmwareMockTests {
    @Test
    public void testListByFirmware() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"binaryHardeningId\":\"rzqlveu\",\"features\":{\"nx\":true,\"pie\":false,\"relro\":true,\"canary\":true,\"stripped\":true},\"architecture\":\"cswsrtjri\",\"filePath\":\"rbpbewtghfgblcg\",\"class\":\"zvlvqhjkbegib\",\"runpath\":\"mxiebw\",\"rpath\":\"loayqcgw\"},\"id\":\"zjuzgwyz\",\"name\":\"htxongmtsavjc\",\"type\":\"pwxqp\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        IoTFirmwareDefenseManager manager = IoTFirmwareDefenseManager.configure().withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<BinaryHardeningResource> response = manager.binaryHardenings().listByFirmware("auwhvylwzbtdhx",
            "jznb", "pow", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("rzqlveu", response.iterator().next().binaryHardeningId());
        Assertions.assertEquals("cswsrtjri", response.iterator().next().architecture());
        Assertions.assertEquals("rbpbewtghfgblcg", response.iterator().next().filePath());
        Assertions.assertEquals("zvlvqhjkbegib", response.iterator().next().classProperty());
        Assertions.assertEquals("mxiebw", response.iterator().next().runpath());
        Assertions.assertEquals("loayqcgw", response.iterator().next().rpath());
        Assertions.assertEquals(true, response.iterator().next().nx());
        Assertions.assertEquals(false, response.iterator().next().pie());
        Assertions.assertEquals(true, response.iterator().next().relro());
        Assertions.assertEquals(true, response.iterator().next().canary());
        Assertions.assertEquals(true, response.iterator().next().stripped());
    }
}
