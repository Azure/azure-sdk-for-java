// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iotfirmwaredefense.IoTFirmwareDefenseManager;
import com.azure.resourcemanager.iotfirmwaredefense.models.BinaryHardeningResource;
import com.azure.resourcemanager.iotfirmwaredefense.models.ExecutableClass;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BinaryHardeningsListByFirmwareMockTests {
    @Test
    public void testListByFirmware() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"binaryHardeningId\":\"smond\",\"securityHardeningFeatures\":{\"noExecute\":true,\"positionIndependentExecutable\":true,\"relocationReadOnly\":true,\"canary\":false,\"stripped\":true},\"executableArchitecture\":\"pkwhojvpa\",\"filePath\":\"gxysmocmbqfqvm\",\"executableClass\":\"x86\",\"runpath\":\"zapvhelx\",\"rpath\":\"glyatddckcbcuej\",\"provisioningState\":\"Analyzing\"},\"id\":\"ciqibrhosx\",\"name\":\"dqrhzoymib\",\"type\":\"rq\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IoTFirmwareDefenseManager manager = IoTFirmwareDefenseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<BinaryHardeningResource> response = manager.binaryHardenings()
            .listByFirmware("yhrfouyftaakcpw", "yzvqt", "nubexk", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("smond", response.iterator().next().binaryHardeningId());
        Assertions.assertTrue(response.iterator().next().securityHardeningFeatures().noExecute());
        Assertions.assertTrue(response.iterator().next().securityHardeningFeatures().positionIndependentExecutable());
        Assertions.assertTrue(response.iterator().next().securityHardeningFeatures().relocationReadOnly());
        Assertions.assertFalse(response.iterator().next().securityHardeningFeatures().canary());
        Assertions.assertTrue(response.iterator().next().securityHardeningFeatures().stripped());
        Assertions.assertEquals("pkwhojvpa", response.iterator().next().executableArchitecture());
        Assertions.assertEquals("gxysmocmbqfqvm", response.iterator().next().filePath());
        Assertions.assertEquals(ExecutableClass.X86, response.iterator().next().executableClass());
        Assertions.assertEquals("zapvhelx", response.iterator().next().runpath());
        Assertions.assertEquals("glyatddckcbcuej", response.iterator().next().rpath());
    }
}
