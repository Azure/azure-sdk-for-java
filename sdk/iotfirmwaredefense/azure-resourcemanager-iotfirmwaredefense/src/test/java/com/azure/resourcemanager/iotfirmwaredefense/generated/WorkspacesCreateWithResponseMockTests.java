// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iotfirmwaredefense.IoTFirmwareDefenseManager;
import com.azure.resourcemanager.iotfirmwaredefense.models.Sku;
import com.azure.resourcemanager.iotfirmwaredefense.models.SkuTier;
import com.azure.resourcemanager.iotfirmwaredefense.models.Workspace;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkspacesCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Pending\"},\"sku\":{\"name\":\"mnvdfzn\",\"tier\":\"Free\",\"size\":\"dvxzbncblylpst\",\"family\":\"hh\",\"capacity\":1188392360},\"location\":\"dzu\",\"tags\":{\"wjmy\":\"scdntnevf\"},\"id\":\"tdss\",\"name\":\"s\",\"type\":\"tmweriofzpyq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IoTFirmwareDefenseManager manager = IoTFirmwareDefenseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Workspace response = manager.workspaces()
            .define("bsrfbj")
            .withRegion("tjrybnwjewgdr")
            .withExistingResourceGroup("hsqfsubcgjbirxbp")
            .withTags(
                mapOf("ifthnz", "vnaenqpehindoyg", "vhqlkthumaqo", "ndslgnayqigynduh", "aolps", "bgycduiertgccym"))
            .withSku(new Sku().withName("sotftpvj")
                .withTier(SkuTier.PREMIUM)
                .withSize("ilzznfqqnvwp")
                .withFamily("taruoujmkcj")
                .withCapacity(1589023977))
            .create();

        Assertions.assertEquals("dzu", response.location());
        Assertions.assertEquals("scdntnevf", response.tags().get("wjmy"));
        Assertions.assertEquals("mnvdfzn", response.sku().name());
        Assertions.assertEquals(SkuTier.FREE, response.sku().tier());
        Assertions.assertEquals("dvxzbncblylpst", response.sku().size());
        Assertions.assertEquals("hh", response.sku().family());
        Assertions.assertEquals(1188392360, response.sku().capacity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
