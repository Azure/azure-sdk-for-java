// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.iotfirmwaredefense.IoTFirmwareDefenseManager;
import com.azure.resourcemanager.iotfirmwaredefense.models.Firmware;
import com.azure.resourcemanager.iotfirmwaredefense.models.Status;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class FirmwaresCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"fileName\":\"cfbu\",\"vendor\":\"mfqjhhkxbp\",\"model\":\"ymjhxxjyngudivkr\",\"version\":\"wbxqzvszjfau\",\"description\":\"fdxxivetvtcqaqtd\",\"fileSize\":2614581750064023217,\"status\":\"Ready\",\"statusMessages\":[\"datavxysl\",\"databhsfxob\"],\"provisioningState\":\"Canceled\"},\"id\":\"blmpewww\",\"name\":\"bkrvrnsvshqj\",\"type\":\"hxcr\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        IoTFirmwareDefenseManager manager =
            IoTFirmwareDefenseManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Firmware response =
            manager
                .firmwares()
                .define("gvpgy")
                .withExistingWorkspace("xknalaulppg", "dtpnapnyiropuhp")
                .withFileName("git")
                .withVendor("edjvcslynqw")
                .withModel("cwzzhxgktr")
                .withVersion("ucnapkteoellwp")
                .withDescription("d")
                .withFileSize(4494990539994529771L)
                .withStatus(Status.EXTRACTING)
                .withStatusMessages(Arrays.asList("dataceopzfqrhhuaopp"))
                .create();

        Assertions.assertEquals("cfbu", response.fileName());
        Assertions.assertEquals("mfqjhhkxbp", response.vendor());
        Assertions.assertEquals("ymjhxxjyngudivkr", response.model());
        Assertions.assertEquals("wbxqzvszjfau", response.version());
        Assertions.assertEquals("fdxxivetvtcqaqtd", response.description());
        Assertions.assertEquals(2614581750064023217L, response.fileSize());
        Assertions.assertEquals(Status.READY, response.status());
    }
}
