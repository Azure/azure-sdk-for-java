// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotfirmwaredefense.fluent.models.WorkspaceInner;
import com.azure.resourcemanager.iotfirmwaredefense.models.Sku;
import com.azure.resourcemanager.iotfirmwaredefense.models.SkuTier;
import com.azure.resourcemanager.iotfirmwaredefense.models.WorkspaceProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkspaceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkspaceInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Extracting\"},\"sku\":{\"name\":\"ctazakljlahbcryf\",\"tier\":\"Basic\",\"size\":\"osygex\",\"family\":\"ojakhmsbzjhcrze\",\"capacity\":1286342154},\"location\":\"lxaolthqtrgqjbp\",\"tags\":{\"n\":\"s\",\"wzo\":\"gvfcj\",\"np\":\"xjtfelluwfzit\",\"lxofpdvhpfxxypin\":\"qfpjk\"},\"id\":\"nmayhuybb\",\"name\":\"podepoo\",\"type\":\"inuvamiheogn\"}")
            .toObject(WorkspaceInner.class);
        Assertions.assertEquals("lxaolthqtrgqjbp", model.location());
        Assertions.assertEquals("s", model.tags().get("n"));
        Assertions.assertEquals("ctazakljlahbcryf", model.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals("osygex", model.sku().size());
        Assertions.assertEquals("ojakhmsbzjhcrze", model.sku().family());
        Assertions.assertEquals(1286342154, model.sku().capacity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkspaceInner model = new WorkspaceInner().withLocation("lxaolthqtrgqjbp")
            .withTags(mapOf("n", "s", "wzo", "gvfcj", "np", "xjtfelluwfzit", "lxofpdvhpfxxypin", "qfpjk"))
            .withProperties(new WorkspaceProperties())
            .withSku(new Sku().withName("ctazakljlahbcryf")
                .withTier(SkuTier.BASIC)
                .withSize("osygex")
                .withFamily("ojakhmsbzjhcrze")
                .withCapacity(1286342154));
        model = BinaryData.fromObject(model).toObject(WorkspaceInner.class);
        Assertions.assertEquals("lxaolthqtrgqjbp", model.location());
        Assertions.assertEquals("s", model.tags().get("n"));
        Assertions.assertEquals("ctazakljlahbcryf", model.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals("osygex", model.sku().size());
        Assertions.assertEquals("ojakhmsbzjhcrze", model.sku().family());
        Assertions.assertEquals(1286342154, model.sku().capacity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
