// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotfirmwaredefense.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotfirmwaredefense.models.Sku;
import com.azure.resourcemanager.iotfirmwaredefense.models.SkuTier;
import com.azure.resourcemanager.iotfirmwaredefense.models.WorkspaceUpdate;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkspaceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkspaceUpdate model = BinaryData.fromString(
            "{\"sku\":{\"name\":\"kufubljo\",\"tier\":\"Free\",\"size\":\"ofjaeqjhqjb\",\"family\":\"v\",\"capacity\":171596164},\"tags\":{\"ybkzgcwr\":\"ulngsntn\",\"skcqvkocrcjd\":\"clxxwrljdo\",\"lssai\":\"wtnhxbnjbiksqr\",\"pee\":\"qpjwnzlljfm\"}}")
            .toObject(WorkspaceUpdate.class);
        Assertions.assertEquals("kufubljo", model.sku().name());
        Assertions.assertEquals(SkuTier.FREE, model.sku().tier());
        Assertions.assertEquals("ofjaeqjhqjb", model.sku().size());
        Assertions.assertEquals("v", model.sku().family());
        Assertions.assertEquals(171596164, model.sku().capacity());
        Assertions.assertEquals("ulngsntn", model.tags().get("ybkzgcwr"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkspaceUpdate model = new WorkspaceUpdate()
            .withSku(new Sku().withName("kufubljo")
                .withTier(SkuTier.FREE)
                .withSize("ofjaeqjhqjb")
                .withFamily("v")
                .withCapacity(171596164))
            .withTags(mapOf("ybkzgcwr", "ulngsntn", "skcqvkocrcjd", "clxxwrljdo", "lssai", "wtnhxbnjbiksqr", "pee",
                "qpjwnzlljfm"));
        model = BinaryData.fromObject(model).toObject(WorkspaceUpdate.class);
        Assertions.assertEquals("kufubljo", model.sku().name());
        Assertions.assertEquals(SkuTier.FREE, model.sku().tier());
        Assertions.assertEquals("ofjaeqjhqjb", model.sku().size());
        Assertions.assertEquals("v", model.sku().family());
        Assertions.assertEquals(171596164, model.sku().capacity());
        Assertions.assertEquals("ulngsntn", model.tags().get("ybkzgcwr"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
