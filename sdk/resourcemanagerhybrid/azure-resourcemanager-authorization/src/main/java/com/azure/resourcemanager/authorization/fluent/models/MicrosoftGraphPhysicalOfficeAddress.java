// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.HashMap;
import java.util.Map;

/** physicalOfficeAddress. */
@Fluent
public final class MicrosoftGraphPhysicalOfficeAddress {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MicrosoftGraphPhysicalOfficeAddress.class);

    /*
     * The city.
     */
    @JsonProperty(value = "city")
    private String city;

    /*
     * The country or region. It's a free-format string value, for example,
     * 'United States'.
     */
    @JsonProperty(value = "countryOrRegion")
    private String countryOrRegion;

    /*
     * Office location such as building and office number for an organizational
     * contact.
     */
    @JsonProperty(value = "officeLocation")
    private String officeLocation;

    /*
     * The postal code.
     */
    @JsonProperty(value = "postalCode")
    private String postalCode;

    /*
     * The state.
     */
    @JsonProperty(value = "state")
    private String state;

    /*
     * The street.
     */
    @JsonProperty(value = "street")
    private String street;

    /*
     * physicalOfficeAddress
     */
    @JsonIgnore private Map<String, Object> additionalProperties;

    /**
     * Get the city property: The city.
     *
     * @return the city value.
     */
    public String city() {
        return this.city;
    }

    /**
     * Set the city property: The city.
     *
     * @param city the city value to set.
     * @return the MicrosoftGraphPhysicalOfficeAddress object itself.
     */
    public MicrosoftGraphPhysicalOfficeAddress withCity(String city) {
        this.city = city;
        return this;
    }

    /**
     * Get the countryOrRegion property: The country or region. It's a free-format string value, for example, 'United
     * States'.
     *
     * @return the countryOrRegion value.
     */
    public String countryOrRegion() {
        return this.countryOrRegion;
    }

    /**
     * Set the countryOrRegion property: The country or region. It's a free-format string value, for example, 'United
     * States'.
     *
     * @param countryOrRegion the countryOrRegion value to set.
     * @return the MicrosoftGraphPhysicalOfficeAddress object itself.
     */
    public MicrosoftGraphPhysicalOfficeAddress withCountryOrRegion(String countryOrRegion) {
        this.countryOrRegion = countryOrRegion;
        return this;
    }

    /**
     * Get the officeLocation property: Office location such as building and office number for an organizational
     * contact.
     *
     * @return the officeLocation value.
     */
    public String officeLocation() {
        return this.officeLocation;
    }

    /**
     * Set the officeLocation property: Office location such as building and office number for an organizational
     * contact.
     *
     * @param officeLocation the officeLocation value to set.
     * @return the MicrosoftGraphPhysicalOfficeAddress object itself.
     */
    public MicrosoftGraphPhysicalOfficeAddress withOfficeLocation(String officeLocation) {
        this.officeLocation = officeLocation;
        return this;
    }

    /**
     * Get the postalCode property: The postal code.
     *
     * @return the postalCode value.
     */
    public String postalCode() {
        return this.postalCode;
    }

    /**
     * Set the postalCode property: The postal code.
     *
     * @param postalCode the postalCode value to set.
     * @return the MicrosoftGraphPhysicalOfficeAddress object itself.
     */
    public MicrosoftGraphPhysicalOfficeAddress withPostalCode(String postalCode) {
        this.postalCode = postalCode;
        return this;
    }

    /**
     * Get the state property: The state.
     *
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Set the state property: The state.
     *
     * @param state the state value to set.
     * @return the MicrosoftGraphPhysicalOfficeAddress object itself.
     */
    public MicrosoftGraphPhysicalOfficeAddress withState(String state) {
        this.state = state;
        return this;
    }

    /**
     * Get the street property: The street.
     *
     * @return the street value.
     */
    public String street() {
        return this.street;
    }

    /**
     * Set the street property: The street.
     *
     * @param street the street value to set.
     * @return the MicrosoftGraphPhysicalOfficeAddress object itself.
     */
    public MicrosoftGraphPhysicalOfficeAddress withStreet(String street) {
        this.street = street;
        return this;
    }

    /**
     * Get the additionalProperties property: physicalOfficeAddress.
     *
     * @return the additionalProperties value.
     */
    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: physicalOfficeAddress.
     *
     * @param additionalProperties the additionalProperties value to set.
     * @return the MicrosoftGraphPhysicalOfficeAddress object itself.
     */
    public MicrosoftGraphPhysicalOfficeAddress withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    @JsonAnySetter
    void withAdditionalProperties(String key, Object value) {
        if (additionalProperties == null) {
            additionalProperties = new HashMap<>();
        }
        additionalProperties.put(key, value);
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
