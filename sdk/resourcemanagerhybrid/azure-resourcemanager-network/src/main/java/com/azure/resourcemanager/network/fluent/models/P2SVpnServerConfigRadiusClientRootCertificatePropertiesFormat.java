// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Properties of the Radius client root certificate of P2SVpnServerConfiguration. */
@Fluent
public final class P2SVpnServerConfigRadiusClientRootCertificatePropertiesFormat {
    @JsonIgnore
    private final ClientLogger logger =
        new ClientLogger(P2SVpnServerConfigRadiusClientRootCertificatePropertiesFormat.class);

    /*
     * The Radius client root certificate thumbprint.
     */
    @JsonProperty(value = "thumbprint")
    private String thumbprint;

    /*
     * The provisioning state of the Radius client root certificate resource.
     * Possible values are: 'Updating', 'Deleting', and 'Failed'.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /**
     * Get the thumbprint property: The Radius client root certificate thumbprint.
     *
     * @return the thumbprint value.
     */
    public String thumbprint() {
        return this.thumbprint;
    }

    /**
     * Set the thumbprint property: The Radius client root certificate thumbprint.
     *
     * @param thumbprint the thumbprint value to set.
     * @return the P2SVpnServerConfigRadiusClientRootCertificatePropertiesFormat object itself.
     */
    public P2SVpnServerConfigRadiusClientRootCertificatePropertiesFormat withThumbprint(String thumbprint) {
        this.thumbprint = thumbprint;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the Radius client root certificate resource.
     * Possible values are: 'Updating', 'Deleting', and 'Failed'.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
