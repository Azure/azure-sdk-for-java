// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resources.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.resources.models.PolicyMode;
import com.azure.resourcemanager.resources.models.PolicyType;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The policy definition properties. */
@Fluent
public final class PolicyDefinitionProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(PolicyDefinitionProperties.class);

    /*
     * The type of policy definition. Possible values are NotSpecified,
     * BuiltIn, and Custom.
     */
    @JsonProperty(value = "policyType")
    private PolicyType policyType;

    /*
     * The policy definition mode. Possible values are NotSpecified, Indexed,
     * and All.
     */
    @JsonProperty(value = "mode")
    private PolicyMode mode;

    /*
     * The display name of the policy definition.
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /*
     * The policy definition description.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * The policy rule.
     */
    @JsonProperty(value = "policyRule")
    private Object policyRule;

    /*
     * The policy definition metadata.
     */
    @JsonProperty(value = "metadata")
    private Object metadata;

    /*
     * Required if a parameter is used in policy rule.
     */
    @JsonProperty(value = "parameters")
    private Object parameters;

    /**
     * Get the policyType property: The type of policy definition. Possible values are NotSpecified, BuiltIn, and
     * Custom.
     *
     * @return the policyType value.
     */
    public PolicyType policyType() {
        return this.policyType;
    }

    /**
     * Set the policyType property: The type of policy definition. Possible values are NotSpecified, BuiltIn, and
     * Custom.
     *
     * @param policyType the policyType value to set.
     * @return the PolicyDefinitionProperties object itself.
     */
    public PolicyDefinitionProperties withPolicyType(PolicyType policyType) {
        this.policyType = policyType;
        return this;
    }

    /**
     * Get the mode property: The policy definition mode. Possible values are NotSpecified, Indexed, and All.
     *
     * @return the mode value.
     */
    public PolicyMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: The policy definition mode. Possible values are NotSpecified, Indexed, and All.
     *
     * @param mode the mode value to set.
     * @return the PolicyDefinitionProperties object itself.
     */
    public PolicyDefinitionProperties withMode(PolicyMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the displayName property: The display name of the policy definition.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the policy definition.
     *
     * @param displayName the displayName value to set.
     * @return the PolicyDefinitionProperties object itself.
     */
    public PolicyDefinitionProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: The policy definition description.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The policy definition description.
     *
     * @param description the description value to set.
     * @return the PolicyDefinitionProperties object itself.
     */
    public PolicyDefinitionProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the policyRule property: The policy rule.
     *
     * @return the policyRule value.
     */
    public Object policyRule() {
        return this.policyRule;
    }

    /**
     * Set the policyRule property: The policy rule.
     *
     * @param policyRule the policyRule value to set.
     * @return the PolicyDefinitionProperties object itself.
     */
    public PolicyDefinitionProperties withPolicyRule(Object policyRule) {
        this.policyRule = policyRule;
        return this;
    }

    /**
     * Get the metadata property: The policy definition metadata.
     *
     * @return the metadata value.
     */
    public Object metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The policy definition metadata.
     *
     * @param metadata the metadata value to set.
     * @return the PolicyDefinitionProperties object itself.
     */
    public PolicyDefinitionProperties withMetadata(Object metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the parameters property: Required if a parameter is used in policy rule.
     *
     * @return the parameters value.
     */
    public Object parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Required if a parameter is used in policy rule.
     *
     * @param parameters the parameters value to set.
     * @return the PolicyDefinitionProperties object itself.
     */
    public PolicyDefinitionProperties withParameters(Object parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
